[module php('http://www.eclipse.org/uml2/4.0.0/UML')/]

[template public generate(c : Class)]
[comment @main/]
[file (classFilename(c), false, 'UTF-8')]
<?php
[genBasicCommentary(c)/]

[namespace(c)/]


[if (c.isAbstract)]abstract [/if]class [c.name/][if (c.generalization->notEmpty())] extends [c.generalization.general.name/][/if][if (c.interfaceRealization->notEmpty())] implements [c.interfaceRealization.contract.name->sep(', ')/][/if]
{

    [if (not c.ownedAttribute->isEmpty())][for (prop : Property | c.ownedAttribute)]
    [genClassAttribute(prop)/]
    
    [/for][/if]
    [if (not c.ownedOperation->isEmpty())]
        [for (ops : Operation | c.ownedOperation)]
    [header(ops)/]
	
	    [/for]
    [/if]        
}
[/file]
[/template]

[template public generate(i : Interface)]
[comment @main/]
[file (interfaceFilename(i), false, 'UTF-8')]
<?php
[genBasicCommentaryInterface(i)/]

[namespaceInterface(i)/]


interface [i.name/][if (i.generalization->notEmpty())] extends [i.generalization.general.name/][/if]
{
    [if (not i.ownedAttribute->isEmpty())]
        [for (prop : Property | i.ownedAttribute)]
    [genClassAttribute(prop)/]
        [/for]
    [/if]

    [if (not i.ownedOperation->isEmpty())]
        [for (ops : Operation | i.ownedOperation)]
    [interfaceMethod(ops)/]
	
	    [/for]
    [/if]        
}    
[/file]
[/template]

[template public classFilename(c : Class)]
[for (n : Namespace | c.allNamespaces()->reverse())][genClassNamespace(n, c.getModel())/][printFilenameBar(n, c)/][/for]/[c.name/].php
[/template]

[template public printFilenameBar(n : Namespace, c : Class)]
[if (n.name <> c.getModel().name and n.name <> c._package.name)]/[/if]
[/template]

[template public interfaceFilename(c : Interface)]
[for (n : Namespace | c.allNamespaces()->reverse())][genClassNamespace(n, c.getModel())/][printInterfaceFilenameBar(n, c)/][/for]/[c.name/].php
[/template]

[template public printInterfaceFilenameBar(n : Namespace, c : Interface)]
[if (n.name <> c.getModel().name and n.name <> c._package.name)]/[/if]
[/template]

[template public header(o : Operation)]
/**
[for (p : Parameter | o.ownedParameter->excluding(o.getReturnResult()))] * @param [commentParam(p)/]
[/for]
[if (o.getReturnResult() <> null and o.getReturnResult().type <> null)]
 * @return [o.getReturnResult().returnParam()/]
[/if]
 */
[if (o.isAbstract = true)][writeAbstractMethod(o)/][else][writeMethod(o)/][/if]
[/template]

[template public interfaceMethod(o : Operation)]
/**
[for (p : Parameter | o.ownedParameter->excluding(o.getReturnResult()))] * @param [commentParam(p)/]
[/for]
[if (o.getReturnResult() <> null and o.getReturnResult().type <> null)]
 * @return [o.getReturnResult().returnParam()/]
[/if]
 */
[writeAbstractMethod(o)/]
[/template]

[template public writeAbstractMethod(o : Operation)]
[methodName(o)/]([for (p : Parameter | o.ownedParameter->excluding(o.getReturnResult())) separator(', ')][param(p)/][/for]);
[/template]

[template public writeMethod(o : Operation)]
[methodName(o)/]([for (p : Parameter | o.ownedParameter->excluding(o.getReturnResult())) separator(', ')][param(p)/][/for])
{
    // TODO: Implement [o.name/] method.
}
[/template]

[template public methodName(o : Operation)]
[if (o.isAbstract = true)]abstract [/if][o.visibility/][if (o.isStatic = true)] static[/if] function [o.name/]
[/template]

[template public param(p : Parameter) post (trim())]
[if (p.oclIsKindOf(TypedElement))][p.type.genType()/] [/if]$[p.name/]
[/template]

[template public returnParam(m : MultiplicityElement) post (trim())]
[if (m.oclIsKindOf(TypedElement))][m.oclAsType(TypedElement).type.genCommentType()/][/if]
[/template]

[template public genType(t : Type)]
[if (t.oclIsTypeOf(PrimitiveType))][writePrimitiveType(t, false)/][else][t.name/][/if]
[/template]

[template public genCommentType(t : Type)]
[if (t.oclIsTypeOf(PrimitiveType))][writePrimitiveType(t, true)/][else][t.name/][/if]
[/template]

[template public writePrimitiveType(t : Type, isComment : Boolean) post (trim())]
[if (t.name = 'String' and isComment = true)]string
[elseif (t.name = 'Boolean' and isComment = true)]bool
[elseif (t.name = 'Integer' and isComment = true)]int
[elseif (t.name = 'Double' and isComment = true)]double
[elseif (t.name = 'Double')]
[elseif (t.name = 'Real' and isComment = true)]float
[elseif (t.name = 'Real')]
[elseif (t.name = 'Float' and isComment = true)]float
[elseif (t.name = 'Float')]
[elseif (t.name = 'Integer')]
[elseif (t.name = 'ByteArray')]array
[elseif (t.name = 'Date')]\DateTime
[elseif (t.name = 'Char')]string
[/if]
[/template]

[template public commentParam(p : Parameter)]
[if (p.oclIsKindOf(TypedElement))][p.type.genCommentType()/] [/if]$[p.name/]
[/template]

[template public genClassAttribute(prop : Property)]
/*
 * @var [genCommentType(prop.type)/]
 */
[prop.visibility/] $[prop.name/];
[/template]

[template public namespace(c : Class)]
namespace [for (n : Namespace | c.allNamespaces()->reverse())][genClassNamespace(n, c.getModel())/][printNamespaceBar(n, c)/][/for];
[/template]

[template public genClassNamespace(n : Namespace, model : Model)]
[if (n.name <> model.name)][n.name/][/if]
[/template]

[template public printNamespaceBar(n : Namespace, c : Class)]
[if (n.name <> c.getModel().name and n.name <> c._package.name)]\[/if]
[/template]

[template public genBasicCommentary(c : Class)]
/**
 * Created with PHP 5.6 generator
 * User: 
 * PHP 5.6 generator created by Victor MECH - April 2016
*/
[/template]

[template public genBasicCommentaryInterface(i : Interface)]
/**
 * Created with PHP 5.6 generator
 * User: 
 * PHP 5.6 generator created by Victor MECH - April 2016
*/
[/template]

[template public namespaceInterface(inter : Interface)]
namespace [for (n : Namespace | inter.allNamespaces()->reverse())][genClassNamespace(n, inter.getModel())/][printNamespaceBarInterface(n, inter)/][/for];
[/template]

[template public printNamespaceBarInterface(n : Namespace, i : Interface)]
[if (n.name <> i.getModel().name and n.name <> i._package.name)]\[/if]
[/template]
