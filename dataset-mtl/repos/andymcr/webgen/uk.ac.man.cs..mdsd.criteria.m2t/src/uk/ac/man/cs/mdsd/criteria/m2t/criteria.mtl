[comment encoding = UTF-8 /]
[module criteria(
	'http://cs.manchester.ac.uk/mdsd/Expression')]


[template public valueExpression(criteria : Expression)
	? (criteria.oclIsTypeOf(NullLiteral)) post(trim())]
NULL
[/template]

[template public valueExpression(criteria : Expression)
	? (criteria.oclIsTypeOf(BooleanLiteral)) post(trim())]
[let literal : BooleanLiteral = criteria.oclAsType(BooleanLiteral)]
[if (literal.value)]
true
[else]
false
[/if]
[/let]
[/template]

[template public valueExpression(criteria : Expression)
	? (criteria.oclIsTypeOf(IntegerLiteral)) post(trim())]
[let literal : IntegerLiteral = criteria.oclAsType(IntegerLiteral)]
[literal.value/]
[/let]
[/template]

[template public valueExpression(criteria : Expression)
	? (criteria.oclIsTypeOf(StringLiteral)) post(trim())]
[let literal : StringLiteral = criteria.oclAsType(StringLiteral)]
'[literal.value/]'
[/let]
[/template]

[template public valueExpression(criteria : Expression)
	? (criteria.oclIsTypeOf(TimeLiteral)) post(trim())]
[let literal : TimeLiteral = criteria.oclAsType(TimeLiteral)]
new \DateTime('[literal.value/]')
[/let]
[/template]

[template public valueExpression(criteria : Expression)
	? (criteria.oclIsTypeOf(CurrentTime)) post(trim())]
':now'
[/template]


[template public valueExpression(criteria : Expression)
	? (criteria.oclIsTypeOf(Function)) post(trim())]
[let function : Function = criteria.oclAsType(Function)]
[function.name/]('Y-m-d H:i:s')
[/let]
[/template]


[template public valueExpression(criteria : Expression)
	? (criteria.oclIsTypeOf(PredicateBooleanOperator)) post(trim())]
[let predicate : PredicateBooleanOperator = criteria.oclAsType(PredicateBooleanOperator)]
[for (expression : Expression | predicate.expressions)]
[expression.valueExpression()/]
[/for]
[/let]
[/template]

[query public generateOperator(operator : BooleanOperator) : String
	= if operator = BooleanOperator::And then
			'AND'
		else if operator = BooleanOperator::Or then
			'OR'
		else
			'?'
		endif endif
/]

[query public generateOperator(operator : ComparisionOperator) : String
	= if operator = ComparisionOperator::GreaterThan then
			'>'
		else if operator = ComparisionOperator::LessThan then
			'<'
		else
			'?'
		endif endif
/]
