[comment encoding = UTF-8 /]
[module indexMethods(
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::controllers::commonMethods/]


[template public beforeMethod(unit : ContentUnit)
	? (unit.oclIsKindOf(IndexUnit)) post(trim())]
[let indexUnit : IndexUnit = unit.oclAsType(IndexUnit)]
[/let]
[/template]

[template public afterMethod(unit : ContentUnit)
	? (unit.oclIsKindOf(IndexUnit)) post(trim())]
[let indexUnit : IndexUnit = unit.oclAsType(IndexUnit)]
[indexUnit.createAndBindTemplate()/]
[if (indexUnit.defaultPaginationSize > 0)]
$page = max($this->request->query('[indexUnit.pagination.parameters->first().name/]'), 1);
[/if]
[if (indexUnit.hasFilters())]
[indexUnit.filterSelect()/]
else
[/if]
[if (not indexUnit.defaultSelection.oclIsUndefined())]
	[if (indexUnit.defaultPaginationSize > 0)]
{
	[/if]
    [indexUnit.defaultSelectionCall()/]
	[if (indexUnit.defaultPaginationSize > 0)]
    [indexUnit.defaultSelectionCountCall()/]
}
	[/if]
[elseif (indexUnit.defaultPaginationSize > 0)]
{
    [indexUnit.findAllPaginated()/]
}
[else]
$[unit.instanceName()/] = ORM::factory('[unit.modelName()/]')->find_all();
[/if]
$[indexUnit.templateInstanceName()/]->bind('[indexUnit.modelInstanceName()/]', $[indexUnit.instanceName()/]);
[if (indexUnit.defaultPaginationSize > 0)]
$[indexUnit.paginationName()/] = Pagination::factory(array(
	'group' => '[indexUnit.uniqueName()/]',
	'total_items' => $[indexUnit.countName()/]
));
$[indexUnit.templateInstanceName()/]->bind('pagination', $[indexUnit.paginationName()/]);
[/if]
[/let]
[/template]

[template private filterSelect(unit : IndexUnit) post(trim())]
[for (f : Filter | unit.filters()) separator('else ')]
if ([for (parameter : FilterParameter | f.parameters) separator(' || ')][parameter.queryPresentTest()/][/for])
[unit.filterCall(f)/][/for]
[/template]

[template private queryPresentTest(parameter : FilterParameter) post(trim())]
array_key_exists('[parameter.name/]', $this->request->query())
[/template]

[template private filterCall(unit : IndexUnit, f : Filter)]
[if (f.selection.parameters->notEmpty() or not unit.pagination.oclIsUndefined())]
{
	[for (parameter : FormalParameter | f.selection.parameters)]
	[let actual : FilterParameter = f.matchingActual(parameter)]
    $[parameter.name/] = $this->request->query('[actual.name/]');
	[/let]
	[/for]
[/if]
    [unit.selectionCall(f.selection, f)/]
	[if (not unit.pagination.oclIsUndefined())]
    [unit.selectionCountCall(f.selection, f)/]
	[/if]
[if (f.selection.parameters->notEmpty() or not unit.pagination.oclIsUndefined())]
}
[/if]
[/template]

[template private findAllPaginated(unit : IndexUnit)]
$[unit.instanceName()/] = ORM::factory('[unit.modelName()/]')->paginated($page, [unit.defaultPaginationSize/]);
$[unit.countName()/] = ORM::factory('[unit.modelName()/]')->count_all();
[/template]

[template private defaultSelectionCall(unit : IndexUnit)]
$[unit.instanceName()/] = ORM::factory('[unit.modelName()/]')->[unit.defaultSelection.instanceName()/]([unit.paginationParameters()/]);
[/template]

[template private defaultSelectionCountCall(unit : IndexUnit)]
$[unit.countName()/] = ORM::factory('[unit.modelName()/]')->[unit.defaultSelection.countName()/]();
[/template]

[template private selectionCall(unit : IndexUnit, selection : Selection, f : Filter)]
$[unit.instanceName()/] = ORM::factory('[unit.modelName()/]')->[selection.instanceName()/]([unit.selectionActuals(f)/][if(f.selection.parameters->notEmpty())]
, [/if][unit.paginationParameters()/]);
[/template]

[template private selectionCountCall(unit : IndexUnit, selection : Selection, f : Filter)]
$[unit.countName()/] = ORM::factory('[unit.modelName()/]')->[selection.countName()/]([unit.selectionActuals(f)/]);
[/template]

[template private selectionActuals(unit : IndexUnit, f : Filter) post(trim())]
[if (not f.oclIsUndefined())]
	[for (parameter : FormalParameter | f.selection.parameters) separator(', ')]
$[parameter.name/][/for]
[/if]
[/template]

[template private paginationParameters(unit : IndexUnit) post(trim())]
[if (unit.defaultPaginationSize > 0)]
TRUE, $page, [unit.defaultPaginationSize/]
[else]
FALSE
[/if]
[/template]


[template public unitMethods(unit : DynamicUnit)
	? (unit.oclIsKindOf(IndexUnit)) post(trim())]
[let indexUnit : IndexUnit = unit.oclAsType(IndexUnit)]
[indexUnit.actionMethod()/]
[/let]
[/template]

[template private actionMethod(unit : IndexUnit) post(trim())]
public function action_[unit.actionName()/]()
{
}
[/template]