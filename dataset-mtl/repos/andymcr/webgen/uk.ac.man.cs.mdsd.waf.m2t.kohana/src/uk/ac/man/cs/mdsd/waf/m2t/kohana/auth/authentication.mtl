[comment encoding = UTF-8 /]
[module authentication(
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::names/]


[template public authenticationModule(authentication : Authentication)
	? (authentication.oclIsTypeOf(LocalAuthenticationSystem))]
[let localAuthentication : LocalAuthenticationSystem = authentication.oclAsType(LocalAuthenticationSystem)]
[file(authentication.webgenAuthDirectory().concat('/').concat(authentication.webgenAuthName()).concat(authentication.executableExtension()), false)]
<?php defined('SYSPATH') OR die('No Direct Script Access');

class [authentication.webgenAuthClassName()/] extends Auth
{
	var $message = 'Invalid username or password';

    private function load_authentication($login_id)
    {
		return ORM::factory('[localAuthentication.authentication.name/]', array(
			'[localAuthentication.loginUnit.loginIdField.modelPropertyName()/]' => $login_id
		));
	}

	protected function _login($login_id, $password, $remember)
    {
[if (not localAuthentication.autoLogin.oclIsUndefined())]
		if (mt_rand(1, 100) === 1)
			[localAuthentication.autoLogin.modelClassName()/]::delete_expired($this->_config['['/]'lifetime'[']'/]);

		$maximum_attempts = $this->_config['['/]'maximum_attempts'[']'/];
		$attempt_expiry_period = $this->_config['['/]'attempt_expiry_period'[']'/];

[/if]
		if (is_object($login_id))
		{
			$authentication = $login_id;
			$login_id = $authentication->[localAuthentication.loginUnit.loginIdField.modelPropertyName()/];
		}
		else
			$authentication = $this->load_authentication($login_id);
		$password_hashed = $this->hash_password_and_salt($password, $authentication->salt);

 		if ($authentication->password === $password_hashed)
		{
			if ($authentication->enabled == '0')
			{
				$this->message = 'Your account has not yet been activated';
			}
			else if ($authentication->locked == '1')
			{
				$this->message = 'Your account is currently locked out';
			}
[if (not localAuthentication.loginAttempt.oclIsUndefined())]
			else if ([localAuthentication.loginAttempt.modelClassName()/]::attempts_exceeded($login_id, $maximum_attempts, $attempt_expiry_period))
			{
				$this->message = 'Maximum login atempts exceeded';
			}
[/if]
			else
			{
[if (not localAuthentication.loginAttempt.oclIsUndefined())]
				[localAuthentication.loginAttempt.modelClassName()/]::clear_attempts($login_id, $attempt_expiry_period);
[/if]
				$authentication->record_last_login();
	
[if (not localAuthentication.autoLogin.oclIsUndefined())]
				if ($remember === TRUE)
				{
					$key = substr(md5(uniqid(rand() . Cookie::get(Session::instance()->name()))), 0, 16);
					$autologin = [localAuthentication.autoLogin.modelClassName()/]::create_token($key, $authentication, $this->user_agent_id());
					if ($autologin->loaded())
						$this->set_autologin_cookie(serialize(array(
							'user_id' => $login_id,
							'key' => $key
						)));
				}

[/if]
				$this->complete_login($login_id);
				return TRUE;
			}
		}

[if (not localAuthentication.loginAttempt.oclIsUndefined())]
		if (![localAuthentication.loginAttempt.modelClassName()/]::attempts_exceeded($login_id, $maximum_attempts, $attempt_expiry_period))
			[localAuthentication.loginAttempt.modelClassName()/]::record_attempt($login_id);
[/if]
		return FALSE;
   }

	public function password($username)
	{
		return $this->load_authentication($username);
	}

	public function hash_password_and_salt($password, $salt)
	{
		if (empty($password))
			return $password;

		// filters pass model not salt field
		if ($salt instanceof ORM)
			$salt = $salt->salt;

		return sha1($salt . $password);
	}

	public function check_password($password)
	{
		$authentication = $this->get_user();

		if (!$authentication)
			return FALSE;

		return ($this->hash_password_and_salt($password, $authentication->salt) === $authentication->password);
	}

	public function logged_in($role = NULL)
	{
		$authentication = $this->get_user();
		if (!$authentication)
			return FALSE;

		return TRUE;
	}

    public function get_user($default = NULL)
    {
 		$login_id = parent::get_user($default);
		if ($login_id === $default)
[if (localAuthentication.autoLogin.oclIsUndefined())]
			return $default;
[else]
		{
			$authentication = $this->auto_login();
			if ($authentication === FALSE)
				return $default;
			else
				return $authentication;
		}
[/if]
		else
		{
			$authentication = $this->load_authentication($login_id);
			if ($authentication->loaded())
				return $authentication;
			else
				return $default;
		}
    }

[if (not localAuthentication.autoLogin.oclIsUndefined())]
	private function auto_login()
	{
		$cookie = Cookie::get('authautologin');
		if ($cookie)
		{
			$autologin = [localAuthentication.autoLogin.modelClassName()/]::load_token($cookie,
				$this->user_agent_id(), $this->_config['['/]'lifetime'[']'/]);
			if (is_object($autologin) && $autologin->loaded())
			{
				$autologin->record_last_login();
				$this->set_autologin_cookie($cookie);
				$x = unserialize($cookie);
				$authentication = $this->load_authentication($x['['/]'user_id'[']'/]);
				$this->complete_login($authentication->[localAuthentication.loginUnit.loginIdField.modelPropertyName()/]);
				return $authentication;
			}
		}

		return FALSE;
	}

	private function set_autologin_cookie($data)
	{
		Cookie::set('authautologin', $data, $this->_config['['/]'lifetime'[']'/]);
	}

	private function user_agent_id()
	{
		return substr(Request::$user_agent, 0, 150);
	}

	public function logout($destroy = FALSE, $logout_all = FALSE)
	{
		$cookie = Cookie::get('authautologin');
		if ($cookie)
		{
			if($logout_all)
				[localAuthentication.autoLogin.modelClassName()/]::delete_user();
			else
			{
				$autologin = [localAuthentication.autoLogin.modelClassName()/]::load_token($cookie,
					$this->user_agent_id(), $this->_config['['/]'lifetime'[']'/]);
				if (is_object($autologin) && $autologin->loaded())
					$autologin->delete();
			}
			Cookie::delete('authautologin');
		}

		return parent::logout($destroy);
	}

[/if]
	public function get_actual_user($default = NULL)
	{
		$authentication = $this->get_user($default);
		if ($authentication === $default)
			return $default;

		return [localAuthentication.user.modelClassName()/]::authenticated_user($authentication);
	}

}
[/file]
[/let]
[/template]
