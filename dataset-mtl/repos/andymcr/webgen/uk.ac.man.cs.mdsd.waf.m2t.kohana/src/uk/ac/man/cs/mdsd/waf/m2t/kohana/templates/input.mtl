[comment encoding = UTF-8 /]
[module input(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::templates::display/]


[template public unitView(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit) or unit.oclIsKindOf(ControlUnit) and not unit.oclIsTypeOf(SearchUnit)) post(trim())]
[file(unit.viewFilename(), false)]
[let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)]
<section class="[dynamicUnit.styleClass/]<?php
    if (isset($[dynamicUnit.errorName()/]) || isset($[dynamicUnit.fieldErrorsName()/]))
        echo ' [dynamicUnit.errorClass/]';
?>" id="[dynamicUnit.instanceName()/]">
 <h1 class="[dynamicUnit.captionClass/][if (dynamicUnit.omitCaption)] hidden[/if]"><?php echo __('[dynamicUnit.displayLabel/]'); ?></h1>
 <div class="unit_padding">
  <section class="[dynamicUnit.errorClass/]<?php if (empty($[dynamicUnit.errorName()/])[if (dynamicUnit.hasMessagesOnFormHead())] && empty($field_errors)[/if]) echo ' hidden'; ?>">
<?php if (!empty($[dynamicUnit.errorName()/])) { ?>
   <p class="[dynamicUnit.errorClass/]"><?php echo html::chars(__($[dynamicUnit.errorName()/])); ?></p>
<?php } ?>
[if (dynamicUnit.hasMessagesOnFormHead())]
   [dynamicUnit.formErrors()/]
[/if]
  </section>
[if (dynamicUnit.hasInterfaceFields())]
  <?php
	$unit_fields = $[dynamicUnit.modelInstanceName()/]->unit_fields();
?>
[/if]
[if (unit.oclIsTypeOf(MapUnit))]
  [dynamicUnit.map()/]
[else]
  [dynamicUnit.form()/]
[/if]
 </div>
</section>
[/let]
[/file]
[/template]

[template public unitView(unit : ContentUnit)
	? (unit.oclIsTypeOf(SearchUnit)) post(trim())]
[file(unit.viewFilename(), false)]
[let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)]
[let accessor : String = '$'.concat(dynamicUnit.modelInstanceName())]
<section class="[dynamicUnit.styleClass/]<?php
	if (isset($[dynamicUnit.fieldErrorsName()/])) {
		echo ' [dynamicUnit.errorClass/]';
	}
?>" id="[dynamicUnit.instanceName()/]">
 <h1 class="[dynamicUnit.captionClass/][if (dynamicUnit.omitCaption)] hidden[/if]"><?php echo __('[dynamicUnit.displayLabel/]'); ?></h1>
 <div class="unit_padding">
  <section class="[dynamicUnit.errorClass/]<?php if (empty($[dynamicUnit.errorName()/])[if (dynamicUnit.hasMessagesOnFormHead())] && empty($field_errors)[/if]) echo ' hidden'; ?>">
<?php if (!empty($[dynamicUnit.errorName()/])) { ?>
   <p class="[dynamicUnit.errorClass/]"><?php echo html::chars(__($[dynamicUnit.errorName()/])); ?></p>
<?php } ?>
[if (dynamicUnit.hasMessagesOnFormHead())]
   [dynamicUnit.formErrors()/]
[/if]
  </section>
[if (dynamicUnit.hasInterfaceFields())]
  <?php
	$unit_fields = [accessor/]->unit_fields();
?>
[/if]
[dynamicUnit.form()/]
 </div>
</section>
[/let]
[/let]
[/file]
[/template]


[template private form(unit : DynamicUnit) post(trim())]
[unit.formOpen()/]
[for (field : UnitField | unit.inputAndEmbeddedFields())]
 [field.formField(unit)/]
[/for]
[unit.formControlAndClose()/]
[/template]

[template private formOpen(unit : DynamicUnit) post(trim())]
<?php
    echo Form::open(
        Route::get([if (unit.oclIsKindOf(Selectable))]
$[unit.modelInstanceName()/]->loaded() ? '[unit.routeName()/]' : '[unit.routeName(true)/]'[else]
'[unit.routeName()/]'[/if])
            ->uri([if (unit.hasRouteParameters(unit.oclIsKindOf(AuthenticationUnit)))]$route_parameters[/if])[if (unit.pageDisplayedOn().hasParameterisedUnits())]
 . URL::query($query_parameters, FALSE)[/if],
        array(
            'id' => '[unit.instanceName()/]',
            'class' => '[unit.contentClass/]' . (isset($[unit.errorName()/]) ? ' [unit.errorClass/]' : ''),
            'enctype' => 'multipart/form-data'
        )) . PHP_EOL;
?>
[/template]

[template private formControlAndClose(unit : DynamicUnit) post(trim())]
[if (unit.hasMessagesOnFormFoot())]
<?php if (isset($[unit.instanceName()/]->error->all)) { ?>
<div class="[unit.errorClass/]">
[unit.formErrors()/]
</div>
<?php } ?>
[/if]
<div class="[unit.controlClass/]">
<?php
    echo Form::button('[unit.instanceName()/]', '[unit.submitLabel()/]', array(
        'type' => 'submit'
    )) . PHP_EOL;
[for (action : UnitSupportAction | unit.supportActions)]
    [action.unitSupportLink()/] . PHP_EOL;
[/for]
[if (unit.oclIsKindOf(EditUnit))]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
	[if (editUnit.oclIsTypeOf(CreateUpdateUnit))]
	[let createUpdateUnit : CreateUpdateUnit = editUnit.oclAsType(CreateUpdateUnit)]
		[if (not createUpdateUnit.clearLabel.oclIsUndefined())]
    echo Form::button('clear', '[createUpdateUnit.clearLabel/]', array(
        'type' => 'submit'
    )) . PHP_EOL;
		[/if]
	[/let]
	[/if]
	[if (not editUnit.cancelDestination.oclIsUndefined())]
    echo Form::button('cancel', '[unit.cancelLabel()/]', array(
        'type' => 'submit'
    )) . PHP_EOL;
	[/if]
[/let]
[/if]
?>
</div>
<?php
    echo Form::close() . PHP_EOL;
?>
[/template]

[template private formField(field : UnitField, unit : DynamicUnit) post(trim())]
[let fieldName : String = if field.oclIsKindOf(UnitAttribute) then
		field.oclAsType(UnitAttribute).attribute.columnName()
	else
		field.modelPropertyName()
	endif]
[let accessor : String = '$'.concat(field.modelInstanceName()).concat('->').concat(fieldName)]
[if (not field.firstEntityOrView())]
<?php if (!empty($[field.modelInstanceName()/])) { ?>
[/if]
<div[if (unit.hasMessagesOnFeature())]<?php
    unset($field_error);
    if (!empty($[unit.fieldErrorsName()/]))
		[if (field.oclIsKindOf(InterfaceField))]
        if (array_key_exists('_external', $[unit.fieldErrorsName()/]))
            if (array_key_exists('[fieldName/]', $[unit.fieldErrorsName()/]['['/]'_external'[']'/]))
                $field_error = $[unit.fieldErrorsName()/]['['/]'_external'[']'/]['['/]'[fieldName/]'[']'/];
		[else]
        if (array_key_exists('[fieldName/]', $[unit.fieldErrorsName()/]))
            $field_error = $[unit.fieldErrorsName()/]['['/]'[fieldName/]'[']'/];
		[/if]
    if (isset($field_error))
        echo ' class="[unit.errorClass/]"'; 
?>[/if]>
	[if (if not field.oclIsKindOf(UnitAssociation) then true else field.oclAsType(UnitAssociation).units->isEmpty() endif)]
 <?php
    echo Form::label('[field.uniqueName()/]', '[field.displayLabel()/]', array(
        'class' => '[field.styleClass()/][if (field.isRequired() and not field.isBooleanDataType() and not unit.oclIsTypeOf(SearchUnit))] required[/if]'
    )) . PHP_EOL;
?>
 [field.inputField(accessor)/]
	[else]
	[let embeddedUnit : ContentUnit = field.oclAsType(UnitAssociation).units->first()]
<p class="[field.modelPropertyName()/]">[field.displayLabel()/]</p>
<?php $[field.uniqueName()/] = [accessor/]->[if (not embeddedUnit.oclIsKindOf(IndexUnit))]
find()[else][let embeddedIndexUnit : IndexUnit = embeddedUnit.oclAsType(IndexUnit)]
[if (embeddedIndexUnit.defaultSelection.oclIsUndefined())]
find_all()[else]
[embeddedIndexUnit.defaultSelection.instanceName()/](FALSE)[/if][/let][/if];
?>
     <div class="framed [field.modelPropertyName()/]">
      [field.oclAsType(UnitAssociation).units.viewContent(field.uniqueName())/]
     </div>
	[/let]
	[/if]
	[if (unit.hasMessagesOnFeature())]
<?php if (isset($field_error)) { ?>
     <p class="[unit.errorClass/]"><?php echo __($field_error); ?></p>
<?php } ?>
	[/if]
    </div>
[if (not field.firstEntityOrView())]
<?php } ?>
[/if]
[/let]
[/let]
[/template]

[template public map(unit : DynamicUnit)]
[let mapUnit : MapUnit = unit.oclAsType(MapUnit)]
<div id="[unit.uniqueName()/]">
 <?php
	echo Form::input('[mapUnit.uniqueName()/]_autocomplete', NULL,
		array(
			'id' => '[mapUnit.uniqueName()/]_autocomplete',
//			'class' => 'field.styleClass()/] field.inputClass()/]',
	)) . PHP_EOL;
?>
 <div id="[mapUnit.uniqueName()/]_map" class="map-canvas"></div>
 <script src="//code.jquery.com/jquery-2.1.1.min.js"></script>
 <script>
var map;
[if (not mapUnit.readOnly)]
var marker;
var infoWindow;
var autocomplete;
var geocoder;
[/if]

function initialize() {
	var mapOptions = {
		zoom: 12
	};
	map = new google.maps.Map(document.getElementById('[unit.uniqueName()/]_map'), mapOptions);
[if (mapUnit.readOnly)]
[else]
	input = document.getElementById('[unit.uniqueName()/]_autocomplete');
	map.controls['['/]google.maps.ControlPosition.TOP_LEFT[']'/].push(input);
	marker = new google.maps.Marker();
	infoWindow = new google.maps.InfoWindow();
	autocomplete = new google.maps.places.Autocomplete(input);
	autocomplete.bindTo('bounds', map);
	geocoder = new google.maps.Geocoder();

	if(navigator.geolocation) {
		navigator.geolocation.getCurrentPosition(
			function(position) {
				map.setCenter(new google.maps.LatLng(
					position.coords.latitude, position.coords.longitude));
			},
			function() {
				handleNoGeolocation(true);
		});
	} else {
		handleNoGeolocation(false);
	}

	google.maps.event.addListener(map, 'click', function(event) {
		geocoder.geocode({'latLng': event.latLng}, function(results, status) {
			if (status == google.maps.GeocoderStatus.OK) {
				if (results['['/]1[']'/]) {
					var contentString = $('<div class="marker-info-win">' +
						'<p class="place-address">' + results['['/]1[']'/].formatted_address + '</p>' +
						'<?php
							echo Form::button('[mapUnit.instanceName()/]', '[mapUnit.submitLabel()/]', array(
								'type' => 'submit',
								'class' => 'save-marker'
							));
						?></div>');    
					showPlace(results['['/]1[']'/].formatted_address, event.latLng, contentString);
 				} else {
					setMarker(event.latLng);
				}
			} else {
				setMarker(event.latLng);
			}
		});
	});

	google.maps.event.addListener(autocomplete, 'place_changed', function() {
		var place = autocomplete.getPlace();
		if (place.geometry) {
			var contentString = $('<div class="marker-info-win">' +
				'<h1 class="place-name">' + place.name + '</h1>' +
				'<p class="place-address">' + place.formatted_address + '</p>' +
				'<?php
					echo Form::button('[mapUnit.instanceName()/]', '[mapUnit.submitLabel()/]', array(
						'type' => 'submit',
						'class' => 'save-marker'
					));
				?></div>');    
			showPlace(place.name, place.geometry.location, contentString);
		} else {
			document.getElementById('[mapUnit.uniqueName()/]_input').placeholder = 'Enter a location';
		}
	});
}

function setMarker(latLng) {
	marker.setMap(map);
	marker.setPosition(latLng);
}

function showPlace(name, latLng, contentString) {
	infoWindow.setContent(contentString['['/]0[']'/]);
	infoWindow.setPosition(latLng);
	infoWindow.set('name', name);
	infoWindow.open(map);
  
  	var saveBtn = contentString.find('button.save-marker')['['/]0[']'/];
		
	if(typeof saveBtn !== 'undefined') {
		google.maps.event.addDomListener(saveBtn, 'click', function(event) {
			saveMarker();
		});
	}
}

function saveMarker() {
	var myData = {
[if (not mapUnit.placeName.oclIsUndefined())]
		[mapUnit.placeName.modelPropertyName()/]: infoWindow.get('name'),
[/if]
		[mapUnit.location.modelPropertyName()/]_latitude: infoWindow.getPosition().lat(),
		[mapUnit.location.modelPropertyName()/]_longitude: infoWindow.getPosition().lng()
	};
	$.ajax({
		type: "POST",
		url: "<?php
			echo Route::get('[mapUnit.displayedOn.oclAsType(Page).routeName()/]')->uri(array(
				'action' => '[mapUnit.actionName()/]',
				'param' => 'submit'
			));
?>",
		data: myData,
		success: function(data) {
			marker.setMap(map);
			marker.setPosition(infoWindow.getPosition());
			infoWindow.close();
		},
		error: function(xhr, ajaxOptions, thrownError) {
			alert(thrownError);
		}
	});
}

function handleNoGeolocation(errorFlag) {
  if (errorFlag) {
    var content = 'Error: The Geolocation service failed.';
  } else {
    var content = 'Error: Your browser doesn\'t support geolocation.';
  }

  var options = {
    map: map,
    position: new google.maps.LatLng(60, 105),
    content: content
  };

  var infowindow = new google.maps.InfoWindow(options);
  map.setCenter(options.position);
[/if]
}

google.maps.event.addDomListener(window, 'load', initialize);
 </script>
</div>
[/let]
[/template]


[template private inputField(field : UnitField, accessor : String)
	? (field.isObfuscated()) post(trim())]
<?php
    echo Form::password('[field.modelPropertyName()/]', [field.getValue(accessor)/], array(
        'id' => '[field.uniqueName()/]',
        'class' => '[field.styleClass()/] [field.inputClass()/]',
[if (field.isRequired() and not field.displayedOn.oclIsTypeOf(SearchUnit))]
        'required' => '',
[/if]
    )) . PHP_EOL;
?>
[/template]

[template private inputField(field : UnitField, accessor : String)
	? (field.isBooleanDataType() and not field.isObfuscated()) post(trim())]
<?php
    echo Form::hidden('[field.modelPropertyName()/]', '0') .PHP_EOL;
    echo Form::checkbox('[field.modelPropertyName()/]', '1', (bool) [field.getValue(accessor)/], array(
        'id' => '[field.uniqueName()/]',
        'class' => '[field.styleClass()/] [field.inputClass()/]',
    )) . PHP_EOL;
?>
[/template]

[template private inputField(field : UnitField, instanceVariable : String)
	? ((field.isDataType() or field.oclIsTypeOf(DataTypeField)) and not field.isBooleanDataType() and not field.isEnumerationType() and not field.isObfuscated()) post(trim())]
[let dataType : Classifier = 
	if field.oclIsTypeOf(UnitAttribute) then
		field.oclAsType(UnitAttribute).attribute.dataType()
	else
		field.oclAsType(DataTypeField).dataType
	endif]
[if (dataType.name = 'TextBlock')]
[if (not field.pageDisplayedOn().partOf.textEditorURL.oclIsUndefined())]
<div class="[field.modelPropertyName()/] [field.inputClass()/]">
[/if]
<?php
	echo Form::textarea('[field.modelPropertyName()/]', [if (field.oclIsKindOf(DataTypeField))]
array_key_exists('[field.modelPropertyName()/]', $unit_fields) ? $unit_fields['['/]'[field.modelPropertyName()/]'[']'/] : NULL[else]
[instanceVariable/][/if],
		array(
			'id' => '[field.uniqueName()/]',
[if (field.pageDisplayedOn().partOf.textEditorURL.oclIsUndefined())]
			'class' => '[field.styleClass()/] [field.inputClass()/]',
[else]
			'class' => 'full_width',
[/if]
[if (field.isRequired() and not field.displayedOn.oclIsTypeOf(SearchUnit))]
			'required' => 'required',
[/if]
	)) . PHP_EOL;
?>
[if (not field.pageDisplayedOn().partOf.textEditorURL.oclIsUndefined())]
<script>CKEDITOR.replace('[field.uniqueName()/]');</script>
</div>
[/if]
[else]
<?php
	echo Form::input('[field.formName()/]', [if (field.oclIsKindOf(DataTypeField))]
array_key_exists('[field.modelPropertyName()/]', $unit_fields) ? $unit_fields['['/]'[field.modelPropertyName()/]'[']'/] : NULL[else]
[instanceVariable/][/if],
		array(
			'id' => '[field.uniqueName()/]',
			'class' => '[field.styleClass()/] [field.inputClass()/]',
[if (dataType.name <> 'String')]
			'type' => '[dataType.name.toLower()/]',
[/if]
[if (field.isRequired() and not field.displayedOn.oclIsTypeOf(SearchUnit))]
			'required' => 'required',
[/if]
[if (field.oclIsTypeOf(UnitAttribute))]
[let attribute : UnitAttribute = field.oclAsType(UnitAttribute)]
	[if (not attribute.validationPattern.oclIsUndefined())]
			'pattern' => '[attribute.validationPattern/]'
	[/if]
[/let]
[/if]
	)) . PHP_EOL;
?>
[/if]
[/let]
[/template]

[template private inputField(field : UnitField, accessor : String)
	? (field.isEnumerationType()) post(trim())]
[let enumerationType : EnumerationType
	= field.oclAsType(UnitAttribute).attribute.enumerationType()]
<?php
    echo Form::select(
        '[field.formName()/]',
        [enumerationType.modelClassName()/]::options([field.isRequired()/]),
        [accessor/],
        array(
            'id' => '[field.uniqueName()/]',
            'class' => '[field.styleClass()/] [field.inputClass()/]',
[if (field.isRequired() and not field.displayedOn.oclIsTypeOf(SearchUnit))]
            'required' => '',
[/if]
    )) . PHP_EOL;
?>
[/let]
[/template]

[template private inputField(field : UnitField, accessor : String)
	? (field.isDate() or field.oclIsTypeOf(DateField)) post(trim())]
[let dateDetails : DateDetails
	= if field.isDate() then
			field.oclAsType(UnitAttribute).attribute.dateDetails()
		else
			field.oclAsType(DateField).details
		endif]
<?php
    echo Form::input('[field.formName()/]', [if (field.oclIsKindOf(UnitFeature))]
[accessor/][else]
array_key_exists('[field.modelPropertyName()/]', $unit_fields) ? $unit_fields['['/]'[field.modelPropertyName()/]'[']'/] : NULL[/if],
        array(
            'id' => '[field.uniqueName()/]',
            'class' => '[field.styleClass()/] [field.inputClass()/]',
[if (field.isRequired() and not field.displayedOn.oclIsTypeOf(SearchUnit))]
            'required' => '',
[/if]
            'type' => '[if (dateDetails = DateDetails::DateOnly)]date[elseif (dateDetails = DateDetails::TimeOnly)]time[else]datetime[/if]'
    )) . PHP_EOL;
?>
[/let]
[/template]

[template private inputField(field : UnitField, instanceVariable : String)
	? (field.isUrl()) post(trim())]
<?php
	echo Form::input('[field.formName()/]', [instanceVariable/],
		array(
			'id' => '[field.uniqueName()/]',
			'class' => '[field.styleClass()/] [field.inputClass()/]',
			'type' => 'url',
[if (field.isRequired() and not field.displayedOn.oclIsTypeOf(SearchUnit))]
			'required' => 'required',
[/if]
[if (field.oclIsTypeOf(UnitAttribute))]
[let attribute : UnitAttribute = field.oclAsType(UnitAttribute)]
	[if (not attribute.validationPattern.oclIsUndefined())]
			'pattern' => '[attribute.validationPattern/]'
	[/if]
[/let]
[/if]
	)) . PHP_EOL;
?>
[/template]

[template private inputField(field : UnitField, instanceVariable : String)
	? (field.isResource()) post(trim())]
[let resource : SingletonResource = field.oclAsType(UnitAttribute).attribute.oclAsType(SingletonResource)]
<?php
	echo Form::file('[field.modelPropertyName()/]',
		array(
			'id' => '[field.uniqueName()/]',
			'class' => '[field.styleClass()/] [field.inputClass()/]',
[if (field.isRequired() and not field.displayedOn.oclIsTypeOf(SearchUnit))]
			'required' => 'required',
[/if]
	[if (resource.validUploadMimeTypes->notEmpty())]
			'accept' => '[resource.validUploadMimeTypes->first()/]', // array([for (type : String | resource.validUploadMimeTypes) separator(', ')]'[type/]'[/for]),
	[/if]
	)) . PHP_EOL;
?>
[/let]
[/template]

[template private inputField(field : UnitField, instanceVariable : String)
	? (field.oclIsTypeOf(UnitAttribute) and not field.isSingleton()) post(trim())]
echo form_input('[field.modelPropertyName()/]');
[/template]

[template private inputField(field : UnitField, accessor : String)
	? (field.oclIsKindOf(UnitAssociation)) post(trim())]
<?php
    echo Form::select(
        '[field.formName()/][if (not field.isSingleton())]['['/][']'/][/if]',
        $[field.optionsName()/],
        [accessor/][if (not field.isSingleton())]_as_array()[/if],
        array(
            'id' => '[field.uniqueName()/]',
            'class' => '[field.styleClass()/] [field.inputClass()/]',
[if (not field.isSingleton())]
            'multiple' => 'multiple',
[/if]
[if (field.isRequired() and not field.displayedOn.oclIsTypeOf(SearchUnit))]
            'required' => 'required',
[/if]
    )) . PHP_EOL;
?>
[/template]

[template private inputField(field : UnitField, instanceVariable : String)
	? (field.oclIsTypeOf(CaptchaField)) post(trim())]
<div class="g-recaptcha" data-sitekey="[field.displayedOn.pageDisplayedOn().partOf.captchaSiteKey/]"></div>
<noscript>
<div style="width: 302px; height: 352px;">
 <div style="width: 302px; height: 352px; position: relative;">
  <div style="width: 302px; height: 352px; position: absolute;">
   <iframe src="https://www.google.com/recaptcha/api/fallback?k=[field.displayedOn.pageDisplayedOn().partOf.captchaSiteKey/]"
                frameborder="0" scrolling="no"
                style="width: 302px; height:352px; border-style: none;">
   </iframe>
  </div>
  <div style="width: 250px; height: 80px; position: absolute; border-style: none;
                  bottom: 21px; left: 25px; margin: 0px; padding: 0px; right: 25px;">
   <textarea id="g-recaptcha-response" name="g-recaptcha-response"
                  class="g-recaptcha-response"
                  style="width: 250px; height: 80px; border: 1px solid #c1c1c1;
                         margin: 0px; padding: 0px; resize: none;" value="">
   </textarea>
  </div>
 </div>
</div>
</noscript>
[/template]


[template private formErrors(unit : DynamicUnit) post(trim())]
<?php
	if ( isset($[unit.fieldErrorsName()/])) {
		foreach ($[unit.fieldErrorsName()/] AS $field => $message) {
?>
<p class="[unit.errorClass/]"><?php echo __($message); ?></p>
<?php
		}
	} 
?>
[/template]