[comment encoding = UTF-8 /]
[module serviceModel(
	'http://cs.manchester.ac.uk/mdsd/Expression',
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::criteria/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::uriRoutes/]

[template public model(entityOrView : EntityOrView, model : WafModel)]
[file(entityOrView.modelFilename(), false)]
<?php defined('SYSPATH') OR die('No Direct Script Access');

class [entityOrView.modelClassName()/] extends Model_ExtendedORM
{
	protected $_table_name = '[entityOrView.tableName/]';

[if (entityOrView.oclIsTypeOf(Entity))]
	[if (entityOrView.oclAsType(Entity).autoKeyName <> 'id')]
	protected $_primary_key = '[entityOrView.oclAsType(Entity).autoKeyName/]';

	[/if]
[/if]
[if (entityOrView.hasOwnedSingletonAssociations())]
    [entityOrView.ownedSingletonAssociationsConfig()/]

[/if]
[if (entityOrView.hasInverseSingletonAssociations())]
    [entityOrView.inverseSingletonAssociationsConfig()/]

[/if]
[if (entityOrView.hasCollectionAssociations())]
    [entityOrView.collectionAssociationsConfig()/]

[/if]
[if (entityOrView.hasDefaultValueFeatures())]
    [entityOrView.constructor(model.authentication)/]

[/if]
[if (not entityOrView.hasDefaultLabel())]
	public function defaultLabel()
	{
		return $this;
	}

[/if]
[for (label : ModelLabel | entityOrView.labels)]
    [label.label()/]

[/for]
[if (entityOrView.hasAttributesOrSingletons())]
    [entityOrView.filters()/]

[/if]
[if (entityOrView.hasValidatedFeatures())]
[let user : EntityOrView
	= if model.isLocallyAuthenticated() then
			model.authentication.oclAsType(LocalAuthenticationSystem).user
		else
			null
		endif]
	[if (entityOrView = user)]
    [entityOrView.validationRequired()/]

	[/if]
    [entityOrView.rules(user)/]

    [entityOrView.labels()/]

[/let]
[/if]
[if (entityOrView.hasRouteParameters())]
    [entityOrView.findByName()/]

[/if]
[for (association : Association | entityOrView.associations()->select(a | a.isContains() and not a.isSingleton()))]
    [association.findChild()/]

[/for]
[for (association : Association | entityOrView.modifiableAssociations()->select(a | not a.isSingleton() or not a.isOwningEnd()))]
    [association.associationChanges()/]

[/for]
[if (entityOrView.modifiableAssociations()->select(a | not a.isSingleton() or not a.isOwningEnd())->notEmpty())]
	[entityOrView.values()/]

[/if]
[for (association : Association | entityOrView.modifiableAssociations()->select(a | not a.isSingleton() or not a.isOwningEnd()))]
    [association.associationValues()/]

[/for]
[if (entityOrView.modifiableAssociations()->select(a | not a.isSingleton() or not a.isOwningEnd())->notEmpty() or entityOrView.hasResourceAttributes())]
	[entityOrView.save()/]

[/if]
[for (resource : SingletonResource | entityOrView.resourceAttributes())]
    [resource.saveResource()/]

[/for]
[for (selection : Selection | entityOrView.services(model)->collect(s | s.selections))]
    [selection.selection()/]

[/for]
	public function paginated($page = 1, $pageSize = 10)
	{
		return $this->limit($pageSize)->offset(($page - 1) * $pageSize)->find_all();
	}

[if (model.isLocallyAuthenticated())]
[let authentication : LocalAuthenticationSystem = model.localAuthentication()]
	[if (entityOrView = authentication.authentication)]
    [authentication.userRecordLastLogin()/]

	[/if]
	[if (entityOrView = authentication.user)]
    [authentication.authenticatedUser()/]

    [authentication.authenticationSave()/]

	[/if]
	[if (not authentication.loginAttempt.oclIsUndefined())]
		[if (entityOrView = authentication.loginAttempt)]
    [authentication.recordAttempt()/]

    [authentication.attemptsExceeded()/]

    [authentication.clearAttempts()/]

		[/if]
	[/if]
	[if (not authentication.autoLogin.oclIsUndefined())]
		[if (entityOrView = authentication.autoLogin)]
    [authentication.createToken()/]

    [authentication.loadToken()/]

    [authentication.autoLoginRecordLastLogin()/]

    [authentication.deleteUser()/]

    [authentication.deleteExpired()/]
		[/if]
	[/if]
[/let]
[/if]
}
[/file]
[/template]

[template private ownedSingletonAssociationsConfig(entityOrView : EntityOrView) post(trim())]
protected $_belongs_to = array(
[for (association : Association | entityOrView.ownedSingletonAssociations()) separator (',')]
	'[association.modelPropertyName()/]' => array(
		'model' => '[association.modelName()/]',
		'foreign_key' => '[association.columnName()/]'
	)
[/for]
);
[/template]

[template private inverseSingletonAssociationsConfig(entityOrView : EntityOrView) post(trim())]
protected $_has_one = array(
[for (association : Association | entityOrView.inverseSingletonAssociations()) separator (',')]
	'[association.modelPropertyName()/]' => array(
		'model' => '[association.modelName()/]',
		'foreign_key' => '[association.oppositeColumnName()/]'
	)
[/for]
);
[/template]

[template private collectionAssociationsConfig(entityOrView : EntityOrView) post(trim())]
protected $_has_many = array(
[for (association : Association | entityOrView.collectionAssociations()) separator (',')]
	'[association.modelPropertyName()/]' => array(
		'model' => '[association.modelName()/]',
	[if (not association.isOppositeSingleton())]
		'through' => '[association.pivotTableName()/]',
		'far_key' => '[association.columnName()/]',
	[/if]
		'foreign_key' => '[association.oppositeColumnName()/]'
	)
[/for]
);
[/template]

[template private constructor(entityOrView : EntityOrView, authentication : Authentication) post(trim())]
[let localAuthentication : LocalAuthenticationSystem = authentication.oclAsType(LocalAuthenticationSystem)]
public function __construct($id = NULL)
{
    parent::__construct($id);
[if (entityOrView <> localAuthentication.authentication)]
	[for (feature : Attribute | entityOrView.defaultValueFeatures())]
    if (empty($this->[feature.columnName()/])) 
        $this->[feature.columnName()/] = [feature.defaultValue.generateCriteria()/];
	[/for]
[/if]
}
[/let]
[/template]

[template private label(label : ModelLabel) post(trim())]
public function [label.name/]Label()
{
    return sprintf('[label.format/]', [for (feature : ModelLabelFeature | label.features) separator(', ')]
$this->[if (feature.oclIsTypeOf(ModelLabelAttribute))]
[feature.oclAsType(ModelLabelAttribute).attribute.columnName()/][else]
[let association : ModelLabelAssociation = feature.oclAsType(ModelLabelAssociation)]
[association.association.modelPropertyName()/]->[if (association.dynamicLabel.oclIsUndefined())]default[else][association.dynamicLabel.name/][/if]Label()[/let]
[/if][/for]);
}
[/template]

[template private labels(entityOrView : EntityOrView) post(trim())]
public function labels()
{
    return array(
[for (feature : Feature | entityOrView.validatedFeatures())]
        '[feature.columnName()/]' => '[feature.displayLabel/]',
[/for]
    );
}
[/template]

[template private filters(entityOrView : EntityOrView) post(trim())]
public function filters()
{
    return array(
[for (feature : Feature | entityOrView.attributesAndSingletons())]
        '[feature.columnName()/]' => array(
	[if (feature.oclIsKindOf(Association))]
            array(function($value) {
                return empty($value) ? NULL : $value;
            })
	[else]
		[if (feature.oclIsTypeOf(SingletonElement))]
		[let element : SingletonElement = feature.oclAsType(SingletonElement)]
            array('trim'),
			[if (element.dataType.name = 'Integer')]
            array(function($value) {
                return empty($value) ? 0 : $value;
            })
			[/if]
			[if (element.isCaseInsensitive())]
            array('strtolower'),
			[/if]
			[if (element.isEncrypted())]
            array(array(Auth::instance(), 'hash_password_and_salt'), array(':value', ':model')),
			[/if]
		[/let]
		[/if]
		[if (feature.oclIsTypeOf(SingletonDate))]
            array('trim'),
            array('date'),
            array(function($value) {
                return empty($value) ? NULL : $value;
            })
		[/if]
	[/if]
        ),
[/for]
    );
}
[/template]

[template private validationRequired(entityOrView : EntityOrView) post(trim())]
protected $_validation_required = TRUE;

public function validation_required($required = TRUE)
{
    if ($required === NULL)
        return $this->_validation_required;

    $this->_validation_required = (bool)$required;
    return $this;
}
[/template]

[template private rules(entityOrView : EntityOrView, user : EntityOrView) post(trim())]
public function rules()
{
[if (entityOrView = user)]
    if ($this->validation_required(NULL)) 
        return array(
	[for (feature : Feature | entityOrView.validatedFeatures())]
            [feature.fieldRules()/]
	[/for]
        );
    else
        return array();
[else]
    return array(
		[for (feature : Feature | entityOrView.validatedFeatures())]
        [feature.fieldRules()/]
		[/for]
    );
[/if]
}
[/template]

[template private fieldRules(feature : Feature) post(trim())]
'[feature.columnName()/]' => array(
[if (feature.isRequired())]
    array('not_empty'),
[/if]
[if (feature.isUnique())]
    array(array($this, 'unique'), array(':field', ':value')),
[/if]
),
[/template]

[template private findByName(entityOrView : EntityOrView) post(trim())]
public function find_by_name([for (key : Attribute | entityOrView.uriPathKeys()) separator(', ')]
$[key.routeParameterName(entityOrView)/][/for])
{
    [entityOrView.entityFind(entityOrView)/]

    parent::find();

    return $this;
}
[/template]

[template private entityFind(entityOrView : EntityOrView, base : EntityOrView) post(trim())]
[for (key : Attribute | entityOrView.attributeKeys())]
$this->where('[if (not base.uriPathKeys()->isUnique(k | k.name))][entityOrView.selectName()/].[/if][key.columnName()/]', '=', $[key.routeParameterName(base)/]);
[/for]
[if (entityOrView.isContained())]
[let association : Association = entityOrView.containingAssociation()]
[let targetType : EntityOrView = association.targetType()]
$this->join('[targetType.selectName()/]')
    ->on('[association.columnName()/]', '=', '[targetType.selectName()/].[targetType.autoKeyName/]');
[entityOrView.container().entityFind(base)/]
[/let]
[/let]
[/if]
[/template]

[template private findChild(association : Association) post(trim())]
[let targetType : EntityOrView = association.targetType()]
public function [association.findMethodName()/]([for (key : Attribute | targetType.attributeKeys()) separator(', ')]
$[key.instanceName()/] = NULL[/for])
{
    $[association.instanceName()/] = $this->[association.modelPropertyName()/];
[for (key : Attribute | targetType.attributeKeys())]
    if (!empty($[key.instanceName()/]))
        $[association.instanceName()/]->where('[key.columnName()/]', '=', $[key.instanceName()/]);
[/for]

    $[association.instanceName()/]->find();

    return $[association.instanceName()/];
}
[/let]
[/template]

[template private selection(selection : Selection) post(trim())]
public function [selection.instanceName()/]([for (parameter : FormalParameter | selection.parameters) separator(', ')]
$[parameter.name/] = [if (parameter.defaultValue.oclIsUndefined())]NULL[else]'[parameter.defaultValue/]'[/if][/for][if (selection.parameters->notEmpty())], [/if][if (selection.limit <= 0)]$paging = TRUE, $page = 1, $pageSize = 10[/if])
{
[for (association : Association | selection.joins)]
	$this->join('[association.targetType().selectName()/]')->on('[association.columnName()/]', '=', '[association.targetType().selectName()/].[association.targetType().autoKeyName/]');
[/for]
[if (not selection.filter.oclIsUndefined())]
	[selection.filter.generateCriteria()/]
[/if]
[for (order : Order | selection.ordering)]
	$this->order_by('[order.path.generateOrderPath()/]', '[if (order.oclIsTypeOf(Asc))]asc[else]desc[/if]');
[/for]
[if (selection.limit <= 0)]
	if ($paging)
		return $this->limit($pageSize)->offset(($page - 1) * $pageSize)->find_all();
	else
		return $this->find_all();
[else]
	$this->limit([selection.limit/]);
	return $this->[if (selection.limit = 1)]find()[else]find_all()[/if];
[/if]
}

[if (selection.limit <> 1)]
public function [selection.countName()/]([for (parameter : FormalParameter | selection.parameters) separator(', ')]
$[parameter.name/] = [if (parameter.defaultValue.oclIsUndefined())]NULL[else]'[parameter.defaultValue/]'[/if][/for])
{
[for (association : Association | selection.joins)]
	$this->join('[association.targetType().selectName()/]')->on('[association.columnName()/]', '=', '[association.targetType().selectName()/].[association.targetType().autoKeyName/]');
[/for]
	[if (not selection.filter.oclIsUndefined())]
	[selection.filter.generateCriteria()/]
	[/if]
	return $this->count_all();
}
[/if]

[/template]

[template private associationChanges(association : Association) post(trim())]
protected $_[association.modelPropertyName()/]_changes = array();
[/template]

[template private values(entityOrView : EntityOrView) post(trim())]
public function values(array $values, array $expected = NULL)
{
    parent::values($values, array_diff($expected, array([for
(association : Association | entityOrView.modifiableAssociations()->select(a | not a.isSingleton() or not a.isOwningEnd()))
separator (', ')]'[association.modelPropertyName()/]'[/for])));
[for (association : Association | entityOrView.modifiableAssociations()->select(a | not a.isSingleton() or not a.isOwningEnd()))]

    $this->_[association.modelPropertyName()/]_changes = array();
    if (in_array('[association.modelPropertyName()/]', $expected))
    {
	[if (association.isSingleton())]
        if ($this->loaded() && $this->[association.modelPropertyName()/]->loaded())
        {
            if ($values['['/]'[association.modelPropertyName()/]'[']'/] != $this->[association.modelPropertyName()/]->id)
            {
                $this->_[association.modelPropertyName()/]_changes['['/][']'/] = array(
                    'op' => 'remove',
                    'id' => $this->[association.modelPropertyName()/]->id,
                );
                if (!empty($values['['/]'[association.modelPropertyName()/]'[']'/]))
                    $this->_[association.modelPropertyName()/]_changes['['/][']'/] = array(
                        'op' => 'set',
                        'id' => $values['['/]'[association.modelPropertyName()/]'[']'/],
                    );
            }
        }
        else
            if (!empty($values['['/]'[association.modelPropertyName()/]'[']'/]))
                $this->_[association.modelPropertyName()/]_changes['['/][']'/] = array(
                    'op' => 'set',
                    'id' => $values['['/]'[association.modelPropertyName()/]'[']'/],
                );
	[else]
        $current = array();
        foreach ($this->[association.modelPropertyName()/]_as_array() AS $value)
            $current['['/][']'/] = $value->id;
        if (array_key_exists('[association.modelPropertyName()/]', $values))
            foreach ($values['['/]'[association.modelPropertyName()/]'[']'/] AS $selected)
            {
                $key = array_search($selected, $current);
                if ($key !== FALSE)
                    unset($current['['/]$key[']'/]);
                else
                    $this->_[association.modelPropertyName()/]_changes['['/][']'/] = array(
                        'op' => 'add',
                        'id' => $selected,
                    );
            }
        foreach ($current AS $removed)
            $this->_[association.modelPropertyName()/]_changes['['/][']'/] = array(
                'op' => 'remove',
                'id' => $removed,
            );
	[/if]
    }
[/for]
}
[/template]

[template private associationValues(association : Association) post(trim())]
public function [association.modelPropertyName()/]_as_array()
{
    if (!$this->loaded())
        return array();

    $value_array = array();
    foreach ($this->[association.modelPropertyName()/]->find_all() as $value)
        $value_array['['/][']'/] = $value;
    return $value_array;
}
[/template]

[template private save(entityOrView : EntityOrView) post(trim())]
public function save(Validation $validation = NULL)
{
[for (resource : SingletonResource | entityOrView.resourceAttributes())]
	if (($_FILES['['/]'[resource.modelPropertyName()/]'[']'/]['['/]'size'[']'/] > 0) && ($_FILES['['/]'[resource.modelPropertyName()/]'[']'/]['['/]'error'[']'/] == UPLOAD_ERR_OK))
		$this->_save_[resource.modelPropertyName()/]();
[/for]
	parent::save($validation);
[for (association : Association | entityOrView.modifiableAssociations()->select(a | not a.isSingleton() or not a.isOwningEnd()))]

	foreach ($this->_[association.modelPropertyName()/]_changes AS $change)
	[if (not association.isOppositeSingleton())]
		if ($change['['/]'op'[']'/] == 'add')
			$this->add('[association.modelPropertyName()/]', $change['['/]'id'[']'/]);
		else
			$this->remove('[association.modelPropertyName()/]', $change['['/]'id'[']'/]);
	[else]
	{
		$opposite = ORM::factory('[association.modelName()/]', $change['['/]'id'[']'/]);
		if (!$opposite->loaded())
			Log::instance()->add(Log::DEBUG, 'add :x', array(':x'=>$change['['/]'id'[']'/]));
		else
		{
			if (($change['['/]'op'[']'/] == 'add') || ($change['['/]'op'[']'/] == 'set'))
				$opposite->[association.oppositeColumnName()/] = $this->id;
			else
				$opposite->[association.oppositeColumnName()/] = NULL;
			$opposite->save();
		}
	}
	[/if]
[/for]
}
[/template]

[template private saveResource(resource : SingletonResource) post(trim())]
private function _save_[resource.modelPropertyName()/]()
{
    $validation = Validation::factory($_FILES)->rules('[resource.modelPropertyName()/]', array(
[if (resource.isRequired())]
        array('not_empty'),
        array('Upload::not_empty'),
[/if]
        array('Upload::valid'),
        array('Upload::size', array(':value', [resource.maximumUploadSize/])),
[if (resource.validUploadExtensions->notEmpty())]
        array('Upload::type', array(':value', array([for (extension : String | resource.validUploadExtensions) separator(', ')]'[extension/]'[/for]))),
[/if]
[if (resource.oclIsTypeOf(SingletonImage))]
        array('Upload::image'),
[/if]
    ));
    if ($validation->check() === FALSE)
        throw new ORM_Validation_Exception($this->errors_filename(), $validation);

    if ($_FILES['['/]'[resource.modelPropertyName()/]'[']'/]['['/]'error'[']'/] === UPLOAD_ERR_NO_FILE)
        return;

    if (!empty($this->[resource.columnName/])) 
        unlink($this->[resource.columnName/]);

    $now = new DateTime();
    $directoryPath = [for (element : PathElement | resource.uploadPath) separator(' . DIRECTORY_SEPARATOR . ')][if (element.oclIsTypeOf(StaticPathElement))]
'[element.oclAsType(StaticPathElement).element/]'[else]
$now->format('[element.oclAsType(DatePathElement).format/]')[/if][/for];
    if (!is_dir($directoryPath)) {
        mkdir($directoryPath, 0777, true);
    }
    $filename = Text::random('hexdec', 8);
    $extension = pathinfo($_FILES['['/]'[resource.modelPropertyName()/]'[']'/]['['/]'name'[']'/], PATHINFO_EXTENSION);
[if (resource.uploadsWithinWebsite)]
    $filepath = Upload::save($_FILES['['/]'[resource.modelPropertyName()/]'[']'/], $filename . '.' . $extension, DOCROOT . $directoryPath);
    $this->[resource.columnName()/] = $directoryPath . DIRECTORY_SEPARATOR . $filename . '.' . $extension;
[else]
    $filepath = Upload::save($_FILES['['/]'[resource.modelPropertyName()/]'[']'/], $filename . '.' . $extension, 'c:\websites\files');
[/if]
}
[/template]

[template private userRecordLastLogin(authentication : LocalAuthenticationSystem) post(trim())]
public function record_last_login()
{
    $this->last_ip = Request::$client_ip;
    $this->last_login = date('Y-m-d H:i:s');
    $this->update();
}
[/template]

[query private authenticationJoinProperty(authentication : LocalAuthenticationSystem) : String
	= if authentication.authenticationKey = AuthenticationKeyTypes::Email then
			'email'
		else if authentication.authenticationKey = AuthenticationKeyTypes::Username then
			'username'
		else
			'unhandled'
		endif endif
/]

[template private authenticatedUser(authentication : LocalAuthenticationSystem) post(trim())]
public static function authenticated_user($authentication)
{
    $user = ORM::factory('[authentication.user.modelName()/]');
    $user->where('[authentication.userKey.columnName()/]', '=', $authentication->[authentication.authenticationJoinProperty()/]);
    return $user->find();
}
[/template]

[template private authenticationSave(authentication : LocalAuthenticationSystem) post(trim())]
// this is something to do with registring
public function authentication_save()
{
[for (feature : Feature | authentication.user.features->select(f | f.isRequired()))]
    if (!isset($this->[feature.columnName()/]))
        $this->[feature.columnName()/] = '';
[/for]

    return $this->save();
}
[/template]

[template private recordAttempt(authentication : LocalAuthenticationSystem) post(trim())]
public static function record_attempt($login_id)
{
    try
    {
        $login_attempt = ORM::factory('[authentication.loginAttempt.modelName()/]');
        $login_attempt->login_id = $login_id;
        $login_attempt->ip_address = Request::$client_ip;
        $login_attempt->time = date('Y-m-d H:i:s');
        $login_attempt->save();
    }
    catch (Kohana_Exception $e)
    {
        Log::instance()->add(Log::ERROR, 'Problem recording login attempt: :exception', array(
            'exception' => $e->getMessage()
        ));
    }
}
[/template]

[template private attemptsExceeded(authentication : LocalAuthenticationSystem) post(trim())]
public static function attempts_exceeded($login_id, $maximum_attempts, $expiry_period)
{
    $login_attempt = ORM::factory('[authentication.loginAttempt.modelName()/]');
    $login_attempt->where_open();
    $login_attempt->where('login_id', '=', $login_id);
    $login_attempt->or_where('ip_address', '=', Request::$client_ip);
    $login_attempt->where_close();
    if ($expiry_period > 0)
        $login_attempt->where(new Database_Expression('UNIX_TIMESTAMP(time)'), '>', time() - $expiry_period);

    return $login_attempt->count_all() >= $maximum_attempts;
}
[/template]

[template private clearAttempts(authentication : LocalAuthenticationSystem) post(trim())]
public static function clear_attempts($login_id, $expiry_period)
{
    try
    {
        $login_attempt = ORM::factory('[authentication.loginAttempt.modelName()/]');
        $login_attempt->where_open();
        $login_attempt->where('login_id', '=', $login_id);
        $login_attempt->where('ip_address', '=', Request::$client_ip);
        $login_attempt->where_close();
        if ($expiry_period > 0)
            $login_attempt->or_where(new Database_Expression('UNIX_TIMESTAMP(time)'), '<', time() - $expiry_period);
        foreach ($login_attempt->find_all() AS $attempt)
            $attempt->delete();
    }
    catch (Kohana_Exception $e)
    {
        Log::instance()->add(Log::ERROR, 'Problem clearing login attempts: :exception', array(
            ':exception' => $e->getMessage()
        ));
        return FALSE;
    }
}
[/template]

[template private createToken(authentication : LocalAuthenticationSystem) post(trim())]
public static function create_token($key, $authentication, $user_agent)
{
    try
    {
        $autologin = ORM::factory('[authentication.autoLogin.modelName()/]');
        $autologin->key = $key;
        $autologin->user_agent = $user_agent;
        $autologin->last_ip_address = Request::$client_ip;
        $autologin->last_login = date('Y-m-d H:i:s');
        $autologin->authentication_id = $authentication->[authentication.authentication.autoKeyName/];
        $autologin->save();

        return $autologin;
    }
    catch (Kohana_Exception $e)
    {
        Log::instance()->add(Log::ERROR, 'Problem saving autologin token: :exception', array(
            ':exception' => $e->getMessage()
        ));
        if ($e instanceof ORM_Validation_Exception)
            Log::instance()->add(Log::ERROR, 'Validation errors :errors', array(
                ':errors' => print_r($e->errors(''), TRUE)
            ));
        return ORM::factory('[authentication.autoLogin.modelName()/]');
    }
}
[/template]

[template private loadToken(authentication : LocalAuthenticationSystem) post(trim())]
public static function load_token($cookie, $user_agent, $lifetime)
{
    try
    {
        $data = unserialize($cookie);
        if (!array_key_exists('user_id', $data) OR !array_key_exists('key', $data))
            return FALSE;

        $login_id = $data['['/]'user_id'[']'/];
        $key = $data['['/]'key'[']'/];
        $autologin = ORM::factory('[authentication.autoLogin.modelName()/]');
        $autologin->where('key', '=', $key)
            ->where('user_agent', '=', $user_agent)
            // checking time means that reducing lifetime has immediate effect
            ->where(new Database_Expression('UNIX_TIMESTAMP(autologin.last_login)'), '>', time() - $lifetime);
        $autologin->join('[authentication.authentication.selectName()/]')
            ->on('authentication_id', '=', '[authentication.authentication.selectName()/].[authentication.authentication.autoKeyName/]')
            ->where('[authentication.authentication.selectName()/].[authentication.loginUnit.loginIdField.modelPropertyName()/]', '=', $login_id);
        return $autologin->find();
    }
    catch (Kohana_Exception $e)
    {
        Log::instance()->add(Log::ERROR, 'Problem loading autologin token: :exception', array(
            ':exception' => $e->getMessage()
        ));
        return FALSE;
    }
}
[/template]

[template private autoLoginRecordLastLogin(authentication : LocalAuthenticationSystem) post(trim())]
public function record_last_login()
{
    try
    {
        $this->last_ip_address = Request::$client_ip;
        $this->last_login = date('Y-m-d H:i:s');
        $this->update();
    }
    catch (Kohana_Exception $e)
    {
        Log::instance()->add(Log::ERROR, 'Problem recording autologin: :exception', array(
            ':exception' => $e->getMessage()
        ));
    }
}
[/template]

[template private deleteUser(authentication : LocalAuthenticationSystem) post(trim())]
public static function delete_user($login_id)
{
    try
    {
        $autologin = ORM::factory('[authentication.autoLogin.modelName()/]');
        $autologin->join('[authentication.authentication.selectName()/]')
            ->on('authentication_id', '=', '[authentication.authentication.selectName()/].[authentication.authentication.autoKeyName/]')
            ->where('[authentication.authentication.selectName()/].[authentication.loginUnit.loginIdField.modelPropertyName()/]', '=', $login_id);
        foreach ($autologin->find_all() AS $token)
            $token->delete();
    }
    catch (Kohana_Exception $e)
    {
        Log::instance()->add(Log::ERROR, 'Problem deleting user\'s autologin token: :exception', array(
            ':exception' => $e->getMessage()
        ));
        return FALSE;
    }
}
[/template]

[template private deleteExpired(authentication : LocalAuthenticationSystem) post(trim())]
public static function delete_expired($lifetime)
{
    try
    {
        $autologin = ORM::factory('[authentication.autoLogin.modelName()/]');
        $autologin->where(new Database_Expression('UNIX_TIMESTAMP(last_login)'), '<', time() - $lifetime);
        foreach ($autologin->find_all() AS $token)
            $token->delete();
    }
    catch (Kohana_Exception $e)
    {
        Log::instance()->add(Log::ERROR, 'Problem deleting expired autologin token: :exception', array(
            ':exception' => $e->getMessage()
        ));
        return FALSE;
    }
}
[/template]
