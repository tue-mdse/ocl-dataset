[comment encoding = UTF-8 /]
[module baseController(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::names/]


[template public baseController(model : WafModel) post(trim())]
[file(model.controllersDirectory().concat('/Template/Base').concat(model.executableExtension()), false)]
<?php defined('SYSPATH') OR die('No Direct Script Access');

class [model.baseControllerClassName()/] extends Controller_Template
{
    public $template = 'site';

    [model.beforeMethod()/]

    [model.afterMethod()/]

[for (entityOrView : EntityOrView
		| model.persistence.entitiesAndViews->select(eov | not eov.keyEntity().oclIsUndefined())->sortedBy(eov | eov.name))]
    [entityOrView.selectionLoadMethod()/]

[/for]
[if (model.hasCaptchaFields())]
    [model.captchaValidationMethod()/]

[/if]
}
[/file]
[/template]

[template private beforeMethod(model : WafModel) post(trim())]
public function before()
{
    parent::before();

    if ($this->auto_render === TRUE)
    {
        $this->template->title = '';
        $this->template->metaTags =array();
        $this->template->links = array();
        $this->template->stylesheets = array();
        $this->template->scripts = array([if (model.ajaxTechnology = AjaxTechnologies::jQuery)]
'//code.jquery.com/jquery-2.1.3.min.js'[elseif (model.ajaxTechnology = AjaxTechnologies::AngularJS)]

                'https://ajax.googleapis.com/ajax/libs/angularjs/1.3.12/angular.min.js',
                '/js/controllers.js'
			[/if]);
[if (not model.isAuthenticated())]
        $topbar_template = View::factory('elements/topbar');
[else]
        if (Auth::instance()->logged_in()) 
        {
            $topbar_template = View::factory('elements/topbar_logged_in');
            $topbar_template->user = Auth::instance()->get_user();
        }
        else
            $topbar_template = View::factory('elements/topbar');
[/if]
        $this->template->topbar = $topbar_template->render();
        $this->template->page_message = '';
        $this->template->unitViews = array();
    }
}
[/template]

[template private afterMethod(model : WafModel) post(trim())]
public function after()
{
    parent::after();
}
[/template]

[template private selectionLoadMethod(entityOrView : EntityOrView) post(trim())]
protected function [entityOrView.loadMethodName()/]($validate = FALSE)
{
    if (!isset($this->[entityOrView.instanceName()/]))
    {
[if (entityOrView.keyEntity().isContained())]
        [entityOrView.selectionLoadChild()/]
[else]
        [entityOrView.selectionLoadRoot()/]
[/if]
        if (!$this->[entityOrView.instanceName()/]->loaded())
            throw new Controller_SelectionException('Invalid [entityOrView.modelName()/] selection');
        if ($validate)
            $this->[entityOrView.instanceName()/]->check();
    }
}
[/template]

[template private selectionLoadRoot(entityOrView : EntityOrView) post(trim())]
$this->[entityOrView.instanceName()/] = ORM::factory('[entityOrView.modelName()/]')
    ->find_by_name([for (key : Attribute | entityOrView.uriPathKeys()) separator(', ')]
rawurldecode($this->request->param('[key.routeParameterName(entityOrView)/]'))[/for]);
[/template]

[template private selectionLoadChild(entityOrView : EntityOrView) post(trim())]
[let keyEntity : EntityOrView = entityOrView.keyEntity()]
[let parent : EntityOrView = keyEntity.container()]
[let parentAssociation : Association = keyEntity.containingAssociation().opposite()]
$this->[parent.loadMethodName()/]();
$this->[entityOrView.instanceName()/] = $this->[parent.instanceName()/]->[parentAssociation.findMethodName()/]([for (key : Attribute | keyEntity.attributeKeys()) separator(', ')]
rawurldecode($this->request->param('[key.routeParameterName(entityOrView)/]'))[/for]);
[/let]
[/let]
[/let]
[/template]

[template private captchaValidationMethod(model : WafModel) post(trim())]
public function isCaptchaValid($response, $client_ip)
{
    try
    {
        return json_decode(
            file_get_contents('https://www.google.com/recaptcha/api/siteverify'
                . '?secret=[model.captchaSecretKey/]'
                . '&response=' . $response
                . '&remoteip=' . $client_ip),
            TRUE);
    }
    catch (Exception $e)
    {
        return ['['/]
            'success' => FALSE,
            'error-codes' => $e->message
        [']'/];
    }
}
[/template]
