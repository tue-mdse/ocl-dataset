[comment encoding = UTF-8 /]
[module bootstrap(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::uriRoutes/]


[template public bootstrap(model : WafModel)]
[file (model.applicationDirectory().concat('/')
		.concat('bootstrap')
		.concat(model.executableExtension()), false)]
<?php defined('SYSPATH') or die('No direct script access.');

// -- Environment setup --------------------------------------------------------

// Load the core Kohana class
require SYSPATH.'classes/Kohana/Core'.EXT;

if (is_file(APPPATH.'classes/Kohana'.EXT))
{
	// Application extends the core
	require APPPATH.'classes/Kohana'.EXT;
}
else
{
	// Load empty core extension
	require SYSPATH.'classes/Kohana'.EXT;
}

/**
 * Set the default time zone.
 *
 * @link http://kohanaframework.org/guide/using.configuration
 * @link http://www.php.net/manual/timezones
 */
date_default_timezone_set('Europe/London');

/**
 * Set the default locale.
 *
 * @link http://kohanaframework.org/guide/using.configuration
 * @link http://www.php.net/manual/function.setlocale
 */
setlocale(LC_ALL, 'en_US.utf-8');

/**
 * Enable the Kohana auto-loader.
 *
 * @link http://kohanaframework.org/guide/using.autoloading
 * @link http://www.php.net/manual/function.spl-autoload-register
 */
spl_autoload_register(array('Kohana', 'auto_load'));

/**
 * Optionally, you can enable a compatibility auto-loader for use with
 * older modules that have not been updated for PSR-0.
 *
 * It is recommended to not enable this unless absolutely necessary.
 */
//spl_autoload_register(array('Kohana', 'auto_load_lowercase'));

/**
 * Enable the Kohana auto-loader for unserialization.
 *
 * @link http://www.php.net/manual/function.spl-autoload-call
 * @link http://www.php.net/manual/var.configuration#unserialize-callback-func
 */
ini_set('unserialize_callback_func', 'spl_autoload_call');

// -- Configuration and initialization -----------------------------------------

/**
 * Set the default language
 */
I18n::lang('en-us');

[if (model.developmentVersion)]
/**
 * Set Kohana::$environment if a 'KOHANA_ENV' environment variable has been supplied.
 *
 * Note: If you supply an invalid environment name, a PHP warning will be thrown
 * saying "Couldn't find constant Kohana::<INVALID_ENV_NAME>"
 */
if (isset($_SERVER['['/]'KOHANA_ENV'[']'/]))
{
	Kohana::$environment = constant('Kohana::'.strtoupper($_SERVER['['/]'KOHANA_ENV'[']'/]));
}
[else]
/**
 * Set the environment string by the domain (defaults to Kohana::DEVELOPMENT).
 */
if (array_key_exists('SERVER_NAME', $_SERVER))
    Kohana::$environment = ($_SERVER['['/]'SERVER_NAME'[']'/] !== 'localhost') ? Kohana::PRODUCTION : Kohana::DEVELOPMENT;
else
    Kohana::$environment = Kohana::PRODUCTION;
[/if]

/**
 * Initialize Kohana, setting the default options.
 *
 * The following options are available:
 *
 * - string   base_url    path, and optionally domain, of your application   NULL
 * - string   index_file  name of your index file, usually "index.php"       index.php
 * - string   charset     internal character set used for input and output   utf-8
 * - string   cache_dir   set the internal cache directory                   APPPATH/cache
 * - integer  cache_life  lifetime, in seconds, of items cached              60
 * - boolean  errors      enable or disable error handling                   TRUE
 * - boolean  profile     enable or disable internal profiling               TRUE
 * - boolean  caching     enable or disable internal caching                 FALSE
 * - boolean  expose      set the X-Powered-By header                        FALSE
 */
Kohana::init(array(
[if (not model.baseURL.oclIsUndefined())]
	[if (model.baseURL <> '')]
	'base_url'   => '[if (not model.baseURL.startsWith('/'))]/[/if][model.baseURL/]',
	[/if]
[/if]
[if (model.rewriteURLs)]
	'index_file'   => FALSE,
[/if]
[if (model.developmentVersion)]
    'profile'    => Kohana::$environment !== Kohana::PRODUCTION,
[else]
//    'caching'    => Kohana::$environment === Kohana::PRODUCTION,
[/if]
));

/**
 * Attach the file write to logging. Multiple writers are supported.
 */
Kohana::$log->attach(new Log_File(APPPATH.'logs'));

/**
 * Attach a file reader to config. Multiple readers are supported.
 */
Kohana::$config->attach(new Config_File);

/**
 * Enable modules. Modules are referenced by a relative or absolute path.
 */
Kohana::modules(array(
	'auth'       => MODPATH.'auth',       // Basic authentication
	// 'cache'      => MODPATH.'cache',      // Caching with multiple backends
	// 'codebench'  => MODPATH.'codebench',  // Benchmarking tool
	'database'   => MODPATH.'database',   // Database access
	// 'image'      => MODPATH.'image',      // Image manipulation
	'minion'     => MODPATH.'minion',     // CLI Tasks
	'orm'        => MODPATH.'orm',
	'pagination' => MODPATH.'pagination',
	// 'unittest'   => MODPATH.'unittest',   // Unit testing
	// 'userguide'  => MODPATH.'userguide',  // User guide and API documentation
// if (genModel.hasCreateSitemapUnits())]
//	'[sitemapModuleName()/]' => MODPATH.'[sitemapModuleName()/]',
// /if]
	));

[model.routes()/]

/**
 * Set the magic salt to add to a cookie
 */
Cookie::$salt = 'kjslkajdldlkdsseftsdswe';
[/file]
[/template]

[template private routes(model : WafModel)]
/**
 * Set the routes. Each route must have a minimum of a name, a URI and a set of
 * defaults for the URI.
 */
Route::set('default', '')
	->defaults(array(
		'controller' => '[model.homePage().controllerName()/]',
[if (model.homePage().units->notEmpty())]
        'action' => '[model.homePage().units->first().actionName()/]',
[else]
		'action'  => 'index',
[/if]
	));
[for (page : Page | model.pages->sortedBy(p | p.name))]
	[if (page.units->size() = 0)]
Route::set('[page.routeName()/]', '[page.uriPath()/]')->defaults(array(
    'controller' => '[page.controllerName()/]',
    'action'  => 'index',
));
	[/if]
	[for (unit : ContentUnit | page.units)]
Route::set('[unit.routeName()/]', '[unit.uriPath()/]'[unit.elementPatterns()/])->defaults(array(
    'controller' => '[page.controllerName()/]',
    'action' => '[unit.actionName()/]',
));
		[if (unit.oclIsKindOf(EditUnit) and unit.oclIsKindOf(Selectable))]
Route::set('[unit.routeName(true)/]', '[unit.uriPath(true)/]'[unit.elementPatterns()/])->defaults(array(
    'controller' => '[page.controllerName()/]',
    'action' => '[unit.actionName()/]',
));
		[/if]
		[if (unit.oclIsKindOf(DynamicUnit))]
		[let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)]
			[if (dynamicUnit.supportActions->notEmpty())]
Route::set('[unit.supportRouteName()/]', '[unit.supportUriPath()/]')->defaults(array(
    'controller' => '[page.controllerName()/]',
    'action' => '[unit.supportActionName()/]',
));
			[/if]
			[for (feature : FeatureSupportAction | dynamicUnit.uriActions()->select(a | a.oclIsTypeOf(FeatureSupportAction)).oclAsType(FeatureSupportAction))]
Route::set('[feature.routeName()/]', '[feature.uriPath()/]')->defaults(array(
    'controller' => '[page.controllerName()/]',
    'action' => '[feature.actionName()/]',
));
			[/for]
			[for (delete : DeleteAction | dynamicUnit.uriActions()->select(a | a.oclIsTypeOf(DeleteAction)).oclAsType(DeleteAction))]
Route::set('[delete.routeName()/]', '[delete.uriPath()/]')->defaults(array(
    'controller' => '[page.controllerName()/]',
    'action' => '[delete.actionName()/]',
));
			[/for]
		[/let]
		[/if]
		[if (unit.oclIsTypeOf(LoginUnit))]
		[let loginUnit : LoginUnit = unit.oclAsType(LoginUnit)]
Route::set('[loginUnit.logoutRouteName()/]', '[loginUnit.logoutUriPath()/]')->defaults(array(
    'controller' => '[page.controllerName()/]',
    'action' => '[loginUnit.logoutActionName()/]',
));
		[/let]
		[/if]
	[/for]
[/for]
[/template]

[template private elementPatterns(unit : ContentUnit) post(trim())]
[let keysWithPattern : Sequence(Attribute)
	= unit.uriPathKeys(unit.oclIsKindOf(IndexUnit))
		->select(k | not k.validationPattern.oclIsUndefined())
		->select(k | k.validationPattern <> '[^/.,;?\\n]++')]
[if (keysWithPattern->notEmpty())]
, array(
	[for (key : Attribute | keysWithPattern)]
    '[key.routeParameterName(unit.oclAsType(DynamicUnit).entities->first())/]' => '[key.validationPattern/]',
	[/for]
)
[/if]
[/let]
[/template]