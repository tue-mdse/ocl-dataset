[comment encoding = UTF-8 /]
[module editMethods(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::criteria/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::labels/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::controllers::controlMethods/]


[template public beforeMethod(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[/let]
[/template]

[template public afterMethod(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[editUnit.createAndBindTemplate()/]
[editUnit.bindModelVariables(true)/]
[editUnit.bindErrorMessage()/]
[editUnit.bindFieldErrors()/]
[if (unit.oclIsKindOf(Selectable))]
[editUnit.createAndBindRouteParameters()/]
[/if]
[for (association : UnitAssociation | editUnit.associationFields()->select(a | a.isModifiable()))]
$[association.optionsName()/] = $this->[association.optionsName()/]();
$[editUnit.templateInstanceName()/]->bind('[association.optionsName()/]', $[association.optionsName()/]);
[/for]
[/let]
[/template]

[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit) and not unit.oclIsKindOf(AuthenticationUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[editUnit.actionMethod()/]
[if (editUnit.hasInterfaceFields())]

[editUnit.unitRules()/]
[/if]
[for (association : UnitAssociation | editUnit.associationFields()->select(a | a.isModifiable()))]

[association.associationOptions()/]
[/for]
[/let]
[/template]

[template private actionMethod(unit : EditUnit) post(trim())]
[if (unit.entities->notEmpty())]
[let entityOrView : EntityOrView = unit.entities->first()]
public function action_[unit.actionName()/]()
{
	[if (not unit.cancelDestination.oclIsUndefined())]
    [unit.handleCancel()/]

	[/if]
	[if (unit.oclIsTypeOf(CreateUpdateUnit))]
	[let createUpdateUnit : CreateUpdateUnit = unit.oclAsType(CreateUpdateUnit)]
		[if (not createUpdateUnit.clearLabel.oclIsUndefined())]
    if ($this->request->post('clear'))
    {
        $this->redirect(Route::get('[unit.routeName(true)/]')->uri());
        return;
    }

		[/if]
	[/let]
	[/if]
    try
    {
	[if (unit.oclIsKindOf(Selectable))]
        if ([for (key : Attribute | entityOrView.keyEntity().attributeKeys()) separator(' || ')]
!empty($this->request->param('[key.routeParameterName(entityOrView)/]'))[/for])
            $this->[entityOrView.loadMethodName()/]($this->request->method() == HTTP_Request::GET);
        else
		[if (unit.entities->size() > 1 or unit.hasDefaultValueFields())]
        {
            [unit.createVariables()/]
        }
		[else]
            [unit.createVariables()/]
		[/if]
	[else]
        [unit.createVariables()/]
	[/if]

        if ($this->request->method() == HTTP_Request::POST)
        {
	[if (unit.hasCaptchaFields())]
            [unit.captchaCheck()/]
	[/if]
	[if (unit.hasInterfaceFields())]
            [unit.interfaceFieldValidation()/]
	[/if]
            [unit.valuesFromFormToModels()/]
	[if (unit.hasForcedValueFeatures())]
            [unit.forcedFeatureValues()/]
	[/if]
            [entityOrView.saveModel(true, unit)/]
	[if (unit.entities->size() > 1)]
		[for (entityOrView : EntityOrView | unit.entities->subOrderedSet(2, unit.entities->size()))]
            if (isset($this->[entityOrView.instanceName()/]))
            {
                [entityOrView.saveModel(false, unit)/]
            }
		[/for]
	[/if]
	[if (not unit.oclAsType(EditUnit).confirmDestination.oclIsUndefined())]
            $this->redirect(Route::get('[unit.oclAsType(EditUnit).confirmDestination.routeName()/]')->uri());
	[else]
		[if (unit.oclIsTypeOf(CreateUnit) or unit.hasClearLabel())]
		    [unit.clearModels()/]
			[if (unit.hasInterfaceFields())]
				[for (field : InterfaceField | unit.interfaceFields())]
            unset($this->[entityOrView.instanceName()/]->[field.modelPropertyName()/]);
				[/for]
			[/if]
		[/if]
	[/if]
        }
    }
	[if (unit.hasCaptchaFields())]
    [unit.catchCaptchaException()/]
	[/if]
    [unit.catchSelectionException()/]
    [unit.catchValidationException()/]
}
[/let]
[/if]
[/template]

[template private saveModel(entityOrView : EntityOrView, firstModel : Boolean, unit : EditUnit) post(trim())]
[if (unit.customiseValues)]
// [protected ('customise.values.'.concat(unit.instanceName()))]
// [/protected]
[/if]
[if (entityOrView.keyEntity().isContained())]
[let columnName : String = entityOrView.containingAssociation().columnName()]
if (empty($this->[entityOrView.instanceName()/]->[columnName/]))
	[if (firstModel)]
{
    $this->[entityOrView.container().loadMethodName()/]();
	[/if]
    $this->[entityOrView.instanceName()/]->[columnName/] = $this->[entityOrView.container().instanceName()/]->id;
	[if (firstModel)]
}
	[/if]
[/let]
[/if]
$this->[entityOrView.instanceName()/]->save([if (unit.hasInterfaceFields() and firstModel)]$extra_validation[/if]);
[/template]

[template private clearModels(unit : DynamicUnit) post(trim())]
[for (entityOrView : EntityOrView | unit.entities)]
	[if (i = 1)]
$this->[entityOrView.instanceName()/]->clear();
	[else]
if (isset($this->[entityOrView.instanceName()/]))
    $this->[entityOrView.instanceName()/]->clear();
	[/if]
[/for]
[if (unit.hasDefaultValueFields())]
[unit.unitDefaultValues()/]
[/if]
[/template]

[template private unitRules(unit : DynamicUnit) post(trim())]
private function unit_rules
{
[for (field : InterfaceField | unit.interfaceFields())]
    $this->[unit.instanceName()/]->validation['['/]'[field.modelPropertyName()/]'[']'/] = array(
        'label' => '[field.displayLabel()/]',
        'rules' => array([if (field.isRequired())]
'required', [/if]'trim'[if (field.isCaseInsensitive())]
, 'strtolower'[/if][if (field.isEncrypted())]
, 'encrypt'[/if][if (not field.mustMatch.oclIsUndefined())]
, 'matches' => '[field.mustMatch.modelPropertyName()/]'[/if])
    );
[/for]
}
[/template]


[template private associationOptions(association : UnitAssociation)]
public function [association.optionsName()/]()
{
    $options = array();
[if (association.isSingleton())]
    $options['['/][']'/] = "Please select";
[/if]
    foreach (ORM::factory('[association.association.modelName()/]')->[if (association.selection.oclIsUndefined())]
find_all()[else]
[association.selection.instanceName()/](FALSE)[/if] AS $option)
        $options['['/]$option->id[']'/] = [if (association.valueDisplay.oclIsUndefined())]
$option->defaultLabel()[else]
[association.valueDisplay.label('$option')/][/if];
    return $options;
}
[/template]
