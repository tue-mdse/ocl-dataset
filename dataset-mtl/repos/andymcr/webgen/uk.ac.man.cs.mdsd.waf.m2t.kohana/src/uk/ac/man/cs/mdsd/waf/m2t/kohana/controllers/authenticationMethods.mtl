[comment encoding = UTF-8 /]
[module authenticationMethods(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::controllers::controlMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::controllers::editMethods/]


[template private authenticationStart(unit : DynamicUnit) post(trim())]
[if (not unit.oclAsType(ControlUnit).cancelDestination.oclIsUndefined())]
[unit.handleCancel()/]
[/if]
if (Auth::instance()->logged_in())
{
	$this->template->page_message = 'You are already logged in';
	$this->redirect();
}
[/template]


[template public beforeMethod(unit : ContentUnit)
	? (unit.oclIsKindOf(AuthenticationUnit)) post(trim())]
[let authenticationUnit : DynamicUnit = unit.oclAsType(DynamicUnit)]
$this->[authenticationUnit.instanceName()/] = ORM::factory('[authenticationUnit.modelName()/]');
[if (authenticationUnit.hasDefaultValueFields())]
[authenticationUnit.unitDefaultValues()/]
[/if]
[if (unit.oclIsTypeOf(LoginUnit))]
//TODO reload remember me
[/if]
[/let]
[/template]

[template public afterMethod(unit : ContentUnit)
	? (unit.oclIsKindOf(AuthenticationUnit) and not unit.oclIsKindOf(EditUnit)) post(trim())]
[let authenticationUnit : DynamicUnit = unit.oclAsType(DynamicUnit)]
[authenticationUnit.createAndBindTemplate()/]
$[authenticationUnit.templateInstanceName()/]->bind('[authenticationUnit.modelInstanceName()/]', $this->[authenticationUnit.instanceName()/]);
[authenticationUnit.bindErrorMessage()/]
[if (authenticationUnit.hasCaptchaFields())]
[authenticationUnit.bindFieldErrors()/]
[/if]
[/let]
[/template]


[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsKindOf(AuthenticationUnit)) post(trim())]
[if (unit.oclIsTypeOf(RegistrationUnit))]
[unit.oclAsType(RegistrationUnit).actionMethod()/]
[elseif (unit.oclIsTypeOf(LoginUnit))]
[unit.oclAsType(LoginUnit).actionMethods()/]
[elseif (unit.oclIsTypeOf(ForgottenPasswordUnit))]
[unit.oclAsType(ForgottenPasswordUnit).actionMethod()/]
[/if]
[/template]

[template public actionMethod(unit : RegistrationUnit) post(trim())]
[let authentication : LocalAuthenticationSystem = unit.displayedOn.oclAsType(Page).partOf.authentication.oclAsType(LocalAuthenticationSystem)]
[let registrationUnit : RegistrationUnit = unit.oclAsType(RegistrationUnit)]
public function action_[registrationUnit.actionName()/]()
{
	[registrationUnit.authenticationStart()/]
[if (not registrationUnit.cancelDestination.oclIsUndefined())]
	[registrationUnit.handleCancel()/]
[/if]
	else if ($this->request->method() == HTTP_Request::POST)
	{
		try
		{
[if (registrationUnit.hasCaptchaFields())]
			[registrationUnit.valuesFromFormToModels()/]
[if (registrationUnit.hasForcedValueFeatures())]
			[registrationUnit.forcedFeatureValues()/]
[/if]
			[registrationUnit.captchaCheck()/]
			else
			{
[/if]
				$this->[registrationUnit.instanceName()/]->salt = md5(uniqid(rand(), true));
				$this->[registrationUnit.instanceName()/]->enabled = [if (authentication.useEmailActivation)]'0'[else]'1'[/if];
[if (authentication.useEmailActivation)]
				$this->[registrationUnit.instanceName()/]->new_email_key = md5(rand().microtime());
[/if]
[if (registrationUnit.hasInterfaceFields())]
				[registrationUnit.interfaceFieldValidation()/]
[/if]
				$this->[registrationUnit.instanceName()/]->save([if (registrationUnit.hasInterfaceFields())]$extra_validation[/if]);
	[if (authentication.useEmailActivation)]
//				$this->[registrationUnit.instanceName()/]->trans_commit();
//				$this->authentication_lib->sendEmail('activate', $this->[registrationUnit.instanceName()/]->email, array(
//					'site_name' => $this->config->item('site_title', 'site'),
//					'user_id' => $this->[registrationUnit.instanceName()/]->id,
//					'username' => $this->[registrationUnit.instanceName()/]->username,
//					'email' => $this->[registrationUnit.instanceName()/]->email,
//					'new_email_key' => $this->[registrationUnit.instanceName()/]->new_email_key,
//					'activation_period' => $this->config->item('email_activation_expire', 'tank_auth')));
//				$this->page_message = 'Activation email sent';
	[else]
		[let authentication : LocalAuthenticationSystem = authentication.oclAsType(LocalAuthenticationSystem)]
				$user = ORM::factory('[authentication.user.modelName()/]');
				$user->[authentication.userKey.columnName()/] = $this->[registrationUnit.instanceName()/]->[authentication.loginUnit.loginIdField.modelPropertyName()/];
			[for (userFeature : Feature | authentication.user.features->select(f | f.isRequired())->select(f | f <> authentication.userKey))]
				$user->[userFeature.columnName()/] = '';
			[/for]
				$user->validation_required(FALSE)->save();
			[if (authentication.sendWelcomeEmail)]
//				$this->authentication_lib->sendEmail('welcome', $this->[registrationUnit.instanceName()/]->email, array(
//					'site_name' => $this->config->item('site_title', 'site'),
//					'username' => $this->[registrationUnit.instanceName()/]->username,
//					'email' => $this->[registrationUnit.instanceName()/]->email));
			[/if]
		[/let]
		[if (not registrationUnit.confirmDestination.oclIsUndefined())]
				$this->redirect(Route::get('[registrationUnit.confirmDestination.routeName()/]')->uri());
		[else]
				$this->[registrationUnit.instanceName()/]->clear();
				$this->page_message = 'Registration completed';
		[/if]
	[/if]
[if (registrationUnit.hasCaptchaFields())]
			}
[/if]
		}
		catch (ORM_Validation_Exception $e)
		{
			$this->[registrationUnit.instanceName()/]_field_errors = $e->errors('');
	[if (registrationUnit.displayedOn.oclAsType(Page).partOf.developmentVersion)]
			$unreported_field_errors = array_diff_key($this->[registrationUnit.instanceName()/]_field_errors, array([for
	(field : UnitField | registrationUnit.inputFields())
		separator (', ')]'[field.modelPropertyName()/]' => ''[/for][if (registrationUnit.hasInterfaceFields())], '_external' => ''[/if]));
			if (!empty($unreported_field_errors))
				$this->[registrationUnit.errorName()/] = print_r($unreported_field_errors, TRUE);
	[/if]
[if (registrationUnit.hasInterfaceFields())]
			[registrationUnit.rememberInterfaceFields()/]
[/if]
		}
	}
}
[/let]
[/let]
[/template]

[template private actionMethods(unit : LoginUnit) post(trim())]
[unit.loginMethod()/]

[unit.logoutMethod()/]
[/template]

[template private loginMethod(unit : LoginUnit) post(trim())]
[let localAuthentication : LocalAuthenticationSystem = unit.authenticationSystem]
public function action_[unit.actionName()/]()
{
    [unit.authenticationStart()/]
    else if ($this->request->method() == HTTP_Request::POST)
[if (unit.hasCaptchaFields())]
        try
        {
            [unit.createVariables()/]
            [unit.validateLogin()/]
        }
        [unit.catchCaptchaException()/]
[else]
    {
        [unit.createVariables()/]
        [unit.validateLogin()/]
    }
[/if]
}
[/let]
[/template]

[template private logoutMethod(unit : LoginUnit) post(trim())]
public function action_[unit.logoutActionName()/]()
{
    Auth::instance()->logout(FALSE);
    $this->redirect();
}

[/template]

[template public validateLogin(unit : LoginUnit) post(trim())]
[let localAuthentication : LocalAuthenticationSystem = unit.authenticationSystem]
[unit.valuesFromFormToModels()/]
[if (unit.hasForcedValueFeatures())]
[unit.forcedFeatureValues()/]
[/if]
[if (unit.hasCaptchaFields())]
[unit.captchaCheck()/]
[/if]
$login_id = $this->request->post('[unit.loginIdField.modelPropertyName()/]');
$password = $this->request->post('[unit.passwordField.modelPropertyName()/]');
[if (not localAuthentication.autoLogin.oclIsUndefined())]
$remember_me = $this->request->post('[unit.rememberMeField.modelPropertyName()/]');
[/if]
$authentication = Auth::instance()->login($login_id, $password, [if (localAuthentication.autoLogin.oclIsUndefined())]FALSE[else]isset($remember_me)[/if]);
if ($authentication)
{
    $referrer = Session::instance()->get('login_referrer');
    if (!empty($referrer))
    {
        Session::instance()->delete('login_referrer');
        $this->redirect($referrer);
    }
    else
        $this->redirect();
    }
 else
{
    $this->[unit.errorName()/] = Auth::instance()->message;
[if (unit.hasInterfaceFields())]
    [unit.rememberInterfaceFields()/]
[/if]
}
[/let]
[/template]


[template public actionMethod(unit : ForgottenPasswordUnit) post(trim())]
[let forgottenUnit : ForgottenPasswordUnit = unit.oclAsType(ForgottenPasswordUnit)]
public function action_[forgottenUnit.actionName()/]() {
	// based on code from tank_auth by Ilya Konyukhov (http://konyukhov.com/soft/tank_auth/)
	[forgottenUnit.authenticationStart()/]
	else {
		$this->[forgottenUnit.instanceName()/]->where('[forgottenUnit.loginIdField.modelPropertyName()/]', '=', $this->request->post('[forgottenUnit.loginIdField.modelPropertyName()/]'))->find();
		if ($this->[forgottenUnit.instanceName()/]->loaded())
		{
		}
	$this->template->page_message = 'Email sent';
	}
}
[/let]
[/template]
