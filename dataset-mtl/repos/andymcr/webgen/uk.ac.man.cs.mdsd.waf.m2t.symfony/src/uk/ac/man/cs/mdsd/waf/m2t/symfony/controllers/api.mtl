[comment encoding = UTF-8 /]
[module api(
	'http://cs.manchester.ac.uk/mdsd/API',
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]


[template public controller(resource : Resource, model : WafModel)]
[file(resource.controllerFilename(), false)]
<?php
namespace [resource.apiControllersNamespace()/];

use FOS\RestBundle\Controller\Annotations as Rest;
use FOS\RestBundle\Controller\FOSRestController;
use FOS\RestBundle\Request\ParamFetcher;
use Nelmio\ApiDocBundle\Annotation\ApiDoc;


/**
 * sss
 **/
class [resource.controllerClassName()/] extends FOSRestController
{
    [resource.resourceActionMethods()/]
}
[/file]
[/template]

[template private viewAnnotation(resource : Resource) post(trim())]
@Rest\View(serializerEnableMaxDepthChecks="true"[if (resource.defaultSerializationGroups->notEmpty())]
, serializerGroups={[for (group : SerializationGroup | resource.defaultSerializationGroups)]"[group.name/]"[/for]}[/if])
[/template]

[template private resourceActionMethods(resource : Resource) post(trim())]
[if (not resource.getAll.oclIsUndefined() or resource.enableDefaultGetAll)]
[resource.getAllAction()/]

[/if]
[if (not resource.getOne.oclIsUndefined() or resource.enableDefaultGetOne)]
[resource.getOneAction()/]

[/if]
[for (child : Resource | resource.childResources)]
[child.resourceActionMethods()/]
[/for]
[/template]

[template private getAllAction(resource : Resource) post(trim())]
/**
 * @Rest\Get("[resource.uriPath(true)/]", name="[resource.routeName()/]")
 * @Rest\QueryParam(name="page", nullable=true, description="The section of items to return")
 * @Rest\QueryParam(name="pageSize", nullable=true, description="The number of items to return")
 * [resource.viewAnnotation()/]
 * @ApiDoc(
[if (resource.parentResource.oclIsUndefined())]
 *     resource="true",
[/if]
 * )
 *
 * @return array
 **/
public function get[resource.service.name/]Action(ParamFetcher $paramFetcher[if (not resource.parentResource.oclIsUndefined())]
, [resource.parentResource.routeParameters()/][/if])
{
[if (resource.parentResource.oclIsUndefined())]
    return $this->get('[resource.service.instanceName()/]')->[if (resource.getAll.oclIsUndefined())]
findAll[else]
[resource.getAll.methodName()/][/if]($paramFetcher->get("page"), $paramFetcher->get("pageSize"));
[else]
    return $this->get('[resource.parentResource.service.instanceName()/]')->[if (resource.parentResource.getOne.oclIsUndefined())]
find[else]
[resource.parentResource.getOne.methodName()/][/if]([resource.parentResource.service.serves.routeParameters()/]);
[/if]
}
[/template]

[template private getOneAction(resource : Resource) post(trim())]
/**
 * @Rest\Get("[resource.uriPath()/]", name="[resource.routeName()/]One")
 * [resource.viewAnnotation()/]
 * @ApiDoc(
[if (resource.parentResource.oclIsUndefined())]
 *     resource="true",
[/if]
 *     parameters={
[for (key : Attribute | resource.uriPathKeys())]
 *         {"name"="[key.routeParameterName(resource)/]", "dataType"="[key.dataType().name/]", "required"="true", "description"="xx"},
[/for]
 *     },
 * )
 *
 * @return [resource.service.serves.modelClassName()/]
 **/
public function getOne[resource.service.name/]Action([resource.routeParameters()/])
{
    return $this->get('[resource.service.instanceName()/]')->[if (resource.getOne.oclIsUndefined())]
find[else]
[resource.getOne.methodName()/][/if]([resource.service.serves.routeParameters()/]);
}
[/template]
