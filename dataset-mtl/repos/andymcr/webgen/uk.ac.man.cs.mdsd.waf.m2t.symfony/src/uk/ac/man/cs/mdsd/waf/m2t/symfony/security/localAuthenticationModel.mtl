[comment encoding = UTF-8 /]
[module localAuthenticationModel(
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]


[template public model(authentication  : LocalAuthenticationSystem)]
[file (authentication.modelsDirectory().concat('/').concat(authentication.modelName()).concat(authentication.executableExtension()), false)]
<?php
namespace [authentication.modelsNamespace()/];

use Doctrine\ORM\Mapping as ORM;
use FOS\UserBundle\Model\User as BaseUser;
use Symfony\Component\Security\Core\Encoder\EncoderAwareInterface;
use Symfony\Component\Validator\Constraints as Assert;


/**
 * @ORM\Entity
 * @ORM\Table(name="authentications")
 **/
class [authentication.modelName()/] extends BaseUser implements EncoderAwareInterface
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue
     **/
    protected $id;

    /**
     * @ORM\Column(type="datetime")
     * @Assert\NotBlank
     **/
    protected $password_changed_at;
    
    /**
     * @ORM\Column(type="datetime")
     * @Assert\NotBlank
     **/
    protected $created;
    
    /**
     * @ORM\Column(type="datetime", nullable=true)
     **/
    protected $updated;

    public function __construct()
    {
    	parent::__construct();
        $this->created = new \DateTime();
        $this->password_changed_at = new \DateTime('1000-01-01 00:00:00');
    }

    public function getEncoderName()
    {
        if ($this->password_changed_at == NULL
                || $this->password_changed_at < new \DateTime('2016-01-01 00:00'))
            return 'legacy_encoder';
    
        return null;
    }

    public function getId()
    {
        return $this->id;
    }

    public function setPlainPassword($password) 
    { 
        parent::setPlainPassword($password);
        $this->setPasswordChangedAt(new \DateTime());
    } 
  
    public function setPasswordChangedAt($passwordChangedAt) 
    { 
        $this->password_changed_at = $passwordChangedAt; 
    } 
  
    public function getPasswordChangedAt() 
    { 
        return $this->password_changed_at; 
    } 

}
[/file]
[/template]
