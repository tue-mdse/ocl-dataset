[comment encoding = UTF-8 /]
[module authenticationType(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::forms::unitType/]


[template public formTypes(authentication : LocalAuthenticationSystem)]
[if (authentication.useCaptcha)]
[authentication.registrationFormType()/]
[/if]
[/template]

[template public registrationFormType(authentication : LocalAuthenticationSystem)]
[file(authentication.formTypeFilename('Registration'), false)]
<?php
namespace [authentication.formTypeNamespace()/];

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
[if (authentication.useCaptcha)]
use EWZ\Bundle\RecaptchaBundle\Form\Type\EWZRecaptchaType;
use EWZ\Bundle\RecaptchaBundle\Validator\Constraints\IsTrue as RecaptchaTrue;
[/if]


class [authentication.typeClassName('Registration')/] extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder->add('recaptcha', EWZRecaptchaType::class, array(
//            'label' => '??',
            'mapped' => FALSE,
            'constraints' => array(
                new RecaptchaTrue()
            )
        ));
    }

    public function getParent()
    {
        return 'FOS\UserBundle\Form\Type\RegistrationFormType';
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults(array(
            'data_class' => '[authentication.modelsNamespace()/]\[authentication.modelName()/]'
        ));
    }
}
[/file]
[/template]

[template private formFeature(field : InterfaceField)
	? (not field.oclIsTypeOf(CaptchaField)) post(trim())]
add('[field.modelPropertyName()/]', [field.interfaceType()/], array(
    'label' => '[field.displayLabel/]',
[if (not field.isRequired())]
    'required' => FALSE,
[/if]
[if (field.oclIsTypeOf(DataTypeField))]
[elseif (field.oclIsTypeOf(DateField))]
[let dateField : DateField = field.oclAsType(DateField)]
	[if (dateField.details = DateDetails::DateAndTime)]
    'date_widget' => 'single_text',
    'time_widget' => 'single_text',
	[else]
    'widget' => 'single_text',
		[if (dateField.details = DateDetails::TimeOnly)]
    'with_seconds' => TRUE,
		[/if]
	[/if]
[/let]
[/if]
))
[/template]

[template private formFeature(field : InterfaceField)
	? (field.oclIsTypeOf(CaptchaField)) post(trim())]
add('[field.modelPropertyName()/]', EWZRecaptchaType::class, array(
    'label' => '[field.displayLabel/]',
    'mapped' => FALSE,
    'constraints' => array(
        new RecaptchaTrue()
    )
))
[/template]
