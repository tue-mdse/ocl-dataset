[comment encoding = UTF-8 /]
[module display(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::translation/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::labels/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::twig/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::views::accessor/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::views::action/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::views::form/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::views::gallery/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::views::imageIndex/]


[template public unitView(unit : ContentUnit)
	? (unit.oclIsKindOf(DataUnit)) post(trim())]
[let dataUnit : DataUnit = unit.oclAsType(DataUnit)]
[let accessor : String = dataUnit.instanceName()]
[file(dataUnit.viewFilename(), false)]
{% trans_default_domain "entity" %}
<section class="[dataUnit.styleClass/]{%if [dataUnit.errorName()/] is defined %} [dataUnit.errorClass/]{% endif %}" id="[dataUnit.instanceName()/]">
 <h2 class="[dataUnit.captionClass/][if (dataUnit.omitCaption)] hidden[/if]">[dataUnit.unitTitle()/]</h2>
 <section class="[dataUnit.errorClass/]{% if not [dataUnit.errorName()/] is defined %} hidden{% endif %}">
{% if [dataUnit.errorName()/] is defined %}
   <p class="[dataUnit.errorClass/]">{{ [dataUnit.errorName()/] }}</p>
{% endif %}
 </section>
[if (not dataUnit.oclIsKindOf(IndexUnit))]
 [dataUnit.unitContent(null, accessor)/]
	[if (dataUnit.supportActions->select(a | not a.disable)->notEmpty())]
  [dataUnit.unitSupportLinks(accessor)/]
	[/if]
[else]
[let indexUnit : IndexUnit = dataUnit.oclAsType(IndexUnit)]
[let selectionAccessor : String
	= if not indexUnit.selectionType.oclIsUndefined() then
			indexUnit.selectionType.instanceName()
		else
			accessor
		endif]
	[for(filter : Filter | indexUnit.filters())]
 [filter.unitFilter(indexUnit, selectionAccessor)/]
	[/for]
 [dataUnit.unitContent(null, accessor)/]
	[if (not indexUnit.pagination.oclIsUndefined())]
 [indexUnit.pagination(selectionAccessor)/]
	[/if]
	[if (dataUnit.supportActions->select(a | not a.disable)->notEmpty())]
 [dataUnit.unitSupportLinks(accessor)/]
	[/if]
[/let]
[/let]
[/if]
</section>
[/file]
[/let]
[/let]
[/template]


[template private unitTitle(unit : DataUnit)
	? (unit.title.oclIsUndefined()) post(trim())]
[unit.unitTitle('')/]
[/template]

[template private unitTitle(unit : DataUnit)
	? (not unit.title.oclIsUndefined()) post(trim())]
[let contentAccessor : String = unit.instanceName()]
[if (unit.oclIsKindOf(SingletonUnit))]
[unit.unitTitle(contentAccessor)/]
[else]
[let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)]
[let selectionAccessor : String = collectionUnit.selectionType.instanceName()]
	[if (unit.title.oclIsKindOf(Attribute))]
		[if (unit.title.oclAsType(Attribute).partOf = collectionUnit.selectionType)]
[unit.unitTitle(selectionAccessor)/]
		[else]
[unit.unitTitle(contentAccessor)/]
		[/if]
	[else]
		[if (unit.title.oclAsType(ModelLabel).labelFor = collectionUnit.selectionType)]
[unit.unitTitle(selectionAccessor)/]
		[else]
[unit.unitTitle(contentAccessor)/]
		[/if]
	[/if]
[/let]
[/let]
[/if]
[/let]
[/template]

[template private unitTitle(unit : DataUnit, accessor : String)
	? (unit.title.oclIsUndefined()) post(trim())]
{{ '[unit.id()/]' | trans({}, '[unit.translationDomain()/]') }}
[/template]

[template private unitTitle(unit : DataUnit, accessor : String)
	? (not unit.title.oclIsUndefined()) post(trim())]
[let labelAccessor : String
	= if unit.title.oclIsKindOf(Attribute) then
			accessor.concat('.').concat(unit.title.oclAsType(Attribute).modelPropertyName())
		else
			accessor
		endif]
{{ [unit.title.label(labelAccessor)/] }}
[/let]
[/template]


[template private unitFilter(filter : Filter, unit : IndexUnit, accessor : String)]
<div class="filter">
 <form action="{{ path('[unit.routeName()/]', { [if (not unit.selectionType.oclIsUndefined())]
[unit.selectType().routeActualParameters(unit.contentType(), accessor, false)/][else]
[unit.contentType().routeActualParameters(unit.contentType(), accessor, true)/][/if] }) }}" method="get">
[for (parameter : FilterParameter | filter.parameters)]
  <input type="text" name="[parameter.name/]"[if (not parameter.placeholder.oclIsUndefined())]
 placeholder="[parameter.placeholder/]"[/if][if (unit.hasJQueryClasses())]
 class="[filter.jQueryClass()/]"[/if][if (not parameter.formal.optional)]
 required="required"[/if]
 value="{{ app.request.query.get('[parameter.name/]') }}"/>
[/for]
  <input type="submit" name="[filter.name/]Filter" value="[filter.displayLabel/]"[if (unit.hasJQueryClasses())]
 class="[filter.jQueryClass()/]"[/if]/>
 </form>
</div>
[/template]

[template private unitSupportLinks(unit : DynamicUnit, accessor : String) post(trim())]
<form action="{{ path('[unit.supportRouteName()/]', { [unit.contentType().routeActualParameters(unit.contentType(), accessor, unit.oclIsKindOf(IndexUnit))/] }) }}" id="[unit.instanceName()/]" class="[unit.controlClass/]">
[for (action : UnitSupportAction | unit.supportActions->select(a | not a.disable))]
 [action.unitSupportLink()/]
[/for]
</form>
[/template]

[template public unitSupportLink(action : UnitSupportAction) post(trim())]
<input type="submit" name="[action.actionName()/]" value="[action.displayLabel/]"[if (not action.confirmMessage.oclIsUndefined())]
onclick="return confirm('[action.confirmMessage/]');"[/if]/>
[/template]

[template private pagination(unit : IndexUnit, selectionAccessor : String)]
<ul class="unit_control">
[if (unit.useFirstLastPageLinks)]
{% if currentPage != 1 %}
 <li><a href="[unit.pageHref('1', selectionAccessor)/]">[unit.firstPageLabel/]</a></li>
[if (unit.useDisabledPageLinks)]
{% else %}
 <li>[unit.firstPageLabel/]</li>
[/if]
{% endif %}
[/if]
{% if currentPage != 1 %}
 <li><a href="[unit.pageHref('currentPage - 1', selectionAccessor)/]">[unit.previousPageLabel/]</a></li>
[if (unit.useDisabledPageLinks)]
{% else %}
 <li>[unit.previousPageLabel/]</li>
[/if]
{% endif %}
[if (unit.previousNpages > 1 and unit.useDisabledPageLinks)]
{% if max(1, currentPage - [unit.previousNpages/]) > 1 %}<li>&hellip;</li>{% endif %}
[/if]
[if (unit.nextNpages > 1 or unit.previousNpages > 1)]
{% for page in max(1, currentPage - [unit.previousNpages/])..min(currentPage + [unit.nextNpages/], pageCount) %}
 {% if page == currentPage %}
 <li>{{ page }}</li>
 {% else %}
 <li><a href="[unit.pageHref('page', selectionAccessor)/]">{{ page }}</a></li>
 {% endif %}
{% endfor %}
[/if]
[if (unit.nextNpages > 1 and unit.useDisabledPageLinks)]
{% if min(currentPage + [unit.nextNpages/], pageCount) < pageCount %}<li>&hellip;</li>{% endif %}
[/if]
{% if currentPage != pageCount %}
 <li><a href="[unit.pageHref('currentPage + 1', selectionAccessor)/]">[unit.nextPageLabel/]</a></li>
[if (unit.useDisabledPageLinks)]
{% else %}
 <li>[unit.nextPageLabel/]</li>
[/if]
{% endif %}
[if (unit.useFirstLastPageLinks)]
{% if currentPage != pageCount %}
 <li><a href="[unit.pageHref('pageCount', selectionAccessor)/]">[unit.lastPageLabel/]</a></li>
[if (unit.useDisabledPageLinks)]
{% else %}
 <li>[unit.lastPageLabel/]</li>
[/if]
{% endif %}
[/if]
</ul>
[/template]

[template private pageHref(unit : IndexUnit, pageNumber : String, selectionAccessor : String) post(trim())]
{{ path('[unit.routeName()/]', app.request.query.all|merge({'[unit.pagination.parameters->first().name/]': [pageNumber/][if (not unit.selectionType.oclIsUndefined())]
, [unit.selectType().routeActualParameters(unit.contentType(), selectionAccessor, false)/][/if]})) }}
[/template]


[template public unitContent(unit : ContentUnit, nullDisplayValue : String, accessor : String)
	? (unit.oclIsTypeOf(DetailsUnit)) post(trim())]
[let detailsUnit : DetailsUnit = unit.oclAsType(DetailsUnit)]
[detailsUnit.detailsContent(accessor)/]
[/let]
[/template]

[template public detailsContent(unit : DataUnit, accessor : String) post(trim())]
[if (unit.hasOmitFieldLabels())]
<ul class="[unit.contentClass/]">
[else]
<dl class="[unit.contentClass/]">
[/if]
[for (field : UnitField | unit.displayFields)]
	[if (field.conditionalDisplay())]
{% if [field.getImmediateValue(accessor, true)/] is not null %}
	[/if]
	[if (unit.hasOmitFieldLabels())]
 <li class="[field.displayClass()/]">[field.displayValue(accessor, true)/]</li>
	[else]
 <dt class="[field.displayClass()/]">[if (field.hasCustomisedLabel())]
{{ '[unit.containedId()/].labels.[field.id()/]' | trans({}, '[unit.translationDomain()/]') }}[else]
{{ '[unit.contentType().id()/].labels.[field.id()/]' | trans }}[/if]</dt>
 <dd class="[field.displayClass()/]">[field.displayValue(accessor, true)/]</dd>
	[/if]
	[if (field.conditionalDisplay())]
		[if (field.oclIsKindOf(UnitFeature))]
		[let feature : UnitFeature = field.oclAsType(UnitFeature)]
{% else %}
			[if (not feature.nullDisplayValue.oclIsUndefined())]
				[if (unit.hasOmitFieldLabels())]
 <li class="[field.displayClass()/]">{{ '[feature.nullDisplayValue/]' }}</li>
				[else]
 <dt class="[field.displayClass()/]">[if (field.hasCustomisedLabel())]
{{ '[unit.containedId()/].labels.[field.id()/]' | trans({}, '[unit.translationDomain()/]') }}[else]
{{ '[unit.contentType().id()/].labels.[field.id()/]' | trans }}[/if]</dt>
 <dd class="[field.displayClass()/]">{{ '[feature.nullDisplayValue/]' }}</dd>
				[/if]
			[/if]
		[/let]
		[/if]
{% endif %}
	[/if]
[/for]
[if (unit.hasOmitFieldLabels())]
</ul>
[else]
</dl>
[/if]
[/template]

[template protected unitContent(unit : DataUnit, nullDisplayValue : String, accessor : String)
	? (unit.oclIsTypeOf(IndexLineDirectionUnit)) post(trim())]
[let indexUnit : IndexLineDirectionUnit = unit.oclAsType(IndexLineDirectionUnit)]
<ul class="[indexUnit.contentClass/]">
[let loopVariable : String = 'entry']
{% for [loopVariable/] in [accessor/] %}
 <li>
[if (not indexUnit.omitCaption)]
  <section>
   <h2 class="[indexUnit.captionClass/]">[indexUnit.unitTitle(loopVariable)/]</h2>
[/if]
   [indexUnit.entry(loopVariable, true)/]
[if (indexUnit.actions->select(a | not a.disable)->notEmpty())]
<span class="actions">[indexUnit.actions(loopVariable)/]</span>
[/if]
[if (not indexUnit.omitCaption)]
  </section>
[/if]
 </li>
[if (not nullDisplayValue.oclIsUndefined())]
{% else %}
 <li>{{ '[nullDisplayValue/]' }}</li>
[/if]
{% endfor %}
[/let]
</ul>
[/let]
[/template]

[template private entry(unit : IndexLineDirectionUnit, accessor : String, objectAccess : Boolean) post(trim())]
[for (field : UnitField | unit.displayFields) ]
	[if (field.conditionalDisplay())]
{% if [field.getValue('entry'.concat('.').concat(field.modelPropertyName()))/] is not null %}
	[/if]
<span class="[field.modelPropertyName()/]">[field.displayValue(accessor, objectAccess)/]</span>
	[if (field.conditionalDisplay())]
{% endif %}
	[/if]
[/for]
[/template]

[template protected unitContent(unit : DataUnit, nullDisplayValue : String, accessor : String)
	? (unit.oclIsTypeOf(IndexPageDirectionUnit)) post(trim())]
[let indexUnit : IndexPageDirectionUnit = unit.oclAsType(IndexPageDirectionUnit)]
<ul class="[indexUnit.contentClass/]">
{% for entry in [accessor/] %}
 <li>
[if (not indexUnit.omitCaption)]
  <section>
   <h2 class="[indexUnit.captionClass/]">[indexUnit.unitTitle('entry')/]</h2>
[/if]
  [unit.detailsContent('entry')/]
[if (indexUnit.actions->select(a | not a.disable)->notEmpty())]
  <td class="actions">[indexUnit.actions('entry')/]</td>
[/if]
[if (not indexUnit.omitCaption)]
  </section>
[/if]
 </li>
[if (not nullDisplayValue.oclIsUndefined())]
{% else %}
 <li>{{ '[nullDisplayValue/]' }}</li>
[/if]
{% endfor %}
</ul>
[/let]
[/template]

[template public unitContent(unit : DataUnit, nullDisplayValue : String, accessor : String)
	? (unit.oclIsTypeOf(IndexGridUnit)) post(trim())]
[let indexUnit : IndexGridUnit = unit.oclAsType(IndexGridUnit)]
<table class="[indexUnit.contentClass/]">
[if (not indexUnit.omitColumnLabels)]
 <thead class="[indexUnit.headerClass/]">
  <tr>
 	[for (field : UnitField | indexUnit.displayFields)]
   <th>[if (field.hasCustomisedLabel())]
{{ '[unit.containedId()/].labels.[field.id()/]' | trans({}, '[unit.translationDomain()/]') }}[else]
{{ '[field.entityOrView().id()/].labels.[field.id()/]' | trans }}[/if]</th>
 	[/for]
	[if (indexUnit.actions->select(a | not a.disable)->notEmpty())]
   <th>Actions</th>
	[/if]
  </tr>
 </thead>
[/if]
 <tbody>
[let loopVariable : String = 'entry']
{% for [loopVariable/] in [accessor/] %}
  <tr class="{{ cycle(['['/][for (class : String | indexUnit.rowClasses()) separator (', ')]'[class/]'[/for][']'/], loop.index0) }}">
   [indexUnit.entry(loopVariable, true)/]
[if (indexUnit.actions->select(a | not a.disable)->notEmpty())]
   <td class="actions">[indexUnit.actions(loopVariable)/]</td>
[/if]
  </tr>
[if (not nullDisplayValue.oclIsUndefined())]
{% else %}
  <tr>
   <td colspan="[unit.displayFields->size()/]">{{ '[nullDisplayValue/]' }}</td>
	[if (indexUnit.actions->select(a | not a.disable)->notEmpty())]
   <td class="actions">&nbsp;</td>
	[/if]
  </tr>
[/if]
{% endfor %}
[/let]
 </tbody>
</table>
[/let]
[/template]

[template private entry(unit : IndexGridUnit, accessor : String, objectAccess : Boolean) post(trim())]
[for (field : UnitField | unit.displayFields)]
<td class="[field.styleClass()/]">[field.displayValue(accessor, objectAccess)/]</td>
[/for]
[/template]

[template private actions(unit : IndexUnit, rowAccessor : String) post(trim())]
[for (action : InlineAction | unit.actions->select(a | not a.disable))]
[action.actionLink(unit.contentType(), rowAccessor, action.displayLabel, rowAccessor.concat('.defaultLabel()'), rowAccessor)/]
[/for]
[/template]


[template public displayValue(field : UnitField, parentAccessor : String, objectAccess : Boolean)
	? ((field.isDataType() and not field.isBooleanDataType() and not field.isEnumerationType()) and field.isSingleton()) post(trim())]
[if (field.oclIsKindOf(InterfaceField))]
{{ [field.getValue(field.accessor(parentAccessor, field.alias(), objectAccess))/] | default('') }}
[else]
[let feature : UnitFeature = field.oclAsType(UnitFeature)]
[feature.displayAttribute(feature.accessor(parentAccessor, field.alias(), objectAccess), parentAccessor)/]
[/let]
[/if]
[/template]

[template public displayValue(field : UnitField, parentAccessor : String, objectAccess : Boolean)
	? ((field.isDataType() and not field.isBooleanDataType() and not field.isEnumerationType()) and not field.isSingleton()) post(trim())]
[if (field.oclIsKindOf(InterfaceField))]
{{ [field.getValue(field.accessor(parentAccessor, field.alias(), objectAccess))/] | default('') }}
[else]
[let feature : UnitFeature = field.oclAsType(UnitFeature)]
{% for value in [feature.accessor(parentAccessor, field.alias(), objectAccess)/] %}[if (feature.collectionDisplayOption = CollectionDisplayOptions::PageDirection)]
<p>[feature.displayAttribute('value', parentAccessor)/]</p>[else]
<span>[feature.displayAttribute('value', parentAccessor)/]</span>[/if]{% endfor %}
[/let]
[/if]
[/template]

[template public displayValue(field : UnitField, parentAccessor : String, objectAccess : Boolean)
	? (field.isEnumerationType()) post(trim())]
{{ [field.getValue(field.accessor(parentAccessor, field.alias(), objectAccess))/][if (field.maximumDisplaySize > 0)]
 | truncate([field.maximumDisplaySize/])[/if] }}
[/template]

[template public displayValue(field : UnitField, parentAccessor : String, objectAccess : Boolean)
	? (field.isDate()) post(trim())]
{{ [field.getValue(field.accessor(parentAccessor, field.alias(), objectAccess))/] | date[if (not field.dateFormat.oclIsUndefined())]
('[field.dateFormat/]')[/if][if (field.maximumDisplaySize > 0)]
 | truncate([field.maximumDisplaySize/])[/if] }}
[/template]

[template public displayValue(field : UnitField, parentAccessor : String, objectAccess : Boolean) 
	? (field.isBooleanDataType()) post(trim())] 
<input type="checkbox"{% if [field.accessor(parentAccessor, field.alias(), objectAccess)/] %} checked="checked"{% endif %} disabled="disabled"/>
[/template] 
 
[template public displayValue(field : UnitField, parentAccessor : String, objectAccess : Boolean)
	? (field.isResource() and field.isSingleton()) post(trim())]
[let attribute : UnitAttribute = field.oclAsType(UnitAttribute)]
[let accessor : String = field.accessor(parentAccessor, field.alias(), objectAccess)]
<?php
[if (not attribute.conditionalDisplay())]
    if (!empty([attribute.getValue(accessor)/]))
[/if]
        echo HTML::anchor(
            [attribute.getValue(accessor)/],
            '[attribute.displayLabel()/]',
            NULL, NULL, FALSE);
?>
[/let]
[/let]
[/template]

[template public displayValue(field : UnitField, parentAccessor : String, objectAccess : Boolean)
	? (field.isAssociation() and field.isSingleton()) post(trim())]
[let association : UnitAssociation = field.oclAsType(UnitAssociation)]
[let accessor : String = association.accessor(parentAccessor, field.alias(), objectAccess)]
[if (association.units->isEmpty())]
[association.displayAssociation(accessor, parentAccessor)/]
[else]
[association.units->first().unitContent(association.nullDisplayValue, accessor)/]
[/if]
[/let]
[/let]
[/template]

[template public displayValue(field : UnitField, parentAccessor : String, objectAccess : Boolean)
	? (field.isAssociation() and not field.isSingleton()) post(trim())]
[let association : UnitAssociation = field.oclAsType(UnitAssociation)]
[let accessor : String = association.accessor(parentAccessor, field.alias(), objectAccess)]
[if (association.units->isEmpty())]
{% for value in [accessor/] %}[if (association.collectionDisplayOption = CollectionDisplayOptions::PageDirection)]
<p>[association.displayAssociation('value', 'value')/]</p>[else]
<span>[association.displayAssociation('value', 'value')/]</span>[/if][if (not association.nullDisplayValue.oclIsUndefined())]
{% else %}{{ '[association.nullDisplayValue/]' }}[/if]{% endfor %}
[else]
[let embeddedUnit : ContentUnit = association.units->first()]
	[if (not embeddedUnit.oclIsKindOf(IndexUnit))]
[association.units.unitContent(association.nullDisplayValue, accessor)/]
	[elseif (embeddedUnit.oclAsType(IndexUnit).defaultSelection.oclIsUndefined())]
[association.units.unitContent(association.nullDisplayValue, accessor)/]
	[else]
	[let indexUnit : IndexUnit = embeddedUnit.oclAsType(IndexUnit)]
[association.units.unitContent(association.nullDisplayValue,
	association.serviceAccessor()
		.concat('.').concat(association.name).concat(indexUnit.defaultSelection.instanceName().toUpperFirst())
		.concat('(').concat(parentAccessor).concat(')'))/]
	[/let]
	[/if]
[/let]
[/if]
[/let]
[/let]
[/template]

[template private displayAttribute(feature : UnitFeature, accessor : String, parentAccessor : String) post(trim())]
[if (feature.actions->select(a | not a.disable)->notEmpty())]
[let parentEntityOrView : EntityOrView
		= if feature.oclIsKindOf(UnitAttribute) then 
				feature.oclAsType(UnitAttribute).attribute.partOf
			else
				feature.oclAsType(UnitAssociation).association.partOf
			endif]
[feature.actions->select(a | not a.disable)
	->first().actionLink(parentEntityOrView, parentAccessor, '{{ '.concat(feature.getValue(accessor)).concat(' }}'), parentAccessor.concat('.defaultLabel()'), parentAccessor)/]
[/let]
[else]
{{ [feature.getValue(accessor)/] | default('')[if (feature.maximumDisplaySize > 0)]
 | truncate([feature.maximumDisplaySize/])[/if] }}
[/if]
[/template]

[template private displayAssociation(association : UnitAssociation, accessor : String, parentAccessor : String) post(trim())]
[if (association.actions->select(a | not a.disable)->notEmpty())]
[association.actions->select(a | not a.disable)
	->first().actionLink(association.association.targetType(), accessor, '{{ '.concat(accessor).concat('.defaultLabel()').concat(' }}'), accessor.concat('.defaultLabel()'), accessor)/]
[else]
{{ [accessor/].defaultLabel()| default('[if (not association.nullDisplayValue.oclIsUndefined())][association.nullDisplayValue/][/if]')[if (association.maximumDisplaySize > 0)]
 | truncate([association.maximumDisplaySize/] - 3)[/if] }}
[/if]
[/template]


[template public getImmediateValue(field : UnitField, parentAccessor : String, objectAccess : Boolean) post(trim())]
[if (field.oclIsTypeOf(UnitFeature))]
[field.oclAsType(UnitFeature).getImmediateValue(parentAccessor, objectAccess)/]
[else]
NULL
[/if]
[/template]

[template public getImmediateValue(feature : UnitFeature, parentAccessor : String, objectAccess : Boolean) post(trim())]
[if (feature.oclIsTypeOf(UnitAttribute))]
[feature.oclAsType(UnitAttribute).getImmediateValue(parentAccessor, objectAccess)/]
[else]
[feature.oclAsType(UnitAssociation).getImmediateValue(parentAccessor, objectAccess)/]
[/if]
[/template]

[template public getImmediateValue(attribute : UnitAttribute, parentAccessor : String, objectAccess : Boolean) post(trim())]
[attribute.attribute.getValue(attribute.propertyAccessor(parentAccessor, attribute.alias(), objectAccess))/]
[/template]

[template public getImmediateValue(association : UnitAssociation, parentAccessor : String, objectAccess : Boolean) post(trim())]
[if (association.isPseudo())]
[association.pseudoAccessor(parentAccessor)/]
[else]
[association.propertyAccessor(parentAccessor, association.alias(), objectAccess)/]
[/if]
[/template]