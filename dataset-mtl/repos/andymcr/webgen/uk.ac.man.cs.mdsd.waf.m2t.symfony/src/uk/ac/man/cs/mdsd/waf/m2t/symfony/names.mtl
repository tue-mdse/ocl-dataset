[comment encoding = UTF-8 /]
[module names(
	'http://www.eclipse.org/emf/2002/Ecore',
	'http://cs.manchester.ac.uk/mdsd/API',
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]


[query public appBundleName(eObject : EObject) : String
	= 'AppBundle'
/]

[query public fosUserBundleName(eObject : EObject) : String
	= 'FOSUserBundle'
/]

[query public authPrefix(eObject : EObject) : String
	= 'Auth'
/]

[query public typePrefix(eObject : EObject) : String
	= 'App'
/]

[query public typeSuffix(eObject : EObject) : String
	= 'Type'
/]

[query public unitPrefix(eObject : EObject) : String
	= 'Unit'
/]


[query public filterName(type : EnumerationType) : String
	= type.name.toLowerFirst()
/]

[query public formTypeName(type : EnumerationType) : String
	= type.name.toLowerFirst()
/]

[query public typeClassName(type : EnumerationType) : String
	= type.typePrefix().concat(type.name).concat(type.typeSuffix())
/]

[query public modelName(type : EnumerationType) : String
	= type.name
/]


[query public instanceName(entityOrView : EntityOrView) : String
	= entityOrView.name.toLowerFirst()
/]

[query public routeName(entityOrView : EntityOrView) : String
	= entityOrView.name.toLowerFirst()
/]

[query public selectName(entityOrView : EntityOrView) : String
	= entityOrView.name.toLowerFirst()
/]

[query public typeClassName(entityOrView : EntityOrView) : String
	= entityOrView.typePrefix().concat(entityOrView.modelName()).concat(entityOrView.typeSuffix())
/]


[query public controllerName(resource : Resource) : String
	= resource.name
/]

[query public controllerClassName(resource : Resource) : String
	= resource.controllerName().concat('Controller').toUpperFirst()
/]


[query public childSelectionName(association : Association, selection : Selection) : String
	= association.name.concat(selection.instanceName().toUpperFirst())
/]

[query public selectName(association : Association, service : Service) : String
	= let entityOrView : EntityOrView
		= if service.serves.features->includes(association) then
				if association.oclIsKindOf(EntityAssociation) then
					association.oclAsType(EntityAssociation).opposite.partOf
				else
					association.partOf -- TODO fix
				endif
			else
				association.partOf
			endif
		in entityOrView.selectName()
/]


[query public modelName(authentication : Authentication) : String
	= authentication.authPrefix().concat('Authentication')
/]

[query public typeClassName(authentication : LocalAuthenticationSystem, element : String) : String
	= authentication.authPrefix().concat(element).concat(authentication.typeSuffix())
/]


[query public className(service : Service) : String
	= service.name.concat('Service')
/]

[query public instanceName(service : Service) : String
	= service.name.toLowerFirst()
/]


[query public methodName(operation : BusinessOperation) : String
	= operation.name.toLowerFirst()
/]


[query public baseControllerClassName(eObject : EObject) : String
	= 'Controller'
/]

[query public instanceName(menu : Menu) : String
	= menu.name.toLowerFirst()
/]

[query public controllerName(page : Page) : String
	= page.name
/]

[query public controllerClassName(page : Page) : String
	= page.controllerName().concat('Controller').toUpperFirst()
/]

[query public instanceName(page : Page) : String
	= page.name.toLowerFirst()
/]

[query public routeName(page : Page) : String
	= if page.dynamicUnits()->isEmpty() then
			page.instanceName()
		else
			page.dynamicUnits()->first().routeName()
		endif
/]


[query public actionName(unit : ContentUnit) : String
	= unit.instanceName().concat('Action')
/]

[query public controllerName(unit : DynamicUnit) : String
	= unit.pageDisplayedOn().controllerName()
/]

[query public errorName(unit : DynamicUnit) : String
	= unit.instanceName().concat('_error')
/]

[query public formTypeName(unit : DynamicUnit) : String
	= unit.instanceName().concat('_field_errors')
/]

[query public fieldErrorsName(unit : DynamicUnit) : String
	= unit.instanceName().concat('_field_errors')
/]

[query public instanceName(unit : ContentUnit) : String
	= unit.name.toLowerFirst()
/]

[query public instanceName(unit : CollectionUnit) : String
	= unit.oclAsType(DynamicUnit).instanceName()
/]

[query public instanceName(resource : Resource) : String
	= resource.name.toLowerFirst()
/]

[query public modelName(unit : ContentUnit) : String
	= if unit.oclIsTypeOf(StaticUnit) then
			if unit.oclAsType(StaticUnit).service.oclIsUndefined() then
				'None'
			else
				unit.oclAsType(StaticUnit).service.serves.modelName()
			endif
		else
			if unit.hasDefaultValueFields() or unit.hasInterfaceFields() then
				unit.unitPrefix().concat(unit.pageDisplayedOn().name).concat(unit.name)
			else
				unit.oclAsType(DynamicUnit).contentType().modelName()
			endif
		endif
/]

[query public logoutActionName(unit : LoginUnit) : String
	= 'logout'
/]

[query public routeName(unit : ContentUnit) : String
	= unit.routeName('')
/]

[query public routeName(unit : ContentUnit, suffix : String) : String
	= if unit.displayedOn.oclIsTypeOf(Page) and unit.pageDisplayedOn().units->size() = 1 then
			unit.pageDisplayedOn().instanceName()
		else
			unit.uniqueName()
			.concat(if suffix <> '' then
					'_' + suffix
				else
					''
				endif)
		endif
/]

[query public routeName(resource : Resource) : String
	= resource.instanceName()
/]

[query public selectName(unit : ContentUnit) : String
	= unit.instanceName().concat('Select')
/]

[query public selectName(unit : CollectionUnit) : String
	= unit.oclAsType(DynamicUnit).selectName()
/]

[query public supportActionName(unit : ContentUnit) : String
	= unit.instanceName().concat('Support').concat('Action')
/]

[query public supportRouteName(unit : ContentUnit) : String
	= unit.uniqueName().concat('_support')
/]

[query public thumbName(unit : ImageUnit) : String
	= let units : Sequence(ImageUnit)
		= unit.pageDisplayedOn().partOf.imageUnits()
		in if unit->collect(u | u.name)->select(n | n = unit.name)->size() > 1 then
				unit.instanceName()
			else
				unit.uniqueName()
			endif
/]

[query public typeClassName(unit : DynamicUnit) : String
	= 'Unit'.concat(unit.pageDisplayedOn().name).concat(unit.name).concat(unit.typeSuffix())
/]

[query public uniqueName(unit : ContentUnit) : String
	= let key : String
		= if unit.displayedOn.oclIsTypeOf(Page) then
				unit.displayedOn.oclAsType(Page).instanceName()
			else
				unit.displayedOn.oclAsType(UnitAssociation).displayedOn.uniqueName()
			endif
		in key.concat('_').concat(unit.instanceName())
/]

[query public viewName(unit : ContentUnit) : String
	= unit.name.toLowerFirst()
/]


[query public instanceName(field : UnitField) : String
	= if field.oclIsTypeOf(UnitAttribute) then
			field.oclAsType(UnitAttribute).name
		else if field.oclIsTypeOf(UnitAssociation) then
			field.oclAsType(UnitAssociation).name
		else
			field.oclAsType(InterfaceField).name
		endif endif.toLowerFirst()
/]

[query public optionsName(field : UnitField) : String
	= field.uniqueName().concat('_options')
/]

[query public uniqueName(field : UnitField) : String
	= field.displayedOn.instanceName().concat('_').concat(field.modelPropertyName())
/]


[query public actionName(action : UnitSupportAction) : String
	= action.name.toLowerFirst()
/]


[query public actionName(action : InlineAction) : String
	= let name : String
		= if action.usedBy.oclIsKindOf(DynamicUnit) then
				let actions : Sequence(InlineAction)
					= action.controller().units
						->select(u | u.oclIsKindOf(InlineActionContainer)).oclAsType(InlineActionContainer)
						->collect(c | c.actions)
					in 
				if actions->select(a | a.name.toLowerCase() = action.name.toLowerCase())->size() < 2  then
					action.name.toLowerFirst()
				else
					action.usedBy.oclAsType(DynamicUnit).instanceName()
						.concat(action.name.toUpperFirst())
				endif
			else
				let association : UnitAssociation
						= action.usedBy.oclAsType(UnitAssociation)
					in association.displayedOn.instanceName()
					.concat(association.name.toUpperFirst())
					.concat(action.name.toUpperFirst())
			endif
		in name.concat('Action')
/]

[query public instanceName(action : InlineAction) : String
	= action.name.toLowerFirst()
/]

[query public modelName(action : DeleteAction) : String
	= if action.usedBy.oclIsKindOf(DynamicUnit) then
			action.usedBy.oclAsType(DynamicUnit).modelName()
		else
			action.usedBy.oclAsType(UnitAssociation).association.modelName()
		endif
/]

[query public modelName(action : FeatureSupportAction) : String
	= if action.usedBy.oclIsKindOf(DynamicUnit) then
			action.usedBy.oclAsType(DynamicUnit).modelName()
		else
			action.usedBy.oclAsType(UnitAssociation).association.modelName()
		endif
/]

[query public routeName(action : InlineAction) : String
	= action.immediateUnit().containingUnit().routeName()
		.concat('_').concat(action.name.toLowerFirst())
/]


[query public criteriaMethodName(selection : Selection) : String
	= selection.instanceName().concat('Criteria')
/]

[query public countName(selection : Selection) : String
	= selection.instanceName().concat('_count')
/]

[query public instanceName(selection : Selection) : String
	= selection.name.toLowerFirst()
/]

[query public methodName(selection : Selection) : String
	= selection.instanceName()
/]
