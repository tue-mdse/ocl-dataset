[comment encoding = UTF-8 /]
[module config(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]


[template public config(model : WafModel)]
[file (model.configBaseFilename().concat(model.ymlExtension()), false)]
imports:
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

framework:
    #esi:             ~
    default_locale:  "%locale%"
    translator:      { fallbacks: ['['/]"%locale%"[']'/] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
[if (model.hasAPI())]
    serializer:      { enable_annotations: true }
[/if]
    templating:
        engines: ['['/]'twig'[']'/]
        #assets_version: SomeVersionScheme
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
        save_path:   "%kernel.root_dir%/../var/sessions/%kernel.environment%"
    fragments:       ~
    http_method_override: true
    assets: ~

sensio_framework_extra:
    view: { annotations: [if (model.hasAPI())]true[else]false[/if] }
    router: { annotations: true }

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"
[if (model.hasServicesWithSelections())]
    globals:
	[for (service : Service | model.servicesWithSelections())]
        [service.className().toLowerFirst()/]: "@[service.name/]"
	[/for]
[/if]

# Doctrine Configuration
doctrine:
    dbal:
        driver:   [if (model.persistence.databaseTechnology = DatabaseTechnologies::MySql)]
pdo_mysql[elseif (model.persistence.databaseTechnology = DatabaseTechnologies::Oracle)]
oci8[/if]

        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
[if (model.persistence.databaseTechnology = DatabaseTechnologies::Oracle)]
        service:   true
[/if]
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"
[if (model.persistence.hasCustomOrmTypes)]
        types:
            # [protected ('Custom types')]
            # [/protected]
[/if]

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true

[if (model.hasCaptchaFields() or model.isLocallyAuthenticated())]
ewz_recaptcha:
    public_key:  [model.captchaSiteKey/]
    private_key: [model.captchaSecretKey/]
    locale_key:  %kernel.default_locale%

[/if]
[if (model.hasJavascript() or model.hasSliderUnits())]
assetic:
    debug:          '%kernel.debug%'
    use_controller: '%kernel.debug%'
    filters:
        cssrewrite: ~

[/if]
[if (model.hasImageUnits())]
[model.imageConfig()/]

[/if]
[if (model.hasAPI())]
fos_rest:
    allowed_methods_listener: true
    param_fetcher_listener: true
    body_listener: true
    format_listener:
        enabled: true
        rules:
            - { path: '^/api', priorities: ['['/]'json', 'xml'[']'/], fallback_format: json }
            - { path: '^/', stop: true } 
    view:
        formats:
            json: true
        view_response_listener: 'force'

nelmio_api_doc: ~

[/if]
[if (model.isLocallyAuthenticated())]
[let authentication : LocalAuthenticationSystem = model.authentication.oclAsType(LocalAuthenticationSystem)]
fos_user:
    db_driver: orm # other valid values are 'mongodb', 'couchdb' and 'propel'
    firewall_name: main
    user_class: [model.modelsNamespace()/]\[authentication.modelName()/]
    from_email:
        address:     admin@sps3.andycarpenter.me.uk
        sender_name: Sale Photographic Society
	[if (authentication.useCaptcha)]
    registration:
        form:
            type: [authentication.formTypeNamespace()/]\[authentication.typeClassName('Registration')/]
[if (authentication.useEmailActivation)]
        confirmation:
            enabled: true
[/if]
	[/if]

[/let]
[/if]
[if (model.isCasAuthenticated())]
[/if]
# Swiftmailer Configuration
swiftmailer:
    transport:  "%mailer_transport%"
    host:       "%mailer_host%"
    port:       "%mailer_port%"
    encryption: "%mailer_encryption%"
    username:   "%mailer_user%"
    password:   "%mailer_password%"
#    spool:     { type: memory }
[/file]
[/template]

[template private imageConfig(model : WafModel) post(trim())]
liip_imagine:
    cache: image_cache
    loaders:
       default:
          stream:
              wrapper: http://sps.andycarpenter.me.uk/
    resolvers:
       image_cache:
          aws_s3:
              client_config:
                  credentials:
                      key:    "%aws.s3.key%"
                      secret: "%aws.s3.secret%"
                  region:     "%aws.s3.region%"
                  version:    "%aws.s3.version%"
              bucket:         "%aws.s3.bucket%"
              get_options:
                  Scheme: 'https'
              put_options:
                  CacheControl: 'max-age=31557600'
    filter_sets:
[for (manipulation : ImageManipulation | model.imageManipulations)]
        [manipulation.name/]:
	[if (manipulation.jpegQuality > 0)]
            quality: [manipulation.jpegQuality/]
	[/if]
            filters:
	[for (filter : ImageFilter | manipulation.filters)]
                [filter.config()/]
	[/for]
[/for]
[/template]

[template private config(filter : ImageFilter)
	? (filter.oclIsTypeOf(ThumbnailFilter)) post(trim())]
[let thumbnailFilter : ThumbnailFilter = filter.oclAsType(ThumbnailFilter)]
thumbnail: { size: ['['/][thumbnailFilter.width/], [thumbnailFilter.height/][']'/], mode: outbound }
[/let]
[/template]