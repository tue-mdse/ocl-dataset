[comment encoding = UTF-8 /]
[module featureProperties(
	'http://cs.manchester.ac.uk/mdsd/Expression',
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping')]


[query public asId(string : String) : String
	= if self.size() < 2 then
			self.toLowerCase()
		else
			self.substring(1, 1)
				.concat(self.substring(2, self.size()).replaceAll('([A-Z][^A-Z])', '_$1'))
				.toLowerCase()
		endif
/]

[query public escapeQuotes(string : String) : String
	= string.replaceAll('(\')', '\\\\$1')
/]


[query public entry(entries : Sequence(String), index : Integer) : String
	= if entries->size() < index then
			''
		else
			entries->drop(index - 1)->first()
		endif
/]


[query public enumerationTypes(model : OrmModel) : Sequence(EnumerationType)
	= model.dataTypes->select(t | t.oclIsKindOf(EnumerationType)).oclAsType(EnumerationType)
/]

[query public manyToManyAssociations(model : OrmModel) : Sequence(EntityAssociation)
	= model.entitiesAndViews->select(e | e.oclIsTypeOf(Entity)).oclAsType(Entity)
		->collect(e | e.associations()).oclAsType(EntityAssociation)
		->select(a | not a.isSingleton() and not a.opposite.isSingleton())
/]


[query public id(enumerationType : EnumerationType) : String
	= enumerationType.name.asId()
/]


[query public id(literal : EnumerationLiteral) : String
	= literal.name.asId()
/]


[query public associations(entityOrView : EntityOrView) : Sequence(Association)
	= entityOrView.features
		->select(f | f.oclIsKindOf(Association)).oclAsType(Association)
		->select(a | a.isVisible())
/]

[query public associationKeys(entityOrView : EntityOrView) : Sequence(EntityAssociation)
	= entityOrView.keys->select(k | k.oclIsKindOf(EntityAssociation)).oclAsType(EntityAssociation)
/]

[query public attributes(entityOrView : EntityOrView) : Sequence(Attribute)
	= entityOrView.features->select(f | f.oclIsKindOf(Attribute)).oclAsType(Attribute)
/]

[query public attributesAndSingletons(entityOrView : EntityOrView) : Sequence(Feature)
	= entityOrView.features
		->select(f | f.oclIsKindOf(Attribute) or f.isSingleton() and f.isVisible()).oclAsType(Feature)
/]

[query public attributeKeys(entityOrView : EntityOrView) : Sequence(Attribute)
	= entityOrView.keys->select(k | k.oclIsKindOf(Attribute)).oclAsType(Attribute)
/]

[query public collectionAssociations(entityOrView : EntityOrView) : Sequence(Association)
	= entityOrView.associations()->select(a | not a.isSingleton() and a.isVisible())
/]

[query public container(entityOrView : EntityOrView) : EntityOrView
	= let containingAssociation : EntityAssociation
		= entityOrView.containingAssociation()
		in if containingAssociation.oclIsUndefined() then
				null
			else
				containingAssociation.opposite.partOf
			endif
/]

[query public  containerUniqueAttributes(entityOrView : EntityOrView) : Sequence(Attribute)
	= entityOrView.attributes()->select(a | a.isContainerUnique())
/]

[query public containingAssociation(entityOrView : EntityOrView) : EntityAssociation
	= let associations : Sequence(EntityAssociation)
		= entityOrView.features
			->select(f | f.oclIsKindOf(EntityAssociation)).oclAsType(EntityAssociation)
			->select(a | a.container)
		in if associations->size() = 0 then
				null
			else
				associations->first()
			endif
/]

[query public dataTypeAttributes(entityOrView : EntityOrView) : Sequence(Attribute)
	= entityOrView.features->select(f | f.isDataType()).oclAsType(Attribute)
/]

[query public dateAttributes(entityOrView : EntityOrView) : Sequence(Attribute)
	= entityOrView.features->select(f | f.isDate()).oclAsType(Attribute)
/]

[query public defaultValueFeatures(entityOrView : EntityOrView) : Sequence(Attribute)
	= entityOrView.features->select(f | f.hasDefaultValue()).oclAsType(Attribute)
/]

[query public features(entityOrView : EntityOrView) : OrderedSet(Feature)
	= entityOrView.features->select(a | a.isVisible())
/]

[query public hasAssociations(entityOrView : EntityOrView) : Boolean
	= entityOrView.associations()->notEmpty()
/]

[query public hasAssociationKeys(entityOrView : EntityOrView) : Boolean
	= entityOrView.associationKeys()->notEmpty()
/]

[query public hasAttributesOrSingletons(entityOrView : EntityOrView) : Boolean
	= entityOrView.attributesAndSingletons()->notEmpty()
/]

[query public hasCollectionAssociations(entityOrView : EntityOrView) : Boolean
	= entityOrView.collectionAssociations()->notEmpty()
/]

[query public hasDefaultLabel(entityOrView : EntityOrView) : Boolean
	= entityOrView.labels->select(l | l.name = 'default')->notEmpty()
/]

[query public hasDefaultValueFeatures(entityOrView : EntityOrView) : Boolean
	= entityOrView.defaultValueFeatures()->notEmpty()
/]

[query public hasInverseSingletonAssociations(entityOrView : EntityOrView) : Boolean
	= entityOrView.inverseSingletonAssociations()->notEmpty()
/]

[query public hasOwnedSingletonAssociations(entityOrView : EntityOrView) : Boolean
	= entityOrView.ownedSingletonAssociations()->notEmpty()
/]

[query public hasPrimaryKeys(entityOrView : EntityOrView) : Boolean
	= entityOrView.primaryKeys()->notEmpty()
/]

[query public hasPseudoAssociations(entityOrView : EntityOrView) : Boolean
	= entityOrView.pseudoAssociations()->notEmpty()
/]

[query public hasResourceAttributes(entityOrView : EntityOrView) : Boolean
	= entityOrView.resourceAttributes()->notEmpty()
/]

[query public hasValidatedFeatures(entityOrView : EntityOrView) : Boolean
	= entityOrView.validatedFeatures()->notEmpty()
/]

[query public inverseSingletonAssociations(entityOrView : EntityOrView) : Sequence(Association)
	= entityOrView.associations()->select(a | a.isSingleton() and not a.isOwningEnd() and a.isVisible())
/]

[query public isContained(entityOrView : EntityOrView) : Boolean
	= not entityOrView.container().oclIsUndefined()
/]

[query public modifiableAssociations(entityOrView : EntityOrView) : Sequence(Association)
	= entityOrView.associations()->select(a | a.isModifiable())
/]

[query public ownedSingletonAssociations(entityOrView : EntityOrView) : Sequence(Association)
	= entityOrView.associations()->select(a | a.isSingleton() and a.isOwningEnd())
/]

[query public primaryKeys(entityOrView : EntityOrView) : Sequence(EntityFeature)
	= entityOrView.features->select(f | f.isPrimaryKey()).oclAsType(EntityFeature)
/]

[query public pseudoAssociations(entityOrView : EntityOrView) : Sequence(Association)
	= entityOrView.features->select(f | f.isPseudo()).oclAsType(Association)
/]

[query public resourceAttributes(entityOrView : EntityOrView) : Sequence(SingletonResource)
	= entityOrView.features->select(f | f.isResource()).oclAsType(SingletonResource)
/]

[query public tableColumns(entity : Entity) : OrderedSet(Feature)
	= entity.features->select(f | f.hasColumn())
/]

[query public  uniqueAttributes(entityOrView : EntityOrView) : Sequence(Attribute)
	= entityOrView.attributes()->select(a | a.isUnique())
/]

[query public validatedFeatures(entityOrView : EntityOrView) : Sequence(Feature)
	= entityOrView.features->select(f | f.isValidated()).oclAsType(Feature)
/]


[query public columnName(feature : Feature) : String
	= if feature.oclIsKindOf(EntityFeature) then
			feature.oclAsType(EntityFeature).columnName
		else if feature.oclIsKindOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).columnName
		else if feature.oclIsKindOf(EncapsulatedAssociation) then
			feature.oclAsType(EncapsulatedAssociation).association.columnName()
		else
			feature.oclAsType(ViewAssociation).opposite.oppositeColumnName()
		endif endif endif
/]

[query public dataType(feature : Feature) : Classifier
	= if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.dataType()
		else if feature.oclIsTypeOf(SingletonElement) then
			feature.oclAsType(SingletonElement).dataType
		else if feature.oclIsTypeOf(CollectionElement) then
			feature.oclAsType(CollectionElement).collectionType.elementType
		else
			null
		endif endif endif
/]

[query public dateDetails(feature : Feature) : DateDetails
	= if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.dateDetails()
		else if feature.oclIsKindOf(DateAttribute) then
			feature.oclAsType(DateAttribute).details
		else
			null
		endif endif
/]

[query public defaultValue(feature : Feature) : Expression
	= if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.defaultValue()
		else if feature.oclIsKindOf(Attribute) then
			feature.oclAsType(Attribute).defaultValue
		else
			null
		endif endif
/]

[query public enumerationType(feature : Feature) : EnumerationType
	= if feature.oclIsKindOf(SingletonElement) then
			feature.oclAsType(SingletonElement).dataType.oclAsType(EnumerationType)
		else if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.enumerationType()
		else
			null
		endif endif
/]

[query public hasColumn(feature : Feature) : Boolean
	= if feature.oclIsKindOf(SingletonAttribute) then
			true
		else if feature.oclIsTypeOf(SingletonAssociation) then
			feature.oclAsType(SingletonAssociation).owningEnd
		else
			false
		endif endif
/]

[query public hasDefaultValue(feature : Feature) : Boolean
	= if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.hasDefaultValue()
		else if feature.oclIsKindOf(Attribute) then
			not feature.oclAsType(Attribute).defaultValue.oclIsUndefined()
		else
			false
		endif endif
/]

[query public hasHtml5Attributes(feature : Feature) : Boolean
	= if feature.oclIsKindOf(Attribute) then
			feature.oclAsType(Attribute).hasValidationPattern()
		else
			false
		endif
/]

[query public hasSerializationControl(feature : Feature) : Boolean
	= let hasMaxDepth : Boolean
		= if not feature.oclIsKindOf(Association) then
				false
			else
				feature.oclAsType(Association).serializationMaxDepth > 0
			endif
		in feature.serializationGroups->notEmpty() or hasMaxDepth
/]

[query public hasValidationPattern(feature : Feature) : Boolean
	= if feature.oclIsKindOf(Attribute) then
			not feature.oclAsType(Attribute).validationPattern.oclIsUndefined()
		else
			false
		endif
/]

[query public isBooleanDataType(feature : Feature) : Boolean
	= if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.isBooleanDataType()
		else if not feature.oclIsTypeOf(SingletonElement) then
			false
		else
			let singleton : SingletonElement
				= feature.oclAsType(SingletonElement)
				in singleton.dataType.name = 'Boolean'
		endif endif
/]

[query public isCaseInsensitive(feature : Feature) : Boolean
	= if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.isCaseInsensitive()
		else if feature.oclIsTypeOf(SingletonElement) then
			feature.oclAsType(SingletonElement).caseInsensitive
		else
			false
		endif endif
/]

[query public isContainer(feature : Feature) : Boolean
	= if feature.oclIsKindOf(Attribute) then
			false
		else if feature.oclIsKindOf(EntityAssociation) then
			feature.oclAsType(EntityAssociation).container
		else if feature.oclIsTypeOf(EncapsulatedAssociation) then
			feature.oclAsType(EncapsulatedAssociation).association.isContainer()
		else
			false
		endif endif endif
/]

[query public isContainerUnique(feature : Feature) : Boolean
	= if feature.oclIsKindOf(SingletonAttribute) then
			feature.oclAsType(SingletonAttribute).containerUnique
		else if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.isContainerUnique()
		else
			false
		endif endif
/]

[query public isContains(feature : Feature) : Boolean
	= if feature.oclIsKindOf(Attribute) then
			false
		else if feature.oclIsKindOf(EntityAssociation) then
			feature.oclAsType(EntityAssociation).contains
		else if feature.oclIsTypeOf(EncapsulatedAssociation) then
			feature.oclAsType(EncapsulatedAssociation).association.isContains()
		else
			false
		endif endif endif
/]

[query public isDataType(feature : Feature) : Boolean
	= if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.isDataType()
		else
			feature.oclIsTypeOf(SingletonElement) or feature.oclIsTypeOf(CollectionElement)
		endif
/]

[query public isDate(feature : Feature) : Boolean
	= if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.isDate()
		else
			feature.oclIsKindOf(DateAttribute)
		endif
/]

[query public isEncrypted(feature : Feature) : Boolean
	= if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.isEncrypted()
		else if feature.oclIsTypeOf(SingletonElement) then
			feature.oclAsType(SingletonElement).encrypt
		else
			false
		endif endif
/]

[query public isEnumerationType(feature : Feature) : Boolean
	= if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.isEnumerationType()
		else if not feature.oclIsKindOf(SingletonElement) then
			false
		else let element : SingletonElement = feature.oclAsType(SingletonElement)
			in element.dataType.oclIsTypeOf(EnumerationType)
		endif endif
/]

[query public isIntegerDataType(feature : Feature) : Boolean
	= if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.isBooleanDataType()
		else if not feature.oclIsTypeOf(SingletonElement) then
			false
		else
			let singleton : SingletonElement
				= feature.oclAsType(SingletonElement)
				in singleton.dataType.name = 'Integer'
		endif endif
/]

[query public isLocation(feature : Feature) : Boolean
	= if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.isLocation()
		else
			feature.oclIsTypeOf(SingletonLocation)
		endif
/]

[query public isModifiable(feature : Feature) : Boolean
	= feature.isVisible() and not feature.isContains()
/]

[query public isOppositeSingleton(association : Association) : Boolean
	= let opposite : Association = association.opposite()
		in if not opposite.oclIsUndefined() then
				opposite.isSingleton()
			else
				false
			endif
/]

[query public isOwningEnd(feature : Feature) : Boolean
	= if feature.oclIsKindOf(EntityAssociation) then
			feature.oclAsType(EntityAssociation).owningEnd
		else if feature.oclIsKindOf(EncapsulatedAssociation) then
			feature.oclAsType(EncapsulatedAssociation).association.isOwningEnd()
		else
			false
		endif endif
/]

[query public isPrimaryKey(feature : Feature) : Boolean
	= if feature.oclIsKindOf(EntityFeature) then
			feature.oclAsType(EntityFeature).primaryKey
		else
			false
		endif
/]

[query public isPseudo(feature : Feature) : Boolean
	= if not feature.oclIsKindOf(Association) then
			false
		else
			feature.oclAsType(Association).pseudo
		endif
/]

[query public isResource(feature : Feature) : Boolean
	= if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.isResource()
		else
			feature.oclIsKindOf(SingletonResource)
		endif
/]

[query public isRequired(feature : Feature) : Boolean
	= if feature.oclIsKindOf(SingletonAttribute) then
			feature.oclAsType(SingletonAttribute).required
		else if feature.oclIsTypeOf(SingletonAssociation) then
			feature.oclAsType(SingletonAssociation).required
		else if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.isRequired()
		else if feature.oclIsTypeOf(EncapsulatedAssociation) then
			feature.oclAsType(EncapsulatedAssociation).association.isRequired()
		else
			false
		endif endif endif endif
/]

[query public isSingleton(feature : Feature) : Boolean
	= if feature.oclIsKindOf(EntityFeature) then
			feature.oclIsKindOf(SingletonAttribute) or feature.oclIsKindOf(SingletonAssociation)
		else if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.isSingleton()
		else if feature.oclIsTypeOf(EncapsulatedAssociation) then
			feature.oclAsType(EncapsulatedAssociation).association.isSingleton()
		else
			feature.oclAsType(ViewAssociation).cardinality <> Cardinality::Many
		endif endif endif
/]

[query public isSingleton(association : Association, entityOrView : EntityOrView) : Boolean
	= if association.oclIsKindOf(EntityAssociation) then
			if entityOrView.features->includes(association) then
				association.isSingleton()
			else
				association.oclAsType(EntityAssociation).opposite.isSingleton()
			endif
		else
			association.isSingleton()
		endif
/]

[query public isUnique(feature : Feature) : Boolean
	= if feature.oclIsKindOf(SingletonAttribute) then
			feature.oclAsType(SingletonAttribute).unique
		else if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.isUnique()
		else
			false
		endif endif
/]

[query public isUrl(feature : Feature) : Boolean
	= if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.isUrl()
		else
			feature.oclIsTypeOf(SingletonURL)
		endif
/]

[query public isValidated(feature : Feature) : Boolean
	= if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.isValidated()
		else
			-- isUnique is an entity property
			feature.isRequired()
		endif
/]

[query public isVisible(feature : Feature) : Boolean
	= if feature.oclIsKindOf(EntityAttribute) then
			true
		else if feature.oclIsKindOf(EntityAssociation) then
			feature.oclAsType(EntityAssociation).visible
		else
			true
		endif endif
/]

[query public keys(association : EntityAssociation) : OrderedSet(AssociationKey)
	= if association.keys->notEmpty() then
			association.keys
		else
			association.opposite.keys
		endif
/]

[query public modelPropertyName(feature : Feature) : String
	= if feature.oclIsKindOf(SingletonAttribute) then
			feature.name
		else if feature.oclIsKindOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).name
		else
			feature.name
		endif endif
/]

[query public opposite(association : Association) : Association
	= if association.oclIsTypeOf(EncapsulatedAssociation) then
			association.oclAsType(EncapsulatedAssociation).association.opposite()
		else if association.oclIsKindOf(EntityAssociation) then
			association.oclAsType(EntityAssociation).opposite
		else
			null
		endif endif
/]

[query public oppositeColumnName(association : Association) : String
	= let opposite : Association = association.opposite()
		in if not opposite.oclIsUndefined() then
				opposite.columnName()
			else
				'Unknown opposite'
			endif
/]

[query public ormType(feature : Attribute) : String
	= if feature.oclIsKindOf(EntityAttribute) then
			feature.oclAsType(EntityAttribute).ormType
		else if feature.oclIsTypeOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.ormType()
		else
			'Unhandled Attribute'
		endif endif
/]

[query public pivotTableName(feature : Feature) : String
	= if feature.oclIsKindOf(EntityAssociation) then
			feature.oclAsType(EntityAssociation).pivotTableName
		else if feature.oclIsKindOf(EncapsulatedAssociation) then
			feature.oclAsType(EncapsulatedAssociation).association.pivotTableName()
		else if feature.oclIsTypeOf(ViewAssociation) then
			feature.oclAsType(ViewAssociation).opposite.pivotTableName()
		else
			'invalidPivotTableName'
		endif endif endif
/]

[query public pluralisedPropertyName(feature : Feature) : String
	= if feature.oclIsKindOf(EntityFeature) then
			feature.oclAsType(EntityFeature).pluralisedName
		else if feature.oclIsKindOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.pluralisedPropertyName()
		else if feature.oclIsKindOf(EncapsulatedAssociation) then
			feature.oclAsType(EncapsulatedAssociation).association.pluralisedPropertyName()
		else
			feature.modelPropertyName()
		endif endif endif
/]

[query public singletonPropertyName(feature : Feature) : String
	= if feature.oclIsKindOf(EntityFeature) then
			feature.oclAsType(EntityFeature).singletonName
		else if feature.oclIsKindOf(EncapsulatedAttribute) then
			feature.oclAsType(EncapsulatedAttribute).attribute.singletonPropertyName()
		else if feature.oclIsKindOf(EncapsulatedAssociation) then
			feature.oclAsType(EncapsulatedAssociation).association.singletonPropertyName()
		else
			feature.modelPropertyName()
		endif endif endif
/]

[query public sourceType(association : Association) : EntityOrView
	= if association.oclIsKindOf(EntityAssociation) then
			association.oclAsType(EntityAssociation).partOf
		else if association.oclIsKindOf(EncapsulatedAssociation) then
			association.oclAsType(EncapsulatedAssociation).association.sourceType()
		else
			'???' -- association.oclAsType(ViewAssociation).
		endif endif
/]

[query public targetType(association : Association) : EntityOrView
	= let opposite : Association = association.opposite()
		in if not opposite.oclIsUndefined() then
				opposite.partOf
			else
				null
			endif
/]
