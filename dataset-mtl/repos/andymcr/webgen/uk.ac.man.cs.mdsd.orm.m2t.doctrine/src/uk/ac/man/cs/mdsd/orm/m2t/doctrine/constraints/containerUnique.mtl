[comment encoding = UTF-8 /]
[module containerUnique(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::files/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::files/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]


[template public containerUnique(model : OrmModel)]
[file(model.constraintsDirectory().concat('/').concat(model.containerUniqueClassName()).concat(model.executableExtension()), false)]
<?php
namespace [model.constraintsNamespace()/];

use Symfony\Component\Validator\Constraint;


/**
 * @Annotation
 */
class ContainerUnique extends Constraint
{
    public $message = 'Value already used';

    private $uniquePropertyPath;

    private $containingPropertyPath;


    public function __construct($options = null)
    {
        foreach ($options as $key => $value) {
            if (strcmp($key, "uniqueProperty") == 0) {
                $this->uniquePropertyPath = $value;
            } else if (strcmp($key, "containingProperty") == 0) {
                $this->containingPropertyPath = $value;
            } else {
                throw new \InvalidArgumentException($key . " invalid");
            }
        }

        if (!isset($this->uniquePropertyPath)) {
            throw new \InvalidArgumentException("uniqueProperty value missing");
        }
        if (!isset($this->containingPropertyPath)) {
            throw new \InvalidArgumentException("containingProperty value missing");
        }
    }

    public function getRequiredOptions()
    {
        return array('uniqueProperty', 'containingProperty');
    }

    public function getTargets()
    {
        return self::CLASS_CONSTRAINT;
    }

    public function getUniquePropertyPath()
    {
        return $this->uniquePropertyPath;
    }

    public function getContainingPropertyPath()
    {
        return $this->containingPropertyPath;
    }

}
[/file]
[/template]