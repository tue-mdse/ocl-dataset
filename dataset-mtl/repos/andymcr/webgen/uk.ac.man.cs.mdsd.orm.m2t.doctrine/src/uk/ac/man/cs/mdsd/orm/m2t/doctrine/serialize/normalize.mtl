[comment encoding = UTF-8 /]
[module normalize(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::files/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]


[template public normalizer(entity : EntityOrView)]
[file(entity.normalizerFilename(entity), false)]
<?php
namespace [entity.normalizerNamespace()/];

use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use [entity.modelsNamespace()/]\[entity.modelClassName()/];


class [entity.normalizerClassName()/] extends ObjectNormalizer
{
    public function supportsNormalization($data, $format = NULL)
    {
        return $data instanceof [entity.modelClassName()/];
    }

    public function normalize($object, $format = NULL, array $context = array())
    {
        if (array_key_exists('keys_only', $context))
        {
            $data = array();
[for (key : Attribute | entity.attributeKeys())]
            $data['['/]'[key.modelPropertyName()/]'[']'/] = $object->[key.getMethodName()/]();
[/for]
   	        return $data;
        }
        else
        {
            $context['['/]'keys_only'[']'/] = true;
            return parent::normalize($object, $format, $context);
        }
     }
}
[/file]
[/template]

[template private data(feature : Feature, accessor : String)
	? (feature.oclIsKindOf(EntityAttribute)) post(trim())]
$data['['/]'[feature.modelPropertyName()/]'[']'/] = [accessor/]->[feature.getMethodName()/]();
[/template]

[template private data(feature : Feature, accessor : String)
	? (feature.oclIsKindOf(EntityAssociation) and feature.isSingleton()) post(trim())]
[if (feature.isRequired())]
$data['['/]'[feature.modelPropertyName()/]'[']'/] = $this->serializer->normalize([accessor/]->[feature.getMethodName()/](), $format, $context);
[else]
$[feature.instanceName()/] = [accessor/]->[feature.getMethodName()/]();
if ($[feature.instanceName()/])
    $data['['/]'[feature.modelPropertyName()/]'[']'/] = $this->serializer->normalize($[feature.instanceName()/], $format, $context);
[/if]
[/template]

[template private data(feature : Feature, accessor : String)
	? (feature.oclIsKindOf(EntityAssociation) and not feature.isSingleton()) post(trim())]
$data['['/]'[feature.modelPropertyName()/]'[']'/] = [accessor/]->[feature.getMethodName()/]()->map(
    function ($item) use ($format, $context) {
        return $this->serializer->normalize($item, $format, $context);
    }
)->getValues();
[/template]