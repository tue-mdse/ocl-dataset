[comment encoding = UTF-8 /]
[module entity(
	'http://cs.manchester.ac.uk/mdsd/Expression',
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping')]
[import uk::ac::man::cs::mdsd::criteria::m2t::criteria/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::criteria/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::files/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]


[query private isReservedWord(word : String) : Boolean
	= let reserved : Set(String) 
		= Set{'order'}
		in reserved->includes(word)
/]


[template public model(entity : EntityOrView)]
[file(entity.modelFilename(), false)]
<?php
namespace [entity.modelsNamespace()/];

[entity.useStatements()/]


/**
 * @ORM\Entity
 * @ORM\Table(name="[entity.tableName/]")
[if (entity.unique->notEmpty())]
 * @UniqueEntity([for (feature : Feature | entity.unique) separator(', ')]"[feature.modelPropertyName()/]"[/for])
[/if]
[for (attribute : Attribute | entity.uniqueAttributes())]
 * @UniqueEntity("[attribute.columnName()/]"[if (not attribute.isRequired())], ignoreNull="false"[/if])
[/for]
[if (entity.isContained())]
	[for (attribute : Attribute | entity.containerUniqueAttributes())]
 * @AppAssert\ContainerUnique(uniqueProperty="[attribute.modelPropertyName()/]", containingProperty="[entity.containingAssociation().opposite().modelPropertyName()/]")
	[/for]
[/if]
 **/
class [entity.modelClassName()/][if (entity.implementsUserInterface)] implements UserInterface[/if]
{
[if (not entity.hasPrimaryKeys())]
    [entity.autoIdFeature()/]

[/if]
    [entity.features()/]

[if (entity.oclIsTypeOf(Entity) and (entity.partOf.timestampCreation or entity.partOf.timestampUpdates))]
    [entity.timestampFeatures()/]

[/if]
[if (entity.hasDefaultValueFeatures() or entity.hasCollectionAssociations() or entity.implementsUserInterface)]
    [entity.constructor()/]

[/if]
[if (not entity.hasPrimaryKeys())]
    [entity.idMethods()/]

[/if]
[for (feature : Feature | entity.features->select(f | not f.isPseudo()))]
    [feature.featureMethods()/]

[/for]
[if (entity.oclIsTypeOf(Entity) and (entity.partOf.timestampCreation or entity.partOf.timestampUpdates))]
    [entity.timestampMethods()/]

[/if]
[if (entity.implementsUserInterface)]
    [entity.userInterfaceMethods()/]

[/if]
[for (label : ModelLabel | entity.labels)]
    [label.label()/]

[/for]
[for (resource : SingletonResource | entity.resourceAttributes())]
	[resource.resourceSaveMethod()/]

[/for]
[if (entity.hasResourceAttributes())]
/*	public function save(Validation $validation = NULL)
	{
[for (feature : SingletonResource | entity.resourceAttributes())]
		$this->_save_[feature.modelPropertyName()/]();
[/for]
		parent::save($validation);
	}
*/
[/if]
}
[/file]
[/template]

[template private useStatements(entity : EntityOrView) post(trim())]
use Doctrine\ORM\Mapping as ORM;
[if (entity.collectionAssociations()->select(c | c.isOwningEnd())->notEmpty())]
use Doctrine\Common\Collections\ArrayCollection;
[/if]
[if (entity.partOf.timestampCreation or entity.partOf.timestampUpdates)]
use Gedmo\Mapping\Annotation as Gedmo;
[/if]
[if (entity.uniqueAttributes()->notEmpty())]
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
[/if]
[if (entity.implementsUserInterface)]
use Symfony\Component\Security\Core\User\UserInterface;
[/if]
[if (entity.features->select(f | f.serializationGroups->notEmpty())->notEmpty())]
use Symfony\Component\Serializer\Annotation\Groups;
[/if]
[if (entity.associations()->select(a | a.serializationMaxDepth > 0)->notEmpty())]
use Symfony\Component\Serializer\Annotation\MaxDepth;
[/if]
[if (entity.hasValidatedFeatures())]
use Symfony\Component\Validator\Constraints as Assert;
[/if]
[if (entity.isContained() and entity.containerUniqueAttributes()->notEmpty())]
use AppBundle\Validator\Constraints as AppAssert;
[/if]
[/template]

[template private autoIdFeature(entity : EntityOrView) post(trim())]
/**
 * @ORM\Id
 * @ORM\Column(type="[entity.autoKeyPersistentType/]")
 * @ORM\GeneratedValue[if (not entity.autoKeyGenerationStrategy.oclIsUndefined())](strategy="[entity.autoKeyGenerationStrategy/]")[/if]
 **/
protected $[entity.autoKeyName/];
[/template]

[template private features(entity : EntityOrView) post(trim())]
[for (feature : Feature | entity.features->select(f | f.isVisible() or f.isOwningEnd())->select(f | not f.isPseudo()))]
[comment TODO sortout location features /]
	[if (not feature.isLocation())]
/**
  [feature.ormAnnotation()/]
	[if (feature.isValidated())]
  [feature.validationAnnotation()/]
	[/if]
	[if (feature.hasSerializationControl())]
  [feature.serializationAnnotation()/]
	[/if]
  **/
	[if (feature.oclIsKindOf(Attribute))]
protected $[feature.columnName()/];
	[else]
protected $[feature.modelPropertyName()/];
	[/if]

	[/if]
[/for]
[/template]

[template private timestampFeatures(entity : EntityOrView) post(trim())]
[if (entity.partOf.timestampCreation)]
/**
 * @ORM\Column(type="datetime")
 * @Gedmo\Timestampable(on="create")
 **/
protected $created;

[/if]
[if (entity.partOf.timestampUpdates)]
/**
 * @ORM\Column(type="datetime", nullable=true)
 * @Gedmo\Timestampable(on="update")
 **/
protected $updated;
[/if]
[/template]

[template private ormAnnotation(feature : Feature)
	? (feature.oclIsKindOf(ViewFeature)) post(trim())]
[if (feature.oclIsTypeOf(EncapsulatedAttribute))]
[feature.oclAsType(EncapsulatedAttribute).attribute.ormAnnotation()/]
[elseif (feature.oclIsKindOf(EncapsulatedAssociation))]
[comment feature.oclAsType(EncapsulatedAssociation).association.ormAnnotation()/]
[/if]
[/template]

[template private ormAnnotation(feature : Feature)
	? (feature.oclIsKindOf(EntityAttribute)) post(trim())]
[let attribute : EntityAttribute =feature.oclAsType(EntityAttribute)]
[if (attribute.primaryKey)]
* @ORM\Id
[/if]
* @ORM\Column([if (feature.columnName().isReservedWord())]name="`[feature.columnName()/]`", [/if]type="[attribute.ormType/]"[if (not feature.isRequired())], nullable=true[/if])
[/let]
[/template]

[template private ormAnnotation(feature : Feature)
	? (feature.oclIsKindOf(EntityAssociation) and feature.isSingleton()) post(trim())]
[let association : SingletonAssociation = feature.oclAsType(SingletonAssociation)]
[let opposite : EntityAssociation = association.opposite]
[if (association.primaryKey)]
* @ORM\Id
[/if]
* @ORM\[association.associationRelationship/](targetEntity="[association.modelName()/]"[if (opposite.isVisible() or opposite.isOwningEnd())]
, [if (association.isOwningEnd())]
inversedBy[else]
mappedBy[/if]="[opposite.modelPropertyName()/]"[/if])
[if (association.isOwningEnd())]
	[if (association.keys->isEmpty())]
* @ORM\JoinColumn(name="[association.columnName/]", referencedColumnName="[opposite.partOf.oclAsType(Entity).autoKeyName.toLowerCase()/]"[if (association.isRequired())], nullable=false[/if])
	[elseif (association.keys->size() = 1)]
	[let key : AssociationKey = association.keys->first()]
* @ORM\JoinColumn(name="[key.sourceColumnName/]", referencedColumnName="[key.targetFeature.columnName.toLowerCase()/]"[if (association.isRequired())], nullable=false[/if])
	[/let]
	[else]
* @ORM\JoinColumns({[for (key : AssociationKey | association.keys) separator(',')]

*     @ORM\JoinColumn(name="[key.sourceColumnName/]", referencedColumnName="[key.targetFeature.columnName.toLowerCase()/]"[if (association.isRequired())], nullable=false[/if])[/for]

* })
	[/if]
[/if]
[/let]
[/let]
[/template]

[template private ormAnnotation(feature : Feature)
	? (feature.oclIsKindOf(EntityAssociation) and not feature.isSingleton()) post(trim())]
[let association : CollectionAssociation = feature.oclAsType(CollectionAssociation)]
[let opposite : EntityAssociation = association.opposite]
* @ORM\[association.associationRelationship/](targetEntity="[association.modelName()/]"[if (opposite.isVisible() or opposite.isOwningEnd())]
, [if (association.associationRelationship = CollectionAssociationRelationships::OneToMany or not association.isOwningEnd())]
mappedBy[else]
inversedBy[/if]="[opposite.modelPropertyName()/]"[/if])
[if (association.owningEnd)]
* @ORM\JoinTable(name="[association.pivotTableName/]",
	[if (association.partOf.primaryKeys()->isEmpty())]
*     joinColumns={@ORM\JoinColumn(name="[opposite.columnName/]")},
	[elseif (association.partOf.primaryKeys()->size() = 1)]
	[let key : EntityFeature = association.partOf.primaryKeys()->first()]
*     joinColumns={@ORM\JoinColumn(name="[opposite.columnName/]")},
	[/let]
	[else]
*     joinColumns={[for (key : EntityFeature | association.partOf.primaryKeys()) separator(',')]

*         @ORM\JoinColumn(name="[key.columnName/]", nullable=false)[/for]

*     },
	[/if]
	[if (opposite.partOf.primaryKeys()->isEmpty())]
*     inverseJoinColumns={@ORM\JoinColumn(name="[association.columnName/]")})
	[elseif (opposite.partOf.primaryKeys()->size() = 1)]
	[let key : EntityFeature = opposite.partOf.primaryKeys()->first()]
*     inverseJoinColumns={@ORM\JoinColumn(name="[association.columnName/]")},
	[/let]
	[else]
*     inverseJoinColumns={[for (key : EntityFeature | opposite.partOf.primaryKeys()) separator(',')]

*         @ORM\JoinColumn(name="[key.columnName/]", nullable=false)[/for]

*     },
	[/if]
[/if]
[/let]
[/let]
[/template]

[template private validationAnnotation(feature : Feature) post(trim())]
[if (feature.isRequired())]
	[if (feature.oclIsKindOf(Attribute))]
* @Assert\NotBlank
	[else]
* @Assert\NotNull
	[/if]
[/if]
[/template]

[template private serializationAnnotation(feature : Feature) post(trim())]
[if (feature.serializationGroups->notEmpty())]
* @Groups({[for (group : SerializationGroup | feature.serializationGroups) separator(', ')]"[group.name/]"[/for]})
[/if]
[if (feature.oclIsKindOf(Association))]
[let association : Association = feature.oclAsType(Association)]
	[if (association.serializationMaxDepth > 0)]
* @MaxDepth([association.serializationMaxDepth/])
	[/if]
[/let]
[/if]
[/template]

[template private constructor(entity : EntityOrView) post(trim())]
public function __construct()
{
[for (feature : Feature | entity.features)]
	[if (feature.hasDefaultValue())]
    $this->[feature.modelPropertyName()/] = [feature.defaultValue().valueExpression()/];
	[/if]
	[if (feature.oclIsTypeOf(CollectionAttribute))]
    $this->[feature.modelPropertyName()/] = Array();
	[/if]
	[if (feature.oclIsTypeOf(CollectionAssociation))]
		[if (feature.oclAsType(CollectionAssociation).owningEnd)]
    $this->[feature.modelPropertyName()/] = new ArrayCollection();
		[/if]
	[/if]
[/for]
}
[/template]

[template private encoderSelectionMethod(entity : EntityOrView) post(trim())]
public function getEncoderName()
{
    if ($this->created < new \DateTime('2016-01-01 00:00'))
        return 'legacy_encoder';

    return null;
}
[/template]

[template private idMethods(entity : EntityOrView) post(trim())]
public function getId()
{
    return $this->[entity.autoKeyName/];
}
[/template]

[template private featureMethods(feature : Feature) post(trim())]
[feature.getMethod()/]

[if (feature.isSingleton())]
[feature.setMethod()/]

[else]
	[if (feature.oclIsKindOf(EntityFeature))]
	[let feature2 : EntityFeature = feature.oclAsType(EntityFeature)]
		[if (feature2.collectionAllowAdd)]
[feature.addMethod()/]

		[/if]
		[if (feature2.collectionAllowRemove)]
[feature.removeMethod()/]

		[/if]
	[/let]
	[/if]
[/if]
[/template]

[template private getMethod(feature : Feature) post(trim())]
public function [feature.getMethodName()/]()
{
[if (feature.oclIsKindOf(Attribute))]
    return $this->[feature.columnName()/];
[else]
    return $this->[feature.modelPropertyName()/];
[/if]
}
[/template]

[template private setMethod(feature : Feature)
	? (feature.oclIsKindOf(SingletonAttribute)) post(trim())]
[let attribute : SingletonAttribute = feature.oclAsType(SingletonAttribute)]
public function set[attribute.modelPropertyName().toUpperFirst()/]($[attribute.instanceName()/])
{
[if (attribute.oclIsTypeOf(SingletonElement))]
[let element : SingletonElement = attribute.oclAsType(SingletonElement)]
	[if (element.caseInsensitive)]
    $this->[element.columnName/] = strtolower(trim($[element.instanceName()/]));
	[elseif (element.encrypt)]
//				array(array(Auth::instance(), 'hash_password_and_salt'), array(':value', ':model')),
	[elseif (element.isEnumerationType() or element.dataType.name = 'Boolean')]
    $this->[element.columnName/] = $[element.instanceName()/];
	[else]
    $this->[element.columnName/] = trim($[element.instanceName()/]);
	[/if]
[/let]
[elseif (attribute.oclIsTypeOf(SingletonDate))]
    $this->[attribute.columnName/] = $[attribute.instanceName()/];
[/if]
}
[/let]
[/template]

[template private setMethod(feature : Feature)
	? (feature.oclIsKindOf(Association)) post(trim())]
[let association : Association = feature.oclAsType(Association)]
public function set[association.modelPropertyName().toUpperFirst()/]($[association.instanceName()/])
{
    $this->[association.modelPropertyName()/] = $[association.instanceName()/];
}
[/let]
[/template]

[template private addMethod(feature : Feature) post(trim())]
public function add[feature.singletonPropertyName().toUpperFirst()/]($[feature.singletonPropertyName()/])
{
[if (feature.isUnique())]
    if (!in_array($[feature.singletonPropertyName()/], $this->[feature.modelPropertyName()/], true)) {
	[if (feature.oclIsKindOf(Attribute))]
        $this->[feature.columnName()/]['['/][']'/] = $[feature.singletonPropertyName()/];
	[else]
        $this->[feature.modelPropertyName()/]->add($[feature.singletonPropertyName()/]);
	[/if]
    }
[else]
	[if (feature.oclIsKindOf(Attribute))]
    $this->[feature.columnName()/]['['/][']'/] = $[feature.singletonPropertyName()/];
	[else]
    $this->[feature.modelPropertyName()/]->add($[feature.singletonPropertyName()/]);
	[/if]
[/if]
}
[/template]

[template private removeMethod(feature : Feature) post(trim())]
public function remove[feature.singletonPropertyName().toUpperFirst()/]($[feature.singletonPropertyName()/])
{
	[if (feature.oclIsKindOf(Attribute))]
    unset($this->[feature.columnName()/]['['/]array_search($[feature.singletonPropertyName()/], $this->[feature.columnName()/])[']'/]);
	[else]
    $this->[feature.modelPropertyName()/]->removeElement($[feature.singletonPropertyName()/]);
	[/if]
}
[/template]

[template private userInterfaceMethods(entity : EntityOrView) post(trim())]
public function getPassword() 
{ 
    return null; 
} 

public function getSalt() 
{ 
    return null; 
} 

public function eraseCredentials() 
{ 
} 
[/template]

[template private timestampMethods(entity : EntityOrView) post(trim())]
[if (entity.partOf.timestampCreation)]
public function getCreated()
{
    return $this->created;
}

[/if]
[if (entity.partOf.timestampUpdates)]
public function getUpdated()
{
    return $this->updated;
}
[/if]
[/template]

[template private label(label : ModelLabel) post(trim())]
public function get[label.name.toUpperFirst()/][if (not label.name.endsWith('Label'))]Label[/if]()
{
    return sprintf('[label.format/]', [for (feature : ModelLabelFeature | label.features) separator(', ')]
$this->[if (feature.oclIsTypeOf(ModelLabelAttribute))]
[let attribute : ModelLabelAttribute = feature.oclAsType(ModelLabelAttribute)]
[attribute.attribute.columnName()/][if (attribute.attribute.isDate())]->format('[attribute.dateFormat/]')[/if][/let][else]
[let association : ModelLabelAssociation = feature.oclAsType(ModelLabelAssociation)]
[association.association.modelPropertyName()/]->get[if (association.dynamicLabel.oclIsUndefined())]Default[else][association.dynamicLabel.name.toUpperFirst()/][/if]Label()[/let]
[/if][/for]);
}
[/template]

[template private resourceSaveMethod(resource : SingletonResource) post(trim())]
private function _save_[resource.modelPropertyName()/]()
{
	$validation = Validation::factory($_FILES);
	$validation
		->rules('[resource.modelPropertyName()/]', array(
[if (resource.isRequired())]
			array('not_empty'),
			array('Upload::not_empty'),
[/if]
			array('Upload::valid'),
			array('Upload::size', array(':value', [comment resource.maximumUploadSize/])),
[comment if (resource.validUploadExtensions->notEmpty())/]
			array('Upload::type', array(':value', array([comment for (extension : String | resource.validUploadExtensions) separator(', ')/]'[comment extension/]'[comment /for/]))),
[comment /if/]
		));
	if ($validation->check() === FALSE)
		throw new ORM_Validation_Exception($this->errors_filename(), $validation);

	if ($_FILES['['/]'[resource.modelPropertyName()/]'[']'/]['['/]'error'[']'/] === UPLOAD_ERR_NO_FILE)
		return;

	if (!empty($this->[resource.columnName/])) 
		$filename = str_replace(' ', '_', pathinfo($this->[resource.columnName/], PATHINFO_FILENAME));
	else
		$filename = str_replace(' ', '_', pathinfo($_FILES['['/]'[resource.modelPropertyName()/]'[']'/]['['/]'name'[']'/], PATHINFO_FILENAME));
	$extension = pathinfo($_FILES['['/]'[resource.modelPropertyName()/]'[']'/]['['/]'name'[']'/], PATHINFO_EXTENSION);
[comment if (resource.uploadsWithinWebsite = true) /]
	$filepath = Upload::save($_FILES['['/]'[resource.modelPropertyName()/]'[']'/], $filename . '.' . $extension, DOCROOT . '[comment resource.relativeUploadDirectory/]');
	$this->[resource.columnName/] = '[comment resource.relativeUploadDirectory/]/' . $filename . '.' . $extension;
[comment else/]
	$filepath = Upload::save($_FILES['['/]'[resource.modelPropertyName()/]'[']'/], $filename . '.' . $extension, 'c:\websites\files');
[comment /if/]
}
[/template]