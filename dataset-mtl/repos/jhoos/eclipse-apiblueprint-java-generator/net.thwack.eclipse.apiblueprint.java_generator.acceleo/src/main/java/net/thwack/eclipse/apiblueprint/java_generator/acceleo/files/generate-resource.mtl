[comment encoding = UTF-8 /]
[module generate-resource('http://thwack.net/model/apiblueprint')]
[import net::thwack::apiblueprint::acceleo::services::nameGenerationServices]

[template public generateElement(resource: Resource, javaPackage: String)]
[file (javaPackage.replaceAll('\\.', '/') + '/I' + resource.name.toClassName() + 'Resource.java', false, 'UTF-8')]
package [javaPackage/];

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/** [getJavaComment(resource)/] 
 */
@Path("[resource.uriTemplate/]")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public interface I[resource.name.toClassName()/]Resource {
[for (action : Action | resource.actions)]

	/** [getJavaComment(action, resource)/]
	 */
	@[action.method.toUpperCase()/]
	Response [action.name.toMethodName()/]([getJavaParameters(action, resource)/]);
[/for]
}
[/file]
[file (javaPackage.replaceAll('\\.', '/') + '/impl/' + resource.name.toClassName() + 'Resource.java', false, 'UTF-8')]
package [javaPackage/].impl;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;

/**
 * Implementation of resource interface {@link [javaPackage/].I[resource.name.toClassName()/]}.
 *
 * @generated NOT
 */
public class [resource.name.toClassName()/]Resource implements I[resource.name.toClassName()/]Resource {
[for (action : Action | resource.actions)]

	/*
	 * @see [javaPackage/].I[resource.name.toClassName()/]#[action.name.toMethodName()/]
	 *
	 * @generated NOT
	 */
	public Response [action.name.toMethodName()/]([getJavaParameters(action, resource)/]) {
		// TODO implement me!
		return Response.ok().build();
	}
[/for]
}
[/file]
[/template]
