[comment encoding = UTF-8 /]
[module createEntityDAO('http://www.eclipse.org/uml2/3.0.0/UML')]


[template public createEntityDAO(aClass : Class)]

[file ('/br/com/uspicmc/modernization/DAO/entity/' + aClass.name.toLower().toUpperFirst().concat('.java'), false, 'UTF-8')]

package br.com.uspicmc.modernization.DAO.entity;


/**
 * 
 * @author Rafael Durelli
 * @version v1
 */
public class [aClass.name.toLower().toUpperFirst()/] {
	
	[for (p : Property | aClass.attribute) separator ('\n')]
		private [if (p.type.name.equalsIgnoreCase('VARCHAR'))] String [p.name/];[elseif (p.type.name.equalsIgnoreCase('INT'))] Integer [p.name/]; [/if]
	[/for]

		/** 
    	* Class constructor.
    	*/
		public [aClass.name.toLower().toUpperFirst()/](){

		}

		/** 
    	* Class constructor.
    	*/
		public [aClass.name.toLower().toUpperFirst()/]([for(p : Property | aClass.attribute) separator (',')][if (p.type.name.equalsIgnoreCase('VARCHAR'))] String [p.name.toLower()/][elseif (p.type.name.equalsIgnoreCase('INT'))] Integer [p.name.toLower()/][/if][/for]){
			super();
		
		[for (p : Property | aClass.attribute) separator ('\n')]
			this.[p.name/] = [p.name.toLower()/];
		[/for]
	
		}		

	[for (p : Property | aClass.attribute) separator ('\n')]
		/**
		 * 
		 * @return return the [p.name/] 
		 */
		public [if (p.type.name.equalsIgnoreCase('VARCHAR'))] String get[p.name.toUpperFirst()/]()[elseif (p.type.name.equalsIgnoreCase('INT'))] Integer get[p.name.toUpperFirst()/] ()[/if] {
			return this.[p.name/];
		}
	[/for]
	

	[for (p : Property | aClass.attribute) separator ('\n')]
		/**
		 * 
		 * @param set the [p.name/]
		 */
		public void set[p.name.toUpperFirst()/]([if (p.type.name.equalsIgnoreCase('VARCHAR'))] String [p.name/][elseif (p.type.name.equalsIgnoreCase('INT'))] Integer [p.name/] [/if]) {
			this.[p.name/] = [p.name/];
		}
	[/for]


	@Override
    public boolean equals(Object o) {
        
		if ([for(p : Property | aClass.attribute) separator (' && \n\t\t')][if (p.type.name.equalsIgnoreCase('VARCHAR'))]( this.get[p.name.toUpperFirst()/]().equals((([aClass.name.toLower().toUpperFirst()/])o).get[p.name.toUpperFirst()/]()) == true )[elseif (p.type.name.equalsIgnoreCase('INT'))] ( this.get[p.name.toUpperFirst()/]() == (([aClass.name.toLower().toUpperFirst()/])o).get[p.name.toUpperFirst()/]() ) == true[/if][/for]) {
			
			return true;

		}
		else {

			return false;
			
		}
        
        
    }


}

[/file]

[/template]
