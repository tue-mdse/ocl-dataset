[comment encoding = UTF-8 /]
[module SequenceElements('http:///org/gnstudio/apdt/model.ecore')/]

[import TypeElements /]
[import KeywordsUtils /]

[template public genSequenceElements(aSequence : Sequence)]
[if (aSequence.oclIsTypeOf(Recover))] [getKeyword('recover')/] [aSequence.oclAsType(Recover).text/]
[elseif (aSequence.oclIsTypeOf(Store))] [getKeyword('set')/] [aSequence.oclAsType(Store).text/]
[elseif (aSequence.oclIsTypeOf(CalculateStore))] [getKeyword('calculate')/] [aSequence.oclAsType(CalculateStore).text/]
[elseif (aSequence.oclIsTypeOf(Print))] [getKeyword('print')/] [aSequence.oclAsType(Print).text/]
[elseif (aSequence.oclIsTypeOf(Show))] [getKeyword('show')/] [aSequence.oclAsType(Show).text/]
[elseif (aSequence.oclIsTypeOf(Prompt))] [getKeyword('prompt')/] [aSequence.oclAsType(Prompt).text/]
[elseif (aSequence.oclIsTypeOf(Read))] [getKeyword('read')/] [aSequence.oclAsType(Read).text/]
[elseif (aSequence.oclIsTypeOf(Write))] [getKeyword('write')/] [aSequence.oclAsType(Write).text/]
[elseif (aSequence.oclIsTypeOf(MethodReturn))] [getKeyword('return')/] [aSequence.oclAsType(MethodReturn).note/]
[elseif (aSequence.oclIsTypeOf(Recursion))] [getKeyword('recursion')/] [aSequence.oclAsType(Recursion).text/]
[elseif (aSequence.oclIsTypeOf(Variable))]  [genVariable(aSequence.oclAsType(Variable))/]
[elseif (aSequence.oclIsTypeOf(SequenceGroup))]  [genGroup(aSequence.oclAsType(SequenceGroup))/]
[elseif (aSequence.oclIsTypeOf(MethodCall))] [getKeyword('call')/] [aSequence.oclAsType(MethodCall).name/][genCallArgs(aSequence.oclAsType(MethodCall))/]
[elseif (aSequence.oclIsTypeOf(ControlSequence))]  [genControlSequence(aSequence.oclAsType(ControlSequence))/]
[elseif (aSequence.oclIsTypeOf(TrySequence))]  [genTrySequence(aSequence.oclAsType(TrySequence))/]
[elseif (aSequence.oclIsTypeOf(Iteration))]  [genLoops(aSequence.oclAsType(Iteration))/]
[elseif (aSequence.oclIsTypeOf(SwitchSequence))]  [genSwitchSequence(aSequence.oclAsType(SwitchSequence))/]
[/if]
[/template]


[template public genVariable(aVariable : Variable)]
[getKeyword('var')/] [if ((not aVariable.name.oclIsUndefined()) and aVariable.name.trim().size()>0)][aVariable.name/][elseif((not aVariable.note.oclIsUndefined()) and aVariable.note.trim().size()>0)][aVariable.note/][/if] [genType(aVariable.type)/][genVarValue(aVariable)/][genVariableNote(aVariable)/]
[/template]

[template public genVariableNote(aVariable : Variable)? ((not aVariable.name.oclIsUndefined()) and aVariable.name.trim().size()>0
                                                             and (not aVariable.note.oclIsUndefined()) and aVariable.note.trim().size()>0)]
 , [aVariable.note.trim()/]
[/template]

[template public genVarValue(aVariable : Variable)? ((not aVariable.value.oclIsUndefined()) and aVariable.value.trim().size()>0)]
 = [aVariable.value.trim()/]
[/template]

[template public genCallArgs(aMethodCall : MethodCall)]
[if (aMethodCall.arguments->notEmpty() and aMethodCall.arguments.trim().size()>0)][getKeyword('using')/] [aMethodCall.arguments/][/if]
[/template]

[template public genGroup(aGroup : SequenceGroup)]
[if (aGroup.sequences->notEmpty())]

[for (aSequences : Sequence | aGroup.sequences)][genSequenceElements(aSequences)/][/for][/if]
[/template]

[template public genControlSequence(aControlSeq : ControlSequence)]
[getKeyword('if')/] [aControlSeq.ifGroup.name/][getKeyword('then')/]
      [for (aSequences : Sequence | aControlSeq.ifGroup.sequences)][genSequenceElements(aSequences)/][/for]
[for (aGroup : SequenceGroup | aControlSeq.elseifGroups)]
  [getKeyword('else if')/] [aGroup.name/][getKeyword('then')/]
      [for (aSequences : Sequence | aGroup.sequences)][genSequenceElements(aSequences)/][/for]
[/for]
[if (not aControlSeq.elseGroup.oclIsUndefined())]
  [getKeyword('else')/] [aControlSeq.elseGroup.name/]
      [for (aSequences : Sequence | aControlSeq.elseGroup.sequences)][genSequenceElements(aSequences)/][/for]
[/if]
[getKeyword('endif')/]   
[/template]


[template public genTrySequence(aTrySeq : TrySequence)]
[getKeyword('try')/]
      [for (aSequences : Sequence | aTrySeq.tryGroup.sequences)][genSequenceElements(aSequences)/][/for]
[for (aGroup : SequenceGroup | aTrySeq.catchGroups)]
  [getKeyword('catch')/] [aGroup.name/]
      [for (aSequences : Sequence | aGroup.sequences)][genSequenceElements(aSequences)/][/for]
[/for]
[if (not aTrySeq.finallyGroup.oclIsUndefined())]
  [getKeyword('finally')/] 
      [for (aSequences : Sequence | aTrySeq.finallyGroup.sequences)][genSequenceElements(aSequences)/][/for]
[/if]
[getKeyword('endtry')/]   
[/template]

[template public genSwitchSequence(aSwitchSeq : SwitchSequence)]
[getKeyword('case')/] [aSwitchSeq.note/][getKeyword('is')/]
[for (aGroup : SequenceGroup | aSwitchSeq.cases)]
   [aGroup.name/][getKeyword('then')/] :
      [for (aSequences : Sequence | aGroup.sequences)][genSequenceElements(aSequences)/][/for]
[/for]
[if (not aSwitchSeq.defaultCase.oclIsUndefined())]
  [getKeyword('others then')/] : 
      [for (aSequences : Sequence | aSwitchSeq.defaultCase.sequences)][genSequenceElements(aSequences)/][/for]
[/if]
[getKeyword('endcase')/]   
[/template]

[template public genLoops(aLoop : Iteration)]
[if (aLoop.type = IterationType::FOR)][getKeyword('for')/] [aLoop.name/][elseif (aLoop.type = IterationType::FOR_EACH)][getKeyword('for each')/] [aLoop.name/][elseif (aLoop.type = IterationType::WHILE)][getKeyword('while')/]  [aLoop.name/] [getKeyword('do')/][elseif (aLoop.type = IterationType::DO_WHILE)][getKeyword('repeat until')/] [aLoop.name/][/if]

   [for (aSequences : Sequence | aLoop.sequences)][genSequenceElements(aSequences)/][/for]
[if (aLoop.type = IterationType::FOR)][getKeyword('endfor')/][elseif (aLoop.type = IterationType::FOR_EACH)][getKeyword('endfor')/][elseif (aLoop.type = IterationType::WHILE)][getKeyword('endwhile')/][elseif (aLoop.type = IterationType::DO_WHILE)][getKeyword('endrepeat')/][/if]
[/template]