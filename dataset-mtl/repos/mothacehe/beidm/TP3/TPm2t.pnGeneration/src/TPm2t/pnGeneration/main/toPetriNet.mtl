[comment encoding = UTF-8 /]
[module toPetriNet('http://petrinet')]


[template public toPetriNet(net : PetriNet)]
[comment @main/]
[file (net.name.concat('.net'), false, 'UTF-8')]
net [net.name/]
[for (pl : Place | net.nodes->getPlaces())]
pl [pl.name/]([pl.marking/])
[/for]
[for (tr : Transition | net.nodes->getTransitions())]
tr [tr.name/] [tr.getTime()/] [tr.incomings->getPredecessors()/] -> [tr.outgoings->getSuccessors()/] 
[/for]
[/file]
[/template]

[query public getPlaces(elements : OrderedSet(Node)) : OrderedSet(Place) = 
	elements->select(e | e.oclIsTypeOf(Place))
		->collect(e | e.oclAsType(Place))
		->asOrderedSet()
/]

[query public getTransitions(elements : OrderedSet(Node)) : OrderedSet(Transition) =
	elements->select(e | e.oclIsTypeOf(Transition))
		->collect(e | e.oclAsType(Transition))
		->asOrderedSet()
/]

[template public getPredecessors(arcs : OrderedSet(Arc))]
[for (arc : Arc | arcs)separator (' ')]
[arc.source.name/][arc.getArcType()/][arc.weight/][/for]
[/template]

[template public getSuccessors(arcs : OrderedSet(Arc))]
[for (arc : Arc | arcs)separator (' ')]
[arc.target.name/][arc.getArcType()/][arc.weight/][/for]
[/template]

[template public getArcType(arc : Arc)]
[if (arc.kind = ArcKind::normal)]
*[elseif (arc.kind = ArcKind::read_arc)]
?[/if] 
[/template]

[template public getTime(tr : Transition)]
['['/][tr.min_time.abs()/],[tr.max_time/][']'/]
[/template]


