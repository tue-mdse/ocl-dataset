[comment encoding = UTF-8 /]
[module RteHeader('http://www.eclipse.org/uml2/4.0.0/UML')]

[import org::dmanev::ArchExtractor::psm::uml::gen::services::uml2services]

[template public genRteHeader(aModel : Model)]

[file (aModel.nestedPackage.nestedPackage->
        select(ifPack: Package | ifPack.name.equalsIgnoreCase('Interfaces')).getElementPath()
        + '/Interfaces/rte.h', 
        false, 'UTF-8')]
//***********************************************************************************************************************
//   Company:      Personal use
//   ---------------------------------------------------------------------------------------------------------------------
//   Copyright:    GPL v3
//   ---------------------------------------------------------------------------------------------------------------------
//   Project:      RTE Simualation
//   Language:     ANSI-C
//   ---------------------------------------------------------------------------------------------------------------------
//   Component:    RTE
//  ---------------------------------------------------------------------------------------------------------------------
//
//***********************************************************************************************************************

#ifndef I_RTE_H
#define I_RTE_H (1)

//------------------------------------------------------------------------------
// Included files to resolve specific definitions in this file
//
// #include <system_file_name.h>
// #include "project_file_name.h"
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Constant data
//
// #define cu16LAYCmpConstantName   ((U16) ConstantValueUL)
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Exported type
//
// typedef Expression tLAYCmpTypeName;
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Exported data
//
// extern  tType   u8LAYCmpVariableName;
// extern  tType*  ps32LAYCmpVariableName; 
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Constant exported data
//
// extern const tType  s8LAYCmpVariableName;
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Exported Macros
//
// #define LAYCmpMacroName(...)   (MacroDefinition)
//------------------------------------------------------------------------------

#define PVAR(TYPE, VARIABLE)    ((TYPE) *(VALUE))
#define PDATA(VARIABLE)         (*VARIABLE)

//------------------------------------------------------------------------------
// Exported functions
//
// extern tReturnType LAYCmpFunctionName(tTypeArgument1 ArgumentName1, ... );
//------------------------------------------------------------------------------

    [comment]SenderReceiverInterface's getter/setter methods[/comment]
    [for(pack: Package | aModel.nestedPackage.nestedPackage->filter(Package)->
                            select(ifPack: Package | ifPack.name.equalsIgnoreCase('Interfaces')))]
        [for(SRIf: Interface | pack.ownedElement->filter(Interface)->
                                select(iface: Interface | 
                                    iface.generalization.general.
                                        name.equalsIgnoreCase('SenderReceiverInterface')->includes(true))->
                                            sortedBy(name) )]
            [comment]SenderReceiverInterface setter[/comment]
            [for(prop: Property | SRIf.ownedElement->filter(Property))]
// Setter for "[SRIf.name /]" interface of type "[SRIf.generalization.general.name /]" data element [prop.name /]
extern void Write_[SRIf.name /]_de_[prop.name /]([prop.type.name /] data);
            [/for]
            [comment]SenderReceiverInterface getter[/comment]
            [for(prop: Property | SRIf.ownedElement->filter(Property))]
// Getter for "[SRIf.name /]" interface of type "[SRIf.generalization.general.name /]" data element [prop.name /]
extern void Read_[SRIf.name /]_de_[prop.name /](PVAR([prop.type.name /], data));
            [/for]
        [/for]
    [/for]

    [comment]ClientServerInterface's provided methods[/comment]
    [for(pack: Package | aModel.nestedPackage.nestedPackage->filter(Package)->
                            select(ifPack: Package | ifPack.name.equalsIgnoreCase('Interfaces')))]
        [for(CSIf: Interface | pack.ownedElement->filter(Interface)->
                                    select(iface: Interface | 
                                    iface.generalization.general.
                                        name.equalsIgnoreCase('ClientServerInterface')->includes(true))->
                                            sortedBy(name))]
            [comment]ClientServerInterface call[/comment]
            [for(op: Operation | CSIf.ownedElement->filter(Operation))]
// Provided Call of "[CSIf.name /]" interface of type "[CSIf.generalization.general.name /]" operation "[op.name /]"
extern  void [CSIf.name /]_[op.name /]([if (op.ownedElement->filter(Parameter)->isEmpty())]void[/if][for(par: Parameter | op.ownedElement->filter(Parameter)) separator(',')][par.type.name/] [par.name/][/for]);
            [/for]
        [/for]
    [/for]

#endif   // I_RTE_H 
[/file]
[/template]
