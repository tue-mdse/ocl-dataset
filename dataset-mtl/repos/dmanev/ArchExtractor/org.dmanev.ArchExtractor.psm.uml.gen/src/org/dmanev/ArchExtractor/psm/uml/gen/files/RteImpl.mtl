[comment encoding = UTF-8 /]
[module RteImpl('http://www.eclipse.org/uml2/4.0.0/UML')]

[import org::dmanev::ArchExtractor::psm::uml::gen::services::uml2services]

[template public genRteImpl(aModel : Model)]

[comment][file ('interfaces/rte.c', false, 'UTF-8')][/comment]
[file (aModel.nestedPackage.nestedPackage->
        select(ifPack: Package | ifPack.name.equalsIgnoreCase('Interfaces')).getElementPath() 
        + '/Interfaces/rte.c', 
        false, 'UTF-8')]
//***********************************************************************************************************************
//   Company:      Personal use
//   ---------------------------------------------------------------------------------------------------------------------
//   Copyright:    GPL v3
//   ---------------------------------------------------------------------------------------------------------------------
//   Project:      RTE Simualation
//   Language:     ANSI-C
//   ---------------------------------------------------------------------------------------------------------------------
//   Component:    RTE
//  ---------------------------------------------------------------------------------------------------------------------
//
//***********************************************************************************************************************

//------------------------------------------------------------------------------
// Body Identification
//------------------------------------------------------------------------------

#define RTE_C  "RTE_C"

//------------------------------------------------------------------------------
// Included files to resolve specific definitions in this file
//------------------------------------------------------------------------------

#include "rte.h"

//------------------------------------------------------------------------------
// Local constants
//
// #define cConstantName   ((tType) ConstantValue)
//------------------------------------------------------------------------------



//------------------------------------------------------------------------------
// Local macros
//
// #define mMacroName   (MacroDefinition)
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Local types
//
// typedef Expression    tTypeName;
//------------------------------------------------------------------------------
    


// -----------------------------------------------------------------------------
// Local data
//
// static  tType   u8VariableName;  
// static  tType*  pu8VariableName;  
//------------------------------------------------------------------------------

    [comment]SenderReceiverInterface's variables[/comment]
    [for(pack: Package | aModel.nestedPackage.nestedPackage->filter(Package)->
                            select(ifPack: Package | ifPack.name.equalsIgnoreCase('Interfaces')))]
        [for(SRIf: Interface | pack.ownedElement->filter(Interface)->
                            select(iface: Interface | 
                                iface.generalization.general.
                                    name.equalsIgnoreCase('SenderReceiverInterface')->includes(true))->
                                        sortedBy(name))]
            [for(prop: Property | SRIf.ownedElement->filter(Property))]
// Variable for "[SRIf.name /]" interface type "[SRIf.generalization.general.name /]" data element "[prop.name /]"
static [prop.type.name /] [SRIf.name /]_de_[prop.name /];
            [/for]
        [/for]
    [/for]

//------------------------------------------------------------------------------
// Constant local data
//
// static const tType  VariableName;
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Exported data
//
// tType   u8LAYCmpVariableName; (LAY: 3 characters to identify the layer)
// tType*  pu8LAYCmpVariableName;(Cmp: 3 characters to identify the component)
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Constant exported data
//
//             (LAY: 3 characters to identify the layer)
//             (Cmp: 3 characters to identify this component)
// 
// const tType   LAYCmpVariableName;
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Local function prototypes
// 
// static tTypeRetour FunctionName(tTypeArgument1 ArgumentName1, ... );
//------------------------------------------------------------------------------



//==============================================================================
//=========================== LOCAL FUNCTIONS ==================================
//==============================================================================

//  [ '[' /]LOCAL_FUNCTIONS_END[ ']' /]

//==============================================================================
//=========================== EXPORTED FUNCTIONS ===============================
//==============================================================================


[comment]SenderReceiverInterface's getter/setter methods[/comment]
[for(pack: Package | aModel.nestedPackage.nestedPackage->filter(Package)->
                        select(ifPack: Package | ifPack.name.equalsIgnoreCase('Interfaces')))]
    [for(SRIf: Interface | pack.ownedElement->filter(Interface)->
                            select(iface: Interface | 
                                iface.generalization.general.
                                    name.equalsIgnoreCase('SenderReceiverInterface')->includes(true))->
                                        sortedBy(name) )]

        [comment]SenderReceiverInterface setter[/comment]
        [for(prop: Property | SRIf.ownedElement->filter(Property))]
// Setter for "[SRIf.name /]" interface of type "[SRIf.generalization.general.name /]" data element [prop.name /]
void Write_[SRIf.name /]_de_[prop.name /]([prop.type.name /] data)
{
    [SRIf.name /]_de_[prop.name /] = data;
}
        [/for]

        [comment]SenderReceiverInterface getter[/comment]
        [for(prop: Property | SRIf.ownedElement->filter(Property))]
// Getter for "[SRIf.name /]" interface of type "[SRIf.generalization.general.name /]" data element [prop.name /]
void Read_[SRIf.name /]_de_[prop.name /](PVAR([prop.type.name /], data))
{
    PDATA(data) = [SRIf.name /]_de_[prop.name /];
}
        [/for]
    [/for]
[/for]

//  [ '[' /]EXPORTED_FUNCTIONS_END[ ']' /]

//------------------------------------------------------------------------------
// End of file
//------------------------------------------------------------------------------
[/file]
[/template]
