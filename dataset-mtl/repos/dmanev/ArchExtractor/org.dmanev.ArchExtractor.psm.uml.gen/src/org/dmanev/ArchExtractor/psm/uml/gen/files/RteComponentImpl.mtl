[comment encoding = UTF-8 /]
[module RteComponentImpl('http://www.eclipse.org/uml2/4.0.0/UML')]

[import org::dmanev::ArchExtractor::psm::uml::gen::services::uml2services]

[template public genRteComponentImpl(aComponent : Component)]

[file (aComponent.getElementPath() + '/' + aComponent.name + '.c', false, 'UTF-8')]
//***********************************************************************************************************************
//   Company:      Personal use
//   ---------------------------------------------------------------------------------------------------------------------
//   Copyright:    GPL v3
//   ---------------------------------------------------------------------------------------------------------------------
//   Project:      RTE Simualation
//   Language:     ANSI-C
//   ---------------------------------------------------------------------------------------------------------------------
//   Component:    [aComponent.name.toUpper()/]
//  ---------------------------------------------------------------------------------------------------------------------
//
//***********************************************************************************************************************

//------------------------------------------------------------------------------
// Body Identification
//------------------------------------------------------------------------------

#define [aComponent.name.toUpper() /]

//------------------------------------------------------------------------------
// Included files to resolve specific definitions in this file
//
// #include <system_file_name.h>
// #include "project_file_name.h"
//------------------------------------------------------------------------------
#include <rte_[aComponent.name /].h>

//------------------------------------------------------------------------------
// Local constants
//
// #define cConstantName   ((tType) ConstantValue)
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Local macros
//
// #define mMacroName   (MacroDefinition)
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Local types
//
// typedef Expression    tTypeName;
//------------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// Local data
//
// static  tType   u8VariableName;  
// static  tType*  pu8VariableName;  
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Constant local data
//
// static const tType  VariableName;
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Exported data
//
// tType   u8LAYCmpVariableName; (LAY: 3 characters to identify the layer)
// tType*  pu8LAYCmpVariableName;(Cmp: 3 characters to identify the component)
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Constant exported data
//
//             (LAY: 3 characters to identify the layer)
//             (Cmp: 3 characters to identify this component)
// 
// const tType   LAYCmpVariableName;
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Local function prototypes
// 
// static tTypeRetour FunctionName(tTypeArgument1 ArgumentName1, ... );
//------------------------------------------------------------------------------

//==============================================================================
//=========================== LOCAL FUNCTIONS ==================================
//==============================================================================

// ['['/]LOCAL_FUNCTIONS_END[']'/]

//==============================================================================
//=========================== EXPORTED FUNCTIONS ===============================
//==============================================================================

    [comment]ClientServerInterface's provided methods implementation[/comment]
    [for(CSIf: Interface | aComponent.interfaceRealization.supplier->filter(Interface)->
                                select(iface: Interface | 
                                iface.generalization.general.
                                    name.equalsIgnoreCase('ClientServerInterface')->includes(true))->
                                        sortedBy(name))]
        [comment]ClientServerInterface call implementation[/comment]
        [for(op: Operation | CSIf.ownedElement->filter(Operation))]
//==============================================================================
// DESCRIPTION : Provided Call of "[CSIf.name /]" interface 
//               of type "[CSIf.generalization.general.name /]" 
//               operation "[op.name /]"
//
// PARAMETERS :   [if (op.ownedElement->filter(Parameter)->isEmpty())]none[/if][for(par: Parameter | op.ownedElement->filter(Parameter)) separator('; ')][par.name/]:[par.type.name/][/for]
//
// RETURN VALUE :   none
//
// DESIGN INFORMATION : (pseudo code, algorithm ... )
//==============================================================================
void [CSIf.name /]_[op.name /]([if (op.ownedElement->filter(Parameter)->isEmpty())]void[/if][for(par: Parameter | op.ownedElement->filter(Parameter)) separator(',')][par.type.name/] [par.name/][/for])
{
    //TODO: Add code
}
        [/for]
    [/for]

//  [ '[' /]EXPORTED_FUNCTIONS_END[ ']' /]

//------------------------------------------------------------------------------
// End of file
//------------------------------------------------------------------------------
[/file]
[/template]
