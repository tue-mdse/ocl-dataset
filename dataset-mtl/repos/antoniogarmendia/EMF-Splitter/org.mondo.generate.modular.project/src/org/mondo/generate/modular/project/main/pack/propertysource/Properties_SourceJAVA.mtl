[comment encoding = UTF-8 /]
[module Properties_SourceJAVA('http://www.eclipse.org/emf/2002/Ecore','http://mondo.org/runtimePatterns', 'http://www.eclipse.org/emf/2002/GenModel')]
[import org::mondo::generate::modular::project::main::requests::global_queriesModularProject /]

[template public Properties_SourceJAVA(anProjectName : String, anPackageName : String, anPatternInstance : PatternInstance, anEObjectGenModel : GenModel)]

[for(c : ClassRoleInstance | anPatternInstance.Get_FolderClassRoleInstance()->union(anPatternInstance.Get_FileClassRoleInstance())->union(anPatternInstance.Get_ProjectClassRoleInstance()->asSequence()))]

[file ('src/'.concat(anProjectName.toLower() + '.' + getProperty('prefix_name') + '.' + anPatternInstance.Get_ProjectClassRoleInstance().element.name).replaceAll('\\.','/').concat('/propertysource/').concat(c.element.name.toString()).concat('ItemPropertiesSource.java'),false, 'UTF-8')]
package [anProjectName.toLower()/].[getProperty('prefix_name')/].[anPatternInstance.Get_ProjectClassRoleInstance().element.name.toLowerCase()/].propertysource;

import java.io.File;
import java.io.IOException;

import [anProjectName.toLower()/].[getProperty('prefix_name')/].[anPatternInstance.Get_ProjectClassRoleInstance().element.name.toLowerCase()/].XMI_File;

import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Path;
import org.eclipse.emf.common.CommonPlugin;
import org.eclipse.emf.common.util.URI;
import org.eclipse.jdt.ui.IPackagesViewPart;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.views.properties.IPropertyDescriptor;
import org.eclipse.ui.views.properties.IPropertySource;
import org.eclipse.ui.views.properties.TextPropertyDescriptor;

import [generateEClassImport(c.element)/];

public class [c.element.name.toString() /]ItemPropertiesSource implements IPropertySource { 
	
	private XMI_File property_file;

	public [c.element.name.toString() /]ItemPropertiesSource(XMI_File property_file) throws IOException{
		this.property_file = property_file;		
	}

	@Override
	public void setPropertyValue(Object id, Object value) {
		// TODO Auto-generated method stub
		[for(anEAttribute : EAttribute | c.element.eAllAttributes)]
		[if(i<>1)]
		else
		[/if]		
		if(id.equals("[anEAttribute.name /]"))
			try {
				(([c.element.name /])property_file.Get_Root()).
				eSet((([c.element.name /])property_file.Get_Root()).eClass().getEStructuralFeature("[anEAttribute.name /]"),
					[Data_Type_Parse_With_Value(anEAttribute,'value.toString()')/]);
			} catch (IOException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}			
		[/for]
		try {
			property_file.Save_XMI();			
			[if(c.Get_ClassRoleInstance_TypeFeature_EAttribute('name')->asSequence()->size() >= 1 and anPatternInstance.IsEClassFileInstance(c.element))]
				//Rename the file
				if(id.equals("[c.Get_ClassRoleInstance_TypeFeature_EAttribute('name').name/]")){
				Path xmiPath = new Path(CommonPlugin.resolve(property_file.getFileURI()).toFileString());
				IPath newxmiPath = xmiPath.removeLastSegments(1).append(value.toString()).addFileExtension(xmiPath.getFileExtension());
				File src = new File(xmiPath.toFile().getPath());	
				File trg = new File(newxmiPath.toFile().getPath());
				src.renameTo(trg);
				
				//Change File
				property_file = new XMI_File(URI.createPlatformResourceURI(newxmiPath.makeRelativeTo(ResourcesPlugin.getWorkspace().getRoot().getLocation()).toString(),true));
				property_file.setRoot(null);
				
				//Refresh folder
				IFolder fol = ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(trg.getParent()));				
				try {
					fol.getProject().refreshLocal(IResource.DEPTH_ONE, new NullProgressMonitor());
				} catch (CoreException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				//Refresh Package Explorer
				final IWorkbenchPart activePart = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().findView("org.eclipse.jdt.ui.PackageExplorer");
				if (activePart != null && activePart instanceof IPackagesViewPart) {
					
				    ((IPackagesViewPart) activePart).selectAndReveal(trg);
				    ((IPackagesViewPart) activePart).getTreeViewer().refresh();				   
				}
				}
			[/if]
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		
	}

	@Override
	public void resetPropertyValue(Object id) {
		// TODO Auto-generated method stub
		
	}
	
	@Override
	public boolean isPropertySet(Object id) {
		// TODO Auto-generated method stub
		return false;
	}
	
	@Override
	public Object getPropertyValue(Object id) {
		// TODO Auto-generated method stub
		Object strObject = null;
		[for(anEAttribute : EAttribute | c.element.eAllAttributes)]
		[if(i<>1)]
		else
		[/if]
		if(id.equals("[anEAttribute.name /]"))
			try {
				strObject = (([c.element.name /])property_file.Get_Root()).eGet((([c.element.name /])property_file.Get_Root()).eClass().getEStructuralFeature("[anEAttribute.name/]"));
				//get[anEAttribute.name.toUpperFirst()/]().toString();				
			} catch (IOException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}		
		
		[/for]			
		if(strObject!=null)
			return strObject.toString();
		return "";
	}

	@Override
	public IPropertyDescriptor['[]'/] getPropertyDescriptors() {
		// TODO Auto-generated method stub

		[for(anEAttribute : EAttribute | c.element.eAllAttributes)]
		TextPropertyDescriptor attr_[anEAttribute.name /] = new TextPropertyDescriptor("[anEAttribute.name/]", "[anEAttribute.name/]");
		attr_[anEAttribute.name /].setCategory("Attributes");
		[/for]
		return new IPropertyDescriptor['[]'/]{
		[for(anEAttribute : EAttribute | c.element.eAllAttributes)]	
				attr_[anEAttribute.name /]
				[if(anEAttribute.name<>c.element.eAllAttributes->last().name)],[/if]				
		[/for]
		};
	}
	
	@Override
	public Object getEditableValue() {
		// TODO Auto-generated method stub
		return null;
	}
		
	}

[/file]

[/for] 

[/template]
