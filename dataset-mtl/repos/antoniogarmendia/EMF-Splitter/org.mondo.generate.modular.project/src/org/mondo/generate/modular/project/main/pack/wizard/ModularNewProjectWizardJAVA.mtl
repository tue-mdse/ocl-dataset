[comment encoding = UTF-8 /]
[module ModularNewProjectWizardJAVA('http://www.eclipse.org/emf/2002/Ecore','http://mondo.org/runtimePatterns','http://www.eclipse.org/emf/2002/GenModel')]
[import org::mondo::generate::modular::project::main::requests::global_queriesModularProject /]


[template public ModularNewProjectWizardJAVA(anProjectName : String, anPatternInstance : PatternInstance, anEObjectGenModel : GenModel)]

[file ('src/'.concat(anProjectName.toLower() + '.' + getProperty('prefix_name') + '.' + anPatternInstance.Get_ProjectClass().name).replaceAll('\\.','/').concat('/wizard/').concat(anPatternInstance.Get_ProjectClass().name.toString()).concat('NewProjectWizard.java'),false, 'UTF-8')]
package [anProjectName.toLower()/].[getProperty('prefix_name')/].[anPatternInstance.Get_ProjectClass().name.toLowerCase()/].wizard;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.Platform;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.jface.wizard.Wizard;
import org.eclipse.ui.INewWizard;
import org.eclipse.ui.IWorkbench;
import org.osgi.service.prefs.BackingStoreException;
import java.io.IOException;
import [anProjectName.toLower()/].[getProperty('prefix_name')/].[anPatternInstance.Get_ProjectClass().name.toLowerCase()/].ModularModel;
import org.mondo.modular.sirius.ext.EvaluateSiriusProjectCreation;
import org.eclipse.emf.common.util.URI;
import org.eclipse.jface.dialogs.MessageDialog;

public class [anPatternInstance.Get_ProjectClass().name/]NewProjectWizard extends Wizard implements INewWizard {

	protected [anPatternInstance.Get_ProjectClass().name/]NewProjectCreationPage mainpage;
	protected [anPatternInstance.Get_ProjectClass().name/]NewProjectInfo projectInfo;
	 
	
	/**
     * Use this method to add pages to the wizard.
     * The one-time generated version of this class will add a default new project page to the wizard.
     */
	public void addPages() {
		
		mainpage = new  [anPatternInstance.Get_ProjectClass().name/]NewProjectCreationPage("basicNewProjectPage");
		mainpage.setTitle("[anPatternInstance.Get_ProjectClass().name/] Project");
		mainpage.setDescription("Create a new [anPatternInstance.Get_ProjectClass().name/] project");
		addPage(mainpage);
	}	
	
	public [anPatternInstance.Get_ProjectClass().name/]NewProjectWizard() {
		
		setWindowTitle("New [anPatternInstance.Get_ProjectClass().name/] Project");
	}

	@Override
	public void init(IWorkbench workbench, IStructuredSelection selection) {
		
		
	}

	public IWizardPage getNextPage(IWizardPage page) {
		return mainpage;		
	}
	
	@Override
	public boolean performFinish() {
		
		projectInfo = new [anPatternInstance.Get_ProjectClass().name/]NewProjectInfo(mainpage.Get_Features());
		String addr = mainpage.getDiagram_address();
		if(addr!=null)
		{
			URI addrURI = URI.createFileURI(addr);
			if(addrURI.isFile()){
				ModularModel createProject = new ModularModel();
				try {
					[if(anPatternInstance.Get_ProjectClassRoleInstance().HasTypeFeature_EAttribute('name')=false)]
					createProject.setProjectName(mainpage.Get_Features().get_ProjectName());
					[/if]
					createProject.Reverse_Engineering(addrURI);

				} catch (IOException | CoreException | BackingStoreException e) {
					
					e.printStackTrace();
				}
			}
			else
			{
				MessageDialog.openInformation(
						getShell(),
						"Error!",
						"The file address is not valid.");
			}	
			
		}
		else{
		
			try {
				projectInfo.createProject();	
			
			} catch (CoreException | BackingStoreException | IOException e) {				
				e.printStackTrace();
			}	
		}

		evaluateSiriusProjectCreation();
		return true;
	}	
	
	public void evaluateSiriusProjectCreation() {
		
		new EvaluateSiriusProjectCreation().executeProject(Platform.getExtensionRegistry(),"[anPatternInstance.Get_ProjectClass().name/].odesign");
	}

}

[/file]

[/template]
