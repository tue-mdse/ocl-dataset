[comment encoding = UTF-8 /]
[module global_queriesFilterUI('http://www.eclipse.org/emf/2002/Ecore','http://mondo.org/runtimePatterns')]

[query public generateElement (anPatternInstance : PatternInstance) : OclAny = self/]

[query public LoadEcoreModel(ecorePath : String) : EPackage = invoke('org.mondo.acceleo.generate.filterui.createProject.LoadModels', 
				'Load(java.lang.String)',Sequence{ecorePath}).oclAsType(EPackage)/]

[query public PatternInstanceFilter(anPatternInstances : PatternInstances) : 
			PatternInstance = anPatternInstances.appliedPatterns->asSequence()->select
							  (anPatternInstance : PatternInstance | anPatternInstance.pattern.name='Filter')->first() /]

[query public isFilterable(anPatternInstance : PatternInstance,anEClass : EClass) : 
			Boolean = if (anPatternInstance.classInstances->asSequence()
						->select(anClassRoleInstance :  ClassRoleInstance | anClassRoleInstance.element.name=anEClass.name)->size()>0)
						then true
						 else false
							endif
						/]

[query public Get_All_Structural_Features_Filterables(anPatternInstance : PatternInstance,anEClass : EClass) : 
			Sequence(EStructuralFeature) = anPatternInstance.Get_EAttributes(anEClass)->addAll(anPatternInstance.Get_EStructuralFeatures(anEClass)) /]

	[query public Get_EAttributes(anPatternInstance : PatternInstance,anEClass : EClass) : 
			Sequence(EStructuralFeature) = if(Select_AllEAttributes(anPatternInstance, anEClass)->size()>0) then
											  Select_AllEAttributes(anPatternInstance, anEClass)
										   else
											  anEClass.eAllAttributes->asSequence()
										   endif/]	
		
		[query public Select_AllEAttributes(anPatternInstance : PatternInstance,anEClass : EClass) :
			Sequence(FeatureRoleInstance) = anPatternInstance.classInstances.featureInstances
											->select(anFeatureRoleInstance: FeatureRoleInstance | 
											anFeatureRoleInstance.oclIsKindOf(TypeFeatureRoleInstance))
											->select(anFeatureRoleInstance: FeatureRoleInstance | 
											anFeatureRoleInstance.oclAsType(TypeFeatureRoleInstance).role.ref
											->asSequence()->first().name='aKey').oclAsType(TypeFeatureRoleInstance).element->asSequence()
											/]

	[query public Get_EStructuralFeatures(anPatternInstance : PatternInstance,anEClass : EClass) : 
			Sequence(EStructuralFeature) = if(Select_AllEStructuralFeatures(anPatternInstance, anEClass)->size()>0) then
											  Select_AllEStructuralFeatures(anPatternInstance, anEClass)
										   else
											  anEClass.eAllReferences->asSequence()
										   endif /]	
		
		[query public Select_AllEStructuralFeatures(anPatternInstance : PatternInstance,anEClass : EClass) :
			Sequence(EStructuralFeature) = anPatternInstance.classInstances.referenceInstances
								           ->select(anReferenceRoleInstance: ReferenceRoleInstance | anReferenceRoleInstance.role.ref.name='rKey')
										   ->select(anReferenceRoleInstance: ReferenceRoleInstance |
											Check_Attribute_Belong_Class(anEClass,anReferenceRoleInstance.element.eContainingClass)->size()>0
											).element->asSequence() /]

		[query public Check_Attribute_Belong_Class(anEClass : EClass, anReferenceClass : EClass) : Sequence(EClass) = 
										 anEClass->closure(anEClass | anEClass.eSuperTypes)->flatten()->asSequence()
												 ->select(an : EClass | an.name.toString()=anReferenceClass.name.toString())
														    /]

[comment Get All Containment Classes from anEClass /]

[query public GetUnionContainment(ParentanEClass : EClassifier,anEPackage : EPackage) :
	Sequence(EClassifier) =  GetAllRecursiveDirectContainment(ParentanEClass)
							 ->union(GetAllRecursiveDirectContainmentInherited(ParentanEClass,anEPackage))
 /]

[query public GetAllRecursiveDirectContainment(ParentanEClass : EClassifier) : 
		Sequence(EClassifier) = ParentanEClass->closure(anEClassifier : EClassifier | 
								anEClassifier.eAllContents(EReference)->
								select(anEReference : EReference | anEReference.containment=true).eType->asSequence())->asSequence()																																	
/]

[query public GetAllRecursiveDirectContainmentInherited(ParentanEClass : EClassifier,anEPackage : EPackage) :
	 Sequence(EClassifier) = GetAllRecursiveDirectContainment(ParentanEClass)
							 ->closure(anEClassifier : EClassifier | GetSubClasses(anEClassifier,anEPackage))->asSequence()/]

[query public GetSubClasses(ParentanEClass : EClassifier,anEPackage : EPackage) :
	Sequence(EClassifier) = anEPackage.eAllContents(EClass)->select(anEClass : EClass | 
	anEClass.eAllSuperTypes->select(super : EClass | super = (ParentanEClass))->size()>0)
/]

[comment END /]


