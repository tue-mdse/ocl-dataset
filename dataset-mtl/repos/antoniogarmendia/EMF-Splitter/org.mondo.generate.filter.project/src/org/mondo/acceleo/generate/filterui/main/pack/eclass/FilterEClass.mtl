[comment encoding = UTF-8 /]
[module FilterEClass('http://www.eclipse.org/emf/2002/Ecore','http://mondo.org/runtimePatterns')]
[import org::mondo::acceleo::generate::filterui::requests::global_queriesFilterUI /]

[template public FilterEClass(anProjectName : EString, anPatternInstance : PatternInstance,anEPackage : EPackage)]

[for (anEClass : EClass| anEPackage.eAllContents(EClass) )]
	
[file ('src/'.concat(anProjectName.toLower() + '.' + getProperty('prefix_name')).replaceAll('\\.','/').concat('/eclass/').concat(anEClass.name.toString()).concat('Filter.java'),false, 'UTF-8')]
package [anProjectName.toLower()/].[getProperty('prefix_name')/].eclass;

import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.mondo.modular.filterui.ext.IObtainClassFeatures;

import [anEPackage.name /].[anEPackage.name /]Package;

public class [ anEClass.name.toString() /]Filter implements IObtainClassFeatures{

	@Override
	public EClass GetEClass() {
		// TODO Auto-generated method stub
		return [anEPackage.name /]Package.eINSTANCE.get[ anEClass.name.toString() /]();
	}

	@Override
	public EList<EStructuralFeature> GetEStructuralFeature() {
		// TODO Auto-generated method stub
		EList<EStructuralFeature> list_feat = new BasicEList<EStructuralFeature>();
		[for (anStructuralFeatures : EStructuralFeature | anPatternInstance.Get_All_Structural_Features_Filterables(anEClass))]
		list_feat.add(GetEClass().getEStructuralFeature("[anStructuralFeatures.name/]"));
		[/for]
		return list_feat;		
	}

	@Override
	public boolean isIstanceEObject(EObject anEObject) {
		// TODO Auto-generated method stub
		if(GetEClass().isInstance(anEObject))
			return true;
		else
			return false;
	}

	@Override
	public EList<IObtainClassFeatures> GetEListClasses() {
		// TODO Auto-generated method stub
		EList<IObtainClassFeatures> list_classes = new BasicEList<IObtainClassFeatures>();
[let list_eclasses : Sequence(EClass) = GetUnionContainment(anEClass,anEPackage)]		
	[for (oneEClass : EClass | list_eclasses)]
		[if(anPatternInstance.isFilterable(oneEClass)=true)]
		list_classes.add(new [oneEClass.name /]Filter());
		[else]
		//list_classes.add(new [oneEClass.name /]Filter());
		[/if]				
	[/for]	
[/let]
		return list_classes;
	}
	
}

[/file]

[/for]

[/template]
