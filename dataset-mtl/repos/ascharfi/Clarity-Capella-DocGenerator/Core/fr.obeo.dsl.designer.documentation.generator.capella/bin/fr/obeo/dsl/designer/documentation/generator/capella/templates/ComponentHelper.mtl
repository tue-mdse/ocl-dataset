[comment encoding = UTF-8 /]
[module ComponentHelper('http://www.eclipse.org/sirius/1.1.0',
'http://www.eclipse.org/sirius/diagram/1.1.0',
'http://www.polarsys.org/capella/core/modeller/0.8.0', 
'http://www.polarsys.org/capella/core/core/0.8.0', 
'http://www.polarsys.org/capella/core/oa/0.8.0', 
'http://www.polarsys.org/capella/core/ctx/0.8.0', 
'http://www.polarsys.org/capella/core/la/0.8.0', 
'http://www.polarsys.org/capella/core/pa/0.8.0', 
'http://www.polarsys.org/capella/core/epbs/0.8.0', 
'http://www.polarsys.org/capella/core/sharedmodel/0.8.0', 
'http://www.polarsys.org/capella/core/requirement/0.8.0', 
'http://www.polarsys.org/capella/core/information/0.8.0', 
'http://www.polarsys.org/capella/core/cs/0.8.0', 
'http://www.polarsys.org/capella/core/fa/0.8.0', 
'http://www.polarsys.org/capella/core/common/0.8.0', 
'http://www.polarsys.org/capella/core/interaction/0.8.0',
'http://www.polarsys.org/capella/common/core/0.8.0')]

[import fr::obeo::dsl::designer::documentation::generator::capella::templates::helpers::CapellaDocumentationHelper /]
 

[** 
 * Generates an HTML table representing the flows of a LogicalComponent
 * 
 * @param source the LogicalComponent from which we want to represent the flows
 * @param direction reprenset the directing of the flow you want to represent. It should be either 'IN' or 'OUT'
 */]
[template public generateComponentExchangeTable(component : cs::Component, direction : OrientationPortKind )]
        <table>
            <thead>
                <tr>
                    <th>Exchange Name</th>
                    <th>Source</th>
                    <th>Destination</th>
                </tr>
            </thead>
            <tbody>
				[for (ce : fa::ComponentExchange | component.eContents(fa::ComponentPort)->select(orientation = direction).componentExchanges) ]
				  <tr>
					    <td>[ce.oclAsType(modellingcore::AbstractNamedElement).name/]</td>
					[if (direction.toString() = 'IN')]
						<td>[ce.sourcePort.eContainer().eGet('name')/]</td>
					    <td>[component.oclAsType(modellingcore::AbstractNamedElement).name/]</td>
					[else]
					    <td>[ce.sourcePort.eContainer().eGet('name')/]</td> 
				    	<td>[ce.targetPort.eContainer().eGet('name')/]</td>
					[/if]
				  </tr>
				[/for]
			</tbody>
        </table>

[/template]

[template public getComponentPath(component : cs::Component)]
	[if (component.eContainer().oclIsKindOf(cs::Component))][component.eContainer().oclAsType(cs::Component).getComponentPath()/]/ [component.eContainer().oclAsType(cs::Component).insertLinkToObject('title',component.eContainer().oclAsType(LogicalComponent).oclAsType(modellingcore::AbstractNamedElement).name)/][/if]
[/template]

[template public generateChildComponents(c :cs::Component)]
	<h4>Child Components</h4>
		[for (child : cs::Component | c.eContents(cs::Component))]
<li>
 [child.oclAsType(modellingcore::AbstractNamedElement).name/] [if (not child.summary.oclIsUndefined())] : [child.summary/][/if]
</li>
        [/for]
[/template] 
[**
 * Gets the list of the connected flows
 * @param owner Owning LogicalComponent 
 * @param direction either 'IN' or 'OUT'
 */]
[query public getConnectedFlow(owner : cs::Component, direction : OrientationPortKind) : Sequence(fa::ComponentExchange) = owner.eContents(fa::ComponentPort)->select(orientation = direction).componentExchanges /]

