[comment encoding = UTF-8 /]
[module generateSite(	'http://www.eclipse.org/emf/2002/Ecore',
						'http://www.eclipse.org/sirius/1.1.0',
						'http://www.eclipse.org/sirius/diagram/1.1.0',
						'http://www.eclipse.org/sirius/table/1.1.0')]

[import fr::obeo::dsl::designer::gen::html::files::explorerPane /]
[import fr::obeo::dsl::designer::gen::html::files::representationPane /]
[import fr::obeo::dsl::designer::gen::html::files::propertiesPane /]
[import fr::obeo::dsl::designer::gen::html::files::index /]
[import fr::obeo::dsl::designer::gen::html::services::viewpointServices /]
[import fr::obeo::dsl::designer::gen::html::services::labelProviderServices /]
[import fr::obeo::dsl::designer::gen::html::services::pathServices /]
[import fr::obeo::dsl::designer::gen::html::services::representationsServices /]

[comment Main entry point. Parameters are :
			- analysis : the root analysis. It's been retrieved if needed in the initialize() method of the generator
			- targetFolder : where the files will be generated
			- imageFileFormat : File format used to export diagrams as images
			- exportProjectDependencies : flag to indicate if the user chose to export the project dependencies
			(exporting project dependencies can be very long, as for the UML metamodel as an example)/]
[template public generateAnalysis(analysis : DAnalysis, targetFolder : String, imageFileFormat : String, exportProjectDependencies : Boolean)]
[comment @main/]

[comment initialize the services/]
[analysis.initServices(targetFolder, imageFileFormat)/]

[comment generate elements/]
[analysis.generateExplorerPane(exportProjectDependencies)/]
[analysis.generateRepresentations()/]
[analysis.generateProperties(exportProjectDependencies)/]
[analysis.generateIndex()/]

[comment reset the services/]
[analysis.resetServices()/]
[/template]

[comment Call the init methods of services classes /]
[template private initServices(analysis : DAnalysis, targetFolder : String, imageFileFormat : String)]
[analysis.initPathServices(targetFolder)/]
[analysis.initRepresentationsServices(targetFolder, imageFileFormat)/]
[analysis.initLabelProviderServices(targetFolder)/]
[analysis.initSiriusServices(targetFolder)/]
[/template]

[comment Call the reset methods of services classes /]
[template private resetServices(analysis : DAnalysis)]
[analysis.resetRepresentationsServices()/]
[/template]

[comment Generate pages for the representation pane /]
[template private generateRepresentations(analysis : DAnalysis)]
[analysis.generateNoSelectionRepresentationPane()/]
[analysis.getAllAnalyses().selectedViews.ownedRepresentations.generateRepresentationPane()/]
[/template]

[comment Generate pages for the properties pane /]
[template private generateProperties(analysis : DAnalysis, exportProjectDependencies : Boolean)]
[analysis.generateNoSelectionPropertiesPane()/]
[for (childAnalysis : DAnalysis | analysis.getAllAnalyses())]
	[if (exportProjectDependencies)]
		[childAnalysis.models.generateAllPropertiesPane()/]
	[else]
		[let dependencies : Sequence(EObject) = analysis.getProjectDependencies()]
			[childAnalysis.models->reject(model : EObject | dependencies->includes(model)).generateAllPropertiesPane()/]
		[/let]
	[/if]
	[childAnalysis.getRepresentationElementsWithSpecificSemanticElements().generatePropertiesPane()/]
[/for]

[if (not exportProjectDependencies)]
	[comment We have to generate properties pages for some DRepresentationElement instances
			- if they are not DEdge or DFeatureColumn instance
			- they do not belong to the representations elements having specific semantic elements  (in this case the page would be generated with a previous statement)
			- their target is part of the project dependencies
	/]
	[analysis.getAllAnalyses().eAllContents(DRepresentationElement)
		->reject(oclIsKindOf(DEdge) or oclIsKindOf(DFeatureColumn))
		->reject(hasSpecificSemanticElements())
		->select(elt : DRepresentationElement | elt.target.isInProjectDependencies()).target
		->asSet().generatePropertiesPane()/]
[/if]
[/template]

