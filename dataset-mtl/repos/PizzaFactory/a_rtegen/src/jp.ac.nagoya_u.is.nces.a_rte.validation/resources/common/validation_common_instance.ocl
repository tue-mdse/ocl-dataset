/*
 *  TOPPERS/A-RTEGEN
 *      Automotive Runtime Environment Generator
 *
 *  Copyright (C) 2013-2016 by Eiwa System Management, Inc., JAPAN
 *
 *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *      免責すること．
 *
 *  本ソフトウェアは，AUTOSAR（AUTomotive Open System ARchitecture）仕
 *  様に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するもので
 *  はない．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利
 *  用する者に対して，AUTOSARパートナーになることを求めている．
 *
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *  の責任を負わない．
 * 
 *  $Id: header.ocl 6220 2013-11-28 07:33:32Z t-inoue $
 */

import '../../../jp.ac.nagoya_u.is.nces.a_rte.model/model/ar4x.ecore#/'
import '../../../jp.ac.nagoya_u.is.nces.a_rte.model/model/rte.ecore#/'

package ar4x::m2

	
	/*
	 * ImplementationDataType
	 */

	context ImplementationDataType
	
	def: isSameImplementationDataTypeElement(e1 : ar4x::m2::ImplementationDataTypeElement, e2 : ar4x::m2::ImplementationDataTypeElement) : Boolean =
		e1.shortName = e2.shortName
		and
		e1.category = e2.category
		and
		e1.arraySize = e2.arraySize
		and
		(e1.swDataDefProps.baseType.oclIsUndefined() = e2.swDataDefProps.baseType.oclIsUndefined()
			or e1.swDataDefProps.baseType.nativeDeclaration = e2.swDataDefProps.baseType.nativeDeclaration)
		and
		(e1.swDataDefProps.implementationDataType.oclIsUndefined() = e2.swDataDefProps.implementationDataType.oclIsUndefined()
			or e1.swDataDefProps.implementationDataType.shortName = e2.swDataDefProps.implementationDataType.shortName)

	def: isSameImplementationDataType(t1 : ar4x::m2::ImplementationDataType, t2 : ar4x::m2::ImplementationDataType) : Boolean =
		t1.category = t2.category
		and
		((t1.baseType.oclIsUndefined() and t2.baseType.oclIsUndefined())
			or t1.baseType.nativeDeclaration = t2.baseType.nativeDeclaration)
		and
		((t1.subElement->isEmpty() and t2.subElement->isEmpty())
			or (t1.subElement->size() = t2.subElement->size()
				and
				Sequence{1..(t1.subElement->size())}->iterate(i : Integer; flag : Boolean = true |
					flag and isSameImplementationDataTypeElement(t1.subElement->at(i), t2.subElement->at(i)))))
					
	def: sameNameTypes : Set(ImplementationDataType) = ImplementationDataType.allInstances()->select(shortName = self.shortName)->excluding(self)

	inv nrte_sws_0101:
	not (self.category = 'VALUE' and self.baseType.oclIsUndefined())

	inv nrte_sws_0156:
	not (self.category = 'VALUE')
	or
	sameNameTypes->forAll(t | isSameImplementationDataType(t, self))

	inv nrte_sws_0303:
	not (self.category = 'ARRAY')
	or
	sameNameTypes->forAll(t | isSameImplementationDataType(t, self))

	inv nrte_sws_0304:
	not (self.category = 'STRUCTURE')
	or
	sameNameTypes->forAll(t | isSameImplementationDataType(t, self))

	inv nrte_sws_0305:
	not (self.category = 'UNION')
	or
	sameNameTypes->forAll(t | isSameImplementationDataType(t, self))

	inv nrte_sws_0306:
	not (self.category = 'TYPE_REFERENCE')
	or
	sameNameTypes->forAll(t | isSameImplementationDataType(t, self))

	inv nrte_sws_0307:
	not (self.category = 'DATA_REFERENCE')
	or
	sameNameTypes->forAll(t | isSameImplementationDataType(t, self))

	inv nrte_sws_0240:
	not (self.category = 'ARRAY' and self.subElement->size() <> 1)

	inv nrte_sws_0242: let element : ImplementationDataTypeElement = self.subElement->first()
	in
	not (self.category = 'ARRAY' and (element.category <> 'VALUE' and element.category <> 'TYPE_REFERENCE'))
	and not (self.category = 'ARRAY' and (element.category = 'TYPE_REFERENCE' and element.swDataDefProps.implementationDataType.category <> 'VALUE'))

	inv nrte_sws_0244:
	not (self.category = 'STRUCTURE' and not self.subElement->select(category <> 'VALUE' and category <> 'TYPE_REFERENCE')->isEmpty())
	and not (self.category = 'STRUCTURE' and not self.subElement->select(category = 'TYPE_REFERENCE')->select(swDataDefProps.implementationDataType.category <> 'VALUE')->isEmpty())

	inv nrte_sws_0246:
	not (self.category = 'UNION' and not self.subElement->select(category <> 'VALUE' and category <> 'TYPE_REFERENCE')->isEmpty())
	and not (self.category = 'UNION' and not self.subElement->select(category = 'TYPE_REFERENCE')->select(swDataDefProps.implementationDataType.category <> 'VALUE')->isEmpty())

	inv nrte_sws_0255:
	not (self.category = 'DATA_REFERENCE'
		and (self.swDataDefProps.swPointerTargetProps.targetCategory <> 'VALUE'
			and self.swDataDefProps.swPointerTargetProps.targetCategory <> 'TYPE_REFERENCE'))

	inv nrte_sws_0256:
	self.swDataDefProps.swPointerTargetProps.oclIsUndefined()
	or
	not (self.category = 'DATA_REFERENCE'
		and self.swDataDefProps.swPointerTargetProps.targetCategory = 'VALUE'
		and self.swDataDefProps.swPointerTargetProps.swDataDefProps.baseType.nativeDeclaration.oclIsUndefined())

	inv nrte_sws_0257:
	self.swDataDefProps.swPointerTargetProps.oclIsUndefined()
	or
	not (self.category = 'DATA_REFERENCE'
		and self.swDataDefProps.swPointerTargetProps.targetCategory = 'TYPE_REFERENCE'
		and self.swDataDefProps.swPointerTargetProps.swDataDefProps.implementationDataType.oclIsUndefined())

	inv nrte_sws_0295:
	not (self.category = 'ARRAY' and self.subElement->first().arraySize < 1)

	inv nrte_sws_0298:
	not (self.category = 'STRUCTURE' and self.subElement->isEmpty())

	inv nrte_sws_0302:
	not (self.category = 'UNION' and self.subElement->size() < 2)

	inv nrte_sws_0346:
	not (self.category = 'TYPE_REFERENCE')
	or
	not self.swDataDefProps.implementationDataType.oclIsUndefined()

	/*
	 * ImplementationDataTypeElement
	 */
	context ImplementationDataTypeElement

	inv nrte_sws_0247:
	not (self.category = 'VALUE' and self.swDataDefProps.baseType.oclIsUndefined())

	/*
	 * SwBaseType
	 */
	context SwBaseType

	inv nrte_sws_0155:
	not ImplementationDataType.allInstances()->exists(baseType = self) or not self.baseTypeSize.oclIsUndefined()

endpackage

package ar4x::instance


endpackage
