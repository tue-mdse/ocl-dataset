[comment]
/*
 *  TOPPERS/A-RTEGEN
 *      Automotive Runtime Environment Generator
 *
 *  Copyright (C) 2013-2016 by Eiwa System Management, Inc., JAPAN
 *
 *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *      免責すること．
 *
 *  本ソフトウェアは，AUTOSAR（AUTomotive Open System ARchitecture）仕
 *  様に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するもので
 *  はない．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利
 *  用する者に対して，AUTOSARパートナーになることを求めている．
 *
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *  の責任を負わない．
 * 
 *  $Id: rteTypeHeader.mtl 19918 2016-01-08 06:05:46Z hiroki.kitagawa $
 */
[/comment]
[comment encoding = UTF-8 /]
[module rteTypeHeader('http://nces.is.nagoya-u.ac.jp/a-rte/rte/module')]

[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::fileUtil /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::symbolUtil /]

[template public genRteTypeHeader(aRteTypeHeader : RteTypeHeader)]
[file (aRteTypeHeader.fileName, false, 'ASCII')]
	[aRteTypeHeader.genFileHeader()/]

	[aRteTypeHeader.genFileIncludes()/]

	/*
	 * Internal Constant Definitions
	 */
	[for (aConstant : Constant | aRteTypeHeader.rteTypeConstant)]
		[aConstant.genConstantDefinition()/]
	[/for]

	/*
	 * RTE Type Definitions
	 */
	[aRteTypeHeader.genTypedefProxyTableIndex()/]
	[if (aRteTypeHeader.providesSignalGroupTransmission)]
		[aRteTypeHeader.genTypedefRelatedCom()/]
	[/if]
	[for (aType : Type | aRteTypeHeader.rteType)]
		[aType.genRteTypeDefinition()/]
	[/for]

	[aRteTypeHeader.genFileFooter()/]
[/file]
[/template]

[template private genFileHeader(aRteTypeHeader : RteTypeHeader)]
[aRteTypeHeader.genFileHeaderComment()/]

[aRteTypeHeader.genGuardDeclarationStart()/]
[/template]

[template private genFileFooter(aRteTypeHeader : RteTypeHeader)]
[aRteTypeHeader.genGuardDeclarationEnd()/]
[/template]

[template private genRteTypeDefinition(aType : Type) /]

[template private genRteTypeDefinition(aType : PrimitiveType) ? (not aType.oclIsKindOf(RedefinitionType)) ]
typedef [aType.originalTypeSymbolName/] [aType.symbolName/];
[/template]

[template private genRteTypeDefinition(aType : ArrayType) ? (not aType.oclIsKindOf(RedefinitionType)) ]
#define [aType.genArraySize()/] UINT_C([aType.arraySize/])
typedef [aType.originalTypeSymbolName/]	[aType.symbolName/]['['/][aType.genArraySize()/][']'/];
[/template]

[template private genRteTypeDefinition(aType : StructType) ? (not aType.oclIsKindOf(RedefinitionType)) ]
[for (aMember : StructMember | aType.member)]
	[if (aMember.type.oclIsTypeOf(ArrayType))]
		#define [aType.symbolName.toUpper()/]_[aMember.memberName.toUpper()/]_SIZE UINT_C([aMember.type.oclAsType(ArrayType).arraySize/])
	[/if]
[/for]
typedef struct {
[for (aMember : StructMember | aType.member)]
	[if (aMember.type.oclIsTypeOf(ArrayType))]
		[aMember.type.originalTypeSymbolName/] [aMember.memberName/]['['/][aType.symbolName.toUpper()/]_[aMember.memberName.toUpper()/]_SIZE[']'/];
	[else]
		[aMember.type.symbolName/] [aMember.memberName/];
	[/if]
[/for]
} [aType.symbolName/];
[/template]

[template private genRteTypeDefinition(aType : UnionType) ? (not aType.oclIsKindOf(RedefinitionType)) ]
[for (aMember : UnionMember | aType.member)]
	[if (aMember.type.oclIsTypeOf(ArrayType))]
		#define [aType.symbolName.toUpper()/]_[aMember.memberName.toUpper()/]_SIZE UINT_C([aMember.type.oclAsType(ArrayType).arraySize/])
	[/if]
[/for]
typedef union { /* MISRA RULE 18.4 VIOLATION : It won't be fixed because of RTE Specification rte_sws_7144 */
[for (aMember : UnionMember | aType.member)]
	[if (aMember.type.oclIsTypeOf(ArrayType))]
		[aMember.type.originalTypeSymbolName/] [aMember.memberName/]['['/][aType.symbolName.toUpper()/]_[aMember.memberName.toUpper()/]_SIZE[']'/];
	[else]
		[aMember.type.symbolName/] [aMember.memberName/];
	[/if]
[/for]
} [aType.symbolName/];
[/template]

[template private genRteTypeDefinition(aType : PointerType) ? (not aType.oclIsKindOf(RedefinitionType)) ]
typedef [aType.type.symbolName/]	*[aType.symbolName/];
[/template]

[template private genRteTypeDefinition(aType : RedefinitionType) ]
typedef [aType.sourceType.symbolName/] [aType.symbolName/];
[/template]

[template private genRteTypeDefinition(aType : RteBufferQueueType) ]
typedef struct {
	uint32 quecnt:16;
	uint32 head:15;
	uint32 stat:1;
	[aType.elementType.symbolName/]	element['['/][aType.maxLengthConstant.symbolName/][']'/];
} [aType.symbolName/];
[/template]

[template private genRteTypeDefinition(aType : RteNonqueuedSendTrustedFunctionParamType) ]
typedef struct {
	const void		*tf_data;
	boolean 		tf_rx_res;
} [aType.symbolName/];
[/template]

[template private genRteTypeDefinition(aType : RteQueuedSendTrustedFunctionParamType) ]
typedef struct {
	const void		*tf_data;
	Std_ReturnType 	tf_ercd;
} [aType.symbolName/];
[/template]

[template private genRteTypeDefinition(aType : ComSendTrustedFunctionParamType) ]
typedef struct {
	[if (aType.isGroup)]
		Rte_ComMetaComplexDataType *meta;
	[else]
		Com_SignalIdType	com_sig_id;
	[/if]
	const void				*com_data;
	Std_ReturnType 		tf_ercd;
} [aType.symbolName/];
[/template]

[template private genRteTypeDefinition(aType : CsTrustedFunctionParamType) ]
typedef struct {
	void	**tf_argv;
	uint8	tf_opid;
	Std_ReturnType tf_ercd;
} [aType.symbolName/];
[/template]

[template public genTypedefRelatedCom(aRteTypeHeader : RteTypeHeader)]
typedef uint32 Rte_BufferTypeOffset;
typedef struct {
	Com_SignalGroupIdType com_sig_gid;
	uint32 com_sig_id_cnt;
	const Com_SignalIdType *com_sig_id;
	const Rte_BufferTypeOffset *offset;
} Rte_ComMetaComplexDataType;
[/template]

[template public genTypedefProxyTableIndex(aRteTypeHeader : RteTypeHeader)]
typedef uint32 Rte_SrWriteProxyFunctionTableIndex;
[/template]
