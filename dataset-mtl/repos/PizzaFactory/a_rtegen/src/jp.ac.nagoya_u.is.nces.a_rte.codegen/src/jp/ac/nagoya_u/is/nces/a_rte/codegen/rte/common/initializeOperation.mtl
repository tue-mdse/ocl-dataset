[comment]
/*
 *  TOPPERS/A-RTEGEN
 *      Automotive Runtime Environment Generator
 *
 *  Copyright (C) 2013-2016 by Eiwa System Management, Inc., JAPAN
 *
 *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *      免責すること．
 *
 *  本ソフトウェアは，AUTOSAR（AUTomotive Open System ARchitecture）仕
 *  様に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するもので
 *  はない．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利
 *  用する者に対して，AUTOSARパートナーになることを求めている．
 *
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *  の責任を負わない．
 * 
 *  $Id: initializeOperation.mtl 19918 2016-01-08 06:05:46Z hiroki.kitagawa $
 */
[/comment]
[comment encoding = UTF-8 /]
[module initializeOperation('http://nces.is.nagoya-u.ac.jp/a-rte/rte/module')]

[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::operationUtil /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::excludeOperation /]


[template public genInitializeOperation(aInitializeOperation : InitializeOperation) /]

[template private genInitializeOperation(aInitializeOperation : VariableInitializeOperation) ]
[let aExcludeOperation : ExcludeOperation = aInitializeOperation.excludeOperation]
	[aExcludeOperation.genExcludeOperationEnter()/]
[/let]
[for (aGlobalVariable : GlobalVariable | aInitializeOperation.initVariable)]
	[aGlobalVariable.genGlobalVariableInitialization()/]
[/for]
[let aExcludeOperation : ExcludeOperation = aInitializeOperation.excludeOperation]
	[aExcludeOperation.genExcludeOperationExit()/]
[/let]
[/template]

[template private genGlobalVariableInitialization (aGlobalVariable : GlobalVariable) ]
[aGlobalVariable.genDoGlobalVariableInitialization()/]
[/template]

[template private genGlobalVariableInitialization (aGlobalVariable : RteBufferVariableSet) ]
[aGlobalVariable.valueVariable.genDoGlobalVariableInitialization()/]
[let aStatusVariable : GlobalVariable = aGlobalVariable.statusVariable]
	[aStatusVariable.genDoGlobalVariableInitialization()/]
[/let]
[/template]

[template private genGlobalVariableInitialization (aGlobalVariable : RteBufferQueuedVariable) ]
Rte_InitQueue([aGlobalVariable.genPointerAccess()/]);
[/template]

[template private genDoGlobalVariableInitialization (aGlobalVariable : GlobalVariable) ? (aGlobalVariable.type.oclIsKindOf(PrimitiveType))]
[aGlobalVariable.genValueAccess()/] = [let aInitValueConstant : Constant = aGlobalVariable.initValueConstant][aInitValueConstant.genValueAccess()/][else]0[if (aGlobalVariable.type.oclAsType(PrimitiveType).signedness = SignednessEnum::unsigned)]U[/if][/let];
[/template]

[template private genDoGlobalVariableInitialization (aGlobalVariable : GlobalVariable) ? (aGlobalVariable.type.oclIsKindOf(ArrayType))]
Rte_ArrayMemcpy([aGlobalVariable.symbolName/], [aGlobalVariable.initValueConstant.representedVariableName/], [aGlobalVariable.type.symbolName/]);
[/template]

[template private genDoGlobalVariableInitialization (aGlobalVariable : GlobalVariable) ? (aGlobalVariable.type.oclIsKindOf(StructType))]
Rte_StructMemcpy(&[aGlobalVariable.symbolName/], &[aGlobalVariable.initValueConstant.representedVariableName/], [aGlobalVariable.type.symbolName/]);
[/template]

[template private genDoGlobalVariableInitialization (aGlobalVariable : GlobalVariable) ? (aGlobalVariable.type.oclIsKindOf(UnionType))]
Rte_UnionMemcpy(&[aGlobalVariable.symbolName/], &[aGlobalVariable.initValueConstant.representedVariableName/], [aGlobalVariable.type.symbolName/]);
[/template]

[template private genDoGlobalVariableInitialization (aGlobalVariable : GlobalVariable) ? (aGlobalVariable.type.oclIsKindOf(PointerType))]
[aGlobalVariable.genValueAccess()/] = [let aInitValueConstant : Constant = aGlobalVariable.initValueConstant][aInitValueConstant.genValueAccess()/][else]0[/let]; /* MISRA RULE 3.1 11.3 VIOLATION : It won't be fixed because of RTE Specification rte_sws_3852 and 7046 */
[/template]

[template private genDoGlobalVariableInitialization (aGlobalVariable : GlobalVariable) ? (aGlobalVariable.type.oclIsKindOf(ModeQueueType))]
SchM_SwitchMode_Initqueue([aGlobalVariable.symbolName/]);
[/template]

[template private genInitializeOperation(aInitializeOperation : IocInitializeOperation) ]
[for (aIocApi : IocApi | aInitializeOperation.initIocApi)]
	[aIocApi.genIocInitializeOperation()/]
[/for]
[/template]

[template private genIocInitializeOperation(aIocApi : IocApi) /]

[template private genIocInitializeOperation(aIocApi : IocWriteApi) ]
[if (aIocApi.parent.initValueVariable.oclIsUndefined()) ]
	(void) [aIocApi.symbolName/]([aIocApi.parent.initValue.genPointerAccess()/]);[if aIocApi.parent.initValue.type.oclIsKindOf(PointerType)] /* MISRA RULE 3.1 11.3 VIOLATION : It won't be fixed because of RTE Specification rte_sws_3852 and 7046 */[/if]
[else]
	(void) [aIocApi.symbolName/]([aIocApi.parent.initValueVariable.genPointerAccess()/]);
[/if]
[/template]

[template private genIocInitializeOperation(aIocApi : IocEmptyQueueApi) ]
(void) [aIocApi.symbolName/]();
[/template]
