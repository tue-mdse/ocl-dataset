[comment encoding = UTF-8 /]
[module generalRuleTransformation('http://www.eclipse.org/uml2/3.0.0/UML')/]

[template public generalRuleTransformation(c : Class) post (trim())]
[comment @main /]
[if (c.hasStereotype('rule'))]
[for (a : Stereotype | c.getAppliedStereotypes())]
	[if (c.isGeneral(c.getValue(a, 'ruleType').toString()))]
		[file (c.name, false, 'UTF-8')]
def self.get_[c.getSource(a)/]_[c.sourceType(a)/]([c.getSource(a)/]_id)
	if [c.getSource(a)/]_id
    	@[c.sourceType(a)/] = [c.sourceType(a).toString().toUpperFirst()/].find_by_id([c.getSource(a).toString().toUpperFirst()/].find_by_id([c.getSource(a)/]_id).[c.sourceType(a)/]_id)
    end
    return @[c.sourceType(a)/]
end				
		[/file]
	[/if]
[/for]
[/if]
[/template]

[template public getOclExpression(c : Class, s : Stereotype)post(trim())]
	[c.getValue(s, 'OCLExpression')/]
[/template]

[template public getSource(c : Class, s : Stereotype)post(trim())]
	[c.getValue(s, 'source').toString().toLower()/]
[/template]

[template public sourceType(c : Class, a : Stereotype)post(trim())]
	[c.getSourceType(c.getOclExpression(a).toString(),c.getSource(a))/]
[/template]

[query public hasStereotype(arg0 : Element, arg1 : String) : Boolean
	= invoke('org.eclipse.acceleo.module.services.UmlServices', 
'hasStereotype(org.eclipse.uml2.uml.Element, java.lang.String)', Sequence{arg0, arg1})/]
[query public isGeneral(arg0 : Element, arg1 : String) : Boolean
	= invoke('org.eclipse.acceleo.module.services.UmlServices',
 'isGeneral(org.eclipse.uml2.uml.Element, java.lang.String)', Sequence{arg0, arg1})/]
[query public getSourceType(arg0 : Element, arg1 : String, arg2: String) : String
	= invoke('org.eclipse.acceleo.module.services.UmlServices',
'getSourceType(org.eclipse.uml2.uml.Element, java.lang.String, java.lang.String)',
 Sequence{arg0, arg1, arg2})/]
	
		