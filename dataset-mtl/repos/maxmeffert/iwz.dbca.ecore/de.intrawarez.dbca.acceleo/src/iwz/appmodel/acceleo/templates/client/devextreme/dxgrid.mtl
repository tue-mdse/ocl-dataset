[comment encoding = UTF-8 /]
[module dxgrid('http://iwz/appmodel')]

[import iwz::appmodel::acceleo::templates::common/]
[import iwz::appmodel::acceleo::queries::common::client/]

[query public dxGridOptionsName(e : Entity) : String
	= e.name.toLower() + 'DxGridOptions'
/]

[query private dxGridOptionCloumns(e : Entity) : String
	= '["' + e.properties->select(type.toString()<>'GUID').name->sep('","') + '"]'
/]

[template public generateDxGridOptionsConstructor (c : Client)]
[file ('/client/devextreme/'+c.name.toLower()+'/js/dxGrid.js', false, 'UTF-8')]
(function thornms_routes ($, DX, ko, [c.name/], undefined){

	function createDxGridOptions() {

		var options = {};
		options.remoteOperations = false;
		options.height = "100%";
		options.filterRow = {};
		options.filterRow.visible = true;
		//options.selection = {};
		//options.selection.mode = "multiple"
		options.paging = {};
		options.paging.pageSize = 10;
		options.pager = {};
		options.pager.visible = true;
		options.pager.showPageSizeSelector = true;
		options.pager.allowedPageSizes = ['[10,20,30,40,50]'/];
		options.pager.showInfo = true;
		options.editing = {};
		options.editing.mode = "batch";
		options.editing.insertEnabled = true;
		options.editing.removeEnabled = true;
        
		
		options.contextMenuItems = ['[]'/];
		options.selectedRows = ko.observable(['[]'/]);
		
		options.onContextMenuPreparing = function (e) {

			if (e.row && e.row.rowType === "data") {
		
				e.items = options.contextMenuItems;
		
			}
		
		};
		
		options.selectionChanged = function (rowInfo) {

			if (typeof options.selectedRows === "function") {
		
				options.selectedRows(rowInfo.selectedRowsData);
		
			}
		
		};


		options.onDblClick = function(){ console.log("dblclick"); };
		options.onClick = function(){ console.log("click"); };

		var delay = 300;
		var timer;

		options.onRowClick = function (e) {

			var component = e.component;
			var prevClickTime = component.lastClickTime;
			var prevClickedRowIndex = component.lastClickedRowIndex;

			component.lastClickTime = new Date();
			component.lastClickedRowIndex = e.rowIndex;
			
			if ((prevClickTime instanceof Date) &&
					(typeof prevClickedRowIndex === typeof e.rowIndex) &&
					(component.lastClickTime - prevClickTime < delay) &&
					(component.lastClickedRowIndex === prevClickedRowIndex)) {

				clearTimeout(timer);

				options.onDblClick(e);


			}
			else {

				timer = setTimeout(function(){

					options.onClick(e);

				}, delay);

			}

		};

		return options;

	}

	[c.name/].util = [c.name/].util || {};
	[c.name/].util.createDxGridOptions = createDxGridOptions;

}(jQuery, DevExpress, ko, (window.[c.name/] = window.[c.name/] || {}) ));
[/file]
[/template]

[template public dxGridOptions (e : Entity, c : Client)]
var [e.dxGridOptionsName()/] = [c.name/].util.createDxGridOptions();
[e.dxGridOptionsName()/].columns = ['[]'/];
[for (p : Property | e.properties->select(type.toString()<>'GUID'))]
[e.dxGridOptionsName()/].columns.push({
	dataField: "[p.name/]",
	[if (p.isNumber())]
	dataType: "number"
	[elseif (p.isDate())]
	dataType: "date"
	[elseif (p.isBoolean())]
	dataType: "boolean"
	[else]
	dataType: "string"
	[/if]
});
[/for]
[for (r : Relation | e.relations->select(isOneToOne() or isManyToOne()))]
[e.dxGridOptionsName()/].columns.push({
	dataField: "[r.name/]",
	lookup: {
		dataSource: [c.name/].stores.[r.getTarget().name/],
		displayExpr: function (data) {
			var display = ['[]'/];
			[for (p : Property | r.getTarget().getNonPrimaryProperties()->select(not isGUID() and not isDate() and not isNumber()))]
			display.push(data.[p.name/]);
			[/for]
			return display.join(", ");
		}
	},
	customizeText: function (cellInfo) {
		
		if (cellInfo.value) {
		
			var display = ['[]'/];
			[for (p : Property | r.getTarget().getNonPrimaryProperties()->select(not isGUID() and not isDate() and not isNumber()))]
			display.push(cellInfo.value.[p.name/]);
			[/for]
			return display.join(", ");
		
		}

	},
	_lala: function (data) {

		if (data && data.[r.name/]) {

			var display = ['[]'/];
			[for (p : Property | r.getTarget().getPrimaryProperties())]
			display.push(data.[r.name/].[p.name/]);
			[/for]
			return display.join(",");

		}
	
	},
    calculateFilterExpression: function (filterValue, selectedFilterOperation) {
		
		var display = ['[]'/];
		[for (p : Property | r.getTarget().getPrimaryProperties())]
		display.push(filterValue.[p.name/]);
		[/for]
		filterValue = display.join(",");
		
        return ['['/]this._lala, selectedFilterOperation || '=', filterValue[']'/];
    }
});
[/for]
[/template]

[template public dxGridOptions (v : EntityForm)]
[v.entity.dxGridOptions(v.getClient())/]
[for (ev : EntityForm | v.selectRelatedEntityViews())]
[if (ev.isUpdateView())]
[v.entity.dxGridOptionsName()/].onDblClick = function (e) {
	
	var rule = { view: "[ev.name/]" };
	[for (p : Property | ev.entity.getPrimaryProperties())]
	rule['["'+p.name+'"]'/] = e.data['["'+p.name+'"]'/];
	[/for]

	[ev.getClientName()/].app.navigate(rule);

	e.handled = true;

};
[/if]
[/for]
[/template]