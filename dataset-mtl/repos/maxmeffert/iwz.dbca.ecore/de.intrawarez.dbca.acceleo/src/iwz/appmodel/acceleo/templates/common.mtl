[comment encoding = UTF-8 /]
[module common('http://iwz/appmodel')]


[comment 
==================================================================
Common Database
================================================================== 
/]

[query public selectElements(db : Database) : Collection(DatabaseElement)
	= db.elements
/]

[query public selectAbstractEntities(db : Database) : Collection(AbstractEntity)
	= db.selectElements()->selectByKind(AbstractEntity)
/]

[query public selectEntities(db : Database) : Collection(Entity)
	= db.selectElements()->selectByKind(Entity)
/]

[query public selectRelations(db : Database) : Collection(Relation)
	= db.selectEntities().relations
/]

[query public selectOperations(db : Database) : Collection(Operation)
	= db.selectElements()->selectByKind(Operation)
/]

[query public selectFunctions(db : Database) : Collection(Function)
	= db.selectElements()->selectByKind(Function)
/]

[query public selectEvents(db : Database) : Collection(Event)
	= db.selectElements()->selectByKind(Event)
/]

[comment 
==================================================================
Common Database.Relations
================================================================== 
/]

[query public selectRelationsWhereSource(db : Database, e : Entity) : Collection(Relation)
	= db.selectRelations()->select(r : Relation | r.getSource()=e)
/]

[query public selectRelationsWhereTarget(db : Database, e : Entity) : Collection(Relation)
	= db.selectRelations()->select(r : Relation | r.getTarget()=e)
/]

[query public selectOneToOneRelations(db : Database) : Collection(Relation)
	= db.selectRelations()->select(r : Relation | r.isOneToOne())
/]

[query public selectOneToManyRelations(db : Database) : Collection(Relation)
	= db.selectRelations()->select(r : Relation | r.isOneToMany())
/]

[query public selectManyToOneRelations(db : Database) : Collection(Relation)
	= db.selectRelations()->select(r : Relation | r.isManyToOne())
/]

[query public selectManyToManyRelations(db : Database) : Collection(Relation)
	= db.selectRelations()->select(r : Relation | r.isManyToMany())
/]

[comment 
==================================================================
Common DatabaseElement
================================================================== 
/]

[query public selectDatabase(e : DatabaseElement) : Database
	= e.ancestors(Database)->first()
/]

[comment 
==================================================================
Common AbstractEntity
================================================================== 
/]

[query public selectSuperProperties(ae : AbstractEntity) : Collection(Property)
	= if (ae.super<>null)
		then ae.selectSuperProperties()->addAll(ae.properties)
		else ae.properties
		endif
/]

[comment 
==================================================================
Common Entity
================================================================== 
/]



[query public getProperties(e : Entity) : Collection(Property)
	= e.properties
/]

[query public getPrimaryProperties(e : Entity) : Collection(Property)
	= e.getProperties()->select(isPrimary)
/]

[query public getNonPrimaryProperties(e : Entity) : Collection(Property)
	= e.properties->select(not isPrimary)
/]

[query public isSourceOf(e : Entity, r : Relation) : Boolean
	= e=r.getSource()
/]

[query public isTargetOf(e : Entity, r : Relation) : Boolean
	= e=r.getTarget()
/]

[query public getRelations(e : Entity) : Collection(Relation)
	= e.relations
/]

[query public getAllRelations(e : Entity) : Collection(Relation)
	= e.siblings(Entity).relations->select(r : Relation | e.isSourceOf(r) or e.isTargetOf(r))
/]

[query public getAllSourceRelations(e : Entity) : Collection(Relation)
	= e.siblings(Entity).relations->select(r : Relation | e.isSourceOf(r))
/]

[query public getAllTargetRelations(e : Entity) : Collection(Relation)
	= e.siblings(Entity).relations->select(r : Relation | e.isTargetOf(r))
/]

[query public getOneToOneRelations(e : Entity) : Collection(Relation)
	= e.getRelations()->select(r : Relation | r.isOneToOne())
/]

[query public getOneToManyRelations(e : Entity) : Collection(Relation)
	= e.getRelations()->select(r : Relation | r.isOneToMany())
/]

[query public getManyToOneRelations(e : Entity) : Collection(Relation)
	= e.getRelations()->select(r : Relation | r.isManyToOne())
/]

[query public getManyToManyRelations(e : Entity) : Collection(Relation)
	= e.getRelations()->select(r : Relation | r.isManyToMany())
/]

[comment 
==================================================================
Common Relation
================================================================== 
/]

[query public getSource(r : Relation) : Entity
	= r.ancestors(Entity)->first()
/]

[query public getTarget(r : Relation) : Entity
	= r.target
/]

[query public hasProperties(r : Relation) : Boolean
	= r.properties->notEmpty()
/]

[query public isOneToOne(r : Relation) : Boolean
	= r.type.toString()='OneToOne'
/]

[query public isOneToMany(r : Relation) : Boolean
	= r.type.toString()='OneToMany'
/]

[query public isManyToOne(r : Relation) : Boolean
	= r.type.toString()='ManyToOne'
/]

[query public isManyToMany(r : Relation) : Boolean
	= r.type.toString()='ManyToMany'
/]

[query public getProperties(r : Relation) : Collection(Property)
	= r.getSource().getPrimaryProperties()
		->addAll(r.getTarget().getPrimaryProperties())
		->addAll(r.properties)
/]

[query public getPrimaryProperties(r : Relation) : Collection(Property)
	= if r.isOneToOne()
		then r.getSource().getPrimaryProperties()
	  else if r.isOneToMany() 
			then r.getTarget().getPrimaryProperties()
			else r.getSource().getPrimaryProperties()->addAll(r.getTarget().getPrimaryProperties())
			endif
	  endif
/]

[query public getNonPrimaryProperties(r : Relation) : Collection(Property)
	= if r.isOneToOne()
		then r.getSource().getNonPrimaryProperties()
	  else if r.isOneToMany() 
			then r.getTarget().getNonPrimaryProperties()
			else r.getSource().getNonPrimaryProperties()->addAll(r.getTarget().getNonPrimaryProperties())
			endif
	  endif
/]

[comment 
==================================================================
Common Property
================================================================== 
/]

[query public isBoolean(p : Property) : Boolean
	= p.type.toString()='Bool'
/]

[query public isInteger(p : Property) : Boolean
	= p.type.toString()='Integer'
/]

[query public isNumber(p : Property) : Boolean
	= p.isInteger()
/]

[query public isDate(p : Property) : Boolean
	= p.type.toString()='Date'
/]

[query public isString(p : Property) : Boolean
	= p.type.toString()='String'
/]

[query public isGUID(p : Property) : Boolean
	= p.type.toString()='GUID'
/]








