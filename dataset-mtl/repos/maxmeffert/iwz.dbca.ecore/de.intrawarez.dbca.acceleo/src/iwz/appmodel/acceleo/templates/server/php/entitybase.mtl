[comment encoding = UTF-8 /]
[module entitybase('http://iwz/appmodel')]

[import iwz::appmodel::acceleo::templates::common/]
[import iwz::appmodel::acceleo::templates::database::names/]
[import iwz::appmodel::acceleo::templates::database::accessors/]
[import iwz::appmodel::acceleo::templates::server::php::names/]

[template private phpGetterCall(p : Property)]
[p.ancestors(Entity)->first().phpVarName()/]->[p.phpGetterName()/]()
[/template]

[template private phpGetterCall(p : Property, var : String)]
[var/]->[p.phpGetterName()/]()
[/template]

[**
 * asdf
 * 
 * 
*/]
[template public generateEntitybase(db : Database)]
[file ('/server/php/src/Entitybase.php', false, 'UTF-8')]
<?php

/**
 * Maps Database array results to Entity objects
 */
class Entitybase {
	
	static private $EB;

	final static public function create () {

		if (is_null(self::$EB)) {

			self::$EB = new Entitybase(DatabaseFactory::create());

		}

		return self::$EB;

	}

	private $db;
	
	private function __construct (Database $db) {

		$this->db = $db;

	}

	[for (e : Entity | db.selectEntities())]
	
	//======================================================================
	// Entity [e.name/]
	//======================================================================

	final private function create[e.phpName()/] (array $records, $depth=0) {
	
		$depth = intval($depth);

		$results = new \ArrayIterator();

		foreach ($records as $record) {
		
			$record = (object) $record;

			$entity = new [e.phpNamespaceName()/]();
			[for (p : Property | e.properties)]
			$entity->[p.phpSetterName()/]($record->[p.name/]);
			[/for]
			
			[if (e.relations->notEmpty())]
			if ($depth != 0) {
				
				[for (r : Relation | e.relations)]
				$entities = $this->create[r.getTarget().phpName()/](
					$this->db->[r.accessorNameSelectAllTargets()/]([r.accessorParametersSelectAllTargets().phpGetterCall('$entity')->sep(',')/]),
					$depth-1
					);
				[if (r.isOneToOne())]
				if (0 < count($entities)) {
					$entity->[r.phpSetterName()/]($entities['[0]'/]);
				}
				[elseif (r.isOneToMany() or r.isManyToMany())]
				$entity->[r.phpSetterName()/]($entities);
				[/if]
				[/for]

			}
			[/if]

			$results->append($entity);
		
		}

		return $results;

	}

	final public function select[e.phpName()/] ([e.phpNamespaceName()/] [e.phpVarName()/]=null, $depth=0) {

		if (is_null([e.phpVarName()/])) {
			
			$records = $this->db->[e.accessorNameSelectAll()/]();

		}
		else {

			$records = $this->db->[e.accessorNameSelectOne()/]([e.accessorParametersSelectOne().phpGetterCall(e.phpVarName())->sep(',')/]);

		}

		return $this->create[e.phpName()/]($records, $depth);

	}

	final public function insert[e.phpName()/] ([e.phpNamespaceName()/] [e.phpVarName()/]) {

		$entities = $this->create[e.phpName()/]($this->db->[e.accessorNameInsert()/]([e.accessorParametersInsert().phpGetterCall(e.phpVarName())->sep(',')/]));
		
		if (0 < count($entities)) {

			$entity = $entities['[0]'/];

			[for (p : Property | e.getPrimaryProperties())]
			[e.phpVarName()/]->[p.phpSetterName()/]($entity->[p.phpGetterName()/]());
			[/for]
			
			$this->update[e.phpName()/]([e.phpVarName()/]);

		}

		return $entity;
	
	}

	final public function update[e.phpName()/] ([e.phpNamespaceName()/] [e.phpVarName()/]) {

		$this->db->[e.accessorNameUpdate()/]([e.accessorParametersUpdate().phpGetterCall(e.phpVarName())->sep(',')/]);
		[for (r : Relation | e.relations)]

		if (!is_null([e.phpVarName()/]->[r.phpGetterName()/]())) {

			[if (r.isOneToOne())]
			[r.getTarget().phpVarName()/] = [e.phpVarName()/]->[r.phpGetterName()/]();
			$this->db->[r.accessorNameSave()/]([r.accessorParametersSave().phpGetterCall()->sep(',')/]);
			[elseif (r.isOneToMany() or r.isManyToMany())]
			foreach ([e.phpVarName()/]->[r.phpGetterName()/]() as [r.getTarget().phpVarName()/]) {
				
				$this->db->[r.accessorNameSave()/]([r.accessorParametersSave().phpGetterCall()->sep(',')/]);
			
			}
			[/if]
		
		}
		[/for]

	}

	final public function delete[e.phpName()/] ([e.phpNamespaceName()/] [e.phpVarName()/]) {

		$this->db->[e.accessorNameDelete()/]([e.accessorParametersDelete().phpGetterCall(e.phpVarName())->sep(',')/]);

	}
	[/for]

}

?>
[/file]
[/template]
