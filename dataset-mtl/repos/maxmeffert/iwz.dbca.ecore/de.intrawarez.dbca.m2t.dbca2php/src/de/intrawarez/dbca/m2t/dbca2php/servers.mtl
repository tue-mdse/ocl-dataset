[comment encoding = UTF-8 /]
[module servers('http://www.intrawarez.de/dbca')]

[import de::intrawarez::dbca::m2t::common::database/]
[import de::intrawarez::dbca::m2t::common::entities/]
[import de::intrawarez::dbca::m2t::common::attributes/]
[import de::intrawarez::dbca::m2t::common::relationships/]
[import de::intrawarez::dbca::m2t::common::accessors/]

[import de::intrawarez::dbca::m2t::dbca2php::names/]

[template public generateServlet(app : Application)]
[file ('/server/php/src/ServletException.php', false, 'UTF-8')]
<?php

class ServletException extends \Exception {}

?>
[/file]
[file ('/server/php/src/Servlet.php', false, 'UTF-8')]
<?php

abstract class Servlet {

	private $content = "";
	private $contentType = "text/json";
	private $statusCode = "200";
	
	final public function getContent () {
		return $this->content;
	}
	final public function setContent ($content) {
		$this->content = $content;
	}
	
	final public function getContentType () {
		return $this->contentType;
	}
	final public function setContentType ($condentType) {
		$this->contentType = $condentType;
	}
	
	final public function getStatusCode () {
		return $this->statusCode;
	}
	final public function setStatusCode ($statusCode) {
		$this->statusCode = $statusCode;
	}


	public function onREQUEST (array $route, array $data) {

 	}

 	public function onOPTIONS (array $route, array $data) {
		
		throw new \ServletException("OPTIONS is not supported!");

 	}

 	public function onGET (array $route, array $data) {
		
		throw new \ServletException("GET is not supported!");
    
 	}

 	public function onPOST (array $route, array $data) {
		
		throw new \ServletException("POST is not supported!");

 	}

 	public function onPUT (array $route, array $data) {
		
		throw new \ServletException("PUT is not supported!");

 	}

  	public function onDELETE (array $route, array $data) {
		
		throw new \ServletException("DELETE is not supported!");

	}

}

?>
[/file]
[/template]

[template public generateServlet(es : EntityService)]
[file ('/server/php/src/servlets/'+es.phpName()+'.php', false, 'UTF-8')]
<?php

namespace servlets {

	class [es.phpName()/] extends \Servlet {
		
		public function onGET (array $route, array $data) {
	
			[es.entity.phpEntityManagerVarName()/] = [es.entity.phpEntityManagerNamespaceName()/]::create();
			
			if ([for (p : Attribute | es.entity.selectPrimaryProperties()) separator (' && ')]!empty($route['["'+p.phpName()+'"]'/])[/for]) {
				
				[es.entity.phpVarName()/] = [es.entity.phpNamespaceName()/]::fromArray($route);
				$result = [es.entity.phpEntityManagerVarName()/]->selectOne([es.entity.phpVarName()/],true);

				if (0 < count($result)) $result = $result['[0]'/];

			}
			else {

				$result = [es.entity.phpEntityManagerVarName()/]->selectAll(1);
	
			}			

			$this->setContentType("text/json");
			$this->setContent([es.entity.phpNamespaceName()/]::toJson($result));
	 	}
		
	 	public function onPOST (array $route, array $data) {
			
			[es.entity.phpEntityManagerVarName()/] = [es.entity.phpEntityManagerNamespaceName()/]::create();
			[es.entity.phpVarName()/] = [es.entity.phpNamespaceName()/]::fromArray($data);
			
			$result = [es.entity.phpEntityManagerVarName()/]->insertOne([es.entity.phpVarName()/]);

			$this->setContentType("text/json");
			$this->setContent([es.entity.phpNamespaceName()/]::toJson($result));

	 	}
	
	 	public function onPUT (array $route, array $data) {
			
			[es.entity.phpVarName()/] = [es.entity.phpNamespaceName()/]::fromArray($data);
			//var_dump($data);
			//var_dump([es.entity.phpVarName()/]);
			//die();
			[es.entity.phpEntityManagerVarName()/] = [es.entity.phpEntityManagerNamespaceName()/]::create();
			[es.entity.phpEntityManagerVarName()/]->updateOne([es.entity.phpVarName()/]);

			$this->setContentType("text/json");
			$this->setContent(json_encode(array("success" => true)));
			
	 	}
	
	  	public function onDELETE (array $route, array $data) {
			
			[es.entity.phpVarName()/] = [es.entity.phpNamespaceName()/]::fromArray($data);
			[es.entity.phpEntityManagerVarName()/] = [es.entity.phpEntityManagerNamespaceName()/]::create();
			[es.entity.phpEntityManagerVarName()/]->deleteOne([es.entity.phpVarName()/]);

			$this->setContentType("text/json");
			$this->setContent(json_encode(array("success" => true)));
	
		}
	
	}

}

?>
[/file]
[/template]

[template public generateEntityRelationServlet(es : EntityService)]
[file ('/server/php/src/servlets/'+es.phpName()+'.php', false, 'UTF-8')]
<?php

namespace servlets {

	class [es.phpName()/] extends \Servlet {
		
	 	public function onGET (array $route, array $data) {
		
		
	 	}
		
	 	public function onPOST (array $route, array $data) {
			
			

	 	}
	
	 	public function onPUT (array $route, array $data) {
			
			
			
	 	}
	
	  	public function onDELETE (array $route, array $data) {
			
			
	
		}
	
	}

}

?>
[/file]
[/template]

[template public generateServer(app : Application)]
[file ('/server/php/src/Server.php', false, 'UTF-8')]
<?php

class Server {

  const METHOD_GET = "GET";
  const METHOD_POST = "POST";
  const METHOD_PUT = "PUT";
  const METHOD_DELETE = "DELETE";
  const METHOD_OPTIONS = "OPTIONS";

  private $matches;

  private function match ($pattern, $subject) {

    $this->matches = null;

    return preg_match_all("@$pattern@", $subject, $this->matches) == 1;

  }

  private function getMatches () {

    $matches = array();

    if (is_array($this->matches)) {

      foreach ($this->matches as $key => $match) {

          if (!is_numeric($key) && count($match) > 0) {

            $matches['['/]$key[']'/] = $match['['/]0[']'/];

          }

      }

    }

    return $matches;

  }

  private function getMethod () {

    return $_SERVER['['/]"REQUEST_METHOD"[']'/];

  }

  private function getPathInfo () {

    return isset($_SERVER['['/]"PATH_INFO"[']'/]) ? $_SERVER['['/]"PATH_INFO"[']'/] : "/";

  }

  private function getRequestData () {

    switch($this->getMethod()) {

      case self::METHOD_GET:
        return $_GET;

      case self::METHOD_POST:
        return $_POST;

      default:
        $data = array();
        parse_str(file_get_contents("php://input"), $data);
        return $data;

    }

  }

  private function executeServlet (Servlet $servlet) {

    switch($this->getMethod()) {

      case self::METHOD_GET:
        $servlet->onGET($this->getMatches(), $this->getRequestData());
        break;

      case self::METHOD_POST:
        $servlet->onPOST($this->getMatches(), $this->getRequestData());
        break;

      case self::METHOD_PUT:
        $servlet->onPUT($this->getMatches(), $this->getRequestData());
        break;

      case self::METHOD_DELETE:
        $servlet->onDELETE($this->getMatches(), $this->getRequestData());
        break;

      case self::METHOD_OPTIONS:
        $servlet->onOPTIONS($this->getMatches(), $this->getRequestData());
        break;

      default:
        $servlet->onREQUEST($this->getMatches(), $this->getRequestData());
        break;

    }

  }

  public function serve ($pattern, Servlet $servlet) {

    $subject = $this->getPathInfo();

    if ($this->match($pattern, $subject)) {

      try {

        //ob_start();
        $this->executeServlet($servlet);
        //ob_get_clean();

        header("Content-Type:{$servlet->getContentType()}");
        http_response_code($servlet->getStatusCode());

        ob_start();
        echo $servlet->getContent();
        ob_end_flush();

        die();

      }
      catch (\Exception $e) {
		
		http_response_code(500);
		die($e->getMessage());

      }

    }

  }

}

?>
[/file]
[/template]
