[comment encoding = UTF-8 /]
[module uml2doctrine('http://www.eclipse.org/uml2/4.0.0/UML')]




[template public generate(c : Class) post (trim())]


	[comment @main/]

	
	[file (c.name.concat('.php'), false, 'UTF-8')]
[documentDeclaration(c)/]

[entityUse(c)/]

[entityDocumentation(c)/]
[entityDeclaration(c)/]
	[entityProperties(c)/]

	[entityAssociations(c)/]

	[entityConstruct(c)/]

	[entityPropertiesGetSet(c)/]

	[entityAssociationsAddRemoveGet(c)/]
}
	[/file]

	
	[file (c.name.concat('Repository.php'), false, 'UTF-8')]
[documentDeclaration(c)/]

use Doctrine\ORM\EntityRepository;

/**
 * [c.name.concat('Repository')/]
 */
class [c.name.concat('Repository')/] extends EntityRepository
{
}
	[/file]

	
[/template]




[template public documentDeclaration(c : Class) post(trim())]
<?php

namespace [entityNamespace(c)/];
[/template]




[template public entityNamespace(c : Class) post (trim())]
[c.getNamespace().name/]\Entity
[/template]




[template public entityUse(c : Class) post (trim()) { used : Boolean = false; }]
use Doctrine\ORM\Mapping as ORM;
[/template]




[template public entityDocumentation(c : Class) post (trim())]
/**
 * [c.name/]
 *
 * @ORM\Table()
 * @ORM\Entity(repositoryClass="[entityRepositoryFQN(c)/]")
 */
[/template]




[template public entityFQN(c : Class) post(trim())]
[entityNamespace(c)/]\[c.name/]
[/template]




[template public entityRepositoryFQN(c : Class) post (trim())]
[entityFQN(c)/]Repository
[/template]




[template public entityDeclaration(c : Class) post (trim())]
[entityAbstract(c)/]class [c.name/][entityExtends(c)/]
{
[/template]




[template public entityAbstract(c : Class)]
[if (c.isAbstract)]abstract [/if]
[/template]




[template public entityExtends(c : Class)]
[if (not c.superClass->isEmpty())] extends [for (sc : Class | c.superClass) separator (', ')][entityFQN(sc)/][/for][/if]
[/template]




[template public entityProperties(c : Class) post(trim())]
[for (p: Property | c.attribute) separator ('\n')]
[let typePHP : String = p.type.name.replaceAll('Integer', 'integer').replaceAll('String', 'string').replaceAll('Boolean', 'boolean')]
[let typeDoc : String = typePHP.replaceAll('\\\\DateTime', 'datetime')]
/*
 * @var [typePHP/]
 *
 * @ORM\Column(name="[p.name/]", type="[typeDoc/]")
[if (p.name.equalsIgnoreCase('id'))]
 * @ORM\Id
 * @ORM\GeneratedValue(strategy="AUTO")
[/if]
 */
[p.visibility/] $[p.name/];
[/let]
[/let]
[/for]
[/template]




[template public entityAssociations(c : Class) post(trim())]
[for (p : Property | c.getAssociations().navigableOwnedEnd->select((type <> c) or (type = c and opposite.type = c))) separator ('\n')]
	[if (p.opposite.upper.toString().equalsIgnoreCase('1'))]
		[if (p.upper.toString().equalsIgnoreCase('-1'))]
[oneToMany(p)/]
		[else]
[oneToOne(p)/]
		[/if]
	[else]
		[if (p.upper.toString().equalsIgnoreCase('1'))]
[manyToOne(p)/]
		[else]
[manyToMany(p)/]
		[/if]
	[/if]
[/for]
[/template]




[template public oneToMany(p : Property) post(trim())]
/*
 * @var Doctrine\Common\Collections\ArrayCollection
 *
 * @ORM\OneToMany(targetEntity="[entityFQN(p.type.oclAsType(Class))/]", mappedBy="[p.opposite.name/]")
 */
[p.visibility/] $[p.name/];
[/template]




[template public oneToOne(p : Property) post(trim()) {
	isOwningSide : Boolean = p.eAnnotations.details->select(value.toString().contains('association:owning'))->notEmpty();
	isNullable : Boolean = p.lower.toString().equalsIgnoreCase('0');
}]
/*
 * @var [entityFQN(p.type.oclAsType(Class))/]
 *
 * @ORM\OneToOne(targetEntity="[entityFQN(p.type.oclAsType(Class))/]", [if(isOwningSide)]inversed[else]mapped[/if]By="[p.opposite.name/]")
[if (isNullable)]
 * @ORM\JoinColumn(nullable=true)
[/if]
 */
[p.visibility/] $[p.name/];
[/template]




[template public manyToOne(p : Property) post(trim())]
/*
 * @var [entityFQN(p.type.oclAsType(Class))/]
 *
 * @ORM\ManyToOne(targetEntity="[entityFQN(p.type.oclAsType(Class))/]", inversedBy="[p.opposite.name/]")
 */
[p.visibility/] $[p.name/];
[/template]




[template public manyToMany(p : Property) post(trim()) {
	isOwningSide : Boolean = p.eAnnotations.details->select(value.toString().contains('association:owning'))->notEmpty();
}]
/*
 * @var Doctrine\Common\Collections\ArrayCollection
 *
 * @ORM\ManyToMany(targetEntity="[entityFQN(p.type.oclAsType(Class))/]", [if(isOwningSide)]inversed[else]mapped[/if]By="[p.opposite.name/]")
 */
[p.visibility/] $[p.name/];
[/template]




[template public entityConstruct(c : Class) post(trim())]
/*
 * Constructor
 */
public function __construct()
{
[for (p : Property | c.getAssociations().navigableOwnedEnd->select((type <> c) or (type = c and opposite.type = c)))]
	[if (p.opposite.upper.toString().equalsIgnoreCase('1'))]
		[if (p.upper.toString().equalsIgnoreCase('-1'))]
	$this->[p.name/] = new Doctrine\Common\Collections\ArrayCollection();
		[/if]
	[else]
		[if (not p.upper.toString().equalsIgnoreCase('1'))]
	$this->[p.name/] = new Doctrine\Common\Collections\ArrayCollection();
		[/if]
	[/if]
[/for]
}
[/template]




[template public entityPropertiesGetSet(c : Class) post (trim())]
[for (p: Property | c.attribute) separator('\n')]
[getterProperty(p, false)/]
[if (not p.name.equalsIgnoreCase('id'))]

[setterProperty(p, false, false)/]
[/if]
[/for]
[/template]




[template public getterProperty(p : Property, isAssociation : Boolean) post (trim())]
[let typePHP : String = p.type.name.replaceAll('Integer', 'integer').replaceAll('String', 'string').replaceAll('Boolean', 'boolean')]
/*
 * Gets [p.name/]
 * 
 * @return [if (isAssociation)][if (p.isMultivalued())]Doctrine\Common\Collections\ArrayCollection[else][entityFQN(p.type.oclAsType(Class))/][/if][else][typePHP/][/if]
 */
public function get[p.name.toUpperFirst()/]() 
{
	return $this->[p.name/];
}
[/let]
[/template]




[template public setterProperty(p : Property, isAssociation : Boolean, oneTo : Boolean) post (trim())]
[let typePHP : String = p.type.name.replaceAll('Integer', 'integer').replaceAll('String', 'string').replaceAll('Boolean', 'boolean')]
[let typePHPDec : Set(String) = Set{'integer', 'string', 'boolean'}]
/*
 * Sets [p.name/]
 * 
 * @param [if (isAssociation)][entityFQN(p.type.oclAsType(Class))/][else][typePHP/][/if] $[p.name/]
 * 
 * @return $this
 */
public function set[p.name.toUpperFirst()/]([if (isAssociation)][entityFQN(p.type.oclAsType(Class))/] [elseif (typePHPDec->count(typePHP).toString().equalsIgnoreCase('0'))][typePHP/] [/if]$[p.name/]) 
{
	[if (isAssociation)]
	if($this->get[p.name.toUpperFirst()/]() !== $[p.name/])
	{
		$this->[p.name/] = $[p.name/];
		$[p.name/]->[if (oneTo)]set[p.opposite.name.toUpperFirst()/][else]add[p.opposite.name.substring(1, p.opposite.name.size() - 1).toUpperFirst()/][/if]($this);
	}
	[else]
	$this->[p.name/] = $[p.name/];
	[/if]

	return $this;
}
[/let]
[/let]
[/template]




[template public entityAssociationsAddRemoveGet(c : Class) post (trim())]
[for (p : Property | c.getAssociations().navigableOwnedEnd->select((type <> c) or (type = c and opposite.type = c))) separator ('\n')]
	[if (p.opposite.upper.toString().equalsIgnoreCase('1'))]
		[if (p.upper.toString().equalsIgnoreCase('-1'))]
[getterProperty(p, true)/]

[entityAddAssociation(p, true)/]

[entityRemoveAssociation(p, true)/]
		[else]
[getterProperty(p, true)/]

[setterProperty(p, true, true)/]
		[/if]
	[else]
		[if (p.upper.toString().equalsIgnoreCase('1'))]
[getterProperty(p, true)/]

[setterProperty(p, true, false)/]
		[else]
[getterProperty(p, true)/]

[entityAddAssociation(p, false)/]

[entityRemoveAssociation(p, false)/]
		[/if]
	[/if]
[/for]
[/template]




[template public entityAddAssociation(p : Property, oneTo : Boolean) post (trim()) {
	param : String = p.name.substring(1, p.name.size() - 1);
	typeFQN : String = entityFQN(p.type.oclAsType(Class));
}]
/*
 * Adds [param/]
 *
 * @param [typeFQN/] $[param/]
 *
 * @return boolean
 */
public function add[param.toUpperFirst()/]([typeFQN/] $[param/])
{
	if(!$this->get[p.name.toUpperFirst()/]()->contains($[param/]))
	{
		$this->[p.name/]['['/][']'/] = $[param/];
		$[param/]->[if (oneTo)]set[p.opposite.name.toUpperFirst()/][else]add[p.opposite.name.substring(1, p.opposite.name.size() - 1).toUpperFirst()/][/if]($this);

		return true;
	}

	return false;
}
[/template]




[template public entityRemoveAssociation(p : Property, oneTo : Boolean) post (trim()) {
	param : String = p.name.substring(1, p.name.size() - 1);
	typeFQN : String = entityFQN(p.type.oclAsType(Class));
}]
/*
 * Removes [param/]
 *
 * @param [typeFQN/] $[param/]
 *
 * @return boolean
 */
public function remove[param.toUpperFirst()/]([typeFQN/] $[param/])
{
	if($this->get[p.name.toUpperFirst()/]()->contains($[param/]))
	{
		$this->[p.name/]->removeElement($[param/]);
		[if (not oneTo)]
		$[param/]->remove[p.opposite.name.substring(1, p.opposite.name.size() - 1).toUpperFirst()/]($this);
		[/if]

		return true;
	}

	return false;
}
[/template]