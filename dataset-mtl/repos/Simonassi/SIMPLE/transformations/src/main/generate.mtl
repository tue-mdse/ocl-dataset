[comment encoding = UTF-8 /]
[module generate('http://www.example.org/ctx', 'http://www.example.org/sml')]

[import org::eclipse::acceleo::module::sample::main::resources /]

[ comment

 	##########################################
	#### Funções para gerar as regras EPL ####
 	##########################################

/]

[template public epl_ativacao(s: SituationType) post (replaceAll('\n',' '))]
select
	[epl_ativacao_select(s)/]
from
	[epl_ativacao_from(s)/]

where
	[epl_ativacao_where(s)/]
[/template]

[template public epl_desativacao(s: SituationType) post (replaceAll('\n',' '))]
select
	[epl_desativacao_select(s)/]
from
	[epl_desativacao_from(s)/]

[epl_desativacao_where(s)/]
[/template]

[comment 

#################################################
################## ATIVAÇÃO #####################
#################################################

/]


[ comment
 	
	#########################################################################################
	#### Funções utilizadas para a transformação da cláusula SELECT da regra de ATIVAÇÃO ####
	#########################################################################################

/]

[template public epl_ativacao_select(s: SituationType) ]
[let participants : OrderedSet(Participant) = s.elements->filter(Participant) ]
[select_print_all_participant_names(participants)/]
[/let]
[/template]


[template public select_print_all_participant_names (participants: Set(Participant)) ]
[for (p: Participant | participants) separator (', ')][select_fully_qualified_name (p) /][/for][select_key (participants)/]
[/template]


[template public select_fully_qualified_name (p: Participant) post (trim())]
[ comment verificar se possui algum link (ou seja, um Relator) ==> imprimir o nome do Relator antes do Participant  /]
[if (p.eContainer(SituationType).elements->filter(Link)->select(entity.oclAsType(EntityParticipant)->size() > 0 and entity = p)->first().oclIsUndefined() = false )]
[let link: Link = p.eContainer(SituationType).elements->filter(Link)->select(entity.oclAsType(EntityParticipant)->size() > 0 and entity = p)->first()]
[fully_qualified_name(link.relator) /].[link.isOfType.name /] as [binding_name(p)/]
[/let]
[ comment verificar se é 'target' de algum ComparativeRelation onde o 'source' é um SituationParameterReference ==> imprimir o nome do SituationParticipant associado ao SituationParameterReference  /]
[elseif (p.targetRelation.source->filter(SituationParameterReference)->size() > 0) ]
[let param: SituationParameterReference =  p.targetRelation.source.oclAsType(SituationParameterReference)->first()]
[fully_qualified_name(param.situation) /].[param.parameter.name.toLowerFirst() /] as [binding_name(p)/]
[/let]
[else]
[fully_qualified_name(p) /]
[/if]
[/template]

[template public select_key (participants : Set(Participant)) post (trim())]
[let all_participants : OrderedSet(Participant) = participants->asOrderedSet() ]
[let spr_participants : OrderedSet(Participant) = participants.eContainer(SituationType).elements->filter(SituationParameterReference)->asOrderedSet()->spr_participants() ]
[let link_participants : OrderedSet(Participant) = participants.eContainer(SituationType).elements->filter(Link)->asOrderedSet()->link_participants() ]
[let all_relevant_participants : OrderedSet(Participant) = all_participants->osminus(spr_participants)->osminus(link_participants) ]
[for (p: Participant | all_relevant_participants)][if(p.oclIsTypeOf(ExistsSituation) = false)], [binding_name(p) /].key as key[i/][/if][/for]
[/let]
[/let]
[/let]
[/let]
[/template]

[ comment

 	#######################################################################################
	#### Funções utilizadas para a transformação da cláusula FROM da regra de ATIVAÇÃO ####
 	#######################################################################################

/]

[template public epl_ativacao_from(s: SituationType) post (trim()) ]
[let participants : OrderedSet(Participant) = s.elements->filter(Participant) ]
[from_print_all_participant_names(participants)/]
[/let]
[/template]


[template public from_print_all_participant_names (participants: Set(Participant)) post (trim().replace('or \\(', '\\(')) ]
[let all_participants : OrderedSet(Participant) = participants->asOrderedSet() ]
[let spr_participants : OrderedSet(Participant) = participants.eContainer(SituationType).elements->filter(SituationParameterReference)->asOrderedSet()->spr_participants() ]
[let link_participants : OrderedSet(Participant) = participants.eContainer(SituationType).elements->filter(Link)->asOrderedSet()->link_participants() ]
[let all_relevant_participants : OrderedSet(Participant) = all_participants->osminus(spr_participants)->osminus(link_participants) ]
[if(all_relevant_participants->size() = 1)]
[from_1_participant (all_relevant_participants->first()) /]
[else]
pattern['['/] every (
	[from_more_than_1_participant (all_relevant_participants->asSequence(), 1)/]
	)
[']'/]
[/if]
[/let]
[/let]
[/let]
[/let]
[/template]

[template public from_1_participant (p: Participant) post (trim())]
[print_participant_name(p) /][from_window_1_participant(p)/] as [binding_name(p) /] 
[/template]


[template public from_window_1_participant (p: Participant) post (trim())]
[if (p.oclIsTypeOf(ExistsSituation) = false) ]
	[if(p.reference->size() > 0)]
		[for (at : AttributeReference | p.reference) ]
			[if (at.attribute.name = 'final time') ]
				[for( s: ComparativeRelation | at.sourceRelation ) ]
					[if(s.relation.name = 'within the past')]
						.win:time([s.target.oclAsType(Literal).value/])						
					[/if]
				[/for]
			[/if]
		[/for]
	[/if]
[/if]
[/template]

[template public from_window_more_than_1_participant (p: Participant, participants: Sequence(Participant)) post (trim())]
[if(participants->indexOf(p) = participants->size()) ]
[if (p.oclIsTypeOf(ExistsSituation) = false) ]
	[if(p.reference->size() > 0)]
		[for (at : AttributeReference | p.reference) ]
			[if (at.attribute.name = 'start time' or at.attribute.name = 'final time') ]
				[for( s: ComparativeRelation | at.sourceRelation ) ]
					[if(s.relation.name = 'within the past')]
						where timer:within([s.target.oclAsType(Literal).value/])						
					[/if]
				[/for]
			[/if]
		[/for]
	[/if]
[/if]
[/if]
[/template]

[template public from_more_than_1_participant (participants: Sequence(Participant), k: Integer) post (trim())]
[if (participants->size() = k)]
or [from_more_than_1_participant_combination(participants)/]
[else]
	[for (p:Participant | participants)]
		[if( (i >= k) and (i < (participants->size()+1)) )] 
[from_more_than_1_participant(ExchangeCharacters(participants,k, i), k + 1)/]
		[/if]
	[/for]
[/if]
[/template]


[template public from_more_than_1_participant_combination (participants: Sequence(Participant)) post (trim())]
[for(pFixo:Participant | participants)separator (' -> ')]
	(
	 	every [from_combination_print_participant_fixo(pFixo)/]
	[if(participants->indexOf(pFixo) > 1)]
		[for(pVar:Participant | participants)]
			[if(participants->indexOf(pVar) < participants->indexOf(pFixo))]
		[from_combination_print_participant_var(pVar)/]
			[/if]
		[/for]
		)[from_window_more_than_1_participant(pFixo, participants)/]
	[/if]
[/for]
)
[/template]

[template public from_combination_print_participant_fixo(p: Participant)]
[binding_name(p)/] = [print_participant_name(p)/][if(p.oclIsTypeOf(EntityParticipant) = false)]([/if][from_print_participant_status(p, true)/][if(p.oclIsTypeOf(EntityParticipant) = false)])[/if]
[/template]

[template public from_combination_print_participant_var(p: Participant)]
[if(p.oclIsTypeOf(EntityParticipant) = false)]and not [print_participant_name(p)/]([from_print_participant_status(p, false)/][from_print_participant_id(p)/])[/if]
[/template]

[template public from_print_participant_status(p: Participant, type: Boolean)]
[if(p.oclIsKindOf(SituationParticipant))]activated = [participant_status(p.oclAsType(SituationParticipant), type)/][elseif(p.oclIsKindOf(RelatorParticipant))]activated = [type/][/if]
[/template]

[template public from_print_participant_id(p: Participant)]
[if(p.oclIsTypeOf(SituationParticipant))], id = [binding_name(p)/].id[elseif(p.oclIsTypeOf(RelatorParticipant))], key = [binding_name(p)/].key[/if]
[/template]

[template public participant_status(p: SituationParticipant, type: Boolean) post (trim())]
[if(type = false)][if(p.isPast = false)]false[else]true[/if]
[else][if(p.isPast = false)]true[else]false[/if][/if]
[/template]

[ comment
 
 	########################################################################################
	#### Funções utilizadas para a transformação da cláusula WHERE da regra de ATIVAÇÃO ####
 	########################################################################################

/]

[template public epl_ativacao_where(s: SituationType) post (trim()) ]
[let participants : OrderedSet(Participant) = s.elements->filter(Participant) ]
[where_print_all_participant_names(participants)/]
[activate_where_all_functions (s) /]
[/let]
[/template]

[template public where_print_all_participant_names (participants: Set(Participant)) post (trim().replaceAll('\n', ' and ')) ]
[let relators : OrderedSet(RelatorParticipant) = participants.eContainer(SituationType).elements->filter(RelatorParticipant)->select(nodeParameter.oclIsUndefined())->asOrderedSet()]
[if(relators->size() = 1)][binding_name(relators->first()) /].activated = true[/if]
[/let] 
[for(p : Participant | participants)][relations(p, true)/][/for]

[/template]

[template public relations(node : Node, activation_rule : Boolean)]
[if (node.oclIsTypeOf(EntityParticipant))][formal_relations(node.oclAsType(EntityParticipant), activation_rule)/][elseif (node.oclIsTypeOf(RelatorParticipant))][formal_relations(node.oclAsType(RelatorParticipant), activation_rule)/][elseif (node.oclIsKindOf(SituationParticipant))][situation_relations(node.oclAsType(SituationParticipant), activation_rule)/][/if ]
[/template]

[template public formal_relations(p : Participant, activation_rule : Boolean) post (trim())]
[for (rel : ComparativeRelation | p.sourceRelation)]
[comparative_relation(p, rel, rel.target, activation_rule) /]
[/for ]
[formal_relations_attributes(p, activation_rule)/]

[/template]

[template public formal_relations_attributes(p : Participant, activation_rule : Boolean) post (trim())]
[for (att : AttributeReference | p.reference)]
[for (rel : ComparativeRelation | sourceRelation)]
[comparative_relation(att,rel,rel.target, activation_rule)/]
[/for ]
[/for ]
[/template]

[template public comparative_relation(source: Node, rel : ComparativeRelation, target: Node, activation_rule : Boolean) post(trim())]
[if(activation_rule = true)]
[if(rel.relation.name = 'equals' or rel.relation.name = 'greater than' or rel.relation.name = 'less than')][if (rel.isNegated)]not ([/if ][comparative_relation_primitive(source, rel, target, activation_rule) /][if (rel.isNegated)])[/if ]
[else][if (rel.isNegated)]not ([/if ][comparative_relation_user(source, rel, target, activation_rule) /][if (rel.isNegated)])[/if ][/if]
[else]
[if(rel.relation.name = 'equals' or rel.relation.name = 'greater than' or rel.relation.name = 'less than')][deactivate_comparative_relation_primitive(source, rel, target) /]
[else][deactivate_comparative_relation_user(source, rel, target) /][/if]
[/if]
[/template]

[template public comparative_relation_primitive(source: Node, rel : ComparativeRelation, target: Node, activation_rule : Boolean) post(trim())]
[if(source.oclIsTypeOf(SituationParameterReference))][print_situation_type_name_relation(source.oclAsType(SituationParameterReference).situation, activation_rule)/][value(source.oclAsType(SituationParameterReference).situation)/].[source.oclAsType(SituationParameterReference).parameter.name.clean()/] [print_relation(rel.relation)/] [print_situation_type_name_relation(target, activation_rule)/][value(target)/]
[else][print_situation_type_name_relation(source, activation_rule)/][value(source)/] [print_relation(rel.relation)/][parameter_primitive(rel)/] [print_situation_type_name_relation(target, activation_rule)/][value(target)/][/if]
[/template]

[template public comparative_relation_user(source: Node, rel : ComparativeRelation, target: Node, activation_rule : Boolean) post(trim())]
[if(source.oclIsTypeOf(SituationParameterReference))][print_relation(rel.relation)/]([print_situation_type_name_relation(source.oclAsType(SituationParameterReference).situation, activation_rule)/][value(source.oclAsType(SituationParameterReference).situation)/].[source.oclAsType(SituationParameterReference).parameter.name.clean()/], [print_situation_type_name_relation(target, activation_rule)/][value(target)/] [parameter_user(rel)/])
[else][print_relation(rel.relation)/]([print_situation_type_name_relation(source, activation_rule)/][value(source)/], [print_situation_type_name_relation(target, activation_rule)/][value(target)/] [parameter_user(rel)/])[/if]
[/template]

[template public parameter_primitive(rel: ComparativeRelation) ]
[if (not parameter.oclIsUndefined() and not (parameter =''))] ['('/]'[parameter/]'[')'/][/if ]
[/template]

[template public parameter_user(rel: ComparativeRelation) ]
[if (not parameter.oclIsUndefined() and not (parameter =''))], '[parameter/]'[/if ]
[/template]

[template public situation_relations(s : SituationParticipant, activation_rule : Boolean)]
[let all_participants : OrderedSet(Participant) = s.eContainer(SituationType).elements->filter(Participant)->asOrderedSet() ]
[let spr_participants : OrderedSet(Participant) = s.eContainer(SituationType).elements->filter(SituationParameterReference)->asOrderedSet()->spr_participants() ]
[let link_participants : OrderedSet(Participant) = s.eContainer(SituationType).elements->filter(Link)->asOrderedSet()->link_participants() ]
[let all_relevant_participants : OrderedSet(Participant) = all_participants->osminus(spr_participants)->osminus(link_participants) ]
[if(all_relevant_participants->size() = 1)]
[fully_qualified_name(s)/].activated = [if(s.isPast)]false[else]true[/if]
[/if]
[/let]
[/let]
[/let]
[/let]
[for (p : SituationParameterReference | parameter)]
[for (r : ComparativeRelation | p.sourceRelation)]
[if(r.target.oclIsKindOf(SituationParameterReference) = true)] [ comment olhar apenas os SituationParameterRefence relacionado a outro SituationParameterReference/]
[comparative_relation(p,r,r.target, activation_rule)/]
[/if]
[/for ]
[/for ]
[/template]


[template public print_situation_type_name_relation(n: Node, activation_rule : Boolean) post(trim())]
[if(n.oclIsTypeOf(Literal) = false)]
[if(activation_rule = false)][print_situation_type_name(n)/].[/if]
[/if]
[/template]


[template public value(n : Node) post (trim())]
[if (n.oclIsTypeOf(EntityParticipant))]
[fully_qualified_name(n.oclAsType(EntityParticipant))/]
[elseif (n.oclIsTypeOf(RelatorParticipant))]
[fully_qualified_name(n.oclAsType(RelatorParticipant))/]
[elseif (n.oclIsTypeOf(AttributeReference))]
[attr_name(n.oclAsType(AttributeReference))/]
[elseif (n.oclIsTypeOf(Literal))]
[literal(n.oclAsType(Literal))/]
[elseif (n.oclIsTypeOf(SituationParameterReference))]
[sit_param_name(n.oclAsType(SituationParameterReference))/]
[elseif (n.oclIsTypeOf(SituationParticipant))]
[fully_qualified_name(n.oclAsType(SituationParticipant))/]
[/if ]
[/template]


[template public attr_name(attr : AttributeReference)]
[fully_qualified_name(attr.entity)/].[attribute.name.clean()/]
[/template]


[template public sit_param_name(param : SituationParameterReference)]
[fully_qualified_name(param.situation)/].[param.parameter.name.clean()/]
[/template]


[template public literal(literal : Literal)]
[if (literal.dataType.name = 'String')]
'[literal.value/]'
[else]
[literal.value/]
[/if ]
[/template]

[template public activate_where_all_functions (s: SituationType) post(trim()) ]
[let all_functions : OrderedSet(Function) = s.elements->filter(Function)]
[let param : OrderedSet(Parameter) = all_parameters(all_functions)]
[let internal_functions : OrderedSet(Node) = parameter_functions(param)]
[let external_functions : OrderedSet(Node) = osminus(all_functions,internal_functions)]
[for(n: Node | external_functions)]
[if(n.oclIsTypeOf(Function))]
and [activate_where_function_main(n.oclAsType(Function))/]
[/if]
[/for]
[/let]
[/let]
[/let]
[/let]
[/template]

[template public activate_where_function_main (function_node: Node) post(trim()) ]
[if(function_node.oclIsTypeOf(Function))]
[let f: Function = function_node.oclAsType(Function)]
[let param : OrderedSet(Parameter) = parameters(f)]
[f.function.name/]([activate_where_function_print_all_parameters (param)/])
[/let]
[/let]
[/if]
[/template]

[template public activate_where_function_print_all_parameters (parameters: OrderedSet(Parameter)) post(trim().replaceAll('\n', '')) ]
[for(p: Parameter | parameters) separator(', ')]
[let n: Node = p.value]
[if(n.oclIsTypeOf(Function))][activate_where_function_main(n)/][else][activate_where_function_print_parameter_name(n)/][/if]
[/let]
[/for]
[/template]

[template public activate_where_function_print_parameter_name (n: Node) post(trim()) ]
[deactivate_value(n)/]
[/template]

[comment 

####################################################
################## DESATIVAÇÃO #####################
####################################################

/]


[ comment
 	
	############################################################################################
	#### Funções utilizadas para a transformação da cláusula SELECT da regra de DESATIVAÇÃO ####
	############################################################################################

/]

[template public epl_desativacao_select(s: SituationType) ]
[let participants : OrderedSet(Participant) = s.elements->filter(Participant)->select(p:Participant| p.oclIsTypeOf(ExistsSituation) = false) ]
[deactivate_select_print_all_participant_names(participants)/]
[/let]
[/template]

[template public deactivate_select_print_all_participant_names (participants: Set(Participant)) ]
[participants->asOrderedSet()->first().eContainer(SituationType).name/][for (p: Participant | participants) ][/for][deactivate_select_key (participants) /]
[/template]

[template public deactivate_select_key (participants : Set(Participant)) post (trim())]
[let all_participants : OrderedSet(Participant) = participants->asOrderedSet() ]
[let spr_participants : OrderedSet(Participant) = participants.eContainer(SituationType).elements->filter(SituationParameterReference)->asOrderedSet()->spr_participants() ]
[let link_participants : OrderedSet(Participant) = participants.eContainer(SituationType).elements->filter(Link)->asOrderedSet()->link_participants() ]
[let all_relevant_participants : OrderedSet(Participant) = all_participants->osminus(spr_participants)->osminus(link_participants) ]
[for (p: Participant | all_relevant_participants)], [p.eContainer(SituationType).name/].[binding_name(p) /].key as key[i/][/for]
[/let]
[/let]
[/let]
[/let]
[/template]

[comment 

 	##########################################################################################
	#### Funções utilizadas para a transformação da cláusula FROM da regra de DESATIVAÇÃO ####
 	##########################################################################################

/]

[template public epl_desativacao_from(s: SituationType) post (trim()) ]
[let participants : OrderedSet(Participant) = s.elements->filter(Participant) ]
[if(participants->select(p:Participant| p.oclIsTypeOf(ExistsSituation) = true)->size() > 0 )]
[deactivate_from_print_all_participant_names_exists(participants)/]
[else]
[deactivate_from_print_all_participant_names(participants)/]
[/if]
[/let]
[/template]

[template public deactivate_from_print_all_participant_names_exists (participants: Set(Participant)) post (trim()) ]
[let existParticipant : ExistsSituation = participants->filter(ExistsSituation)->asOrderedSet()->first()]
[let situationType : SituationType = participants->asOrderedSet()->first().eContainer(SituationType) ]
pattern['['/] 
	[situationType.name/] = [situationType.name/] ->
	every (
		   timer:interval( [deactivate_from_exists_value(existParticipant) /] )
		   and not [print_participant_name(existParticipant)/] ([from_print_participant_status(existParticipant, true)/])
          )
	   [']'/] 
[/let]
[/let]
[/template]

[template public deactivate_from_exists_value (p: ExistsSituation) post (trim()) ]
[if(p.reference->size() > 0)]
[for (at : AttributeReference | p.reference) ]
[if (at.attribute.name = 'final time' or at.attribute.name = 'initial time') ]
[for( s: ComparativeRelation | at.sourceRelation ) ]
[if(s.relation.name = 'within the past')]
[s.target.oclAsType(Literal).value/]						
[/if]
[/for]
[/if]
[/for]
[/if]
[/template]

[template public deactivate_from_print_all_participant_names (participants: Set(Participant)) post (trim()) ]
[participants->asOrderedSet()->first().eContainer(SituationType).name/].std:unique(id) as [participants->asOrderedSet()->first().eContainer(SituationType).name/][for (p: Participant | participants) ][deactivate_from_print_participant_name (p) /][/for]
[/template]

[template public deactivate_from_print_participant_name (p: Participant) post (trim()) ]
[ comment nao deve possuir links e nao deve ser um ExistsSituation /]
[if( (p.eContainer(SituationType).elements->filter(Link)->select(entity = p)->size() = 0) and p.oclIsTypeOf(ExistsSituation) = false)]
    [ comment nao deve possuir relacoes com SituationParameterReference /]
	[if((p.targetRelation.source->filter(SituationParameterReference)->size() = 0) )]
		[deactivate_from_print_class_name (p)/]
	[/if]
[/if]
[/template]

[template public deactivate_from_print_class_name (p: Participant) post (trim()) ]
[let unamed : OrderedSet(Participant) = (p.eContainer(SituationType).elements->filter(Participant))]
[if(p.oclIsTypeOf(EntityParticipant))]
[if( (unamed->filter(EntityParticipant)->select(e:EntityParticipant| e.isOfType = p.oclAsType(EntityParticipant).isOfType)->indexOf(p)) = 1 )] 
, [print_participant_name(p)/].std:unique(key) as [deactivate_from_binding_name (p)/]
[/if]
[/if]
[if(p.oclIsTypeOf(RelatorParticipant))]
[if( (unamed->filter(RelatorParticipant)->select(e:RelatorParticipant| e.isOfType = p.oclAsType(RelatorParticipant).isOfType)->indexOf(p)) = 1 )] 
, [print_participant_name(p)/].std:unique(key) as [deactivate_from_binding_name (p)/]
[/if]
[/if]
[if(p.oclIsTypeOf(SituationParticipant))]
[if( (unamed->filter(SituationParticipant)->select(e:SituationParticipant|e.situationType = p.oclAsType(SituationParticipant).situationType)->indexOf(p)) = 1 )] 
, [print_participant_name(p)/].std:lastevent() as [deactivate_from_binding_name (p)/]
[/if]
[/if]
[/let]
[/template]

[template public deactivate_from_binding_name (p: Participant) post (trim()) ]
[print_participant_name_lower(p)/][index_name(p) /]
[/template]


[ comment
 	
	###########################################################################################
	#### Funções utilizadas para a transformação da cláusula WHERE da regra de DESATIVAÇÃO ####
	###########################################################################################

/]

[template public epl_desativacao_where(s: SituationType) ]
[let participants : OrderedSet(Participant) = s.elements->filter(Participant) ]
[if(participants->select(p:Participant| p.oclIsTypeOf(ExistsSituation) = true)->size() > 0 )]
	[if(participants->select(p:Participant| p.sourceRelation.oclIsUndefined() = false)->size() > 0)]
where
[for(p : Participant | participants) ][relations(p, false)/][/for]
	[/if]
[else]
where
	[deactivate_where_print_all_participant_names(participants)/]
[/if]
[deactivate_where_all_functions (s) /]
[/let]
[/template]

[template public deactivate_where_print_all_participant_names (participants: Set(Participant)) post(replaceAll('or not \\(\\)', '').replaceAll('\\( or', '\\(').replaceAll('\n', ' ').replaceAll('\t', '').replaceAll('  ', ' ').replaceAll('or  or', 'or').replaceAll('\\) or  \\(', '\\) \nor \\(').replaceAll('\\) or \\(', '\\) \nor \\(')) ]
[print_situation_type_name(participants)/].activated is true 
and ( [deactivate_where_print_all_participant_names_iteration(participants) /] [if(participants->asOrderedSet()->first().eContainer(SituationType).elements->filter(Function)->size() =  0 )])[/if]
[/template]

[template public deactivate_where_print_all_participant_names_iteration (participants: Set(Participant)) post(trim()) ]
[for (p: Participant | participants) ][deactivate_where_print_participant_name (p, i)/][/for] 
[for(p : Participant | participants) ][relations(p, false)/][/for]
[/template]

[template public deactivate_where_print_comparation (p: Participant) post(trim()) ]
[if(p.oclIsTypeOf(SituationParticipant))]
[deactivate_where_print_comparation_id(p)/]
[else]
[deactivate_where_print_comparation_key(p)/]
[/if]
[/template]

[template public deactivate_where_print_comparation_key (p: Participant) post(trim()) ]
[print_situation_type_name(p)/].[binding_name(p)/].key = [deactivate_where_binding_name_1(p)/].key
[/template]

[template public deactivate_where_print_comparation_id (p: Participant) post(trim()) ]
[print_situation_type_name(p)/].[binding_name(p)/].id = [deactivate_where_binding_name_1(p)/].id
[/template]

[template public deactivate_where_print_comparation_key (n: Node) post(trim()) ]
[if (n.oclIsTypeOf(EntityParticipant))]
[print_situation_type_name(n)/].[fully_qualified_name(n.oclAsType(EntityParticipant))/].key = [deactivate_value(n.oclAsType(EntityParticipant))/].key
[elseif (n.oclIsTypeOf(RelatorParticipant))]
[print_situation_type_name(n)/].[fully_qualified_name(n.oclAsType(RelatorParticipant))/].key = [deactivate_value(n.oclAsType(RelatorParticipant))/].key
[elseif (n.oclIsTypeOf(SituationParticipant))]
[print_situation_type_name(n)/].[fully_qualified_name(n.oclAsType(SituationParticipant))/].key = [deactivate_value(n.oclAsType(SituationParticipant))/].key
[elseif (n.oclIsTypeOf(AttributeReference))]
[print_situation_type_name(n)/].[fully_qualified_name(n.oclAsType(AttributeReference).entity)/].key = [deactivate_value(n.oclAsType(AttributeReference).entity)/].key
[/if ]

[/template]

[template public checkFirstOr (index1: Integer, index2: Integer) ]
[if( (index1 > 1) or (index2 >1))] or [/if]
[/template]

[template public checkRelevantParticipantsOr (p: Node) ]
[let unamed : OrderedSet(Participant) = (p.eContainer(SituationType).elements->filter(Participant))]
[let all_participants : OrderedSet(Participant) = p.eContainer(SituationType).elements->filter(Participant)->asOrderedSet() ]
[let spr_participants : OrderedSet(Participant) = p.eContainer(SituationType).elements->filter(SituationParameterReference)->asOrderedSet()->spr_participants() ]
[let link_participants : OrderedSet(Participant) = p.eContainer(SituationType).elements->filter(Link)->asOrderedSet()->link_participants() ]
[let all_relevant_participants : OrderedSet(Participant) = all_participants->osminus(spr_participants)->osminus(link_participants) ]
[if(all_relevant_participants->filter(RelatorParticipant)->asSet()->size() > 0 or all_relevant_participants->filter(SituationParticipant)->asSet()->size() > 0)] or [/if]
[/let]
[/let]
[/let]
[/let]
[/let]
[/template]

[template public deactivate_where_print_participant_name (p: Participant, index: Integer)  ]
[ comment nao deve possuir links e nao deve ser um ExistsSituation /]
[if( (p.eContainer(SituationType).elements->filter(Link)->select(entity = p)->size() = 0) and p.oclIsTypeOf(ExistsSituation) = false)]
    [ comment nao deve possuir relacoes com SituationParameterReference /]
	[if((p.targetRelation.source->filter(SituationParameterReference)->size() = 0) )]
		[let unamed : OrderedSet(Participant) = (p.eContainer(SituationType).elements->filter(Participant))]
		[let all_participants : OrderedSet(Participant) = p.eContainer(SituationType).elements->filter(Participant)->asOrderedSet() ]
		[let spr_participants : OrderedSet(Participant) = p.eContainer(SituationType).elements->filter(SituationParameterReference)->asOrderedSet()->spr_participants() ]
		[let link_participants : OrderedSet(Participant) = p.eContainer(SituationType).elements->filter(Link)->asOrderedSet()->link_participants() ]
		[let all_relevant_participants : OrderedSet(Participant) = all_participants->osminus(spr_participants)->osminus(link_participants) ]
		[if( (p.oclIsTypeOf(EntityParticipant) = true) and (all_relevant_participants->select(self.oclAsType(EntityParticipant).isOfType.name = p.oclAsType(EntityParticipant).isOfType.name)->size() > 1) )]
		[checkFirstOr(index, 1)/][deactivate_where_print_class_name(p) /]
		[elseif( (p.oclIsTypeOf(RelatorParticipant) = true) and (all_relevant_participants->select(self.oclAsType(RelatorParticipant).isOfType.name = p.oclAsType(RelatorParticipant).isOfType.name)->size() > 1) )]
		[checkFirstOr(index, 1)/][deactivate_where_print_class_name(p) /]
		[elseif( (p.oclIsTypeOf(SituationParticipant) = true) and (all_relevant_participants->select(self.oclAsType(SituationParticipant).situationType.name = p.oclAsType(SituationParticipant).situationType.name)->size() > 1 ))]
		[checkFirstOr(index, 1)/][deactivate_where_print_class_name(p) /]
		[else]
		[checkFirstOr(index, 1)/][deactivate_where_print_class_name(p) /]
		[/if]
		[/let]
		[/let]
		[/let]
		[/let]
		[/let]
	[/if]
[/if]
[/template]

[template public deactivate_where_print_class_name (p: Participant) post (trim()) ]
[if(p.oclIsTypeOf(RelatorParticipant))]
([deactivate_where_print_comparation(p)/] and [deactivate_where_binding_name_1(p)/].activated is not true) 
[/if]
[if(p.oclIsTypeOf(SituationParticipant))]
([deactivate_where_print_comparation(p)/] and [deactivate_where_binding_name_1(p)/].activated is not [if(p.oclAsType(SituationParticipant).isPast = true)]false[else]true[/if]) 
[/if]
[/template]

[template public deactivate_where_binding_name (p: Participant) post (trim()) ]
[print_participant_name_lower(p)/][index_name(p) /]
[/template]

[template public deactivate_comparative_relation_primitive(source: Node, rel : ComparativeRelation, target: Node) post(trim())]
[if(source.oclIsTypeOf(SituationParameterReference))]
[checkRelevantParticipantsOr(source) /] ([deactivate_where_print_comparation_id (source.oclAsType(SituationParameterReference).situation)/] and not ([deactivate_value(source)/] [print_relation(rel.relation)/] [print_situation_type_name_relation(target, false)/][value(target)/]))
[checkRelevantParticipantsOr(source) /] ([deactivate_where_print_comparation_id (target.oclAsType(SituationParameterReference).situation)/] and not ([print_situation_type_name_relation(source.oclAsType(SituationParameterReference).situation, false)/][value(source.oclAsType(SituationParameterReference).situation)/].[source.oclAsType(SituationParameterReference).parameter.name.clean()/] [print_relation(rel.relation)/] [deactivate_value(target)/]))
[elseif(source.oclIsTypeOf(Literal))]
[checkRelevantParticipantsOr(source) /] ([deactivate_where_print_comparation_key (target)/] and not ([print_situation_type_name_relation(source, false)/][value(source)/] [deactivate_value(target)/]))
[elseif(target.oclIsTypeOf(Literal))]
[checkRelevantParticipantsOr(source) /] ([deactivate_where_print_comparation_key (source)/] and not ([deactivate_value(source)/] [print_relation(rel.relation)/] [print_situation_type_name_relation(target, false)/][value(target)/]))
[else]
[checkRelevantParticipantsOr(source) /] ([deactivate_where_print_comparation_key (source)/] and not ([deactivate_value(source)/] [print_relation(rel.relation)/] [print_situation_type_name_relation(target, false)/][value(target)/]))
[checkRelevantParticipantsOr(source) /] ([deactivate_where_print_comparation_key (target)/] and not ([print_situation_type_name_relation(source, false)/][value(source)/] [print_relation(rel.relation)/] [deactivate_value(target)/]))
[/if]
[/template]

[template public deactivate_comparative_relation_user(source: Node, rel : ComparativeRelation, target: Node) post(trim())]
[if(source.oclIsTypeOf(SituationParameterReference))]
[checkRelevantParticipantsOr(source) /] ([deactivate_where_print_comparation_id (source.oclAsType(SituationParameterReference).situation)/] and [if (rel.isNegated)]not ([/if ]not ([print_relation(rel.relation)/]([deactivate_value(source.oclAsType(SituationParameterReference).situation)/].[source.oclAsType(SituationParameterReference).parameter.name.clean()/], [print_situation_type_name_relation(target, false)/][value(target)/] [parameter_user(rel)/])))[if (rel.isNegated)])[/if ]
[checkRelevantParticipantsOr(source) /] ([deactivate_where_print_comparation_id (target.oclAsType(SituationParameterReference).situation)/] and [if (rel.isNegated)]not ([/if ]not ([print_relation(rel.relation)/]([print_situation_type_name_relation(source.oclAsType(SituationParameterReference).situation, false)/][value(source.oclAsType(SituationParameterReference).situation)/].[source.oclAsType(SituationParameterReference).parameter.name.clean()/], [deactivate_value(target)/] [parameter_user(rel)/])))[if (rel.isNegated)])[/if ]
[elseif(source.oclIsTypeOf(Literal))]
[checkRelevantParticipantsOr(source) /] ([deactivate_where_print_comparation_key (target)/] and [if (rel.isNegated)]not ([/if ]not ([print_relation(rel.relation)/]([print_situation_type_name_relation(source, false)/][value(source)/], [deactivate_value(target)/] [parameter_user(rel)/])))[if (rel.isNegated)])[/if ]
[elseif(target.oclIsTypeOf(Literal))]
[checkRelevantParticipantsOr(source) /] ([deactivate_where_print_comparation_key (source)/] and [if (rel.isNegated)]not ([/if ]not ([print_relation(rel.relation)/]([deactivate_value(source)/], [print_situation_type_name_relation(target, false)/][value(target)/] [parameter_user(rel)/])))[if (rel.isNegated)])[/if ]
[else]
[checkRelevantParticipantsOr(source) /] ([deactivate_where_print_comparation_key (source)/] and [if (rel.isNegated)]not ([/if ]not ([print_relation(rel.relation)/]([deactivate_value(source)/], [print_situation_type_name_relation(target, false)/][value(target)/] [parameter_user(rel)/])))[if (rel.isNegated)])[/if ]
[checkRelevantParticipantsOr(source) /] ([deactivate_where_print_comparation_key (target)/] and [if (rel.isNegated)]not ([/if ]not ([print_relation(rel.relation)/]([print_situation_type_name_relation(source, false)/][value(source)/], [deactivate_value(target)/] [parameter_user(rel)/])))[if (rel.isNegated)])[/if ]
[/if]
[/template]

[template public deactivate_value(n : Node) post (trim())]
[if (n.oclIsTypeOf(EntityParticipant))]
[fully_qualified_name_deactivate_1(n.oclAsType(EntityParticipant))/]
[elseif (n.oclIsTypeOf(RelatorParticipant))]
[fully_qualified_name_deactivate_1(n.oclAsType(RelatorParticipant))/]
[elseif (n.oclIsTypeOf(AttributeReference))]
[deactivate_attr_name(n.oclAsType(AttributeReference))/]
[elseif (n.oclIsTypeOf(Literal))]
[literal(n.oclAsType(Literal))/]
[elseif (n.oclIsTypeOf(SituationParameterReference))]
[deactivate_sit_param_name(n.oclAsType(SituationParameterReference))/]
[elseif (n.oclIsTypeOf(SituationParticipant))]
[fully_qualified_name_deactivate_1(n.oclAsType(SituationParticipant))/]
[/if ]
[/template]

[template public deactivate_attr_name(attr : AttributeReference)]
[fully_qualified_name_deactivate_1(attr.entity)/].[attribute.name.clean()/]
[/template]

[template public deactivate_sit_param_name(param : SituationParameterReference)]
[fully_qualified_name_deactivate_1(param.situation)/].[param.parameter.name.clean()/]
[/template]

[template public deactivate_where_all_functions (s: SituationType) post(trim()) ]
[let all_functions : OrderedSet(Function) = s.elements->filter(Function)]
[let param : OrderedSet(Parameter) = all_parameters(all_functions)]
[let internal_functions : OrderedSet(Node) = parameter_functions(param)]
[let external_functions : OrderedSet(Node) = osminus(all_functions,internal_functions)]
[for(n: Node | external_functions)]
[if(n.oclIsTypeOf(Function))]
[deactivate_where_function_main(n.oclAsType(Function), n.oclAsType(Function)) /]
[/if]
[/for]
[if(s.elements->filter(Function)->size() >  0 )])[/if]
[/let]
[/let]
[/let]
[/let]
[/template]

[template public deactivate_where_function_main (external_function: Function, current_function: Function) post(trim().replaceAll('\n', ' ').replaceAll('or   or', 'or').replaceAll('  or ', '\nor ').replaceAll('\\) or \\(', '\\)\nor \\(')) ]
[let param : OrderedSet(Parameter) = parameters(current_function)]
[for(p: Parameter | param)]
[let n: Node = p.value]
[if( n.oclIsKindOf(Participant) or n.oclIsKindOf(AttributeReference) or n.oclIsKindOf(SituationParameterReference) )]
[checkRelevantParticipantsOr(n)/] or ([deactivate_where_function_main_comparation(n)/] and not( [deactivate_where_function_main_function_parameters(external_function, n)/]) )
[elseif(n.oclIsKindOf(Function))]
[deactivate_where_function_main(external_function, n.oclAsType(Function))/]
[/if] 
[/let]
[/for]
[/let]
[/template]

[template public deactivate_where_function_main_comparation (n: Node) post(trim()) ]
[if(n.oclIsTypeOf(SituationParameterReference))]
[deactivate_where_print_comparation_id (n.oclAsType(SituationParameterReference).situation)/]
[elseif(n.oclIsTypeOf(SituationParticipant))]
[deactivate_where_print_comparation_id (n.oclAsType(SituationParticipant))/]
[elseif(n.oclIsTypeOf(AttributeReference))]
[deactivate_where_print_comparation_key (n.oclAsType(AttributeReference).entity)/]
[elseif(n.oclIsTypeOf(Participant))]
[deactivate_where_print_comparation_key (n.oclAsType(Participant))/]
[/if]
[/template]

[template public deactivate_where_function_main_function_parameters (function_node: Node, current_node: Node) post(trim()) ]
[if(function_node.oclIsTypeOf(Function))]
[let f: Function = function_node.oclAsType(Function)]
[let param : OrderedSet(Parameter) = parameters(f)]
[f.function.name/]([deactivate_where_function_print_all_parameters (param, current_node)/])
[/let]
[/let]
[/if]
[/template]

[template public deactivate_where_function_print_all_parameters (parameters: OrderedSet(Parameter), current_node: Node) post(trim()) ]
[for(p: Parameter | parameters) separator(', ')]
[let n: Node = p.value]
[if(n.oclIsTypeOf(Function))][deactivate_where_function_main_function_parameters(n, current_node)/]
[else][deactivate_where_function_print_parameter_name(n, current_node)/][/if]
[/let]
[/for]
[/template]

[template public deactivate_where_function_print_parameter_name (n: Node, current_node: Node) post(trim()) ]
[let all_nodes : OrderedSet(Node) = n.eContainer(SituationType).elements->filter(Node)]
[if(all_nodes->indexOf(n) = all_nodes->indexOf(current_node))][deactivate_value(n)/]
[else][print_situation_type_name_relation(n, false)/][value(n)/][/if]
[/let]
[/template]