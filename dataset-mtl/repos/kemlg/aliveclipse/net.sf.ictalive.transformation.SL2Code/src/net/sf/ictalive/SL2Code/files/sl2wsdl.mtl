
[module sl2wsdl('http://ict-alive.sourceforge.net/services')/]

[template public sl2wsdl(s : Service)]

	
[comment @main /]
[file (s.name.concat('.wsdl'), false)]
<definitions name="[s.name/]"
	targetNamespace="[s.namespace/]"	
[importOntology(s)/]		
	xmlns="http://schemas.xmlsoap.org/wsdl/" 
	xmlns:[getNS()/]="[s.namespace/]" 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" 
	xmlns:[getNSOWLS_WSDL()/]="http://www.daml.org/services/owl-s/wsdl/"	
	>
	  	
  [if (s.interface.inLineSchema.oclIsUndefined() =false)]  
  [addTypes()/]	
  [/if]
  
  [for ( m : Message |  getAllServiceMessage(s))]  
  [addMessage(m)/]    
  [/for]       
[addPortType(s.interface) /]
  
  [for ( ep : Endpoint | s.endpoint )] 
[addBinding(ep.binding)/] 
  [/for] 
  
  [addService(s) /]
  
</definitions>
[/file]
	
[/template]

[template addService(s : Service)]
<service name="[s.name/]">
	<documentation>[ s.description /]</documentation>   
   	[comment it supports many Ports /]    
	[for ( ep : Endpoint | s.endpoint )]
    [addPort(ep) /]
	[/for]    
  </service>
[/template]

[template addPort(ep : Endpoint)]
<port name="[ep.name/]" binding="[addNS(ep.binding.name)/]">
	[if (ep.binding.transport = TransportProtocol::SOAP)]
		<soap:address location="[ep.location/]"/>		
	[else]    		
	[/if]	      
	</port>	
[/template]

[template addBinding(b : Binding)]
  <binding name="[b.name/]" type="[addNS(b.type.name)/]">  
   [if (b.transport = TransportProtocol::SOAP)]   
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http" style="[getStyle(b)/]"/>
   [/if]
   [for (op : OperationDescription | b.type.operation)]
   	<operation name="[op.name/]">
   	 [if (b.transport = TransportProtocol::SOAP)]
   	 	<soap:operation soapAction=""/>   	   
      [if (op.input->exists(true))]
      <input>
        <soap:body use="[getEncoding(b)/]"/>
      </input>	
      [/if]
      [if (op.output->exists(true))]
      <output>
        <soap:body use="[getEncoding(b)/]"/>
      </output>
      [/if]
    [/if]
    </operation>
   [/for]    
  </binding> 
[/template]

[template addPortType(i : InterfaceDescription)]
  <portType name="[i.name/]">
  [for ( op: OperationDescription | i.operation)]
  	<operation name="[op.name/]" [getNSOWLS_WSDL()/]:owl-s-process="[getOntologyPrefix(op.input->any(true).part->any(true).type)/]:#[op.name/]">
      <input name="[op.input->first().name/]" message="[addNS(op.input->first().name)/]"/>   	[comment to handle first element only /]      
      <output name="[op.output->first().name/]" message="[addNS(op.output->first().name)/]"/>		[comment to handle first element only /]     
      [for ( f: Message | op.fault)]
      	<fault name="" message="[addNS(f.name)/]"/>   	
      [/for]   
    </operation>
  [/for]    
  </portType>
[/template]

[template addMessage(m : Message)]
<message name="[m.name/]">
	[for ( p : Part | m.part)]
	 <part name="[(p.name)/]" [getNSOWLS_WSDL()/]:owl-s-parameter="[getOntologyPrefix(p.type)/]:#[getOntologyType(p.type)/]"/>
	[/for]   
  </message>
  
[/template]

[template addTypes(s: Service)]
<types>
    <xsd:schema>   
      <xsd:import namespace="[s.namespace/]" schemaLocation="TMTCinemaServiceService_schema1.xsd"/>      
    </xsd:schema>
  </types>    
[/template]

[template importOntology(s: Service)]
[for ( ont : String  | getOntologies(s))] 
	xmlns:[getOntologyPrefix(ont)/]="[ont/]"
[/for]   
[/template]

[query getOntologies(s: Service): Set(T) =
s.interface.operation.input.part.type->collect(x| getOntologyPart(x) )->union(s.interface.operation.output.part.type->collect(x| getOntologyPart(x) ))->asSet()
/]

[query getOntologyType(s : String) : String = 
	if (s.oclIsUndefined()=false) then
		s.substring(s.index('#')+2, s.size())
	else ''
	endif
/]

[query getOntologyPart(s : String) : String = 
	if (s.oclIsUndefined()=false and s.index('#').oclIsInvalid()=false) then
		s.substring(1, s.index('#'))
	else ''
	endif
/]


[query getOntologyPrefix(s : String) : String = 
	if (s.oclIsUndefined()=false and s.index('#').oclIsInvalid()=false) then
		s.substring(1, s.index('.owl')).tokenize('/')->last()
	else 'ont'
	endif
/]


[query private getNS() : String = 
	'tns'
/]

[query private addNS(name : String) : String = 
	getNS().concat(':').concat(name)
/]

[query private getNSOWLS_WSDL() : String = 
	'owl-s-wsdl'
/]

[query private getStyle(b : Binding) : String = 
	if (b.style = StyleEncoding::DocumentLiteral) then 'document'
	else 'rpc'
	endif 
/]

[query private getEncoding(b : Binding) : String = 
	if (b.style = StyleEncoding::DocumentLiteral) then 'literal'
	else 'encoded'
	endif 
/]

[query getAllServiceMessage(s : Service) : Set(T) = 
	s.interface.operation->collect(op| getAllOperationMessage(op) )
/]

[query getAllOperationMessage(op : OperationDescription) : Set(T) = 
	op->collect(i | i.input)->union(op->collect(o|o.output))->union(op->collect(f|f.fault))
/]

