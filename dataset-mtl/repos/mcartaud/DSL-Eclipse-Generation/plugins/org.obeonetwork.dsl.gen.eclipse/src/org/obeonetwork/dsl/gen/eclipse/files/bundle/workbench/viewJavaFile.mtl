[comment encoding = UTF-8 

Copyright (c) 2012 Obeo
All rights reserved.  This program and the accompanying materials
are made available under the terms of the Eclipse Public License 1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

You can apply any license to the files generated with this module and Acceleo.

Contributors :
	Mathieu Cartaud (Obeo) - initial API and implementation
/]
[module viewJavaFile('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/2002/GenModel', 'http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::normalizeName /]
[import org::obeonetwork::dsl::gen::eclipse::common::javaImports /]


[template private viewJavaFile(aView : View)]
[aView.eContainer(Bundle).genBundleJavaPath()/]/views/[aView.name.replaceAll(' ', '_').toUpperFirst()/].java
[/template]

[template public genViewJavaFile(aView : View)]
[file (viewJavaFile(), false, 'UTF-8')]
[if (aView.eContainer(Bundle).basedOn.toString().matches('Ecore'))]
[aView.ecoreTreeView()/]
[else]
[aView.viewTree()/]
[/if]
[/file]
[/template]


[template private ecoreTreeView(aView : View)]
package [aView.eContainer(Bundle).genBundleID()/].views;


[aView.genViewImport()/]

//[protected (': add ecoreTreeView imports for ' + aView.name)]
//[/protected]


/**
 * implementation class for the view.
[aView.eContainer(Bundle).genMail()/]
 * @generated
 */
public class [aView.name.replaceAll(' ', '_').toUpperFirst()/] extends ViewPart {

	/**
	 * The ID of the view as specified by the extension.
	 * @generated
	 */
	public static final String ID = "[aView.genViewID()/]";

	/**
	 * This is the one adapter factory used for providing views of the model.
	 * <!-- begin-user-doc --> <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ComposedAdapterFactory adapterFactory;

	/**
	 * The viewer attribute.
	 * @generated
	 */
	private TreeViewer viewer;
	//[protected (': add ecoreTreeView attributes for ' + aView.name)]
	//[/protected]

	/**
	 * a class who extend viewerSorter.
	 * @generated
	 */
	class NameSorter extends ViewerSorter {
	}

	/**
	 * The constructor.
	 * @generated
	 */
	public [aView.name.replaceAll(' ', '_').toUpperFirst()/]() {
		adapterFactory = new ComposedAdapterFactory(
								ComposedAdapterFactory.Descriptor.Registry.INSTANCE);
		adapterFactory.addAdapterFactory(new ResourceItemProviderAdapterFactory());
		adapterFactory.addAdapterFactory(new ReflectiveItemProviderAdapterFactory());
	}

	/**
	 * This is a callback that will allow us
	 * to create the viewer and initialize it.
	 * @generated
	 * @param parent
	 * 			A composite element
	 */
	public void createPartControl(Composite parent) {
		viewer = new TreeViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
		viewer.setContentProvider(new AdapterFactoryContentProvider(
				adapterFactory));
		viewer.setLabelProvider(new AdapterFactoryLabelProvider(adapterFactory));
		viewer.setInput(retrieveModelInstance());
     	getSite().setSelectionProvider(viewer);
		createContextMenu();

[if (aView.dynamicHelp->size() > 0)]
		// Create the help context id for the viewer's control
		PlatformUI.getWorkbench().getHelpSystem().setHelp(viewer.getControl(), "[aView.ancestors(Bundle).genBundleID()/].dynamic[aView.dynamicHelp.label.substituteAll(' ', '_').toUpperFirst()/]");
[/if]
	}

	/**
	 * retrieve the model instance.
	 * @return a Notifier
	 * @generated
	 */
	private Notifier retrieveModelInstance() {
		Resource res = new ResourceImpl();
		/*
		 * That's just an example of data to display
		 */

[if (aView.eContainer(Bundle).exportedPackages->size() > 0)]
[for (aGenClass : GenClass | aView.eContainer(Bundle).exportedPackages.genModel.eAllContents(GenClass))]
		[aGenClass.ecoreClass.name.toUpperFirst()/] [aGenClass.ecoreClass.name.toLowerFirst()/] = [aGenClass.eContainer(GenPackage).ecorePackage.name.toUpperFirst()/]Factory.eINSTANCE.create[aGenClass.ecoreClass.name.toUpperFirst()/]();
		res.getContents().add([aGenClass.ecoreClass.name.toLowerFirst()/]);
[/for]
[/if][if (aView.eContainer(Bundle).declarativeServices->size() > 0)]
[for (anEClass : EClass | aView.eContainer(Bundle).declarativeServices.delegatorClass.ecoreClass.eContainer(EPackage).eAllContents(EClass))]
		[anEClass.name.toUpperFirst()/] [anEClass.name.toLowerFirst()/] = [anEClass.eContainer(EPackage).name.toUpperFirst()/]Factory.eINSTANCE.create[anEClass.name.toUpperFirst()/]();
		res.getContents().add([anEClass.name.toLowerFirst()/]);
[/for]
[/if][if (aView.eContainer(Bundle).exportedPackages->size() = 0 and aView.eContainer(Bundle).declarativeServices->size() = 0)]
		//YourApp yourApp = YourAppFactory.eINSTANCE.createYourApp();
		//res.getContents().add(yourApp);
[/if]
		return res;
	}

	/**
	 * Create the view's menu.
	 * @generated
	 */
   	private void createContextMenu() {
		// Create menu manager
   		MenuManager menuManager = new MenuManager();
   		menuManager.setRemoveAllWhenShown(true);
   		menuManager.addMenuListener(new IMenuListener() {
			
			/**
			 * @generated
			 */
			public void menuAboutToShow(IMenuManager manager) {
				fillContextMenu(manager);		
			}
		});
   		
		// Create menu
   		Menu menu = menuManager.createContextMenu(viewer.getControl());
   		viewer.getControl().setMenu(menu);
   		
		// Register menu for extension
   		getSite().registerContextMenu(menuManager, viewer);
   	}
   	
	/**
	 * fill the menu programmatically.
	 * @param mgr
	 * 			The menu manager
	 * @generated
	 */
   	private void fillContextMenu(IMenuManager mgr) {

   	}



	/**
	 * Passing the focus request to the viewer's control.
	 * @generated
	 */
	public void setFocus() {
		viewer.getControl().setFocus();
	}

	//[protected (': add ecoreTreeView methods for ' + aView.name)]
	//[/protected]

}
[/template]


[template private viewTree(aView : View)]
package [aView.eContainer(Bundle).genBundleID()/].views;


import java.util.ArrayList;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.jface.action.IMenuListener;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.action.MenuManager;
import org.eclipse.jface.viewers.IStructuredContentProvider;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.ViewerSorter;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.ui.ISharedImages;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.part.DrillDownAdapter;
import org.eclipse.ui.part.ViewPart;

//[protected (': add treeView imports for ' + aView.name)]
//[/protected]


/**
 * <p>
 * The view uses a label provider to define how model
 * objects should be presented in the view. Each
 * view can present the same model objects using
 * different labels and icons, if needed. Alternatively,
 * a single label provider can be shared between views
 * in order to ensure that objects of the same type are
 * presented in the same way everywhere.
 * <p>
[aView.eContainer(Bundle).genMail()/]
 * @generated
 */

public class [aView.name.replaceAll(' ', '_').toUpperFirst()/] extends ViewPart {

	/**
	 * The ID of the view as specified by the extension.
	 * @generated
	 */
	public static final String ID = "[aView.genViewID()/]";

	/**
	 * The viewer attribute.
	 * @generated
	 */
 	private TreeViewer viewer;

	/**
	 * drillDown attribute.
	 * @generated
	 */
	private DrillDownAdapter drillDownAdapter;

	//[protected (': add treeView attributes for ' + aView.name)]
	//[/protected]
	

    /*
    * The content provider class is responsible for
    * providing objects to the view. It can wrap
    * existing objects in adapters or simply return
    * objects as-is. These objects may be sensitive
    * to the current input of the view, or ignore
    * it and always show the same content 
    * (like Task List, for example).
    */

	/**
	 * the class treeObject.
	 * @generated
	 */
	class TreeObject implements IAdaptable {

		/**
	 	 * the name of the treeObject.
	 	 * @generated
	 	 */
    	private String name;

		/**
	 	 * the parent.
	 	 * @generated
	 	 */
    	private TreeParent parent;

		//[protected (': add TreeObject attributes for ' + aView.name)]
		//[/protected] 
     
		/**
		 * the constructor.
		 * @param name
		 * 			The name of the treeObject
		 * @generated
		 */
    	public TreeObject(String name) {
       		this.name = name;
     	}

		/**
		 * name's getter.
		 * @return the name of the object
		 * @generated
		 */
     	public String getName() {
       		return name;
     	}

		/**
		 * setter for the parent.
		 * @param parent
		 * 			the parent
		 * @generated
		 */
     	public void setParent(TreeParent parent) {
       		this.parent = parent;
     	}
     	
		/**
		 * getter for the parent.
	 	 * @return the parent
		 * @generated
		 */
		public TreeParent getParent() {
       		return parent;
     	}
    
		/**
		 * method to string for treeObject.
		 * @return the name
		 * @generated
		 */
		public String toString() {
       		return getName();
     	}

		/**
		 * empty method.
		 * @param key
		 * 			a class
		 * @return an Object
		 * @generated
		 */
	    public Object getAdapter(Class key) {
       		return null;
     	}
   	}
   
	/**
	 * class TreeParent.
	 * @generated
	 */
   	class TreeParent extends TreeObject {

		/**
	 	 * the list of the children.
	 	 * @generated
	 	 */
    	private ArrayList children;

		//[protected (': add TreeParent attributes for ' + aView.name)]
		//[/protected] 
     
		/**
		 * the constructor.
		 * @param name
		 * 			The name of the parent
		 * @generated
		 */
		public TreeParent(String name) {
       		super(name);
       		children = new ArrayList();
     	}

     	/**
		 * add a children to TreeParent.
		 * @param child
		 * 			the child to add
		 * @generated
		 */
		public void addChild(TreeObject child) {
       		children.add(child);
       		child.setParent(this);
     	}

		/**
		 * remove a child from TreeParent.
		 * @param child
		 * 			The child to remove
		 * @generated
		 */
     	public void removeChild(TreeObject child) {
       		children.remove(child);
       		child.setParent(null);
     	}

		/**
		 * getter for the childrens.
		 * @return the childs of treeParent
		 * @generated
		 */
     	public TreeObject ['['/]] getChildren() {
       		return (TreeObject ['['/]])children.toArray(new TreeObject['['/]children.size()]);
     	}

		/**
		 * find if treeParent has child.
		 * @return a boolean
		 * @generated
		 */
     	public boolean hasChildren() {
       		return children.size() > 0;
     	}
   	}

	/**
	 * the manager class.
	 * @generated
	 */ 
   	class ViewContentProvider implements IStructuredContentProvider, 
                        ITreeContentProvider {

		/**
	 	 * the treeParent.
	 	 * @generated
	 	 */
     	private TreeParent invisibleRoot;

		//[protected (': add ViewContentProvider attributes for ' + aView.name)]
		//[/protected] 

		/**
		 * method call if the input change.
		 * @param v The viewer
		 * @param oldInput the old input
		 * @param newInput the new input
		 * @generated
		 */
     	public void inputChanged(Viewer v, Object oldInput, Object newInput) {
     	}

		/**
		 * a method to dispose.
		 * @generated
		 */
     	public void dispose() {
     	}

		/**
		 * get the elements of the parent.
		 * @param parent
		 * 			the element whe work on
		 * @return the element of the parent
		 * @generated
		 */
     	public Object['['/]] getElements(Object parent) {
       		if (parent.equals(getViewSite())) {
         		if (invisibleRoot == null) {
					initialize();
				}
         		return getChildren(invisibleRoot);
       		}
       		return getChildren(parent);
    	}

		/**
		 * get the parent of an element.
		 * @param child
		 * 			the element whe work on
		 * @return null
		 * @generated
		 */
     	public Object getParent(Object child) {
       		if (child instanceof TreeObject) {
         		return ((TreeObject)child).getParent();
       		}
       		return null;
     	}

		/**
		 * get the childs of a parent.
		 * @param parent
		 * 			the element we work on
		 * @return the childs of the element
		 * @generated
		 */
     	public Object ['['/]] getChildren(Object parent) {
       		if (parent instanceof TreeParent) {
         		return ((TreeParent)parent).getChildren();
       		}
       		return new Object['['/]0];
     	}

		/**
		 * verify if an element have childs.
		 * @param parent
		 * 			the element we work on
		 * @return a boolean
		 * @generated
		 */
     	public boolean hasChildren(Object parent) {
       		if (parent instanceof TreeParent) {
         		return ((TreeParent)parent).hasChildren();
			}
       		return false;
     	}

		/**
 		 * initialize the view.
		 * @generated
		 */
		private void initialize() {
       		TreeObject to1 = new TreeObject("Leaf 1");
       		TreeObject to2 = new TreeObject("Leaf 2");
       		TreeObject to3 = new TreeObject("Leaf 3");
       		TreeParent p1 = new TreeParent("Parent 1");
       		p1.addChild(to1);
       		p1.addChild(to2);
       		p1.addChild(to3);
      
       		TreeObject to4 = new TreeObject("Leaf 4");
       		TreeParent p2 = new TreeParent("Parent 2");
       		p2.addChild(to4);
      
      		TreeParent root = new TreeParent("Root");
       		root.addChild(p1);
       		root.addChild(p2);
       
       		invisibleRoot = new TreeParent("");
       		invisibleRoot.addChild(root);
     	}
   	}

	/**
	 * labelProvider for the view.
	 * @generated
	 */
   	class ViewLabelProvider extends LabelProvider {

		//[protected (': add ViewLabelProvider attributes for ' + aView.name)]
		//[/protected] 

		/**
		 * get the text of an object.
		 * @param obj
		 * 			an Object
		 * @return a string
		 * @generated
		 */
     	public String getText(Object obj) {
      		return obj.toString();
     	}

		/**
		 * get the image of an element.
		 * @param obj
		 * 			the element
		 * @return an image
		 * @generated
		 */
     	public Image getImage(Object obj) {
       		String imageKey = ISharedImages.IMG_OBJ_ELEMENT;
       		if (obj instanceof TreeParent) {
          		imageKey = ISharedImages.IMG_OBJ_FOLDER;
			}
       		return PlatformUI.getWorkbench().getSharedImages().getImage(imageKey);
     	}
   	}

	/**
	 * an empty class.
	 * @generated
	 */
	class NameSorter extends ViewerSorter {
   	}

	/**
	 * The constructor.
	 * @generated
	 */
	public [aView.name.replaceAll(' ', '_').toUpperFirst()/]() {
	}

	/**
	 * This is a callback that will allow us
	 * to create the viewer and initialize it.
	 * @param parent
	 * 			the parent
	 * @generated
	 */
   	public void createPartControl(Composite parent) {

    	viewer = new TreeViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
     	drillDownAdapter = new DrillDownAdapter(viewer);
     	viewer.setContentProvider(new ViewContentProvider());
     	viewer.setLabelProvider(new ViewLabelProvider());
     	viewer.setSorter(new NameSorter());
     	viewer.setInput(getViewSite());
     	getSite().setSelectionProvider(viewer);
		createContextMenu();

[if (aView.dynamicHelp->size() > 0)]
		// Create the help context id for the viewer's control
		PlatformUI.getWorkbench().getHelpSystem().setHelp(viewer.getControl(), "[aView.ancestors(Bundle).genBundleID()/].dynamic[aView.dynamicHelp.label.substituteAll(' ', '_').toUpperFirst()/]");
[/if]
	}


	/**
	 * Create the view's menu.
	 * @generated
	 */
   	private void createContextMenu() {
		// Create menu manager
   		MenuManager menuManager = new MenuManager();
   		menuManager.setRemoveAllWhenShown(true);
   		menuManager.addMenuListener(new IMenuListener() {
			
			public void menuAboutToShow(IMenuManager manager) {
				fillContextMenu(manager);		
			}
		});
   		
		// Create menu
   		Menu menu = menuManager.createContextMenu(viewer.getControl());
   		viewer.getControl().setMenu(menu);
   		
		// Register menu for extension
   		getSite().registerContextMenu(menuManager, viewer);
   	}
   	
	/**
	 * fill the menu programmatically.
	 * @param mgr the menu manager
	 * @generated
	 */
   	private void fillContextMenu(IMenuManager mgr) {

   	}


	/**
	 * Passing the focus request to the viewer's control.
	 * @generated
	 */
	public void setFocus() {
		viewer.getControl().setFocus();
	}

	//[protected (': add treeView methods for ' + aView.name)]
	//[/protected]

}
[/template]