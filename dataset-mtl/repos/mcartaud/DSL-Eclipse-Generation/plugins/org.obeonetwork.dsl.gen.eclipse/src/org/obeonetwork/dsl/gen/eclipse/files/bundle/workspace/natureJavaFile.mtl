[comment encoding = UTF-8 

Copyright (c) 2012 Obeo
All rights reserved.  This program and the accompanying materials
are made available under the terms of the Eclipse Public License 1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

You can apply any license to the files generated with this module and Acceleo.

Contributors :
	Mathieu Cartaud (Obeo) - initial API and implementation
/]
[module natureJavaFile('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/2002/GenModel', 'http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::normalizeName /]
[import org::obeonetwork::dsl::gen::eclipse::common::javaImports /]


[template private natureJavaFile(aNature : Nature)]
[aNature.eContainer(Bundle).genBundleJavaPath()/]/natures/[aNature.name.replaceAll(' ', '_').toUpperFirst()/].java
[/template]

[template public genNatureJavaFile(aNature : Nature)]
[file (natureJavaFile(), false, 'UTF-8')]
package [aNature.ancestors(Bundle).genBundleID()/].natures;


[aNature.genNatureImport()/]

//[protected (': add imports for the nature ' + aNature.name)]
//[/protected]

public class [aNature.name.replaceAll(' ', '_').toUpperFirst()/] implements IProjectNature {

	/**
	 * ID of this project nature
	 */
	public static final String NATURE_ID = "[aNature.ancestors(Bundle).genBundleID()/].[aNature.name.replaceAll(' ', '_').toLowerFirst()/]";

	private IProject project;

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.core.resources.IProjectNature#configure()
	 */
	public void configure() throws CoreException {
[if (aNature.builders->size() > 0)]
		IProjectDescription desc = project.getDescription();
		ICommand['['/]] commands = desc.getBuildSpec();

		for (int i = 0; i < commands.length; ++i) {
			if (commands['['/]i].getBuilderName().equals([aNature.builders.name.replaceAll(' ', '_').toUpperFirst()/].BUILDER_ID)) {
				return;
			}
		}

		ICommand['['/]] newCommands = new ICommand['['/]commands.length + 1];
		System.arraycopy(commands, 0, newCommands, 0, commands.length);
		ICommand command = desc.newCommand();
		command.setBuilderName([aNature.builders.name.replaceAll(' ', '_').toUpperFirst()/].BUILDER_ID);
		newCommands['['/]newCommands.length - 1] = command;
		desc.setBuildSpec(newCommands);
		project.setDescription(desc, null);
[/if]
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.core.resources.IProjectNature#deconfigure()
	 */
	public void deconfigure() throws CoreException {
[if (aNature.builders->size() > 0)]
		IProjectDescription description = getProject().getDescription();
		ICommand['['/]] commands = description.getBuildSpec();
		for (int i = 0; i < commands.length; ++i) {
			if (commands['['/]i].getBuilderName().equals([aNature.builders.name.replaceAll(' ', '_').toUpperFirst()/].BUILDER_ID)) {
				ICommand['['/]] newCommands = new ICommand['['/]commands.length - 1];
				System.arraycopy(commands, 0, newCommands, 0, i);
				System.arraycopy(commands, i + 1, newCommands, i,
						commands.length - i - 1);
				description.setBuildSpec(newCommands);
				project.setDescription(description, null);			
				return;
			}
		}
[/if]
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.core.resources.IProjectNature#getProject()
	 */
	public IProject getProject() {
		return project;
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.core.resources.IProjectNature#setProject(org.eclipse.core.resources.IProject)
	 */
	public void setProject(IProject project) {
		this.project = project;
	}

}
[/file]
[/template]
