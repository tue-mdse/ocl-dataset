[comment encoding = UTF-8 

Copyright (c) 2012 Obeo
All rights reserved.  This program and the accompanying materials
are made available under the terms of the Eclipse Public License 1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

You can apply any license to the files generated with this module and Acceleo.

Contributors :
	Mathieu Cartaud (Obeo) - initial API and implementation
/]
[module extensionDescriptorJavaFile('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/2002/GenModel', 'http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::normalizeName /]


[template private extensionDescriptorJavaFile(anExtensionPoint : ExtensionPointProvider)]
[anExtensionPoint.eContainer(Bundle).genBundleJavaPath()/]/extension/[anExtensionPoint.genExtensionName().toLowerFirst()/]/[anExtensionPoint.genExtensionName()/]Descriptor.java
[/template]

[template public genExtensionDescriptorJavaFile(anExtensionPoint : ExtensionPointProvider)]
[file (extensionDescriptorJavaFile(), false, 'UTF-8')]
package [anExtensionPoint.ancestors(Bundle).genBundleID()/].extension.[anExtensionPoint.genExtensionName().toLowerFirst()/];

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IConfigurationElement;

//[protected (': add imports for ' + anExtensionPoint.genExtensionName() + 'Descriptor')]
//[/protected]


/**
 * Describes a extension as contributed to the "[anExtensionPoint.ancestors(Bundle).genBundleID()/].[anExtensionPoint.genExtensionName()/]Extension" extension point.
[anExtensionPoint.eContainer(Bundle).genMail()/]
 * @generated
 */
public class [anExtensionPoint.genExtensionName()/]Descriptor {

	/** 
	 * Name of the [anExtensionPoint.name/] extension point's tag "[anExtensionPoint.className/]" attribute. 
	 * @generated
	 */
	public static final String [anExtensionPoint.staticExtensionName()/]_ATTRIBUTE_[anExtensionPoint.className.toUpper().substituteAll(' ', '_')/] = "[anExtensionPoint.className/]"; //$NON-NLS-1$
[for (anAttribute : JavaAttribute | anExtensionPoint.javaAttributes)]

	/** 
	 * Name of the [anExtensionPoint.name/] extension point's tag "[anAttribute.name/]" attribute.
	 * @generated
	 */
	public static final String [anExtensionPoint.staticExtensionName()/]_ATTRIBUTE_[anAttribute.staticJavaAttributeName()/] = "[anAttribute.name/]"; //$NON-NLS-1$
[/for]
[for (anAttribute : StringAttribute | anExtensionPoint.stringAttributes)]

	/** 
	 * Name of the [anExtensionPoint.name/] extension point's tag "[anAttribute.name/]" attribute.
	 * @generated
	 */
	public static final String [anExtensionPoint.staticExtensionName()/]_ATTRIBUTE_[anAttribute.staticStringAttributeName()/] = "[anAttribute.name/]"; //$NON-NLS-1$
[/for]
	/** 
	 * Configuration element of this descriptor.
	 * @generated
	 */
	private final IConfigurationElement element;

	/**
	 * Qualified [anExtensionPoint.className/] name of the [anExtensionPoint.name/] extension. This will be used as an id to remove contributions.
	 * @generated
	 */
	private final String [anExtensionPoint.className.toLowerFirst()/]Attribute;

[for (anAttribute : StringAttribute | anExtensionPoint.stringAttributes)]

	/**
	 * Qualified [anAttribute.name/] name of the [anExtensionPoint.name/] extension. 
	 * @generated
	 */
	private final String [anAttribute.refactorAttributeName().toLowerFirst()/]Attribute;
[/for]

[for (anAttribute : JavaAttribute | anExtensionPoint.javaAttributes)]

	/**
	 * Qualified [anAttribute.name/] name of the [anExtensionPoint.name/] extension. 
	 * @generated
	 */
	private final String [anAttribute.refactorAttributeName().toLowerFirst()/]Attribute;

	/**
	 * We only need to create the instance once, this will keep reference to it. 
	 * @generated
	 */
	private [anAttribute.genAttributeClassName()/] [anAttribute.genAttributeClassName().toLowerFirst()/];
[/for]

	/**
	 * We only need to create the instance once, this will keep reference to it. 
	 * @generated
	 */
	private [anExtensionPoint.refactorExtensionClassName()/] [anExtensionPoint.refactorExtensionClassName().toLowerFirst()/];

//[protected (': add attributes for ' + anExtensionPoint.genExtensionName() + 'ExtensionDescriptor')]
//[/protected]


	/**
	 * Instantiates a descriptor with all information.
	 * 
	 * @param configuration
	 *            Configuration element from which to create this descriptor.
	 * @generated
	 */
	public [anExtensionPoint.genExtensionName()/]Descriptor(IConfigurationElement configuration) {
		element = configuration;
		[anExtensionPoint.className.toLowerFirst()/]Attribute = configuration.getAttribute([anExtensionPoint.staticExtensionName()/]_ATTRIBUTE_[anExtensionPoint.className.toUpper()/]);
[for (anAttribute : StringAttribute | anExtensionPoint.stringAttributes)]
		[anAttribute.refactorAttributeName().toLowerFirst()/]Attribute = configuration.getAttribute([anExtensionPoint.staticExtensionName()/]_ATTRIBUTE_[anAttribute.staticStringAttributeName()/]);
[/for]
[for (anAttribute : JavaAttribute | anExtensionPoint.javaAttributes)]
		[anAttribute.refactorAttributeName().toLowerFirst()/]Attribute = configuration.getAttribute([anExtensionPoint.staticExtensionName()/]_ATTRIBUTE_[anAttribute.staticJavaAttributeName()/]);
[/for]
	}

	/**
	 * Returns this descriptor's "[anExtensionPoint.className/]" class name.
	 * 
	 * @return This descriptor's "[anExtensionPoint.className/]" class name.
	 * @generated
	 */
	public String get[anExtensionPoint.className.toUpperFirst()/]Attribute() {
		return [anExtensionPoint.className.toUpperFirst().toLowerFirst()/]Attribute;
	}

[for (anAttribute : JavaAttribute | anExtensionPoint.javaAttributes)]
	/**
	 * Returns this descriptor's "[anAttribute.name/]" class name.
	 * 
	 * @return This descriptor's "[anAttribute.name/]" class name.
	 * @generated
	 */
	public String get[anAttribute.refactorAttributeName()/]Attribute() {
		return [anAttribute.refactorAttributeName().toLowerFirst()/]Attribute;
	}
[/for]

[for (anAttribute : StringAttribute | anExtensionPoint.stringAttributes)]
	/**
	 * Returns this descriptor's "[anAttribute.name/]" field name.
	 * 
	 * @return This descriptor's "[anAttribute.name/]" field name.
	 * @generated
	 */
	public String get[anAttribute.refactorAttributeName()/]Attribute() {
		return [anAttribute.refactorAttributeName().toLowerFirst()/]Attribute;
	}
[/for]

	/**
	 * Creates an instance of this descriptor's {@link [anExtensionPoint.refactorExtensionClassName()/]}.
	 * 
	 * @return A new instance of this descriptor's {@link [anExtensionPoint.refactorExtensionClassName()/]}.
	 * @generated
	 */
	public [anExtensionPoint.refactorExtensionClassName()/] get[anExtensionPoint.refactorExtensionClassName()/]() {
		if ([anExtensionPoint.refactorExtensionClassName().toLowerFirst()/] == null) {
			try {
				[anExtensionPoint.refactorExtensionClassName().toLowerFirst()/] = ([anExtensionPoint.refactorExtensionClassName()/])element
						.createExecutableExtension([anExtensionPoint.staticExtensionName()/]_ATTRIBUTE_[anExtensionPoint.className.toUpper().substituteAll(' ', '_')/]);
			} catch (CoreException e) {
				e.printStackTrace();
			}
		}
		return [anExtensionPoint.refactorExtensionClassName().toLowerFirst()/];
	}

[for (anAttribute : JavaAttribute | anExtensionPoint.javaAttributes)]
	/**
	 * Creates an instance of this descriptor's {@link [anAttribute.genAttributeClassName()/]}.
	 * 
	 * @return A new instance of this descriptor's {@link [anAttribute.genAttributeClassName()/]}.
	 * @generated
	 */
	public [anAttribute.genAttributeClassName()/] get[anAttribute.genAttributeClassName()/]() {
		if ([anAttribute.genAttributeClassName().toLowerFirst()/] == null) {
			try {
				[anAttribute.genAttributeClassName().toLowerFirst()/] = ([anAttribute.genAttributeClassName()/])element
						.createExecutableExtension([anExtensionPoint.staticExtensionName()/]_ATTRIBUTE_[anAttribute.staticJavaAttributeName()/]);
			} catch (CoreException e) {
				e.printStackTrace();
			}
		}
		return [anAttribute.genAttributeClassName().toLowerFirst()/];
	}
[/for]

//[protected (': add methods for ' + anExtensionPoint.genExtensionName() + 'ExtensionDescriptor')]
//[/protected]

}
[/file]
[/template]
