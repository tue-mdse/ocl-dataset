[comment encoding = UTF-8 

Copyright (c) 2012 Obeo
All rights reserved.  This program and the accompanying materials
are made available under the terms of the Eclipse Public License 1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

You can apply any license to the files generated with this module and Acceleo.

Contributors :
	Mathieu Cartaud (Obeo) - initial API and implementation
/]
[module extensionInterfaceJavaFile('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/2002/GenModel', 'http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::normalizeName /]

[template private extensionInterfaceJavaFile(anAttribute : JavaAttribute)]
[anAttribute.eContainer(Bundle).genBundleJavaPath()/]/extension/[anAttribute.eContainer(ExtensionPointProvider).genExtensionName().toLowerFirst()/]/[anAttribute.genAttributeClassName()/].java
[/template]

[template public genExtensionInterfaceJavaFile(anAttribute : JavaAttribute)]
[file (extensionInterfaceJavaFile(), false, 'UTF-8')]
package [anAttribute.ancestors(Bundle).genBundleID()/].extension.[anAttribute.eContainer(ExtensionPointProvider).genExtensionName().toLowerFirst()/];

//[protected (': add imports for ' + anAttribute.genAttributeClassName())]
//[/protected]

/**
 * Clients should extend this interface to extend the extensionPoint mechanism.
[anAttribute.eContainer(Bundle).genMail()/]
 * @generated
 */
public interface [anAttribute.genAttributeClassName()/] {

	//[protected (': add attributes for ' + anAttribute.genAttributeClassName())]
	//[/protected]
	
	/**
	 * an method for the extension point.
	 * @return the name
	 * @generated
	 */
	String getName();

	//[protected (': add methods for ' + anAttribute.genAttributeClassName())]
	//[/protected]

}

[/file]
[/template]


[template private extensionInterfaceJavaFile(anExtensionPoint : ExtensionPointProvider)]
[anExtensionPoint.eContainer(Bundle).genBundleJavaPath()/]/extension/[anExtensionPoint.genExtensionName().toLowerFirst()/]/[anExtensionPoint.refactorExtensionClassName()/].java
[/template]

[template public genExtensionInterfaceJavaFile(anExtensionPoint : ExtensionPointProvider)]
[file (extensionInterfaceJavaFile(), false, 'UTF-8')]
package [anExtensionPoint.ancestors(Bundle).genBundleID()/].extension.[anExtensionPoint.genExtensionName().toLowerFirst()/];

//[protected (': add imports for ' + anExtensionPoint.refactorExtensionClassName())]
//[/protected]


/**
 * Clients should extend this interface to extend the extensionPoint mechanism.
[anExtensionPoint.eContainer(Bundle).genMail()/]
 * @generated
 */
public interface [anExtensionPoint.refactorExtensionClassName()/] {
	
	//[protected (': add attributes for ' + anExtensionPoint.refactorExtensionClassName())]
	//[/protected]
	
	/**
	 * an method for the extension point.
	 * @return the name
	 * @generated
	 */
	String getName();

	//[protected (': add methods for ' + anExtensionPoint.refactorExtensionClassName())]
	//[/protected]
}

[/file]
[/template]