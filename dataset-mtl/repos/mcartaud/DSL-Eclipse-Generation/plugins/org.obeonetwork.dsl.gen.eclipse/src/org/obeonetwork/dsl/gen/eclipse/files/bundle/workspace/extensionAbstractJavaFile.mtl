[comment encoding = UTF-8 

Copyright (c) 2012 Obeo
All rights reserved.  This program and the accompanying materials
are made available under the terms of the Eclipse Public License 1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

You can apply any license to the files generated with this module and Acceleo.

Contributors :
	Mathieu Cartaud (Obeo) - initial API and implementation
/]
[module extensionAbstractJavaFile('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/2002/GenModel', 'http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::normalizeName /]


[template private extensionAbstractJavaFile(anAttribute : JavaAttribute)]
[anAttribute.eContainer(Bundle).genBundleJavaPath()/]/extension/[anAttribute.eContainer(ExtensionPointProvider).genExtensionName().toLowerFirst()/]/Abstract[anAttribute.genAttributeClassName()/].java
[/template]

[template public genExtensionAbstractJavaFile(anAttribute : JavaAttribute)]
[file (anAttribute.extensionAbstractJavaFile(), false, 'UTF-8')]
package [anAttribute.ancestors(Bundle).genBundleID()/].extension.[anAttribute.eContainer(ExtensionPointProvider).genExtensionName().toLowerFirst()/];

//[protected (': add imports for Abstract' + anAttribute.genAttributeClassName() + 'Extension')]
//[/protected]

/**
 * Clients should extend this abstract class to extend the extensionPoint mechanism.
[anAttribute.eContainer(Bundle).genMail()/]
 * @generated
 */
public abstract class Abstract[anAttribute.genAttributeClassName()/] implements [anAttribute.genAttributeClassName()/] {
	
	//[protected (': add attributes for Abstract' + anAttribute.genAttributeClassName() + 'Extension')]
	//[/protected]

	/**
	 * an abstract method for the extension point.
	 * @return the name
	 * @generated
	 */
	public abstract String getName();

	//[protected (': add methods for Abstract' + anAttribute.genAttributeClassName() + 'Extension')]
	//[/protected]

}
[/file]
[/template]

[template private extensionAbstractJavaFile(anExtensionPoint : ExtensionPointProvider)]
[anExtensionPoint.eContainer(Bundle).genBundleJavaPath()/]/extension/[anExtensionPoint.genExtensionName().toLowerFirst()/]/Abstract[anExtensionPoint.refactorExtensionClassName()/].java
[/template]

[template public genExtensionAbstractJavaFile(anExtensionPoint : ExtensionPointProvider)]
[file (anExtensionPoint.extensionAbstractJavaFile(), false, 'UTF-8')]
package [anExtensionPoint.ancestors(Bundle).genBundleID()/].extension.[anExtensionPoint.genExtensionName().toLowerFirst()/];

//[protected (': add imports for Abstract' + anExtensionPoint.refactorExtensionClassName() + 'Extension')]
//[/protected]

/**
 * Clients should implements this abstract class to implements the extensionPoint mechanism.
[anExtensionPoint.eContainer(Bundle).genMail()/]
 * @generated
 */
public abstract class Abstract[anExtensionPoint.refactorExtensionClassName()/] implements [anExtensionPoint.refactorExtensionClassName()/] {
	
	//[protected (': add attributes for Abstract' + anExtensionPoint.refactorExtensionClassName() + 'Extension')]
	//[/protected]

	/**
	 * an abstract method for the extension point.
	 * @return the name
	 * @generated
	 */
	public abstract String getName();

	//[protected (': add methods for Abstract' + anExtensionPoint.refactorExtensionClassName() + 'Extension')]
	//[/protected]

}
[/file]
[/template]