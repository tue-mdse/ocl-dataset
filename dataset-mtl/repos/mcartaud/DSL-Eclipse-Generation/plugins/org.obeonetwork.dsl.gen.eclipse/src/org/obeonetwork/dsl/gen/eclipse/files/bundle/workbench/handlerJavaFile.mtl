[comment encoding = UTF-8 

Copyright (c) 2012 Obeo
All rights reserved.  This program and the accompanying materials
are made available under the terms of the Eclipse Public License 1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

You can apply any license to the files generated with this module and Acceleo.

Contributors :
	Mathieu Cartaud (Obeo) - initial API and implementation
/]
[module handlerJavaFile('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/2002/GenModel', 'http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::normalizeName /]
[import org::obeonetwork::dsl::gen::eclipse::common::javaImports /]


[template private handlerJavaFile(aHandler : Handler)]
[aHandler.eContainer(Bundle).genBundleJavaPath()/]/handlers/[aHandler.name.replaceAll(' ', '_').toUpperFirst()/].java
[/template]

[template public genHandlerJavaFile(aHandler : Handler)]
[file (handlerJavaFile(), false, 'UTF-8')]
package [aHandler.eContainer(Bundle).genBundleID()/].handlers;


[if (aHandler.oclIsKindOf(ContextualHandler))]
[aHandler.oclAsType(ContextualHandler).genContextualHandlerImport()/]
[else]
[aHandler.genDefaultHandlerImport()/]
[/if]

//[protected (': add handler imports for ' + aHandler.name)]
//[/protected]


/**
 * the implementation class of the handler.
[aHandler.eContainer(Bundle).genMail()/]
 * @generated
 */
public class [aHandler.name.replaceAll(' ', '_').toUpperFirst()/] extends AbstractHandler {
	
	//[protected (': add handler attributes for ' + aHandler.name)]
	//[/protected]


	/**
	 * The constructor.
	 * @generated
	 */
	public [aHandler.name.replaceAll(' ', '_').toUpperFirst()/]() {
		super();
	}


[if (aHandler.oclIsTypeOf(ContextualHandler))]
[aHandler.oclAsType(ContextualHandler).genBody()/]
[else]
[aHandler.oclAsType(DefaultHandler).genBody()/]
[/if]

	//[protected (': add handler methods for ' + aHandler.name)]
	//[/protected]

}
[/file]
[/template]


[template private genBody(aHandler : ContextualHandler)]
[if (not(aHandler.activateWith.oclIsUndefined()))]
	/**
	 * the command has been executed, so extract extract the needed information
	 * from the application context.
	 * @param event
	 * 			the execution of the action
	 * @return null
	 * @throws ExecutionException an exception
	 * @generated
	 */
	public Object execute(ExecutionEvent event) throws ExecutionException {
		ISelection selection = HandlerUtil.getActiveWorkbenchWindow(event)
				.getActivePage().getSelection();
[if (not(aHandler.activateWith.matches('java.lang.String')) and aHandler.activateWith.toString()->size() > 0)]		if (selection != null & selection instanceof IStructuredSelection) {
			List<[aHandler.activateWith/]> selected = new ArrayList<[aHandler.activateWith/]>();
			IStructuredSelection strucSelection = (IStructuredSelection) selection;
			for (Iterator<Object> iterator = strucSelection.iterator(); iterator
					.hasNext();) {
				Object element = iterator.next();
				if (element instanceof [aHandler.activateWith/]) {
					selected.add(([aHandler.activateWith/]) element);
				}
				doExecute(selected, event);
			}
		}[/if][if (aHandler.activateWith.matches('java.lang.String'))]		if (selection != null & selection instanceof ITextSelection) {
			ITextSelection textSelection = (ITextSelection) selection;
			String selected;
			selected = textSelection.toString();
			doExecute(selected, event);
		}[/if]
		
		return null;
	}


[if (aHandler.activateWith.matches('java.lang.String'))]
	/**
	 * The command has been executed, this method perform the action.
	 * @param selected
	 * 			the selected element
	 * @param event
	 * 			the execution of the action
	 * @return null
	 * @throws ExecutionException an exception
	 * @generated
	 */
	private Object doExecute(String selected, ExecutionEvent event) throws ExecutionException {		
		IWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);
		MessageDialog.openInformation(
				window.getShell(),
				"[aHandler.eContainer(Bundle).genBundleID()/]",
				"Running [aHandler.name/]!");
		return null;		
	}
[/if]


[if (not(aHandler.activateWith.matches('java.lang.String')))]
	/**
	 * The command has been executed, this method perform the action.
	 * @param selected
	 * 			the selected element
	 * @param event
	 * 			the execution of the action
	 * @return null
	 * @throws ExecutionException an exception
	 * @generated
	 */
	private Object doExecute(List<[aHandler.activateWith/]> selected, ExecutionEvent event) throws ExecutionException {		
		IWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);
		MessageDialog.openInformation(
				window.getShell(),
				"[aHandler.eContainer(Bundle).genBundleID()/]",
				"Running [aHandler.name/]!");
		return null;
	}
[/if]
[else]
	/**
	 * the command has been executed, so extract extract the needed information
	 * from the application context.
	 * @param event
	 * 			the execution of the action
	 * @return null
	 * @throws ExecutionException an exception
	 * @generated
	 */
	public Object execute(ExecutionEvent event) throws ExecutionException {
		IWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);
		MessageDialog.openInformation(
				window.getShell(),
				"[aHandler.eContainer(Bundle).genBundleID()/]",
				"Running [aHandler.name/]!");
		return null;
	}
[/if]
[/template]

[template private genBody(aHandler : DefaultHandler)]
	/**
	 * the command has been executed, so extract extract the needed information
	 * from the application context.
	 * @param event
	 * 			the execution of the action
	 * @return null
	 * @throws ExecutionException an exception
	 * @generated
	 */
	public Object execute(ExecutionEvent event) throws ExecutionException {
		IWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);
		MessageDialog.openInformation(
				window.getShell(),
				"[aHandler.eContainer(Bundle).genBundleID()/]",
				"Running [aHandler.name/]!");
		return null;
	}
[/template]
