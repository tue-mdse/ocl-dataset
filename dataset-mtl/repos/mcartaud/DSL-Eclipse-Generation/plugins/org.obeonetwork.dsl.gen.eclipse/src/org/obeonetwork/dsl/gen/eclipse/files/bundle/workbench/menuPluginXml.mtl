[comment encoding = UTF-8 

Copyright (c) 2012 Obeo
All rights reserved.  This program and the accompanying materials
are made available under the terms of the Eclipse Public License 1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

You can apply any license to the files generated with this module and Acceleo.

Contributors :
	Mathieu Cartaud (Obeo) - initial API and implementation
/]
[module menuPluginXml('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/2002/GenModel', 'http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::normalizeName /]


[template public menuTemplate(aBundle : Bundle)]
   <extension
         point="org.eclipse.ui.menus">
[for (aMenu : MenuContribution | aBundle.menuContributions)]
[if (aMenu.perspectives->size() > 0 or aMenu.editors->size() > 0)]
[aMenu.menuContribution()/]
[/if][if (aMenu.perspectives->size() = 0 and aMenu.editors->size() = 0 and aMenu.views->size() = 0)]
[aMenu.menuContribution()/]
[/if][if (aMenu.views->size() > 0)]
[aMenu.viewMenuContribution()/]
[/if][/for]
[for (aToolbar : ToolbarContribution | aBundle.toolbarContributions)]
[if (aToolbar.perspectives->size() > 0 or aToolbar.editors->size() > 0)]
[aToolbar.toolbarContribution()/]
[/if][if (aToolbar.perspectives->size() = 0 and aToolbar.editors->size() = 0 and aToolbar.views->size() = 0)]
[aToolbar.toolbarContribution()/]
[/if][if (aToolbar.views->size() > 0)]
[aToolbar.viewToolbarContribution()/]
[/if][/for]
[for (aPopup : PopupMenuContribution | aBundle.popupMenuContributions)]
[aPopup.popupContribution()/]
[/for]
   </extension>
[/template]




[template private menuContribution(aMenu : MenuContribution)]
      <menuContribution
            locationURI="menu:org.eclipse.ui.main.menu?after=additions">
[aMenu.genMenuContribution()/]
      </menuContribution>
[/template]

[template private genMenuContribution(aMenu : MenuContribution)]
         <menu
               label="%Menu-[aMenu.refactorMenuName().toUpperFirst()/]-Name"
               mnemonic="%Menu-[aMenu.refactorMenuName().toUpperFirst()/]-Mnemonic"
               id="[aMenu.genMenuID()/]">
[if (aMenu.perspectives->size() > 0 or aMenu.editors->size() > 0)]
[aMenu.genMenuActivation()/]
[/if][if (aMenu.eInverse(MenuContribution)->size() = 0)]
[aMenu.genMenuCommand()/]
[/if][for (aSecondMenu : MenuContribution | aMenu.menuContributions)]
[aSecondMenu.genMenuContribution()/]
[/for]
         </menu>
[/template]

[template private genMenuActivation(aMenu : MenuContribution)]
			<visibleWhen checkEnabled="false">
			   <or>
[if (aMenu.perspectives->size() > 0)]
            	<with variable="activeWorkbenchWindow.activePerspective">
				  <or>
[for (aPerspective : Perspective | aMenu.perspectives)]
                	<equals value="[aPerspective.genPerspectiveID()/]"/>
[/for]
				  </or>
            	</with>
[/if][if (aMenu.editors->size() > 0)]
            	<with variable="activePartId">
				  <or>
[for (anEditor : Editor | aMenu.editors)]
                	<equals value="[anEditor.genEditorID()/]"/>
[/for]
				  </or>
            	</with>
[/if]
			   </or>
<!--[protected (': add your own visibility rules for the menus ' + aMenu.name + '-->')]
<!--[/protected]-->
         	</visibleWhen>
[/template]

[template private genMenuCommand(aMenu : MenuContribution)]
[for (aCommand : Command | aMenu.commands)]
            <command
                  commandId="[aCommand.genCommandID()/]"
                  icon="icons/[aCommand.iconName()/]"
				  mnemonic="%Command-[aCommand.refactorCommandName().toUpperFirst()/]-Mnemonic"
                  id="[aCommand.eContainer(Bundle).genBundleID()/].menus.[aCommand.refactorCommandName().toLowerFirst()/]">
            </command>
[/for]
[/template]

[template private popupContribution(aPopup : PopupMenuContribution)]
	  <menuContribution
            allPopups="true"
            locationURI="popup:org.eclipse.ui.popup.any?after=additions">
[if (aPopup.menus->size() > 0)]
[aPopup.genMenuPopupContribution()/]
[/if][if (aPopup.commands->size() > 0)]
[aPopup.genActionPopupContribution()/]
[/if]
      </menuContribution>
[/template]

[template private genMenuPopupContribution(aPopup : PopupMenuContribution)]
[for (aMenu : MenuContribution | aPopup.menus)]
         <menu
               label="%Menu-[aMenu.refactorMenuName().toUpperFirst()/]-Name"
               mnemonic="%Menu-[aMenu.refactorMenuName().toUpperFirst()/]-Mnemonic"
               id="[aMenu.genMenuID()/]">
[for (aCommand : Command | aMenu.commands)]
[aCommand.genActionMenuPopupContribution()/]
[/for]
[if (aPopup.editors->size() > 0 or aPopup.views->size() > 0 or aPopup.perspectives->size() > 0)]
[aPopup.genPopupActivation(aMenu)/]
[/if]
         </menu>
[/for]
[/template]

[template private genActionMenuPopupContribution(aCommand : Command)]
            <command
                  commandId="[aCommand.genCommandID()/]"
                  icon="icons/[aCommand.iconName()/]"
				  mnemonic="%Command-[aCommand.refactorCommandName().toUpperFirst()/]-Mnemonic"
                  id="[aCommand.eContainer(Bundle).genBundleID()/].menus.[aCommand.refactorCommandName().toLowerFirst()/]">
            </command>
[/template]

[template private genActionPopupContribution(aPopup : PopupMenuContribution)]
[for (aCommand : Command | aPopup.commands)]
            <command
                  commandId="[aCommand.genCommandID()/]"
                  icon="icons/[aCommand.iconName()/]"
				  mnemonic="%Command-[aCommand.refactorCommandName().toUpperFirst()/]-Mnemonic"
                  id="[aCommand.eContainer(Bundle).genBundleID()/].menus.[aCommand.refactorCommandName().toLowerFirst()/]">
[if (aPopup.views->size() > 0 or aPopup.editors->size() > 0 or aPopup.perspectives->size() > 0)]
[aPopup.genPopupActivation(aCommand)/]
[/if]
            </command>
[/for]
[/template]

[template private genPopupActivation(aPopup : PopupMenuContribution, aCommand : Command)]
			<visibleWhen checkEnabled="false">
			  <and>
			   <or>
[if (aPopup.perspectives->size() > 0)]
            	<with variable="activeWorkbenchWindow.activePerspective">
				  <or>
[for (aPerspective : Perspective | aPopup.perspectives)]
                	<equals value="[aPerspective.genPerspectiveID()/]"/>
[/for]
				  </or>
            	</with>
[/if][if (aPopup.editors->size() > 0 or aPopup.views->size() > 0)]
            	<with variable="activePartId">
				  <or>
[for (anEditor : Editor | aPopup.editors)]
                	<equals value="[anEditor.genEditorID()/]"/>
[/for][for (aView : View | aPopup.views)]
                	<equals value="[aView.genViewID()/]"/>
[/for]
				  </or>
            	</with>
[/if]
			   </or>
[if (aPopup.activateWith.toString().contains('.'))]
               <with
                     variable="selection">
                  <instanceof
                        value="[aPopup.activateWith/]">
                  </instanceof>
                  <count
                        value="+">
                  </count>
               </with>
[/if]
			  </and>
<!--[protected (': add here your own visibility rules for the popup command ' + aCommand.name + '-->')]
<!--[/protected]-->
         	</visibleWhen>
[/template]

[template private genPopupActivation(aPopup : PopupMenuContribution, aMenu : MenuContribution)]
			<visibleWhen checkEnabled="false">
			  <and>
			   <or>
[if (aPopup.perspectives->size() > 0)]
            	<with variable="activeWorkbenchWindow.activePerspective">
				  <or>
[for (aPerspective : Perspective | aPopup.perspectives)]
                	<equals value="[aPerspective.genPerspectiveID()/]"/>
[/for]
				  </or>
            	</with>
[/if][if (aPopup.editors->size() > 0 or aPopup.views->size() > 0)]
            	<with variable="activePartId">
				  <or>
[for (anEditor : Editor | aPopup.editors)]
                	<equals value="[anEditor.genEditorID()/]"/>
[/for][for (aView : View | aPopup.views)]
                	<equals value="[aView.genViewID()/]"/>
[/for]
				  </or>
            	</with>
[/if]
			   </or>
[if (aPopup.activateWith.toString().contains('.'))]
               <with
                     variable="selection">
                  <instanceof
                        value="[aPopup.activateWith/]">
                  </instanceof>
                  <count
                        value="+">
                  </count>
               </with>
[/if]
			  </and>
<!--[protected (': add here your own visibility rules for the popup menu ' + aMenu.name + '-->')]
<!--[/protected]-->
         	</visibleWhen>
[/template]




[template private toolbarContribution(aToolbar : ToolbarContribution)]
      <menuContribution
            locationURI="toolbar:org.eclipse.ui.main.toolbar?after=additions">
[aToolbar.genToolbarContribution()/]
      </menuContribution>
[/template]

[template private genToolbarContribution(aToolbar : ToolbarContribution)]
         <toolbar
               id="[aToolbar.genToolbarID()/]">
[aToolbar.genToolbarCommand()/]
         </toolbar>
[/template]

[template private genToolbarCommand(aToolbar : ToolbarContribution)]
[for (aCommand : Command | aToolbar.commands)]
            <command
                  commandId="[aCommand.genCommandID()/]"
                  icon="icons/[aCommand.iconName()/]"
                  tooltip="%Command-[aCommand.refactorCommandName().toUpperFirst()/]-Tooltip"
                  id="[aCommand.eContainer(Bundle).genBundleID()/].toobars.[aCommand.refactorCommandName().toLowerFirst()/]">
[if (aToolbar.editors->size() > 0 or aToolbar.perspectives->size() > 0)]
[aToolbar.genToolbarActivation(aCommand)/]
[/if]
            </command>
[/for]
[/template]

[template private genToolbarActivation(aToolbar : ToolbarContribution, aCommand : Command)]
			<visibleWhen checkEnabled="false">
			   <or>
[if (aToolbar.perspectives->size() > 0)]
            	<with variable="activeWorkbenchWindow.activePerspective">
				  <or>
[for (aPerspective : Perspective | aToolbar.perspectives)]
                	<equals value="[aPerspective.genPerspectiveID()/]"/>
[/for]
				  </or>
            	</with>
[/if][if (aToolbar.editors->size() > 0)]
            	<with variable="activePartId">
				  <or>
[for (anEditor : Editor | aToolbar.editors)]
                	<equals value="[anEditor.genEditorID()/]"/>
[/for]
				  </or>
            	</with>
[/if]
			   </or>
<!--[protected (': add here your own visibility rules for the toolbar command ' + aCommand.name + '-->')]
<!--[/protected]-->
         	</visibleWhen>
[/template]





[template private viewToolbarContribution(aToolbar : ToolbarContribution)]
[for (aView : View | aToolbar.views)]
      <menuContribution
            locationURI="toolbar:[aView.genViewID()/]?after=additions">
[for (aCommand : Command | aToolbar.commands)]
[aCommand.genViewToolbarCommand()/]
[/for]
      </menuContribution>
[/for]
[/template]

[template private genViewToolbarCommand(aCommand : Command)]
            <command
                  commandId="[aCommand.genCommandID()/]"
                  icon="icons/[aCommand.iconName()/]"
                  tooltip="%Command-[aCommand.refactorCommandName().toUpperFirst()/]-Tooltip"
                  id="[aCommand.eContainer(Bundle).genBundleID()/].toolbars.[aCommand.refactorCommandName().toLowerFirst()/]">
            </command>
[/template]





[template private viewMenuContribution(aMenu : MenuContribution)]
[for (aView : View | aMenu.views)]
      <menuContribution
            locationURI="menu:[aView.genViewID()/]?after=additions">
[aMenu.genViewMenuContribution()/]
[for (aCommand : Command | aMenu.commands)]
[aCommand.genViewMenuCommand()/]
[/for]
      </menuContribution>
[/for]
[/template]

[template private genViewMenuContribution(aMenu : MenuContribution)]
[for (aMenu)][if (not(aMenu.name.oclIsUndefined()))]
         <menu
               label="%Menu-[aMenu.refactorMenuName().toUpperFirst()/]-Name"
               mnemonic="%Menu-[aMenu.refactorMenuName().toUpperFirst()/]-Mnemonic"
               id="[aMenu.eContainer(Bundle).genBundleID()/].viewMenu-id.[aMenu.refactorMenuName()/]">
[/if][if (aMenu.eInverse(MenuContribution)->size() = 0)][for (aCommand : Command | aMenu.commands)]
[aCommand.genViewMenuCommand()/]
[/for][/if]
[for (aSecondMenu : MenuContribution | aMenu.menuContributions)]
[aSecondMenu.genViewMenuContribution()/]
[/for]
[if (not(aMenu.name.oclIsUndefined()))]
         </menu>
[/if][/for]
[/template]

[template private genViewMenuCommand(aCommand : Command)]
            <command
                  commandId="[aCommand.genCommandID()/]"
                  icon="icons/[aCommand.iconName()/]"
				  mnemonic="%Command-[aCommand.refactorCommandName().toUpperFirst()/]-Mnemonic"
                  id="[aCommand.eContainer(Bundle).genBundleID()/].menus.[aCommand.refactorCommandName().toLowerFirst()/]">
            </command>
[/template]
