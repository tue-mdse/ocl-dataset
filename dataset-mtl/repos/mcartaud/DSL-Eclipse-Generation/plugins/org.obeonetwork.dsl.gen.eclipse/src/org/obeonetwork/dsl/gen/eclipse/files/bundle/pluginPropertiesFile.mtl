[comment encoding = UTF-8 

Copyright (c) 2012 Obeo
All rights reserved.  This program and the accompanying materials
are made available under the terms of the Eclipse Public License 1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

You can apply any license to the files generated with this module and Acceleo.

Contributors :
	Mathieu Cartaud (Obeo) - initial API and implementation
/]
[module pluginPropertiesFile('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/2002/GenModel', 'http://www.obeonetwork.org/dsl/eclipse')]

[import org::obeonetwork::dsl::gen::eclipse::common::normalizeName /]

[template private pluginPropertiesFile(aBundle : Bundle)]
[aBundle.genBundlePath()/]/plugin.properties
[/template]

[template public genPluginPropertiesFile(aBundle : Bundle)]
[file (aBundle.pluginPropertiesFile(), false, 'UTF-8')]
#User information for the Bundle
Bundle-Name = [aBundle.name/]
Bundle-Provider = [aBundle.refactorName()/]

[if (aBundle.eAllContents(Wizard)->size() > 0)]
[aBundle.wizardInformation()/]
[/if]
[if (aBundle.natures->size() > 0)]
[aBundle.natureInformation()/]
[/if]
[if (aBundle.builders->size() > 0)]
[aBundle.builderInformation()/]
[/if]
[if (aBundle.eAllContents(View)->size() > 0)]
[aBundle.viewInformation()/]
[/if]
[if (aBundle.editors->size() > 0)]
[aBundle.editorInformation()/]
[/if]
[if (aBundle.commands->size() > 0)]
[aBundle.commandInformation()/]
[/if]
[if (aBundle.contexts->size() > 0)]
[aBundle.commandInformation()/]
[/if]
[if (aBundle.perspectives->size() > 0)]
[aBundle.perspectiveInformation()/]
[/if]
[if (aBundle.markers->size() > 0)]
[aBundle.markerInformation()/]
[/if]
[if (aBundle.menuContributions->size() > 0)]
[aBundle.mnemonicInformation()/]
[/if]
[if (aBundle.menuContributions->size() > 0 or aBundle.popupMenuContributions->size() > 0)]
[aBundle.menuInformation()/]
[/if]
[/file]
[/template]

[template private wizardInformation(aBundle : Bundle)]

#User information for the wizards
[for (aWizard : Wizard | aBundle.eAllContents(Wizard))]
[if (aWizard.category->size() > 0)]
Wizard-[aWizard.category.refactorCategoryName().toUpperFirst()/]-Category-Name = [aWizard.category.name/]
[/if]Wizard-[aWizard.refactorWizardName().toUpperFirst()/]-Name = [aWizard.name/]
Wizard-[aWizard.refactorWizardName().toUpperFirst()/]-Description = [aWizard.description/]

[/for]
[/template]

[template private natureInformation(aBundle : Bundle)]

#User information for the natures
[for (aNature : Nature | aBundle.natures)]
Nature-[aNature.refactorNatureName().toUpperFirst()/]-Name = [aNature.name/]

[/for]
[/template]

[template private builderInformation(aBundle : Bundle)]

#User information for the builders
[for (aBuilder : Builder | aBundle.builders)]
Builder-[aBuilder.refactorBuilderName().toUpperFirst()/]-Name = [aBuilder.name/]

[/for]
[/template]

[template private viewInformation(aBundle : Bundle)]

#User information for the views
[for (aView : View | aBundle.views)]
[if (aView.category->size() > 0)]
View-[aView.category.refactorCategoryName().toUpperFirst()/]-Category-Name = [aView.category.name/]
[/if]View-[aView.refactorViewName().toUpperFirst()/]-Name = [aView.name/]

[/for]
[/template]

[template private editorInformation(aBundle : Bundle)]

#User information for the editors
[for (anEditor : Editor | aBundle.editors)]
Editor-[anEditor.refactorEditorName().toUpperFirst()/]-Name = [anEditor.name/]

[if (anEditor.editorType.toString().matches('EMF'))]
#Informations for EMF editor

_UI_[anEditor.name.replaceAll(' ', '').toUpperFirst()/]Editor_menu = [anEditor.name.replaceAll(' ', '').toUpperFirst()/] Editor

_UI_CreateChild_menu_item = &New Child
_UI_CreateSibling_menu_item = N&ew Sibling

_UI_ShowPropertiesView_menu_item = Show &Properties View
_UI_RefreshViewer_menu_item = &Refresh

_UI_SelectionPage_label = Selection
_UI_TextPage_label = Text
_UI_ObjectColumn_label = Object
_UI_SelfColumn_label = Self

_UI_NoObjectSelected = Selected Nothing
_UI_SingleObjectSelected = Selected Object: {0}
_UI_MultiObjectSelected = Selected {0} Objects

_UI_OpenEditorError_label = Open Editor

_UI_CreateModelError_message = Problems encountered in file "{0}"

_UI_[anEditor.name.replaceAll(' ', '').toUpperFirst()/]Editor_label = [anEditor.name.replaceAll(' ', '').toUpperFirst()/] Model Editor

_WARN_FilenameExtension = The file name must end in ''.{0}''
_WARN_FilenameExtensions = The file name must have one of the following extensions: {0}

_UI_ModelObject = &Model Object
_UI_XMLEncoding = &XML Encoding
_UI_XMLEncodingChoices = UTF-8 ASCII UTF-16 UTF-16BE UTF-16LE ISO-8859-1
_UI_Wizard_initial_object_description = Select a model object to create

_UI_FileConflict_label = File Conflict
_WARN_FileConflict = There are unsaved changes that conflict with changes made outside the editor.  Do you wish to discard this editor's changes?

[/if]

[/for]
[/template]

[template private commandInformation(aBundle : Bundle)]

#User information for the commands
[for (aCommand : Command | aBundle.commands)]
[if (aCommand.category->size() > 0)]
Command-[aCommand.category.refactorCategoryName().toUpperFirst()/]-Category-Name = [aCommand.category.name/]
[/if]Command-[aCommand.refactorCommandName().toUpperFirst()/]-Name = [aCommand.name/]
Command-[aCommand.refactorCommandName().toUpperFirst()/]-Tooltip = [aCommand.tooltip/]
Command-[aCommand.refactorCommandName().toUpperFirst()/]-Mnemonic = [aCommand.mnemonic/]

[/for]
[/template]

[template private menuInformation(aBundle : Bundle)]

#User information for the menus
[for (aMenu : MenuContribution | aBundle.menuContributions)]
Menu-[aMenu.refactorMenuName().toUpperFirst()/]-Name = [aMenu.name/]
[/for]
[/template]

[template public contextInformation(aBundle : Bundle)]

#User information for the Handlers Contexts
[for (aContext : Context | aBundle.contexts)]
Context-[aContext.refactorContextName().toUpperFirst()/]-Name = [aContext.name/]
Context-[aContext.refactorContextName().toUpperFirst()/]-Description = [aContext.description/]
[/for]

[/template]

[template private perspectiveInformation(aBundle : Bundle)]

#User information for the Perspectives
[for (aPerspective : Perspective | aBundle.perspectives)]
Perspective-[aPerspective.refactorPerspectiveName().toUpperFirst()/]-Name = [aPerspective.name/]

[/for]
[/template]

[template private markerInformation(aBundle : Bundle)]

#User information for the Markers
[for (aMarker : Marker | aBundle.markers)]
Marker-[aMarker.refactorMarkerName().toUpperFirst()/]-Name = [aMarker.name/]

[/for]
[/template]

[template private mnemonicInformation(aBundle : Bundle)]

#User information for the Menu's mnemonic
[for (aMenu : MenuContribution | aBundle.menuContributions)][if (not(aMenu.eContainer().oclIsKindOf(View)))]
Menu-[aMenu.refactorMenuName().toUpperFirst()/]-Mnemonic = [aMenu.mnemonic/]
[/if][/for]

[/template]
