[comment encoding = UTF-8 /]
[module boardShr5GeneratorSheet('http://urszeidler.de/shr5/1.0', 'http://urszeidler.de/shr5mngt/1.0', 'http://www.eclipse.org/emf/2002/Ecore')/]
[import de::urszeidler::shr5::acceleo::common::ShadowrunTools  /]
[import de::urszeidler::shr5::acceleo::common::ShadowrunManagmentTools  /]
[import de::urszeidler::shr5::acceleo::sheets::boardCharacterSheet/]
[import de::urszeidler::shr5::acceleo::common::ShadowrunSheetTools  /]
[import de::urszeidler::shr5::acceleo::common::ShadowrunBBSheetTools  /]

[template public boardShr5GeneratorSheetManagedCharacter(aShr5Generator : Shr5Generator)]	
	[comment @main /]
[file ('Shr5Generator-'+aShr5Generator.characterName+'.txt', false, 'UTF-8')]
[generateShr5GeneratorSheet(aShr5Generator)/]
[/file]

	
[/template]


[template public generateShr5GeneratorSheet(aShr5Generator : Shr5Generator) 
{aManagedCharacter : ManagedCharacter = aShr5Generator.character;
empty :String =  '.........................' ;
empty1 :String = '....' ;
shr5System : Shr5System = aShr5Generator.generator.oclAsType(Shr5System);
}]
[printGeneratorReport(aShr5Generator)/]

[printAttributeSum(aShr5Generator,empty,empty1)/]

Skillgroup sum     : [sumSkillGroups(aManagedCharacter.persona)/]
Skill      sum     : [sumActiveSkills(aManagedCharacter.persona)/]
Knowlege skill/sum : [calcKnownlegeSkillPoints(aManagedCharacter, shr5System) /]/[sumKnowSkills(aManagedCharacter.persona)/]
Quallity sum       : [sumQuallitiyKarma(aManagedCharacter.persona.oclAsType(KoerperPersona))/]
Connections        : [calcConnectionsPoints(aManagedCharacter, shr5System)/]/[calcConnectionsSpend(aManagedCharacter)/]
Resources spend    : [calcResourcesSpend(aManagedCharacter)/]

[printKarmaBase(aShr5Generator)/]

[printBoardCharacterReport(aManagedCharacter)/]
[/template]

[template public printKarmaBase (aShr5Generator : Shr5Generator) 
{aManagedCharacter : ManagedCharacter = aShr5Generator.character;
shr5System : Shr5System = aShr5Generator.generator.oclAsType(Shr5System);
a : CharacterAdvancementSystem = aShr5Generator.generator.characterAdvancements
}]
['Calculated Karma Cost'.italicText()/]
Karma spend by attributes   : [calcKarmaSpendByAttributes(aManagedCharacter, a)/]
Karma spend by skillgroups  : [calcKarmaSpendBySkillGroups(aManagedCharacter, a)/]
Karma spend by skills       : [calcKarmaSpendBySkills(aManagedCharacter, a)/]
Karma spend by specalism    : [calcKarmaSpendBySpecalism(aManagedCharacter, a)/]
Karma spend by resourcen    : [calcKarmaSpendByResources(aShr5Generator)/]
Karma spend by quallities   : [calcKarmaSpendByQuallities(aManagedCharacter, a)/]
[if (aManagedCharacter.persona.oclIsKindOf(Zauberer))]
Karma spend by spells       : [calcKarmaSpendBySpellsOrForms(aManagedCharacter, a)/]
[/if]
[if (aManagedCharacter.persona.oclIsKindOf(Technomancer) )]
Karma spend by complex forms: [calcKarmaSpendBySpellsOrForms(aManagedCharacter, a)/]
[/if]
Karma spend by connections  : [calcKarmaSpendByConnections(aManagedCharacter)/]

karma worth                 : [calcCompleteKaramaSpend(aManagedCharacter, aShr5Generator.generator.characterAdvancements)/]

[/template]

[template public printAttributeSum (aShr5Generator : Shr5Generator,emtpty :String,empty1 :String)
{aManagedCharacter : ManagedCharacter = aShr5Generator.character;
species : Spezies =  aShr5Generator.character.persona.spezies ;
persona : AbstraktPersona = aShr5Generator.character.persona ;} ]
['Attribute points'.titelText()/]
[printTextPlusSpace('.', emtpty)/][printTextPlusSpace('rtg', empty1) /]pt
[for (ea : EAttribute | getOrderedBasedAttibutesForPersona(persona))]
[let attributeName : String = getText(base2Calced(ea))]
[printTextPlusSpace(attributeName, emtpty)/][printTextPlusSpace(persona.eGet(ea).toString(), empty1) /][persona.eGet(ea).oclAsType(Integer)- species.eGet(ea.base2SpeciesMin()).oclAsType(Integer)/]  
[/let]
[/for]

[printTextPlusSpace('sum', emtpty)/][printTextPlusSpace('.', empty1) /][sumAttributes(aManagedCharacter.persona)/]
[/template]

[template private printGeneratorValues(aShr5Generator : Shr5Generator){aManagedCharacter : ManagedCharacter = aShr5Generator.character;
shr5System : Shr5System = aShr5Generator.generator.oclAsType(Shr5System);
}]
Generator system 	  [getText(aShr5Generator.generator)/] 	
Karma to spend   	  [shr5System.karmaPoints  /] 
Karma to resource 	  [aShr5Generator.karmaToResource/]
Resources complete 	  [aShr5Generator.resourcen.resource + calcKarmaToResources(aShr5Generator, shr5System)  /]
Connections points 	  [calcConnectionsPoints(aManagedCharacter, shr5System) /]
Knowledge skills 	  [calcKnownlegeSkillPoints(aManagedCharacter, shr5System) /]

Start Karma			  [aShr5Generator.startKarma /]
Start Resources		  [aShr5Generator.startResources /]
[/template]

[**
 * Print the chosen prorities.
*/]
[template public printGeneratorReport(aShr5Generator : Shr5Generator )]
['Priorities'.titelText()/]
[getText(aShr5Generator.attribute)/]
[getText(aShr5Generator.skills)/]
[getText(aShr5Generator.metaType)/]
[getText(aShr5Generator.magic)/]
[getText(aShr5Generator.resourcen)/]

[printGeneratorValues(aShr5Generator)/]
[/template]