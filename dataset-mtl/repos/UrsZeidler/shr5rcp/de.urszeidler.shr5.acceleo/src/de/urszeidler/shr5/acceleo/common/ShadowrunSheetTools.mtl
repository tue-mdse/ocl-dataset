[comment encoding = UTF-8 /]
[**
 * various helper and queries
 */]
[module ShadowrunSheetTools('http://urszeidler.de/shr5/1.0', 'http://urszeidler.de/shr5mngt/1.0', 'http://www.eclipse.org/emf/2002/Ecore')/]
[import de::urszeidler::shr5::acceleo::common::ShadowrunTools  /]
[import de::urszeidler::shr5::acceleo::util::shadowrunTextTools  /]


[query public combatInfoTitel(list : OclAny) : Sequence(String) = 
  Sequence{'_UI_SpezielleAttribute_ausweichen_feature'.localizedString(),
   '_UI_Panzerung_panzer_feature'.localizedString()} /]
[query public combatInfoValues(character : ManagedCharacter) : Sequence(String) = 
  Sequence{character.persona.ausweichen,
    character.persona.oclAsType(KoerperPersona).panzer
     } /]
[query public combatInfo(character : ManagedCharacter) : Sequence(Sequence(String))= 
  Sequence{ combatInfoTitel(),combatInfoValues(character)
     } /]


[query public itemListTitel(list : Collection(AbstraktGegenstand)) : Sequence(String) = 
  Sequence{'_UI_Beschreibbar_name_feature'.localizedString(),'code','page'} /]
[query public itemList(list : Collection(AbstraktGegenstand)) : Sequence(Sequence(String)) = 
  Sequence{beschreibbarNameList(list),scrCodeList(list),scrPageList(list)} /]

[query public beschreibbarNameList(list : Collection(Beschreibbar)) : Sequence(String) = list->collect(getText())->asSequence() /]
[query public scrNameList(list : Collection(Quelle)) : Sequence(String) = list->collect(srcBook.getSimpleText())->asSequence() /]
[query public scrCodeList(list : Collection(Quelle)) : Sequence(String) = list->collect(srcBook.code)->asSequence() /]
[query public scrPageList(list : Collection(Quelle)) : Sequence(String) = list->collect(page)->asSequence() /]
[query public moneyList(list : Collection(GeldWert)) : Sequence(String) = list->collect(formatMoney())->asSequence() /]


[query public armorList(character : ManagedCharacter) : Sequence(String) = character.inventar->select(oclIsKindOf(Kleidung))->collect(getText()->asSequence()) /]
[query public armorValueList(character : ManagedCharacter) : Sequence(String) = character.inventar->select(oclIsKindOf(Kleidung))->collect(oclAsType(Kleidung).ruestung.getText()->asSequence()) /]

[query public connectionList(character : ManagedCharacter) : Sequence(String) = character.connections->collect(getText()->asSequence()) /]
[query public connectionListSimple(character : ManagedCharacter) : Sequence(String) = character.connections->collect(getSimpleText())->asSequence() /]
[query public magazineList(character : ManagedCharacter) : Sequence(String) = character.eAllContents()->selectByType(Magazin)->collect(getText())->asSequence() /]

[query public quallityList(character : ManagedCharacter) : Sequence(String) = character.persona.oclAsType(KoerperPersona).eigenschaften->collect(getText()->asSequence()) /]
[query public quallityListSimple(character : ManagedCharacter) : Sequence(String) = character.persona.oclAsType(KoerperPersona).eigenschaften->collect(getSimpleText()->asSequence()) /]

[query public getSimpleText(arg0 : OclAny) : String
	= invoke('de.urszeidler.shr5.acceleo.util.ShadowrunTextTools', 'getSimpleText(java.lang.Object)', Sequence{arg0})
/]


[**
 * Get the text from the item descriptor.
 */]
[query public getText(anOclAny: OclAny) : String
	= invoke('de.urszeidler.shr5.acceleo.util.ShadowrunTextTools', 'getObjectText(java.lang.Object)', Sequence{anOclAny})
/]

[query public sumAttributes(persona : AbstraktPersona) : Integer = 
getOrderedBasedAttibutesForPersona(persona)
	->collect(ea|persona.eGet(ea).oclAsType(Integer)- persona.spezies.eGet(ea.base2SpeciesMin()).oclAsType(Integer)      )->sum() 
/]

[query public sumSkillGroups(persona : AbstraktPersona) : Integer = 
persona.fertigkeitsGruppen ->collect(pfg| pfg.stufe    )->sum() 
/]

[query public sumActiveSkills(persona : AbstraktPersona) : Integer = 
persona.fertigkeiten->select(pf | not pf.fertigkeit.oclIsKindOf(Wissensfertigkeit)) ->collect(pfg| pfg.stufe    )->sum() 
/]

[query public sumKnowSkills(persona : AbstraktPersona) : Integer = 
persona.fertigkeiten->select(pf | pf.fertigkeit.oclIsTypeOf(Wissensfertigkeit)) ->collect(pfg| pfg.stufe    )->sum() 
/]

[query public sumQuallitiyKarma(persona : KoerperPersona) : Integer = 
persona.eigenschaften->collect(pfg| pfg.karmaKosten    )->sum() 
/]

[query public sumQuallitiyKarma(pe : OrderedSet(PersonaEigenschaft)) : Integer = 
pe->collect(pfg| pfg.karmaKosten    )->sum() 
/]

[**
 * Simple template to create engougth space. 
*/]
[template public printTextPlusSpace(text : String,emtpty :String )
{ rest : Integer = emtpty.size() -  text.size() ;
}]
[if (rest>0)]
[text.concat(emtpty.substring(text.size()))/][else]
[text/][/if][/template]

[template public quallityType(qua : PersonaEigenschaft) ]
[if (qua.karmaKosten<0)]N[else]P[/if][/template]

[query public liftCarry(persona : AbstraktPersona) : String = 
(persona.staerke  * 15)+'/'+(persona.staerke  * 10)/]


[query public cyberDeckAttributes(deck : Cyberdeck) : String = 
deck.attribute1+'|'+deck.attribute2+'|'+deck.attribute3+'|'+deck.attribute4 /]

[query public movement(persona : AbstraktPersona) : String = 
	(persona.geschicklichkeit * persona.spezies.laufen)
	+'/'+(persona.geschicklichkeit * persona.spezies.rennen)
	+'/'+persona.spezies.sprinten/]


[query public vehicleHandling (aFahrzeug : Bodenfahrzeug) : String = 
aFahrzeug.handling+'/'+aFahrzeug.handlingGelaende
 /]
[query public vehicleHandling (aFahrzeug : Fahrzeug) : String = 
aFahrzeug.geschwindigkeit.toString()
 /]
[query public vehicleSpeed(aFahrzeug : Fahrzeug) : String = 
aFahrzeug.geschwindigkeit.toString()
 /]
[query public vehicleSpeed(aFahrzeug : Bodenfahrzeug) : String = 
aFahrzeug.geschwindigkeit+'/'+aFahrzeug.geschwindigkeitGelaende
 /]
[query public vehicleBody(aFahrzeug : Fahrzeug) : String = 
aFahrzeug.rumpf.toString()
 /]


[template public printReichweite(fw : AbstaktFernKampfwaffe,sep:String,sep1:String){ r : Reichweite = fw.reichweite;}]
[r.min.toString()/][sep/][r.kurz.toString()/][sep1/][r.kurz.toString()/][sep/][r.mittel.toString()/][sep1/][r.mittel.toString()/][sep/][r.weit.toString()/][sep1/][r.weit.toString()/][sep/][r.extrem.toString()/][/template]

[template public printReichweiteCompact(fw : AbstaktFernKampfwaffe,sep:String){ r : Reichweite = fw.reichweite;}]
[r.min.toString()/][sep/][r.kurz.toString()/][sep/][r.mittel.toString()/][sep/][r.weit.toString()/][sep/][r.extrem.toString()/][/template]

[template public printEssence (persona : AbstraktPersona) ]
[persona.essenz/100/][/template]

[template public printBody(persona : AbstraktPersona)]
[persona.konstitutionBasis/][if(not (persona.konstitutionBasis=persona.konstitution))]([persona.konstitution/])[/if][/template]

[template public printWillpower(persona : AbstraktPersona)]
[persona.willenskraftBasis/][if(not (persona.willenskraftBasis=persona.willenskraft))]([persona.willenskraft/])[/if][/template]

[template public printAbility(persona : AbstraktPersona)]
[persona.geschicklichkeitBasis/][if(not (persona.geschicklichkeitBasis=persona.geschicklichkeit))]([persona.geschicklichkeit/])[/if] 
[/template]

[template public printLogic(persona : AbstraktPersona)]
[persona.logikBasis/][if(not (persona.logikBasis=persona.logik))]([persona.logik/])[/if][/template]

[template public printReaction(persona : AbstraktPersona)]
[persona.reaktionBasis/][if(not (persona.reaktionBasis=persona.reaktion))]([persona.reaktion/])[/if][/template]

[template public printIntuition(persona : AbstraktPersona)]
[persona.intuitionBasis/][if(not (persona.intuitionBasis=persona.intuition))]([persona.intuition/])[/if][/template]


[template public printCharisma (persona : AbstraktPersona) ]
[persona.charismaBasis/][if(not (persona.charismaBasis=persona.charisma))]([persona.charisma/])[/if][/template]

[template public printStrength (persona : AbstraktPersona) ]
[persona.staerkeBasis/][if(not (persona.staerkeBasis=persona.staerke))]([persona.staerke/])[/if][/template]


[template public printSource(src : Quelle)]
[src.srcBook.getText()/] page [src.page/]
[/template]


