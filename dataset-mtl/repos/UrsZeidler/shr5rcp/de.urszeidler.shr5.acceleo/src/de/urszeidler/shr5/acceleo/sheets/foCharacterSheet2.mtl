[comment encoding = UTF-8 /]
[module foCharacterSheet2('http://urszeidler.de/shr5/1.0', 'http://urszeidler.de/shr5mngt/1.0', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import de::urszeidler::shr5::acceleo::common::ShadowrunTools  /]
[import de::urszeidler::shr5::acceleo::common::ShadowrunManagmentTools  /]
[import de::urszeidler::shr5::acceleo::common::ShadowrunSheetTools  /]
[import de::urszeidler::shr5::acceleo::common::shr5EEnumhelper  /]
[import de::urszeidler::shr5::acceleo::common::shr5ManagementEEnumhelper  /]
[import de::urszeidler::shr5::acceleo::util::shadowrunTextTools  /]
[import de::urszeidler::shr5::acceleo::sheets::svgCharacterSheet /]
[import de::urszeidler::shr5::acceleo::sheets::foCharacterSheet  /]
[import de::urszeidler::shr5::acceleo::common::foSheetTools  /]


[template public foCharacterSheet2(aManagedCharacter : ManagedCharacter)]
	
	[comment @main /]
[file (aManagedCharacter.getText().concat('2.fo'), false, 'UTF-8')]
[printFoPageStart(aManagedCharacter.getText())/]	

[printFirstPage(aManagedCharacter)/]
<fo:block break-after="page"></fo:block>	
[printSecondPage(aManagedCharacter)/]	
<fo:block break-after="page"></fo:block>	
[printVehiclePage(aManagedCharacter)/]	
<fo:block break-after="page"></fo:block>	
[printMatrixPage(aManagedCharacter)/]	
<fo:block break-after="page"></fo:block>	
[printMagicPage(aManagedCharacter)/]	

[printSimpleFoPageEnd()/]		
[/file]
	
[/template]

[template public printMagicPage (aManagedCharacter : ManagedCharacter) ]
<!-- matix page -->
  <fo:table font-family="Helvetica"  >
    <fo:table-column  />
    <fo:table-column  />
    <fo:table-column  />
    <fo:table-body  >
<!-- skill block -->
[if (aManagedCharacter.persona.oclIsKindOf(Zauberer))]
	<fo:table-row >
      <fo:table-cell margin="4pt" number-columns-spanned="3">
[printOneColumnTableRaw('_UI_Zauberer_zauber_feature'.localizedString(), zauberTableList(aManagedCharacter.persona.oclAsType(Zauberer)))/]
      </fo:table-cell>
     </fo:table-row>
[/if]
	<fo:table-row >

      	<fo:table-cell margin="4pt" number-columns-spanned="3">
			<fo:block margin-top="10pt" >
			</fo:block >
     	</fo:table-cell>
     </fo:table-row>

   </fo:table-body>
   </fo:table>
[/template]

[template public printMatrixPage (aManagedCharacter : ManagedCharacter) ]
<!-- matix page -->
  <fo:table font-family="Helvetica"  >
    <fo:table-column  />
    <fo:table-column  />
    <fo:table-column  />
    <fo:table-body  >
<!-- skill block -->
	<fo:table-row >
      <fo:table-cell margin="4pt" number-columns-spanned="2">
[printOneColumnTableRaw('Comlink',comlinkTableList(aManagedCharacter))/]
<fo:block margin-top="10pt" >
[printOneColumnTableRaw('cyberdeck',cyberdeckTableList(aManagedCharacter))/]
</fo:block>
<fo:block margin-top="10pt" >
[printOneColumnTableRaw('rigger',rccTableList(aManagedCharacter))/]
</fo:block>
      </fo:table-cell>
      <fo:table-cell margin="4pt">
[printTwoColumnTable('[sin]',sinList(aManagedCharacter),sinValueList(aManagedCharacter),80)/]
<fo:block margin-top="10pt" >
[printOneColumnTable('Magazine',magazineList(aManagedCharacter))/]
</fo:block>
      </fo:table-cell>
     </fo:table-row>

   </fo:table-body>
   </fo:table>

[/template]


[query public sinValueList (aManagedCharacter : ManagedCharacter) : Sequence(String) = aManagedCharacter.contracts->selectByType(Sin)->collect(oclAsType(Sin).stufe.getText())  /]
[query public sinList (aManagedCharacter : ManagedCharacter) : Sequence(String) = aManagedCharacter.contracts->selectByType(Sin)->collect(getText())  /]

[query public rccTableList (aManagedCharacter : ManagedCharacter) :  Sequence(String) = aManagedCharacter.inventar->selectByType(RiggerCommandConsole)->collect(printRiggerConsoleDetail()) /]
[query public cyberdeckTableList (aManagedCharacter : ManagedCharacter) :  Sequence(String) = aManagedCharacter.inventar->selectByType(Cyberdeck)->collect(printCyberdeckDetail()) /]
[query public comlinkTableList (aManagedCharacter : ManagedCharacter) : Sequence(String) = aManagedCharacter.inventar->selectByType(Commlink)->collect(printComlinkDetail()) /]

[query public zauberTableList (z : Zauberer) : Sequence(String) = printSpellTable(z)->asSequence() /]


[query public modList(character : ManagedCharacter) : Sequence(OclAny) = persona.getModList() /]
[query public modNameList(character : ManagedCharacter) : Sequence(String) = persona.getModList()->collect(at(1).getText()) /]
[query public modValeList(character : ManagedCharacter) : Sequence(String) = persona.getModList()->collect(at(2).getText()) /]




[template public printVehiclePage (aManagedCharacter : ManagedCharacter) ]
<!-- vehicle page -->
  <fo:table font-family="Helvetica"  >
    <fo:table-column  />
    <fo:table-column  />
    <fo:table-column  />
    <fo:table-body  >
<!-- skill block -->
	<fo:table-row >
      <fo:table-cell margin="4pt" number-columns-spanned="2">
[printVehicles(aManagedCharacter)/]
<fo:block margin-top="10pt" >

</fo:block>
      </fo:table-cell>
      <fo:table-cell margin="4pt">
[printTwoColumnTable('[implats]',implatsList(aManagedCharacter),implatsEsseceList(aManagedCharacter),80)/]
<fo:block margin-top="10pt" >
[printOneColumnTable('[contracts]',contractList(aManagedCharacter))/]
</fo:block>
      </fo:table-cell>
     </fo:table-row>

   </fo:table-body>
   </fo:table>
[/template]

[query public contractList (aManagedCharacter : ManagedCharacter) : Sequence(String) = aManagedCharacter.contracts->collect(getText()) /]
[query public implatsEsseceList (aManagedCharacter : ManagedCharacter) : Sequence(String) = aManagedCharacter.persona.oclAsType(KoerperPersona).koerperMods->collect(getEssencesValue()/100) /]
[query public implatsList (aManagedCharacter : ManagedCharacter) : Sequence(String) = aManagedCharacter.persona.oclAsType(KoerperPersona).koerperMods->collect(getText()) /]

[template public printSecondPage (aManagedCharacter : ManagedCharacter) ]
<!-- second page -->
  <fo:table font-family="Helvetica"  >
    <fo:table-column  />
    <fo:table-column  />
    <fo:table-column  />
    <fo:table-body  >
     <fo:table-row>
      <fo:table-cell margin="4pt">
[printOneColumnTable('Contacts',connectionListSimple(aManagedCharacter))/]
      </fo:table-cell>
      <fo:table-cell margin="4pt">
[printOneColumnTable('_UI_KoerperPersona_eigenschaften_feature'.localizedString(), quallityListSimple(aManagedCharacter) )/]
      </fo:table-cell>
      <fo:table-cell margin="4pt">
[printTwoColumnTable('[Mods]', modNameList(aManagedCharacter),modValeList(aManagedCharacter),80 )/]
      </fo:table-cell>
     </fo:table-row>
   </fo:table-body>
   </fo:table>

<!-- ranged block -->
 <fo:table font-family="Helvetica" margin-top="4pt"   >
    <fo:table-column  />
    <fo:table-column  />
    <fo:table-column  />
    <fo:table-body  >
	<fo:table-row >
      <fo:table-cell margin="4pt" number-columns-spanned="2">
[printRangeWapons(aManagedCharacter)/]
<fo:block margin-top="10pt" >
[printMeleeWapons(aManagedCharacter)/]
</fo:block>
      </fo:table-cell>
      <fo:table-cell margin="4pt">
[printTwoColumnTable('[armor]',armorList(aManagedCharacter),armorValueList(aManagedCharacter),80)/]
<fo:block margin-top="10pt" >
[printOneColumnTable('Magazine',magazineList(aManagedCharacter))/]
</fo:block>
      </fo:table-cell>
     </fo:table-row>

   </fo:table-body>
   </fo:table>

[/template]

[template public printRangeWapons (aManagedCharacter : ManagedCharacter) ]
<!-- one column table -->
  <fo:table font-size="small" font-weight="lighter" [defaultBorderAll()/]>
   <fo:table-column  />
    <fo:table-body  >
[printSectionHeader('RangedWapons', 1)/]
[for (f : AbstaktFernKampfwaffe | aManagedCharacter.inventar->select(oclIsKindOf(AbstaktFernKampfwaffe)))]
    <fo:table-row>
       <fo:table-cell>
[printRangeWeapon(f,25)/]
 		</fo:table-cell>
   </fo:table-row>
[printSimpleLine(1)/]
[/for]
   </fo:table-body>
   </fo:table>
[/template]

[template public printVehicles (aManagedCharacter : ManagedCharacter) ]
<!-- one column table -->
  <fo:table font-size="small" font-weight="lighter" [defaultBorderAll()/]>
   <fo:table-column  />
    <fo:table-body  >
[printSectionHeader('Vehicles', 1)/]
[for (f : Fahrzeug | aManagedCharacter.vehicels)]
    <fo:table-row>
       <fo:table-cell>
[printVehicle(f)/]
 		</fo:table-cell>
   </fo:table-row>
[printSimpleLine(1)/]
[/for]
   </fo:table-body>
   </fo:table>
[/template]

[template public printMeleeWapons (aManagedCharacter : ManagedCharacter) ]
<!-- one column table -->
  <fo:table font-size="small" font-weight="lighter" [defaultBorderAll()/]>
   <fo:table-column  />
    <fo:table-body  >
[printSectionHeader('MeeWapons', 1)/]
[for (f : Nahkampfwaffe | aManagedCharacter.inventar->select(oclIsKindOf(Nahkampfwaffe)))]
    <fo:table-row>
       <fo:table-cell>
[printMeleeWeapon(f)/]
 		</fo:table-cell>
   </fo:table-row>
[printSimpleLine(1)/]
[/for]
   </fo:table-body>
   </fo:table>
[/template]


[template public printFirstPage (aManagedCharacter : ManagedCharacter) ]
  <fo:table font-family="Helvetica"  >
    <fo:table-column  />
    <fo:table-column column-width="4pt" />
    <fo:table-column  />
    <fo:table-column column-width="4pt" />
    <fo:table-column  />
    <fo:table-body  >
     <fo:table-row>
      <fo:table-cell  margin="2pt"  [defaultBorderAll()/]>
[printPersonaData(aManagedCharacter)/]
      </fo:table-cell>
      <fo:table-cell >
		<fo:block >
		</fo:block >
      </fo:table-cell>
      <fo:table-cell   margin="4pt" [defaultBorderAll()/]>
[printAttributes(aManagedCharacter)/]
      </fo:table-cell>
       <fo:table-cell >
		<fo:block >
		</fo:block >
      </fo:table-cell>
     <fo:table-cell   margin="4pt" [defaultBorderAll()/]>
[printImage(aManagedCharacter)/]
      </fo:table-cell>
     </fo:table-row>
   </fo:table-body>
   </fo:table>


	<!-- skill block -->
  <fo:table font-family="Helvetica" margin-top="4pt" >
    <fo:table-column  />
    <fo:table-column  />
    <fo:table-column  />
    <fo:table-body  >
	<fo:table-row >
      <fo:table-cell margin-top="10pt" margin="4pt"  number-columns-spanned="2">
[printActiveSkills(aManagedCharacter)/]
      </fo:table-cell>
      <fo:table-cell margin="4pt">
[printKnowlegeSkills(aManagedCharacter)/]
      </fo:table-cell>
     </fo:table-row>

   </fo:table-body>
   </fo:table>

[/template]

[template public printPersonaData (aManagedCharacter : ManagedCharacter) ]
  <fo:table font-size="small" font-weight="lighter" >
    <fo:table-column  />
   <fo:table-column  />
   <fo:table-column  />
   <fo:table-column  />
    <fo:table-body  >
[printSectionHeader('Personal Data'.localizedString(), 4)/]
     <fo:table-row>
[printCell('name'.localizedString())/]
[printCellSpanned(aManagedCharacter.persona.name,3)/]
     </fo:table-row>
     <fo:table-row>
[printCellSpanned(aManagedCharacter.persona.spezies.getText(),2)/]
[printCell('_UI_ManagedCharacter_sex_feature'.localizedString())/]
[printCellRight(aManagedCharacter.sex.sexToName())/]
     </fo:table-row>
[if (aManagedCharacter.oclIsKindOf(PlayerCharacter))]
     <fo:table-row>
[printCell('_UI_ManagedCharacter_dateofbirth_feature'.localizedString())/]
[printCellRight(aManagedCharacter.dateofbirth.formatDate())/]
[printCell('_UI_ManagedCharacter_age_feature'.localizedString())/]
[printCell(aManagedCharacter.oclAsType(PlayerCharacter).age)/]
     </fo:table-row>
[/if]
     <fo:table-row>
[printCell('_UI_ManagedCharacter_height_feature'.localizedString())/]
[printCellRight(aManagedCharacter.height+' cm')/] 
[printCell('_UI_ManagedCharacter_weight_feature'.localizedString())/]
[printCellRight(aManagedCharacter.weight+' kg')/] 
     </fo:table-row>
[printSimpleLine(4)/]
     <fo:table-row>
[printCell('_UI_ManagedCharacter_karmaGaint_feature'.localizedString())/]
[printCellRight(aManagedCharacter.karmaGaint)/]
[printCell('_UI_ManagedCharacter_currentKarma_feature'.localizedString())/]
[printCellRight(aManagedCharacter.currentKarma)/]
     </fo:table-row>
     <fo:table-row>
[printCell('_UI_ManagedCharacter_streetCred_feature'.localizedString())/]
[printCellRight(aManagedCharacter.streetCred)/]
[printCell('_UI_ManagedCharacter_notoriety_feature'.localizedString())/]
[printCellRight(aManagedCharacter.notoriety)/]
     </fo:table-row>
	<fo:table-row>
[printCell('_UI_BerechneteAttribute_selbstbeherrschung_feature'.localizedString())/]
[printCellRight(persona.oclAsType(KoerperPersona).selbstbeherrschung.toString())/]
[printCell('_UI_BerechneteAttribute_menschenkenntnis_feature'.localizedString())/] 
[printCellRight(persona.oclAsType(KoerperPersona).menschenkenntnis)/]
    </fo:table-row>
	<fo:table-row>
[printCell('_UI_BerechneteAttribute_errinerungsvermoegen_feature'.localizedString())/]
[printCellRight(persona.oclAsType(KoerperPersona).errinerungsvermoegen) /]
[printCell('Lifting/Carrying')/] 
[printCellRight(persona.liftCarry())/]
    </fo:table-row>
[printSimpleLine(4)/]
	<fo:table-row>
[printCell('Movement')/] 
[printCellRight(persona.movement())/]
[printCell('_UI_ChrakterLimits_koerperlich_feature'.localizedString())/] 
[printCellRight(persona.oclAsType(KoerperPersona).koerperlich)/]
    </fo:table-row>
	<fo:table-row>
[printCell('_UI_ChrakterLimits_geistig_feature'.localizedString())/]
[printCellRight(persona.oclAsType(KoerperPersona).geistig)/]
[printCell('_UI_ChrakterLimits_sozial_feature'.localizedString())/]
[printCellRight(persona.oclAsType(KoerperPersona).sozial)/]
    </fo:table-row>


   </fo:table-body>
   </fo:table>

[/template]

[template public printAttributes (aManagedCharacter : ManagedCharacter)
{persona : AbstraktPersona = aManagedCharacter.persona ; } ]
  <fo:table font-size="small" font-weight="lighter" >
    <fo:table-column  />
   <fo:table-column  />
   <fo:table-column  />
   <fo:table-column  />
    <fo:table-body  >
[printSectionHeader('Attribute'.localizedString(), 4)/]
[for (ea : EAttribute | getOrderedAttibutesForPersona(persona))]
[if (i.mod(2)=1)]
     <fo:table-row >
[/if]

[let attributeName : String = getText(base2Calced(ea))]
[printCell(attributeName)/] 
      <fo:table-cell>
       <fo:block text-align="right" >
[persona.eGet(ea)/][if(not (persona.eGet(ea)=persona.eGet(base2Calced(ea))))]([persona.eGet(base2Calced(ea))/])[/if] 
</fo:block>
      </fo:table-cell>
[/let]
[if (i.mod(2)=0)]
     </fo:table-row>
[/if]
[/for]
[if (getOrderedAttibutesForPersona(persona)->asSequence()->size().mod(2)=1)]
     </fo:table-row>
[/if]

    <fo:table-row >
      <fo:table-cell number-columns-spanned="2">
[printNBoxes(persona.edge, 8,8)/]
      </fo:table-cell>
[printCell('_UI_SpezielleAttribute_essenz_feature'.localizedString())/] 
[printCell((persona.essenz)/100 )/]
    </fo:table-row >

[printSimpleLine(4)/]

	<fo:table-row>
[printCellSpanned('_UI_SpezielleAttribute_initative_feature'.localizedString(),2)/] 
[printCellSpanned(persona.toLocalizedInitative(),2)/]
     </fo:table-row>
[if(persona.oclIsKindOf(AstraleProjektion))]
[let ap : AstraleProjektion = persona.oclAsType(AstraleProjektion)]
	<fo:table-row>
[printCellSpanned('_UI_AstraleProjektion_astraleInitative_feature'.localizedString(),2)/]
[printCellSpanned(ap.toLocalizedAstralInitative(),2)/]
     </fo:table-row>
[/let][/if]
[if (aManagedCharacter.hasMatrixInitative())]
	<fo:table-row>
[printCellSpanned('Matrix Ini cold',2)/]
[printCellSpanned(aManagedCharacter.getMatrixInitative()+'+3d6',2)/]
     </fo:table-row>
	<fo:table-row>
[printCellSpanned('Matrix Ini hot',2)/]
[printCellSpanned(aManagedCharacter.getMatrixInitative()+'+4d6',2)/]
     </fo:table-row>
[/if]
[printSimpleLine(4)/]
<!--condition monitor -->
    <fo:table-row >
[printCellSpanned('Physical',4)/]
    </fo:table-row >
    <fo:table-row >
      <fo:table-cell number-columns-spanned="4">
[printNBoxes(persona.oclAsType(KoerperPersona).zustandKoerperlichMax, 8,8)/]
      </fo:table-cell>
    </fo:table-row >
    <fo:table-row >
[printCellSpanned('Men',4)/]
    </fo:table-row >
    <fo:table-row >
      <fo:table-cell number-columns-spanned="4" margin-bottom="5pt">
[printNBoxes(persona.oclAsType(KoerperPersona).zustandGeistigMax, 8,8)/]
      </fo:table-cell>
    </fo:table-row >

   </fo:table-body>
   </fo:table>

[/template]

[template public printImage (aManagedCharacter : ManagedCharacter) ]
      <fo:block font-size="small" font-weight="lighter" margin-left="5px"  text-align="justify"  >
[if (not aManagedCharacter.persona.image.oclIsUndefined())]
<fo:external-graphic display-align="right"  src="url([aManagedCharacter.persona.toBase64Image()/])"/>
[/if]
[if (not aManagedCharacter.persona.beschreibung.oclIsUndefined())]
[aManagedCharacter.persona.beschreibung/]
[/if]
       </fo:block >

[/template]


[template public printSectionHeader(titel : String,colSpan : Integer)]
  <fo:table-row  font-size="12pt">
   <fo:table-cell   number-columns-spanned="[colSpan/]"  >
   <fo:block background-color="green"  margin="4pt" 
         color="white" font-size="large" >
   <fo:block text-align="left"  margin="2pt" padding="2pt" >
[escapeXML(titel)/]</fo:block></fo:block>
       </fo:table-cell>
     </fo:table-row>

[/template]

[template public printActiveSkills (aManagedCharacter : ManagedCharacter) {
list : Sequence(PersonaFertigkeit) =  
	aManagedCharacter.persona.fertigkeiten -> select(e| e.fertigkeit.oclIsTypeOf(Fertigkeit))
			->asSequence()
;}]
  <fo:table font-size="small" font-weight="lighter" [defaultBorderAll()/]>
    <fo:table-column  />
   <fo:table-column  />
    <fo:table-body  >
[printSectionHeader('Active Skills'.localizedString(), 2)/]
    <fo:table-row>
	<fo:table-cell>
<!-- skill header -->
[printSkillTableHeader()/]
</fo:table-cell>
     </fo:table-row>

   <fo:table-row>
	<fo:table-cell>
<!-- skills -->
[printSkillList(list, aManagedCharacter.persona)/]
</fo:table-cell>
     </fo:table-row>


   </fo:table-body>
   </fo:table>
[/template]

[template public printKnowlegeSkills (aManagedCharacter : ManagedCharacter) {
list : Sequence(PersonaFertigkeit) =  
	aManagedCharacter.persona.fertigkeiten -> select(e| e.fertigkeit.oclIsTypeOf(Wissensfertigkeit))
			->asSequence()
;}]
  <fo:table font-size="small" font-weight="lighter" [defaultBorderAll()/]>
    <fo:table-column  />
    <fo:table-body  >
[printSectionHeader('Knowlege Skills'.localizedString(), 1)/]
    <fo:table-row>
	<fo:table-cell>
<!-- skill header -->
[printSkillTableHeader()/]
</fo:table-cell>
     </fo:table-row>

   <fo:table-row>
	<fo:table-cell>
<!-- skills -->
[printSkillList(list, aManagedCharacter.persona)/]
</fo:table-cell>
     </fo:table-row>



   </fo:table-body>
   </fo:table>
[/template]

[template public printSkillList(list : Sequence(PersonaFertigkeit),persona : AbstraktPersona)]
  <fo:table [fontSizeSmall()/]  font-weight="lighter" >
    <fo:table-column  />
   	<fo:table-column [columnWidth('15%')/] />
	<fo:table-column column-width="15%" />
    <fo:table-body  >
[for (f : PersonaFertigkeit | list)]
		<fo:table-row>
[printCell(f.fertigkeit.getSimpleText()+' '+ f.fertigkeit.attribut.getText().substring(1, 3))/] 
[printCell(f.stufe)/]
[printCellRight((f.stufe + persona.eGet(f.fertigkeit.attribut).oclAsType(Integer)).toString())/]
		</fo:table-row>
[/for]
   </fo:table-body>
   </fo:table>
[/template]

[template public printSkillTableHeader(arg : OclAny)]
  <fo:table font-size="small" font-weight="lighter" >
    <fo:table-column  />
   	<fo:table-column column-width="15%" />
	<fo:table-column column-width="15%" />
    <fo:table-body  >
		<fo:table-row>
[printCell('Skill Name'.localizedString())/] 
[printCell('Rtg'.localizedString())/]
[printCell('Pool'.localizedString())/]
		</fo:table-row>
   </fo:table-body>
   </fo:table>
[/template]

[template public print4ColumnTable (titel : String, firstColumn : Sequence(String)
,secondColumn : Sequence(String), column3 : Sequence(String),column4 : Sequence(String)) ]
<!-- two column table -->
  <fo:table font-size="small" font-weight="lighter" [defaultBorderAll()/]>
    <fo:table-column  />
    <fo:table-column  />   
	<fo:table-column  />
	<fo:table-column  />
    <fo:table-body  >
[printSectionHeader(titel, 2)/]
[for (t : String | firstColumn)]
    <fo:table-row>
[printCell(t)/]
[printCell(secondColumn->at(i))/]
[printCell(column3->at(i))/]
[printCell(column4->at(i))/]
   </fo:table-row>
[/for]
   </fo:table-body>
   </fo:table>
[/template]


[template public print3ColumnTable (titel : String, firstColumn : Sequence(String)
,secondColumn : Sequence(String), column3 : Sequence(String)) ]
<!-- two column table -->
  <fo:table font-size="small" keep-together="always" font-weight="lighter" [defaultBorderAll()/]>
    <fo:table-column  />
    <fo:table-column  />   
	<fo:table-column  />
    <fo:table-body  >
[printSectionHeader(titel, 2)/]
[for (t : String | firstColumn)]
    <fo:table-row>
[printCell(t)/]
[printCell(secondColumn->at(i))/]
[printCell(column3->at(i))/]
   </fo:table-row>
[/for]
   </fo:table-body>
   </fo:table>
[/template]


[template public printTwoColumnTable (titel : String, firstColumn : Sequence(String),secondColumn : Sequence(String),clW1 : Integer) ]
<!-- two column table -->
  <fo:table font-size="small" keep-together="always" font-weight="lighter" [defaultBorderAll()/]>
    <fo:table-column column-width="[clW1/]%" />
   <fo:table-column  />
    <fo:table-body  >
[printSectionHeader(titel, 2)/]
[for (t : String | firstColumn)]
    <fo:table-row>
[printCell(t)/]
[printCell(secondColumn->at(i))/]
   </fo:table-row>
[/for]
   </fo:table-body>
   </fo:table>
[/template]


[template public printOneColumnTable (titel : String, firstColumn : Sequence(String)) ]
<!-- one column table -->
  <fo:table font-size="small" keep-together="always" font-weight="lighter" [defaultBorderAll()/]>
    <fo:table-column  />
   <fo:table-column  />
    <fo:table-body  >
[printSectionHeader(titel, 2)/]
[for (t : String | firstColumn)]
    <fo:table-row>
[printCellSpanned(t,2)/]
   </fo:table-row>
[/for]
   </fo:table-body>
   </fo:table>
[/template]

[template public printOneColumnTableRaw (titel : String, firstColumn : Sequence(String)) ]
<!-- one column table -->
  <fo:table font-size="small" keep-together="always" font-weight="lighter" [defaultBorderAll()/]>
    <fo:table-column  />
    <fo:table-body  >
[printSectionHeader(titel, 1)/]
[for (t : String | firstColumn)]
    <fo:table-row>
<fo:table-cell>
[t/]
</fo:table-cell>
   </fo:table-row>
[/for]
   </fo:table-body>
   </fo:table>
[/template]

