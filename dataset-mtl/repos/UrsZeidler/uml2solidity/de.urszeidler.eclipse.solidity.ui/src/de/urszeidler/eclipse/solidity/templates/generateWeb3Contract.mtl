[comment encoding = UTF-8 /]
[module generateWeb3Contract('http://www.eclipse.org/uml2/5.0.0/UML')]

[import de::urszeidler::eclipse::solidity::util::uml2service /]

[**
 * Generate for each package containing a compileable instrance the coresponding Web3 JS file.
*/]
[template public generateWeb3Contract(aModel : Model)]
[comment @main/]
[generatePackage(aModel)/]
[iteratePackages(aModel)/]
[/template]

[**
 * Iterates over the packages.
*/]
[template private iteratePackages(p : Package)]
[for (p1 : Package | p.nestedPackage)]
[if (isGeneratePackage(p1))]
[generatePackage(p1)/]
[iteratePackages(p1)/]
[/if]
[/for]
[/template]

[**
 * Generate the web3 for the given package.
*/]
[template public generatePackage (p : Package)?(isGeneratePackage(p)) ]
[if (p.generateWeb3())]
[file (p.name+'Web3.js', false, 'UTF-8')]
[if (not p.getJsFileHeader().oclIsUndefined())][p.getJsFileHeader()/][/if]
[printAllWeb3Contracts(p)/]
[/file]
[/if]
[/template]

[template public printAllWeb3Contracts (p : Package) ]
[for (	aClass : Class | p.allContracts())]
// contractVariable for [aClass.name/]
var [aClass.name/]Contract = web3.eth.contract([printAbi(aClass)/]);   
[/for]

[/template]

[template public printAbi (aClass : Class) ]
[ '[' /]
[for (p : Property | aClass.allSubAttributes())]
{"constant":true,"inputs":[ '[' /][ ']' /],"name":"[p.name/]","outputs":[ '[' /]{"name":"","type":"[toAbiType(p.type)/]"}[ ']' /],"type":"function"},
[/for]
[for (p : Property | aClass.allAttributes()-> select(isMapping()))]
[printMapping(p.type, getStereotypeValue('Mapping', 'value').oclAsType(Type), p)/],
[/for]
[for (p : Property | aClass.allAttributes()-> select(isKeyMapping()))]
[printMapping( getStereotypeValue('KeyMapping', 'key').oclAsType(Type),p.type, p)/],
[/for]
[for (op : Operation | aClass.allSubFunctions()->asSequence()
	-> union(aClass.allAbstractFunctions()->asSequence())
	-> select(isPublic()))separator (',')]
[printFunctionSignatur(op)/]
[/for]
[comment][for (op : Operation | aClass.allAbstractFunctions()->select(isPublic()))separator (',')]
[printFunctionSignatur(op)/]
[/for][/comment]
[comment][printMethodSignature(aClass)/] [if (not aClass.ownedOperation->select(hasStereotype('Event'))->isEmpty())],[/if][/comment]
[if (not aClass.ownedOperation->select(hasStereotype('Event'))->isEmpty())],[/if]
[for (op : Operation | aClass.ownedOperation->select(hasStereotype('Event')))separator (',')]
[printEventSignature(op)/]
[/for]
[let se : OrderedSet(Property) = aClass.allAttributes()
	->select(not hasStereotype('Mapping') and not hasStereotype('KeyMapping'))
	->select(hasStereotype('GetterSetter'))
	->select(not isPrivate())
	->sortedBy(indexInContainer(oclAsType(Property)) + name )]
[for (aProperty : Property | se)]
[printGetterSetter(aProperty)/]
[/for]
[/let]
[ ']' /]
[/template]

[template public printGetterSetter(aProperty : Property) ? (hasStereotype('GetterSetter'))]
[if (aProperty.getStereotypeValue('GetterSetter', 'getter').oclAsType(Boolean))]
  ,{
    "constant": true,
    "inputs": ['['/][']'/],    
    "name": "get[aProperty.name.toUpperFirst()/]",
    "outputs": ['['/]{"name": "[aProperty.name/]","type": "[toAbiType(aProperty.type)/]"}[']'/],
    "type": "function"
  }
[/if]
[if (aProperty.getStereotypeValue('GetterSetter', 'setter').oclAsType(Boolean))]
  ,{
    "constant": false,
    "inputs": ['['/]{"name": "a[aProperty.name.toUpperFirst()/]","type": "[toAbiType(aProperty.type)/]"}[']'/],    
    "name": "set[aProperty.name.toUpperFirst()/]",
    "outputs": ['['/][']'/],
    "type": "function"
  }
[/if]
[/template]

[template public printMapping(key : Type,value:Type, p:Property)]
{"constant": true,"inputs": [ '[' /]{"name": "","type": "[key.toAbiType()/]"}[ ']' /],"name": "[p.name/]","outputs": [ '[' /]
[if (value.isContract())]
{ "name": "", "type": "address"}
[elseif (value.isStruct())]
[for (p : Property | value.oclAsType(Class).attribute)separator (',')]
{ "name": "[p.name/]", "type": "[p.type.toAbiType()/]"}
[/for]	
[else]
{ "name": "", "type": "[value.toAbiType()/]"}
[/if][ ']' /],"type": "function"	}
[/template]

[**
 * Print the method signature as json.
*/]
[template public printMethodSignature (aClass : Class) ]
[for (op : Operation | aClass.allSubFunctions()->select(isPublic()))separator (',')]
[printFunctionSignatur(op)/]
[/for]
[/template]

[**
 * Print the abstract functions.
*/]
[template public printAbstractFunctions (aClass : Class) ]
[for (op : Operation | aClass.allAbstractFunctions()->select(isPublic()))separator (',')]
[printFunctionSignatur(op)/]
[/for]
[/template]


[template public printFunctionSignatur(op : Operation)?( op.isFunction() )]
{ "constant": [if(op.isReturnConstant())]true[else]false[/if],
    "inputs": ['['/][for (p : Parameter | op.allInParameters())separator (',')]{"name": "[p.name/]","type": "[toAbiType(p.type)/]"}[/for][']'/],    
    "name": "[op.name/]",
    "outputs": ['['/][for (p : Parameter | op.allReturnParameters())separator (',')]{"name": "[p.name/]","type": "[toAbiType(p.type)/]"}[/for][']'/],
    "type": "function" }
[/template]



[**
 * Print the event signature as json.
*/]
[template public printEventSignature (op : Operation) ]
  { "anonymous": false,
    "inputs": 
	['['/]
[for (p : Parameter | op.allInParameters())separator (',')]
		{"indexed": [if(p.isIndexed())]true[else]false[/if],
		 "name": "[p.name/]",
         "type": "[toAbiType(p.type)/]"}
[/for]
	[']'/],    
    "name": "[op.name/]",
    "type": "event"  }
[/template]

[template public toAbiType(type : Type)]
[if (type.hasStereotype('Contract'))]address[elseif (type.name='uint')]
uint256[else]
[type.name/][/if]
[/template]