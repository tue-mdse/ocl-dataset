[comment encoding = UTF-8 /]
[module generateJavaTestCode('http://www.eclipse.org/uml2/5.0.0/UML')/]

[import de::urszeidler::eclipse::solidity::templates::generateJavaCode/]
[import de::urszeidler::eclipse::solidity::util::uml2service /]

[**
 * The documentation of the template generateElement.
 * @param aClass
 */]
[template public generateElement(aModel : Model)]
[comment @main/]
[generatePackage(aModel)/]
[iteratePackages(aModel)/]
[generateAbstractContractTest(aModel)/]
[/template]

[**
 * Iterates over the packages.
*/]
[template private iteratePackages(p : Package)]
[for (p1 : Package | p.nestedPackage)]
[if (isGeneratePackage(p1))]
[generatePackage(p1)/]
[/if]
[iteratePackages(p1)/]
[/for]
[/template]

[template private generateAbstractContractTest(aModel : Model)]
[file (aModel.getInterfacePackagePrefix().replaceAll('\\.', '/')+'/'+ 'AbstractContractTest.java'  , false, 'UTF-8')]
package [aModel.getInterfacePackagePrefix()/];

// [protected ('AbstractContractTest.customImports')]

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigInteger;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import org.adridadou.ethereum.EthereumFacade;
import org.adridadou.ethereum.values.CompiledContract;
import org.adridadou.ethereum.values.EthAccount;
import org.adridadou.ethereum.values.EthAddress;
import org.adridadou.ethereum.values.SoliditySource;
import org.apache.commons.io.IOUtils;
import org.ethereum.crypto.ECKey;
import org.ethereum.solidity.compiler.CompilationResult;
import org.ethereum.solidity.compiler.CompilationResult.ContractMetadata;
import org.junit.BeforeClass;
import org.spongycastle.util.encoders.Hex;

// [/protected]

/**
 * The basic test.
 *
 */
public abstract class AbstractContractTest {

	private static Map<String,CompiledContract> contracts = new HashMap<String, CompiledContract>();

	protected static EthereumFacade ethereum;
	protected static EthAccount sender;
	protected static EthAddress senderAddress;

	protected EthAddress fixtureAddress;
	protected SoliditySource contractSource;

	// [protected ('AbstractContractTest.customFields')]
	//TODO: add custom attributes
	// [/protected]

	/**
	 * @return the basic contract name
	 */
	protected abstract String getContractName();
	
	/**
	 * @return the contract file together with the contract name
	 */
	protected abstract String getQuallifiedContractName();

	/**
	 * Setup up the blockchain. Add the 'EthereumFacadeProvider' property to use 
	 * another block chain implementation or network.
	 * @throws Exception 
	 */
	@BeforeClass
	public static void setup() throws Exception{
		ethereum = EthereumInstance.getInstance().getEthereum();
		initTest();
	}

	protected static void initTest() throws Exception {
		// [protected ('AbstractContractTest.initTest')]

		String property = System.getProperty(EthereumInstance.PROP_ETHEREUM_FACADE_PROVIDER);
		if (EthereumInstance.ALL_TESTNET.contains(property)) {

		} else if (EthereumInstance.EI_PRIVATE.equalsIgnoreCase(property)) {
			sender = new EthAccount(ECKey.fromPrivate(BigInteger.valueOf(100000L)));
			senderAddress = sender.getAddress();
		}

		if (sender == null) {// the account for the standalone blockchain
			sender = new EthAccount(
					ECKey.fromPrivate(Hex.decode("3ec771c31cac8c0dba77a69e503765701d3c2bb62435888d4ffa38fed60c445c")));
			senderAddress = sender.getAddress();
		}
		// [/protected]
	}

	/**
	 * Returns the already compiled contact.
	 * 
	 * @param filePath the filename and path of the combined json
	 * @return the contract data (bin, abi)
	 * @throws URISyntaxException
	 * @throws FileNotFoundException
	 * @throws IOException
	 */
	protected CompiledContract getCompiledContract(String filePath) throws URISyntaxException, FileNotFoundException, IOException {
		CompiledContract compiledContract = contracts.get(getQuallifiedContractName());
		if(compiledContract!=null)
			return compiledContract;

		File file = new File(this.getClass().getResource(filePath).toURI());
		String rawJson = IOUtils.toString(new FileInputStream(file), EthereumFacade.CHARSET);
		CompilationResult result = CompilationResult.parse(rawJson);
		
		ContractMetadata contractMetadata = result.contracts.get(getContractName());
		if (contractMetadata == null) {
			Optional<String> optional = result.contracts.keySet().stream()
					.filter(s -> s.endsWith(getQuallifiedContractName())).findFirst();
			if (optional.isPresent())
				contractMetadata = result.contracts.get(optional.get());
		}
		compiledContract = CompiledContract.from(contractSource, getContractName(), contractMetadata);
		contracts.put(getQuallifiedContractName(), compiledContract);
		return compiledContract;
	}

	/**
	 * Returns the compiled contract from the 'contractSource'. The name is
	 * defined in the concrete test case.
	 * 
	 * @return the compiled contract
	 * @throws InterruptedException
	 * @throws ExecutionException
	 */
	public CompiledContract getCompiledContract() throws InterruptedException, ExecutionException {
		Map<String, CompiledContract> map = ethereum.compile(contractSource).get();
		CompiledContract contract = map.get(getContractName());
		if (contract == null)
			throw new IllegalArgumentException(
					"The contract '" + getContractName() + "' is not present is the map of contracts:" + map);
		return contract;
	}

	// [protected ('AbstractContractTest.customMethods')]
	//TODO: add custom methods
	// [/protected]
}
[/file]
[/template]

[template private generatePackage(p : Package)?(isGeneratePackage(p))]
[for (	aClass : Class | p.allContracts())]
[generateTestClass(p,aClass)/]
[/for]
[file (p.package2Path()+'/All'+ p.name.toUpperFirst()+'TestSuite.java'  , false, 'UTF-8')]
package [p.toPackage()/];

import org.junit.runners.Suite;
import org.junit.runner.RunWith;

@RunWith(Suite.class)
@Suite.SuiteClasses({
[for (	aClass : Class | p.allContracts()-> select(not isAbstractContract())) separator (',')]
[aClass.name/]Test.class
[/for]
//[protected ('customTests')]    
//[/protected]
})
public class All[p.name.toUpperFirst()/]TestSuite {
}
[/file]
[/template]


[template private generateTestClass(p : Package, aClass : Class)]
[file (p.package2Path()+'/'+ aClass.name+'Test.java'  , false, 'UTF-8')]
package [p.toPackage()/];

// [protected (aClass.name+'Test.customImports')]

import static org.junit.Assert.*;

[for (pi : PackageImport | p.allImports() )]
import [pi.target.oclAsType(Package).toPackage()/].*;
[/for]

import [p.getInterfacePackagePrefix()/].[p.name/].[aClass.name/].*;


import java.io.File;
import java.util.*;
import java.util.concurrent.*;
import java.util.stream.*;
import java.math.*;

import org.adridadou.ethereum.EthereumFacade;
import org.adridadou.ethereum.keystore.*;
import org.adridadou.ethereum.values.CompiledContract;
import org.adridadou.ethereum.values.EthAccount;
import org.adridadou.ethereum.values.EthAddress;
import org.adridadou.ethereum.values.SoliditySource;
import org.adridadou.ethereum.values.config.ChainId;
import org.ethereum.crypto.ECKey;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import [p.getInterfacePackagePrefix()/].AbstractContractTest;
import [p.getInterfacePackagePrefix()/].EthereumInstance;

// [/protected]


/**
 * Test for the [aClass.name/] contract.
 *
 */
public [if (aClass.isAbstractContract())] abstract [/if]class [aClass.name/]Test[testExtends(aClass)/]{

 
	private [aClass.name/] fixture;
	// [protected (aClass.name+'Test.attributes')]
	//TODO: add custom attributes

	// [/protected]

	@Override
	protected String getContractName() {
		return "[aClass.name/]";
	}

	@Override
	protected String getQuallifiedContractName() {
		return "[p.name/].sol:[aClass.name/]";
	}

	/**
	 * Read the contract from the file and deploys the contract code.
	 * @throws Exception
	 */
	@Before
	public void prepareTest() throws Exception {
		//[protected ('prepareTest')]
        File contractSrc = new File(this.getClass().getResource("[if (p.getContractPathForJava()<>'')]/[p.getContractPathForJava()/][/if]/[p.name/].sol").toURI());
        contractSource = SoliditySource.from(contractSrc);
		createFixture();
		//[/protected]
	}


	/**
	 * Create a new fixture by deploying the contract source.
	 * @throws Exception
	 */
	protected void createFixture() throws Exception {
		//[protected ('createFixture')]
		CompiledContract compiledContract = getCompiledContract();
[if (aClass.allConstructors()->isEmpty() or aClass.allConstructors()->first().allInParameters()->isEmpty())]
		CompletableFuture<EthAddress> address = ethereum.publishContract(compiledContract, sender);
[else]
[let op : Operation = aClass.allConstructors()->first()]
		//TODO: set the constructor args
[for (p : Parameter | op.allInParameters())]
		[p.type.toJavaType()/] [p.name/] = [p.toJavaExample()/];
[/for]
        CompletableFuture<EthAddress> address = ethereum.publishContract(compiledContract, sender
				[for (p : Parameter | op.allInParameters())], [p.name/][/for]);
[/let]
[/if]
        fixtureAddress = address.get();
		setFixture(ethereum.createContractProxy(compiledContract, fixtureAddress, sender, [aClass.name/].class));
		//[/protected]
	}

	protected void setFixture([aClass.name/] f) {
		this.fixture = f;
[if (not aClass.allSuperTypesWithoutContractApi()->isEmpty())]
		super.setFixture(f);
[/if]
	}

[comment]
[for (op : Operation | aClass.allConstructors())]
	/**
	 * Test the constructor for the [aClass.name/] contract.
	 * @throws Exception
	 */
	@Test
	public void testConstructor[op.operationParameters()/]() throws Exception {
		//[protected ('testConstructor'+op.operationParameters())]
		//TODO: Set the constructor args
[for (p : Parameter | op.allInParameters())]
		[p.type.toJavaType()/] [p.name/] = [p.toJavaExample()/];
[/for]

        CompletableFuture<EthAddress> address = ethereum.publishContract(contractSource, getContractName(), sender
				[for (p : Parameter | op.allInParameters())], [p.name/][/for]);
        fixture = ethereum
                .createContractProxy(contractSource, getContractName(), address.get(), sender, [aClass.name/].class);

		//TODO: test the constructor
		//[/protected]
	}
[/for]
[/comment]
[for (op : Operation | aClass.allAbstractFunctions()->select(isPublic()))]

	[op.printTestFunction(aClass)/][/for]
[for (op : Operation | aClass.allFunctions()->select(isPublic()))]

	[op.printTestFunction(aClass)/][/for]

	//[protected ('customTests')]    
	//[/protected]
}
[/file]
[/template]

[template public printTestFunction(op : Operation, aClass : Class)]
/**
 * Test method for  [op.name/]([printParameters(op,ParameterDirectionKind::_in)/]).
 * see {@link [aClass.name/]#[op.name/]([printParametersForJavaDoc(op,ParameterDirectionKind::_in)/])}
 * @throws Exception
 */
@Test
public void test[op.name.toUpperFirst()/][op.operationParameters()/]() throws Exception {
	//[protected ('test'+op.name.toUpperFirst()+op.operationParameters())]
	fail("not implemented");//TODO: implement this
	//[/protected]
}
[/template]

[template public testExtends (aClass : Class)  ]
[if (not aClass.allSuperTypesWithoutContractApi()->selectByType(Class)->isEmpty() )]
 extends [aClass.allSuperTypesWithoutContractApi()->selectByType(Class)->first().name/]Test[else] extends AbstractContractTest[/if][/template]



[template public toJavaExample(p : Parameter)]
[if (p.type.name='string')]
"[p.name/]"[elseif (p.type.name.startsWith('uint'))]
0[elseif (p.type.name='boolean')]
true[elseif (p.type.name='address')]
org.adridadou.ethereum.EthAddress.of("0x0")[/if][/template]