[**
 * Author:  Maxime Agusti
 */]
[module beansAndHelper('http://com.genmymodel.rds.core/1.0')/]

[template public generate(d : Database)]
[comment @main/]
[comment][d.elements->filter(Table).genDAO(d.name.toLower())/][/comment]
[d.elements->filter(Table).genData(d.name.toLower())/]
[d.genHelper()/]
[/template]


[template public genData(t : Table, dbname : String)]
[file ('data/' + t.name.toCamelCase() + 'Data.java', false, 'UTF-8')]
package [dbname.toLower()/].data;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

import [dbname.toLower()/].entity.[t.name.toCamelCase()/];
import [dbname.toLower()/].database.MySQLHelper;

public class [t.name.toCamelCase()/]Data {
    
    private static final String LOG = "[self.name.toCamelCase()/]Data";
    
    public static final String TABLE_[t.name.toUpper()/] = "[t.name/]";
    
    [for (c : Column | t.columns)]
    public static final String KEY_[c.name.toUpper()/] = "[c.name/]";
    [/for]

    private MySQLHelper helper;
    
    public [t.name.toCamelCase()/]Data(MySQLHelper helper) {
        this.helper = helper;
    }
    
    public [t.name.toCamelCase()/] fromCursor(Cursor c) {
 
        [t.name.toCamelCase()/] entry = new [t.name.toCamelCase()/]();
        
        [for (t.columns)]
        entry.set[self.name.toCamelCase()/](c.get[self.type.jtype().toUpperFirst()/](c.getColumnIndex(KEY_[self.name.toUpper()/])));
        [/for]
        
        return entry;
    }
    
    public ContentValues toContentValues([self.name.toCamelCase()/] arg) {
    
        ContentValues values = new ContentValues();
        
        [for (self.columns)]
        [if (not(self.PK and self.type.sqliteType().equalsIgnoreCase('INTEGER'))) ]
        values.put(KEY_[self.name.toUpper()/], arg.get[self.name.toCamelCase()/]());
        [/if]
        [/for]
        
        return values;
    }
    
    public long create[self.name.toCamelCase()/]([self.name.toCamelCase()/] arg) {
        SQLiteDatabase db = helper.getWritableDatabase();
 
        ContentValues values = toContentValues(arg);
 
        return db.insert(TABLE_[self.name.toUpper()/], null, values);
    }
    
    public List<[t.name.toCamelCase()/]> getAll[t.name.toCamelCase()/]ByQuery(String query) {
        
        List<[t.name.toCamelCase()/]> list = new ArrayList<[t.name.toCamelCase()/]>();
            
        SQLiteDatabase db = helper.getReadableDatabase();
        Cursor c = db.rawQuery(query, null);
 
        if (c.moveToFirst()) {
            do {
                [t.name.toCamelCase()/] entry = fromCursor(c);
 
                // adding to todo list
                list.add(entry);
            } while (c.moveToNext());
        }

        c.close();
 
        return list;
    }
    
    public [t.name.toCamelCase()/] get[t.name.toCamelCase()/]ByQuery(String query) {
        
        SQLiteDatabase db = helper.getReadableDatabase();
        Log.e(LOG, query);
 
        Cursor c = db.rawQuery(query, null);
 
        if (c != null) {
            c.moveToFirst();
        }
        
        [t.name.toCamelCase()/] entry = fromCursor(c);

        c.close();
 
        return entry;
    }
    
    [for (self.columns->select(PK))]
    public [t.name.toCamelCase()/] get[t.name.toCamelCase()/]By[self.name.toCamelCase()/]([self.type.jtype()/] [self.name.toLower()/]) {

        String selectQuery = "SELECT  * FROM " + TABLE_[t.name.toUpper()/] + " WHERE "
            + KEY_[self.name.toUpper()/] + " = " + [self.toName()/];

        return get[t.name.toCamelCase()/]ByQuery(selectQuery);
    }
    
    [/for]
    
    [for (self.columns.foreignReferences.foreignKeyColumns)]
    public List<[t.name.toCamelCase()/]> getAll[t.name.toCamelCase()/]By[self.name.toCamelCase()/]([self.type.jtype()/] [self.name.toLower()/]) {
        
        String selectQuery = "SELECT  * FROM " + TABLE_[t.name.toUpper()/] + " WHERE "
            + KEY_[self.name.toUpper()/] + " = " + [self.toName()/];
 
        return getAll[t.name.toCamelCase()/]ByQuery(selectQuery);
    }
    
    [/for]
    
    public List<[self.name.toCamelCase()/]> getAll[self.name.toCamelCase()/]() {
    
        String selectQuery = "SELECT  * FROM " + TABLE_[self.name.toUpper()/];

        return getAll[t.name.toCamelCase()/]ByQuery(selectQuery);
    }
    
    [for (self.columns->select(PK))]
    public long update[t.name.toCamelCase()/]By[self.name.toCamelCase()/]([t.name.toCamelCase()/] arg, [self.type.jtype()/] [self.name.toLower()/]) {
        SQLiteDatabase db = helper.getWritableDatabase();
 
        ContentValues values = toContentValues(arg);
 
        // updating row
        return db.update(TABLE_[t.name.toUpper()/], values, KEY_[self.name.toUpper()/] + " = ?",
                new String['[]'/] { String.valueOf([self.name.toLower()/]) });
    }
    [/for]
    
    [for (self.columns->select(PK))]
    public void delete[t.name.toCamelCase()/]By[self.name.toCamelCase()/]([self.type.jtype()/] [self.name.toLower()/]) {
        SQLiteDatabase db = helper.getWritableDatabase();
        db.delete(TABLE_[t.name.toUpper()/], KEY_[self.name.toUpper()/] + " = ?",
                new String['[]'/] { String.valueOf([self.name.toLower()/]) });
    }
    [/for]
}
[/file]
[/template]

[template public genDAO(t : Table, dbname : String)]
[file ('entity/' + t.name.toCamelCase() + '.java', false, 'UTF-8')]
package [dbname.toLower()/].entity;

import java.io.Serializable;

public class [t.name.toCamelCase()/] implements Serializable {

    [for (c : Column | t.columns)]
    private [c.type.jtype()/] [c.name/];
    [/for]
    
    [for (c : Column | t.columns)]
    [c.genGetter()/]
    
    [c.genSetter()/]
    
    [/for] 
}
[/file]
[/template]


[template public genGetter(c : Column)]
public [c.type.jtype()/] get[c.name.toCamelCase()/]() {
    return this.[c.name/];
}
[/template]


[template public genSetter(c : Column)]
public void set[c.name.toCamelCase()/]([c.type.jtype()/] [c.name/]) {
    this.[c.name/] = [c.name/];
}
[/template]


[template public jtype(t : Type) post(trim())]
[if (t.name = 'VARBINARY')]byte['[]'/]
[elseif (t.name = 'XML' or t.name = 'VARCHAR')]String
[elseif (t.name = 'BIGINT')]long
[elseif (t.name = 'INTEGER')]int
[elseif (t.name = 'DATE')]String
[elseif (t.name = 'DOUBLE')]double
[else][t.name.toLower().toUpperFirst()/]
[/if]
[/template]


[template public toCamelCase(s : String)][s.tokenize('_').toUpperFirst()/][/template]

[**
 * From this points, the templates are used
 * for Helper+CRUD operation generation
 */]
[template public genHelper(d : Database)]
[file ('database/' + 'MySQLHelper.java', false, 'UTF-8')]
package [d.name.toLower()/].database;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class MySQLHelper extends SQLiteOpenHelper {
    
    private static final int DATABASE_VERSION = 1;
    
    public static final String DATABASE_NAME = "database";

    // Table names
    [for (t : Table | d.elements->filter(Table))]
    private static final String TABLE_[t.name.toUpper()/] = "[t.name/]";
    [/for]

    [let allCols : Sequence(String) = d.elements->filter(Table).columns.name]
    // Common column names
    private static final String KEY_ID = "id";
    [d.genCommonColumns(allCols)/]
    
    [for (d.elements->filter(Table))]
    [self.genOtherCols(allCols)/]
    [/for]
    [/let]
    [for (d.elements->filter(Table))]
    [self.genTableEntry()/]
    [/for]
    
    public MySQLHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onOpen(SQLiteDatabase db) {
        db.execSQL("PRAGMA foreign_keys=ON");
        super.onOpen(db);
    }
    
    @Override
    public void onCreate(SQLiteDatabase db) {
        // creating required tables
        [for (d.elements->filter(Table))]
        db.execSQL(CREATE_TABLE_[self.name.toUpper()/]);
        [/for]
    }
    
     @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        // on upgrade drop older tables
        [for (d.elements->filter(Table))]
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_[self.name.toUpper()/]);
        [/for]
 
        // create new tables
        onCreate(db);
    }
    
    // closing database
    public void closeDB() {
        SQLiteDatabase db = this.getReadableDatabase();
        if (db != null && db.isOpen())
            db.close();
    }
    
}

[/file]
[/template]


[**
* Gets all the common column in the database.
*
* Here how the long expression works:
* 'among all the columns of the database':  d.modelElements->filter(Table).columns
* 'except the one called IiDd': xxx->reject('ID'.equalsIgnoreCase(name))
* 'we select the one that are here more than 1 time': xxx->select(c | cols->count(c.name) > 1)
* 'then we get their names': xxx.name
* 'And we remove multiple occurences': xxx->asSet()
*/]
[template public genCommonColumns(d : Database, cols : Sequence(String)) post(trim())]
[for (name : String | d.elements->filter(Table).columns
            ->reject('ID'.equalsIgnoreCase(name))
            ->select(c | cols->count(c.name) > 1).name->asSet())]
private static final String KEY_[name.toUpper()/] = "[name/]";
[/for]
[/template]


[template public genOtherCols(t : Table, cols : Sequence(String)) post(trim())]
[let thisCols : OrderedSet(Column) = t.columns
                                    ->reject('ID'.equalsIgnoreCase(name))
                                    ->select(c | cols->count(c.name) = 1)]
[if (thisCols->notEmpty())]
// Table [t.name/] columns
[for (c : Column | thisCols)]
private static final String KEY_[c.name.toUpper()/] = "[c.name/]";
[/for]
[/if]
[/let]
[/template]


[template public genTableEntry(t : Table)]
// [t.name/] table create statement
private static final String CREATE_TABLE_[t.name.toUpper()/] = 
    "CREATE TABLE " + TABLE_[t.name.toUpper()/] + " ("
    [for (c : Column | t.columns) before('+') separator('+')]
    [c.genColEntry()/]
    [/for]
[t.genReferences()/]
+   "[if (t.columns->select(PK)->notEmpty())]PRIMARY KEY([t.columns->select(PK).name->sep(', ')/])[/if] "
+   ")";

[/template]

[template public genReferences(t : Table)]
    [for (c : Column | t.columns)]
    [for (r : Reference | c.foreignReferences)]
+   "FOREIGN KEY ([r.foreignKeyColumns.name.normalize()->sep(',')/]) "
+       "REFERENCES [r.primaryKeyColumns->at(1).table.qualName()/]([r.primaryKeyColumns.name.normalize()->sep(',')/]) "
    [if (r.onDelete <> ReferenceActionType::NO_ACTION)]
+       "ON DELETE [r.onDelete.toString().replace('_',' ')/] "
    [/if]
    [if (r.onUpdate <> ReferenceActionType::NO_ACTION)]
+       "ON UPDATE [r.onUpdate.toString().replace('_',' ')/] "
    [/if] 
+   ", "
    [/for]
    [/for]
[/template]

[query public normalize(s : String) : String =
    if (s.contains(' ')) then '"' + s + '"' else s endif
/]


[query public qualName(m : ModelElement) : Sequence(String) = 
    m.ancestors(ModelElement)
        ->reject(oclIsKindOf(Database))
        ->reverse()
        .name.normalize()->including(m.name.normalize())->sep('.')
/]


[template public genColEntry(c : Column)]
KEY_[c.name.toUpper()/] + " [c.type.sqliteType()/], "
[/template]


[template public toName(c : Column)]
[if (c.type.jtype() = 'String')]"'" + [c.name.toLower()/] + "'"
[else][c.name.toLower()/]
[/if]
[/template]


[template public sqliteType(t : Type) post(trim())]
[let INTEGER : Sequence(String) = Sequence{'INT', 'INTEGER', 'SMALLINT', 'MEDIUMINT', 'BIGINT', 'TIMESTAMP'}]
[let TEXT : Sequence(String) = Sequence{'XML', 'TEXT', 'VARCHAR', 'CHARACTER', 'DATE', 'TIME'}]
[let REAL : Sequence(String) = Sequence{'FLOAT', 'REAL', 'DOUBLE', 'INTERVAL'}]
[let BLOB : Sequence(String) = Sequence{'VARBINARY'}]
[if (INTEGER->lastIndexOf(t.name) <> -1)]INTEGER
[elseif(TEXT->lastIndexOf(t.name) <> -1)]TEXT
[elseif(REAL->lastIndexOf(t.name) <> -1)]REAL
[elseif(BLOB->lastIndexOf(t.name) <> -1)]BLOB
[else][t.name/]
[/if]
[/let]
[/let]
[/let]
[/let]
[/template]
