[comment encoding = UTF-8 /]
[module compositeComponent('http://www.eclipse.org/uml2/4.0.0/UML')]
[import com::thales::momoko2::pim::uml2::gen::request::classQueries /]
[import com::thales::momoko2::pim::uml2::gen::request::propertyQueries /]
[import com::thales::momoko2::pim::uml2::gen::common::textprocessing::textProcessing /]
[import com::thales::momoko2::pim::uml2::gen::services::uml2Queries /]

[**
 * This template generates the composite components called.
 * @param aProperty
 * @param anInputValue
 * @param aCssClass
 */]
[template public generateCompositeComponent(aProperty : Property, anInputValue : String, aCssClass : String)]
[generateDateCalendar(aProperty, anInputValue, aCssClass)/]
[generateTimeCalendar(aProperty, anInputValue, aCssClass)/]
[generateInputText(aProperty, anInputValue, aCssClass)/]
[generateSelectOneMenu(aProperty, anInputValue, aCssClass)/]
[generateSpinner(aProperty, anInputValue, aCssClass)/]
[/template]

[**
 * This template generates the DateCalendar component.
 * @param aProperty
 */]
[template private generateDateCalendar(aProperty : Property, anInputValue : String, aCssClass : String)
? (isDateClass(getDatatypeByProperty(aProperty)))]
<comp:dateCalendar 	nameValue="[aProperty.name/]" 
					inputValue="#{[anInputValue/]}" 
					labelValue="#{bundle.[aProperty.class.name/]_[aProperty.name/]}"
					requiredValue="[isMandatoryProperty(aProperty)/]"
					cssClass="[aCssClass/]"
					tooltipLabel="[aProperty.ownedComment._body/]"/>
[/template]

[**
 * This template generates the TimeCalendar component.
 * @param aProperty
 */]
[template private generateTimeCalendar(aProperty : Property, anInputValue : String, aCssClass : String)
? (isTimeClass(getDatatypeByProperty(aProperty)))]
<comp:timeCalendar 	nameValue="[aProperty.name/]" 
					inputValue="#{[anInputValue/]}" 
					labelValue="#{bundle.[aProperty.class.name/]_[aProperty.name/]}"
					requiredValue="[isMandatoryProperty(aProperty)/]"
					cssClass="[aCssClass/]"
					tooltipLabel="[aProperty.ownedComment._body/]"/>
[/template]

[**
 * This template generates the InputText component.
 * @param aProperty
 */]
[template private generateInputText(aProperty : Property, anInputValue : String, aCssClass : String)
? (isTextClass(getDatatypeByProperty(aProperty)))]
<comp:inputText 	nameValue="[aProperty.name/]" 
					inputValue="#{[anInputValue/]}" 
					labelValue="#{bundle.[aProperty.class.name/]_[aProperty.name/]}"
					requiredValue="[isMandatoryProperty(aProperty)/]"
					cssClass="[aCssClass/]"
					tooltipLabel="[aProperty.ownedComment._body/]"
					tooltipField="[generateFieldTooltip(aProperty)/]"/>
[/template]

[**
 * This template generates the SelectOneMenu component.
 * @param aProperty
 */]
[template private generateSelectOneMenu(aProperty : Property, anInputValue : String, aCssClass : String)
? (isEnumerateClass(getDatatypeByProperty(aProperty)))]
<comp:selectOneMenu nameValue="[aProperty.name/]" 
					inputValue="#{[anInputValue/]}" 
					labelValue="#{bundle.[aProperty.class.name/]_[aProperty.name/]}"
					itemValues="#{enumUtil.[aProperty.type.name.toLowerFirst()/]Values}"
					requiredValue="[isMandatoryProperty(aProperty)/]"
					cssClass="[aCssClass/]"
					tooltipLabel="[aProperty.ownedComment._body/]"/>
[/template]


[**
 * This template generates the Spinner component.
 * @param aProperty
 */]
[template private generateSpinner(aProperty : Property, anInputValue : String, aCssClass : String)
? (isIntegerClass(getDatatypeByProperty(aProperty)) or isRealClass(getDatatypeByProperty(aProperty)))]
 <comp:spinner  	nameValue="[aProperty.name/]" 
					inputValue="#{[anInputValue/]}" 
					labelValue="#{bundle.[aProperty.class.name/]_[aProperty.name/]}"
					requiredValue="[isMandatoryProperty(aProperty)/]"
					cssClass="[aCssClass/]"
					tooltipLabel="[aProperty.ownedComment._body/]"
					tooltipField="[generateFieldTooltip(aProperty)/]"/>  
[/template]     
 
[template private generateFieldTooltip(aProperty:Property) post(generateTextProcessingLine())]
[if isTextClass(getDatatypeByProperty(aProperty))] 
pattern=[getDatatypeByProperty(aProperty).getValue(getStereotype(getDatatypeByProperty(aProperty),'text'), 'pattern').toString()/]
 - minLength=[getDatatypeByProperty(aProperty).getValue(getStereotype(getDatatypeByProperty(aProperty),'text'), 'minLength').toString()/]
 - maxLength=[getDatatypeByProperty(aProperty).getValue(getStereotype(getDatatypeByProperty(aProperty),'text'), 'maxLength').toString()/]
[/if]

[if isIntegerClass(getDatatypeByProperty(aProperty))]
min=[getDatatypeByProperty(aProperty).getValue(getStereotype(getDatatypeByProperty(aProperty),'integer'), 'min').toString()/]
 - max=[getDatatypeByProperty(aProperty).getValue(getStereotype(getDatatypeByProperty(aProperty),'integer'), 'max').toString()/]
[/if]

[if isRealClass(getDatatypeByProperty(aProperty))]
min=[getDatatypeByProperty(aProperty).getValue(getStereotype(getDatatypeByProperty(aProperty),'real'), 'min').toString()/]
 - max=[getDatatypeByProperty(aProperty).getValue(getStereotype(getDatatypeByProperty(aProperty),'real'), 'max').toString()/]
[/if]
[/template]