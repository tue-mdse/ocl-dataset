[comment encoding = UTF-8 /]
[module widget('http://www.eclipse.org/uml2/4.0.0/UML')]
[import xismobile::pim::uml2::gen::ios::common::xisMobileUtils/]

[template public initializeWidget(c : Class) post (trim())]
[if (c.isXisLabel())]
self.[c.name.toLowerFirst()/]Label = ['['/]['['/]UILabel alloc[']'/] init[']'/];
self.[c.name.toLowerFirst()/]Label.frame = CGRectMake([c.getValue(c.getXisLabel(),'posX')/], [c.getValue(c.getXisLabel(),'posY')/], [c.getValue(c.getXisLabel(),'width')/], [c.getValue(c.getXisLabel(),'height')/]);
['['/]self.view addSubview:self.[c.name.toLowerFirst()/]Label[']'/];
[elseif (c.isXisTextBox())] 
self.[c.name.toLowerFirst()/]TextField = ['['/]['['/]UITextField alloc[']'/] init[']'/];
self.[c.name.toLowerFirst()/]TextField.frame = CGRectMake([c.getValue(c.getXisTextBox(),'posX')/], [c.getValue(c.getXisTextBox(),'posY')/], [c.getValue(c.getXisTextBox(),'width')/], [c.getValue(c.getXisTextBox(),'height')/]);
['['/]self.view addSubview:self.[c.name.toLowerFirst()/]TextField[']'/];
[elseif (c.isXisCheckBox())]
self.[c.name.toLowerFirst()/]CheckBox = ['['/]['['/]UIButton alloc[']'/] init[']'/];
self.[c.name.toLowerFirst()/]CheckBox.frame = CGRectMake([c.getValue(c.getXisCheckBox(),'posX')/], [c.getValue(c.getXisCheckBox(),'posY')/], [c.getValue(c.getXisCheckBox(),'width')/], [c.getValue(c.getXisCheckBox(),'height')/]);
['['/]self.view addSubview:self.[c.name.toLowerFirst()/]CheckBox[']'/];
//Define bool checkBoxSelected and function for changing background image
[elseif (c.isXisButton())]
self.[c.name.toLowerFirst()/]Button = ['['/]['['/]UIButton alloc[']'/] init[']'/];
self.[c.name.toLowerFirst()/]Button.frame = CGRectMake([c.getValue(c.getXisButton(),'posX')/], [c.getValue(c.getXisButton(),'posY')/], [c.getValue(c.getXisButton(),'width')/], [c.getValue(c.getXisButton(),'height')/]);
['['/]self.view addSubview:self.[c.name.toLowerFirst()/]Button[']'/];
[elseif (c.isXisLink())]
self.[c.name.toLowerFirst()/]URL = ['['/]['['/]NSURL alloc[']'/] init[']'/];
[elseif (c.isXisImage())]
self.[c.name.toLowerFirst()/]ImageView = ['['/]['['/]UIImageView alloc[']'/] init[']'/];
self.[c.name.toLowerFirst()/]ImageView.frame = CGRectMake([c.getValue(c.getXisImage(),'posX')/], [c.getValue(c.getXisImage(),'posY')/], [c.getValue(c.getXisImage(),'width')/], [c.getValue(c.getXisImage(),'height')/]);
['['/]self.view addSubview:self.[c.name.toLowerFirst()/]ImageView[']'/];
[elseif (c.isXisDatePicker())]
self.[c.name.toLowerFirst()/]DatePicker = ['['/]['['/]UIDatePicker alloc[']'/] init[']'/];
self.[c.name.toLowerFirst()/]DatePicker.datePickerMode = UIDatePickerModeDate;
self.[c.name.toLowerFirst()/]DatePicker.frame = CGRectMake([c.getValue(c.getXisDatePicker(),'posX')/], [c.getValue(c.getXisDatePicker(),'posY')/], [c.getValue(c.getXisDatePicker(),'width')/], [c.getValue(c.getXisDatePicker(),'height')/]);
['['/]self.view addSubview:self.[c.name.toLowerFirst()/]DatePicker[']'/];
[elseif (c.isXisTimePicker())]
self.[c.name.toLowerFirst()/]TimePicker = ['['/]['['/]UIDatePicker alloc[']'/] init[']'/];
self.[c.name.toLowerFirst()/]TimePicker.datePickerMode = UIDatePickerModeTime;
self.[c.name.toLowerFirst()/]TimePicker.frame = CGRectMake([c.getValue(c.getXisTimePicker(),'posX')/], [c.getValue(c.getXisTimePicker(),'posY')/], [c.getValue(c.getXisTimePicker(),'width')/], [c.getValue(c.getXisTimePicker(),'height')/]);
['['/]self.view addSubview:self.[c.name.toLowerFirst()/]TimePicker[']'/];
[elseif (c.isXisList())]
self.[c.name.toLowerFirst()/]TableView = ['['/]['['/]UITableView alloc[']'/]init[']'/];
self.[c.name.toLowerFirst()/]TableView.rowHeight = 50;
self.[c.name.toLowerFirst()/]TableView.delegate = self;
self.[c.name.toLowerFirst()/]TableView.dataSource = self;
self.[c.name.toLowerFirst()/]TableView.scrollEnabled = YES;
	[if (c.xisListIsSearchable())]
self.[c.name.toLowerFirst()/]SearchBar = ['['/]['['/]UISearchBar alloc[']'/]init[']'/];
self.[c.name.toLowerFirst()/]SearchBar.delegate = self;
self.[c.name.toLowerFirst()/]SearchBar.frame = CGRectMake([c.getValue(c.getXisList(),'posX')/], [c.getValue(c.getXisList(),'posY')/], [c.getValue(c.getXisList(),'width')/], 50);
['['/]self.view addSubview:self.[c.name.toLowerFirst()/]SearchBar[']'/];
self.[c.name.toLowerFirst()/]TableView.frame = CGRectMake([c.getValue(c.getXisList(),'posX')/], [c.getValue(c.getXisList(),'posY')/]+50, [c.getValue(c.getXisList(),'width')/], [c.getValue(c.getXisList(),'height')/]-50);
	[else]
self.[c.name.toLowerFirst()/]TableView.frame = CGRectMake([c.getValue(c.getXisList(),'posX')/], [c.getValue(c.getXisList(),'posY')/], [c.getValue(c.getXisList(),'width')/], [c.getValue(c.getXisList(),'height')/]);		
	[/if]
['['/]self.view addSubview:self.[c.name.toLowerFirst()/]TableView[']'/];
[elseif (c.isXisMapView())]
self.[c.name.toLowerFirst()/]MapView = ['['/]['['/]MKMapView alloc[']'/]init[']'/];
self.[c.name.toLowerFirst()/]MapView.mapType = MKMapTypeStandard;
self.[c.name.toLowerFirst()/]MapView.zoomEnabled = YES;
self.[c.name.toLowerFirst()/]MapView.scrollEnabled = YES;
self.[c.name.toLowerFirst()/]MapView.showsUserLocation = YES;
self.[c.name.toLowerFirst()/]MapView.delegate = self;
self.[c.name.toLowerFirst()/]MapView.frame = CGRectMake([c.getValue(c.getXisMapView(),'posX')/], [c.getValue(c.getXisMapView(),'posY')/], [c.getValue(c.getXisMapView(),'width')/], [c.getValue(c.getXisMapView(),'height')/]);
//['['/]self.view addSubview:self.[c.name.toLowerFirst()/]MapView[']'/];
[elseif (c.isXisDropdown())]
self.[c.name.toLowerFirst()/]PickerView = ['['/]['['/]UIPickerView alloc[']'/]initWithFrame:CGRectMake([c.getValue(c.getXisDropdown(),'posX')/], [c.getValue(c.getXisDropdown(),'posY')/], [c.getValue(c.getXisDropdown(),'width')/], [c.getValue(c.getXisDropdown(),'height')/])];
self.[c.name.toLowerFirst()/]PickerView.delegate = self;
self.[c.name.toLowerFirst()/]PickerView.dataSource = self;
self.[c.name.toLowerFirst()/]PickerView.showsSelectionIndicator = YES;	
[/if]

[comment]
if (mMap[c.name.toUpperFirst()/] == null) {
	Toast.makeText(getApplicationContext(), "Unable to create mMap[c.name.toUpperFirst()/]!", Toast.LENGTH_SHORT).show();
} else {
	[if (c.mapHasCenter())]
	LatLng center = new LatLng([c.getMapLatitute()/], [c.getMapLongitude()/]);
	[if (c.mapHasZoom())]
	mMap[c.name.toUpperFirst()/].moveCamera(CameraUpdateFactory.newLatLngZoom(center, [c.getMapZoom()/]));
	[else]
	mMap[c.name.toUpperFirst()/].moveCamera(CameraUpdateFactory.newLatLng(center));
	[/if]
	[/if]
	[if (c.mapHasMarkers())]
	[for (m : Class | c.getMapMarkers())]
	[if (m.markerHasTitle() or m.markerHasDescription() or
		(m.markerHasLatitude() and m.markerHasLongitude()) or m.markerHasIcon())]
	MarkerOptions mOpt = new MarkerOptions();
	[if (m.markerHasTitle())]
	mOpt.title([m.getMarkerTitle()/]);
	[/if]
	[if (m.markerHasDescription())]
	mOpt.snippet([m.getMarkerDescription()/]);
	[/if]
	[if (m.markerHasLatitude() and m.markerHasLongitude())]
	mOpt.position(new LatLng([m.getMarkerLatitude()/], [m.getMarkerLongitude()/]));
	[/if]
	[if (m.markerHasIcon())]
	mOpt.icon(BitmapDescriptorFactory.fromAsset("[m.getMarkerIcon()/]"));
	[/if]
	mMap[c.name.toUpperFirst()/].addMarker(mOpt);
	[/if]
	
	[if (m.markerHasOnTap())]
	mMap[c.name.toUpperFirst()/].setOnInfoWindowClickListener(new OnInfoWindowClickListener() {
		@Override
		public void onInfoWindowClick(Marker marker) {
			
		}
	});
	[/if]
	[/for]
	[/if]
}
[/if][/comment]
[/template]

[template public initializeWidgetFunctions(c : Class) post (trim())]
[if (c.isXisList())]
//TableView functions
 (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return 1;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    static NSString *CellIdentifier = @"Cell";
    UITableViewCell *cell = ['['/]self.tableView dequeueReusableCellWithIdentifier:CellIdentifier[']'/];
    if (cell == nil){
        cell = ['['/]['['/]UITableViewCell alloc[']'/] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:CellIdentifier[']'/];
    }
    return cell;
}

- (void) tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
  
}

- (UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath {

}

-(void)setEditing:(BOOL)editing animated:(BOOL) animated {

}

- (void) tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle) editing
 forRowAtIndexPath:(NSIndexPath *)indexPath {

}
	[if (c.xisListIsSearchable())]
//Searchbar functions
- (BOOL)searchBarShouldBeginEditing:(UISearchBar *)searchBar {
    return YES;
}

- (void)searchBarTextDidEndEditing:(UISearchBar *)searchBar{

}

- (void)searchBar:(UISearchBar *)searchBar textDidChange:(NSString *)searchText{
    
}

- (void)searchBarSearchButtonClicked:(UISearchBar *)searchBar{

}
	[/if]	
[elseif (c.isXisDatePicker())]
//Datepicker functions

[elseif (c.isXisMapView())]
//Mapview functions
- (MKOverlayView *)mapView:(MKMapView *)mapView viewForOverlay:(id)overlay {
    if (['['/]overlay isKindOfClass:['['/]MKPolyline class[']'/][']'/]) {
        MKPolylineView* aView = ['['/]['['/]MKPolylineView alloc[']'/]initWithPolyline:(MKPolyline*)overlay[']'/] ;
        aView.strokeColor = ['['/]['['/]UIColor blueColor[']'/] colorWithAlphaComponent:0.5[']'/];
        aView.lineWidth = 10;
        return aView;
    }
    return nil;
}

- (void)mapView:(MKMapView *)mapView didUpdateUserLocation:(MKUserLocation *)userLocation{

}

- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id <MKAnnotation>)annotation{
    if(['['/]annotation isKindOfClass:['['/]MKUserLocation class[']'/][']'/])
        return nil;
    NSString *annotationIdentifier = @"PinViewAnnotation";

    MKPinAnnotationView *pinView1 = (MKPinAnnotationView *) ['['/]self.mapView dequeueReusableAnnotationViewWithIdentifier:annotationIdentifier[']'/];
    MKAnnotationView *pinView2 = (MKAnnotationView *) ['['/]self.mapView dequeueReusableAnnotationViewWithIdentifier:annotationIdentifier[']'/];
    
    if (!pinView1){
        pinView1 = ['['/]['['/]MKPinAnnotationView alloc[']'/] initWithAnnotation:annotation reuseIdentifier:annotationIdentifier[']'/];
        pinView2 = ['['/]['['/]MKAnnotationView alloc[']'/] initWithAnnotation:annotation reuseIdentifier:annotationIdentifier[']'/];
    }
}

- (void)mapView:(MKMapView *)mapView annotationView:(MKAnnotationView *)view calloutAccessoryControlTapped:(UIControl *)control{
 
}
[elseif (c.isXisTextBox())]
//TextField functions
-(void)textFieldDidBeginEditing:(UITextField *)textField {

}

-(void)textFieldDidEndEditing:(UITextField *)textField{

}

- (BOOL)textFieldShouldReturn:(UITextField *)textField{

	Return YES;
}
	
[elseif (c.isXisTimePicker())]
//Timepicker functions

[elseif (c.isXisDropdown())]
//PickerView/Dropdown functions	
- (void)pickerView:(UIPickerView *)pickerView didSelectRow: (NSInteger)row inComponent:(NSInteger)component{
    
}

- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component {
    return 1;
}

- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView {
    return 1;
}

- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component {

}

- (CGFloat)pickerView:(UIPickerView *)pickerView widthForComponent:(NSInteger)component {

}	
[/if]
[/template]

