[comment encoding = UTF-8 /]
[module generateManager('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::ios::common::xisMobileUtils/]

[template public generateManager(cl : OrderedSet(Class))]
[file ('Manager.h', false, 'UTF-8')]
#import <Foundation/Foundation.h>
[for (c : Class | cl)]
#import "[c.name.toUpperFirst()/].h"
[/for]
@interface Manager : NSObject

[for (c : Class | cl)]
@property (nonatomic, strong) NSMutableArray *[c.name.toLowerFirst()/]Array;
[/for]
+ (id)sharedManager;
- (id)init;
[for (c : Class | cl)]
- (int)insert[c.name.toUpperFirst()/]:([c.name.toUpperFirst()/] *)[c.name.toLowerFirst()/];
- (void)update[c.name.toUpperFirst()/]:([c.name.toUpperFirst()/] *)[c.name.toLowerFirst()/];
- (void)delete[c.name.toUpperFirst()/]:([c.name.toUpperFirst()/] *)[c.name.toLowerFirst()/];
- (void)deleteAll[c.name.toUpperFirst()/]s;
- (NSMutableArray*)getAll[c.name.toUpperFirst()/]s;
- ([c.name.toUpperFirst()/]*)get[c.name.toUpperFirst()/]ById: (int)identifier;
[/for]
@end

[/file]

[file ('Manager.m', false, 'UTF-8')]
#import "Manager.h"

@implementation Manager
[for (c : Class | cl)]
- (int)insert[c.name.toUpperFirst()/]:([c.name.toUpperFirst()/] *)[c.name.toLowerFirst()/]{
	['['/]self.[c.name.toLowerFirst()/]Array addObject:[c.name.toLowerFirst()/][']'/];
    return ((int)['['/]self.[c.name.toLowerFirst()/]Array indexOfObject:[c.name.toLowerFirst()/][']'/]);
}
- (void)update[c.name.toUpperFirst()/]:([c.name.toUpperFirst()/] *)[c.name.toLowerFirst()/]{
	 for (int i = 0; i < self.[c.name.toLowerFirst()/]Array.count; i++) {
        if ([c.name.toLowerFirst()/].[c.name.toLowerFirst()/]ID == ['['/]['['/]self.[c.name.toLowerFirst()/]Array objectAtIndex:i[']'/][c.name.toLowerFirst()/]ID[']'/]) {
            ['['/]self.[c.name.toLowerFirst()/]Array replaceObjectAtIndex:i withObject:[c.name.toLowerFirst()/][']'/];
        }
    }
}
- (void)delete[c.name.toUpperFirst()/]:([c.name.toUpperFirst()/] *)[c.name.toLowerFirst()/]{
	 for (int i = 0; i < self.[c.name.toLowerFirst()/]Array.count; i++) {
        if ([c.name.toLowerFirst()/].[c.name.toLowerFirst()/]ID == ['['/]['['/]self.[c.name.toLowerFirst()/]Array objectAtIndex:i[']'/][c.name.toLowerFirst()/]ID[']'/]) {
            ['['/]self.[c.name.toLowerFirst()/]Array removeObjectAtIndex:i[']'/];
        }
    }
}
- (void)deleteAll[c.name.toUpperFirst()/]s{
	['['/]self.[c.name.toLowerFirst()/]Array removeAllObjects[']'/];
}
- (NSMutableArray*)getAll[c.name.toUpperFirst()/]s{
	return self.[c.name.toLowerFirst()/]Array;
}
- ([c.name.toUpperFirst()/]*)get[c.name.toUpperFirst()/]ById: (int)identifier{

}

[/for]
@end
[/file]
[/template]


