[comment encoding = UTF-8 /]
[module generateViewController('http://www.eclipse.org/uml2/4.0.0/UML')]
[import xismobile::pim::uml2::gen::ios::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::ios::services::services /]
[import xismobile::pim::uml2::gen::ios::files::widget /]

[template public generateControllerHeader(c : Class, entities: Sequence(Class))]
[file (c.name.toUpperFirst()+'ViewController.h', false, 'US-ASCII')]
#import <UIKit/UIKit.h>

[for (entity : Class | entities)]
#import "[entity.name.toUpperFirst()/].h"
[/for]
#import "ViewTaskController.h"
#import "NewTaskViewController.h"
[let dbNeeded : Boolean = entities->needsDbHelper()]
[let managerNeeded : Boolean = entities->needsEntityManager()]
[if (dbNeeded)]
#import "DBManager.h"
[elseif (managerNeeded)]
#import "Manager.h"
[/if]

@interface [c.name.toUpperFirst()/]ViewController : UIViewController <[c.writeTableView()/], NewTaskViewControllerDelegate>

[for (widget : Class | c.getXisWidgets())]
[widget.writeWidgetTypeAndName()/]
[/for]

//TODO Domain binding
@property (nonatomic, retain) NSMutableArray *tasks;
@property (nonatomic, retain) Task *task;

[if (dbNeeded)]
@property (nonatomic, retain) DBManager *dbManager;
[elseif (managerNeeded)]
@property (nonatomic, retain) Manager *manager;
[/if]
[/let]
[/let]

@end		
[/file]
[/template]

[template public generateViewController(c : Class, entities: Sequence(Class))]
[file (c.name.toUpperFirst()+'ViewController.m', false, 'US-ASCII')]
#import "[c.name.toUpperFirst()/]ViewController.h"

@interface [c.name.toUpperFirst()/]ViewController ()

@end

@implementation [c.name.toUpperFirst()/]ViewController

- (void)viewDidLoad{
    ['['/]super viewDidLoad[']'/];
    CGRect screenRect = ['['/]['['/]UIScreen mainScreen[']'/] bounds[']'/];
    CGFloat screenWidth = screenRect.size.width;
    CGFloat screenHeight = screenRect.size.height;
	    
[let dbNeeded : Boolean = entities->needsDbHelper()]
[let managerNeeded : Boolean = entities->needsEntityManager()]
[if (dbNeeded)]
	 self.dbManager = ['['/]['['/]DBManager alloc[']'/]init[']'/];
    ['['/]self.dbManager initDatabase[']'/];
     self.tasks = ['['/]self.dbManager getAllTasks[']'/];
[elseif (managerNeeded)]
     self.manager = ['['/]['['/]Manager alloc[']'/]init[']'/];
     self.tasks = ['['/]self.Manager getAllTasks[']'/];
[/if]
[/let]
[/let]
    
[if (c.hasTitle())]
	self.title = @"[c.getTitle()/]";
[/if]

[for (widget : Class | c.getXisWidgets())]
    [widget.initializeWidget()/]
[/for]

[let m : Class = c.getOptionsMenu()]
    NSMutableArray *barButtons = ['['/]['['/]NSMutableArray alloc[']'/]init[']'/];
[for (item : Class | m.getXisMenuItems())]
    UIBarButtonItem *[item.name.toLowerFirst()/]Button = ['['/]['['/]UIBarButtonItem alloc[']'/] initWithBarButtonSystemItem:UIBarButtonSystemItemRefresh target:self action:@selector([item.getXisAction().name.toLowerFirst()/]:)];    
    ['['/]barButtons addObject:[item.name.toLowerFirst()/]Button[']'/];
    self.navigationItem.leftBarButtonItem = self.editButtonItem;
[/for]
    self.navigationItem.rightBarButtonItems = barButtons;
[/let]
}

- (void)reloadTableData:(NewTaskViewController *)controller{
    self.tasks = ['['/]self.dbManager getAllTasks[']'/];
    ['['/]self.tableView reloadData[']'/];
}



[if (c.hasOptionsMenu())]
[for (item : Class | c.getOptionsMenu().getXisMenuItems())]
- (IBAction)[item.getXisAction().name.toLowerFirst()/]:(id)sender {
	[if (item.getXisAction().isCancelAction())]
    //Cancel operation, navigate to mainscreen
    ['['/]self.navigationController popToRootViewControllerAnimated:YES[']'/];
	[elseif (item.getXisAction().isCreateAction())]
    //Create operation
	
	[elseif (item.getXisAction().isCustomAction())]
    //Custom operation
	[elseif (item.getXisAction().isDeleteteAction())]
    //Delete operation
	[elseif (item.getXisAction().isDeleteteAllAction())]
    //Delete all operation
	[elseif (item.getXisAction().isOKAction())]
    //OK operation
	[elseif (item.getXisAction().isReadAction())]
    //Read operation
	[elseif (item.getXisAction().isUpdateAction())]
    //Update operation
    //Get data from database and reload table data
	[elseif (item.getXisAction().isWebServiceAction())]
    //Webservice operation
[comment]- (IBAction)syncClicked:(id)sender{
    //PUSH TO SERVER
    LogManager *logMan = [[LogManager alloc]init];
    if ([logMan logFileHasContent]) {
        [logMan readLog];
    }
    NSData *dataFromServer = [[NSData alloc] initWithContentsOfURL:
                              [NSURL URLWithString:@"http://demo--1.azurewebsites.net/JSON.php?f=getToDo"]];
    NSError *error;
    NSMutableArray *arrayJson = [NSJSONSerialization JSONObjectWithData:dataFromServer options:NSJSONReadingMutableContainers|NSJSONReadingMutableLeaves error:&error];
    if(error){
        NSLog(@"%@", [error localizedDescription]);
    }
    else {
        [self.tasks removeAllObjects];
        [self.dbManager deleteAllTasks];
        for (NSDictionary *data in arrayJson) {
            Task *newTask = [[Task alloc] init];
            newTask.name = [data objectForKey:@"Title"];
            newTask.description = [data objectForKey:@"Description"];
            newTask.date = [data objectForKey:@"Date"];
            newTask.externalTaskID = [NSString stringWithFormat:@"%@",[data objectForKey:@"id"]].intValue;
            newTask.taskID = [self.dbManager insertTask:newTask];
        }
    }
    self.tasks = [self.dbManager getAllTasks];
    [self.tableView reloadData];
}[/comment]
['['/]['['/]UIApplication sharedApplication[']'/] openURL:self.[c.name.toLowerFirst()/]URL [']'/];
	[elseif (item.getXisAction().isZoomInAction())]
    //Zoom in operation		
	[elseif (item.getXisAction().isZoomOutAction())]
    //Zoom out operation
	[elseif (item.getXisAction().isNavigateAction())]
	//Navigate operation		
	[/if]

	[if (item.getXisAction().performsNavigation())]		
	[item.getXisAction().getNavigation().toUpperFirst()/]ViewController *[item.getXisAction().getNavigation().toLowerFirst()/] = ['['/]['['/][item.getXisAction().getNavigation().toUpperFirst()/]ViewController alloc[']'/] init[']'/];
	['['/]self.navigationController pushViewController:[item.getXisAction().getNavigation().toLowerFirst()/] animated:YES[']'/];	
	[/if]	
	
	[comment]NSString *alertTitle = [[NSString alloc]initWithFormat:@"Are you sure you want to delete all tasks?"];
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:alertTitle message:nil delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"Delete Tasks", nil ];
    [alert show];
    NewTaskViewController *newTaskView = ['['/]['['/]NewTaskViewController alloc[']'/] init[']'/];
    newTaskView.delegate = self;
    ['['/]self.navigationController pushViewController:newTaskView animated:YES[']'/];[/comment]	
}
[/for]
[/if]

[comment not implemented/]
[comment]- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex{
    if (buttonIndex == 1) {
        [self.dbManager deleteAllTasks];
        self.tasks = [self.dbManager getAllTasks];
        [self.tableView reloadData];
    }
}[/comment]

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
[if (c.getXisListGroups()->size() > 0)]
    return [c.getXisListGroups()->size()/];
[else]
	return 1;
[/if]
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    //TODO Domain binding
	NSInteger count = self.tasks.count;
    if(self.editing) {
        count = count + 1;
    }
    return count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    static NSString *CellIdentifier = @"Cell";
    UITableViewCell *cell = ['['/]self.tableView dequeueReusableCellWithIdentifier:CellIdentifier[']'/];
    if (cell == nil){
        cell = ['['/]['['/]UITableViewCell alloc[']'/] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:CellIdentifier[']'/];
    }
    if (indexPath.row < self.tasks.count ) {
        self.task= ['['/]self.tasks objectAtIndex:indexPath.row[']'/];
        cell.textLabel.text = self.task.name;
        cell.detailTextLabel.text = self.task.date;

        cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
    } else {
        cell.textLabel.text = @"Add New Task";
        cell.detailTextLabel.text = @"";
        cell.editingAccessoryType = UITableViewCellAccessoryDisclosureIndicator;
    }
    return cell;
}

- (void) tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    ['['/]self.tableView deselectRowAtIndexPath:indexPath animated:YES[']'/];
    
	[comment]if ((indexPath.row < self.tasks.count) && !self.editing) {
		ViewTaskController *viewTask = [[ViewTaskController alloc] init];
        viewTask.task = [self.tasks objectAtIndex:indexPath.row];
        [self.navigationController pushViewController:viewTask animated:YES];
    }else if ((indexPath.row == self.tasks.count) && self.editing){
        NewTaskViewController *newTaskView = [[NewTaskViewController alloc] init];
        newTaskView.delegate = self;
        [self.navigationController pushViewController:newTaskView animated:YES];
    }[/comment]
}

[comment]- (UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath {
    if (indexPath.row < self.tasks.count ) {
        return UITableViewCellEditingStyleDelete;
    } else {
        return UITableViewCellEditingStyleInsert;
    }
}

-(void)setEditing:(BOOL)editing animated:(BOOL) animated {
    if( editing != self.editing ) {
        [super setEditing:editing animated:animated];
        [self.tableView setEditing:editing animated:animated];
        NSArray *indexes = [NSArray arrayWithObject:[NSIndexPath indexPathForRow:self.tasks.count inSection:0]];
        if (editing == YES ) {
            [self.tableView insertRowsAtIndexPaths:indexes withRowAnimation:UITableViewRowAnimationLeft];
        } else {
            [self.tableView deleteRowsAtIndexPaths:indexes withRowAnimation:UITableViewRowAnimationLeft];
        }
    }
}

- (void) tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle) editing
 forRowAtIndexPath:(NSIndexPath *)indexPath {
    if(editing == UITableViewCellEditingStyleDelete) {
        [self.dbManager deleteAllNotesToTask:[self.tasks objectAtIndex:indexPath.row]];
        [self.dbManager deleteTask:[self.tasks objectAtIndex:indexPath.row]];
        LogManager *logMan = [[LogManager alloc]init];
        [logMan writeToLog:DeleteTask :[self.tasks objectAtIndex:indexPath.row]];
        
        [self.tasks removeObjectAtIndex:indexPath.row];
        [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationLeft];
    }else{
        NewTaskViewController *newTaskView = [[NewTaskViewController alloc] init];
        self.editing = NO;
        newTaskView.delegate = self;
        [self.navigationController pushViewController:newTaskView animated:YES];
    }
}[/comment]

[for (widget : Class | c.getXisWidgets())]
[widget.initializeWidgetFunctions()/]
[/for]

[/file]
[/template]

[template private writeTableView(c : Class) post (trim())]
[let lists : Sequence(Class) = getXisLists(null, c)]
[if (lists->select(l : Class | l.xisListIsSearchable())->size() > 0)]
UITableViewDataSource, UITableViewDelegate, UISearchDisplayDelegate, UISearchBarDelegate
[else]
UITableViewDataSource, UITableViewDelegate
[/if]
[/let]
[/template]

[template public writeWidgetTypeAndName(c : Class) post (trim())]
[if (c.isXisLabel())]
@property (nonatomic, retain) UILabel *[c.name.toLowerFirst()/]Label;
[comment TODO, define tableview, IBOulet for textbox osv, property!!/]
[elseif (c.isXisTextBox())]
@property (nonatomic, retain) IBOutlet UITextField *[c.name.toLowerFirst()/]TextField;
[elseif (c.isXisCheckBox())]
@property (nonatomic, retain) UIButton *[c.name.toLowerFirst()/]CheckBox;
[elseif (c.isXisButton())]
@property (nonatomic, retain) UIButton *[c.name.toLowerFirst()/]Button;
[elseif (c.isXisLink())]
@property (nonatomic, retain) NSURL *[c.name.toLowerFirst()/]URL;
[elseif (c.isXisImage())]
@property (nonatomic, retain) UIImageView *[c.name.toLowerFirst()/]ImageView;
[elseif (c.isXisDatePicker())]
@property (nonatomic, retain) IBOutlet UIDatePicker *[c.name.toLowerFirst()/]DatePicker;
[elseif (c.isXisTimePicker())]
@property (nonatomic, retain) IBOutlet UIDatePicker *[c.name.toLowerFirst()/]TimePicker;
[elseif (c.isXisDropdown())]
@property (nonatomic, retain) IBOutlet UIPickerView *[c.name.toLowerFirst()/]PickerView;
[elseif (c.isXisMapView())]
@property (nonatomic, retain) MKMapView *[c.name.toLowerFirst()/]MapView;
[elseif (c.isXisList())]
	[if (c.xisListIsSearchable())]
@property (nonatomic, retain) UISearchBar *[c.name.toLowerFirst()/]SearchBar;
	[/if]
@property (nonatomic, retain) UITableView *[c.name.toLowerFirst()/]TableView;
[/if]
[/template]

