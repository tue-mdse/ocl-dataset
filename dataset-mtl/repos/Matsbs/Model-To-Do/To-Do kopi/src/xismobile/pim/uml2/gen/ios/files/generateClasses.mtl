[comment encoding = UTF-8 /]
[module generateClasses('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::ios::common::xisMobileUtils/]

[template public generateClasses(c : Class)]
[comment generate class.h file/]
[file (c.name.toUpperFirst() + '.h', false, 'UTF-8')]
#import <Foundation/Foundation.h>
[c.getAssosiations()/]

@interface [c.name.toUpperFirst()/] : NSObject

[if (c.hasXisEntityAttributes())]
[c.generateAttributes()/]		
[/if]

@end
[/file]

[comment generate class.m file/]
[file (c.name.toUpperFirst() + '.m', false, 'UTF-8')]
#import "[c.name.toUpperFirst()/].h"

@implementation [c.name.toUpperFirst()/]

@end
[/file]
[/template]

[template private generateAttributes(c : Class) post (trim())]
[if (c.isPersistent())]
@property int [c.name.toLowerCase()/]Id;
[/if]
[for (p : Property | c.getXisEntityAttributes())]
[p.getType()/][p.name/];
[/for]
[/template]

[template private getType(p : Property) post (trim())]
[let type : String = p.getXisEntityAttributeType()]
	[if (type = 'Integer')]
	@property int 
	[elseif (type = 'Double')]
	@property double 
	[elseif (type = 'String')]
	@property (nonatomic, retain) NSString *
	[elseif (type = 'Boolean')]
	@property bool
	[elseif (type = 'Date')]
	@property (nonatomic, retain) NSDate *
	[elseif (type = 'Time')]
	@property (nonatomic, retain) NSString *
	[elseif (type = 'Image')]
	@property (nonatomic, retain) UIImageView *
	[elseif (type = 'URL')]
	@property (nonatomic, retain) NSURL *
	[/if]
[/let]
	
[/template]

[template public getAssosiations(c : Class) post( trim())]
[for (a : Association | c.getXisEntityAssociations())]
[let first : Property = a.memberEnd->at(1)]
[let second : Property = a.memberEnd->at(2)]
[if (not first.isNavigable() and not second.isNavigable() or
first.isNavigable() and second.isNavigable())]
	[if (a.endType->at(1).name = c.name)]
[a.processAttr(2)/]
	[else]
[a.processAttr(1)/]
	[/if]
[elseif (first.isNavigable())]
	[if (a.endType->at(1).name <> c.name)]
[a.processAttr(1)/]
	[/if]	
[elseif (second.isNavigable())]
	[if (a.endType->at(2).name <> c.name)]
[a.processAttr(2)/]
	[/if]
[/if]
[/let]
[/let]
[/for]
[/template]

[template private processAttr(a : Association, idx : Integer) post (trim())]
[let p : Property = a.memberEnd->at(idx)]
	[if (p.upperBound() = 1)]
#import "[a.endType->at(idx).name.toUpperFirst()/].h"
	[elseif (p.upperBound() = -1)]
[comment 1 to many relations /]
#import "[a.endType->at(idx).name.toUpperFirst()/].h"
	[/if]
[/let]
[/template]



