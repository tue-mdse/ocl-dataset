[comment encoding = UTF-8 /]
[module endpoint('http://www.github.com/lbroudoux/dsl/eip/1.0')]

[import com::github::lbroudoux::dsl::eip::gen::spring::common::channel /]

[template public genEndpoint(aEndpoint : Endpoint) post(trim())]
<!-- Endpoint not yet supported by generator -->
[/template]

[template public genEndpoint(aFilter : Filter) post(trim())]
<int:filter id="[aFilter.name/]" [aFilter.genChannelEndpointAttributes()/] />
[/template]

[template public genEndpoint(aFilter : ContentFilter) post(trim())]
<int:filter id="[aFilter.name/]" [aFilter.genChannelEndpointAttributes()/] />
[/template]

[template public genEndpoint(anEnricher : Enricher) post(trim())]
[if (anEnricher.part = MessagePart::HEADER)]
<int:header-enricher id="[anEnricher.name/]" [anEnricher.genChannelEndpointAttributes()/] />
[/if]
[if (anEnricher.part = MessagePart::PAYLOAD)]
<int:enricher id="[anEnricher.name/]" />
[/if]
[/template]

[template public genEndpoint(aTransformer : Transformer) post(trim())]
<int:transformer id="[aTransformer.name/]" [aTransformer.genChannelEndpointAttributes()/] />
[/template]

[template public genEndpoint(aRouter : Router) post(trim())]
[if (aRouter.type = RoutingType::HEADER_VALUE)]
<int:header-value-router id="[aRouter.name/]" [aRouter.genInputChannelEndpointAttribute()/] header-name="[aRouter.name/]"
    default-output-channel="[aRouter.toChannels->first().name/]">
[for (route : ConditionalRoute | aRouter.ownedRoutes)]
  <int:mapping id="[route.condition/]" value="[route.condition/]" channel="[route.channel.name/]" />
[/for]
</int:header-value-router>
[/if]
[if (aRouter.type = RoutingType::PAYLOAD_VALUE)]
<int:router id="[aRouter.name/]" [aRouter.genInputChannelEndpointAttribute()/] expression="payload.paymentType"
	 default-output-channel="[aRouter.toChannels->first().name/]">
[for (route : ConditionalRoute | aRouter.ownedRoutes)]
  <int:mapping id="[route.condition/]" value="[route.condition/]" channel="[route.channel.name/]" />
[/for]
</int:router>
[/if]
[if (aRouter.type = RoutingType::PAYLOAD_TYPE)]
<int:payload-type-router id="[aRouter.name/]" [aRouter.genInputChannelEndpointAttribute()/] header-name="[aRouter.name/]"
    default-output-channel="[aRouter.toChannels->first().name/]">
[for (route : ConditionalRoute | aRouter.ownedRoutes)]
  <int:mapping id="[route.condition/]" type="[route.condition/]" channel="[route.channel.name/]" />
[/for]
</int:payload-type-router>
[/if]
[/template]

[template public genEndpoint(aSplitter : Splitter) post(trim())]
<int:splitter id="[aSplitter.name/]" [aSplitter.genChannelEndpointAttributes()/] />
[/template]

[template public genEndpoint(anAggregator : Aggregator) post(trim())]
<int:aggregator id="[anAggregator.name/]" [anAggregator.genChannelEndpointAttributes()/] />
[/template]

[template public genEndpoint(aResequencer : Resequencer) post(trim())]
<int:resequencer id="[aResequencer.name/]" [aResequencer.genChannelEndpointAttributes()/]
[if (not aResequencer.expression.oclIsUndefined())]
  correlation-strategy-expression="[aResequencer.expression/]"
[elseif (not aResequencer.strategy.oclIsUndefined())]
  correlation-strategy="[aResequencer.strategy/]"
[/if]
[if (aResequencer.streamSequences)] 
  release-partial-sequences="true"
[/if]
/>
[/template]

[template public genEndpoint(aCompositeProcessor : CompositeProcessor) post(trim())]
<int:chain id="[aCompositeProcessor.name/]" [aCompositeProcessor.genChannelEndpointAttributes()/]>
[for (endpoint : Endpoint | aCompositeProcessor.ownedEndpoints)]
  [endpoint.genEndpoint()/]
[/for]
</int:chain>
[/template]

[template public genEndpoint(aGateway : Gateway) post(trim())]
<int:gateway id="[aGateway.name/]" [aGateway.genChannelEndpointAttributes()/] />
[/template]

[template public genEndpoint(aServiceActivator : ServiceActivator) post(trim())]
<int:service-activator id="[aServiceActivator.name/]" [aServiceActivator.genChannelEndpointAttributes()/] />
[/template]
