[comment encoding = UTF-8 /]
[module endpoint('http://www.github.com/lbroudoux/dsl/eip/1.0')]

[import com::github::lbroudoux::dsl::eip::gen::camel::java::channel /]
[import com::github::lbroudoux::dsl::eip::gen::camel::requests::requests /]

[template public followRoute(aEndpoint : Endpoint) post(trim())]
[if (aEndpoint.toChannels->size() > 1)]
[if (aEndpoint.endsWithAggregator())]
.multicast().aggregationStrategyRef("[aEndpoint.getFollowingAggregator().strategy/]")				// [aEndpoint.getFollowingAggregator().name/]
[else]
.multicast()
[/if]
[for (channel : Channel | aEndpoint.toChannels)]
  .to("direct:[channel.toEndpoint.name/]")			// [channel.name/]
[/for]
[if (aEndpoint.endsWithAggregator())]
.end()
[aEndpoint.getFollowingAggregator().followRoute()/]
[/if]
[elseif (not aEndpoint.toChannels->first().oclIsUndefined())]
[aEndpoint.toChannels->first().toEndpoint.genEndpoint()/]
[/if]
[/template]

[template public genEndpoint(anEndpoint : Endpoint) post(trim())]
// Endpoint not yet supported by generator
[/template]

[template public genEndpoint(aFilter : Filter) post(trim())]
.filter()					// [aFilter.name/][aFilter.genOutgoingChannelName()/]
[aFilter.followRoute()/]
[/template]

[template public genEndpoint(aFilter : ContentFilter) post(trim())]
.setBody(body().append(" updated"))				// [aFilter.name/][aFilter.genOutgoingChannelName()/]
[aFilter.followRoute()/]
[/template]

[template public genEndpoint(anEnricher : Enricher) post(trim())]
.enricher("direct:resource")			// [anEnricher.name/][anEnricher.genOutgoingChannelName()/]
[anEnricher.followRoute()/]
[/template]

[template public genEndpoint(aTransformer : Transformer) post(trim())]
.to("xslt:")				// [aTransformer.name/][aTransformer.genOutgoingChannelName()/]
[aTransformer.followRoute()/]
[/template]

[template public genEndpoint(aRouter : Router) post(trim())]
.choice()					// [aRouter.name/][aRouter.genOutgoingChannelName()/]
[for (route : ConditionalRoute | aRouter.ownedRoutes)]
   .when()						// [route.channel.name/]
      [route.channel.toEndpoint.genEndpoint()/]
[/for]
   .otherwise()
      [aRouter.followRoute()/]
[/template]

[template public genEndpoint(aSplitter : Splitter) post(trim())]
[if (aSplitter.endsWithAggregator())]
.split(body().tokenize(","), new [aSplitter.getFollowingAggregator().strategy/]())					// [aSplitter.name/][aSplitter.genOutgoingChannelName()/]
[else]
.split()					// [aSplitter.name/][aSplitter.genOutgoingChannelName()/]
[/if]
  [aSplitter.followRoute()/]
[/template]

[template public genEndpoint(anAggregator : Aggregator) post(trim())]
[comment Nothing to generate here: aggregation strategy is defined on split or multicast/]
[/template]

[template public genEndpoint(aResequencer : Resequencer) post(trim())]
.resequence([aResequencer.genExpression()/])[aResequencer.genConfig()/]				// [aResequencer.name/][aResequencer.genOutgoingChannelName()/]
[aResequencer.followRoute()/]
[/template]

[template private genExpression(aResequencer : Resequencer) post(trim())]
[if (aResequencer.part = MessagePart::PAYLOAD)]
body()
[else]
header("[aResequencer.expression/]")
[/if]
[/template]

[template private genConfig(aResequencer : Resequencer) post(trim())]
[if (aResequencer.streamSequences)]
.stream()
[else]
.batch()
[/if]
[/template]

[template public genEndpoint(aCompositeProcessor : CompositeProcessor) post(trim())]
[for (endpoint : Endpoint | aCompositeProcessor.ownedEndpoints)]
[if (endpoint.fromChannels->size() = 0)]
  [endpoint.genEndpoint()/]
[/if]
[/for]
.end()
[aCompositeProcessor.followRoute()/]
[/template]

[template public genEndpoint(aGateway : Gateway) post(trim())]
.to("switchyard://[aGateway.name/]")						// [aGateway.name/][aGateway.genOutgoingChannelName()/]
[/template]

[template public genEndpoint(aServiceActivator : ServiceActivator) post(trim())]
.to("switchyard://[aServiceActivator.name/]")						// [aServiceActivator.name/][aServiceActivator.genOutgoingChannelName()/]
[aServiceActivator.followRoute()/]
[/template]
