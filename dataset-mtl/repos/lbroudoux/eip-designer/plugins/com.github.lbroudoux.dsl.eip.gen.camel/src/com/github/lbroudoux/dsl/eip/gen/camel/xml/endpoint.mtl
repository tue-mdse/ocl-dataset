[comment encoding = UTF-8 /]
[module endpoint('http://www.github.com/lbroudoux/dsl/eip/1.0')]

[import com::github::lbroudoux::dsl::eip::gen::camel::xml::channel /]
[import com::github::lbroudoux::dsl::eip::gen::camel::requests::requests /]

[template public followRoute(aEndpoint : Endpoint) post(trim())]
[if (aEndpoint.toChannels->size() > 1)]
[if (aEndpoint.endsWithAggregator())]
<multicast id="[aEndpoint.getFollowingAggregator().name/][aEndpoint.getFollowingAggregator().genOutgoingChannelName()/]" strategyRef="[aEndpoint.getFollowingAggregator().strategy/]">
[else]
<multicast>
[/if]
[for (channel : Channel | aEndpoint.toChannels)]
  <to id="[channel.name/]" uri="direct:[channel.toEndpoint.name/]"/>
[/for]
</multicast>
[if (aEndpoint.endsWithAggregator())]
[aEndpoint.getFollowingAggregator().followRoute()/]
[/if]
[elseif (not aEndpoint.toChannels->first().oclIsUndefined())]
[aEndpoint.toChannels->first().toEndpoint.genEndpoint()/]
[/if]
[/template]

[template public genEndpoint(anEndpoint : Endpoint) post(trim())]
<!-- Endpoint not yet supported by generator -->
[/template]

[template public genEndpoint(aFilter : Filter) post(trim())]
<filter id="[aFilter.name/][aFilter.genOutgoingChannelName()/]">
  <simple></simple>
  [aFilter.followRoute()/]	
</filter>
[/template]

[template public genEndpoint(aFilter : ContentFilter) post(trim())]
<setBody id="[aFilter.name/][aFilter.genOutgoingChannelName()/]">
  <xpath resultType="org.w3c.dom.Document">//foo:bar</xpath>
</setBody>
[aFilter.followRoute()/]
[/template]

[template public genEndpoint(anEnricher : Enricher) post(trim())]
<enrich id="[anEnricher.name/][anEnricher.genOutgoingChannelName()/]">
  <constant>direct:resource</constant>
</enrich>
[anEnricher.followRoute()/]
[/template]

[template public genEndpoint(aTransformer : Transformer) post(trim())]
<to id="[aTransformer.name/][aTransformer.genOutgoingChannelName()/]" uri="xslt:[aTransformer.name/]"/>
[aTransformer.followRoute()/]
[/template]

[template public genEndpoint(aRouter : Router) post(trim())]
<choice id="[aRouter.name/][aRouter.genOutgoingChannelName()/]">
[for (route : ConditionalRoute | aRouter.ownedRoutes)]
  <when id="[route.channel.name/]">
	<simple>[route.condition/]</simple>
	[route.channel.toEndpoint.genEndpoint()/]
  </when>
[/for]
  <otherwise>
	[aRouter.followRoute()/]
  </otherwise>
</choice>
[/template]

[template public genEndpoint(aSplitter : Splitter) post(trim())]
[if (aSplitter.endsWithAggregator())]
<split id="[aSplitter.name/][aSplitter.genOutgoingChannelName()/]" strategyRef="[aSplitter.getFollowingAggregator().strategy/]">
[else]
<split id="[aSplitter.name/][aSplitter.genOutgoingChannelName()/]">
[/if]
  [aSplitter.followRoute()/]
</split>
[/template]

[template public genEndpoint(anAggregator : Aggregator) post(trim())]
[comment Nothing to generate here: aggregation strategy is defined on split or multicast/]
[/template]

[template public genEndpoint(aResequencer : Resequencer) post(trim())]
<resequence id="[aResequencer.name/][aResequencer.genOutgoingChannelName()/]">
[if (aResequencer.streamSequences)]
  <stream-config />
[else]
  <batch-config />
[/if]
[if (aResequencer.part = MessagePart::PAYLOAD)]
  <simple>body</simple>
[else]
  <simple>[aResequencer.expression/]</simple>
[/if]
  [aResequencer.followRoute()/]
</resequence>
[/template]

[template public genEndpoint(aCompositeProcessor : CompositeProcessor) post(trim())]
<pipeline id="[aCompositeProcessor.name/][aCompositeProcessor.genOutgoingChannelName()/]">
[for (endpoint : Endpoint | aCompositeProcessor.ownedEndpoints)]
[if (endpoint.fromChannels->size() = 0)]
  [endpoint.genEndpoint()/]
[/if]
[/for]
</pipeline>
[aCompositeProcessor.followRoute()/]
[/template]

[template public genEndpoint(aGateway : Gateway) post(trim())]
<to id="[aGateway.name/][aGateway.genOutgoingChannelName()/]" uri="switchyard://[aGateway.name/]"/>
[/template]

[template public genEndpoint(aServiceActivator : ServiceActivator) post(trim())]
<to id="[aServiceActivator.name/][aServiceActivator.genOutgoingChannelName()/]" uri="switchyard://[aServiceActivator.name/]"/>
[aServiceActivator.followRoute()/]
[/template]
