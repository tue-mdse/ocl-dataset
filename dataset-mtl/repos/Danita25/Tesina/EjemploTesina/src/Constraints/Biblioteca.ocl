import Biblioteca: '../model/Biblioteca.ecore'

package Biblioteca

context Biblioteca
	inv poseeDireccion: direccion<>''
-- no entiendo todavia el significado de activo o no pero puede ser que como cambie el metamodelo ahora no tenga atanto sentido como antes
-- inv poseeLibros: libros->select(l| l.activo=true)->notEmpty()
    inv poseeLibros: libros->notEmpty()
	inv librosNoRepetidos: libros->forAll(l1,l2|l1<>l2 and l1.autor=l2.autor implies l1.titulo<>l2.titulo) 
	inv autoresNoRepetidos: autores->forAll(a1,a2|a1<>a2 implies a1.nombreCompleto<>a2.nombreCompleto) 
	
context Libro 
--	inv poseeCopias: copias>0
	inv tieneAutor: self.autor->notEmpty()	
--	inv suficientesCopias: (Prestamo.allInstances()->select(p1| p1.fechaDeDevolucion=null and p1.libro=self))->size()<= copias

context Prestamo 
	inv tieneFechaInicio : self.fechaDeInicio <> null
	inv tieneFechaFin : self.fechaDeFin <> null
	inv tieneSocio : self.socio <> null 
	inv tieneLibro : self.ejemplar <> null

	inv fechasSolicitudValidas : --No hace falta preguntar que no sean null eso lo validan las primeras 2 invariantes.
		self.fechaDeInicio <= self.fechaDeFin		

		
context Multa
	inv tienePrestamo: self.prestamo <> null
	inv tieneFecha : self.fecha <> null
    --monto se calcula 10 pesos por cada dia extra
	inv montoValido: self.monto = self.diasExcedidos * 10
	
context Socio	
	--Obtener todos los prestamos del socio activos y no activos
	def: Prestamos() : OrderedSet(Prestamo) = self.prestamos
	--Obtener todos las multas del socio activas y no activas ordenadas.
	def: Multas() : OrderedSet(Multa) = self.multas
	
	inv mayorEdad: self.edad >= 18  
	inv tieneNumeroSocio: self.numeroDeSocio > 0
	inv tieneNombreCompleto: self.nombreCompleto <> ''
--PoseePrestamo no me parece que funcione excepto que solo se creen socios con al menos un prestamo la priemra vez	
	inv poseePrestamo:Prestamos()->notEmpty()


context Socio::devolverEjemplar(codigo:Integer, fechaActual :ecore::EDate) : Prestamo
	pre: Prestamos()->select(p1| p1.fechaDeDevolucion=null)->notEmpty()
	post: Prestamos()->select( p | p.ejemplar.numeroDeEjemplar = codigo and p.fechaDeDevolucion=null).fechaDeDevolucion = fechaActual
	

context Socio::existeSocio(numeroDeSocio:String):Boolean
	body: Socio.allInstances()->exists(numeroDeSocio=numeroDeSocio)

--para asegurar id de socio unico
context Socio::numeroDeSocio : String init:
	Socio::uniqueID()

--context Ejemplar::numeroDeEjemplar : String init:
--	Ejemplar::uniqueID()
	

context Autor
	inv tieneNombre: nombreCompleto <> ''
	inv poseeObras: not obras->isEmpty()


context Socio::solicitarEjemplar(ISBN: String):Prestamo
	pre NoTieneMultasImpagas: Multas()->select(m| m.fechaDePago = null)->isEmpty()
	pre NoExcedeLimiteDePrestamo: (Prestamos()->select(p1| p1.fechaDeDevolucion = null))->size() < 3
--	pre libroActivo: libro.activo
--	pre libroDisponible: (Prestamo.allInstances()->select(p|p.fechaDeDevolucion=null and p.libro=libro)->size()<libro.copias)
--ver si vale la pena chequear ejemplar o si es mas facil recibir el ejemplar disponible directamente como parametro. 
--	pre EjemplarDisponible: 
	post prestamosPost: Prestamos()->size() > Prestamos()->size()@pre
endpackage