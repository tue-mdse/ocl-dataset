[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/emf/2002/Ecore')]


[template public generateElement(anEClass : EClass)]
[comment @main/]
[file (anEClass.name.concat('.java'), false, 'UTF-8')]
package engine.gen;

[if (anEClass.eAllReferences->size() > 0)]
import java.util.List;
[/if]

[if (anEClass.eAllOperations->size() > 0)]
import engine.logic.*;
import engine.logic.strategies.*;
[/if]

public[if (anEClass.abstract)] abstract[/if] class [anEClass.name.toUpperFirst() /][for (c : EClass|anEClass.eSuperTypes)] extends [c.name/][/for][if (anEClass.getEAnnotation('Interface') <> null)] implements [for (anno : EAnnotation | anEClass.eAnnotations->any(anEClass.getEAnnotation('Interface') <> null )) separator (', ')][anno.details.value/][/for][/if]{
	[for (a : EAttribute | anEClass.eAttributes)]
	private [a.eType.name.substring(2)/] [a.name/];
	[/for]
	[for (r : EReference | anEClass.eReferences)]
	[if (r.upperBound > 1)]
	private List<[r.eReferenceType.name.toUpperFirst()/]> [r.name/];
	[elseif (r.upperBound = 1)]
	private [r.eReferenceType.name.toUpperFirst()/] [r.name/];
	[/if]	
	[/for]

	public [anEClass.name.toUpperFirst()/]([for (a : EAttribute | anEClass.eAllAttributes) separator (', ')][a.eType.name.substring(2)/] [a.name/][/for][if (anEClass.eAllReferences->size() > 0)][if (anEClass.eAllAttributes->size() > 0)], [/if][for (r : EReference | anEClass.eAllReferences) separator (', ')][if (r.upperBound > 1)]List<[r.eReferenceType.name.toUpperFirst()/]> [r.name/][elseif (r.upperBound = 1)][r.eReferenceType.name.toUpperFirst()/] [r.name/][/if][/for][/if]){
		super([for (a : EAttribute | anEClass.eAllAttributes->removeAll(anEClass.eAttributes)) separator (', ')][a.name/][/for][if (anEClass.eAllReferences->removeAll(anEClass.eReferences)->size() > 0)][if (anEClass.eAllAttributes->removeAll(anEClass.eAttributes)->size() > 0)], [/if][for (r : EReference | anEClass.eAllReferences->removeAll(anEClass.eReferences)) separator (', ')][if (r.upperBound > 1)][r.name/][elseif (r.upperBound = 1)][r.name/][/if][/for][/if]);
		[for (a : EAttribute | anEClass.eAttributes)]
		this.[a.name/] = [a.name/];
		[/for]
		[for (r : EReference | anEClass.eReferences)]
		this.[r.name/] = [r.name/];	
		[/for]
	}	

	[for (a : EAttribute | anEClass.eAttributes) separator ('\n')]
	public [a.eType.name.substring(2)/] get[a.name.toUpperFirst()/]() {
		return this.[a.name/];
	}
	[/for]	
	[for (r : EReference | anEClass.eReferences) separator ('\n')]
	public [if (r.upperBound > 1)]List<[r.eReferenceType.name.toUpperFirst()/]>[elseif (r.upperBound = 1)][r.eReferenceType.name.toUpperFirst()/][/if] get[r.name.toUpperFirst()/]() {
		return this.[r.name/];
	}
	[/for]

	[for (a : EAttribute | anEClass.eAttributes) separator ('\n')]
	public synchronized void set[a.name.toUpperFirst()/]([a.eType.name.substring(2)/] [a.name/]) {
		this.[a.name/] = [a.name/];
	}
	[/for]
	[for (r : EReference | anEClass.eReferences) separator ('\n')]
	public synchronized void set[r.name.toUpperFirst()/]([if (r.upperBound > 1)]List<[r.eReferenceType.name.toUpperFirst()/]>[elseif (r.upperBound = 1)][r.eReferenceType.name.toUpperFirst()/][/if] [r.name/]) {
		this.[r.name/] = [r.name/];
	}
	[/for]
	
	[for (o : EOperation | anEClass.eOperations) separator ('\n')]
	public [if(o.eType = null)]void [else][o.eType.name.substring(2) /] [/if][o.name/]([for (p : EParameter | o.eParameters) separator (', ')] [p.eType.name.substring(2)/] [o.name/][/for]) {
		StrategyFactory factory = StrategyFactory.getInstance();
		IOperationStrategy strategy = factory.getStrategy("[anEClass.name.toUpperFirst()/]", "[o.name/]");
		[if(o.eType <> null)]return [/if]strategy.execute(this);
	}
	[/for]

}
[/file]
[/template]
