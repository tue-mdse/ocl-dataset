[comment encoding = UTF-8 
 Copyright (c) 2015 Obeo.
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
 
 Contributors:
     Obeo - initial API and implementation
/]
[module common('http://www.obeo.fr/dsl/mindstorms/1.0.0')]


[template public genName(aNamedElement : NamedElement)]
[aNamedElement.name.replaceAll('\\s', '')/]
[/template]

[template public genName(aProcedure : Procedure)]
[aProcedure.name.replaceAll('\\s', '').toLowerFirst()/]
[/template]

[template public genName(aArbitrator : Arbitrator)]
[aArbitrator.name.replaceAll('\\s', '').toLowerFirst()/]
[/template]

[template public genClassName(aArbitrator : Arbitrator)]
[aArbitrator.name.replaceAll('\\s', '').toUpperFirst()/]
[/template]

[template public genName(aBehavior : Behavior)]
[aBehavior.name.replaceAll('\\s', '').toUpperFirst()/]
[/template]

[template public genName(aBehavior : ExploreForward)]
ExploreForward[aBehavior.eContainer(Arbitrator).genName()/]
[/template]

[template public genName(aBehavior : ReturnBottleToBase)]
ReturnBottleToBase[aBehavior.eContainer(Arbitrator).genName()/]
[/template]

[template public genName(aBehavior : AvoidObstacle)]
AvoidObstacle[aBehavior.eContainer(Arbitrator).genName()/]
[/template]

[template public genInstruction(aInstruction : Instruction)]
	// Instruction not managed yet [aInstruction.eClass().name/]
[/template]

[template public genInstruction(aFlow : Flow)]
	// Flow not managed yet [aFlow.eClass().name/]
[/template]

[template public genInstruction(aBlock : Block)]
	// Block not managed yet [aBlock.eClass().name/]
[/template]

[template public genInstruction(aAction : Action)]
	// Action not managed yet [aAction.eClass().name/]
[/template]

[template public genInstruction(aGF : GoForward) post (trim())]
[if (aGF.infinite = true)]
robot.goForward();
[else]
robot.goForward([aGF.cm/]);
[/if]
[/template]

[template public genInstruction(aGB : GoBackward) post (trim())]
[if (aGB.infinite = true)]
robot.goBackward();
[else]
robot.goBackward([aGB.cm/]);
[/if]
[/template]

[template public genInstruction(aDelay : Delay)]
robot.delay([aDelay.ms/]);
[/template]

[template public genInstruction(aGrab : Grab)]
robot.grab();
[/template]

[template public genInstruction(aRelease : Release)]
robot.release();
[/template]

[template public genInstruction(aRotate : Rotate) post (trim())]
[if (aRotate.random = true)]
robot.rotateRandomly();
[else]
robot.rotate([aRotate.degrees/]);
[/if]
while (robot.isMoving()) {
	Thread.yield();
}
[/template]

[template public genInstruction(aReturnToBase : ReturnToBase) post (trim())]
robot.returnToBase();
while (robot.isMoving()) {
	Thread.yield();
}
[/template]

[template public genInstruction(aGoToEnemy : GoToEnemy) post (trim())]
robot.goTo(80,50);
[/template]

[template public genInstruction(aGoTo : GoTo)]
robot.goTo([aGoTo.x/], [aGoTo.y/]);
[/template]

[comment Do not generate While instruction if condition leads to 'false' : it won't compile. /]
[template public genInstruction(aWhile : While) post (trim())]
[if (aWhile.genCondition() <> 'false')]
while ([aWhile.genCondition()/]) {
[for (b : Block | if aWhile.blocks->oclIsUndefined() then Sequence{} else aWhile.blocks endif)]
	[b.genInstruction()/]
[/for]
}
[/if]
[/template]

[template public genInstruction(aIf : If)]
if ([aIf.genCondition()/]) {
[for (b : Block | if aIf.blocks->oclIsUndefined() then Sequence{} else aIf.blocks endif)]
	[b.genInstruction()/]
[/for]
}
[/template]

[template public genInstruction(aArbitrator : Arbitrator)]
[aArbitrator.genName()/]();
[/template]

[template public genInstruction(aProcedure : Procedure)]
[aProcedure.genName()/]();
[/template]

[template public genInstruction(aReuse : ReuseInstruction)]
[reuse.genInstruction()/]
[/template]

[template public genCondition(aFlow : Flow) post (trim())]
[if (aFlow.condition.oclIsUndefined())]
false
[else]	
[aFlow.condition.genCondition()/]
[/if]
[/template]

[template public genCondition(aCondition : Condition)]
	// Condition not managed yet [aCondition.eClass().name/]
[/template]

[template public genCondition(aSensor : Sensor)]
	// Sensor not managed yet [aSensor.eClass().name/]
[/template]

[template public genCondition(aColor : ColorSensor) post (trim())]
[if (aColor.color.oclIsUndefined())]
robot.getColor() == Color.NONE
[else]	
robot.getColor() == Color.[aColor.color/]
[/if]
[/template]

[template public genCondition(aTouch : TouchSensor)]
robot.touchSensorIsPressed() == [aTouch.isPressed/]
[/template]

[template public genCondition(aUS : UltrasonicSensor) post (trim())]
[if (aUS.operator.oclIsUndefined() or aUS.value.oclIsUndefined())]
false
[else]	
robot.getDistance() [aUS.operator.getOperator()/] [aUS.value/]
[/if]
[/template]

[template public genStopCondition(aArbitrator : Arbitrator) post (trim())]
[if (aArbitrator.condition.oclIsUndefined())]
false
[else]	
[aArbitrator.condition.genCondition()/]
[/if]
[/template]

[template public genPackagePath(any : OclAny)]
fr/obeo/dsl/mindstorms/robot/
[/template]

[template public genPackageQualifiedName(any : OclAny)]
fr.obeo.dsl.mindstorms.robot
[/template]

[query public getOperator(aOperator : OperatorKind) : String = 
if (aOperator->oclIsUndefined()) then
	''
else 
	if (aOperator.toString().equalsIgnoreCase('lowerOrEqual')) then
	'<='
	else 
		if (aOperator.toString().equalsIgnoreCase('upperOrEqual')) then
		'>='
		else
			if (aOperator.toString().equalsIgnoreCase('notEqual')) then
			'!='
			else
			'=='
			endif
		endif
	endif
endif
/]