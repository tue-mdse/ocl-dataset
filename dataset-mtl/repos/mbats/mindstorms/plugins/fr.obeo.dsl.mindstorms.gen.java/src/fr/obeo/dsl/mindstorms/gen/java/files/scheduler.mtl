[comment encoding = UTF-8 
 Copyright (c) 2015 Obeo.
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
 
 Contributors:
     Obeo - initial API and implementation
/]
[module scheduler('http://www.obeo.fr/dsl/mindstorms/1.0.0')]

[import fr::obeo::dsl::mindstorms::gen::java::common::common /]

[template public genScheduler(aArbitrator : Arbitrator)]
[file (aArbitrator.genPackagePath() + aArbitrator.genClassName() + '.java', false, 'UTF-8')]
/**
 * Copyright (c) 2015 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 */
package [aArbitrator.genPackageQualifiedName()/];

import lejos.robotics.Color;
import lejos.robotics.subsumption.Behavior;

/**
 * Arbitrator controls which Behavior object will become active in
 * a behavior control system. Make sure to call start() after the 
 * Arbitrator is instantiated.<br>
 *  This class has three major responsibilities: <br> 
 * 1. Determine the highest priority  behavior that returns <b> true </b> to takeControl()<br>   
 * 2. Suppress the active behavior if its priority is less than highest
 * priority. <br>   
 * 3. When the action() method exits, call action() on the Behavior of highest priority.
 * <br>  The Arbitrator assumes that a Behavior is no longer active when action() exits,
 * <br>  therefore it will only call suppress() on the Behavior whose action() method is running.
 * <br>  It can make consecutive calls of action() on the same Behavior.
 * <br>  Requirements for a Behavior:
 * <br>    When suppress() is called, terminate  action() immediately.
 * <br>    When action() exits, the robot is in a safe state (e.g. motors stopped)
 * @see Behavior
 * @author Roger Glassey
 */
public class [aArbitrator.genClassName()/]
{

  private final int NONE = -1;
  private Behavior['[]'/] _behavior;
  // highest priority behavior that wants control ; set by start() used by monitor
  private int _highestPriority = NONE;
  private int _active = NONE; //  active behavior; set by monitor, used by start();
  private boolean _returnWhenInactive;
  /**
   * Monitor is an inner class.  It polls the behavior array to find the behavior of hightst
   * priority.  If higher than the active behavior, it calls active.suppress()
   */
  private Monitor monitor;

  private AbstractRobot robot;

  /**
   * Allocates an [aArbitrator.genClassName()/] object and initializes it with an array of
   * Behavior objects. The index of a behavior in this array is its priority level, so 
   * the behavior of the largest index has the highest the priority level. 
   * The behaviors in an [aArbitrator.genClassName()/] can not
   * be changed once the [aArbitrator/] is initialized.<BR>
   * <B>NOTE:</B> Once the [aArbitrator.genClassName()/] is initialized, the method start() must be
   * called to begin the arbitration.
   * @param behaviorList an array of Behavior objects.
   * @param returnWhenInactive if <B>true</B>, the <B>start()</B> method returns when no Behavior is active.
   */
  public [aArbitrator.genClassName()/](Behavior['[]'/] behaviorList, AbstractRobot arobot)
  {
    _behavior = behaviorList;
    _returnWhenInactive = false;
	robot = arobot;
    monitor = new Monitor();
    monitor.setDaemon(true);
  }

  /**
   * This method starts the arbitration of Behaviors and runs an endless loop.  <BR>
   * Note: [aArbitrator.genClassName()/] does not run in a separate thread. The start()
   * method will never return unless <br>1.  no action() method is running  and
   * <br>2. no behavior  takeControl()
   * returns <B> true </B>  and  <br> 3. the <i>returnWhenInacative </i> flag is true,
   */
  public void start()
  {
    monitor.start();
    while (_highestPriority == NONE)
    {
      Thread.yield();//wait for some behavior to take contro                    
    }
    while (true)
    {
      synchronized (monitor)
      {
        if ([aArbitrator.genStopCondition()/])
		{
			monitor.more = false;//9 shut down monitor thread
			return;
		} else if (_highestPriority != NONE)
        {
          _active = _highestPriority;

        } else if (_returnWhenInactive)
        {// no behavior wants to run
          monitor.more = false;//9 shut down monitor thread
          return;
        }
      }// monitor released before action is called
      if (_active != NONE)  //_highestPrioirty could be NONE
      {
        _behavior['['/]_active[']'/].action();
        _active = NONE;  // no active behavior at the moment
      }
      Thread.yield();
    }
  }

  public void stop() {
	  // TODO: Method stops the Monitor thread and exits the start() loop.
  }
  
  /**
   * Finds the highest priority behavior that returns <B>true </B> to takeControl();
   * If this priority is higher than the active behavior, it calls active.suppress().
   * If there is no active behavior, calls suppress() on the most recently active behavior.
   */
  private class Monitor extends Thread
  {

    boolean more = true;
    int maxPriority = _behavior.length - 1;

    public void run()
    {
      while (more)
      {
        //FIND HIGHEST PRIORITY BEHAVIOR THAT WANTS CONTROL
        synchronized (this)
        {
           _highestPriority = NONE;
           int active_behavior = _active; // BB modded
           if(active_behavior == NONE) active_behavior = 0; // BB modded
          for (int i = maxPriority; i >= active_behavior; i--) // BB modded
          {
            if (_behavior['['/]i[']'/].takeControl())
            {
              _highestPriority = i;
              break;
            }
          }
          int active = _active;// local copy: avoid out of bounds error in 134
          if (active != NONE && _highestPriority > active)
          {
            _behavior['['/]active[']'/].suppress();
          }
        }// end synchronize block - main thread can run now
        Thread.yield();
      }
    }
  }
}
[/file]
[/template]

[template public genTakeControl(aBehavior : Behavior) post (trim())]
[if (aBehavior.condition.oclIsUndefined())]
true
[else]	
[aBehavior.condition.genCondition()/]
[/if]
[/template]

