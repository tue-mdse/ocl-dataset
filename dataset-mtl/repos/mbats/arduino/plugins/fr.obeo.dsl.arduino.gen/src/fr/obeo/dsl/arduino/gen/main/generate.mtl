[comment encoding = UTF-8 /]
[module generate('http://www.obeo.fr/arduino')]
[import fr::obeo::dsl::arduino::gen::main::arduinoservices /]

[template public generateSketch(sketch : Sketch)]
[comment @main/]
[genIno()/]
[genMakefile()/]
[/template]

[template public genIno (sketch : Sketch) ]
[file (sketch.getVariableName()+'.ino', false, 'UTF-8')]
[for (library : Library | sketch.eAllContents("Level").module->select(library<>arduino::Library::none).library->asOrderedSet())]
#include <[library.toString().toUpperFirst()/].h>
[/for]
[for (library : Library | sketch.eAllContents("Status").module->select(library<>arduino::Library::none).library->asOrderedSet())]
#include <[library.toString().toUpperFirst()/].h>
[/for]
[for (mod : Module | sketch.eAllContents("Status").module->asOrderedSet())]
[if (mod.library<>arduino::Library::music)]
int [mod.getVariableName()/] = [sketch.getPinId(mod)/];
[/if]
[/for]
[for (mod : Module | sketch.eAllContents("Level").module->select(library<>arduino::Library::none)->asOrderedSet())]
[mod.library.toString().toUpperFirst()/] [mod.getVariableName()/];
[/for]
[for (mod : Module | sketch.eAllContents("Sensor").module->asOrderedSet())]
int [mod.getVariableName()/] = [sketch.getPinId(mod)/];
[/for]
[for (instruction : Repeat | getRepeatInstructions(sketch))]
int iter_[eContainer(arduino::Sketch).getRepeatInstructionIndex(instruction)/];
[/for]
[for (instruction : Variable | sketch.eAllContents("Variable"))]
int [instruction.name/];
[/for]

void setup() {
[if (sketch.eAllContents("Status").module.library->select(lib|lib = arduino::Library::music)->asOrderedSet()->size()>=1)]
 music.init();
[/if]
[for (mod : Module | sketch.eAllContents("Status").module->asOrderedSet())]
[if (mod.library<>arduino::Library::music)]
  pinMode([mod.getVariableName()/], OUTPUT);
[/if]
[/for]
[for (mod : Module | sketch.eAllContents("Level").module->select(library<>arduino::Library::none)->asOrderedSet())]
 [mod.getVariableName()/].attach([sketch.getPinId(mod)/]);
[/for]
[for (instruction : Variable | sketch.eAllContents("Variable"))]
  [instruction.name/]=0;
[/for]
}

// the loop routine runs over and over again forever:
void loop() {
 [sketch.next.genINO()/]
}
[/file]
[/template]

[template public genINO(i : Instruction)post (trim())]
[i.generateInstruction()/]
[if (not i.oclIsInvalid() and not i.next.oclIsInvalid() and not i.next.oclIsKindOf(arduino::Sketch))]
[genINO(i.next)/] 
[/if]  
[/template]


[template public genMakefile (sketch : Sketch) ]
[file ('Makefile', false, 'UTF-8')]
BOARD_TAG    = uno
ARDUINO_PORT = /dev/ttyACM0
ARDUINO_LIBS = [for (library : Library | sketch.eAllContents("Level").module->select(library<>arduino::Library::none).library->asOrderedSet())][library.toString().toUpperFirst()/][/for]

include /usr/share/arduino/Arduino.mk
[/file]
[/template]

[template public generateInstruction(instruction : Delay)post (trim())]
delay([instruction.value/]);
[/template]

[template public generateInstruction(instruction : Status)post (trim())]
[if (instruction.module.library=arduino::Library::music)]
[if (instruction.status.toString()='false')]
	music.play();
[else]
	music.pause();
[/if]
[else]
digitalWrite([instruction.module.getVariableName()/], [getStatus(instruction)/]);		
[/if]

[/template]

[template private getStatus(instruction : Status)post (trim())]
[if (instruction.sensor = null)]
[if (instruction.status.toString()='false')]
HIGH
[else]
LOW
[/if]
[else]
[if (instruction.status.toString()='false')]!([/if]
[generateInstruction(instruction.sensor)/]
[if (instruction.status.toString()='false')])[/if]
[/if]
[/template]

[template public generateInstruction(instruction : Sensor)post (trim())]
[if (instruction.module.kind=ModuleKind::digital)]
digitalRead([instruction.module.getVariableName()/])
[else]
analogRead([instruction.module.getVariableName()/])
[/if]

[/template]

[template public generateInstruction(instruction : Repeat)post (trim())]
[let index : Integer = eContainer(arduino::Sketch).getRepeatInstructionIndex(instruction)]
for (iter_[index/]=0; iter_[index/] < ( [instruction.iteration/] ); ++iter_[index/] )
{
 [instruction.instructions->first().genINO()/]
}
[/let]
[/template]

[template public generateInstruction(instruction : While)post (trim())]
while ([instruction.condition.generateInstruction()/])
{
 [instruction.instructions->first().genINO()/]
}
[/template]

[template public generateInstruction(instruction : If)post (trim())]
if ([instruction.condition.generateInstruction()/])
{
 [instruction.instructions->first().genINO()/]
}
[/template]

[template public generateInstruction(instruction : BooleanOperator)post (trim())]
[instruction.left.generateInstruction()/][instruction.operator.getOperator()/][instruction.right.generateInstruction()/]
[/template]

[template public generateInstruction(instruction : Set)post (trim())]
[instruction.variable.name/]=[instruction.value.getValue()/];
[/template]

[template public generateInstruction(instruction : Level)post (trim())]
[if (instruction.module.library=arduino::Library::servo)]
[instruction.module.getVariableName()/].write([instruction.level.generateInstruction()/]);
[else]
analogWrite([instruction.eContainer(arduino::Sketch).getPinId(instruction.module)/],255-([instruction.level.generateInstruction()/]));	
[/if]
[/template]

[template public generateInstruction(instruction : Constant)post (trim())]
[instruction.getValue()/]
[/template]

[template public generateInstruction(instruction : Variable)post (trim())]
[instruction.getValue()/]
[/template]

[template public generateInstruction(instruction : Sketch)post (trim())]
[/template]

[template public generateInstruction(instruction : FunctionCall)post (trim())]
// [instruction.definition.name/]([for (param : Parameter | instruction.parameters)separator (',')]{[param.definition.name/]:[param.generateInstruction()/]}[/for])
[for (funcInstr : Instruction | instruction.definition.instructions)]
[if (funcInstr.oclIsTypeOf(arduino::ParameterCall))]
[funcInstr.oclAsType(arduino::ParameterCall).generateInstruction(instruction)/]
[else]
[funcInstr.generateInstruction()/]
[/if]
[/for]
[/template]

[template public generateInstruction(funcInstruction : ParameterCall, funcCall: FunctionCall)post (trim())]
[for (param: Parameter | funcCall.parameters)]
	[if (param.definition=funcInstruction.definition)]
		[generateInstruction(param)/]
	[/if]
[/for]
[/template]

[template public generateInstruction(instruction : Parameter)]
Generation error for [instruction/]
[/template]

[template public generateInstruction(instruction : Instruction)]
Generation error for [instruction/]
[/template]


[query public getPinId (sketch : Sketch, mod : Module) : Integer = sketch.hardware.connectors->select(c| c.module = mod)->first().pin.id/]

[query public getVariableName (element : NamedElement) : String = element.name.replaceAll(' ', '')/]

[query public getRepeatInstructions (sketch : Sketch) : OrderedSet(Repeat) = sketch.eAllContents("Repeat")->asOrderedSet()/]
