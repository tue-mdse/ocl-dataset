[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012, 2014 CNES and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Cedric Notot (Obeo) - initial API and implementation
[/comment]

[module feature('http://www.eclipse.org/uml2/4.0.0/UML')]

[import org::eclipse::umlgen::gen::autojava::specific::lib::type /]
[import org::eclipse::umlgen::gen::autojava::specific::lib::common /]
[import org::eclipse::umlgen::gen::autojava::specific::lib::requests::common /]
[import org::eclipse::umlgen::gen::autojava::services::utilServices /]
[import org::eclipse::umlgen::gen::autojava::services::stringServices /]
[import org::eclipse::umlgen::gen::autojava::services::umlServices /]
[import org::eclipse::umlgen::gen::autojava::requests::common /]
[import org::eclipse::umlgen::gen::autojava::common::common /]

[comment generates attribute /]
[template public genAttribute(aProperty : Property) post(trim())]
[comment Generate attribute comment if exist /]
[if (ownedComment->notEmpty())]
/**
	[for (s : Comment | get('ownedComment')->filter(Comment))]
 * [s._body.replaceAll('\n','\n * ')/].
	[/for]
 */
[/if]
[if (getProperty('gen.annotations') = 'true' and upper <> 1 and aggregation = AggregationKind::composite and not type.isJavaPrimitive())]
@part
[/if]
[genVisibility()/][genStatic()/][genFinal()/][genType()/] [genName()/][if (genDefaultValue() <> '')] [genDefaultValue()/][/if];
[if (upper <> 1 and aggregation = AggregationKind::composite and not type.isJavaPrimitive())][genArrayInit()/][/if]
[/template]

[comment generates operation /]
[template public genOperation(anOperation : Operation)]
[if ((not name.equalsIgnoreCase('body') and not name.equalsIgnoreCase('init') and not name.equalsIgnoreCase('run')) or (owner.oclIsKindOf(Class) and not owner.oclAsType(Class).isActive))]
[comment Generate methods doc /]
/**
 * Description of the method [genName()/][genCommentBis()/].
 *
	[for (p : Parameter | anOperation.get('ownedParameter')->filter(Parameter)->select(direction <> ParameterDirectionKind::return))]
 * @param [p.genName()/][p.genCommentBis()/]
	[/for]
	[for (p : Parameter | anOperation.get('ownedParameter')->filter(Parameter)->select(direction = ParameterDirectionKind::return))]
 * @return [p.genName()/][p.genCommentBis()/]
	[/for]
 */
	[if (isAbstract)]
[comment Generate abstract method (without body) /]
[genMethodProtoWithoutSynchronized()/];
	[else]
[genMethod()/]
	[/if]  
[/if]
[/template]

[template public genMethod(anOperation : Operation) ]
[comment Generate not abstract method (with body) /]
[genMethodAnnotation()/][genMethodProto()/] {[genMethodOldAnnotation()/]
	[genBehavior()/]
}
[/template]

[template public genMethodAnnotation(anOperation : Operation)]
[if (getProperty('gen.annotations') = 'true' and isMethInfo())]
@MethInfo(issynchronized = [getStereotypeProperty('RTSJ::MethInfo', 'synchronized')/], isinterruptible = [getStereotypeProperty('RTSJ::MethInfo', 'interruptible')/])
[/if]
[if (getProperty('gen.annotations') = 'true' and isExecutionPerformance())]
@ExecutionPerformance(wcet = [getStereotypeProperty('RTSJ::ExecutionPerformance', 'wcet')/], bcet = [getStereotypeProperty('RTSJ::ExecutionPerformance', 'bcet')/])
[/if]
[/template]

[template public genMethodOldAnnotation(anOperation : Operation)]
[if (getProperty('gen.annotations') = 'false' and isExecutionPerformance())]
	// stereotype from UML: wcet = [getStereotypeProperty('RTSJ::ExecutionPerformance', 'wcet')/]
	// stereotype from UML: bcet = [getStereotypeProperty('RTSJ::ExecutionPerformance', 'bcet')/]
[/if]
[if (getProperty('gen.annotations') = 'false' and isMethInfo())]
	// stereotype from UML: [if (getStereotypeProperty('RTSJ::MethInfo', 'synchronized') = 'false')]not [/if]synchronized
	// stereotype from UML: [if (getStereotypeProperty('RTSJ::MethInfo', 'interruptible') = 'false')]not [/if]interruptible
[/if]
[/template]

[comment generates operaton signature /]
[template public genMethodProto(anOperation : Operation)]
[anOperation.genVisibility()/][genMethodProtoWithoutVisibility()/]
[/template]

[comment generates operaton signature /]
[template public genMethodProtoWithoutVisibility(anOperation : Operation)]
[anOperation.genAbstract()/][anOperation.genStatic()/][anOperation.genFinal()/][anOperation.genSynchronized()/][anOperation.genReturn()/] [anOperation.genName()/]([anOperation.get('ownedParameter')->filter(Parameter)->select(direction <> ParameterDirectionKind::return).genMethodParam()->sep(', ')/])
[/template]

[comment generates attribute property /]
[template public genAttributeProperty(aProperty : Property)]
[genType()/] [genName()/]
[/template]

[comment generates the property default value /]
[template public genDefaultValue(aProperty : Property) post(trim())]
[if (upper = 1)]
	[if (not default.oclIsUndefined() and default.size() > 0)]
		[if (type.name = 'String')] = [default.addQuotes()/][else] = [default/][/if]
	[/if]
[else]
	[if (upper = -1)]
		[if (default = 'null')]
		= null
		[else]
	 	= new [genTypeName()/]['['/][default/][']'/]
		[/if]
	[else]
	 = new [genTypeName()/]['['/][upper/][']'/]
	[/if]
[/if]
[/template]

[comment generates operaton signature /]
[template protected genMethodProtoWithoutSynchronized(anOperation : Operation)]
[anOperation.genVisibility()/][anOperation.genAbstract()/][anOperation.genStatic()/][anOperation.genFinal()/][anOperation.genReturn()/] [anOperation.genName()/]([anOperation.get('ownedParameter')->filter(Parameter)->select(direction <> ParameterDirectionKind::return).genMethodParam()->sep(', ')/])
[/template]

[template protected genSynchronized(anOperation : Operation)]
[if (anOperation.getStereotypeProperty('RTSJ::MethInfo', 'synchronized') = 'true' or (not anOperation.eContainer(Class).oclIsUndefined() and anOperation.eContainer(Class).isSynchronized()))]synchronized [/if]
[/template]

[comment generates behavior body /]
[template protected genBehavior(anOperation : Operation)]
// [protected ('for method '
	+ owner.oclAsType(Classifier).genName()
	+ '.' + genName() +'('
	+ ownedParameter->select(direction <> ParameterDirectionKind::return).genType()->sep(',').oclAsType(String)
	+ '):'
	+ ownedParameter->select(direction = ParameterDirectionKind::return).genType())]
//TODO Fill method[logGenerationInfo('Info: The operation body is not generated')/]
[if (genReturn() <> 'void')]
return [if (upper = 1 and (type.isJavaPrimitive() or type.oclIsKindOf(Enumeration)))][if(type.genTypeName() = 'boolean')]false[else]0[/if][else]null[/if];
[/if]
// [/protected]
[/template]