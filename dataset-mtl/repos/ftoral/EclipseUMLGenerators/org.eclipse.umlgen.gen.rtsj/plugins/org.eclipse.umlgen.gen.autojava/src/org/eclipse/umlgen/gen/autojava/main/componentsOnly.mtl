[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012, 2014 CNES and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Cedric Notot (Obeo) - initial API and implementation
[/comment]

[module componentsOnly('http://www.eclipse.org/uml2/4.0.0/UML','http://www.eclipse.org/umlgen/dsl/asl','http://www.eclipse.org/umlgen/dsl/eth') extends org::eclipse::umlgen::gen::autojava::main::uml2autojava]

[import org::eclipse::umlgen::gen::autojava::requests::port /]
[import org::eclipse::umlgen::gen::autojava::requests::common /]
[import org::eclipse::umlgen::gen::autojava::services::utilServices /]
[import org::eclipse::umlgen::gen::autojava::common::files /]

[template public main(aModel : Model) overrides main ? (aModel.eContainer().oclIsUndefined())]
[comment @main /]
[aModel.validate()/]

[aModel.eAllContents(Enumeration).generateEnumeration()/]
[aModel.eAllContents(Interface).generateInterface()/]
[minimize(aModel.eAllContents(Port)->select(p : Port | not p.type.oclIsUndefined() and p.type.oclIsKindOf(Interface)).type.oclAsType(Interface).getAllBehavioralFeature())->filter(BehavioralFeature)->select(aBehavioralFeature : BehavioralFeature | aBehavioralFeature.getParams()->notEmpty()).generateParams()/]

[aModel.eAllContents(Class).generateClass()/]
[for (aPort : Port | aModel.eAllContents(Port)->select(itPort : Port | itPort.isProviderSync()))]
	[aPort.getInterfacesPortProvider().generateSyncProvider(aPort)/]
[/for]
[for (aPort : Port | aModel.eAllContents(Port)->select(itPort : Port | itPort.isUserSync()))]
	[aPort.getInterfacesPortUser().generateSyncUser(aPort)/]
[/for]
[for (aPort : Port | aModel.eAllContents(Port)->select(itPort : Port | itPort.isProviderASync()))]
	[aPort.getInterfacesPortProvider().generateAsyncProvider(aPort)/]
[/for]
[for (aPort : Port | aModel.eAllContents(Port)->select(itPort : Port | itPort.isUserASync()))]
	[aPort.getInterfacesPortUser().generateAsyncUser(aPort)/]
[/for]
[for (aPort : Port | aModel.eAllContents(Port)->select(itPort : Port | itPort.isEmitter()))]
	[aPort.getInterfacesPortUser().generateEmitter(aPort)/]
[/for]
[for (aPort : Port | aModel.eAllContents(Port)->select(itPort : Port | itPort.isReceiver()))]
	[aPort.getInterfacesPortProvider().generateReceiver(aPort)/]
[/for]
[/template]