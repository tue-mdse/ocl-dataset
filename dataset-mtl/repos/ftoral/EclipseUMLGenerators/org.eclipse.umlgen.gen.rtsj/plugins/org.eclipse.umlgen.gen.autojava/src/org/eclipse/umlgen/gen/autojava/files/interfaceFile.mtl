[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012, 2014 CNES and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Cedric Notot (Obeo) - initial API and implementation
[/comment]

[module interfaceFile('http://www.eclipse.org/uml2/4.0.0/UML')]

[import org::eclipse::umlgen::gen::autojava::specific::lib::feature /]
[import org::eclipse::umlgen::gen::autojava::specific::lib::type /]
[import org::eclipse::umlgen::gen::autojava::specific::lib::common /]
[import org::eclipse::umlgen::gen::autojava::specific::lib::requests::common /]
[import org::eclipse::umlgen::gen::autojava::requests::common /]
[import org::eclipse::umlgen::gen::autojava::services::utilServices /]
[import org::eclipse::umlgen::gen::autojava::common::imports /]
[import org::eclipse::umlgen::gen::autojava::common::common /]

[template public genInterfaceFileBody(anInterface : Interface)]
[anInterface.genInterfacePackagePath().genPackageDeclaration()/]

[comment Generate import of interface /]
[anInterface.genImport()/]
import org.eclipse.umlgen.rtsj.framework.ArgsBuffer;

[comment Generate comment of interface if exist /]
[anInterface.genCommentBis()/]

[comment Interface declaration /]
[if ((getProperty('gen.annotations') = 'true') and anInterface.isAsynchronous())]
@Asynchronous
[/if]
[anInterface.genVisibility()/]interface [anInterface.genName()/] [anInterface.genInheritance()/] {
[if ((getProperty('gen.annotations') = 'false') and anInterface.isAsynchronous())]
// stereotype from UML: Asynchronous
[/if]
[comment Generate attributes /]
[anInterface.genAttributes()/]

[comment Generate methods /]
[anInterface.genMethods()/]

[comment Generate signals /]
[anInterface.genSignals()/]
}
[/template]

[template public genInterfacePackagePath(aType : Type)]
[aType.genDecoratorPackagePath()/]
[/template]

[template protected genSignals(anInterface : Interface)]
[genSignalsBase()/][comment][anInterface.genSignalsBase()/][/comment][comment]generate read and write object only if implementations are not components or ports[/comment]
[if (anInterface.getSelfAndAllChildren().eInverse(Dependency).client->select(c : NamedElement | c.oclIsKindOf(Class) and c.oclAsType(Class).ownedPort->notEmpty() or c.oclIsKindOf(Port))->isEmpty()
	or anInterface.getSelfAndAllChildren().eInverse(Parameter)->notEmpty())]
	void readObject(ArgsBuffer argsBuffer);
	
	void writeObject(ArgsBuffer argsBuffer);
[/if]
[/template]

[template protected genSignalsBase(anInterface : Interface)]
[for (anInterface.get('nestedClassifier')->filter(Signal)->union(anInterface.get('ownedElement')->filter(Reception)->select(signal <> null).signal))]
	/**
	 *  Description of the signal [genName()/].
	 *
	[for (get('ownedComment')->filter(Comment))]
	 * [_body/]
	[/for]
	 *
	[for (get('ownedAttribute')->filter(Property))]
	 * @param [genName()/][genCommentBis()/]
	[/for]
	 */
	[if (getProperty('gen.annotations') = 'true')]
	@reception
	[/if]
	void [genName()/]([get('ownedAttribute')->filter(Property).genAttributeProperty()->sep(', ')/]);

[/for]
[/template]

[template protected genMethods (anInterface : Interface) ]
[for (o : Operation | anInterface.get('ownedOperation')->filter(Operation))]
	/**
	 *  Description of the method [o.genName()/].
	 * 
	[for (o.get('ownedComment')->filter(Comment))]
	 * [_body/]
	[/for]
	 *
	[for (o.get('ownedParameter')->filter(Parameter))][if (direction <> ParameterDirectionKind::return)]
	 * @param [genName()/][genCommentBis()/]
	[/if][/for]
	[for (o.get('ownedParameter')->filter(Parameter))][if (direction = ParameterDirectionKind::return)]
	 * @return [genName()/][genCommentBis()/]
	[/if][/for]
	 */
	[genMethodProtoWithoutVisibility()/];

[/for]
[/template]

[template protected genAttributes (anInterface : Interface) ]
[for (p : Property | anInterface.get('ownedAttribute')->filter(Property)->union(anInterface.call('getAssociations')->filter(Association).get('navigableOwnedEnd')->filter(Property)->select(type <> anInterface)))]
	[if (p.ownedComment <> null)]
	/**
	 *  Description of the property [p.name/].
	 *
	[for (p.get('ownedComment')->filter(Comment))]
	 * [_body/]
	[/for]
	 *
	 */
	[/if]
	[p.genVisibility()/][p.genFinal()/][p.genStatic()/][p.genType()/] [p.genName()/][p.genDefaultValue()/];
[/for]
[/template]
