[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012, 2014 CNES and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Cedric Notot (Obeo) - initial API and implementation
[/comment]

[module syncUserFile('http://www.eclipse.org/uml2/4.0.0/UML','http://www.eclipse.org/umlgen/dsl/asl','http://www.eclipse.org/umlgen/dsl/eth')]

[import org::eclipse::umlgen::gen::autojava::specific::port /]
[import org::eclipse::umlgen::gen::autojava::specific::lib::type /]
[import org::eclipse::umlgen::gen::autojava::requests::common /]
[import org::eclipse::umlgen::gen::autojava::services::utilServices /]
[import org::eclipse::umlgen::gen::autojava::common::parameters /]
[import org::eclipse::umlgen::gen::autojava::common::common /]

[template public genSyncUserFileBody(anInterface : Interface, aPort : Port)]
[aPort.genFilePath().genPackageDeclaration()/]

import org.eclipse.umlgen.rtsj.framework.*;
import org.eclipse.umlgen.rtsj.framework.types.*;
[if (anInterface.getOperationsWithParameters()->notEmpty())]
import [anInterface.getOperationsWithParameters()->first().eContainer(Type).genPackagePath()/].params.*;
[/if]
[for (aType : Type | minimize(anInterface.getAllOperations().get('ownedParameter')->filter(uml::Parameter)->select(aParam : uml::Parameter | not aParam.type.isJavaPrimitive() and not aParam.type.oclIsKindOf(Enumeration)).type)->filter(Type))]
import [aType.genPackagePath() + '.' + aType.genName()/];
[/for]
import [anInterface.genPackagePath()/].[anInterface.name/];

public class [aPort.genClassPortName(anInterface,'User','Sync')/] implements [anInterface.genName()/] {

	String ident;
[for (anOp : Operation | anInterface.getOperationsWithParameters())]
	[anOp.genParametersClassInstantiation(false)/]
[/for]
	[anInterface.genPrimitiveTypeObjects()/]
	CommunicationLayer communicationLayer;

	public [aPort.genClassPortName(anInterface,'User','Sync')/](String ident, CommunicationLayer communicationLayer) {
		this.ident = ident;
		this.communicationLayer = communicationLayer;
	}

[for (anOperation : Operation | anInterface.getAllOperations())]
	[anOperation.genMethod(aPort)/]
		
[/for]
}
[/template]

[template protected genMethod(anOperation : Operation, aPort : Port) ]
public [anOperation.genReturn()/] [anOperation.genName()/]([anOperation.get('ownedParameter')->filter(uml::Parameter)->select(aParam : uml::Parameter | aParam.direction <> ParameterDirectionKind::return).genMethodParam()->sep(', ')/]) throws ServiceNotFoundException {
[for (aParameter : uml::Parameter | anOperation.get('ownedParameter')->filter(uml::Parameter)->select(aParam : uml::Parameter | aParam.direction <> ParameterDirectionKind::return))]
	[anOperation.genVariableName()/].[aParameter.genName()/] = [aParameter.genName()/];
[/for]
	[if (anOperation.genReturn() <> 'void' and not anOperation.type.isJavaPrimitiveObject())]return ([anOperation.genReturnType()/]) [elseif(anOperation.genReturn() <> 'void' and anOperation.type.isJavaPrimitiveObject())][anOperation.genPrimitiveReturn().toLowerFirst()/] = ([anOperation.genPrimitiveReturn()/]) [/if]communicationLayer.callSynchronous("[anOperation.genName()/][anOperation.getParams().genTypeName()->sep('_')/]", ident, [anOperation.genUserCallParameters()/]);
	[if (anOperation.genReturn() <> 'void' and anOperation.type.isJavaPrimitiveObject())]return [anOperation.genPrimitiveReturn().toLowerFirst()/].getValue();[/if]
}
[/template]

[template protected genReturnType(anOperation : Operation) post(trim())]
[if (anOperation.type.isJavaPrimitive() or type.oclIsKindOf(Enumeration))]
	[anOperation.type.genBufferType()/]
[else]
	[anOperation.genReturn()/]	
[/if]
[/template]