[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012, 2014 CNES and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Cedric Notot (Obeo) - initial API and implementation
[/comment]

[module parameters('http://www.eclipse.org/uml2/4.0.0/UML')]

[import org::eclipse::umlgen::gen::autojava::services::utilServices /]
[import org::eclipse::umlgen::gen::autojava::services::stringServices /]

[template public genParametersClassInstantiation (aFeature : BehavioralFeature, provider : Boolean) ]
[aFeature.genClassParamsName()/] [aFeature.genVariableName()/] = new [aFeature.genClassParamsName()/]([provider/]);
[/template]

[template public genClassParamsName (aFeature : BehavioralFeature) post (trim())]
[if (aFeature.contains(aFeature.eContainer(Interface).getSimilarBehaviorFeatures(),aFeature.name))]
	[aFeature.genClassParamsNamePrefix()/]_[aFeature.ownedElement->filter(TypedElement).type.name.toUpperFirst()/][aFeature.genClassParamsNameSuffix()/]
[else]
	[aFeature.genClassParamsNamePrefix()/][aFeature.genClassParamsNameSuffix()/]
[/if]
[/template]

[template public genVariableName (aFeature : BehavioralFeature) ]
[aFeature.name/][if (aFeature.contains(aFeature.eContainer(Interface).getSimilarBehaviorFeatures(),aFeature.name))][aFeature.ownedElement->filter(TypedElement).type.name.toUpperFirst()/][/if]Params
[/template]

[template public genProviderParameters(anOperation : Operation) post(trim())]
[if (anOperation.ownedParameter->select(aParameter : Parameter | aParameter.direction <> ParameterDirectionKind::return)->isEmpty())]
	ParameterSet param
[else]
	[anOperation.genClassParamsName()/] param
[/if]
[/template]

[template public genProviderCallParameters(anOperation : Operation) post(trim())]
[anOperation.get('ownedParameter')->filter(Parameter)->select(aParameter : Parameter | aParameter.direction <> ParameterDirectionKind::return).name.insertBefore('param.')->sep(', ')/]	
[/template]

[template public genProviderCallParameters(anOperation : Reception) post(trim())]
[anOperation.signal.get('ownedAttribute')->filter(Property).name.insertBefore(name + 'Params.')->sep(', ')/]
[/template]

[template public genUserCallParameters(anOperation : Operation) post(trim())]
[if (ownedParameter->select(aParameter : Parameter | aParameter.direction <> ParameterDirectionKind::return)->size() > 0)]
	[anOperation.genVariableName()/]
[else]
	null
[/if]
[/template]

[template protected genClassParamsNameSuffix (aFeature : BehavioralFeature) ]
_Params
[/template]

[template protected genClassParamsNamePrefix (aFeature : BehavioralFeature) ]
[aFeature.eContainer(Interface).name/]_[aFeature.name/]
[/template]