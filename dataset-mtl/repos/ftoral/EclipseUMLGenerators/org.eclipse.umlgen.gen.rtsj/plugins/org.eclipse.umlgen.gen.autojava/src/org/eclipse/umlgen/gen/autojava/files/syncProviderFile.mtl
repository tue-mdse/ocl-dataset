[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012, 2014 CNES and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Cedric Notot (Obeo) - initial API and implementation
[/comment]

[module syncProviderFile('http://www.eclipse.org/uml2/4.0.0/UML','http://www.eclipse.org/umlgen/dsl/asl','http://www.eclipse.org/umlgen/dsl/eth')]

[import org::eclipse::umlgen::gen::autojava::files::paramFile /]
[import org::eclipse::umlgen::gen::autojava::specific::port /]
[import org::eclipse::umlgen::gen::autojava::specific::lib::type /]
[import org::eclipse::umlgen::gen::autojava::requests::common /]
[import org::eclipse::umlgen::gen::autojava::services::utilServices /]
[import org::eclipse::umlgen::gen::autojava::common::parameters /]
[import org::eclipse::umlgen::gen::autojava::common::common /]

[template public genSyncProviderFileBody(anInterface : Interface, aPort : Port)]
[aPort.genFilePath().genPackageDeclaration()/]

import [anInterface.genPackagePath()/].[anInterface.name/];
import org.eclipse.umlgen.rtsj.framework.*;
import org.eclipse.umlgen.rtsj.framework.types.*;
import org.eclipse.umlgen.rtsj.framework.sync.PortProviderSync;
[for (aType : Type | minimize(anInterface.getAllOperations().ownedParameter->select(aParam : uml::Parameter | aParam.direction = ParameterDirectionKind::return and aParam.type <> null and not aParam.type.isJavaPrimitive() and not aParam.type.oclIsKindOf(Enumeration)).type)->filter(Type))]
import [aType.genPackagePath() + '.' + aType.genName()/];
[/for]
[if (anInterface.getAllOperations().ownedParameter->select(aParam : uml::Parameter | aParam.direction <> ParameterDirectionKind::return)->notEmpty())]
import [anInterface.getAllOperations()->first().genParamPackagePath()/].*;
[/if]

public class [aPort.genClassPortName(anInterface,'Provider','Sync')/] implements PortProviderSync {

	[anInterface.name/] provider;
	String ident;
	[anInterface.genPrimitiveTypeObjects()/]
	CommunicationLayer communicationLayer;

	public [aPort.genClassPortName(anInterface,'Provider','Sync')/]([anInterface.name/] provider, String ident, CommunicationLayer communicationLayer) {
		this.provider = provider;
		this.ident = ident;
		communicationLayer.registerSynchronousProviderPort(ident, this);
		this.communicationLayer = communicationLayer;
	}

[for (anOperation : Operation | anInterface.getAllOperations())]
	public [anOperation.genReturn()/] [anOperation.genName()/]([anOperation.genProviderParameters()/]) {
		[if (anOperation.genReturn() <> 'void')]return [/if]provider.[anOperation.genName()/]([anOperation.genProviderCallParameters()/]);
	}		
[/for]
	public Object invoke(String op, ParameterSet param) throws ServiceNotFoundException {
[if (anInterface.getAllOperations()->size() > 0)]
	[for (anOperation : Operation | anInterface.getAllOperations())]
		[if (i > 1)]} else [/if]if (op.equals("[anOperation.name/][anOperation.getParams().genTypeName()->sep('_')/]")) {
			[if (anOperation.genReturn() <> 'void' and not anOperation.type.isJavaPrimitiveObject())]return [elseif(anOperation.genReturn() <> 'void' and anOperation.type.isJavaPrimitiveObject())][anOperation.genPrimitiveReturn().toLowerFirst()/].setValue([/if]this.[anOperation.name/]([if (not anOperation.ownedParameter->select(aParam : uml::Parameter | aParam.direction <> ParameterDirectionKind::return)->isEmpty())]([anOperation.genClassParamsName()/]) [/if]param)[if(anOperation.genReturn() <> 'void' and anOperation.type.isJavaPrimitiveObject())])[/if];
		[if (anOperation.genReturn() <> 'void' and anOperation.type.isJavaPrimitiveObject())]
			return [anOperation.genPrimitiveReturn().toLowerFirst()/];
		[/if]
	[/for]	
		} else {
			throw new ServiceNotFoundException();
		}
		[if (anInterface.getAllOperations()->select(anOp : Operation | anOp.genReturn() = 'void')->size() > 0)]return null;[/if]
[else]
		throw new ServiceNotFoundException();
[/if]
	}
}
[/template]