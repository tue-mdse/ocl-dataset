[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012, 2014 CNES and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Cedric Notot (Obeo) - initial API and implementation
[/comment]

[module port('http://www.eclipse.org/uml2/4.0.0/UML')]

[import org::eclipse::umlgen::gen::autojava::specific::lib::requests::common /]
[import org::eclipse::umlgen::gen::autojava::specific::lib::type /]
[import org::eclipse::umlgen::gen::autojava::requests::port /]
[import org::eclipse::umlgen::gen::autojava::requests::common /]
[import org::eclipse::umlgen::gen::autojava::services::utilServices /]
[import org::eclipse::umlgen::gen::autojava::services::rtsjServices /]
[import org::eclipse::umlgen::gen::autojava::common::common /]

[template public genRedirectedRealizedSignal(aSignal : Signal)]
/**
 * Description of the method [aSignal.genName()/].
 *
 */
public void [aSignal.genName()/]([aSignal.get('ownedAttribute')->filter(Property).genAttributeProperty()->sep(', ')/]) {
}
[/template]

[template public genAttributeProperty(aProperty : Property)]
[aProperty.genType()/] [aProperty.name/]
[/template]

[template public genClassPortName(anInterface : Interface, aPort : Port) post(trim())]
[if (aPort.isUserSync())]
	[aPort.genClassPortName(anInterface, 'User','Sync')/]
[elseif(aPort.isProviderSync())]
	[aPort.genClassPortName(anInterface, 'Provider','Sync')/]
[elseif(aPort.isUserASync())]
	[aPort.genClassPortName(anInterface, 'User','Async')/]
[elseif(aPort.isProviderASync())]
	[aPort.genClassPortName(anInterface, 'Provider','Async')/]
[elseif(aPort.isReceiver())]
	[aPort.genClassPortName(anInterface, 'Receiver','EventData')/]
[elseif(aPort.isEmitter())]
	[aPort.genClassPortName(anInterface, 'Emitter','EventData')/]
[/if]	
[/template]

[template public genClassPortName (aPort : Port, anInterface : Interface, direction : String, synchro : String) ]
[aPort.eContainer(Class).name/]_[aPort.name/]_[direction.toUpperFirst()/][synchro.toUpperFirst()/]
[/template]

[template public genPortConstructorCall(anInterface : Interface, aPort : Port, aCompInstanceName : String) post(trim())]
[anInterface.genClassPortName(aPort)/][aPort.genPortParameters(aCompInstanceName)/]
[/template]

[template public genIdent(aPort : Port, aCompInstanceNameVar : String) post(trim())]
[aCompInstanceNameVar/] + ":[aPort.name/]"
[/template]

[template public genIdent(aCompInstance : Property, aPort : Port) post(trim())]
[aCompInstance.name/]:[aPort.name/]
[/template]

[template public genPrimitiveReturn(anOperation : Operation) post(trim())]
[if (anOperation.ownedParameter->select(param : Parameter | param.direction = ParameterDirectionKind::return)-> size() > 0)]
	[anOperation.ownedParameter->select(param : Parameter | param.direction = ParameterDirectionKind::return)->first().genPrimitiveType()/]
[else]
	void
[/if]
[/template]

[template public genPrimitiveType(aParameter : Parameter) post(trim())]
[if (aParameter.upper = 1)]
	[getProperty('primitive.types.'+aParameter.genTypeName())/]
[else]
	List[getProperty('primitive.types.'+aParameter.genTypeName())/]
[/if]
[/template]

[template public genPrimitiveType(aType : Type, isList : Boolean) post(trim())]
[if (isList)]List[/if][getProperty('primitive.types.'+aType.genTypeName())/]
[/template]

[template public genPrimitiveTypeObjects(anInterface : Interface)]
[for (aType : Type | minimizeByString(anInterface.getReturnTypes(), anInterface.getReturnTypes().genTypeName())->filter(Type))]
[aType.genPrimitiveType(false)/] [aType.genPrimitiveType(false).toLowerFirst()/] = new [aType.genPrimitiveType(false)/]();
[/for]
[for (aType : Type | minimizeByString(anInterface.getReturnTypesList(), anInterface.getReturnTypesList().genTypeName())->filter(Type))]
[aType.genPrimitiveType(true)/] [aType.genPrimitiveType(true).toLowerFirst()/] = new [aType.genPrimitiveType(true)/]();
[/for]
[/template]

[comment generates imports for signals /]
[template public genSignalImport(aClass : Class)]
import org.eclipse.umlgen.rtsj.framework.ArgsBuffer;
[/template]

[comment generates imports for buffer /]
[template public genBufferImport(aClass : Class)]
import org.eclipse.umlgen.rtsj.framework.MBuffer;
[/template]

[comment generates static memory buffer attributes if needed /]
[template public genStaticMemoryBuffer(aClass : Class)]
[if (not ownedPort->select(isPortInfo())->isEmpty())]
protected fr.CNES and others.autojava.communication.StaticMemoryBuffer asyncBuffer;
[/if]
[/template]

[template protected genPortParameters(aPort : Port, aCompInstanceName : String) post(trim())]
[if (aPort.isUserSync() or aPort.isReceiver())]
	([aPort.genIdent(aCompInstanceName)/], communicationLayer)
[elseif(aPort.isProviderSync())]
	(this, [aPort.genIdent(aCompInstanceName)/], communicationLayer)
[elseif(aPort.isUserASync() or aPort.isEmitter())]
	([aPort.genIdent(aCompInstanceName)/], [aCompInstanceName/], communicationLayer)
[elseif(aPort.isProviderASync())]
	(this, [aPort.genIdent(aCompInstanceName)/], [aPort.getMBuffer()/], thread, pbuffer, communicationLayer)
[else]
	()
[/if]	
[/template]

[comment generates property indice for arrays /]
[template protected genIndice(aProperty : Property)]
[if (upper <> 1)]['['/]i[']'/][/if]
[/template]