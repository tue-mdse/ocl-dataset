[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012, 2014 CNES and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Cedric Notot (Obeo) - initial API and implementation
[/comment]

[module uml2autojava('http://www.eclipse.org/uml2/4.0.0/UML','http://www.eclipse.org/umlgen/dsl/asl','http://www.eclipse.org/umlgen/dsl/eth')]

[import org::eclipse::umlgen::gen::autojava::files::classFile /]
[import org::eclipse::umlgen::gen::autojava::files::paramFile /]
[import org::eclipse::umlgen::gen::autojava::files::syncProviderFile /]
[import org::eclipse::umlgen::gen::autojava::files::syncUserFile /]
[import org::eclipse::umlgen::gen::autojava::files::asyncProviderFile /]
[import org::eclipse::umlgen::gen::autojava::files::asyncUserFile /]
[import org::eclipse::umlgen::gen::autojava::files::interfaceFile /]
[import org::eclipse::umlgen::gen::autojava::files::eventDataEmitterFile /]
[import org::eclipse::umlgen::gen::autojava::files::eventDataReceiverFile /]
[import org::eclipse::umlgen::gen::autojava::files::ethernetComFile /]
[import org::eclipse::umlgen::gen::autojava::files::rootFile /]
[import org::eclipse::umlgen::gen::autojava::files::enumerationFile /]
[import org::eclipse::umlgen::gen::autojava::specific::port /]
[import org::eclipse::umlgen::gen::autojava::requests::port /]
[import org::eclipse::umlgen::gen::autojava::requests::common /]
[import org::eclipse::umlgen::gen::autojava::services::utilServices /]
[import org::eclipse::umlgen::gen::autojava::services::stringServices /]
[import org::eclipse::umlgen::gen::autojava::common::files /]
[import org::eclipse::umlgen::gen::autojava::common::parameters /]
[import org::eclipse::umlgen::gen::autojava::common::common /]

[template public main(aModel : Model) ? (aModel.eContainer().oclIsUndefined())]
[comment @main /]
[aModel.validate()/]

[aModel.eAllContents(Enumeration).generateEnumeration()/]
[aModel.eAllContents(Interface).generateInterface()/]
[minimize(aModel.eAllContents(Port)->select(p : Port | not p.type.oclIsUndefined() and p.type.oclIsKindOf(Interface)).type.oclAsType(Interface).getAllBehavioralFeature())->filter(BehavioralFeature)->select(aBehavioralFeature : BehavioralFeature | aBehavioralFeature.getParams()->notEmpty()).generateParams()/]

[aModel.eAllContents(Class).generateClass()/]
[for (aPort : Port | aModel.eAllContents(Port)->select(itPort : Port | itPort.isProviderSync()))]
	[aPort.getInterfacesPortProvider().generateSyncProvider(aPort)/]
[/for]
[for (aPort : Port | aModel.eAllContents(Port)->select(itPort : Port | itPort.isUserSync()))]
	[aPort.getInterfacesPortUser().generateSyncUser(aPort)/]
[/for]
[for (aPort : Port | aModel.eAllContents(Port)->select(itPort : Port | itPort.isProviderASync()))]
	[aPort.getInterfacesPortProvider().generateAsyncProvider(aPort)/]
[/for]
[for (aPort : Port | aModel.eAllContents(Port)->select(itPort : Port | itPort.isUserASync()))]
	[aPort.getInterfacesPortUser().generateAsyncUser(aPort)/]
[/for]
[for (aPort : Port | aModel.eAllContents(Port)->select(itPort : Port | itPort.isEmitter()))]
	[aPort.getInterfacesPortUser().generateEmitter(aPort)/]
[/for]
[for (aPort : Port | aModel.eAllContents(Port)->select(itPort : Port | itPort.isReceiver()))]
	[aPort.getInterfacesPortProvider().generateReceiver(aPort)/]
[/for]

[aModel.getRootClass().generateConf()/]
[/template]

[**
 * The entry point of the generation of a class.
 * "classJava" script
 * @param aClass an UML Port.
 */]
[template public generateClass(aClass : Class) ? (not aClass.classFullFilePath().oclIsUndefined() and aClass.classFullFilePath().size() > 0)]
[file (aClass.genFilePath().genFullPathFile(aClass.name), false, 'UTF-8')]
[aClass.genFileHeader()/]
[aClass.genFileBody()/][/file]
[/template]

[template public generateInterface(anInterface : Interface) ? (not anInterface.genInterfacePackagePath().oclIsUndefined() and anInterface.genInterfacePackagePath().size() > 0)]
[file (anInterface.genInterfacePackagePath().genFullPathFile(anInterface.name), false, 'UTF-8')]
[anInterface.genFileHeader()/]
[anInterface.genInterfaceFileBody()/][/file]
[/template]

[**
 * The entry point of the generation of parameters.
*/]
[template public generateParams(anOperation: BehavioralFeature) ]
[file (anOperation.genParamPackagePath().genFullPathFile(anOperation.genClassParamsName()), false, 'UTF-8')]
[anOperation.eContainer(Interface).genFileHeader()/]
[anOperation.genFileBody()/][/file]
[/template]

[**
 * The entry point of the generation of sync providers.
*/]
[template public generateSyncProvider(anInterface: Interface, aPort : Port)]
[file (aPort.genFilePath().genFullPathFile(anInterface.genClassPortName(aPort)), false, 'UTF-8')]
[aPort.genHeader(aPort.genFilePath().genFullPathFile(aPort.genClassPortName(anInterface, 'Provider','Sync')))/]
[anInterface.genSyncProviderFileBody(aPort)/][/file]
[/template]

[**
 * The entry point of the generation of sync users.
*/]
[template public generateSyncUser(anInterface: Interface, aPort : Port)]
[file (aPort.genFilePath().genFullPathFile(anInterface.genClassPortName(aPort)), false, 'UTF-8')]
[aPort.genHeader(aPort.genFilePath().genFullPathFile(aPort.genClassPortName(anInterface, 'User','Sync')))/]
[anInterface.genSyncUserFileBody(aPort)/][/file]
[/template]

[**
 * The entry point of the generation of sync providers.
*/]
[template public generateAsyncProvider(anInterface: Interface, aPort:Port)]
[file (aPort.genFilePath().genFullPathFile(anInterface.genClassPortName(aPort)), false, 'UTF-8')]
[aPort.genHeader(aPort.genFilePath().genFullPathFile(aPort.genClassPortName(anInterface, 'Provider','Async')))/]
[anInterface.genAsyncProviderFileBody(aPort)/][/file]
[/template]

[**
 * The entry point of the generation of sync users.
*/]
[template public generateAsyncUser(anInterface: Interface, aPort:Port)]
[file (aPort.genFilePath().genFullPathFile(anInterface.genClassPortName(aPort)), false, 'UTF-8')]
[aPort.genHeader(aPort.genFilePath().genFullPathFile(aPort.genClassPortName(anInterface, 'User','Async')))/]
[anInterface.genAsyncUserFileBody(aPort)/][/file]
[/template]

[template public generateEmitter(anInterface: Interface, aPort:Port)]
[file (aPort.genFilePath().genFullPathFile(anInterface.genClassPortName(aPort)), false, 'UTF-8')]
[aPort.genHeader(aPort.genFilePath().genFullPathFile(aPort.genClassPortName(anInterface, 'Emitter','EventData')))/]
[anInterface.genEventDataEmitterBody(aPort)/][/file]
[/template]

[template public generateReceiver(anInterface: Interface, aPort:Port)]
[file (aPort.genFilePath().genFullPathFile(anInterface.genClassPortName(aPort)), false, 'UTF-8')]
[aPort.genHeader(aPort.genFilePath().genFullPathFile(aPort.genClassPortName(anInterface, 'Receiver','EventData')))/]
[anInterface.genEventDataReceiverBody(aPort)/][/file]
[/template]

[**
 * The entry point of the generation of a class.
 * "enumJava" script
 * @param aClass an UML Class.
 */]
[template public generateEnumeration(anEnumeration : Enumeration) ? (not anEnumeration.genFullPathFile().oclIsUndefined() and anEnumeration.genFullPathFile().size() > 0)]
[file (anEnumeration.genFullPathFile(), false, 'UTF-8')]
[anEnumeration.genFileHeader()/]
[anEnumeration.genFileBody()/][/file]
[/template]

[template public generateConf(aClass : Class) ]
[minimize(aClass.ownedConnector.eInverse(Decoration)->asSequence())->filter(Decoration).generateConf(aClass)/]
[/template]

[template public generateConf(aDecoration : Decoration, aClass : Class)]
[/template]

[template public generateConf(aDecoration : EthernetConf, aClass : Class)]
[aDecoration.parameters->filter(Container).components->select(prop : Property | aDecoration.connectors.end.partWithPort->includes(prop)).generateEthernetCom()/]
[aDecoration.parameters->filter(Container).generateRoot(aClass)/]
[/template]

[template protected generateEthernetCom(aProperty : Property)]
[file (aProperty.genEthernetComPackagePath().genFullPathFile(aProperty.genEthernetComFileName()), false, 'UTF-8')]
[aProperty.type.oclAsType(Class).genFileHeader()/]
[aProperty.genEthernetComBody()/][/file]
[/template]

[template protected generateRoot(aContainer : Container, aClass : Class)]
[file (aContainer.genRootPackagePath().genFullPathFile(aContainer.genRootClassName()), false, 'UTF-8')]
[aClass.genFileHeader()/]
[aContainer.genRootBody(aClass)/][/file]
[/template]

[template protected genHeader(aPort : Port, aPath : String)]
/**
 * [aPath/]
 *
 * File generated from the [aPort.ancestors()->filter(NamedElement).name->reverse()->sep('::')/]::[aPort.name /] uml [aPort.eClass().name /]
[if (getProperty('gen.comment.date') = 'true')]
 * $ Date : [getShortDate()/] [getTime()/] $
[/if]
 */
[/template]

[template protected classFullFilePath(aClass : Class) post(trim())]
[if (eClass().name.equalsIgnoreCase('Class') and name.index('.') = -1)]
[aClass.genFullPathFile()/]
[/if]
[/template]