[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012, 2014 CNES and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Cedric Notot (Obeo) - initial API and implementation
[/comment]

[module ethernetComFile('http://www.eclipse.org/uml2/4.0.0/UML', 'http://www.eclipse.org/umlgen/dsl/asl','http://www.eclipse.org/umlgen/dsl/eth')]

[import org::eclipse::umlgen::gen::autojava::requests::ethernet /]
[import org::eclipse::umlgen::gen::autojava::common::common /]

[template public genEthernetComBody(compInstance : Property)]
[compInstance.genEthernetComPackagePath().genPackageDeclaration()/]

import java.io.BufferedOutputStream;
import java.io.IOException;
import java.net.*;
import org.eclipse.umlgen.rtsj.framework.CommunicationLayer;
import org.eclipse.umlgen.rtsj.framework.ethernet.ComProtocol;
import org.eclipse.umlgen.rtsj.framework.ethernet.ServerThread;

import org.eclipse.umlgen.rtsj.framework.ArgsBuffer;

public class EthernetCom[compInstance.name.toUpperFirst()/] implements ComProtocol {

[for (rComp : Property | compInstance.getRemoteComponentsProperty())]
	private InetAddress addr[rComp.name.toUpperFirst()/];
	private Socket socket[rComp.name.toUpperFirst()/]client ;
	static final int [rComp.name/]Port = [rComp.getEthernetContainer().portNumber/];
	private BufferedOutputStream out[rComp.name.toUpperFirst()/] ;
[/for]	

	static final int serverPort = [compInstance.getEthernetContainer().portNumber/];
	ArgsBuffer header = new ArgsBuffer([compInstance.getArgsBufferSize()/]);
	
	public EthernetCom[compInstance.name.toUpperFirst()/](CommunicationLayer communicationLayer) {
		new ServerThread(serverPort, communicationLayer) ;
		[if (compInstance.getRemoteComponentsProperty()->notEmpty())]
		try {
			[for (rComp : Property | compInstance.getRemoteComponentsProperty())]		
			addr[rComp.type.genName()/] = InetAddress.getByName("[rComp.getEthernetContainer().ipAddress/]");
			[/for]			

			for (int i = 0 ; i < 10 ; i++){
				try {
				[for (rComp : Property | compInstance.getRemoteComponentsProperty())]		
					if (socket[rComp.name.toUpperFirst()/]client == null) {
						socket[rComp.name.toUpperFirst()/]client = new Socket(addr[rComp.name.toUpperFirst()/], [rComp.name/]Port);
					}
				[/for]						
					break ;
				} catch (IOException e) {
					if (i == 9){
						e.printStackTrace();
						throw (new RuntimeException());
					} else {
						try {
							Thread.sleep((i+1)*5000);
						} catch (InterruptedException e1) {
							e1.printStackTrace();
						}
					}
				}
			}
			[for (rComp : Property | compInstance.getRemoteComponentsProperty())]
			out[rComp.name.toUpperFirst()/] = new BufferedOutputStream(socket[rComp.name.toUpperFirst()/]client.getOutputStream());
			[/for]			
		} catch (IOException e) {
			e.printStackTrace();
		}
		[/if]
	}
	
	public void sendFrame (String dest, String ident, String service, ArgsBuffer params, int priority){
		header.writeString(ident);
		header.writeString(service);
		header.writeInteger(priority);
		if (params != null) {		
			header.writeInteger(params.getUsed());
		} else {
			header.writeInteger(0);
		}
		int bufferSize;
	[for (rComp : Property | compInstance.getRemoteComponentsProperty())]		
		if (dest.equals("[rComp.name/]")){
			try {
				out[rComp.name.toUpperFirst()/].write(header.getUsed());
				bufferSize = header.getUsed();
				while (header.getUsed() > 0){
					out[rComp.name.toUpperFirst()/].write(header.readByte());
				}
				bufferSize = params.getUsed();
				for (int i = 0; i < bufferSize; i++){
					out[rComp.name.toUpperFirst()/].write(params.readByteAt(i));
				}
				out[rComp.name.toUpperFirst()/].flush();
			} catch (IOException e) {
				e.printStackTrace();
			}			
		}
	[/for]	
	}
}
[/template]

[template public genEthernetComPackagePath(aProp : Property)]
[aProp.genClassPath('communication')/]
[/template]

[template public genEthernetComFileName(aProperty : Property)]
EthernetCom[aProperty.name.toUpperFirst()/]
[/template]

[template public genDistributedEthernetComImports(aClass : Class, aContainer : Container)]
[for (aProperty : Property | aContainer.components->select(comp : Property | comp.isEthernetComponentWithConnector()))]
import [aProperty.genEthernetComPackagePath()/].[aProperty.genEthernetComFileName()/];
[/for]
[/template]