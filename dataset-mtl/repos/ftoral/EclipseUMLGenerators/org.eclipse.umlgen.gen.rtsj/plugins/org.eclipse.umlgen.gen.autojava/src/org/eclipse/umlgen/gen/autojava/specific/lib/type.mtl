[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012, 2014 CNES and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Cedric Notot (Obeo) - initial API and implementation
[/comment]

[module type('http://www.eclipse.org/uml2/4.0.0/UML')]

[import org::eclipse::umlgen::gen::autojava::common::util /]

[comment generates the element name /]
[template public genTypeName(aTypedElement : TypedElement) post(trim())]
[type.genTypeName()/]
[/template]

[template public genTypeName(aNamedElement : NamedElement) post(trim())]
[if (aNamedElement = null)]
	Object
[elseif (aNamedElement.oclIsKindOf(Enumeration))]
	int
[elseif (isPropertyExist('java.typeconversion.'.concat(aNamedElement.name)))]
	[getProperty('java.typeconversion.'.concat(aNamedElement.name)).tokenize('.')->last()/]
[else]
	[aNamedElement.genName().tokenize('.')->last()/]
[/if]
[/template]

[comment generates the property initialisation for arrays /]
[template public genArrayInit(aProperty : Property)]
[if (upper <> 1)]
{
	for (int i = 0; i < [genName()/].length; i++) {
		[genName()/]['['/]i[']'/] = new [genTypeName()/]();
	}
} 
[/if]
[/template]

[template public genMethodParam(aParameter : TypedElement)]
[genType()/] [genName()/]
[/template]

[template public genType(aParameter : TypedElement) post(trim())]
[/template]

[template public genType(aProperty : Property) post(trim())]
[if (upper = 1)]
	[genTypeName()/]
[else]
	[if (isArray())]
		[genTypeName()/]['[]'/]
	[else]
		[genCollectionType()/]<[genTypeName()/]>
	[/if]
[/if]
[/template]

[template public genType(aParameter : Parameter) post(trim())]
[if (upper = 1)]
	[genTypeName()/]
[else]
	[if (isArray())]
		[genTypeName()/]['['/][']'/]
	[else]
		[genCollectionType()/]<[genTypeName()/]>
	[/if]
[/if]
[/template]

[comment return if it is a string /]
[query public isString(aType : Type) : Boolean = name = 'String' or name = 'EString' /]

[template public genReturn(anOperation : Operation) post(trim())]
[if (anOperation.ownedParameter->select(param : Parameter | param.direction = ParameterDirectionKind::return)-> size() > 0)]
[anOperation.ownedParameter->select(param : Parameter | param.direction = ParameterDirectionKind::return)->first().genType()/]
[else]
void
[/if]
[/template]

[template protected genCollectionType(aMultiplicityElement : MultiplicityElement) post(trim())]
[if (not aMultiplicityElement.isOrdered.oclIsUndefined() and aMultiplicityElement.isOrdered)]
    [if (aMultiplicityElement.isUnique)]
        [aMultiplicityElement.getOrderedUniqueCollectionClass()/]
    [else]
        [aMultiplicityElement.getOrderedNotUniqueCollectionClass()/]
    [/if]
[else]
    [if (aMultiplicityElement.isUnique)]
        [aMultiplicityElement.getNotOrderedUniqueCollectionClass()/]
    [else]
        [aMultiplicityElement.getNotOrderedNotUniqueCollectionClass()/]
    [/if]
[/if]
[/template]

[template protected getOrderedUniqueCollectionClass(anElement : Element) post(trim())]
[anElement.getOrderedUniqueCollectionClassPath().tokenize('.')->last()/]	
[/template]

[template protected getOrderedNotUniqueCollectionClass(anElement : Element) post(trim())]
[anElement.getOrderedNotUniqueCollectionClassPath().tokenize('.')->last()/]	
[/template]

[template protected getNotOrderedUniqueCollectionClass(anElement : Element) post(trim())]
[anElement.getNotOrderedUniqueCollectionClassPath().tokenize('.')->last()/]	
[/template]

[template protected getNotOrderedNotUniqueCollectionClass(anElement : Element) post(trim())]
[anElement.getNotOrderedNotUniqueCollectionClassPath().tokenize('.')->last()/]	
[/template]

[template protected getOrderedUniqueCollectionClassPath(anElement : Element) post(trim())]
[getProperty('tuple.ordered.unique.class')/]
[/template]

[template protected getOrderedNotUniqueCollectionClassPath(anElement : Element) post(trim())]
[getProperty('tuple.ordered.notUnique.class')/]
[/template]

[template protected getNotOrderedUniqueCollectionClassPath(anElement : Element) post(trim())]
[getProperty('tuple.notOrdered.unique.class')/]
[/template]

[template protected getNotOrderedNotUniqueCollectionClassPath(anElement : Element) post(trim())]
[getProperty('tuple.notOrdered.notUnique.class')/]
[/template]

[comment return if it is an array. Return a boolean value representing the need to generate arrays instead of collections for multiple attributes and parameters./]
[query protected isArray(anElement : Element) : Boolean = getProperty('tuple.genArrays') = 'true' /]
