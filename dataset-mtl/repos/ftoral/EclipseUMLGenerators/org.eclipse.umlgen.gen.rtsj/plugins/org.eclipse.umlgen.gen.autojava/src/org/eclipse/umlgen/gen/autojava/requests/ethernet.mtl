[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012, 2014 CNES and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Cedric Notot (Obeo) - initial API and implementation
[/comment]

[module ethernet('http://www.eclipse.org/umlgen/dsl/asl','http://www.eclipse.org/umlgen/dsl/eth','http://www.eclipse.org/uml2/4.0.0/UML')]

[import org::eclipse::umlgen::gen::autojava::requests::port /]
[import org::eclipse::umlgen::gen::autojava::requests::connectors /]
[import org::eclipse::umlgen::gen::autojava::requests::common /]
[import org::eclipse::umlgen::gen::autojava::services::utilServices /]
[import org::eclipse::umlgen::gen::autojava::services::stringServices /]

[query public isEthernetComponentWithConnector (aProperty : Property) : Boolean = aProperty.isEthernetComponent() and aProperty.eInverse(Container).eContainer(EthernetConf).connectors.end.partWithPort->includes(aProperty)/]

[query public isEthernetComponentForImport (aProperty : Property) : Boolean = aProperty.eInverse(Container)->size() = 1/]

[query public isEthernet (connector : Connector) : Boolean = connector.eInverse(EthernetConf)->notEmpty()/]

[query public isEthernet (aPort : Port) : Boolean = aPort.end->any(true).eContainer(Connector).isEthernet()/]

[query public getEthernetContainer (aProperty : Property) : Container = aProperty.eInverse(Container)->any(true)/]

[query public getRemoteComponentsProperty(aProperty : Property) : Sequence(Property) = minimize(aProperty.type.oclAsType(Class).getEthernetUserPorts().getTargetInstances(aProperty))->asSequence()/]

[query public getArgsBufferSize(aProperty : Property) : Integer = aProperty.type.oclAsType(Class).getArgsBufferSize()/]

[query public getOutgoingEthConnectors(aCompInstance : Property, aPort : Port) : OrderedSet(Connector) = aCompInstance.getOutgoingConnectors(aPort)->select(c : Connector | c.isEthernet())->asOrderedSet() /]

[query public getEthernetClasses(pak : Package) : Sequence(Class) = pak.eContents()->filter(Class)->select(c : Class | c.getRootComponents()->notEmpty() and c.getRootComponents().getEthernetContainer()->select(cont : Container | not cont.oclIsUndefined())->size() = 1) /]

[query public isEthernetPackage(pak : Package) : Boolean = pak.getEthernetClasses()->select(c : Class | not c.oclIsUndefined())->notEmpty() /]

[query public isOnlyEthernetPackage(pak : Package) : Boolean = pak.eContents(Interface)->isEmpty() and pak.getNotEthernetClasses()->isEmpty() /]

[query public getRootComponents(aClass : Class) : Sequence(Property) = aClass.eInverse(Property)->select(p : Property | not p.eContainer(Class).oclIsUndefined() and p.eContainer(Class).isRoot())->asSequence() /]

[query protected isEthernetComponent (aProperty : Property) : Boolean = aProperty.eInverse(Container)->notEmpty()/]

[query protected getArgsBufferSize(aClass : Class) : Integer = aClass.name.size() + 1 + aClass.getMaxNameProvider() + 2 + getMaxNameService() + 2 + 4 + 4/]

[query protected getMaxNameProvider(aClass : Class) : Integer = aClass.getEthernetUserPorts().name->getMaxLength()/]

[query protected getMaxNameService(aClass : Class) : Integer = aClass.getNameServices()->getMaxLength()/]

[query protected getNameServices(aClass : Class) : Sequence(String) = aClass.getEthernetUserPorts().getInterfacesPortUser().ownedReception->select(aRecep : Reception | not aRecep.signal.oclIsUndefined()).signal.name/]

[query protected getEthernetUserPorts(aClass : Class) : Sequence(Port) = aClass.get('ownedPort')->filter(Port)->select(aPort: Port | aPort.type.oclIsUndefined() and aPort.end->notEmpty() and aPort.end->first().owner.oclAsType(Connector).isEthernet())/]

[query protected getNotEthernetClasses(pak : Package) : Sequence(Class) = pak.eContents()->filter(Class)->select(c : Class | c.getRootComponents()->isEmpty() or c.getRootComponents().getEthernetContainer()->select(cont : Container | not cont.oclIsUndefined())->size() <> 1) /]