[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2010, 2014 Obeo and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Stephane Thibaudeau (Obeo) - initial API and implementation
 *     Fabien Toral (CS Information Systems) - Circular dependencies and other corrections for PolarSys migration
[/comment]
[module if('http://www.eclipse.org/uml2/4.0.0/UML', 'http://www.eclipse.org/emf/2002/Ecore')/]
[import org::eclipse::umlgen::gen::c::files::activity::common /]

[template public gen (decisionNode : DecisionNode) post (trim())]
[decisionNode.generate()/]
[decisionNode.getCorrespondingMergeNode().next()/]
[/template]

[template public generate (decisionNode : DecisionNode)]
[generateWithoutMerge()/]
[/template]

[template private generateWithoutMerge (decisionNode : DecisionNode)]
[commentBefore()/]
[name/] { [thenClauseFlow().commentSameLine()/]
	[thenClauseNode().gen()/]
	[thenClauseFlow().commentLastLine()/]
}[if (hasElse())] else [decisionNode.generateElseClause()/][/if]
[/template]

[template private generateElseClause(decisionNode : DecisionNode)]
{ [elseClauseFlow().commentSameLine()/]
	[elseClauseNode().gen()/]
	[elseClauseFlow().commentLastLine()/]
}
[/template]

[query private thenClauseFlow(decisionNode : DecisionNode) : ControlFlow = 
	outgoing->any(guard.serialize() <> '[else]')
/]

[query private thenClauseNode(decisionNode : DecisionNode) : ActivityNode = 
	thenClauseFlow().target
/]

[query private elseClauseFlow(decisionNode : DecisionNode) : ControlFlow = 
	outgoing->any(guard.serialize() = '[else]')
/]

[query private elseClauseNode(decisionNode : DecisionNode) : ActivityNode = 
	elseClauseFlow().target
/]

[query private hasElse(decisionNode : DecisionNode) : Boolean = 
	not elseClauseNode().oclIsKindOf(MergeNode)
/]

[template public indentTab(x : EString)]
['\t' + x.replaceAll('\r\n|\r|\n', '$0\t')/]
[/template]

[comment] === Guard generation === [/comment]

[template public serialize (valueSpecification : ValueSpecification) ]
/* TODO: implement serialize for [valueSpecification.eClass()/] (seen as ValueSpecification)*/
[/template]

[template public serialize (opaqueExpression : OpaqueExpression) ]
[_body->at(language->indexOf('C'))/]
[/template]
