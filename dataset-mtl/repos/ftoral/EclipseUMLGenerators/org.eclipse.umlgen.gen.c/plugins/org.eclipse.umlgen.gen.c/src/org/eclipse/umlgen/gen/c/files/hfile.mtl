[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2010, 2014 Obeo and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Mikael Barbero (Obeo) - initial API and implementation
 *     Fabien Toral (CS Information Systems) - Circular dependencies and other corrections for PolarSys migration
[/comment]
[module hfile('http://www.eclipse.org/uml2/4.0.0/UML', 'http://www.eclipse.org/emf/2002/Ecore')/]
[import org::eclipse::umlgen::gen::c::files::common /]
[import org::eclipse::umlgen::gen::c::files::structural::typedef /]
[import org::eclipse::umlgen::gen::c::files::structural::enum /]
[import org::eclipse::umlgen::gen::c::files::structural::struct /]
[import org::eclipse::umlgen::gen::c::files::structural::macros /]
[import org::eclipse::umlgen::gen::c::files::structural::operation /]
[import org::eclipse::umlgen::gen::c::files::structural::property /]
[import org::eclipse::umlgen::gen::c::files::structural::fallthrough /]
[import org::eclipse::umlgen::gen::c::files::structural::dataTypeQueries /]

[template public hfile(c : Classifier) post (trim())]
[let kind : String = 'H'/]
[let generatedComment : String = getComment()]
[if (generatedComment.size() > 0)]
[generatedComment.format()/]
[/if]
[/let]

[if c.IfNDefConditionAnnotation()->notEmpty()]
#ifndef [hheaderDefine()/]
#define [hheaderDefine()/]
[/if]

[comment]Includes[/comment]
[c.genIncludes('H')/]

[comment]Macro declaration : focus on private Macro typed properties[/comment]
[for (macroDecl : Property | c.eContents(Property)->select(isPublic() and type.isMacro()))] 
[let generated : String = macroDecl.gen()][macroDecl.addComment(generated)/][/let]

[/for]
[comment]DataType and subtypes (Enumeration)[/comment]
[for (type : DataType | c.eContents(DataType)->select(isPublic()))]
[let generated : String = type.gen()][type.addComment(generated)/][/let]

[/for]
[comment]Property[/comment]
[for (property : Property | c.eContents(Property)->reject(isPrivate() or not type.isValidType()))] 
[let generated : String = property.gen('H')][property.addComment(generated)/][/let]

[/for]
[comment]Operation[/comment]
[for (opDecl : Operation | c.eContents(Operation)->select(isPublic()))]
[opDecl.gen('H')/]

[/for]
[if c.IfNDefConditionAnnotation()->notEmpty()]
#endif
[/if]
[/template]
