[comment encoding = UTF-8 /]
[module enumJavaFile('http://www.eclipse.org/uml2/4.0.0/UML') extends eu::artist::migration::modernization::uml2java::repackaged::gen::java::files::classifierJavaFile]

[import eu::artist::migration::modernization::uml2java::repackaged::gen::java::common::documentation /]
[import eu::artist::migration::modernization::uml2java::repackaged::gen::java::common::declaration /]
[import eu::artist::migration::modernization::uml2java::repackaged::gen::java::common::path /]

[import eu::artist::migration::modernization::uml2java::repackaged::gen::java::services::commonServices/]
[import eu::artist::migration::modernization::uml2java::repackaged::gen::java::services::importService /]

[template private genClassifierBody(aClassifier : Classifier) overrides genClassifierBody ? (aClassifier.oclIsKindOf(Enumeration))]
[aClassifier.genVisibility()/]enum [aClassifier.name.toUpperFirst()/] {
[let literals : OrderedSet(EnumerationLiteral) = aClassifier.oclAsType(Enumeration).ownedLiteral]
[for (anEnumerationLiteral : EnumerationLiteral | literals)]
    /**
[if (anEnumerationLiteral.ownedComment->size() > 0 and anEnumerationLiteral.ownedComment._body->forAll(b : String | not ''.equalsIgnoreCase(b)))]
[for (aComment : Comment | anEnumerationLiteral.ownedComment)]
     * [aComment._body/]
[/for]
[else]
     * Description of [anEnumerationLiteral.name/].
[/if]
     */
    [anEnumerationLiteral.name/][if(literals->last() = anEnumerationLiteral)];[else],[/if]
[/for]
[/let]

[for (anEnumeration : Classifier | aClassifier.oclAsType(Enumeration).general)]
	[genConverter(anEnumeration) /]
[/for]

[for (anEnumeration : Enumeration | (aClassifier.getModel().packagedElement->select(e : PackageableElement | (e.oclIsTypeOf(Enumeration) and e.oclAsType(Enumeration).general->select(g : Classifier | g = aClassifier)->notEmpty()))->flatten()).oclAsType(Enumeration) )]
	[genConverter(anEnumeration) /]
[/for]
	// [protected ('(user defined enum literals for ' + aClassifier.name + ')')]
	
	// [/protected]
[/template]

[template private genConverter(anEnumeration : Classifier)]
public [anEnumeration.name.toUpperFirst()/] to[anEnumeration.name.toUpperFirst()/]() {
		return [anEnumeration.name.toUpperFirst()/].valueOf([anEnumeration.name.toUpperFirst()/].class, this.name());
}
[/template] 