[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2013 Vienna University of Technology.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Alexander Bergmayr (Vienna University of Technology) - initial API and implementation
 *
 * Initially developed in the context of ARTIST EU project www.artist-project.eu
 */]
[module importServiceObjectify('http://www.eclipse.org/uml2/4.0.0/UML') extends eu::artist::migration::modernization::uml2java::repackaged::gen::java::services::importServiceAnnotations]

[import eu::artist::migration::modernization::uml2java::repackaged::gen::java::services::classifierServices /]

[**
 * The documentation of the template genImport.
 * @param aClass
 */]
[template public genImport(aClassifier : Classifier) overrides genImport ? 
					((not aClassifier.getAppliedStereotype('objectify::com::googlecode::objectify::annotation::Entity').oclIsUndefined()) 
                     and aClassifier.oclIsKindOf(Class)) post(trim())]
[aClassifier.reqImport()/]
[super/]
[/template]

[template public genImport(aClassifier : Classifier) overrides genImport ? (aClassifier.owner.oclAsType(Package).name = 'service' and
                                                                    aClassifier.name.endsWith('Service')) post(trim())]
import static com.googlecode.objectify.ObjectifyService.ofy;
[if (reqClassByName(aClassifier, aClassifier.name.substitute('Service', '')).ownedAttribute -> exists(p : Property | p.aggregation = AggregationKind::composite))]
import com.googlecode.objectify.Ref;
[/if]
[for (aProperty : Property | reqClassByName(aClassifier, aClassifier.name.substitute('Service', '')).ownedAttribute -> select(p : Property | p.aggregation = AggregationKind::composite))]
import [aProperty.type.reqQualifiedName(true) /];
[/for]
[super/]
[/template]

[query private reqImport(aClassifier : Classifier) : String =
	invoke('eu.artist.migration.modernization.uml2java.objectify.services.ImportServicesObjectify', 'reqImport(org.eclipse.uml2.uml.Classifier)', Sequence{aClassifier}).toString().trim()
/]

[query private reqQualifiedName(aType : Type, ignoreJavaTypes : Boolean) : String =
	invoke('eu.artist.migration.modernization.uml2java.objectify.services.ImportServicesObjectify', 'reqQualifiedName(org.eclipse.uml2.uml.Type, boolean)', Sequence{aType, ignoreJavaTypes}).toString().trim()
/]