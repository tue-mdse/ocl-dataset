[comment encoding = UTF-8 /]
[module CommonGenerator('http://www.eclipse.org/MoDisco/Java/0.2.incubation/java')/]

[template public getFileName (aCompilationUnit : CompilationUnit) post(trim())]
[if isSubpackage(aCompilationUnit)][aCompilationUnit._package.name /]/[/if][aCompilationUnit.name.replace('.java', '')/]
[/template]

[query public isTestFile (aCompilationUnit : CompilationUnit) : Boolean =
aCompilationUnit.originalFilePath.contains('src/test') /]

[query public typeRequiresPackage (aType : Type, aOwningCompilationUnit : CompilationUnit) : Boolean =
(not (aType.originalCompilationUnit._package.oclIsUndefined())) and (not (aOwningCompilationUnit.oclIsUndefined())) and (not (aType.originalCompilationUnit._package = aOwningCompilationUnit._package)) and isSubpackage(aType.originalCompilationUnit)/]

[query public isSubpackage(aCompilationUnit : CompilationUnit) : Boolean =
((not (getNamedElementName(aCompilationUnit._package) = 'time')) and (not (getNamedElementName(aCompilationUnit._package) = 'convert'))) /]

[template public getNamedElementName (aNamedElement : NamedElement) post(trim())]
[if aNamedElement.oclIsKindOf(ParameterizedType)]
[getNamedElementName(aNamedElement.oclAsType(ParameterizedType).type.type) /]
[else]
[if aNamedElement.name = 'signed']
_signed
[else]
[aNamedElement.name /]
[/if]
[/if]
[/template]

[template public convertType (aType : Type, aOwningCompilationUnit : CompilationUnit, allowPointer : Boolean, addDummyParametersIfMissing : Boolean) post(trim())]
[if aType.oclIsKindOf(PrimitiveType)]
	[if aType.oclIsKindOf(PrimitiveTypeBoolean)]
		bool
	[elseif aType.oclIsKindOf(PrimitiveTypeByte)]
		std::uint8_t
	[else]
		[getNamedElementName(aType) /]
	[/if]
[elseif aType.oclIsKindOf(ArrayType)]
	std::vector<[convertType(aType.oclAsType(ArrayType).elementType.type, aOwningCompilationUnit, allowPointer, addDummyParametersIfMissing) /]>
[elseif aType.oclIsKindOf(ClassDeclaration) or aType.oclIsKindOf(InterfaceDeclaration)]
	[if getNamedElementName(aType) = 'String']
		std::string
	[elseif getNamedElementName(aType) = 'Set']
		std::set[if addDummyParametersIfMissing]<std::string>[/if]
	[elseif getNamedElementName(aType) = 'List' or getNamedElementName(aType) = 'ArrayList']
		std::vector[if addDummyParametersIfMissing]<std::string>[/if]
	[elseif getNamedElementName(aType) = 'Map' or getNamedElementName(aType) = 'HashMap' or getNamedElementName(aType) = 'TreeMap' or getNamedElementName(aType) = 'ConcurrentHashMap' or getNamedElementName(aType) = 'ConcurrentMap']
		std::map[if addDummyParametersIfMissing]<std::string, std::string>[/if]
	[elseif getNamedElementName(aType) = 'Class']
		Class
	[elseif getNamedElementName(aType) = 'Object']
		boost::any
	[else]
		[if typeRequiresPackage(aType, aOwningCompilationUnit)][getNamedElementName(aType.originalCompilationUnit._package)/]::[/if][getNamedElementName(aType) /][if allowPointer]*[/if]
	[/if]
[elseif aType.oclIsKindOf(ParameterizedType)]
	[convertType(aType.oclAsType(ParameterizedType).type.type, aOwningCompilationUnit, false, false) /]<[for (aTypeAccess : TypeAccess | aType.oclAsType(ParameterizedType).typeArguments) separator (', ')][convertType(aTypeAccess.type, aOwningCompilationUnit, allowPointer, addDummyParametersIfMissing) /][/for]>[if allowPointer]*[/if]
[elseif aType.oclIsKindOf(WildCardType)]
	boost::any
[elseif aType.oclIsKindOf(TypeParameter)]
	[aType.oclAsType(TypeParameter).name/]
[else]
	/* TODO convertType */ [aType /]
[/if]
[/template]

[query public extractCppImports(aCompilationUnit : CompilationUnit) : Sequence(Type) =
invoke('de.egore911.joda2cpp.CppGeneratorUtil', 'extractCppImports(org.eclipse.gmt.modisco.java.CompilationUnit)', Sequence{aCompilationUnit}) /]

[template public generateImports(aTypes : Sequence(Type), aOwningCompilationUnit : CompilationUnit) post (trim())]
[for (aType : Type | aTypes)]
[generateImport(aType, aOwningCompilationUnit)/]
[/for]
[/template]

[template private generateImport (aType : Type, aOwningCompilationUnit : CompilationUnit) post (trim())]
[if (aType.oclIsKindOf(ArrayType))]
	[generateImportArray(aType, aOwningCompilationUnit)/]
[elseif (getNamedElementName(aType) = 'String')]
	#include <string>
[elseif (getNamedElementName(aType) = 'Object')]
	#include <boost/any.hpp>
[elseif (aType.oclIsKindOf(PrimitiveTypeByte))]
	#include <cstdint>
[elseif not aType.originalCompilationUnit.oclIsUndefined()]
	[generateImportLocal(aType, aOwningCompilationUnit)/]
[elseif (aType.oclIsKindOf(ParameterizedType))]
	[generateImportParameterized(aType, aOwningCompilationUnit)/]
[elseif getNamedElementName(aType) = 'HashMap']
	#include <map>
[elseif aType.oclIsKindOf(WildCardType)]
	#include <boost/any.hpp>
[else]
	#include "[if isSubpackage(aOwningCompilationUnit)]../[/if][getNamedElementName(aType)/].hpp"
[/if]
[/template]

[template private generateImportArray (aType : Type, aOwningCompilationUnit : CompilationUnit) ]
#include <vector>
[if not (aType.oclAsType(ArrayType).elementType.type.oclIsKindOf(PrimitiveType))]
[generateImports(Sequence{aType.oclAsType(ArrayType).elementType.type}, aOwningCompilationUnit) /]
[/if]
[/template]

[template private generateImportLocal (aType : Type, aOwningCompilationUnit : CompilationUnit) post (trim())]
[if aType.oclAsType(TypeDeclaration).abstractTypeDeclaration.oclIsUndefined()]
	#include "[if isSubpackage(aOwningCompilationUnit)]../[/if][if isSubpackage(aType.originalCompilationUnit)][getNamedElementName(aType.originalCompilationUnit._package)/]/[/if][aType.name/].hpp"
[else]
	#include "[if isSubpackage(aOwningCompilationUnit)]../[/if][if isSubpackage(aType.originalCompilationUnit)][getNamedElementName(aType.oclAsType(TypeDeclaration).abstractTypeDeclaration.originalCompilationUnit._package)/]/[/if][aType.oclAsType(TypeDeclaration).abstractTypeDeclaration.name/].hpp"
[/if]
[/template]

[template private generateImportParameterized (aType : Type, aOwningCompilationUnit : CompilationUnit) post (trim())]
[if (getNamedElementName(aType.oclAsType(ParameterizedType).type.type) = 'Set')]
	#include <set>
[elseif (getNamedElementName(aType.oclAsType(ParameterizedType).type.type) = 'List') or (getNamedElementName(aType.oclAsType(ParameterizedType).type.type) = 'ArrayList')]
	#include <vector>
[elseif (getNamedElementName(aType.oclAsType(ParameterizedType).type.type) = 'Map') or (getNamedElementName(aType.oclAsType(ParameterizedType).type.type) = 'HashMap') or (getNamedElementName(aType.oclAsType(ParameterizedType).type.type) = 'TreeMap') or (getNamedElementName(aType.oclAsType(ParameterizedType).type.type) = 'ConcurrentHashMap') or (getNamedElementName(aType.oclAsType(ParameterizedType).type.type) = 'ConcurrentMap')]
	#include <map>
[else]
	#include "[if isSubpackage(aOwningCompilationUnit)]../[/if][getNamedElementName(aType.oclAsType(ParameterizedType).type.type)/].hpp"
[/if]
[/template]

[template public renderCommentIfAvailable (aASTNode : ASTNode) post (trim())]
[for (aComment : Comment | aASTNode.comments)]
[aComment.content /]
[/for]
[/template]

[template public generateMethodSignature (aMethodDeclaration : MethodDeclaration, aAbstractTypeDeclaration : AbstractTypeDeclaration,) ]
[convertType(aMethodDeclaration.returnType.type, aMethodDeclaration.originalCompilationUnit, true, true) /] [if not aAbstractTypeDeclaration.oclIsUndefined()][getNamedElementName(aAbstractTypeDeclaration)/]::[/if][getNamedElementName(aMethodDeclaration) /]([for (aSingleVariableDeclaration : SingleVariableDeclaration | aMethodDeclaration.parameters) separator (', ')][convertType(aSingleVariableDeclaration.type.type, aMethodDeclaration.originalCompilationUnit, true, true) /] [getNamedElementName(aSingleVariableDeclaration) /][/for])
[/template]

[template public generateConstructorSignature (aConstructorDeclaration : ConstructorDeclaration) ]
[getNamedElementName(aConstructorDeclaration) /]([for (aSingleVariableDeclaration : SingleVariableDeclaration | aConstructorDeclaration.parameters) separator (', ')][convertType(aSingleVariableDeclaration.type.type, aConstructorDeclaration.originalCompilationUnit, true, true) /] [getNamedElementName(aSingleVariableDeclaration) /][/for])
[/template]

[template public generateExpression (aExpression : Expression, aOwningCompilationUnit : CompilationUnit) post (trim())]
[if aExpression.oclIsUndefined()]
[comment Do nothing /]
[elseif aExpression.oclIsKindOf(ClassInstanceCreation)]
new [convertType(aExpression.oclAsType(ClassInstanceCreation).type.type, aExpression.originalCompilationUnit, false, false)/]([for (aSubExpression : Expression | aExpression.oclAsType(ClassInstanceCreation).arguments) separator (', ')][generateExpression(aSubExpression, aOwningCompilationUnit)/][/for])
[elseif aExpression.oclIsKindOf(InfixExpression)]
[generateExpression(aExpression.oclAsType(InfixExpression).leftOperand, aOwningCompilationUnit)/] [aExpression.oclAsType(InfixExpression).operator/] [generateExpression(aExpression.oclAsType(InfixExpression).rightOperand, aOwningCompilationUnit)/]
[elseif aExpression.oclIsKindOf(SingleVariableAccess)]
[if not aExpression.oclAsType(SingleVariableAccess).qualifier.oclIsUndefined()][generateExpression(aExpression.oclAsType(SingleVariableAccess).qualifier, aOwningCompilationUnit)/]::[/if][aExpression.oclAsType(SingleVariableAccess).variable.name/]
[elseif aExpression.oclIsKindOf(NullLiteral)]
nullptr
[elseif aExpression.oclIsKindOf(StringLiteral)]
[aExpression.oclAsType(StringLiteral).escapedValue/]
[elseif aExpression.oclIsKindOf(MethodInvocation)]
[if not aExpression.oclAsType(MethodInvocation).expression.oclIsUndefined()][generateExpression(aExpression.oclAsType(MethodInvocation).expression, aOwningCompilationUnit) /][determineOperator(aExpression)/][/if][aExpression.oclAsType(MethodInvocation).method.name/]([for (aSubExpression : Expression | aExpression.oclAsType(MethodInvocation).arguments) separator (', ')][generateExpression(aSubExpression, aOwningCompilationUnit)/][/for])
[elseif aExpression.oclIsKindOf(TypeAccess)]
[comment if the type access is accessing a class declaration (i.e. static method access), we must not add pointers here /]
[if typeRequiresPackage(aExpression.oclAsType(TypeAccess).type, aOwningCompilationUnit)][getNamedElementName(aExpression.oclAsType(TypeAccess).type.originalCompilationUnit._package)/]::[/if][convertType(aExpression.oclAsType(TypeAccess).type, aExpression.originalCompilationUnit, not (aExpression.oclAsType(TypeAccess).type.oclIsKindOf(ClassDeclaration)), false)/]
[elseif aExpression.oclIsKindOf(ParenthesizedExpression)]
([generateExpression(aExpression.oclAsType(ParenthesizedExpression).expression, aOwningCompilationUnit)/])
[elseif aExpression.oclIsKindOf(ConditionalExpression)]
[generateExpression(aExpression.oclAsType(ConditionalExpression).expression, aOwningCompilationUnit)/] ? [generateExpression(aExpression.oclAsType(ConditionalExpression).thenExpression, aOwningCompilationUnit)/] : [generateExpression(aExpression.oclAsType(ConditionalExpression).elseExpression, aOwningCompilationUnit)/]
[elseif aExpression.oclIsKindOf(NumberLiteral)]
[aExpression.oclAsType(NumberLiteral).tokenValue/]
[elseif aExpression.oclIsKindOf(BooleanLiteral)]
[aExpression.oclAsType(BooleanLiteral).value/]
[elseif aExpression.oclIsKindOf(ThisExpression)]
this
[elseif aExpression.oclIsKindOf(InstanceofExpression)]
typeid([generateExpression(aExpression.oclAsType(InstanceofExpression).leftOperand, aOwningCompilationUnit) /]) == typeid([generateExpression(aExpression.oclAsType(InstanceofExpression).rightOperand, aOwningCompilationUnit) /])
[elseif aExpression.oclIsKindOf(CastExpression)]
([convertType(aExpression.oclAsType(CastExpression).type.type, aExpression.originalCompilationUnit, true, false) /]) [generateExpression(aExpression.oclAsType(CastExpression).expression, aOwningCompilationUnit) /]
[elseif aExpression.oclIsKindOf(Assignment)]
[generateExpression(aExpression.oclAsType(Assignment).leftHandSide, aOwningCompilationUnit)/] [aExpression.oclAsType(Assignment).operator/] [generateExpression(aExpression.oclAsType(Assignment).rightHandSide, aOwningCompilationUnit)/]
[elseif aExpression.oclIsKindOf(SuperMethodInvocation)]
super::[aExpression.oclAsType(SuperMethodInvocation).method.name/]([for (aSubExpression : Expression | aExpression.oclAsType(SuperMethodInvocation).arguments) separator (', ')][generateExpression(aSubExpression, aOwningCompilationUnit)/][/for])
[elseif aExpression.oclIsKindOf(VariableDeclarationExpression)]
[convertType(aExpression.oclAsType(VariableDeclarationExpression).type.type, aExpression.originalCompilationUnit, true, false) /] [for (aFragment : VariableDeclarationFragment | aExpression.oclAsType(VariableDeclarationExpression).fragments) separator (', ')][aFragment.name/] = [generateExpression(aFragment.initializer, aOwningCompilationUnit)/][/for]
[elseif aExpression.oclIsKindOf(PostfixExpression)]
[generateExpression(aExpression.oclAsType(PostfixExpression).operand, aOwningCompilationUnit) /][aExpression.oclAsType(PostfixExpression).operator /]
[elseif aExpression.oclIsKindOf(PrefixExpression)]
[aExpression.oclAsType(PrefixExpression).operator /][generateExpression(aExpression.oclAsType(PrefixExpression).operand, aOwningCompilationUnit) /]
[elseif aExpression.oclIsKindOf(ArrayLengthAccess)]
[generateExpression(aExpression.oclAsType(ArrayLengthAccess).array, aOwningCompilationUnit) /].size()
[elseif aExpression.oclIsKindOf(ArrayAccess)]
[generateExpression(aExpression.oclAsType(ArrayAccess).array, aOwningCompilationUnit) /]['['/][generateExpression(aExpression.oclAsType(ArrayAccess).index, aOwningCompilationUnit)/][']'/]
[elseif aExpression.oclIsKindOf(ArrayCreation)]
[convertType(aExpression.oclAsType(ArrayCreation).type.type, aExpression.originalCompilationUnit, true, false)/]([for (aSubExpression : Expression | aExpression.oclAsType(ArrayCreation).dimensions) separator (', ')][generateExpression(aSubExpression, aOwningCompilationUnit)/][/for])
[elseif aExpression.oclIsKindOf(FieldAccess)]
[generateExpression(aExpression.oclAsType(FieldAccess).expression, aOwningCompilationUnit)/]->[getNamedElementName(aExpression.oclAsType(FieldAccess).field.variable)/]
[elseif aExpression.oclIsKindOf(TypeLiteral)]
typeid([convertType(aExpression.oclAsType(TypeLiteral).type.type, aExpression.originalCompilationUnit, false, false)/])
[else]
/* TODO Expression [aExpression/] */
[/if]
[/template]

[template private determineOperator (aExpression : Expression) post (trim())]
[if aExpression.oclAsType(MethodInvocation).expression.oclIsKindOf(TypeAccess)]
::
[elseif aExpression.oclAsType(MethodInvocation).expression.oclIsKindOf(SingleVariableAccess)]
->
[else]
.
[/if]
[/template]