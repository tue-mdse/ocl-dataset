[comment encoding = UTF-8 /]
[module HppsGenerator('http://www.eclipse.org/MoDisco/Java/0.2.incubation/java')/]

[import de::egore911::joda2cpp::CommonGenerator /]

[comment ------------------------------------------------------------------- /]
[comment Header file generation /]
[comment ------------------------------------------------------------------- /]

[template public generateHpps (aModel : Model) ]
	[for (aCompilationUnit : CompilationUnit | aModel.compilationUnits)]
		[if not isTestFile(aCompilationUnit)]
			[file (getFileName(aCompilationUnit) + '.hpp', false, 'UTF-8')]
[generateHppContent(aCompilationUnit) /]
			[/file]
		[/if]
	[/for]
[/template]

[template private generateForwardDeclarations(aTypes : Sequence(Type), aOwningCompilationUnit : CompilationUnit) post (trim())]
[for (aType : Type | aTypes)]
[generateForwardDeclaration(aType)/]
[/for]
[/template]

[template private generateForwardDeclaration (aType : Type) post (trim())]
[if not aType.oclIsKindOf(ArrayType) and not aType.oclIsKindOf(WildCardType)]
	[if not aType.originalCompilationUnit.oclIsUndefined()]
		[if isSubpackage(aType.originalCompilationUnit)]namespace [getNamedElementName(aType.originalCompilationUnit._package) /] {[/if]class [getNamedElementName(aType) /];[if not (getNamedElementName(aType.originalCompilationUnit._package) = 'time')]}[/if]
	[else]
		[if aType.oclIsKindOf(ParameterizedType)]template<class [for (it : TypeAccess | aType.oclAsType(ParameterizedType).typeArguments) separator (', ')]T[/for]> [/if]class [getNamedElementName(aType) /];
	[/if]
[/if]
[/template]

[template private generateHppContent (aCompilationUnit : CompilationUnit) ]
#ifndef [getGuardName(aCompilationUnit) /]
#define [getGuardName(aCompilationUnit) /]

[generateImports(extractHppImports(aCompilationUnit), aCompilationUnit) /]

namespace joda {
namespace time {
[generateForwardDeclarations(extractCppImports(aCompilationUnit), aCompilationUnit) /]
[if isSubpackage(aCompilationUnit)]namespace [getNamedElementName(aCompilationUnit._package) /] {[/if]

[for (aAbstractTypeDeclaration : AbstractTypeDeclaration | aCompilationUnit.types)]
[generateClassDefinition(aAbstractTypeDeclaration, '') /]
[/for]

[if isSubpackage(aCompilationUnit)]} /* namespace [getNamedElementName(aCompilationUnit._package) /] */[/if]
} /* namespace time */
} /* namespace joda */

#endif /* [getGuardName(aCompilationUnit) /] */
[/template]

[template private generateClassDefinition (aAbstractTypeDeclaration : AbstractTypeDeclaration, indention : String) ]
[indention /][renderCommentIfAvailable(aAbstractTypeDeclaration)/]
[indention /]class [getNamedElementName(aAbstractTypeDeclaration) /][if not (getParentClasses(aAbstractTypeDeclaration) -> isEmpty())] : [for (aTypeAccess : TypeAccess | getParentClasses(aAbstractTypeDeclaration)) separator (', ')]public [if typeRequiresPackage(aTypeAccess.type, aAbstractTypeDeclaration.originalCompilationUnit)][getNamedElementName(aTypeAccess.type.originalCompilationUnit._package)/]::[/if][getNamedElementName(aTypeAccess.type)/][if aTypeAccess.type.oclIsKindOf(ParameterizedType)]<[for (aType : Type | aTypeAccess.type.oclAsType(ParameterizedType).typeArguments -> collect(type)) separator (', ')][getNamedElementName(aType)/][/for]>[/if][/for][/if] {
[for (aBodyDeclaration : BodyDeclaration | aAbstractTypeDeclaration.bodyDeclarations)]
[if (aBodyDeclaration.oclIsKindOf(MethodDeclaration))]
[if not aAbstractTypeDeclaration.oclIsKindOf(EnumDeclaration) and not (aBodyDeclaration.oclAsType(MethodDeclaration).name = 'values')]
[indention /][generateVisibility(aBodyDeclaration.modifier) /]
[indention /]    [renderCommentIfAvailable(aBodyDeclaration)/]
[indention /][generateMethodDeclaration(aBodyDeclaration.oclAsType(MethodDeclaration), aAbstractTypeDeclaration) /]
[/if]
[elseif (aBodyDeclaration.oclIsKindOf(FieldDeclaration))]
[indention /][generateVisibility(aBodyDeclaration.modifier) /]
[indention /]    [renderCommentIfAvailable(aBodyDeclaration)/]
[indention /][generateFieldDeclaration(aBodyDeclaration.oclAsType(FieldDeclaration)) /]
[elseif (aBodyDeclaration.oclIsKindOf(ConstructorDeclaration))]
[indention /][generateVisibility(aBodyDeclaration.modifier) /]
[indention /]    [renderCommentIfAvailable(aBodyDeclaration)/]
[indention /][generateConstructorDeclaration(aBodyDeclaration.oclAsType(ConstructorDeclaration)) /]
[elseif (aBodyDeclaration.oclIsKindOf(ClassDeclaration))]
[elseif (aBodyDeclaration.oclIsKindOf(InterfaceDeclaration))]
[elseif (aBodyDeclaration.oclIsKindOf(EnumDeclaration))]
[elseif (aBodyDeclaration.oclIsKindOf(Initializer))]
[else]
[indention /]/* TODO bodyDeclaration [aBodyDeclaration /] */
[/if]
[/for]
[indention /]};

[comment Place child classes below the actual class, as they commonly are child classes of the parent class /]
[for (aBodyDeclaration : BodyDeclaration | aAbstractTypeDeclaration.bodyDeclarations)]
[if (aBodyDeclaration.oclIsKindOf(ClassDeclaration))]
[indention /][generateClassDefinition(aBodyDeclaration.oclAsType(ClassDeclaration), indention + '    ') /]
[elseif (aBodyDeclaration.oclIsKindOf(InterfaceDeclaration))]
[indention /][generateClassDefinition(aBodyDeclaration.oclAsType(InterfaceDeclaration), indention + '    ') /]
[elseif (aBodyDeclaration.oclIsKindOf(EnumDeclaration))]
[comment joda-time only uses one enum which isn't a real enum, but a singleton /]
[indention /][generateClassDefinition(aBodyDeclaration.oclAsType(EnumDeclaration), indention + '    ') /]
[/if]
[/for]

[for (aBodyDeclaration : BodyDeclaration | aAbstractTypeDeclaration.bodyDeclarations)]
[if (aBodyDeclaration.oclIsKindOf(Initializer))]
/* TODO static initialization
{
[for (aStatement : Statement | aBodyDeclaration.oclAsType(Initializer)._body.statements)]
	[comment generateStatement(aStatement, aBodyDeclaration.originalCompilationUnit)/]
[/for]
}
*/
[/if]
[/for]
[/template]

[query private getParentClasses(aAbstractTypeDeclaration : AbstractTypeDeclaration) : Set(TypeAccess) =
if aAbstractTypeDeclaration.oclIsKindOf(ClassDeclaration) and not aAbstractTypeDeclaration.oclAsType(ClassDeclaration).superClass.oclIsUndefined() then
	Sequence(TypeAccess){aAbstractTypeDeclaration.oclAsType(ClassDeclaration).superClass}
		-> union(aAbstractTypeDeclaration.superInterfaces -> asSequence())
		-> asSet()
else
	aAbstractTypeDeclaration.superInterfaces -> asSet()
endif
/]


[template private generateVisibility(aModifier : Modifier) post(trim())]
[if not aModifier.oclIsUndefined()]
[if aModifier.synchronized]/* TODO synchronized */[/if]
[if aModifier.visibility = VisibilityKind::public or aModifier.visibility = VisibilityKind::private or aModifier.visibility = VisibilityKind::protected]
[aModifier.visibility /]:
[elseif aModifier.visibility = VisibilityKind::none]
protected:
[else]
/* TODO visibility [aModifier.visibility /] */
[/if]
[/if]
[/template]

[template private generateFieldDeclaration (aFieldDeclaration : FieldDeclaration) ]
    [if aFieldDeclaration.modifier._static]static [/if][convertType(aFieldDeclaration.type.type, aFieldDeclaration.originalCompilationUnit, true, true)/] [for (aVariableDeclarationFragment :VariableDeclarationFragment | aFieldDeclaration.fragments) separator (', ')][getNamedElementName(aVariableDeclarationFragment)/][if not aVariableDeclarationFragment.initializer.oclIsUndefined()] = [generateExpression(aVariableDeclarationFragment.initializer, aFieldDeclaration.originalCompilationUnit)/][/if][/for];
[/template]

[template private generateMethodDeclaration (aMethodDeclaration : MethodDeclaration, aAbstractTypeDeclaration : AbstractTypeDeclaration) ]
    [if aMethodDeclaration.modifier._static]static [/if][if aMethodDeclaration.modifier.inheritance = InheritanceKind::abstract or aAbstractTypeDeclaration.oclIsKindOf(InterfaceDeclaration) or methodOverrides(aMethodDeclaration)]virtual [/if][generateMethodSignature(aMethodDeclaration, null)/][if aMethodDeclaration.modifier.inheritance = InheritanceKind::abstract or aAbstractTypeDeclaration.oclIsKindOf(InterfaceDeclaration)] = 0[/if];
[/template]

[template private generateConstructorDeclaration (aConstructorDeclaration : ConstructorDeclaration) ]
    [generateConstructorSignature(aConstructorDeclaration)/];
[/template]

[template private getGuardName (aCompilationUnit : CompilationUnit) ]
__JODA_TIME_[if isSubpackage(aCompilationUnit)][getNamedElementName(aCompilationUnit._package).toUpperCase()/][/if][getNamedElementName(aCompilationUnit).replace('.java', '').toUpperCase()/]__
[/template]

[query private extractHppImports(aCompilationUnit : CompilationUnit) : Sequence(Type) =
invoke('de.egore911.joda2cpp.CppGeneratorUtil', 'extractHppImports(org.eclipse.gmt.modisco.java.CompilationUnit)', Sequence{aCompilationUnit}) /]

[query public methodOverrides (aMethodDeclaration : MethodDeclaration) : Boolean =
invoke('de.egore911.joda2cpp.CppGeneratorUtil', 'methodOverrides(org.eclipse.gmt.modisco.java.MethodDeclaration, org.eclipse.gmt.modisco.java.AbstractTypeDeclaration)', Sequence{aMethodDeclaration, aMethodDeclaration.abstractTypeDeclaration}) /]