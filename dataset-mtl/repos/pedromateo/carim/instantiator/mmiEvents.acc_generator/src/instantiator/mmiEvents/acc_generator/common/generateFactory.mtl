[comment encoding = UTF-8 /]
[module generateFactory('http://www.eclipse.org/emf/2002/Ecore','org/carimModel')]



[template public generateFile(pack : EPackage)]
[comment @main /]
[file ('MmiEventsFactory'.concat('.java'), false, 'UTF-8')]
/// generation start ////////////////////////////////////////////////////////////

//TODO fit package name
package org.mmi.events.factory; 

import org.carim.model.*;
import org.mmi.events.*;
import javax.xml.datatype.XMLGregorianCalendar;

/**
 * This class implements a customized Event factory.
 * All the events are created with a specific type value
 * and using a common timestamp in milliseconds.
 * 
 * @author pedromateo@um.es
 *
 */
public class MmiEventsFactory {

	 private long baseTimestamp;

   /**
   * Constructor
   */
   public MmiEventsFactory()
   {
      resetTimestamp();
   }
   
   ///
   /// timestamp methods
   ///
   
   public void resetTimestamp() {
      baseTimestamp = System.currentTimeMillis();
   }
   
   private long _currentTimestamp() {
      return System.currentTimeMillis() - baseTimestamp;
   }
   
   /**
    * Methods to create events
    * (not for abstract classes)
    */

[for (class : EClass | pack.eClassifiers->filter(EClass)->select(c : EClass | not c.abstract)) 
separator('\n')]
	[class.generateCreationMethod()/]
[/for]
[comment [pack.eClassifiers->filter(EClass)->select(it: EClass | not it.abstract).generateCreationMethod()/]
}
/// generation end ////////////////////////////////////////////////////////////
[/file]
[/template]


[template public generateCreationMethod(class :  EClass)]
public [class.name/] create[class.name/]([generateArguments(class.eAllAttributes->filter(EAttribute))/])
{
  [class.name/] e = EventsFactory.eINSTANCE.create[class.name/]();
  e.setType(event_t.[class.name.toUpperCase().replaceAll('EVENT','')/].getValue());
  e.setTimestamp(_currentTimestamp());
  [setAttributeFromArguments(class.eAllAttributes->filter(EAttribute))/]
  return e;
}
[/template]




[template public generateArguments(atts:Collection(EAttribute))]
[for (att : EAttribute | atts->select(e:EAttribute | e.name.strcmp('type') <> 0 and e.name.strcmp('timestamp') <> 0)) separator(',')]
[att.eType.typename()/] p_[att.name/] 
[/for]
[/template]

[template public setAttributeFromArguments(atts:Collection(EAttribute))]
[for (att : EAttribute | atts->select(e:EAttribute | e.name.strcmp('type') <> 0 and e.name.strcmp('timestamp') <> 0)) separator('')]
e.set[att.name.toUpperFirst()/](p_[att.name/]);
[/for]
[/template]




[template public mapDataTypename(typename : EString)]
[comment mapped types/]
[if (typename = 'Int')] int
[elseif (typename = 'PercentageT')] int
[elseif (typename = 'Likert5Value')] float
[elseif (typename = 'Likert7Value')] float
[elseif (typename = 'LatitudeType')] double
[elseif (typename = 'LongitudeType')] double
[elseif (typename = 'DateTime')] XMLGregorianCalendar
[comment valid types/]
[else] 	[typename/]
[/if]
[/template]


[template public deprecated_getTypeName(type : EClassifier)]
[comment example: eProxyURI: file:/home/pedro/svn_catedra/anotaciones/context_aware_interaction/implementation/instantiator/carimModel.emf/model/carimModel.ecore#//PercentageT/]
[if (type.toString().strstr('eProxyURI'))]
[((type.toString().substring(type.toString().lastIndex('/') + 1,type.toString().lastIndex(')') - 1))).mapDataTypename()/]
[else]
[type.name.mapDataTypename()/]
[/if]
[/template]

[query public typename(type : EClassifier) : EString = 
if type.toString().strstr('eProxyURI') 
then 
((type.toString().substring(type.toString().lastIndex('/') + 1,type.toString().lastIndex(')') - 1))).mapDataTypename()
else 
type.name.mapDataTypename()
endif
/]

