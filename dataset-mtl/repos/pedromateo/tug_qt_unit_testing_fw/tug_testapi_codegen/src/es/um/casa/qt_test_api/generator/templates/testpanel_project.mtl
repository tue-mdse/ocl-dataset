[comment encoding = UTF-8 /]
[module testpanel_project('platform:/resource/qt48_model/qt48_xmlschema_qwt_enhanced.xsd')]

[import es::um::casa::qt_test_api::generator::templates::widgets /]   

[query public getCurrentTime(c : OclAny) : String 
=  invoke('es.um.casa.qt_test_api.generator.support.GenerationSupport', 'getCurrentTime()', Sequence{}) /]

[comment ---------------------------------------------------------------------- /]
[comment --------------- MAINTEST PRO FILE ------------------------------------ /]
[comment ---------------------------------------------------------------------- /]

[template public generateTestpanelProject_proFile(
     testpanelgendir : ecore::EString,
     projectname : ecore::EString,
     uiclassname : ecore::EString,
     reluifilepath : ecore::EString,
     uifilenotpresent : ecore::EBoolean,
     gwenabled : ecore::EBoolean,
     gwfilepath : ecore::EString,
     gwlibpath : ecore::EString,
     gwextras : ecore::EString,
     modelenabled : ecore::EBoolean,
     modelfilepath : ecore::EString,
     modellibpath : ecore::EString,
     modelextras : ecore::EString,
     signalsenabled : ecore::EBoolean,
     signalsfilepath : ecore::EString,
     signalslibpath : ecore::EString,
     signalsextras : ecore::EString,
     signalsinc : ecore::EString,
     tuglibinc : ecore::EString,
     gcovinc : ecore::EString,
     gprofinc : ecore::EString,
     qwtinc : ecore::EString,
     extrasinc : ecore::EString)]

[file (testpanelgendir + uiclassname + '_testproject.pro', false, 'UTF-8')]
#/// generation start ////////////////////////////////////////////////////////////

#-------------------------------------------------------------------------------
# Qt project automatically generated by TUG Wizard at [getCurrentTime()/]
#-------------------------------------------------------------------------------

# target
PROJECT_NAME = [projectname/]
TARGET = do_test_[uiclassname/]
TEMPLATE = app
BUILD_DIR = ../../bin
DESTDIR = $${BUILD_DIR}

# config
QT += core gui testlib
CONFIG += debug
[if (signalsenabled)]
CONFIG += no_keywords # to avoid conflicts with 3rd party signals
[/if]


equals(QT_MAJOR_VERSION, 5) {
  message(" Using QT 5 kit...")
   QT += widgets
}
else {
  message(" Using QT 4 kit...")
}

#-------------------------------------------------------------------------------

###
### main sources
SOURCES += main.cpp
SOURCES += test_[uiclassname/].cpp
HEADERS += test_[uiclassname/].h

[comment ###
### test includes
HEADERS  += [testsuitesinc.replaceAll(' ',' \\\\ \n\t')/]

#-------------------------------------------------------------------------------

[comment add panel sources only if a panel was selected/]
###
### panel sources
[if (uifilenotpresent = false)]
[let panelfiledir: ecore::EString = reluifilepath.toString().substring(1,reluifilepath.lastIndex('/'))]
INCLUDEPATH += [panelfiledir/]
[comment FORMS   += [uifile/]
[comment SOURCES += [gwfile.substitute('.h','.cpp')/]
[comment HEADERS += [gwfile/]
[/let]
[/if]

[if (gwenabled)]
[let gwfiledir: ecore::EString = gwfilepath.toString().substring(1,gwfilepath.lastIndex('/'))]
###
### gw sources
INCLUDEPATH += [gwfiledir/]
[/let]
[if (gwlibpath.size() > 0)]
[let gwlibdir: ecore::EString = gwlibpath.toString().substring(1,gwlibpath.lastIndex('/'))]
[let gwlibso: ecore::EString = gwlibpath.toString().substring(gwlibpath.lastIndex('/')+1,gwlibpath.index('.so')-1)]
DEPENDPATH += [gwlibdir/]
LIBS += -L[gwlibdir/] -l[if (gwlibso.startsWith('lib'))][gwlibso.substring(4)/][else][gwlibso/][/if]
[/let]
[/let]
[/if]
# extra includes
[gwextras/]
[/if]

[if (modelenabled)]
[let modelfiledir: ecore::EString = modelfilepath.substring(1,modelfilepath.lastIndex('/'))]
[let modellibdir: ecore::EString = modellibpath.substring(1,modellibpath.lastIndex('/'))]
[let modellibso: ecore::EString = modellibpath.substring(modellibpath.lastIndex('/')+1,modellibpath.index('.so')-1)]
###
### model sources
INCLUDEPATH += [modelfiledir/]
DEPENDPATH += [modellibdir/]
LIBS += -L[modellibdir/] -l[if (modellibso.startsWith('lib'))][modellibso.substring(4)/][else][modellibso/][/if]
# extra includes
[modelextras/]
[comment SOURCES += [modelfile.substitute('.h','.cpp')/]
[comment HEADERS += [modelfile/]
[/let]
[/let]
[/let]
[/if]

[if (signalsenabled)]
[let signalsfiledir: ecore::EString = signalsfilepath.substring(1,signalsfilepath.lastIndex('/'))]
[let signalslibdir: ecore::EString = signalslibpath.substring(1,signalslibpath.lastIndex('/'))]
[let signalslibso: ecore::EString = signalslibpath.substring(signalslibpath.lastIndex('/')+1,signalslibpath.index('.so')-1)]
###
### signals sources
INCLUDEPATH += [signalsfiledir/]
DEPENDPATH += [signalslibdir/]
LIBS += -L[signalslibdir/] -l[if (signalslibso.startsWith('lib'))][signalslibso.substring(4)/][else][signalslibso/][/if]
# extra includes
[signalsextras/]
[comment SOURCES += [signalsfile.substitute('.h','.cpp')/]
[comment HEADERS += [signalsfile/]
[/let]
[/let]
[/let]
[/if]

# signal includes (configured in file)
[signalsinc/]

#-------------------------------------------------------------------------------

# TUG lib include (configured in file)
[tuglibinc/]

# gcov includes (configured in file)
[gcovinc/]

# gprof includes (configured in file)
[gprofinc/]

# qwt includes (configured in file)
[qwtinc/]

# extra includes (configured in wizard)
[extrasinc/]

#/// generation end ////////////////////////////////////////////////////////////
[/file]
[/template]

[comment ---------------------------------------------------------------------- /]
[comment --------------- MAINTEST MAIN FILE ----------------------------------- /]
[comment ---------------------------------------------------------------------- /]

[template public generateTestpanelProject_mainFile(
     testpanelgendir : ecore::EString,
     projectname : ecore::EString,
     gwenabled : ecore::EBoolean,
     gwbuilddir : ecore::EString,
     modelenabled : ecore::EBoolean,
     modelbuilddir : ecore::EString,
     signalsenabled : ecore::EBoolean,
     signalsbuilddir : ecore::EString,
     gprofenabled : ecore::EBoolean,
     gcovenabled : ecore::EBoolean,
     testsuitesinc : ecore::EString)]

[file (testpanelgendir + 'main.cpp', false, 'UTF-8')]
/// generation start ////////////////////////////////////////////////////////////

///
/// main.cpp automatically generated by TUG Wizard at [getCurrentTime()/]
///

#include <QApplication>
#include <TestBinRunner.h>

[comment /// testsuite includes /]
[comment #include "[testsuitesinc.replaceAll(' ','"\n#include "')/][comment "/]

/// main function
int main(int argc, char *argv['['/][']'/])
{
    ///
    /// 1. create a test runner and configure...

    TestBinRunner trunner(argc,argv);
    trunner.project_name("[projectname/]");

    // output options
    trunner.output_verbose();
    //trunner.add_timestamp_to_output_filename();

    // coverage and profiling options
[if (gprofenabled)]
    trunner.do_profiling();
[/if]
[if (gcovenabled)]
    [if (gwenabled)]
    trunner.coverage_on_dir("[gwbuilddir/]");
    [/if]
    [if (modelenabled and modelbuilddir <> gwbuilddir)]
    trunner.coverage_on_dir("[modelbuilddir/]");
    [/if]
    [if (signalsenabled and signalsbuilddir <> gwbuilddir and signalsbuilddir <> modelbuilddir)]
    trunner.coverage_on_dir("[signalsbuilddir/]");
    [/if]  
[/if]

    ///
    /// 2. add test binaries to the runner

[comment friend class statements/]
[comment ("","","")("","","")/]
[if (testsuitesinc.size() > 0)]
[for (s : ecore::EString | testsuitesinc.tokenize('\\)'))] 
    trunner.add_testbin[s.replaceAll(',',',\n        ') /]);
[/for]
[else]
    // no binaries to be added
[/if]

    ///
    /// 3. run tests

    return trunner.pause_between(1000).run();
}

/// generation end ////////////////////////////////////////////////////////////
[/file]
[/template]


[comment ---------------------------------------------------------------------- /]
[comment --------------- TESTPANEL CPP FILE ----------------------------------- /]
[comment ---------------------------------------------------------------------- /]

[template public generateTestpanelProject_cppFile(
     aDocumentRoot : Qt48XmlschemaQwtEnhanced::DocumentRoot,
     testpanelgendir : ecore::EString,
     projectname : ecore::EString,
     uiclassname : ecore::EString,
     uifilenotpresent : ecore::EBoolean,
     uireference : ecore::EString,
     uireferenceinclude : ecore::EString,
     gwenabled : ecore::EBoolean,
     gwclassname : ecore::EString,
     gwpanelparameters : ecore::EString,
     gwparameters : ecore::EString,
     rtincludes_cpp : ecore::EString,
     rtcode_cpp : ecore::EString)]

[file (testpanelgendir + 'test_' + uiclassname + '.cpp', false, 'UTF-8')]
/// generation start ////////////////////////////////////////////////////////////

///
/// test_[uiclassname/].cpp automatically generated by TUG Wizard at [getCurrentTime()/]
///

#include "test_[uiclassname/].h"

// test support include
#include <qt_TestSupport.hpp>
#include <qt_TestUtils.hpp>
[comment --------------/]
[if (uireferenceinclude.size() > 0)]
// ui reference include
#include <[uireferenceinclude/]>
[/if]

///
/// additional includes (protected area)

/// >>>>>
[rtincludes_cpp/]
/// <<<<<

///
/// constructors

test_[uiclassname/]::test_[uiclassname/]()
[if (gwenabled)]
    : [gwclassname/]()
[/if]
{
}

[if (gwenabled)]
test_[uiclassname/]::test_[uiclassname/]([gwpanelparameters/])
    : [gwclassname/]([gwparameters/])
{
}
[/if]

test_[uiclassname/]::~test_[uiclassname/]()
{
}

///
/// supporting code (protected area)

/// >>>>>
[rtcode_cpp/]
/// <<<<<

///
/// widget methods
[comment expand widgets only if a panel was selected/]
[if (uifilenotpresent = false)]
   [for (widget :  Widget | aDocumentRoot.ui.eAllContents()->selectByKind(Widget))]
 		[expand_Widget(widget, uiclassname, uireference, true)/]
   [/for]
[/if]

/// generation end ////////////////////////////////////////////////////////////
[/file]
[/template]

[comment ---------------------------------------------------------------------- /]
[comment ---------------- TESTPANEL H FILE ------------------------------------ /]
[comment ---------------------------------------------------------------------- /]

[template public generateTestpanelProject_hFile(
     aDocumentRoot : Qt48XmlschemaQwtEnhanced::DocumentRoot,
     testpanelgendir : ecore::EString,
     projectname : ecore::EString,
     uiclassname : ecore::EString,
     reluifilepath : ecore::EString,
     uifilenotpresent : ecore::EBoolean,
     uireference : ecore::EString,
     uireferenceinclude : ecore::EString,
     gwenabled : ecore::EBoolean,
     gwclassname : ecore::EString,
     gwpanelparameters : ecore::EString,
     gwparameters : ecore::EString,
     gwfilepath : ecore::EString,
     rtincludes_h : ecore::EString,
     rtcode_h : ecore::EString,
     testsuitesinc : ecore::EString)]


[file (testpanelgendir + 'test_' + uiclassname + '.h', false, 'UTF-8')]
/// generation start ////////////////////////////////////////////////////////////

///
/// test_[uiclassname/].h automatically generated by TUG Wizard at [getCurrentTime()/]
///

#ifndef TEST_[uiclassname/]_H
#define TEST_[uiclassname/]_H

[comment add ui include only if a panel was selected/]
[if (uifilenotpresent = false)]
// ui include
[let uifilename: ecore::EString = reluifilepath.toString().substring(reluifilepath.lastIndex('/')+1)]
[let uifilename_noext: ecore::EString = uifilename.toString().substring(1,uifilename.lastIndex('.')-1)]
#include <ui_[uifilename_noext/].h>
[/let]
[/let]
[/if]

[comment --------------/]
[if (gwenabled)]
// gw include
[let gwfilename: ecore::EString = gwfilepath.toString().substring(gwfilepath.lastIndex('/')+1)]
#include <[gwfilename/]>
[/let]
[/if]

///
/// additional includes (protected area)

/// >>>>>
[rtincludes_h/]
/// <<<<<

///
/// test_[uiclassname/] class definition
///

class test_[uiclassname/] 
[if (gwenabled)]
    : public [gwclassname/] 
[/if]
{

[comment friend class statements/]
[comment ("target","","")("target","","")/]
[if (testsuitesinc.size() > 0)]
[for (s : ecore::EString | testsuitesinc.replaceAll('\\(','').tokenize('\\)'))] 
    friend class [s.replaceAll('"','').tokenize(',')->first() /];
[/for]
[/if]

public:

    ///
    /// constructors

    test_[uiclassname/]();
[if (gwenabled)]
    test_[uiclassname/]([gwpanelparameters/]);
[/if]
    ~test_[uiclassname/]();

protected:

	///
	/// supporting code (protected area)
	
	/// >>>>>
[rtcode_h/]
    /// <<<<<

public:

    ///
    /// widget methods

[comment expand widgets only if a panel was selected/]
[if (uifilenotpresent = false)]
   [for (widget :  Widget | aDocumentRoot.ui.eAllContents()->selectByKind(Widget))]
   [expand_Widget(widget,uiclassname,uireference,false)/]
   [/for]
[/if]
};

#endif // TEST_[uiclassname/]_H

/// generation end ////////////////////////////////////////////////////////////
[/file]
[/template]
