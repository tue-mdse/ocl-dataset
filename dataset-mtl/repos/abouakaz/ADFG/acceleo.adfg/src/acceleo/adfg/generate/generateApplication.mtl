[comment encoding = UTF-8 /]
[module generateApplication('http://www.example.org/adfg')]


[template public generateApplication(anApplication : Application)]
[comment @main/]


[comment]
      generate the Safelet of the application.
[/comment]
[file (anApplication.name.toLower().concat('/').concat(anApplication.name.toUpperFirst()).concat('.java'), false, 'UTF-8')]
package [anApplication.name.toLower()/];

import static javax.safetycritical.annotate.Level.SUPPORT;
import static javax.safetycritical.annotate.Phase.CLEANUP;
import static javax.safetycritical.annotate.Phase.INITIALIZATION;
import static javax.safetycritical.annotate.Scope.IMMORTAL;

import javax.realtime.PriorityParameters;
import javax.safetycritical.StorageParameters;
import javax.safetycritical.Terminal;
import javax.safetycritical.annotate.SCJAllowed;
import javax.safetycritical.annotate.SCJRestricted;
import javax.safetycritical.annotate.Scope;

/**
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
@Scope(IMMORTAL)
@SCJAllowed(members=true)
public class [anApplication.name.toUpperFirst()/] extends [anApplication.name.toUpperFirst().concat('Safelet')/] {

	/**
 	 * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
 	 * @generated
 	 */
	@SCJRestricted(INITIALIZATION)
	public [anApplication.name.toUpperFirst()/]() {
		super(new PriorityParameters(13), new StorageParameters(1000000, 0, 0));
	}

	/**
 	 * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
 	 * @generated
 	 */
	@Override
	@SCJAllowed(SUPPORT)
    @SCJRestricted(INITIALIZATION)
	public void setUp() {
	    Terminal.getTerminal().write("setUp.\n");
		// TODO Auto-generated method stub
	}

	/**
 	 * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
 	 * @generated
 	 */
	@Override
	@SCJAllowed(SUPPORT)
    @SCJRestricted(CLEANUP)
	public void tearDown() {
		Terminal.getTerminal().write("teardown.\n");
		// TODO Auto-generated method stub
	}

}
[/file]

[comment]
      generate an abstract Safelet  of the application.
[/comment]

[file (anApplication.name.toLower().concat('/').concat(anApplication.name.toUpperFirst()).concat('Safelet.java'), false, 'UTF-8')]
package [anApplication.name.toLower()/];

import static javax.safetycritical.annotate.Level.SUPPORT;
import static javax.safetycritical.annotate.Phase.INITIALIZATION;
import static javax.safetycritical.annotate.Scope.IMMORTAL;

import javax.realtime.PriorityParameters;
import javax.safetycritical.MissionSequencer;
import javax.safetycritical.Safelet;
import javax.safetycritical.StorageParameters;
import javax.safetycritical.annotate.SCJAllowed;
import javax.safetycritical.annotate.SCJRestricted;
import javax.safetycritical.annotate.Scope;

/**
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
@SCJAllowed
@Scope(IMMORTAL)
public abstract class [anApplication.name.toUpperFirst().concat('Safelet')/] implements Safelet {

	/**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
	private MissionSequencer sequencer;

	/**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
	@SCJAllowed
    public [anApplication.name.toUpperFirst().concat('Safelet')/](PriorityParameters priority,
            StorageParameters storage) {
        sequencer = new [anApplication.name.toUpperFirst().concat('MissionSequencer')/](priority, storage);
    }

	/**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */	
	@SCJAllowed
    public [anApplication.name.toUpperFirst().concat('Safelet')/](StorageParameters storage) {
        sequencer = new [anApplication.name.toUpperFirst().concat('MissionSequencer')/](null, storage);
    }

	/**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
	@SCJAllowed(SUPPORT)
    @SCJRestricted(INITIALIZATION)
    public MissionSequencer getSequencer() {
        return sequencer;
    }

}
[/file]

[comment]
      generate the MissionSequencer of the application.
[/comment]

[file (anApplication.name.toLower().concat('/').concat(anApplication.name.toUpperFirst()).concat('MissionSequencer.java'), false, 'UTF-8')]
package [anApplication.name.toLower()/];

import static javax.safetycritical.annotate.Level.SUPPORT;
import static javax.safetycritical.annotate.Phase.INITIALIZATION;
import static javax.safetycritical.annotate.Scope.IMMORTAL;

import javax.realtime.PriorityParameters;
import javax.safetycritical.Mission;
import javax.safetycritical.MissionSequencer;
import javax.safetycritical.StorageParameters;
import javax.safetycritical.annotate.DefineScope;
import javax.safetycritical.annotate.RunsIn;
import javax.safetycritical.annotate.SCJAllowed;
import javax.safetycritical.annotate.SCJRestricted;
import javax.safetycritical.annotate.Scope;

[for (graph : Graph | anApplication.graphs)]
import 	[anApplication.name.toLower()/].[graph.name.toLower()/].[graph.name.toUpperFirst()/];
[/for]

/**
 * @generated
 */
@SCJAllowed
@Scope(IMMORTAL)
@DefineScope(name="MISSION",parent=IMMORTAL)
public class [anApplication.name.toUpperFirst().concat('MissionSequencer')/] extends MissionSequencer {

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static int nextMission=0;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SCJAllowed	
	public static final void setNextMission(int id){
		nextMission=id;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    @SCJAllowed
	@SCJRestricted(INITIALIZATION)
    public [anApplication.name.toUpperFirst().concat('MissionSequencer')/](PriorityParameters priority,
            StorageParameters storage) {
        super(priority, storage);
    }

	/**
	 * Get the next mission.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
    @SCJAllowed(SUPPORT)
    @RunsIn("MISSION")
	@SCJRestricted()
	protected Mission getNextMission() {
		System.out.println();
		switch(nextMission){
		[for (graph : Graph | anApplication.graphs)]
		case [graph.name.toUpperFirst()/].ID:
			return new 	[graph.name.toUpperFirst()/]();
		[/for]
		default: 
			return null;
		}
	}

}
[/file]


[/template]
