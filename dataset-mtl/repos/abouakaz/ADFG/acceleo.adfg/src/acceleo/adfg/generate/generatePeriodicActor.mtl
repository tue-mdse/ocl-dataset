[comment encoding = UTF-8 /]
[module generatePeriodicActor('http://www.example.org/adfg')]
[import acceleo::adfg::services::portservices /]

[template public generatePeriodicActor(aPeriodicActor : PeriodicActor)]
[comment @main/]
[file (aPeriodicActor.owner.owner.name.toLower().concat('/').concat(aPeriodicActor.owner.name.toLower()).concat('/').concat(aPeriodicActor.name.toUpperFirst()).concat('.java'), false, 'UTF-8')]
package [aPeriodicActor.owner.owner.name.toLower()/].[aPeriodicActor.owner.name.toLower()/];

import static javax.safetycritical.annotate.Phase.INITIALIZATION;
import static javax.safetycritical.annotate.Level.SUPPORT;
import static javax.safetycritical.annotate.Phase.CLEANUP;

import javax.realtime.PeriodicParameters;
import javax.realtime.PriorityParameters;
import javax.realtime.RelativeTime;
import javax.safetycritical.PeriodicEventHandler;
import javax.safetycritical.StorageParameters;
import javax.safetycritical.Mission;
import javax.safetycritical.Terminal;
import javax.safetycritical.annotate.DefineScope;
import javax.safetycritical.annotate.RunsIn;
import javax.safetycritical.annotate.SCJAllowed;
import javax.safetycritical.annotate.SCJRestricted;
import javax.safetycritical.annotate.Scope;

import scj.adfg.Connection;
import scj.adfg.InputPort;
import scj.adfg.OutputPort;

/**
 * 
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
@Scope("MISSION")
@DefineScope(name="[aPeriodicActor.name.toUpper()/]",parent="MISSION")
@SCJAllowed(members=true)
public class  [aPeriodicActor.name.toUpperFirst()/] extends PeriodicEventHandler {

    [comment generate ports /]
	// Ports;
	[for (port : Port | aPeriodicActor.ports)]
	/**
	 * 
 	 * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
 	 * @generated
     */
		[if (port.oclIsKindOf(OutputPort))]
	final OutputPort [port.name/];
        [else]
    final InputPort [port.name/];
		[/if]
	[/for]

	[comment Constructor /]
	/**
	 * 
 	 * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
 	 * @generated
     */
	@SCJRestricted(INITIALIZATION)
	public [aPeriodicActor.name.toUpperFirst()/](Connection['['/][']'/] connections) {
		// Redefine the storage parameters
		super(new PriorityParameters([aPeriodicActor.priority/]), 
			  new PeriodicParameters(new RelativeTime([aPeriodicActor.phase.div(1000000)/],[aPeriodicActor.period.mod(1000000)/]), new RelativeTime([aPeriodicActor.period.div(1000000)/],[aPeriodicActor.period.mod(1000000)/])), 
			  new StorageParameters(100000, 1000, 1000), 
			  "[aPeriodicActor.name/]"); 
	    [for (port : Port | aPeriodicActor.ports)]
	    [port.name/]=connections['['/][i-1/][']'/];
	    [/for]
	}

    [comment handle method /]
	/**
	 * 
 	 * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
 	 * @generated
     */
	@Override
	@SCJAllowed(SUPPORT)
	@RunsIn("HANDLER")
	public void handleAsyncEvent() {
		/* use the following code to change the mission or to end the application.
		MissionSequencer.setNextMission(Mission.ID);
		Mission.getCurrentMission().requestTermination();//.requestSequenceTermination();
		*/
	}

	/**
	 * 
 	 * <!-- begin-user-doc -->
 	 * <!-- end-user-doc -->
 	 * @generated
     */
	@SCJAllowed(SUPPORT)
    @SCJRestricted(CLEANUP)
	public void cleanUp() {
	}	

}
[/file]
[/template]
