[comment encoding = UTF-8 /]
[module GenerateClassesFromECore('http://www.eclipse.org/emf/2002/Ecore')]


[template public GenerateClassesFromECore(e : EClass)]
[comment @main/]
[file (e.name.concat('.java'), false, 'UTF-8')]
//[e/]
package model;

import java.util.*;
[if (e.eSuperTypes->size() = 0)]
public class [e.name.toUpperFirst()/] {
[else]
public class [e.name.toUpperFirst()/] extends [e.eSuperTypes.name/] {
[/if]

	[e.generateAttributes()/]
	[e.generateRelations()/]
	[e.generateMethods()/]
	[e.generateGettersAndSetters()/]

	//[protected (e.name)]
	//	y0lo
	//[/protected]
}

[/file]
[/template]

[template public generateAttributes (eClass : EClass) ]
[for (attribute : EAttribute | eClass.eAllAttributes)]
[if (attribute.eType.instanceClassName = null)]
	private [attribute.eType.name/] [attribute.name.replace(' ', '')/];
[else]
	private [attribute.eType.instanceClassName/] [attribute.name.replace(' ', '')/];
[/if]

[/for]
[/template]

[template public generateRelations(eClass : EClass)]
[for (relation : EReference | eClass.eAllReferences)]
[if (relation.eType.instanceClassName = null)]
[if (relation.upperBound > 1)]
	private List<[relation.eType.name/]> [relation.name.replace(' ', '')/] = new ArrayList<[relation.eType.name/]>();
[else]
	private [relation.eType.name/] [relation.name.replace(' ', '')/];
[/if]
[else]
[if (relation.upperBound > 1)]
	private List<[relation.eType.instanceClassName/]> [relation.name.replace(' ', '')/] = new ArrayList<[relation.eType.instanceClassName/]>();
[else]
	private [relation.eType.instanceClassName/] [relation.name.replace(' ', '')/];
[/if]
[/if]

[/for]
[/template]


[template public generateMethods (eClass : EClass) ]
[for (operation : EOperation | eClass.eAllOperations)]
[if (operation.eParameters->size() = 0)]
public void [operation.name/](
// [protected ('operation.name')]
// 	go fot it anders
// [/protected]
) {
[else]
public void [operation.name/][for (parameter : EParameter | operation.eParameters) before ('(') separator (', ') after (') {')]
[if (parameter.eType.instanceClassName = null)]
[parameter.eType.name/] ['var'.concat(i.toString())/]
[else]
[parameter.eType.instanceClassName/] ['var'.concat(i.toString())/]
[/if]
[/for]


[/if]
	// [protected (operation.name)]
	// TODO should be implemented
	// [/protected]
}

[/for]
[/template]

[template public generateGettersAndSetters (eClass : EClass) ]
[for (attribute : EAttribute | eClass.eAllAttributes)]
[if (attribute.eType.instanceClassName = null)]
public void ['set'.concat(attribute.name.toUpperFirst().replace(' ', ''))/]([attribute.eType.name/] [attribute.name.replace(' ', '')/]) {
	this.[attribute.name.replace(' ', '')/] = [attribute.name.replace(' ', '')/];
}

public [attribute.eType.name/] ['get'.concat(attribute.name.toUpperFirst().replace(' ', ''))/]() {
	return [attribute.name.replace(' ', '')/]; 
}
[else]
public void ['set'.concat(attribute.name.toUpperFirst().replace(' ', ''))/]([attribute.eType.instanceClassName/] [attribute.name.replace(' ', '')/]) {
	this.[attribute.name.replace(' ', '')/] = [attribute.name.replace(' ', '')/];
}

public [attribute.eType.instanceClassName/] ['get'.concat(attribute.name.toUpperFirst().replace(' ', ''))/]() {
	return [attribute.name.replace(' ', '')/]; 
}
[/if]

[/for]
[for (relation : EReference | eClass.eAllReferences)]
[if (relation.eType.instanceClassName = null)]
[if (relation.upperBound > 1)]
public void ['set'.concat(relation.name.toUpperFirst().replace(' ', ''))/](List<[relation.eType.name/]> [relation.name.replace(' ', '')/]) {
	this.[relation.name.replace(' ', '')/] = [relation.name.replace(' ', '')/];
}

public List<[relation.eType.name/]> ['get'.concat(relation.name.toUpperFirst().replace(' ', ''))/]() {
	return [relation.name.replace(' ', '')/]; 
}
[else]
public void ['set'.concat(relation.name.toUpperFirst().replace(' ', ''))/]([relation.eType.name/] [relation.name.replace(' ', '')/]) {
	this.[relation.name.replace(' ', '')/] = [relation.name.replace(' ', '')/];
}

public [relation.eType.name/] ['get'.concat(relation.name.toUpperFirst().replace(' ', ''))/]() {
	return [relation.name.replace(' ', '')/]; 
}
[/if]
[else]
[if (relation.upperBound > 1)]
public void ['set'.concat(relation.name.toUpperFirst().replace(' ', ''))/](List<[relation.eType.instanceClassName/]> [relation.name.replace(' ', '')/]) {
	this.[relation.name.replace(' ', '')/] = [relation.name.replace(' ', '')/];
}

public List<[relation.eType.instanceClassName/]> ['get'.concat(relation.name.toUpperFirst().replace(' ', ''))/]() {
	return [relation.name.replace(' ', '')/]; 
}
[else]
public void ['set'.concat(relation.name.toUpperFirst().replace(' ', ''))/]([relation.eType.instanceClassName/] [relation.name.replace(' ', '')/]) {
	this.[relation.name.replace(' ', '')/] = [relation.name.replace(' ', '')/];
}

public [relation.eType.instanceClassName/] ['get'.concat(relation.name.toUpperFirst().replace(' ', ''))/]() {
	return [relation.name.replace(' ', '')/]; 
}
[/if]
[/if]

[/for]
[/template]