[comment encoding = UTF-8 /]
[module GenerateStartClassFromEngine('Group2')]

[template public GenerateStartClassFromEngine(aMainSystem : MainSystem)]
[comment @main/]
[file ('Start.java', false, 'UTF-8')]
package model;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import  java.util.*;

public class Start {
	
	public static void main(String['[]'/] args) {


	//Start System generation
	[aMainSystem.eClass().name/] system = new [aMainSystem.eClass().name/]();
	
	//Start Permission generation 
	Map<String, Permission> permissions = new HashMap<>();
	Permission tempPermission;

	[for(permission : Permission | permissions)]
	tempPermission = new Permission();
	tempPermission.setName("[permission.name/]");
	permissions.put("[permission.name/]", tempPermission);
	
	[/for]	
	system.setPermissions(new ArrayList<Permission>(permissions.values()));	
	//End permission generation	

	//Start Usergroup generation 
	Map<String, UserGroup> userGroups = new HashMap<>();
	List<Permission> tempPermissions = new ArrayList<Permission>();
	UserGroup tempUserGroup;

	[for(userGroup : UserGroup | userGroups)]
	tempUserGroup = new UserGroup();
	tempUserGroup.setName("[userGroup.name/]");
	
	tempPermissions = new ArrayList<>();
	[for(permission : Permission | userGroup.permissions)]
	tempPermission = permissions.get("[permission.name/]");
	tempPermissions.add(tempPermission);	
	[/for]
	tempUserGroup.setPermissions(tempPermissions);

	userGroups.put("[userGroup.name/]", tempUserGroup);
	
	[/for]	
	system.setUserGroups(new ArrayList<UserGroup>(userGroups.values()));	
	//End usergroup generation	

	//Start User generation 
	Map<String, User> users = new HashMap<>();
	User tempUser;
	List<UserGroup> tempUserGroups = new ArrayList<>();

	[for(user : User | users)]
	tempUser = new User();
	tempUser.setName("[user.name/]");
	tempUserGroups = new ArrayList<>();
	[for(userGroup : UserGroup | user.groups)]
	tempUserGroup  = userGroups.get("[userGroup.name/]");
	tempUserGroups.add(tempUserGroup);	
	[/for]
	tempUser.setGroups(tempUserGroups);
	users.put("[user.name/]", tempUser);

	
	[/for]	
	system.setUsers(new ArrayList<User>(users.values()));	
	//End User generation	



	//Start workflow generation
	List<Workflow> tempWorkflows = new ArrayList<Workflow>();

	[for (workflow : Workflow | aMainSystem.workflows)]
	
		Map<String,Transition> transitions = new HashMap<String,Transition>();
		Map<String,Task> tasks = new HashMap<String,Task>();

		//Start task generation
		[for (task : Task | workflow.nodes->select(oclIsKindOf(Task)).oclAsType(Task))]
		[task.eClass().name/] [task.name/] = new Task();
		[task.name/].setName("[task.name/]");
		[task.name/].setDescription("[task.description/]");

		[task.name/].setPermission(permissions.get("[task.permission.name/]"));
		[comment][task.permission.eClass().name/] [task.permission.name/] = new [task.permission.eClass().name/]();
		[task.permission.name/].setName("[task.permission.name/]");
		[task.name/].setPermission([task.permission.name/]);[/comment]

		[task.name/].setState(TaskState.[task.state/]);
		[task.name/].setEnd([task.end/]);
		[task.name/].setStart([task.start/]);
		tasks.put([task.name/].getName(), [task.name/]);
		System.out.println([task.name/].getName() + [task.name/].getState());
		//End task generation
		[/for]

		//Start Simple transition generation
		[for (simple : Simple | workflow.nodes->select(oclIsKindOf(Simple)).oclAsType(Simple))]
		[simple.eClass().name/] [simple.name/] = new [simple.eClass().name/]();
		[let previousTaskName : String = simple.previousTasks->first().name]
					
		[simple.name/].setName("[simple.name/]");
		[simple.previousTasks.eClass().name/] temp = tasks.get("[previousTaskName/]"); //Only declared in the first transition generator and then reused for the different transitions
		
		List<Task> tempList = new ArrayList<Task>(); //Only declared in the first transition generator and then reused for the different transitions
		tempList.add(temp);
		[simple.name/].setPreviousTasks(tempList);

		List<Transition> tempList2 = new ArrayList<Transition>(); //Only declared in the first transition generator and then reused for the different transitions
		tempList2.add([simple.name/]);
		temp.setTransition(tempList2);

		[simple.name/].setTask(tasks.get("[simple.task.name/]"));

		transitions.put("[simple.name/]",[simple.name/]);
		
		[/let]
		[/for]
		//End Simple transition generation

		//Start Split transition generation
		[for (split : Split | workflow.nodes->select(oclIsKindOf(Split)).oclAsType(Split))]
		[split.eClass().name/] [split.name/] = new [split.eClass().name/]();
		[let previousTaskName : String = split.previousTasks->first().name]
			
		[split.name/].setName("[split.name/]");
		temp = tasks.get("[previousTaskName/]");

		tempList = new ArrayList<Task>();
		tempList.add(temp);
		[split.name/].setPreviousTasks(tempList);

		tempList2 = new ArrayList<Transition>();
		tempList2.add([split.name/]);
		temp.setTransition(tempList2);

		List<Task> tempTasks = new ArrayList<>();
		[for (task : Task | split.tasks)]
		tempTasks.add(tasks.get("[task.name/]")); 	
		[/for]
		
		[split.name/].setTasks(tempTasks);

		transitions.put("[split.name/]",[split.name/]);
		
		[/let]
		[/for]
		//End Split transition generation

		//Start Merge transition generation
		[for (merge : Merge | workflow.nodes->select(oclIsKindOf(Merge)).oclAsType(Merge))]
		[merge.eClass().name/] [merge.name/] = new [merge.eClass().name/]();
		[let previousTaskName : String = merge.previousTasks->first().name]
			
		[merge.name/].setName("[merge.name/]");
		
		temp = tasks.get("[previousTaskName/]");

		tempList = new ArrayList<Task>();
		tempList2 = new ArrayList<Transition>();
		tempList2.add([merge.name/]);
		[for(task : Task | merge.previousTasks)]
		temp = tasks.get("[task.name/]");
		
		temp.setTransition(tempList2);
		tempList.add(tasks.get("[task.name/]"));
		[/for]	
		[merge.name/].setPreviousTasks(tempList);

		tempList2 = new ArrayList<Transition>();
		tempList2.add([merge.name/]);
		temp.setTransition(tempList2);

		[merge.name/].setTask(tasks.get("[merge.task.name/]"));

		transitions.put("[merge.name/]",[merge.name/]);
		
		[/let]
		[/for]
		//End Merge transition generation



		[workflow.eClass().name/] [workflow.name/] = new [workflow.eClass().name/]();
		[workflow.name/].setName("[workflow.name/]");
		List<Node> nodes = new ArrayList<Node>();
		nodes.addAll(transitions.values());
		nodes.addAll(tasks.values());
		[workflow.name/].setNodes(nodes);
		
		tempWorkflows.add([workflow.name/]);
	[/for] //End workflow generation
		system.setWorkflows(tempWorkflows);
	
		// [protected ('main')]
		// [/protected]
    }

}

[/file]
[/template]