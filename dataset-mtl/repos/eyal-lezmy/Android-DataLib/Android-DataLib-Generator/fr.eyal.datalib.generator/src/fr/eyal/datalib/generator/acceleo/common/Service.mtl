[comment encoding = UTF-8 /]
[module Service('http://www.eyal.fr/android/datalib')]
[import fr::eyal::datalib::generator::acceleo::common::Tools /]

[template public service(aProject : DataLibProject){
_package:String = aProject._package+'.service';
_directory:String = getDirectoryFromPackage(_package);
}]
[file (_directory + aProject.name.toUpperFirst() + 'Service.java', false, 'UTF-8')]
package [_package/];

import android.content.pm.PackageManager;
import android.net.NetworkInfo;
import fr.eyal.lib.data.parser.GenericHandler;
import fr.eyal.lib.data.processor.Processor;
import fr.eyal.lib.data.service.DataLibService;
import fr.eyal.lib.data.service.model.DataLibRequest;
[importWebConfigs(aProject)/]
[importParsers(aProject)/]
// [protected (aProject.name.toUpperFirst()+'Service imports')]
// You can add here your personal imports
// DO NOT MODIFY THE GENERATED COMMENTS "Start of user code" and "End of user code"
// [/protected]

public class [aProject.name.toUpperFirst()/]Service extends DataLibService {

    //different Service's possible actions
	[declareWebServices(aProject)/]

    public [aProject.name.toUpperFirst()/]Service() {
        super();
    }

    @Override
    public void launchProcessor(final int processorType, final DataLibRequest request) {

        Processor processor = new Processor(this, mHeaders);
        GenericHandler handler = null;

        //We initiate the specific workers
        switch (processorType) {

			[launchProcessorCases(aProject)/]
			default:
            	return;
        }

		//we check the presence of the ACCESS_NETWORK_STATE
        PackageManager pm = getPackageManager();
        if (pm.checkPermission("android.permission.ACCESS_NETWORK_STATE", getPackageName()) == PackageManager.PERMISSION_GRANTED) {

            NetworkInfo infos = mConnectivityManager.getActiveNetworkInfo();
            boolean isConnected = (infos != null && infos.isConnected());
            processor.start(request, isConnected, handler, this);

        } else {
        	throw new SecurityException("android.permission.ACCESS_NETWORK_STATE needed. Add it to te manifest to be able to use this function");
        }
    }

// [protected (aProject.name.toUpperFirst()+'Service')]
// You can add here your personal content
// DO NOT MODIFY THE GENERATED COMMENTS "Start of user code" and "End of user code"
// [/protected]


}

[/file]
[/template]

[template public importParsers(aProject : DataLibProject) post (trim()) ]
[for (webService : WebService | aProject.webservices)]
import [aProject._package/].parser.[webService.contentResponse.javaName.toUpperFirst()/]Parser;
[/for]
[/template]

[template public importWebConfigs(aProject : DataLibProject) post (trim()) ]
[for (webService : WebService | aProject.webservices)]
import [aProject._package/].config.[webService.contentResponse.javaName.toUpperFirst()/]WebConfig;
[/for]
[/template]

[template public declareWebServices (aProject : DataLibProject) post (trim()) ]
[for (webService : WebService | aProject.webservices)]
public static final int WEBSERVICE_[webService.contentResponse.javaName.toUpper()/] = [i/]; [comment][webService.contentResponse.parseId/][/comment]
[comment][for (businessObject : BusinessObject | webService.contentResponse.childs)]
[declareWebServices (businessObject, 1) /]
[/for][/comment]
[/for]
[/template]

[template public declareWebServices (aBusinessObject : BusinessObject, counter:Integer) post (trim()) ]
public static final int WEBSERVICE_[aBusinessObject.javaName.toUpper()/] = [counter/];
[for (businessObject : BusinessObject | aBusinessObject.childs)]
[declareWebServices (businessObject, counter+i) /]
[/for]
[/template]


[template public launchProcessorCases (aProject : DataLibProject) post (trim()) ]
[for (webService : WebService | aProject.webservices) ]
case WEBSERVICE_[webService.contentResponse.javaName.toUpper()/]:
    [webService.contentResponse.javaName.toUpperFirst()/]WebConfig.applyToRequest(request, [webService.contentResponse.javaName.toUpperFirst()/]WebConfig.getInstance());
	[if (webService.parseType = ParseType::IMAGE)]
    handler = new [webService.contentResponse.javaName.toUpperFirst()/]Parser(request.complexOptions);
    [else]
	handler = new [webService.contentResponse.javaName.toUpperFirst()/]Parser();
	[/if]
	break;
[/for]
[/template]