[comment encoding = UTF-8/]
[module generateGspnNetFile('http:///ptnet.ecore','http://es.unizar.disco/pnconstants/1.0')]

[template public generateGspnNetFile(petriNet : PetriNet) post (replaceAll('\n,', ',').trim())]
[file (petriNet.id.concat('.net'), false, 'Cp1252')]
[comment NETFILE ::= COMMENT NOOBJS MARKS PLACES RATES GROUPS TRANS LAYERS /]
[comm(petriNet)/]
[noObjs(petriNet)/]
[comment -- Marks section is not used. Commented to avoid extra blank lines 
marks(petriNet)
/]
[places(petriNet)/]
[groups(petriNet)/]
[trans(petriNet)/]
[comment -- Marks section is not used. Commented to avoid extra blank lines 
layers(petriNet)
/]
[/file]
[/template]

[template public comm(petriNet : PetriNet) post (trim())]
[comment COMMENT ::= "|0|\n" COMHEAD "|\n" /]
|0|
|
[/template]

[template public noObjs(petriNet : PetriNet) post (trim())]
[comment NOOBJS ::= "f" space NM space NP space NR space NT space NG space "0" space NL space "\n" /]
f 0 [countPlaces(petriNet)/] 0 [countTransitions(petriNet)/] [countPriorityGroups(petriNet)/] 0 0
[/template]

[template public marks(petriNet : PetriNet) post (trim())]
[comment MARKS ::= #(NM) { NAME space MVAL space coords LEVELS "\n" } /]
[/template]

[template public places(petriNet : PetriNet) post (trim())]
[comment PLACES ::= #(NP) {NAME space PMARK space coords space coords LEVELS COL "\n" } /]
[for (place : Place | allPlacesWithColoredTokens(petriNet))]
[placeLine(place,petriNet)/]
[/for]
[for (place : Place | restOfPlaces(petriNet))]
[placeLine(place,petriNet)/]
[/for]
[/template]

[template public placeLine(place : Place, petriNet : PetriNet) post (trim())] 
[registerPlace(place)/]
[comment NAME space PMARK space coords space coords LEVELS COL /]
[place.id/] [marking(place)/] [placeCoords(place)/] [labelCoords(place)/] [levels(place)/] [col(place,petriNet)/]
[/template]

[template public marking(place : Place) post (trim())] 
[if (place.initialMarking.text.oclIsUndefined()._not())]
[place.initialMarking.text/]
[elseif (hasColoredTokens(place))]
-[getPlaceMarkingName(place)/] 
[else]
0
[/if]
[/template]

[template public colorPlace(place : Place) post (trim())] 
[for (color : ToolInfo | allColors(place))  separator(',')][getColorName(color)/][/for]
[/template]

[template public equality(col : ToolInfo) post (trim())]
[if (getnumElementsColor(col) = 1)] 
=
[else]
<>
[/if]
[/template]

[template public colorTransLine(trans : Transition) post (trim())] 
[for (col : ToolInfo | allColors(trans)) separator(' and ')][if (isPrintable(col))](d([getIdColorSet(col)/]) [equality(col)/] [getColorName(col)/])[/if][/for]
[/template]

[template public colorTrans(trans : Transition) post (trim())] 
[if (hasColors(trans) and isPrintable(trans))]
['['/][colorTransLine(trans)/][']'/]
[/if]
[/template]

[template public colorArcOrdered(col : ToolInfo) post (trim())]
[if (getnumElementsColor(col) = 1)][getIdColorSet(col)/][else]![getIdColorSet(col)/][/if]
[/template]

[template public colorArcUnion(col : ToolInfo) post (trim())] 
[if (getnumElementsColor(col) = 1)][getIdColorSet(col)/][elseif (getnumElementsColor(col) > 1)]S [getColorName(col)/][else][getnumElementsColor(col).toString()/];[getColorName(col)/][/if]
[/template]

[template public colorArcLine(arc : Arc, petriNet : PetriNet) post (trim())] 
[for (col : ToolInfo | allColors(arc)) separator(',')][if (isArcOrdered(col, petriNet))][colorArcOrdered(col)/][elseif (isArcUnion(col, petriNet))][colorArcUnion(col)/][else]pe[/if][/for]
[/template]

[template public colorArc(arc : Arc, petriNet : PetriNet) post (trim())] 
0[if (hasColors(arc))] <[colorArcLine(arc, petriNet)/]>
[/if]
[/template]

[template public placeCoords(place : Place) post (trim())] 
[if (place.nodegraphics.position.oclIsUndefined()._not())]
[place.nodegraphics.position.x/] [place.nodegraphics.position.y/]
[else]
0.0 0.0
[/if]
[/template]

[template public labelCoords(node : Node) post (trim())]
[let offset : Real = 0.05]
[if (node.nodegraphics.position.oclIsUndefined()._not())]
[node.nodegraphics.position.x + offset/] [node.nodegraphics.position.y + offset/]
[else]
[offset/] [offset/]
[/if]
[/let] 
[/template]

[template public levels(node : Node) post (trim())]
[comment LEVELS ::= space "0" | space pint LEVELS /]
0
[/template]

[template public col(place : Place, petriNet : PetriNet) post (trim())]
[comment COL ::= empty | coords string /]
[for (col : ToolInfo | allColorSets(place,petriNet)) separator(',')][getColorSetName(col)/][/for]
[/template]

[template public groups(petriNet : PetriNet) post (trim())]
[comment GROUPS ::= #(NG){NAME space coords space PRI "\n" } /]
[comment previously it was written 'G1 0.0 0.0 1' /]
[for (trans : Transition | allTransitions(petriNet))]
[if priorityToAdd(trans)]
[addPriority(trans)/]G[getPriorityIdx(trans)/] 0.0 0.0 [getPriority(trans)/]
[/if]
[/for]

[/template]

[template public trans(petriNet : PetriNet) post (trim())]
[comment TRANS ::= #(NT){NAME space TRATE space TSERV space TKND space TINP space
                         TROT space coords space coords space coords LEVELS COL "\n"
                         LDCOEFFS TIARCS TOUT TOARCS TINH THARCS } /]
[for (trans : Transition | allTransitions(petriNet))]
[if isExponential(trans)]
[trans.id/] [tRate(trans)/] [tServ(trans)/] [tKind(trans)/] [tInp(trans)/] [tRot(trans)/] [transCoords(trans)/] [labelCoords(trans)/] [labelCoords(trans)/] [levels(trans)/] [colorTrans(trans)/]
[ldCoeffs(trans)/][if (trans.InArcs->isEmpty()._not()) ][tiArcs(trans, petriNet)/]
[/if][tOut(trans)/]
[if (trans.OutArcs->isEmpty()._not()) ][toArcs(trans, petriNet)/]
[/if][tInh(trans)/]
[if countInhibitorArcTransition(trans) > 0 ][thArcs(trans, petriNet)/][/if][/if][/for]
[for (trans : Transition | allTransitions(petriNet))]
[if isExponential(trans)._not()]
[trans.id/] [tRate(trans)/] [tServ(trans)/] [tKind(trans)/] [tInp(trans)/] [tRot(trans)/] [transCoords(trans)/] [labelCoords(trans)/] [labelCoords(trans)/] [levels(trans)/] [colorTrans(trans)/]
[ldCoeffs(trans)/][if (trans.InArcs->isEmpty()._not()) ][tiArcs(trans, petriNet)/]
[/if][tOut(trans)/]
[if (trans.OutArcs->isEmpty()._not()) ][toArcs(trans, petriNet)/]
[/if][tInh(trans)/]
[if countInhibitorArcTransition(trans) > 0 ][thArcs(trans, petriNet)/]
[else][/if][/if][/for]
[/template]

[template public tRate(trans : Transition) post (trim())]
[if (isExponential(trans))]
[getRate(trans)/]
[elseif (isImmediate(trans))]
[getProbability(trans)/]
[else]
1.0
[/if]
[/template]

[template public tServ(trans : Transition) post (trim())]
[if (isInfiniteServer(trans))]
0
[elseif (isOneServer(trans))]
1
[else]
1 [comment 1 (for immediate) by default TODO: Check if some times it is exponential with infinite sever but it is not marked /]
[/if]
[/template]

[template public tKind(trans : Transition) post (trim())]
[if (isExponential(trans))]
0
[elseif (isImmediate(trans))]
[comment Implementation for isImmediate is that everything that is not deterministic or exponential, it is immediate/]
[getPriorityIdx(trans)/]
[else]
[comment for deterministic transitions, 127/]
127
[/if]
[/template]

[template public tInp(trans : Transition) post (trim())]
[comment TINP ::= natural /* No. Input Arcs */ /]
[if trans.InArcs->size() > countInhibitorArcTransition(trans)][trans.InArcs->size()-countInhibitorArcTransition(trans)/][else]0[/if]
[/template]

[template public tRot(trans : Transition) post (trim())]
[comment TROT ::= "0" | "1" | "2" | "3" /* rotation coefficient */ /]
1
[/template]

[template public transCoords(trans : Transition) post (trim())] 
[if (trans.nodegraphics.position.oclIsUndefined()._not())]
[trans.nodegraphics.position.x/] [trans.nodegraphics.position.y/]
[else]
0.0 0.0
[/if]
[/template]

[template public ldCoeffs(trans : Transition) post (trim())]
[comment LDCOEFFS ::= (#(LDPOP) - 1){ preal "\n" } /]
[/template]

[template public multiplicity(arc : Arc) post (trim())] 
[if (arc.inscription.text.oclIsUndefined()._not())]
[arc.inscription.text/]
[else]
1
[/if]
[/template]

[template public tiArcs(trans : Transition, petriNet : PetriNet) post (trim())]
[comment TIARCS ::= #(TINP){ AMULT space APLACE space APOINTS LEVELS COL "\n" APLIST } /]
[for (arc : Arc | trans.InArcs)]
[if not isInhibitorArc(arc)]
[multiplicity(arc)/] [getPlaceIndex(arc.source.oclAsType(Place))/] 0 [colorArc(arc, petriNet)/]
[/if]
[/for]
[/template]

[template public tOut(trans : Transition) post (trim())]
[comment TOUT ::= natural "\n" /* No. Output Arcs */ /]
[trans.OutArcs->size()/]
[/template]

[template public toArcs(trans : Transition, petriNet : PetriNet) post (trim())]
[comment TOARCS ::= #(TOUT){AMULT space APLACE space APOINTS LEVELS COL "\n" APLIST } /]
[for (arc : Arc | trans.OutArcs)]
[multiplicity(arc)/] [getPlaceIndex(arc.target.oclAsType(Place))/] 0 [colorArc(arc, petriNet)/]
[/for]
[/template]

[template public tInh(trans : Transition) post (trim())]
[comment TINH ::= natural "\n" /* No. Inhibitor Arcs */ /]
[countInhibitorArcTransition(trans)/]
[/template]

[template public thArcs(trans : Transition, petriNet : PetriNet) post (trim())]
[comment THARCS ::= #(TINH){AMULT space APLACE space APOINTS LEVELS COL "\n" APLIST } /]
[for (arc : Arc | trans.InArcs)]
[if isInhibitorArc(arc)]
[multiplicity(arc)/] [getPlaceIndex(arc.source.oclAsType(Place))/] 0 [colorArc(arc, petriNet)/]
[/if]
[/for]
[/template]

[template public layers(petriNet : PetriNet) post (trim())]
[comment LAYERS ::= { NAME "\n" } /* list of Layer names one per layer used in objects */ /]
[/template]

[query public isPrintable(col : ToolInfo) : Boolean = 
	(getnumElementsColor(col) <= 1)
/]

[query public isPrintable(trans : Transition) : Boolean = 
	allColors(trans)->select(col: ToolInfo | isPrintable(col))->size() > 0
/]

[query public allPlaces(petriNet : PetriNet) : Collection(Place) = 
	petriNet.pages.objects->flatten()->selectByKind(Place)->sortedBy(id)
/]

[query public allPlacesWithColoredTokens(petriNet : PetriNet) : Collection(Place) = 
	allPlaces(petriNet)->select(p: Place | hasColoredTokens(p))->sortedBy(id)
/]

[query public restOfPlaces(petriNet : PetriNet) : Collection(Place) = 
	allPlaces(petriNet)->reject(p: Place | hasColoredTokens(p))->sortedBy(id)
/]

[query public hasColoredTokens(place : Place) : Boolean = 
	colorsWithTokens(place)->size() > 0 
/]
[query public colorsWithTokens(place : Place) : Collection(ToolInfo) = 
	allColors(place)->select(col: ToolInfo | getnumElementsColor(col) > 0 )->sortedBy(formattedXMLBuffer.toString())
/]
[query public allTransitions(petriNet : PetriNet) : Collection(Transition) =
	petriNet.pages.objects->flatten()->selectByKind(Transition)->sortedBy(id)
/]
[query public countPlaces(petriNet : PetriNet) : Integer = 
	allPlaces(petriNet)->size() 
/]
[query public countTransitions(petriNet : PetriNet) : Integer = 
	allTransitions(petriNet)->size()
/]
[query public countInhibitorArcTransition(trans : Transition) : Integer = 
	trans.InArcs->select(arc: Arc | isInhibitorArc(arc))->size() 
/]

[query public countPriorityGroups(petriNet : PetriNet) : Integer = 
	--Count the number of different priorities in the net
	invoke('es.unizar.disco.pnml.m2t.utils.PlaceRegistry','countGroups(fr.lip6.move.pnml.ptnet.PetriNet)', Sequence{petriNet})
/]

[query public priorityToAdd(trans: Transition) : Boolean =	
	-- Check whetehr the priority of the transition has not been treated as group yet. 
invoke('es.unizar.disco.pnml.m2t.utils.PlaceRegistry','priorityNotAdded(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public addPriority(trans : Transition) : OclVoid = 
	invoke('es.unizar.disco.pnml.m2t.utils.PlaceRegistry','addPriority(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public getPriorityIdx(trans : Transition) : Integer = 
	invoke('es.unizar.disco.pnml.m2t.utils.PlaceRegistry','getPriorityIndex(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public registerPlace(place : Place) : OclVoid = 
	-- Place index is based on the order they are processed, cannot be tracked via regular templates
	invoke('es.unizar.disco.pnml.m2t.utils.PlaceRegistry','registerPlace(org.eclipse.emf.ecore.EObject)', Sequence{place})
/]

[query public getPlaceIndex(place : Place) : Integer = 
 -- Place index is based on the order they are processed, cannot be tracked via regular templates
 invoke('es.unizar.disco.pnml.m2t.utils.PlaceRegistry','getPlaceIndex(org.eclipse.emf.ecore.EObject)', Sequence{place})
/]

[query public getArcMultiplicity (arc : Arc) : Integer = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','getArcMultiplicity(fr.lip6.move.pnml.ptnet.Arc)', Sequence{arc})
/]

[query public getRate(trans : Transition) : Real = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','getTransitionRate(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public getProbability(trans : Transition) : Real = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','getTransitionProbability(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public getPriority(trans : Transition) : Integer = 
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','getTransitionPriority(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public isExponential(trans : Transition) : Boolean =
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','isExponential(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public isImmediate(trans : Transition) : Boolean = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','isImmediate(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public isImmediatePriority(trans : Transition) : Boolean = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','isImmediatePriority(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public isOneServer(trans : Transition) : Boolean = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','isOneServer(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public isInfiniteServer(trans : Transition) : Boolean = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','isInfiniteServer(fr.lip6.move.pnml.ptnet.Transition)', Sequence{trans})
/]

[query public isNormalArc(arc : Arc) : Boolean = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','isNormalArc(fr.lip6.move.pnml.ptnet.Arc)', Sequence{arc})
/]

[query public isInhibitorArc(arc : Arc) : Boolean = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','isInhibitorArc(fr.lip6.move.pnml.ptnet.Arc)', Sequence{arc})
/]

[query public isColor(color: ToolInfo) : Boolean = 
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','isColor(fr.lip6.move.pnml.ptnet.ToolInfo)', Sequence{color})
/]

[query public isColorSet(colorset: ToolInfo) : Boolean = 
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','isColorSet(fr.lip6.move.pnml.ptnet.ToolInfo)', Sequence{colorset})
/]

[query public allColors(place : Place) : Collection(ToolInfo) = 
	place.toolspecifics->select(e: ToolInfo | isColor(e))->flatten()->asSet()->sortedBy(formattedXMLBuffer.toString())
/]

[query public allColors(trans : Transition) : Collection(ToolInfo) = 
	trans.toolspecifics->select(e: ToolInfo | isColor(e))->flatten()->asSet()->sortedBy(formattedXMLBuffer.toString())
/]

[query public allColors(arc : Arc) : Collection(ToolInfo) = 
	arc.toolspecifics->select(e: ToolInfo | isColor(e))->flatten()->asSet()->sortedBy(formattedXMLBuffer.toString())
/]

[query public allColors(petriNet : PetriNet) : Collection(ToolInfo) = 
	petriNet.toolspecifics->select(e: ToolInfo | isColor(e))->flatten()->asSet()->sortedBy(formattedXMLBuffer.toString())
/]

[query public allColorSets(place : Place, petriNet : PetriNet) : Collection(ToolInfo) = 
	allColorSetsAsColl(petriNet)->select(colorset: ToolInfo | hasColorSet(place, colorset))
/]

[query public allColorSetsAsColl(petriNet : PetriNet) : Collection(ToolInfo) = 
	petriNet.toolspecifics->select(e: ToolInfo | isColorSet(e))->flatten()->asSet()->sortedBy(formattedXMLBuffer.toString())
/]

[query public allColorSets(petriNet : PetriNet) : Set(ToolInfo) = 
	petriNet.toolspecifics->select(e: ToolInfo | isColorSet(e))->flatten()->asSet()->sortedBy(formattedXMLBuffer.toString())
/]

[query public hasColorSet(place : Place, colorset : ToolInfo) : Boolean = 
	allColors(place)->exists(color: ToolInfo | getColorSetNameColor(color) = getColorSetName(colorset) )
/]

[query public hasColors(place : Place) : Boolean = 
	allColors(place)->size() > 0
/]

[query public hasColors(trans : Transition) : Boolean = 
	allColors(trans)->size() > 0
/]

[query public hasColors(arc : Arc) : Boolean = 
	allColors(arc)->size() > 0
/]

[query public getColorSet(color : ToolInfo, petriNet : PetriNet) : ToolInfo = 
	allColorSets(petriNet)->select(e: ToolInfo | getColorSetName(e) = getColorSetNameColor(color))->asSequence()->first()
/]

[query public getColorSetType(colorset : ToolInfo) : Integer = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','getColorSetTypeIndex(fr.lip6.move.pnml.ptnet.ToolInfo)', Sequence{colorset})
/]

[query public getColorSetName(colorset : ToolInfo) : String = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','getColorSetName(fr.lip6.move.pnml.ptnet.ToolInfo)', Sequence{colorset})
/]

[query public getColorSetNameColor(color : ToolInfo) : String = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','getColorSetNameColor(fr.lip6.move.pnml.ptnet.ToolInfo)', Sequence{color})
/]

[query public getColorName(color : ToolInfo) : String = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','getColorName(fr.lip6.move.pnml.ptnet.ToolInfo)', Sequence{color})
/]

[query public getIdColorSet(color : ToolInfo) : String = 
	getColorSetNameColor(color).first(1)
/]

[query public getnumElementsColor(color : ToolInfo) : Integer = 
	-- ToolInfo-related queries are executed via the global utility methods
	invoke('es.unizar.disco.pnml.m2t.utils.PnmlToolInfoUtils','getnumElementsColor(fr.lip6.move.pnml.ptnet.ToolInfo)', Sequence{color})
/]

[query public getPlaceMarkingName(place : Place) : Integer = 
	10000 + getPlaceIndex(place)
/]

[query public isArcUnion(col : ToolInfo, petriNet : PetriNet) : Boolean = 
	getColorSetType(getColorSet(col, petriNet)) = 0
/]

[query public isArcOrdered(col : ToolInfo, petriNet : PetriNet) : Boolean = 
	getColorSetType(getColorSet(col, petriNet)) = 1
/]
