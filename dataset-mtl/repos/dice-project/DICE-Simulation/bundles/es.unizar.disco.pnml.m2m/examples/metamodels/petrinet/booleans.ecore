<?xml version="1.0" encoding="UTF-8"?>
<!-- Meta-model for PNML specification -->
<!-- Provided by www.pnml.org -->
<ecore:EPackage xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="booleans"
    nsURI="http:///symmetricnet.booleans.ecore" nsPrefix="booleans">
  <eClassifiers xsi:type="ecore:EClass" name="Equality" eSuperTypes="terms.ecore#//Operator">
    <eAnnotations source="http://www.pnml.org/models/OCL">
      <details key="inputOutputTypes" value="self.input.size() >= 2 and self.input->forAll{c, d | c.oclIsTypeOf(d) or d.oclIsTypeOf(c)} and self.output.oclIsKindOf(Bool)"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="inputOutputTypes"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Inequality" eSuperTypes="terms.ecore#//Operator">
    <eAnnotations source="http://www.pnml.org/models/OCL">
      <details key="inputOutputTypes" value="self.input.size() = 2 and self.input->forAll{c, d | c.oclIsTypeOf(d) or d.oclIsTypeOf(c)} and self.output.oclIsKindOf(Bool)"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="inputOutputTypes"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BooleanConstant" eSuperTypes="terms.ecore#//BuiltInConstant">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBooleanObject"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Or" eSuperTypes="#//BooleanOperator">
    <eAnnotations source="http://www.pnml.org/models/OCL">
      <details key="InputSize" value="self.input.size() = 2"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="InputSize"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BooleanOperator" abstract="true" eSuperTypes="terms.ecore#//BuiltInOperator">
    <eAnnotations source="http://www.pnml.org/models/OCL">
      <details key="inputOutputTypes" value="self.output.oclIsKindOf(Bool) and  self.input->forAll{c | c.oclIsKindOf(Bool)}"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="inputOutputTypes"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="And" eSuperTypes="#//BooleanOperator">
    <eAnnotations source="http://www.pnml.org/models/OCL">
      <details key="InputSize" value="self.input.size() = 2"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="InputSize"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Imply" eSuperTypes="#//BooleanOperator">
    <eAnnotations source="http://www.pnml.org/models/OCL">
      <details key="InputSize" value="self.input.size() = 2"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="InputSize"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Not" eSuperTypes="#//BooleanOperator">
    <eAnnotations source="http://www.pnml.org/models/OCL">
      <details key="InputSize" value="self.input.size() = 1"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="InputSize"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Bool" eSuperTypes="terms.ecore#//BuiltInSort">
    <eAnnotations source="http://www.pnml.org/models/methods/SORT">
      <details key="signature" value="boolean equalSorts(Sort sort)"/>
      <details key="body" value="boolean isEqual = false;&#xA;&#x9;&#x9;if (this.eClass().getName().equalsIgnoreCase(sort.eClass().getName())) {&#xA;&#x9;&#x9;    //by default they are the same sort, unless they have been named.&#xA;&#x9;&#x9;  &#x9;isEqual = true;&#xA;&#x9;&#x9;  &#x9;if (this.getContainerNamedSort() != null&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; sort.getContainerNamedSort() != null) {&#xA;&#x9;&#x9;&#x9;&#x9;// we test them if they have been explicitly named.&#xA;&#x9;&#x9;&#x9;&#x9;isEqual = this.getContainerNamedSort().getName()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;.equalsIgnoreCase(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sort.getContainerNamedSort().getName());&#xA;&#x9;&#x9;&#x9;}// otherwise, keep the default.&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return isEqual;"/>
      <details key="documentation" value="/**&#xD; * Returns true if this sort and argument sort are actually &#xD; * semantically the same sort, even in two different objects.&#xD; * Ex: two FiniteEnumerations or two Integers.&#xD; * @return true if so. &#xD; * @param sort the sort to which we compare this one. &#xD; * @throws NullPointerException if according to the model, some&#xD; * required reference attributes have not been set.&#xD; */"/>
    </eAnnotations>
  </eClassifiers>
</ecore:EPackage>
