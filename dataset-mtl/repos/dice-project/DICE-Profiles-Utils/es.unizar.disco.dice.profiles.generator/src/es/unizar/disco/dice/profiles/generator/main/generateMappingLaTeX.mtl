[comment encoding = UTF-8 /]
[module generateMappingLaTeX(
'http://www.eclipse.org/emf/2002/Ecore',
'http://com.masdes.dam/profiles/DAM/1.0'
)]

[import es::unizar::disco::dice::profiles::generator::main::queries /]

[template public generateEPackage(ePackage : EPackage)]
[comment @main/]
[if (not(isExcluded(ePackage)))]
[let ePackageName : String = getName(ePackage).tokenize('::')->last()]
[file ('Mapping/' + ePackage.nsPrefix + '.tex', false, 'UTF-8')]
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% This is an automatically generated TeX file, do not modify it manually.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

[let eDataTypes : OrderedSet(EDataType) = notExcluded(ePackage.eClassifiers)->filter(EDataType) ]
[if (eDataTypes->notEmpty())]
\begin{small}
% Total table width: 14.5cm
\begin{longtable} {|>{\raggedright\arraybackslash}p{4cm}|>{\raggedright\arraybackslash}p{4cm}|>{\raggedright\arraybackslash}p{6.5cm}|}
	\caption{[getName(ePackage)/] datatypes}
	\label{tab:types_[ePackageName/]}\\
	\hline%
	\textbf{Name} & \textbf{Kind} & \textbf{Values or Description} \\\hline
	[for (eDataType : EDataType | eDataTypes)]
	[if (eDataType.oclIsTypeOf(EEnum))]
	[let eEnum : EEnum  = eDataType.oclAsType(EEnum)]
		[getName(eEnum) /] & Enumeration & [for (eEnumLiteral : EEnumLiteral | eEnum.eLiterals) separator(', ') ][ eEnumLiteral.literal.trim().toValidLaTeX() /][/for]\\
	[/let]
	[else]
		[getName(eDataType) /] & DataType & [ eDataType.instanceTypeName.toValidLaTeX() /]\\
	[/if]
	[let theComment : String = buildEClassifierComment(eDataType) ]
	[if (theComment.size() > 0)]
	\cline{2-3}
	& \multicolumn{2}{p{10.5cm}|}{\textbf{Comments:} [ theComment /]}  \\
	[/if]
	[/let]\hline
	[/for] 
\end{longtable}
\end{small}
[/if]
[/let]

[let eClasses : OrderedSet(EClass) = notExcluded(ePackage.eClassifiers)->filter(EClass) ]
[if (eClasses->notEmpty())]
\begin{small}
% Total table width: 14.5cm
\begin{longtable} {|>{\raggedright\arraybackslash}p{4cm}|>{\raggedright\arraybackslash}p{4cm}|>{\raggedright\arraybackslash}p{6.5cm}|}
	\caption{[getName(ePackage)/] mapping}
	\label{tab:mapping_[ePackageName/]}\\
	\hline%
	\textbf{DICE [ePackageName/] Metamodel Element} & \textbf{DICE Stereotype} & \textbf{DICE Tags} \\\hline
	[for (eClass : EClass | eClasses) ]
	[generateMetamodelElement(eClass) /] & [generateDiceElement(eClass) /] & [generateDiceTags(eClass) /] \\
	[let theComment : String = buildEClassifierComment(eClass) ]
	[if (theComment.size() > 0)]
	\cline{2-3}
	& \multicolumn{2}{p{10.5cm}|}{\textbf{Comments:} [ theComment /]}  \\
	[/if]
	[/let]\hline
	[/for] 
\end{longtable}
\end{small}
[/if]
[/let]

[/file]
[/let]
[/if]
[/template]

[template public generateMetamodelElement(eClass : EClass)]
[let eSuperTypes : OrderedSet(EClass) = notExcluded(eClass.eAllSuperTypes) ]
\emph{[eClass.name /]}[comment 
/][if (eSuperTypes->notEmpty() or getExtendsName(eClass) <> null)] inherits from [/if][comment 
/][for (eSuperClass : EClass | eSuperTypes) separator(', ') ]
\emph{[ (if eSuperClass.ePackage = eClass.ePackage then getName(eSuperClass) else getFQN(eSuperClass) endif).toValidLaTeX().hyphenate().replaceAll('::', '::\\\\allowbreak{}') /]}[comment 
/][/for]
[if (getExtendsName(eClass) <> null)]
[if (eSuperTypes->notEmpty())], [/if]
\emph{[getExtendsName(eClass).toValidLaTeX().hyphenate().replaceAll('::', '::\\\\allowbreak{}') /]}
[/if]
[/let]
[/template]

[template public generateDiceElement(eClass : EClass)]
\emph{<<[ getProfileName(eClass).toValidLaTeX().hyphenate() /]>>}[comment 
/][if (eSuperTypes->notEmpty() or getExtendsProfileName(eClass) <> null)] inherits from [/if][comment 
/][for (eSuperClass : EClass | eSuperTypes) separator(', ') ]
\emph{[ (if eSuperClass.ePackage = eClass.ePackage then getProfileName(eSuperClass) else getProfileFQN(eSuperClass) endif).toValidLaTeX().hyphenate().replaceAll('::', '::\\\\allowbreak{}') /]}[comment 
/][/for]
[if (getExtendsProfileName(eClass) <> null)]
[if (eSuperTypes->notEmpty())], [/if]
\emph{[getExtendsProfileName(eClass).toValidLaTeX().hyphenate().replaceAll('::', '::\\\\allowbreak{}') /]}
[/if]
[/template]

[template public generateDiceTags(eClass : EClass)]
[let eAllReferences : OrderedSet(EStructuralFeature) = notExcluded(eClass.eAllReferences)]
[let eDirectReferences : OrderedSet(EReference) = notExcluded(eClass.eReferences) ]
[let eInheritedReferences : OrderedSet(EReference) = eAllReferences->removeAll(eDirectReferences) ]
[let eAllAttributes : OrderedSet(EAttribute) = notExcluded(eClass.eAllAttributes)]
[let eDirectAttributes : OrderedSet(EAttribute) = notExcluded(eClass.eAttributes) ]
[let eInheritedAttributes : OrderedSet(EAttribute) = eAllAttributes->removeAll(eDirectAttributes) ]
[if (eAllReferences->notEmpty() or eAllAttributes->notEmpty())]
\begin{minipage}['['/]t[']'/]{\linewidth}
\raggedright
\begin{enumerate}['['/]leftmargin=0.5cm,topsep=0ex,itemsep=0ex,partopsep=0ex,parsep=0ex[']'/]
[if (eInheritedAttributes->notEmpty())]
{
\color{gray}
\item Inherited tags (from properties):
\begin{itemize}['['/]leftmargin=0cm,topsep=0ex,itemsep=0ex,partopsep=0ex,parsep=0ex[']'/]
[for (eAttribute : EAttribute | eInheritedAttributes)]
\item [eAttribute.name.toValidLaTeX() + ': ' + eAttribute.eType.toUmlTypeName() /]
[/for]
\end{itemize}
}
[/if]
[if (eDirectAttributes->notEmpty())]
\item New tags (from properties):
\begin{itemize}['['/]leftmargin=0cm,topsep=0ex,itemsep=0ex,partopsep=0ex,parsep=0ex[']'/]
[for (eAttribute : EAttribute | eDirectAttributes)]
\item [eAttribute.name.toValidLaTeX() + ': ' + eAttribute.eType.toUmlTypeName() /]
[/for]
\end{itemize}
[/if]
[if (eInheritedReferences->notEmpty())]
{
\color{gray}
\item Inherited tags (from association ends):
\begin{itemize}['['/]leftmargin=0cm,topsep=0ex,itemsep=0ex,partopsep=0ex,parsep=0ex[']'/]
[for (eReference : EReference | eInheritedReferences)]
\item [eReference.name.toValidLaTeX() + ': ' + eReference.eType.toUmlTypeName() /]
[/for]
\end{itemize}
}
[/if]
[if (eDirectReferences->notEmpty())]
\item New tags (from association ends):
\begin{itemize}['['/]leftmargin=0cm,topsep=0ex,itemsep=0ex,partopsep=0ex,parsep=0ex[']'/]
[for (eReference : EReference | eDirectReferences)]
\item [eReference.name.toValidLaTeX() + ': ' + eReference.eType.toUmlTypeName() /]
[/for]
\end{itemize}
[/if]
\end{enumerate}
\end{minipage}
\vspace{1pt}
[/if]
[/let]
[/let]
[/let]
[/let]
[/let]
[/let]
[/template]
