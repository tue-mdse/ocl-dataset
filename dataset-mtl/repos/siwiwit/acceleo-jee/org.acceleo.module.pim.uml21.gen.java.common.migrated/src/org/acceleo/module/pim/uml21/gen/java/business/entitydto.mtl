[module entitydto('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::common::common/]
[import org::acceleo::module::pim::uml21::gen::java::common::requests/]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics/]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes/]
[import org::acceleo::module::pim::uml21::gen::java::business::entity/]
[import org::acceleo::module::pim::uml21::gen::java::common::structure/]
[import org::acceleo::module::pim::uml21::services::uml2services /]
[import org::acceleo::module::pim::uml21::services::stringservice /]
[template public genEntityDto(class:Class)]
package [class.dtoPackage()/];
// [protected ('for imports')]
// for imports
import java.io.Serializable;
	[let props:Set(Property)  = class.classAttributes()->select(upper = -1 or upper > 1)]
		[if (props->size() > 0)]
			[if (props->select(isOrdered)->size() > 0)]
import java.util.List;
import java.util.ArrayList;
			[/if]
			[if (props->select(isUnique and not isOrdered)->size() > 0)]
import java.util.Set;
import java.util.HashSet;
			[/if]
			[if (props->select(not isUnique and not isOrdered)->size() > 0)]
import java.util.Collection;
			[/if]
		[/if]
	[/let]

[if (class.attribute.type->select(getProperty('java.typeconversion.' + name) = 'Date')->size() > 0)]
import java.util.Date;
[/if]

[for (prop:Property|class.getOppositeAttributes())]
	[if (class.entityPackage() <> prop.type.entityPackage())]
import [prop.type.entityPackage()/].[prop.type.name/];
	[/if]
[/for]
[if (class.superClass->asSequence()->notEmpty())]
import [class.entityPackage()/].[class.superClass.name/];
[/if]

// [/protected] for imports

/**
[if (class.ownedComment._body->size() > 0)]
 * [class.ownedComment._body.replaceAll('\n', '\n * ')/]
[else]
 * Warning: no comment in the model for interface [class.name/].
[/if]
 */
public class [class.dtoName()/][class.extensions()/] implements Serializable[if (class.interfaceRealization->notEmpty())], [class.implementedInterfaces()/][/if] {

    /**
     * serialVersionUID is used for serialization.
     */
    private static final long serialVersionUID = 1L;

[if (class.hasPrimaryKey())]
    /**
     * Explicit primary key.
     */
    private long [class.getPKAttribute().name/];

[else]
    /**
     * Automatic primary key.
     */
    private [class.defaultPKType()/] id;

[/if]
[for (prop:Property|class.classAttributes()->select(not (isPK())))]
    /**
     * Field [prop.name/].
     */
    protected [prop.convertToJavaDtoType()/] [prop.name/];

[/for]
    /**
     * Default constructor.
     */
    public [class.dtoName()/]() {
        super();
[for (prop:Property|class.classAttributes())]
	[if (prop.upper <> 1)]
		[if (prop.isOrdered)]
        [prop.name/] = new ArrayList<[prop.type.convertToJavaDtoType()/]>();
		[else]
        [prop.name/] = new HashSet<[prop.type.convertToJavaDtoType()/]>();
		[/if]
	[/if]
[/for]
    }

[if (class.hasPrimaryKey())]
	[for (prop:Property|class.getPKAttribute())]
    /**
     * Returns the primary key.
     * @return Returns [prop.name/].
     */
    public long get[prop.name.toUpperFirst()/]() {
        return this.[prop.name/];
    }

    /**
     * Sets the primary key.
     * @param [prop.paramName()/] Value to set.
     */
    public void set[prop.name.toUpperFirst()/](final long [prop.paramName()/]) {
        this.[name/] = [prop.paramName()/];
    }
	[/for]
[else]
    /**
     * Returns the identifier.
     * @return Returns id.
     */
    public [class.defaultPKType()/] getId() {
        return id;
    }

    /**
     * Sets a value to parameter Id.
     * @param someId Value of the identifier.
     */
    public void setId(final [class.defaultPKType()/] someId) {
        id = someId;
    }
[/if]
    
[if (class.classAttributes()->select(not (isPK()))->notEmpty())]

    /**
     * Constructor with all parameters initialized.
	[for (prop:Property|class.classAttributes()->select(not (isPK())))]
     * @param [prop.paramName()/]
		[if (prop.ownedComment._body->notEmpty())]
     *            [prop.ownedComment._body.replaceAll('\n', '\n     *            ')/]
		[else]
     *            Warning, no comment in the model.
		[/if]
	[/for]
     */
    public [class.dtoName()/]([class.classAttributes()->select(not (isPK())).asParameter()->sep(', ')/]) {
	[for (prop:Property|class.classAttributes()->select(not (isPK())))]
        [prop.name/] = [prop.paramName()/];
	[/for]
    }    
[/if]

[for (prop:Property|class.classAttributes()->select(not (isPK())))]
    /**
     * Returns [prop.name/].
	[if (prop.ownedComment._body->notEmpty())]
     * @return [ownedComment._body.replaceAll('\n', '\n     * ')/]
	[else]
     * @return Warning, no comment in the model.
	[/if]
     */
    [prop.getterDtoSignature()/] {
	[if (prop.isDerived)]
		// [protected ('attribute')]
        // of derived [prop.name/] attribute 
        // TODO Logic to calculate [prop.name/]
        return [prop.name/];
        // 
		//[/protected]
	[else]
        return [prop.name/];
	[/if]
    }

	[if (not (prop.isReadOnly) and not (prop.isDerived))]
    /**
     * Sets a value to parameter [name/].
     * @param [prop.paramName()/]
		[if (prop.ownedComment._body->notEmpty())]
     *            [prop.ownedComment._body.replaceAll('\n', '\n     *            ')/]
		[else]
     *            Warning, no comment in the model.
		[/if]
     */
    [prop.setterDtoSignature()/] {
        [prop.name/] = [prop.paramName()/];
    }
	[/if]

	[if (prop.upper = -1 or prop.upper > 1)]
    /**
     * Adds a [prop.name/] to the [prop.name/] Collection.
		[if (prop.opposite <> null)]
     * Bidirectionnal association : add the current [class.name/] instance to
     * the given [prop.name/] parameter.
		[/if]
     * @param [prop.name/]Elt Element to add
     */
    public void add[prop.name.toUpperFirst()/](final [prop.type.convertToJavaDtoType()/] [prop.name/]Elt) {
        [prop.name/].add([prop.name/]Elt);
		[if (prop.opposite <> null)]
			[if (prop.opposite.upper = 1)]
        [prop.name/]Elt.set[prop.opposite.name.toUpperFirst()/](this);
			[else]
        [prop.name/]Elt.get[opposite.name.toUpperFirst()/]().add(this);
			[/if]
		[/if]
    }

    /**
     * Removes a [prop.name/] from the [prop.name/] Collection.
		[if (prop.opposite <> null)]
     * Bidirectionnal association : remove the current [class.name/] instance
     * from the given [name/] parameter.
		[/if]
     * @param [prop.name/]Elt Element to remove
     */
    public void remove[prop.name.toUpperFirst()/](final [prop.type.convertToJavaType()/] [prop.name/]Elt) {
        [prop.name/].remove([prop.name/]Elt);
		[if (prop.opposite <> null)]
			[if (prop.opposite.upper = 1)]
        [prop.name/]Elt.set[prop.opposite.name.toUpperFirst()/](null);
			[else]
        [prop.name/]Elt.get[prop.opposite.name.toUpperFirst()/]().remove(this);
			[/if]
		[/if]
    }
	[/if]
[/for]

[if (class.interfaceRealization->notEmpty())]
	[for (interface:Interface|class.interfaceRealization.target->filter(Interface))]
    /* Implementation of interface [name/]: start */
		[for (prop:Property|interface.itfAttributes()->select(not (isPK())))]
			[if (interface.attribute->select(name = prop.name)->notEmpty())]
    /**
     * Implementation of [interface.name/]'s [prop.name/] getter.
				[if (prop.ownedComment._body->notEmpty())]
     * @return [prop.ownedComment._body.replaceAll('\n', '\n     * ')/]
				[else]
     * @return Warning, no comment in the model.
				[/if]
     * @see [interface.name/].[prop.getterName()/]
     */
    [prop.getterSignature()/] {
        // [protected ('getter')]  
		//for getter of [prop.name/] ['['/]DO NOT REMOVE[']'/]      
		// TODO Implement me !
        throw new UnsupportedOperationException("Method not yet implemented");
        // [/protected] for getter of [prop.name/] ['['/]DO NOT REMOVE[']'/]
    }

    /**
     * Implementation of [interface.name/]'s [prop.name/] setter.
     * @param [prop.paramName()/]
				[if (prop.ownedComment._body->notEmpty())]
     *            [prop.ownedComment._body.replaceAll('\n', '\n     *            ')/]
				[else]
     *            Warning, no comment in the model.
				[/if]
     * @see [interface.name/].[prop.setterName()/]
     */
    [prop.setterSignature()/] {
        // [protected ('setter')] 
		//for setter of [prop.name/] ['['/]DO NOT REMOVE[']'/]
        // TODO Implement me !
        throw new UnsupportedOperationException("Method not yet implemented");
        // [/protected] for setter of [prop.name/] ['['/]DO NOT REMOVE[']'/]
    }

			[/if]

		[/for]
    /* Implementation of interface [interface.name/]: end */

	[/for]
[/if]
    /**
     * Equality test based on attributes values.
     * @param other Value to compare
     * @return Returns true if and only if given object is an instance of
[if (class.hasPrimaryKey() or class.defaultPKType().isPrimitiveType())]
     * [class.name/] and the given object has the same PK as this.
[else]
     * [class.name/] and the given object has the same PK as this
     * if the PK is not null or their fields are equal.
[/if]
     */
    @Override
    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof [name/])) {
            return false;
        }
        final [name/] castedOther = ([name/]) other;
[if (class.hasPrimaryKey())]
[for (class.getPKAttribute())]
        return [class.name/] == castedOther.get[name.toUpperFirst()/]();
[/for]
[elseif (class.defaultPKType().isPrimitiveType())]
        return id == castedOther.getId();
[else]
        if (id != null && castedOther.getId() != null) {
            return id.equals(castedOther.getId());
        }
[for (prop:Property|class.classAttributes()->select(not (isPK())))]
	[if (prop.type.isJavaPrimitiveType())]
        if ([prop.name/] != castedOther.get[prop.name.toUpperFirst()/]()) {
            return false;
        }
	[else]
        if (([prop.name/] == null && castedOther.get[prop.name.toUpperFirst()/]() != null) 
             || ([prop.name/] != null && ![prop.name/].equals(
                castedOther.get[prop.name.toUpperFirst()/]()))) {
           return false;
        }
	[/if]
[/for]
        return true;
[/if]
    }

    /**
     * HashTable code based on attributes hashcodes.
     * @return Returns hash value
     */
    @Override
    public int hashCode() {
        int result = 0;
[if (class.hasPrimaryKey())]
        result = new Long([class.getPKAttribute().name/]).hashCode();
[elseif (class.defaultPKType().isPrimitiveType())]
        result = new [class.defaultPKTypeWrapper()/](id).hashCode();
[else]
        if (id != null) {
            result = id.hashCode();
        } else {[comment  This else is required to be synchro with the equals() method, otherwise we could generate different hashCodes for equal objects ! /]
	[for (prop:Property|class.ownedAttribute->select(not (isPK())))]
		[if (prop.type.name = 'Boolean')]
            if ([prop.name/]) {
                result++;
            }
		[elseif (prop.type.name = 'Integer')]
            result = 29 * result + [prop.name/];
		[elseif (prop.type.name = 'Float')]
            if ([prop.name/] != null) {
                result = (int) (29 * result + prop.[name/].hashCode());
            }
		[else]
            if ([prop.name/] != null) {
                result = 29 * result + [prop.name/].hashCode();
            }
		[/if]
	[/for]
        }
[/if]
        return result;
    }

[comment  N.B. It is mandatory to have identical lines for start and end user code !!! /]    
	// [protected ('private Method')] 
	// TODO Remove this line and add your private methods here
    // [/protected] for private methods

}

[/template]


[template public extensions(class:Class)]
[if (superClass->notEmpty())] extends [superClass.name/][/if]
[/template]


[template public asParameter(structuralFeature:StructuralFeature)]
[structuralFeature.convertToJavaDtoType()/] [structuralFeature.name/]
[/template]


[template public implementedInterfaces(class:Class)]
[class.interfaceRealization.target->filter(Interface).name->sep(', ')/]
[/template]



