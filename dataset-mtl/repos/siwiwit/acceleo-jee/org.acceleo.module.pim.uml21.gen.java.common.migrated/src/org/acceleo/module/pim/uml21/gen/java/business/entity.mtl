[module entity('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::common::common/]
[import org::acceleo::module::pim::uml21::gen::java::common::requests/]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics/]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes/]
[import org::acceleo::module::pim::uml21::gen::java::common::structure/]
[import org::acceleo::module::pim::uml21::services::uml2services /]
[import org::acceleo::module::pim::uml21::services::stringservice /]
[comment][template private fullFilePath(class:Class) ? (class.isEntity()) post (trim())]
[comment][if (class.isEntity())][/comment]
[class.pathToMainJava()/]/[class.entityPackage().toPath()/]/[class.name/].java
[comment][/if][/comment]

[/template][/comment]


[template public generateEntity(class:Class) ? (class.isEntity())]
[comment This template is called by the main module file /]
[file (class.fullFilePath(class.pathToMainJava(), class.entityPackage().toPath(), class.name.concat('.java')), false))]
package [class.entityPackage()/];
// [protected ('imports')] 

import java.io.Serializable;

[let manyProps : Set(Property) = class.classAttributes()->select(p:Property|p.upper = -1 or p.upper > 1)]
	[if (manyProps->notEmpty())]
		[if (manyProps->select(isOrdered)->notEmpty())]
import java.util.List;
import java.util.ArrayList;
		[/if]
		[if (manyProps->select(isUnique and not isOrdered)->notEmpty())]
import java.util.Set;
import java.util.HashSet;
		[/if]
		[if (manyProps->select(not isUnique and not isOrdered)->notEmpty())]
import java.util.Collection;
		[/if]
	[/if]
[/let]

[if (attribute.type->select(getProperty('java.typeconversion.' + name) = 'Date')->notEmpty())]
import java.util.Date;
[/if]

[for (prop:Property | class.getOppositeAttributes())]
	[if (class.entityPackage() <> prop.type.entityPackage())]
import [prop.type.entityPackage()/].[prop.type.name/];
	[/if]
[/for]
[if (not (class.superClass->isEmpty()))]
import [class.entityPackage()/].[class.superClass.name/];
[/if]

// [/protected]

/**
[if (class.ownedComment._body->size() > 0)]
 * [class.ownedComment._body.replaceAll('\n', '\n * ')/]
[else]
 * Warning: no comment in the model for interface [name/].
[/if]
 */
public class [class.name/][class.extensions()/] implements Serializable[if (class.interfaceRealization->size() > 0)], [class.implementedInterfaces()/][/if] {

    /**
     * serialVersionUID is used for serialization.
     */
    private static final long serialVersionUID = 1L;
[if (not (class.hasPrimaryKey()))]
    /**
     * Constant representing the name of the automatic primary key field.
     */
    public static final String PROP_ID = "id";

[/if]

[for (prop:Property|class.classAttributes()->union(class.getOtherPKProperties()->asSequence()))]
    /**
     * Constant representing the name of the field [prop.name/].
     */
    public static final String PROP_[prop.name.toUpper()/] = "[prop.name/]";

[/for]
[if (class.hasPrimaryKey())]
    /**
     * Explicit primary key.
     */
    private long [class.getPKAttribute()->asSequence()->first().oclAsType(Property).name/];

[elseif (not (class.isSupperAsEntity()))]
    /**
     * Automatic primary key.
     */
    protected [class.defaultPKType()/] id;

[/if]
[for (prop:Property|class.classAttributes()->filter(Property)->select(not (isPK())))]
    /**
     * Field [prop.name/].
     */
    protected [prop.convertToJavaType()/] [prop.name/];

[/for]
    /**
     * Default constructor.
     */
    public [class.name/]() {
        super();
[for (prop:Property|class.classAttributes())]
	[if (prop.upper <> 1)]
		[if (prop.isOrdered)]
		        [prop.name/] = new ArrayList<[prop.type.name/]>();
		[else]
		        [prop.name/] = new HashSet<[prop.type.name/]>();
		[/if]
	[/if]
[/for]
    }

[if (class.hasPrimaryKey())]
	[for (prop:Property|class.getPKAttribute())]
    /**
     * Returns the primary key.
     * @return Returns [prop.name/].
     */
    public long get[prop.name.toUpperFirst()/]() {
        return [prop.name/];
    }

    /**
     * Sets the primary key.
     * @param [prop.paramName()/] Value to set.
     */
    public void set[prop.name.toUpperFirst()/](final long [prop.paramName()/]) {
        [prop.name/] = [prop.paramName()/];
    }
	[/for]
[elseif (not (class.isSupperAsEntity()))]
    /**
     * Returns the identifier.
     * @return Returns id.
     */
    public [class.defaultPKType()/] getId() {
        return id;
    }

    /**
     * Sets a value to parameter Id.
     * @param someId Value of the identifier.
     */
    public void setId(final [class.defaultPKType()/] someId) {
        id = someId;
    }
[/if]
[let props : Set(Property) = class.classAttributes()->filter(Property)->select(not (isPK()))]
	[if (props->size() > 0)]

    /**
     * Constructor with all parameters initialized.
		[for (prop:Property|props)]
     * @param [prop.paramName()/]
			[if (prop.ownedComment._body->size() > 0)]
     *            [prop.ownedComment._body.replaceAll('n', '\n     *            ')/]
			[else]
     *            Warning, no comment in the model.
			[/if]
		[/for]
     */
    public [class.name/]([class.classAttributes()->filter(Property)->select(not (isPK())).asParameter()->sep(', ')/]) {
		[for (prop:Property|props)]
        this.[prop.name/] = [prop.paramName()/];
		[/for]
    }
	[/if]
	[for (prop:Property|props)]
    /**
     * Returns [name/].
		[if (prop.ownedComment._body->size() > 0)]
     * @return [prop.ownedComment._body.replaceAll('\n', '\n     * ')/]
		[else]
     * @return Warning, no comment in the model.
		[/if]
     */
    [prop.getterSignature()/] {
		[if (prop.isDerived)]
        // [protected ('getter')] 
		// of derived [prop.name/] attribute
		// TODO Logic to calculate [prop.name/]
        return this.[prop.name/];
        // [/protected]
		[else]
        return [prop.name/];
		[/if]
    }

		[if (not (prop.isReadOnly) and not (prop.isDerived))]
    /**
     * Sets a value to parameter [prop.name/].
     * @param [prop.paramName()/]
			[if (prop.ownedComment._body->size() > 0)]
     *            [prop.ownedComment._body.replaceAll('\n', '\n     *            ')/]
			[else]
     *            Warning, no comment in the model.
			[/if]
     */
    [prop.setterSignature()/] {
        this.[prop.name/] = [prop.paramName()/];
    }
		[/if]

		[if (upper = -1 or upper > 1)]
    /**
     * Adds a [name/] to the [name/] Collection.
			[if (opposite <> null)]
     * Birectionnal association : add the current [class.name/] instance to
     * the given [name/] parameter.
			[/if]
     * @param [name/]Elt Element to add
     */
    public void add[prop.name.toUpperFirst()/](final [prop.type.convertToJavaType()/] [prop.name/]Elt) {
        [prop.name/].add([prop.name/]Elt);
			[if (prop.opposite <> null)]
				[if (prop.opposite.upper = 1)]
        [prop.name/]Elt.set[prop.opposite.name.toUpperFirst()/](this);
				[else]
        [prop.name/]Elt.get[prop.opposite.name.toUpperFirst()/]().add(this);
				[/if]
			[/if]
    }

    /**
     * Removes a [prop.name/] from the [prop.name/] Collection.
			[if (prop.opposite <> null)]
     * Birectionnal association : remove the current [class.name/] instance
     * from the given [prop.name/] parameter.
			[/if]
     * @param [prop.name/]Elt Element to remove
     */
    public void remove[prop.name.toUpperFirst()/](final [prop.type.convertToJavaType()/] [prop.name/]Elt) {
        [prop.name/].remove([prop.name/]Elt);
			[if (prop.opposite <> null)]
				[if (prop.opposite.upper = 1)]
        [prop.name/]Elt.set[prop.opposite.name.toUpperFirst()/](null);
				[else]
        [prop.name/]Elt.get[prop.opposite.name.toUpperFirst()/]().remove(this);
				[/if]
			[/if]
    }
		[/if]
	[/for]
[/let]



[if (class.interfaceRealization->notEmpty())]
	[for (interface:Interface|class.interfaceRealization.target->filter(Interface))]
    /* Implementation of interface [class.name/]: start */
		[for (prop:Property|interface.itfAttributes()->filter(Property)->select(not (isPK())))]
			[if (class.attribute->select(name = prop.name)->notEmpty())]

    /**
     * Implementation of [interface.name/]'s [prop.name/] getter.
				[if (prop.ownedComment._body->size() > 0)]
     * @return [prop.ownedComment._body.replaceAll('\n', '\n     * ')/]
				[else]
     * @return Warning, no comment in the model.
				[/if]
     * @see [interface.name/].[prop.getterName()/]
     */
    [prop.getterSignature()/] {
        // [protected ('protected')] for getter of <%name%>  ['['/]DO NOT REMOVE[']'/]
        // TODO Implement me !
        throw new UnsupportedOperationException("Method not yet implemented");
        // [/protected] for getter of [prop.name/] ['['/]DO NOT REMOVE[']'/]
    }

    /**
     * Implementation of [interface.name/]'s [prop.name/] setter.
     * @param [prop.paramName()/]
				[if (prop.ownedComment._body->size() > 0)]
     *            [prop.ownedComment._body.replaceAll('\n', '\n     *            ')/]
				[else]
     *            Warning, no comment in the model.
				[/if]
     * @see [interface.name/].[prop.setterName()/]
     */
    [prop.setterSignature()/] {
        // [protected ('setter')] 
		// for getter of <%name%>  ['['/]DO NOT REMOVE[']'/]
        // TODO Implement me !
        throw new UnsupportedOperationException("Method not yet implemented");
        // [/protected] for setter of [prop.name/] ['['/]DO NOT REMOVE[']'/]
    }

			[/if]

		[/for]
    /* Implementation of interface [name/]: end */

	[/for]
[/if]
[comment  Recopie vers et depuis les value objects /]

[if (class.dtoPerEntity())]
    /**
     * Provides a Data value object corresponding to this entity.
     * @return Returns a new instance of [class.dtoName()/] which contains
     * the same values as the current entity.
     */
    public [class.dtoName()/] get[class.dtoSuffix()/]() {
        [class.dtoName()/] result = new [class.dtoName()/]();
        copyTo[class.dtoSuffix()/](result);
        return result;
    }

    /**
     * Copies the current entity to the given value object. Associations are
     * NOT copied.
     * @param aValueObject The value object to get the values from.
     */
    public void copyTo[class.dtoSuffix()/](final [class.dtoName()/] aValueObject) {
	[if (class.superClass->size()>0)]
        super.copyTo[class.dtoSuffix()/](aValueObject);
	[/if]
	[for (class.ownedAttribute->select(not (type.oclAsType(Class).isEntity()) and not (isDerived)))]
        aValueObject.set[name.toUpperFirst()/](get[name.toUpperFirst()/]());
	[/for]
    }

    /**
     * Updates the values of this entity from those of the given value object.
     * Associations are NOT updated.
     * <strong>N.B.</strong> The PK value is not updated.
     * @param aValueObject The value object to copy the values to.
     */
    public void updateFrom[class.dtoSuffix()/](final [class.dtoName()/] aValueObject) {
	[if (class.superClass->notEmpty())]
        super.updateFrom[class.dtoSuffix()/](aValueObject);
	[/if]
	==[class.ownedAttribute->select((not type.oclAsType(Class).isEntity()))/]==
	==[class.ownedAttribute->select((not type.oclAsType(Class).isEntity()) and (not isPK()) and (not isDerived))/]==
	==[class.ownedAttribute->select((not type.oclAsType(Class).isEntity()) and (not isPK()) and (not isDerived))/]==
	==[class.ownedAttribute->select((not type.oclAsType(Class).isEntity()) and (not isPK()) and (not isDerived))/]==
	[for (prop:Property|class.ownedAttribute->select((not type.oclAsType(Class).isEntity()) and (not isPK()) and (not isDerived)))]
        set[prop.name.toUpperFirst()/](aValueObject.get[prop.name.toUpperFirst()/]());
	[/for]
    }

[/if]
[for (oper:Operation|class.ownedOperation->select(not (hasStereotype(getProperty('find')))))]
[oper.generateJavadoc()/]
    [oper.signature()/] {
        // [protected ('finder')]
        // TODO implement [oper.name/]
        throw new UnsupportedOperationException("Method not yet implemented");
        // [/protected]
    }

[/for]
    /**
     * Equality test based on attributes values.
     * @param other Value to compare
     * @return Returns true if and only if given object is an instance of
[if (class.hasPrimaryKey() or class.defaultPKType().isPrimitiveType())]
     * [class.name/] and the given object has the same PK as this.
[else]
     * [class.name/] and the given object has the same PK as this
     * if the PK is not null or their fields are equal.
[/if]
     */
    @Override
    public boolean equals(final Object other) {
        // [protected ('equals')] 
		// for equals         
		if (this == other) {
            return true;
        }
        if (!(other instanceof [class.name/])) {
            return false;
        }
        final [class.name/] castedOther = ([class.name/]) other;
[if (class.hasPrimaryKey())]
	[for (prop:Property|class.getPKAttribute())]
        return [prop.name/] == castedOther.get[prop.name.toUpperFirst()/]();
	[/for]
[elseif (class.defaultPKType().isPrimitiveType())]
        return id == castedOther.getId();
[else]
        if (id != null && castedOther.getId() != null) {
            return id.equals(castedOther.getId());
        }
	[for (prop:Property|class.classAttributes()->filter(Property)->select(not (isPK())))]
		[if (prop.type.isJavaPrimitiveType())]
        if ([prop.name/] != castedOther.get[prop.name.toUpperFirst()/]()) {
            return false;
        }
		[else]
        if (([prop.name/] == null && castedOther.get[prop.name.toUpperFirst()/]() != null) 
             || ([prop.name/] != null && ![prop.name/].equals(
                castedOther.get[prop.name.toUpperFirst()/]()))) {
           return false;
        }
		[/if]
	[/for]
[/if]
[if (class.isSupperAsEntity())]
    	return super.equals(other);
[else]
        return true;
[/if]
        // [/protected] for equals
    }

    /**
     * HashTable code based on attributes hashcodes.
     * @return Returns hash value
     */
    @Override
    public int hashCode() {
        // [protected ('hashCode')] for hashCode
int result = 0;
[if (class.hasPrimaryKey())]
        result = new Long([class.getPKAttribute()->asSequence()->first().oclAsType(Property).name/]).hashCode();
[elseif (class.defaultPKType().isPrimitiveType())]
        result = new [class.defaultPKTypeWrapper()/](id).hashCode();
[else]
        if (id != null) {
            result = id.hashCode();
        } else {[comment  This else is required to be synchro with the equals() method, otherwise we could generate different hashCodes for equal objects ! /]
	[for (prop:Property|class.ownedAttribute->select(not (isPK())))]
		[if (prop.type.name = 'Boolean')]
            if ([prop.name/]) {
                result++;
            }
		[elseif (prop.type.name = 'Integer')]
            result = 29 * result + [prop.name/];
		[elseif (prop.type.name = 'Float')]
            if ([prop.name/] != null) {
                result = (int) (29 * result + [prop.name/].hashCode());
            }
		[else]
            if ([prop.name/] != null) {
                result = 29 * result + [prop.name/].hashCode();
            }
		[/if]
	[/for]
        }
[/if]
[if (class.isSupperAsEntity())]
    	return 29 * result + super.hashCode();
[else]
        return result;
[/if]
        // [/protected] for hashCode
    }

[comment  N.B. It is mandatory to have identical lines for start and end user code !!! /]    
	// [protected ('private methods')] 
	// for private methods
	// TODO Remove this line and add your private methods here
    // [/protected] for private methods

}

[/file]
[class.getAssociations()/]
[/template]


[query public isSupperAsEntity(class : Class) : Boolean = 
class.superClass->notEmpty() and class.superClass->asSequence()->first().hasStereotype('Entity')/]


[template public extensions(class:Class)]
[if (not (class.superClass->isEmpty()))] extends [class.superClass.name/][/if]
[/template]


[template public asParameter(property:Property) ]
[property.convertToJavaType()/] [property.paramName()/]
[/template]


[template public implementedInterfaces(class:Class)]
[class.interfaceRealization.target->filter(Interface).name->sep(', ')/]
[/template]



[query public getOtherPKProperties(class : Class) : Set(Property) =
if(class.interfaceRealization->notEmpty()and 
	class.interfaceRealization.target->notEmpty() and
	class.interfaceRealization.target->filter(Interface)->notEmpty() and
	class.interfaceRealization.target->filter(Interface)->select(isEntity())->notEmpty() and
	class.interfaceRealization.target->filter(Interface)->select(isEntity())
		->asSequence()->first().attribute->notEmpty()) then   
	class.interfaceRealization.target->filter(Interface)->select(isEntity())
		->asSequence()->first().attribute->select(isPK())
else
	Set{}
endif
/]
