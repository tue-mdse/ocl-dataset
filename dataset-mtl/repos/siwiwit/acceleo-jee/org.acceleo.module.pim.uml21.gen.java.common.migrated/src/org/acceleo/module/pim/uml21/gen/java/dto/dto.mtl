[module dto('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::acceleo::module::pim::uml21::gen::java::common::requests/]
[import org::acceleo::module::pim::uml21::gen::java::business::entitydto/]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics/]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes/]
[import org::acceleo::module::pim::uml21::services::stringservice /]
[import org::acceleo::module::pim::uml21::services::uml2services /]

[comment][template private fullFilePath(class:Class) ? (class.isEntity() or class.isDto())]
[if (getProperty('useDtoPackage')='no')]
[class.pathToMainJava()/]/[class.dtoPackage().toPath()/]/[class.dtoName()/].java
[else]
[class.pathToMainJava()/]/[class.dtoPackage().toPath()/]/[class.dtoName()/]Dto.java
[/if]
[/template][/comment]


[template public generateDto(class:Class)? (class.isEntity() or class.isDto())]
[comment This template is called by the main module file /]
[file (class.fullFilePath(class.pathToMainJava(),class.dtoPackage().toPath(),class.dtoName().concat(if(getProperty('useDtoPackage')='no') then '.java' else 'Dto.java' endif )), false))]
[if (class.isEntity() and getProperty('generate.dto.per.entity') = 'yes')]
[class.genEntityDto()/]
[else]
[class.genDto()/]
[/if]

[/file]
[/template]


[template public genDto(class:Class)]
package [class.dtoPackage()/];

// [protected ('imports')] 
// for imports
import java.io.Serializable;
import java.util.*;
// [/protected] for imports

/**
 * [ownedComment._body/]
 */
 public class [class.dtoName()/][class.extensions()/] implements Serializable {

    /**
     * serialVersionUID is used for serialization.
     */
    private static final long serialVersionUID = 1L;

[comment  Generate attributes /]
[for (prop:Property|class.attribute)]
    protected [prop.convertDtoToJavaType()/] [prop.name/];
[/for]

    /**
     * Default constructor.
     */
    public [class.dtoName()/]() {
        super();
    }

[if (class.attribute->notEmpty())]
    /**
     * Constructor with all parameters initialized.
	[for (prop:Property|class.attribute)]
     * @param [prop.name/] [prop.ownedComment._body/]
	[/for]
     */
    public [class.dtoName()/]([class.attribute.asParameter()->sep(', ')/]) {
	[for (prop:Property|class.attribute)]
        this.[prop.name/] = [prop.name/];
	[/for]
    }    
[/if]

[comment  Generate getters and setters /]
[for (prop:Property|class.attribute)]

[comment  Deals with Lists /]
	[if (prop.upper = -1)]
        [prop.generateOpForList()/]
	[else]
        [prop.generateOp()/]
	[/if]
    
[/for]

}
[/template]


[template public extensions(class:Class)]
[if (class.general->notEmpty())] extends [class.general.name/][class.dtoSuffix()/][/if]
[/template]


[template public asParameter(property:Property)]
[property.convertDtoToJavaType()/] [property.name/]
[/template]


[template public generateOp(property:Property)]
    /**
     * Returns [property.name/].
     * @return [property.ownedComment._body/]
     */
    public [property.convertDtoToJavaType()/] get[property.name.toUpperFirst()/]() {
        return this.[property.name/];
    }

    /**
     * Set a value to parameter [property.name/].
     * @param [property.name/] [property.ownedComment._body/]
     */
    public void set[property.name.toUpperFirst()/]([property.convertDtoToJavaType()/] [property.name/]) {
        this.[property.name/] = [property.name/];
[if (property.opposite <> null)]
        this.[property.name/].set[property.featuringClassifier.name/](this);
[/if]
    }
[/template]


[template public generateOpForList(property:Property) ]
    /**
     * Returns [property.name/].
     * @return A list of [property.type/]. [property.ownedComment._body/]
     */
    public [property.convertDtoToJavaType()/] get[property.name.toUpperFirst()/]() {
        return Collections.unmodifiableList([property.name/]);
    }

    /**
     * Set a value to parameter [property.name/].
     * @param [property.name/] A list of [property.type/]. [property.ownedComment._body/]
     */
    public void set[property.name.toUpperFirst()/]([property.convertDtoToJavaType()/] [property.name/]) {
        this.[property.name/] = [property.name/];
    }
    
    /**
     * Add an element to the list [name/].
     * @param elementToAdd Element of type [type/] to add
     */
    public void add[property.name.toUpperFirst()/]([property.type.convertDtoToJavaType()/] elementToAdd) {
        this.[property.name/].add(elementToAdd);
[if (property.opposite <> null)]
[if (property.upper <> 1)]
        elementToAdd.add[property.owner/](this);
[else]
        elementToAdd.set[property.owner/](this);
[/if]
[/if]
    }
    
    /**
     * Remove an element to the list [property.name/].
     * @param elementToRevmoe Element of type [property.type/] to add
     */
    public void remove[property.name.toUpperFirst()/]([property.type.convertDtoToJavaType()/] elementToRemove) {
        this.[property.name/].remove(elementToRemove);
[if (property.opposite <> null)]
[if (property.upper <> 1)]
        elementToAdd.remove[property.owner/](this);
[else]
        elementToAdd.set[property.owner/](null);
[/if]
[/if]
    }
[/template]


[template public convertDtoToJavaType(property:Property)]
[if (property.upper = -1)]List<[property.type.convertDtoToJavaType()/]>[else][property.type.convertDtoToJavaType()/][/if]
[/template]


[template public convertDtoToJavaType(type : Type) post(trim())]
[if (type.hasStereotype('Dto'))]
	[type.name/]Dto
[else]
	[type.convertToJavaType()/]
[/if]

[/template]



