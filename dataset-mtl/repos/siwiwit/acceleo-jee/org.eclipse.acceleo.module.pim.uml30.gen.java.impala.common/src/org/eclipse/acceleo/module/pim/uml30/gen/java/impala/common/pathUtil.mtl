[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateProjectFolder.
 */]
[module pathUtil('http://www.eclipse.org/uml2/3.0.0/UML')]

[import org::acceleo::module::pim::uml21::gen::java::spring::common /]
[**
 * 
 */]
[template public generateSpecificProjectFolder(aModel : Model, postFix:String) post (trim())]
[aModel.getDefaultPojectFolder().concat(postFix)/]
[/template]

[query private getDefaultPojectFolder (aModel : Model) : String = 
if(aModel.name.oclIsUndefined() or aModel.name.size()=0) then 
	'no-name'
else
	aModel.name
endif
/]

[query public generateJavaPackage(aType : Type) : String =
	aType.ancestors(Package)->select(aPackage:Package|not aPackage.oclIsTypeOf(Model)).name->reverse()->sep('.')->toString()
/]

[query public generateJavaPackagePath(aType : Type) : String =
	aType.generateJavaPackage().replaceAll('\\.', '/')
/]

[template public extensions(class:Class)]
[if (not (class.superClass->isEmpty()))] extends [class.superClass.name/][/if]
[/template]

[template public generateImports(aClass : Class)]
	[if (aClass.getMultiplicity()->notEmpty())]
		[let manyProps : Set(MultiplicityElement) = aClass.getMultiplicity()->select(aMultiplicityElement:MultiplicityElement|aMultiplicityElement.upper = -1 or aMultiplicityElement.upper > 1)]
			[if (manyProps->notEmpty())]
				[if (manyProps->select(isOrdered)->notEmpty())]
import java.util.List;
import java.util.ArrayList;
				[/if]
				[if (manyProps->select(isUnique and not isOrdered)->notEmpty())]
import java.util.Set;
import java.util.HashSet;
				[/if]
				[if (manyProps->select(not isUnique and not isOrdered)->notEmpty())]
import java.util.Collection;
				[/if]
			[/if]
		[/let]

		[for (aType : Type | aClass.getMultiplicity().getType()->select(aType:Type|Type<>null)->asSet())]
			[if (getProperty('java.typeconversion.' + aType.name) <> null)]
				[if (getProperty('java.typeconversion.' + aType.name) = 'Date')]
import java.util.Date;
				[/if]	
			[elseif (aType.name.toLower()<>'void' and aClass.generateJavaPackage() <> aType.oclAsType(Type).generateJavaPackage())]
import [aType.generateJavaPackage()/].[aType.name.toUpperFirst()/];
			[/if]
		[/for]
	[/if]
[/template]

[query public getType(aMultiplicityElement:MultiplicityElement) : Type = 
if(aMultiplicityElement.oclIsTypeOf(Property) or aMultiplicityElement.oclIsTypeOf(Parameter)) then
	if(aMultiplicityElement.oclIsTypeOf(Property)) then
		aMultiplicityElement.oclAsType(Property).type
	else
		aMultiplicityElement.oclAsType(Parameter).type
	endif 
else
	null 
endif 
/]

