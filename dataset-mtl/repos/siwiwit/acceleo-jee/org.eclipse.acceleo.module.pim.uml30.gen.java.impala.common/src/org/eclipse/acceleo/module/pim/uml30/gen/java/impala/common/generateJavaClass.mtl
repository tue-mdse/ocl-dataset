[comment encoding = UTF-8 /]
[module generateJavaClass('http://www.eclipse.org/uml2/3.0.0/UML')]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::pathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::structureUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::stringUtil /]
[import org::acceleo::module::pim::uml21::gen::java::spring::java::javaclass /]
[import org::acceleo::module::pim::uml21::gen::java::spring::common /]


[template public generateJavaClass(aClass : Class)]
[comment This template is called by the main module file /]
package [aClass.generateJavaPackage()/];

// [protected ('imports')] 

[for (classifier:Classifier|aClass.operationsParametersTypes())]
import [classifier.getCompleteName()/];	
[/for]
[if (attribute.type->select(aType:Type|getProperty('java.typeconversion.' + aType.name) = 'Date')->notEmpty())]
import java.util.Date;
[/if]
[for (prop:Property | aClass.getOppositeAttributes())]
	[if (aClass.generateJavaPackage() <> prop.type.generateJavaPackage())]
import [prop.type.entityPackage()/].[prop.type.name/];
	[/if]
[/for]

[if (not (aClass.superClass->isEmpty()))]
import [aClass.entityPackage()/].[aClass.superClass.name/];
[/if]

[aClass.genCollectionImports()/]

// [/protected]

[aClass.generateJavadoc()/]
[aClass.genModifiers()/] class [aClass.name/][aClass.extensions()/] {

[comment  Generate attributes /]
[for (prop:Property|aClass.attribute)]
	[prop.visibility/] [prop.convertToJavaType()/] [prop.name/];
[/for]

	/**
	 * Default constructor 
	 */
	public [aClass.name/]() {
		super();
	}

[if (aClass.attribute->notEmpty())]
	/**
	 * Constructor with all parameters initialized
	[for (prop:Property|aClass.attribute)]
	 * @param [prop.name/] [prop.ownedComment._body/]
	[/for]
	 */	
	public [aClass.name/]([aClass.attribute.asParameter()->sep(', ')/]) {

	[for (prop:Property|aClass.attribute)]
		this.[prop.name/] = [prop.name/];
	[/for]
	}	
[/if]

[comment  Generate operations /]
[for (oper:Operation|aClass.ownedOperation)]
	[oper.generateJavadoc()/]
	[oper.genModifiers()/] [oper.generateReturn()/] [oper.name/]([oper.generateRawParameters()/]) [if (oper.raisedException->notEmpty())]throws [oper.raisedException.name->sep(', ')/][/if][oper.genOperationBody()/]
[/for]

}

[/template]


[template public extensions(aClass : Class)]
[aClass.inheritances()/][aClass.implements()/]
[/template]


[template public inheritances(aClass : Class)]
[if (aClass.general->notEmpty())] extends [aClass.general.name/][/if]
[/template]


[template public implements(aClass : Class)]
[if (aClass.interfaceRealization->notEmpty())] implements [aClass.interfaceRealization.asClass()->sep(', ')/][/if]
[/template]


[template public asClass(interfaceRealization : InterfaceRealization)]
[interfaceRealization.supplier.name/]
[/template]


[template public asParameter(property : Property)]
[property.convertToJavaType()/] [property.name/]
[/template]


[template public genModifiers(operation : Operation)]
[operation.visibility/][if (operation.isLeaf)] final[/if][if (operation.isAbstract)] abstract[/if][if (operation.isStatic)] static[/if]
[/template]


[template public genModifiers(aClass : Class)]
[aClass.visibility/][if (aClass.isLeaf)] final[/if][if (aClass.isAbstract or aClass.ownedOperation->select(isAbstract)->notEmpty())] abstract[/if]
[/template]


[template public genOperationBody(operation : Operation) post (trim())]
[if (isAbstract)]
;
[else]
	{
		// [protected ('operation')]		
		// TODO implement [name/]
		throw new UnsupportedOperationException("Method not yet implemented");
		// [/protected] of [name/]
	}

[/if]

[/template]
