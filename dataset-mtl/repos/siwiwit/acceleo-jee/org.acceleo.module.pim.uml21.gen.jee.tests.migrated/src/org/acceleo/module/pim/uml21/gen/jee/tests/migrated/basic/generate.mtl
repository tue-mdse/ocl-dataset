[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::dao::api::daofactory /]
[import org::acceleo::module::pim::uml21::gen::java::dao::api::daointerfacecustomized /]
[import org::acceleo::module::pim::uml21::gen::java::dao::api::daointerfacedirect /]
[import org::acceleo::module::pim::uml21::gen::java::dao::test::daointerfacedirecttestjunittestsuite/]
[import org::acceleo::module::pim::uml21::gen::java::dao::test::daointerfacedirecttestjunit /]
[import org::acceleo::module::pim::uml21::gen::java::business::entity/]
[import org::acceleo::module::pim::uml21::gen::sql::mysql::sqlcreate /]
[import org::acceleo::module::pim::uml21::gen::sql::mysql::sqlconstraints /]
[import org::acceleo::module::pim::uml21::gen::java::dto::dto /]
[import org::acceleo::module::pim::uml21::gen::java::hibernate::daohibernatehbm /]
[import org::acceleo::module::pim::uml21::gen::java::hibernate::daohibernatedirect /]
[import org::acceleo::module::pim::uml21::gen::java::hibernate::daohibernatecfg /]
[import org::acceleo::module::pim::uml21::gen::java::hibernate::daohibernatedaoproperties /]
[import org::acceleo::module::pim::uml21::gen::java::hibernate::daohibernatedirecttestjunit /]
[template public generateClass(aClass : Class)]
	[aClass.generateDaoInterfaceCustomized()/]
	[aClass.generateDaoInterfaceDirect()/]
	[aClass.generateInterfaceDirectTest()/]
	[aClass.generateEntity()/]
	[aClass.generateDto()/]
	[aClass.generateDaoHibernateHbm('object')/]
	[aClass.generateDaoHibernateDirect()/]
	[aClass.generateHibernateDirectTest()/]
[/template]

[template public generateModel(aModel : Model)]
	
	[comment @main /]
	[aModel.generateDaoFactory()/]
	[aModel.generateDaoInterfaceDirectTestSuit()/]
	[aModel.generateSqlCreate()/]
	[aModel.generateSqlConstraints()/]
	[aModel.generateHibernateConfig()/]
	[aModel.generateHibernateDaoProperties()/]
	[for (class : Class | aModel.ownedElement->filter(Class))]
		[class.generateClass()/]
	[/for]
	[for (pack : Package | aModel.ownedElement->filter(Package))]
		[pack.generatePackage()/]
	[/for]

[/template]

[template public generatePackage(aPackage : Package)]
	[for (class : Class | aPackage.ownedElement->filter(Class))]
		[class.generateClass()/]
	[/for]
	[for (pack : Package | aPackage.nestedPackage)]
		[pack.generatePackage()/]
	[/for]
[/template]
