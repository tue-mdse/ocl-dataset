[comment encoding = UTF-8 /]
[module generatePopulateDBTxt('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::build::common::buildPathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::pathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::requests /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::stringUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::requests /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::build::common::entityUtil /]
	
[template public generatePopulateDBTxt(aModel : Model)]
	[file (aModel.generateProjectFolder().concat(aModel.pathToMainResources()).concat('/db/populateDB.txt'), false, 'UTF-8')]
[let entities : Sequence(Class) = aModel.eAllContents(Class)->select(aClass:Class|aClass.isEntity())->sortedBy(aClass:Class|aClass.entityRate())]
	[for (anEntity:Class| entities)]
			[for (index : Integer | Sequence{1,2,3})]
INSERT INTO [anEntity.name.toLower().convertSingularToPlural()/] 
(
			[anEntity.generatePrimaryKeyColumnNames()/]
			[anEntity.generateFieldColumnNames()/]
			[anEntity.generateForeignKeyColumnNames()/]

)
VALUES (
			[anEntity.generatePrimaryKeyValues(index)/]
			[anEntity.generateFieldValues(index)/]
			[anEntity.generateForeignKeyValues(index)/]
);
			[/for]
	[/for]
[/let]	
[aModel.generateAsociationTableValues()/]
	[/file]
[/template]

[template public generatePrimaryKeyValues(anEntity : Class, index : Integer)]
	[if (anEntity.hasPrimaryKey())]
		[for (aPK : Property | anEntity.getPrimaryProperties(Sequence{})) separator (',')]
[aPK.generateSampleValue(index)/]
		[/for]
	[else]
[index/]
	[/if]
[/template]

[template public generateFieldValues(anEntity : Class, index : Integer)]
	[if (anEntity.getSimpleFields()->notEmpty())]
		[for (prop:Property|anEntity.getSimpleFields()) before (',') separator (',')]
[prop.generateSampleValue(index)/]
		[/for]
	[/if]
[/template]

[template public generateForeignKeyValues(anEntity : Class, index : Integer) post (trim())]
[for (anAssociation : Association | anEntity.getAssociations()->select(anAss:Association|anAss.memberEnd->forAll(aProp:Property|aProp.upper<=1)))]
	[if (anAssociation.memberEnd->select(aProp:Property|aProp.type=anEntity)->notEmpty())]
		[let ownedEnd : Property = anAssociation.memberEnd->select(aProp:Property|aProp.type=anEntity)->first()]
			[if (anAssociation.memberEnd->select(aProp:Property|aProp.type<>anEntity)->notEmpty())]
				[let otherEnd : Property = anAssociation.memberEnd->select(aProp:Property|aProp.type<>anEntity)->first()]
					[if (not otherEnd.type.isSimpleType())]
						[if ((ownedEnd.upper>=0 and ownedEnd.upper<=1) and (otherEnd.upper>=0 and otherEnd.upper<=1))] [comment] 1-1[/comment]
							[if (otherEnd.isNavigable() and not ownedEnd.isNavigable())]
								[if (otherEnd.type.oclAsType(Class).hasPrimaryKey())]
									[if (not otherEnd.type.oclAsType(Class).isCirclePKReferece(Set{}))]
										[for (aPK : Property | otherEnd.type.oclAsType(Class).getPrimaryProperties(Sequence{})) separator (',')]
,[aPK.generateSampleValue(index)/]  
										[/for]
									[/if]
								[else]
,[index/]
								[/if]
							[/if]
						[elseif ((ownedEnd.upper>1 or ownedEnd.upper<0) and (otherEnd.upper>=0 and otherEnd.upper<=1))] [comment] *-1[/comment]
								[if (otherEnd.type.oclAsType(Class).hasPrimaryKey())]
									[if (not otherEnd.type.oclAsType(Class).isCirclePKReferece(Set{}))]
										[for (aPK : Property | otherEnd.type.oclAsType(Class).getPrimaryProperties(Sequence{})) separator (',')]
,[aPK.generateSampleValue(index)/]  
  
										[/for]
									[/if]
								[else]
,[index/]
								[/if]
						[/if]
					[/if]
				[/let]
			[/if]		
		[/let]
	[/if]
[/for]	



	[comment][if (anEntity.getReferenceFields()->notEmpty())]
		[for (prop:Property|anEntity.getReferenceFields()->select(aProperty:Property|aProperty.upper=1)) before (',') separator (',')]
				[if (prop.type.oclAsType(Class).isEntity())]
					[if (prop.type.oclAsType(Class).hasPrimaryKey())]
						[if (not prop.type.oclAsType(Class).isCirclePKReferece(Set{}))]
							[for (aPK : Property | prop.type.oclAsType(Class).getPrimaryProperties(Sequence{})) separator (',')]
[aPK.generateSampleValue(index)/]
							[/for]
						[else]
							[prop.name/] is cicle loop
						[/if]
					[else]
[index/]	
					[/if]
				[/if]
		[/for]
	[/if][/comment]
[/template]

[template public generateAsociationTableValues(anAssociation : Association, index : Integer)]
	[if (anAssociation.memberEnd->asSequence()->forAll(aProperty:Property|aProperty.upper=-1 and aProperty.type->notEmpty() and (aProperty.type.oclIsTypeOf(Class) or aProperty.type.oclIsTypeOf(Enumeration))))]
INSERT INTO [anAssociation.memberEnd.type.name->asOrderedSet()->sep('_')/] VALUES (
		[comment  primary keys/]
		[for (aProp : Property | anAssociation.memberEnd)]
			[if (aProp.type.oclIsTypeOf(Class))]
				[let anEntity : Class = aProp.type.oclAsType(Class)]
					[if (anEntity.isEntity())]
						[if (anEntity.hasPrimaryKey())]
							[for (aPK : Property | anEntity.getPrimaryProperties(Sequence{})) separator (',')]
[aPK.generateSampleValue(index)/]
							[/for]
						[else]
[index/]	
						[/if]
					[/if]
				[/let]
			[else]
[aProp.generateSampleValue(index)/]
			[/if]
		[/for]
		[if (anAssociation.oclIsTypeOf(AssociationClass))]
			[comment  properties/]
			[for (prop:Property|anAssociation.oclAsType(AssociationClass).classAttributes()->filter(Property)->select(aProperty:Property|aProperty.type.isSimpleType() or aProperty.type.oclIsTypeOf(Enumeration))) before (',') separator (',')]
[prop.generateSampleValue(index)/]
			[/for]
			[comment foreign keys/]
			[for (prop:Property|anAssociation.oclAsType(AssociationClass).getOppositeAttributes()->filter(Property)->select(aProperty:Property|not aProperty.type.isSimpleType() and not aProperty.type.oclIsTypeOf(Enumeration) and aProperty.upper=1)) before (',') separator (',')]
				[if (prop.type->notEmpty() and prop.type.oclAsType(Class).hasPrimaryKey())]
					[if (not prop.type.oclAsType(Class).isCirclePKReferece(Set{}))]
						[for (aPK : Property | prop.type.oclAsType(Class).getPrimaryProperties(Sequence{})) separator (',')]
[aPK.generateSampleValue(index)/]
						[/for]
					[/if]
				[else]
[index/]	
				[/if]
			[/for]
		[/if]
);
	[/if]
[/template]


[template public generatePrimaryKeyColumnNames(anEntity : Class)]
	[let highestEntity : Class = anEntity.getHighestEntity()]
		[if (highestEntity.hasPrimaryKey())]
			[for (aPK : Property | highestEntity.getPrimaryProperties(Sequence{})) separator (',')]
				[if (aPK.type.oclIsTypeOf(Enumeration))]
[aPK.owner.oclAsType(Class).name.toLower()/]_[aPK.name.toLower()/]_id
				[else]
[aPK.owner.oclAsType(Class).name.toLower()/]_[aPK.name.toLower()/]_id
				[/if]
			[/for]
		[else]
[highestEntity.name.toLower()/]_id
		[/if]
	[/let]
[/template]

[template public generateFieldColumnNames(anEntity : Class)]
	[if (anEntity.getSimpleFields()->notEmpty())]
		[for (prop:Property|anEntity.getSimpleFields()) before (',') separator (',')]
			[if (prop.type.oclIsTypeOf(Enumeration))]
[prop.name/]
			[else]
[prop.name/]
			[/if]
		[/for]
	[/if]
[/template]


[template public generateForeignKeyColumnNames(anEntity : Class) post (trim())]
[for (anAssociation : Association | anEntity.getAssociations()->select(anAss:Association|anAss.memberEnd->forAll(aProp:Property|aProp.upper<=1)) ) ]
	[if (anAssociation.memberEnd->select(aProp:Property|aProp.type=anEntity)->notEmpty())]
		[let ownedEnd : Property = anAssociation.memberEnd->select(aProp:Property|aProp.type=anEntity)->first()]
			[if (anAssociation.memberEnd->select(aProp:Property|aProp.type<>anEntity)->notEmpty())]
				[let otherEnd : Property = anAssociation.memberEnd->select(aProp:Property|aProp.type<>anEntity)->first()]
					[if (not otherEnd.type.isSimpleType())]
						[if ((ownedEnd.upper>=0 and ownedEnd.upper<=1) and (otherEnd.upper>=0 and otherEnd.upper<=1))] [comment] 1-1[/comment]
							[if (otherEnd.isNavigable() and not ownedEnd.isNavigable())]
								[if (otherEnd.type.oclAsType(Class).hasPrimaryKey())]
									[if (not otherEnd.type.oclAsType(Class).isCirclePKReferece(Set{}))]
										[for (aPK : Property | otherEnd.type.oclAsType(Class).getPrimaryProperties(Sequence{})) before (',') separator (',')]
[otherEnd.type.oclAsType(Class).name.toLower()/]_[otherEnd.name.toLower()/]  
										[/for]
									[/if]
								[else]
,[otherEnd.type.oclAsType(Class).name.toLower()/]_[otherEnd.name.toLower()/]
								[/if]
							[/if]
						[elseif ((ownedEnd.upper>1 or ownedEnd.upper<0) and (otherEnd.upper<=1 and otherEnd.upper>=0))] [comment] *-1[/comment]
								[if (otherEnd.type.oclAsType(Class).hasPrimaryKey())]
									[if (not otherEnd.type.oclAsType(Class).isCirclePKReferece(Set{}))]
										[for (aPK : Property | otherEnd.type.oclAsType(Class).getPrimaryProperties(Sequence{})) before (',') separator (',')]
[otherEnd.type.oclAsType(Class).name.toLower()/]_[otherEnd.getReferenceColumnName()/]  
										[/for]
									[/if]
								[else]
,[otherEnd.type.oclAsType(Class).name.toLower()/]_[otherEnd.getReferenceColumnName()/]
								[/if]
						[/if]
					[/if]
				[/let]
			[/if]		
		[/let]
	[/if]
[/for]	

	[comment][if (anEntity.getReferenceFields()->notEmpty())]
		[for (prop:Property|anEntity.getReferenceFields()->select(aProperty:Property|aProperty.upper=1)) before (',') separator (',')]
			[if (prop.type.oclAsType(Class).hasPrimaryKey())]
				[if (not prop.type.oclAsType(Class).isCirclePKReferece(Set{}))]
					[for (aPK : Property | prop.type.oclAsType(Class).getPrimaryProperties(Sequence{})) separator (',')]
[prop.type.oclAsType(Class).name.toLower()/]_[aPK.getReferenceColumnName()/]	
					[/for]
				[/if]
			[else]
[prop.type.oclAsType(Class).name.toLower()/]_[prop.getReferenceColumnName()/]
			[/if]
		[/for]
	[/if][/comment]
[/template]

[template public generateAsociationTableColumns(anAssociation : Association)]
		[comment  primary keys/]
		[for (aProperty : Property | anAssociation.memberEnd)]
			[let anEntity : Class  = aProperty.type->asSequence()->first().oclAsType(Class)]
				[if (anEntity.hasPrimaryKey())]
					[for (aPK : Property | anEntity.getPrimaryProperties(Sequence{})) separator (',')]
						[if (aPK.type.oclIsTypeOf(Enumeration))]
[aPK.owner.oclAsType(Class).name.toLower()/]_[aPK.name.toLower()/]_id
						[else]
[aPK.owner.oclAsType(Class).name.toLower()/]_[aPK.name.toLower()/]_id
						[/if]
					[/for]
				[else]
[anEntity.name.toLower()/]_[aProperty.getReferenceColumnName()/]
				[/if]
			[/let]
		[/for]
		[if (anAssociation.oclIsTypeOf(AssociationClass))]
			[comment  properties/]
			[for (prop:Property|anAssociation.oclAsType(AssociationClass).classAttributes()->filter(Property)->select(aProperty:Property|aProperty.type.oclIsTypeOf(Enumeration) or aProperty.type.isSimpleType())) before (',') separator (',')]
				[if (prop.type.oclIsTypeOf(Enumeration))]
[prop.name/]
				[else]
[prop.name/]
				[/if]
			[/for]
			[comment  foreign keys/]
			[for (prop:Property|anAssociation.oclAsType(AssociationClass).getOppositeAttributes()->filter(Property)->select(aProperty:Property|not aProperty.type.oclIsTypeOf(Enumeration) and not aProperty.type.isSimpleType() and aProperty.upper=1)) before (',') separator (',')]
				[if (prop.type.oclAsType(Class).hasPrimaryKey())]
					[if (not prop.type.oclAsType(Class).isCirclePKReferece(Set{}))]
						[for (aPK : Property | prop.type.oclAsType(Class).getPrimaryProperties(Sequence{})) separator (',')]
[prop.type.oclAsType(Class).name.toLower()/]_[prop.getReferenceColumnName()/]	
						[/for]
					[/if]
				[else]
[prop.type.oclAsType(Class).name.toLower()/]_[prop.getReferenceColumnName()/]	
				[/if]
			[/for]
		[/if]
[/template]

[template public generateAsociationTableValues(aModel : Model)]
	[for (anAssociation : Association | aModel.eAllContents(Association))]
		[for (index : Integer | Sequence{1,2,3})]
			[if (anAssociation.memberEnd->asSequence()->forAll(aProperty:Property|aProperty.upper=-1 and aProperty.type->notEmpty() and aProperty.type.oclIsTypeOf(Class) and aProperty.type.oclAsType(Class).isEntity()))]
				[if (anAssociation.memberEnd.type->size()=2)]
INSERT INTO [anAssociation.memberEnd.type.name->asOrderedSet()->sep('_')/] (
(
	[anAssociation.generateAsociationTableColumns()/]
)
VALUES
(
	[anAssociation.generateAsociationTableValues(index)/]
);
				[/if]
			[/if]
		[/for]
	[/for]
[/template]

[comment][template public generateAsociationTableValues(aModel : Model)]
	[for (anAssociation : Association | aModel.eAllContents(Association))]
		[for (index : Integer | Sequence{1,2,3})]
[anAssociation.generateAsociationTableValues(index)/]		
		[/for]
	[/for]
[/template][/comment]
