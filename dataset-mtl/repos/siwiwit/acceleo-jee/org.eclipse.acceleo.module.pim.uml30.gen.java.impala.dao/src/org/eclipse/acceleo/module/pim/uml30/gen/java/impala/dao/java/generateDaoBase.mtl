[comment encoding = UTF-8 /]
[module generateDaoBase('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::dao::common::daoPathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::acceleo::module::pim::uml21::gen::java::spring::common /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::pathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::acceleo::module::pim::uml21::gen::java::common::requests /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::requests /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::acceleo::module::pim::uml21::gen::java::common::compositeUtil /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::dao::common::daoUtil /]
[import org::acceleo::module::pim::uml21::services::uml2services /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::dao::common::daoCommon /]
[template public generateDaoBase(aClass : Class)]
	[file (aClass.getModel().generateProjectFolder().concat(aClass.getModel().pathToGeneratedMainJava()).concat('/').concat(aClass.generateJavaPackagePath()).concat('/').concat(aClass.name).concat('DaoBase.java'), false, 'UTF-8')]
package [aClass.generateJavaPackage()/];

//[protected ('import')]
import java.security.Principal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import dao.common.PaginationResult;
import dao.common.PrincipalStore;
import dao.common.PropertySearch;
import dao.common.Search;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Transformer;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.ScrollableResults;
import org.hibernate.Session;
import org.springframework.orm.hibernate3.HibernateCallback;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
[if (aClass.getPKAttribute()->size()>1)]
	[let compositePKClass : Class = aClass.getCompositeKeyClass()]
		[if (compositePKClass.generateJavaPackage() <> aClass.generateJavaPackagePath())]
import [if (compositePKClass.generateJavaPackage().trim().size()>0)][compositePKClass.generateJavaPackage()/].[/if][compositePKClass.name/];
		[/if]
	[/let]
[/if]

[for (prop:Property | aClass.getOppositeAttributes())]
	[if (class.generateJavaPackage() <> prop.type.generateJavaPackage())]
import [prop.type.generateJavaPackage()/].[prop.type.name/];
	[/if]
[/for]

[for (aDtoClass:Classifier | aClass.ownedOperation.ownedParameter.type->select(aType:Type|aType.name.toLower() <> 'void' and aType.name.toLower() <> 'string')->filter(Classifier)->asSet()->union(aClass.getRelatedDtos()->filter(Classifier)->asSet()))]
	[if (aClass.generateJavaPackage() <> aDtoClass.generateJavaPackage())]
import [aDtoClass.generateJavaPackage()/].[aDtoClass.name/];
	[/if]
[/for]

[aClass.generateImports()/]



//[/protected]
/**
 * <p>
 * Base Spring DAO Class: is able to create, update, remove, load, and find
 * objects of type <code>Timecard</code>.
 * </p>
 *
 * @see [aClass.name.toUpperFirst()/]
 */
public abstract class [aClass.name.toUpperFirst()/]DaoBase
    extends HibernateDaoSupport
    implements [aClass.name/]Dao
{
	
	[for (aDao : Class | aClass.getRelatedDaos())]
    private [aDao.name/]Dao [aDao.name.toLowerFirst()/]Dao;
    /**
     * Sets the reference to <code>[aDao.name/]Dao</code>.
     * @param [aDao.name/]DaoIn
     */
    public void set[aDao.name/]Dao([aDao.name/]Dao [aDao.name.toLowerFirst()/]DaoIn)
    {
        this.[aDao.name.toLowerFirst()/]Dao = [aDao.name.toLowerFirst()/]DaoIn;
    }

    /**
     * Gets the reference to <code>[aDao.name/]Dao</code>.
     * @return [aDao.name/]Dao
     */
    protected [aDao.name/]Dao get[aDao.name/]Dao()
    {
        return this.[aDao.name.toLowerFirst()/]Dao;
    }
	[/for]


    /**
     * {@inheritDoc}
     */
    
    public Object get(final int transform, final [aClass.getPrimaryTypeName(true)/] id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "[aClass.name/].get - 'id' can not be null");
        }
        final Object entity = this.getHibernateTemplate().get([aClass.name/]Impl.class, id);
        return transformEntity(transform, ([aClass.genEntityClassName()/])entity);
    }
    /**
     * {@inheritDoc}
     */
    
    public [aClass.genEntityClassName()/] get([aClass.getPrimaryTypeName(true)/] id)
    {
        return ([aClass.genEntityClassName()/])this.get(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    
    public Object load(final int transform, final [aClass.getPrimaryTypeName(true)/] id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "[aClass.name/].load - 'id' can not be null");
        }
        final Object entity = this.getHibernateTemplate().get([aClass.name/]Impl.class, id);
        return transformEntity(transform, ([aClass.genEntityClassName()/])entity);
    }

    /**
     * {@inheritDoc}
     */
    
    public [aClass.genEntityClassName()/] load([aClass.getPrimaryTypeName(true)/] id)
    {
        return ([aClass.genEntityClassName()/])this.load(TRANSFORM_NONE, id);
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings({"unchecked"})
    public Collection<[aClass.genEntityClassName()/]> loadAll()
    {
        return (Collection<[aClass.genEntityClassName()/]>) this.loadAll([aClass.name/]Dao.TRANSFORM_NONE);
    }

    /**
     * {@inheritDoc}
     */
    
    public Collection<?> loadAll(final int transform)
    {
        return this.loadAll(transform, -1, -1);
    }

    /**
     * {@inheritDoc}
     */
    
    public Collection<?> loadAll(final int pageNumber, final int pageSize)
    {
        return this.loadAll([aClass.name/]Dao.TRANSFORM_NONE, pageNumber, pageSize);
    }

    /**
     * {@inheritDoc}
     */
    
    public Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize)  {
        try {
            final Criteria criteria = this.getSession(true).createCriteria([aClass.name/]Impl.class);
            if (pageNumber > 0 && pageSize > 0)
            {
                criteria.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                criteria.setMaxResults(pageSize);
            }
            final Collection<?> results = criteria.list();
            this.transformEntities(transform, results);
            return results;
        }
        catch (HibernateException ex) {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * firstResult = (pageNumber - 1) * pageSize
     * @param pageNumber
     * @param pageSize
     * @return firstResult
     */
    protected int calculateFirstResult(int pageNumber, int pageSize) {
        int firstResult = 0;
        if (pageNumber > 0)
        {
            firstResult = (pageNumber - 1) * pageSize;
        }
        return firstResult;
    }

    /**
     * {@inheritDoc}
     */
    
    public [aClass.genEntityClassName()/] create([aClass.genEntityClassName()/] [aClass.name.toLowerFirst()/]) {
        return ([aClass.genEntityClassName()/])this.create([aClass.name/]Dao.TRANSFORM_NONE, [aClass.name.toLowerFirst()/]);
    }

    /**
     * {@inheritDoc}
     */
    
    public Object create(final int transform, final [aClass.genEntityClassName()/] [aClass.name.toLowerFirst()/]) {
        if ([aClass.name.toLowerFirst()/] == null)
        {
            throw new IllegalArgumentException(
                "[aClass.name/].create - '[aClass.name.toLowerFirst()/]' can not be null");
        }
        this.getHibernateTemplate().save([aClass.name.toLowerFirst()/]);
        return this.transformEntity(transform, [aClass.name.toLowerFirst()/]);
    }

    /**
     * {@inheritDoc}
     */
    
    @SuppressWarnings({"unchecked"})
    public Collection<[aClass.genEntityClassName()/]> create(final Collection<[aClass.genEntityClassName()/]> entities) {
        return (Collection<[aClass.genEntityClassName()/]>) create([aClass.name/]Dao.TRANSFORM_NONE, entities);
    }

    /**
     * {@inheritDoc}
     */
    
    public Collection<?> create(final int transform, final Collection<[aClass.genEntityClassName()/]> entities) {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "[aClass.genEntityClassName()/].create - 'entities' can not be null");
        }
        this.getHibernateTemplate().executeWithNativeSession(
            new HibernateCallback()
            {
                public Object doInHibernate(Session session)
                    throws HibernateException
                {
                    for ([aClass.genEntityClassName()/] entity : entities)
                    {
                        create(transform, entity);
                    }
                    return null;
                }
            });
        return entities;
    }

    /**
     * {@inheritDoc}
     */
    
    public [aClass.genEntityClassName()/] create(
        [aClass.classAttributes()->filter(Property)->select(not (isPK())).asParameter()->sep(', ')/]) {
        return ([aClass.genEntityClassName()/])this.create([aClass.name/]Dao.TRANSFORM_NONE
		[if (aClass.classAttributes()->filter(Property)->select(not (isPK()))->notEmpty())]
			, [aClass.classAttributes()->filter(Property)->select(not (isPK())).name->sep(', ')/]
		[/if] );

    }

    /**
     * {@inheritDoc}
     */
    
    public Object create(
        final int transform[if (aClass.classAttributes()->notEmpty())], [aClass.classAttributes()->filter(Property)->select(not (isPK())).asParameter()->sep(', ')/][/if]
        ) {
        [aClass.genEntityClassName()/] entity = new [aClass.name/]Impl();
		[for (aProp : Property | aClass.classAttributes())]
	    entity.set[aProp.name.toUpperFirst()/]([aProp.name.toLowerFirst()/]);
		[/for]
        return this.create(transform, entity);
    }

    /**
     * {@inheritDoc}
     */
    
    public void update([aClass.genEntityClassName()/] [aClass.name.toLowerFirst()/])
    {
        if ([aClass.name.toLowerFirst()/] == null)
        {
            throw new IllegalArgumentException(
                "[aClass.genEntityClassName()/].update - '[aClass.name.toLowerFirst()/]' can not be null");
        }
        this.getHibernateTemplate().update([aClass.name.toLowerFirst()/]);
    }

    /**
     * {@inheritDoc}
     */
    
    public void update(final Collection<[aClass.genEntityClassName()/]> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "[aClass.genEntityClassName()/].update - 'entities' can not be null");
        }
        this.getHibernateTemplate().executeWithNativeSession(
            new HibernateCallback()
            {
                public Object doInHibernate(Session session)
                    throws HibernateException
                {
                    for ([aClass.genEntityClassName()/] entity : entities)
                    {
                        update(entity);
                    }
                    return null;
                }
            });
    }

    /**
     * {@inheritDoc}
     */
    
    public void remove([aClass.genEntityClassName()/] [aClass.name.toLowerFirst()/])
    {
        if ([aClass.name.toLowerFirst()/] == null)
        {
            throw new IllegalArgumentException(
                "[aClass.genEntityClassName()/].remove - '[aClass.name.toLowerFirst()/]' can not be null");
        }
        this.getHibernateTemplate().delete([aClass.name.toLowerFirst()/]);
    }

    /**
     * {@inheritDoc}
     */
    
    public void remove([aClass.getPrimaryTypeName(true)/] id)
    {
        if (id == null)
        {
            throw new IllegalArgumentException(
                "[aClass.genEntityClassName()/].remove - 'id' can not be null");
        }
        [aClass.genEntityClassName()/] entity = this.get(id);
        if (entity != null)
        {
            this.remove(entity);
        }
    }

    /**
     * {@inheritDoc}
     */
    
    public void remove(Collection<[aClass.genEntityClassName()/]> entities)
    {
        if (entities == null)
        {
            throw new IllegalArgumentException(
                "[aClass.genEntityClassName()/].remove - 'entities' can not be null");
        }
        this.getHibernateTemplate().deleteAll(entities);
    }
    /**
     * {@inheritDoc}
     */
    
	[for (aFinderMethod : Operation | aClass.ownedOperation->select(anOper:Operation|anOper.isFinder()))]
    public [aFinderMethod.generateReturn()/] [aFinderMethod.name.toLowerFirst()/]([aFinderMethod.generateParameters()/])
    {
		[for (aParam : Parameter | aFinderMethod.getRealParameters())]
        if ([aParam.name.toLowerFirst()/] == null)
        {
            throw new IllegalArgumentException(
                "[if (aClass.generateJavaPackage().trim().size()>0)][aClass.generateJavaPackage()/].[/if][aClass.name/]Dao.[aFinderMethod.name.toLowerFirst()/]([aFinderMethod.generateParameters()/]) - '[aParam.name.toLowerFirst()/]' can not be null");
        }
		[/for]
        try
        {
            return this.handle[aFinderMethod.name.toUpperFirst()/]([aFinderMethod.generateParameterNames()/]);
        }
        catch (Throwable th)
        {
            throw new RuntimeException(
            "Error performing '[aClass.name/]Dao.[aFinderMethod.name.toLowerFirst()/]([aFinderMethod.generateParameters()/])' --> " + th,
            th);
        }
    }

    /**
     * Performs the core logic for {@link #[aFinderMethod.name.toLowerFirst()/]([aFinderMethod.generateParameters()/]}
     * @param criteria
     * @return [aFinderMethod.generateReturn()/]
     * @throws Exception
     */
    protected abstract [aFinderMethod.generateReturn()/] handle[aFinderMethod.name.toUpperFirst()/]([aFinderMethod.generateParameters()/])
        throws Exception;
	[/for]

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>[aClass.name/]Dao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link [aClass.genEntityClassName()/]} - {@link #TRANSFORM_NONE}</li>
	 [for (aDtoClass : Class | aClass.getRelatedDtos())]
     *   <li>{@link [aDtoClass.name.toUpperFirst()/]} - {@link #TRANSFORM_[aDtoClass.name.toUpper()/]}</li>
	 [/for]
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link [aClass.name/]Dao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see [aClass.name/]Dao#transformEntity(int, [aClass.genEntityClassName()/])
     */
    public Object transformEntity(final int transform, final [aClass.genEntityClassName()/] entity)
    {
        Object target = null;
        if (entity != null)
        {
            switch (transform)
            {
	[for (aDtoClass : Class | aClass.getRelatedDtos())]
                case [aClass.name/]Dao.TRANSFORM_[aDtoClass.name.toUpper()/]:
                    target = to[aDtoClass.name.toUpperFirst()/](entity);
                    break;
	[/for]			
                case [aClass.name/]Dao.TRANSFORM_NONE : // fall-through
                default:
                    target = entity;
            }
        }
        return target;
    }

    /**
     * {@inheritDoc}
     */
    
    public void transformEntities(final int transform, final Collection<?> entities)
    {
        switch (transform)
        {
	[for (aDtoClass : Class | aClass.getRelatedDtos())]
            case [aClass.name/]Dao.TRANSFORM_[aDtoClass.name.toUpper()/]:
                to[aDtoClass.name.toUpperFirst()/]Collection(entities);
                break;
	[/for]			
            case [aClass.name/]Dao.TRANSFORM_NONE : // fall-through
                default:
                // do nothing;
        }
    }

    /**
     * @see [aClass.name/]Dao#toEntities(Collection)
     */
    public void toEntities(final Collection<?> results)
    {
        if (results != null)
        {
            CollectionUtils.transform(results, this.ENTITYTRANSFORMER);
        }
    }

    /**
     * This anonymous transformer is designed to transform report query results
     * (which result in an array of entities) to {@link [aClass.genEntityClassName()/]}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private Transformer ENTITYTRANSFORMER =
        new Transformer()
        {
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof Object['['/][']'/])
                {
                    result = toEntity((Object['['/][']'/])input);
                }
                else if (input instanceof [aClass.genEntityClassName()/])
                {
                    result = input;
                }
                return result;
            }
        };

    /**
     * @param row
     * @return [aClass.genEntityClassName()/]
     */
    protected [aClass.genEntityClassName()/] toEntity(Object['['/][']'/] row)
    {
        [aClass.genEntityClassName()/] target = null;
        if (row != null)
        {
            final int numberOfObjects = row.length;
            for (int ctr = 0; ctr < numberOfObjects; ctr++)
            {
                final Object object = row['['/]ctr[']'/];
                if (object instanceof [aClass.genEntityClassName()/])
                {
                    target = ([aClass.genEntityClassName()/])object;
                    break;
                }
            }
        }
        return target;
    }

	[for (aDtoClass : Class | aClass.getRelatedDtos())]
    /**
     * {@inheritDoc}
     */
    public final Collection to[aDtoClass.name.toUpperFirst()/]Collection(Collection<?> entities)
    {
        Collection result = new ArrayList<[aDtoClass.name.toUpperFirst()/]>();
        if (entities != null)
        {
            CollectionUtils.transform(entities, this.[aDtoClass.name.toUpper()/]_TRANSFORMER);
            result.addAll((Collection) entities);
        }
        return result;
    }

    /**
     * {@inheritDoc}
     */
    
    @SuppressWarnings({ "unchecked" })
    public final [aDtoClass.name.toUpperFirst()/]['['/][']'/] to[aDtoClass.name.toUpperFirst()/]Array(Collection<?> entities)
    {
        [aDtoClass.name.toUpperFirst()/]['['/][']'/] result = null;
        if (entities != null)
        {
            // Unchecked transformation: reuses entities Collection
            final Collection collection = new ArrayList(entities);
            this.to[aDtoClass.name.toUpperFirst()/]Collection(collection);
            result = ([aDtoClass.name.toUpperFirst()/]['['/][']'/]) collection.toArray(new [aDtoClass.name.toUpperFirst()/]['['/]collection.size()[']'/]);
        }
        return result;
    }

    /**
     * Default implementation for transforming the results of a report query into a value object. This
     * implementation exists for convenience reasons only. It needs only be overridden in the
     * {@link [aClass.name/]DaoImpl} class if you intend to use reporting queries.
     * @param row
     * @return to[aClass.name/]SummaryVO(this.toEntity(row))
     * @see [aClass.name/]Dao#to[aClass.name/]SummaryVO([aClass.name/])
     */
    protected [aDtoClass.name.toUpperFirst()/] to[aDtoClass.name.toUpperFirst()/](Object['['/][']'/] row)
    {
        return this.to[aDtoClass.name.toUpperFirst()/](this.toEntity(row));
    }	
	
    /**
     * This anonymous transformer is designed to transform entities or report query results
     * (which result in an array of objects) to {@link [aClass.name/]SummaryVO}
     * using the Jakarta Commons-Collections Transformation API.
     */
    private Transformer [aDtoClass.name.toUpper()/]_TRANSFORMER =
        new Transformer()
        {
            public Object transform(Object input)
            {
                Object result = null;
                if (input instanceof [aClass.name/])
                {
                    result = to[aDtoClass.name.toUpperFirst()/](([aClass.name/])input);
                }
                else if (input instanceof Object['['/][']'/])
                {
                    result = to[aDtoClass.name.toUpperFirst()/]((Object['['/][']'/])input);
                }
                return result;
            }
        };

    /**
     * {@inheritDoc}
     */
    
    public final void [aDtoClass.name.toLowerFirst()/]ToEntityCollection(Collection<?> instances)
    {
        if (instances != null)
        {
            for (final Iterator<?> iterator = instances.iterator(); iterator.hasNext();)
            {
                // - remove an objects that are null or not of the correct instance
                if (!(iterator.next() instanceof [aDtoClass.name.toUpperFirst()/]))
                {
                    iterator.remove();
                }
            }
            CollectionUtils.transform(instances, this.[aDtoClass.name.toLowerFirst()/]ToEntityTransformer);
        }
    }

    private final Transformer [aDtoClass.name.toLowerFirst()/]ToEntityTransformer =
        new Transformer()
       	{
            public Object transform(Object input)
            {
                return [aDtoClass.name.toLowerFirst()/]ToEntity(([aDtoClass.name.toUpperFirst()/])input);
            }
        };
    /**
     * {@inheritDoc}
     */
    
    public void to[aDtoClass.name.toUpperFirst()/](
        [aClass.name.toUpperFirst()/] source,
        [aDtoClass.name.toUpperFirst()/] target)
    {
        target.setId(source.getId());
		[for (aProperty : Property | aDtoClass.getAllStrutureClasses().ownedAttribute->select(dtoAttr:Property | aClass.ownedAttribute->exists(aProp:Property|aProp.name=dtoAttr.name and aProp.type = dtoAttr.type)))]
        target.set[aProperty.name.toUpperFirst()/](source.get[aProperty.name.toUpperFirst()/]());
		[/for]
    }

	/**
     * {@inheritDoc}
     */
    
    public [aDtoClass.name.toUpperFirst()/] to[aDtoClass.name.toUpperFirst()/](final [aClass.name/] entity)
    {
        [aDtoClass.name.toUpperFirst()/] target = null;
        if (entity != null)
        {
            target =  new [aDtoClass.name.toUpperFirst()/]();
            this.to[aDtoClass.name.toUpperFirst()/](entity, target);
        }
        return target;
    }	
	
    /**
     * {@inheritDoc}
     */
    
    public void [aDtoClass.name.toLowerFirst()/]ToEntity(
        [aDtoClass.name.toUpperFirst()/] source,
        [aClass.name.toUpperFirst()/] target,
        boolean copyIfNull)
    {
		[for (aProperty : Property | aClass.ownedAttribute)]
			[if (aDtoClass.ownedAttribute->exists(aDtoProp:Property|aDtoProp.name = aProperty.name ))]
				[if (aDtoClass.ownedAttribute->select(aDtoProp:Property|aDtoProp.name = aProperty.name ).type->first()=aProperty.type)]
        if (copyIfNull[if (not aProperty.type.isJavaPrimitiveType())] || source.get[aProperty.name.toUpperFirst()/]() != null[/if]) {
            target.set[aProperty.name.toUpperFirst()/](source.get[aProperty.name.toUpperFirst()/]());
        }
				[/if]
			[/if]
		[/for]
    }



	[/for]

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected Principal getPrincipal()
    {
        return PrincipalStore.get();
    }

    /**
     * {@inheritDoc}
     */
    
    @SuppressWarnings({ "unchecked" })
    public PaginationResult search(final int transform, final int pageNumber, final int pageSize, final Search search)
    {
        try
        {
            search.setPageNumber(pageNumber);
            search.setPageSize(pageSize);
            final PropertySearch propertySearch = new PropertySearch(
                this.getSession(false), [aClass.name/]Impl.class, search);
            final List results = propertySearch.executeAsList();
            this.transformEntities(transform, results);
            return new PaginationResult(results.toArray(new Object['['/]results.size()[']'/]), propertySearch.getTotalCount());
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * {@inheritDoc}
     */
    
    public PaginationResult search(final int pageNumber, final int pageSize, final Search search)
    {
        return this.search([aClass.name/]Dao.TRANSFORM_NONE, pageNumber, pageSize, search);
    }

    /**
     * {@inheritDoc}
     */
    
    public Set<?> search(final int transform, final Search search)
    {
        try
        {
            final PropertySearch propertySearch = new PropertySearch(
                this.getSession(false), [aClass.name/]Impl.class, search);
            final Set<?> results = propertySearch.executeAsSet();
            this.transformEntities(transform, results);
            return results;
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    /**
     * {@inheritDoc}
     */
    
    @SuppressWarnings("unchecked")
    public Set<[aClass.genEntityClassName()/]> search(final Search search)
    {
        return (Set<[aClass.genEntityClassName()/]>) this.search([aClass.name/]Dao.TRANSFORM_NONE, search);
    }

    /**
     * Executes and returns the given Hibernate queryObject as a {@link PaginationResult} instance.
     * @param queryObject
     * @param transform
     * @param pageNumber
     * @param pageSize
     * @return PaginationResult
     */
    @SuppressWarnings({ "unchecked" })
    protected PaginationResult getPaginationResult(
        final Query queryObject,
        final int transform, int pageNumber, int pageSize)
    {
        try
        {
            final ScrollableResults scrollableResults = queryObject.scroll();
            scrollableResults.last();
            int totalCount = scrollableResults.getRowNumber();
            totalCount = totalCount >= 0 ? totalCount + 1 : 0;
            if (pageNumber > 0 && pageSize > 0)
            {
                queryObject.setFirstResult(this.calculateFirstResult(pageNumber, pageSize));
                queryObject.setMaxResults(pageSize);
            }
            // Unchecked transformation because Set object is reused, cannot be strongly typed.
            Set results = new LinkedHashSet(queryObject.list());
            transformEntities(transform, results);
            return new PaginationResult(results.toArray(new Object['['/]results.size()[']'/]), totalCount);
        }
        catch (HibernateException ex)
        {
            throw super.convertHibernateAccessException(ex);
        }
    }

    // spring-hibernate-dao-base merge-point

}	[/file]
[/template]

[template public asParameter(property : Property)]
[property.convertToJavaType()/] [property.name/]
[/template]

[query public getAllStrutureClasses(aClass : Class) : Sequence(Class) = 
aClass->asSequence()->union(
if(aClass.superClass->notEmpty()) then
	aClass.superClass->asSequence()->first().getAllStrutureClasses()
else
	Sequence{}
endif)
 
/]

