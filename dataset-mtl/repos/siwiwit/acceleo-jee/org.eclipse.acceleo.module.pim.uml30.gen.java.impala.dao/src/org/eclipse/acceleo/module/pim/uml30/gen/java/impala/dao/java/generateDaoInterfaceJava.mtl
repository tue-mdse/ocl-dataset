[comment encoding = UTF-8 /]
[module generateDaoInterfaceJava('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::dao::common::daoPathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::pathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::acceleo::module::pim::uml21::gen::java::common::requests /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::requests /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::dao::common::daoUtil /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::main::common::mainCommon /]
[import org::acceleo::module::pim::uml21::gen::java::common::compositeUtil /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::dao::common::daoCommon /]
[template public generateDaoInterfaceJava(aClass : Class)]
	
	[file (aClass.getModel().generateProjectFolder().concat(aClass.getModel().pathToGeneratedMainJava()).concat('/').concat(aClass.generateJavaPackagePath()).concat('/').concat(aClass.name).concat('Dao.java'), false, 'UTF-8')]
package [aClass.generateJavaPackage()/];

// [protected ('for imports')]
import java.util.Collection;
import java.util.Set;
import dao.common.PaginationResult;

[if (aClass.attribute.type->select(getProperty('java.typeconversion.' + name) = 'Date')->size() > 0)]
import java.util.Date;
[/if]

[for (prop:Property|aClass.getOppositeAttributes())]
	[if (class.generateJavaPackage() <> prop.type.generateJavaPackage())]
import [prop.type.generateJavaPackage()/].[prop.type.name/];
	[/if]
[/for]
[if (aClass.superClass->asSequence()->notEmpty())]
import [aClass.superClass.generateJavaPackage()/].[aClass.superClass.name/];
[/if]
[for (aDtoClass:Classifier | aClass.ownedOperation.ownedParameter.type->select(aType:Type|aType.name.toLower() <> 'void' and aType.name.toLower() <> 'string')
	->filter(Classifier)->asSet()->union(aClass.getRelatedDtos().oclAsType(Classifier)->asSet()))]
	[if (aClass.generateJavaPackage() <> aDtoClass.generateJavaPackage())]
import [aDtoClass.generateJavaPackage()/].[aDtoClass.name/];
	[/if]
[/for]


import dao.common.Search;
// [/protected] for imports


/**
 * This class represents a timecard submitted by a person.
 * @see Timecard
 */
public interface [aClass.name.toUpperFirst()/]Dao
{
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes no transformation will occur.
     */
    static final int TRANSFORM_NONE = 0;
	
	[for (aClass.getDtoDependencies())]
		[let aDtoClass : Class= self]
    /**
     * This constant is used as a transformation flag; entities can be converted automatically into value objects
     * or other types, different methods in a class implementing this interface support this feature: look for
     * an <code>int</code> parameter called <code>transform</code>.
     * <p>
     * This specific flag denotes entities must be transformed into objects of type
     * {@link [aDtoClass.name.toUpperFirst()/]}.
     */
    int TRANSFORM_[aDtoClass.name.toUpper()/] = [i+1/];

    /**
     * Copies the fields of the specified entity to the target value object. This method is similar to
     * to[aDtoClass.name.toUpperFirst()/](), but it does not handle any attributes in the target
     * value object that are "read-only" (as those do not have setter methods exposed).
     * @param source
     * @param target
     */
    void to[aDtoClass.name.toUpperFirst()/](
        [aClass.name.toUpperFirst()/] source,
        [aDtoClass.name.toUpperFirst()/] target);

    /**
     * Converts this DAO's entity to an object of type {@link [aDtoClass.name.toUpperFirst()/]}.
     * @param entity
     * @return [aDtoClass.name.toUpperFirst()/]
     */
    [aDtoClass.name.toUpperFirst()/] to[aDtoClass.name.toUpperFirst()/]([aClass.name.toUpperFirst()/] entity);

    /**
     * Converts this DAO's entity to a Collection of instances of type {@link [aDtoClass.name.toUpperFirst()/]}.
     * @param entities
     */
    Collection<[aDtoClass.name.toUpperFirst()/]> to[aDtoClass.name.toUpperFirst()/]Collection(Collection<?> entities);

    /**
     * Converts this DAO's entity to an array of instances of type {@link [aDtoClass.name.toUpperFirst()/]}.
     * @param entities
     * @return [aDtoClass.name.toUpperFirst()/]['['/][']'/]
     */
    [aDtoClass.name.toUpperFirst()/]['['/][']'/] to[aDtoClass.name.toUpperFirst()/]Array(Collection<?> entities);

    /**
     * Copies the fields of {@link [aDtoClass.name.toUpperFirst()/]} to the specified entity.
     * @param source
     * @param target
     * @param copyIfNull If FALSE, the value object's field will not be copied to the entity if the value is NULL. If TRUE,
     * it will be copied regardless of its value.
     */
    void [aDtoClass.name.toLowerFirst()/]ToEntity(
        [aDtoClass.name.toUpperFirst()/] source,
        [aClass.name.toUpperFirst()/] target,
        boolean copyIfNull);

    /**
     * Converts a Collection of instances of type {@link [aDtoClass.name.toUpperFirst()/]} to this
     * DAO's entity.
     * @param instances
     */
    void [aDtoClass.name.toLowerFirst()/]ToEntityCollection(Collection<?> instances);

    /**
     * Converts an instance of type {@link [aDtoClass.name.toUpperFirst()/]} to this DAO's entity.
     * @param taskVO
     * @return [aClass.name.toUpperFirst()/]
     */
    [aClass.name.toUpperFirst()/] [aDtoClass.name.toLowerFirst()/]ToEntity([aDtoClass.name.toUpperFirst()/] [aDtoClass.name.toLowerFirst()/]);

		[/let]
	[/for]

    /**
     * Transforms the given results to a collection of {@link [aClass.name.toUpperFirst()/]}
     * instances (this is useful when the returned results contains a row of data and you want just entities only).
     *
     * @param results the query results.
     */
    void toEntities(final Collection<?> results);

    /**
     * Gets an instance of [aClass.name.toUpperFirst()/] from the persistent store.
     * @param id
     * @return [aClass.name.toUpperFirst()/]
     */
    [aClass.genEntityClassName()/] get([aClass.getPrimaryTypeName(true)/] id);
    /**
     * <p>
     * Does the same thing as {@link #get(Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>.

     *
     * @param transform flag to determine transformation type.
     * @param id the identifier of the entity to get.
     * @return either the entity or the object transformed from the entity.
     */
    Object get(int transform, [aClass.getPrimaryTypeName(true)/] id);

    /**
     * Loads an instance of [aClass.genEntityClassName()/] from the persistent store.
     * @param id
     * @return [aClass.genEntityClassName()/]
     */
    [aClass.genEntityClassName()/] load(Long id);

    /**
     * <p>
     * Does the same thing as {@link #load(Long)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined in this class then the result <strong>WILL BE</strong> passed through an operation which can
     * optionally transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform flag to determine transformation type.
     * @param id the identifier of the entity to load.
     * @return either the entity or the object transformed from the entity.
     */
    Object load(int transform, Long id);

    /**
     * Loads all entities of type {@link [aClass.genEntityClassName()/]}.
     *
     * @return the loaded entities.
     */
    Collection<[aClass.genEntityClassName()/]> loadAll();

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @return the loaded entities.
     */
    Collection<?> loadAll(final int transform);

    /**
     * <p>
     * Does the same thing as {@link #loadAll()} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    Collection<?> loadAll(final int pageNumber, final int pageSize);

    /**
     * <p>
     * Does the same thing as {@link #loadAll(int)} with an
     * additional two arguments called <code>pageNumber</code> and <code>pageSize</code>. The <code>pageNumber</code>
     * argument allows you to specify the page number when you are paging the results and the pageSize allows you to specify the size of the
     * page retrieved.
     * </p>
     *
     * @param transform the flag indicating what transformation to use.
     * @param pageNumber the page number to retrieve when paging results.
     * @param pageSize the size of the page to retrieve when paging results.
     * @return the loaded entities.
     */
    Collection<?> loadAll(final int transform, final int pageNumber, final int pageSize);

    /**
     * Creates an instance of [aClass.genEntityClassName()/] and adds it to the persistent store.
     * @param [aClass.name/]
     * @return [aClass.genEntityClassName()/]
     */
    [aClass.genEntityClassName()/] create([aClass.genEntityClassName()/] [aClass.name/]);

    /**
     * <p>
     * Does the same thing as {@link #create([aClass.name.toUpperFirst()/])} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param [aClass.name/]
     * @return Object
     */
    Object create(int transform, [aClass.genEntityClassName()/] [aClass.name/]);

    /**
     * Creates a new instance of [aClass.genEntityClassName()/] and adds
     * from the passed in <code>entities</code> collection
     *
     * @param entities the collection of [aClass.genEntityClassName()/]
     * instances to create.
     *
     * @return the created instances.
     */
    Collection<[aClass.genEntityClassName()/]> create(Collection<[aClass.genEntityClassName()/]> entities);

    /**
     * <p>
     * Does the same thing as {@link #create([aClass.name.toUpperFirst()/])} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform
     * @param entities
     * @return Collection
     */
    Collection<?> create(int transform, Collection<[aClass.genEntityClassName()/]> entities);

    /**
     * <p>
     * Creates a new <code>[aClass.genEntityClassName()/]</code>
     * instance from only <strong>required</strong> properties (attributes
     * and association ends) and adds it to the persistent store.
     * </p>
	[for (aProperty : Property | aClass.classAttributes())]
     * @param [aProperty.name.toLowerFirst()/]
	[/for]
     * @return [aClass.genEntityClassName()/]
     */
    [aClass.genEntityClassName()/] create(
        [aClass.classAttributes()->select(not (isPK())).asParameter()->sep(', ')/]);

    /**
     * <p>
     * Does the same thing as {@link #create([aClass.name.toUpperFirst()/]Status, Date, String)} with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * the returned entity will <strong>NOT</strong> be transformed. If this flag is any of the other constants
     * defined here then the result <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entity (into a value object for example). By default, transformation does
     * not occur.
     * </p>
     * @param transform flag to determine transformation type.
	[for (aProperty : Property | aClass.classAttributes())]
     * @param [aProperty.name.toLowerFirst()/]
	[/for]
     * @return Object
     */
    Object create(
        int transform[if (aClass.classAttributes()->notEmpty())], [aClass.classAttributes()->filter(Property)->select(not (isPK())).asParameter()->sep(', ')/][/if]
        );

    /**
     * Updates the <code>[aClass.name/]</code> instance in the persistent store.
     * @param [aClass.name/]
     */
    void update([aClass.genEntityClassName()/] [aClass.name/]);

    /**
     * Updates all instances in the <code>entities</code> collection in the persistent store.
     * @param entities
     */
    void update(Collection<[aClass.genEntityClassName()/]> entities);

    /**
     * Removes the instance of [aClass.genEntityClassName()/] from the persistent store.
     * @param [aClass.name/]
     */
    void remove([aClass.genEntityClassName()/] [aClass.name/]);

    /**
     * Removes the instance of [aClass.genEntityClassName()/] having the given
     * <code>identifier</code> from the persistent store.
     * @param id
     */
    void remove(Long id);

    /**
     * Removes all entities in the given <code>entities</code> collection.
     * @param entities
     */
    void remove(Collection<[aClass.genEntityClassName()/]> entities);

	[for (anSimpleOperation : Operation | aClass.ownedOperation->select(oper:Operation|oper.isFinder()))]
[anSimpleOperation.generateJavadoc()/]
    [anSimpleOperation.generateReturn()/] [anSimpleOperation.name.toLowerFirst()/]([anSimpleOperation.generateParameters()/]);
	[/for]
	
    /**
     * Does the same thing as {@link #search(int, Search)} but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param transform the transformation flag.
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link PaginationResult} instance.
     */
    PaginationResult search(final int transform, final int pageNumber, final int pageSize, final Search search);

    /**
     * Does the same thing as {@link #search(Search)} but with an
     * additional two flags called <code>pageNumber</code> and <code>pageSize</code>. These flags allow you to
     * limit your data to a specified page number and size.
     *
     * @param pageNumber the page number in the data to retrieve
     * @param pageSize the size of the page to retrieve.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search wrapped in a {@link PaginationResult} instance.
     */
    PaginationResult search(final int pageNumber, final int pageSize, final Search search);

    /**
     * Does the same thing as {@link #search(Search)} but with an
     * additional flag called <code>transform</code>. If this flag is set to <code>TRANSFORM_NONE</code> then
     * finder results will <strong>NOT</strong> be transformed during retrieval.
     * If this flag is any of the other constants defined here
     * then results <strong>WILL BE</strong> passed through an operation which can optionally
     * transform the entities (into value objects for example). By default, transformation does
     * not occur.
     *
     * @param transform the transformation flag.
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    Set<?> search(final int transform, final Search search);

    /**
     * Performs a search using the parameters specified in the given <code>search</code> object.
     *
     * @param search the search object which provides the search parameters and pagination specification.
     * @return any found results from the search.
     */
    Set<[aClass.genEntityClassName()/]> search(final Search search);

    /**
     * Allows transformation of entities into value objects
     * (or something else for that matter), when the <code>transform</code>
     * flag is set to one of the constants defined in <code>org.andromda.timetracker.domain.[aClass.name.toUpperFirst()/]Dao</code>, please note
     * that the {@link #TRANSFORM_NONE} constant denotes no transformation, so the entity itself
     * will be returned.
     * <p>
     * This method will return instances of these types:
     * <ul>
     *   <li>{@link [aClass.genEntityClassName()/]} - {@link #TRANSFORM_NONE}</li>
	[for (aDtoClass:Class|aClass.getDtoDependencies())]
     *   <li>{@link [aDtoClass.name.toUpperFirst()/]} - {@link #TRANSFORM_aDtoClass}</li>
	[/for]
     * </ul>
     *
     * If the integer argument value is unknown {@link #TRANSFORM_NONE} is assumed.
     *
     * @param transform one of the constants declared in {@link org.andromda.timetracker.domain.[aClass.name.toUpperFirst()/]Dao}
     * @param entity an entity that was found
     * @return the transformed entity (i.e. new value object, etc)
     * @see #transformEntities(int,Collection)
     */
    Object transformEntity(final int transform, final [aClass.genEntityClassName()/] entity);

    /**
     * Transforms a collection of entities using the
     * {@link #transformEntity(int,[aClass.genEntityClassName()/])}
     * method. This method does not instantiate a new collection.
     * <p>
     * This method is to be used internally only.
     *
     * @param transform one of the constants declared in <code>org.andromda.timetracker.domain.[aClass.name.toUpperFirst()/]Dao</code>
     * @param entities the collection of entities to transform
     * @see #transformEntity(int,[aClass.genEntityClassName()/])
     */
    void transformEntities(final int transform, final Collection<?> entities);

    // spring-dao merge-point

		[comment][for (anSimpleOperation : Operation | aClass.ownedOperation->select(oper:Operation|oper.isFinder()))]
	[anSimpleOperation.generateJavadoc()/]
	[anSimpleOperation.generateReturn()/] [anSimpleOperation.name/]([anSimpleOperation.generateParameters()/]);
		[/for][/comment]
}	
	[/file]
	
[/template]

[query public getDtoDependencies(anEntity : Class) : Set(Class) = 
anEntity.clientDependency.supplier->filter(Class)->select(aClass:Class|aClass.isDto())->asSet()
/]

[template public asParameter(property:Property) ]
[property.convertToJavaType()/] [property.paramName()/]
[/template]

