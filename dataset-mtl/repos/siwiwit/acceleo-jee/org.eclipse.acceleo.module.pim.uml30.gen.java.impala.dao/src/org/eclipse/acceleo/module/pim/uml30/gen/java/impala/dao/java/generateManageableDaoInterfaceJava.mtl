[comment encoding = UTF-8 /]
[module generateManageableDaoInterfaceJava('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::pathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::acceleo::module::pim::uml21::gen::java::common::compositeUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::acceleo::module::pim::uml21::gen::java::common::requests /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::dao::common::daoPathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::main::common::mainCommon /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::dao::common::daoCommon /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::build::common::entityUtil /]
[import org::acceleo::module::pim::uml21::services::uml2services /]
[template public generateManageableDaoInterfaceJava(anEntity : Class) ? (anEntity.isManageableEntity())]
	[file (anEntity.getModel().generateProjectFolder().concat(anEntity.getModel().pathToGeneratedMainJava()).concat('/').concat(anEntity.generateJavaPackagePath()).concat('/crud/').concat(anEntity.name.toUpperFirst()).concat('ManageableDao.java'), false, 'UTF-8')]
package [anEntity.generateJavaPackage()/].crud;

[anEntity.generateImports()/]
	[for (aDao : Class | anEntity.classAttributes().type->filter(Class)->select(aClass:Class|aClass.isEntity())->including(anEntity))]
		[if (aDao.generateJavaPackage()<>anEntity.generateJavaPackage().concat('.crud'))]
import [if (aDao.generateJavaPackage().size()>0)][aDao.generateJavaPackage()/].[/if][aDao.genEntityClassName()/];
		[/if]
	[/for]
import java.util.List;
import java.util.Map;

public interface [anEntity.name.toUpperFirst()/]ManageableDao {
    /**
	[for (aProp : Property | anEntity.classAttributes())]
     * @param [aProp.name/] 
	[/for]
     * @return [anEntity.name.toUpperFirst()/]
     */
    public [anEntity.name.toUpperFirst()/] create([anEntity.generateDaoManagerFunctionParam()/]);

    /**
     * @param id
     * @return [anEntity.name.toUpperFirst()/]
     */
    public [anEntity.name.toUpperFirst()/] readById([anEntity.getPrimaryTypeName(true)/] id);

    /**
	[for (aProp : Property | anEntity.classAttributes())]
     * @param [aProp.name/] 
	[/for]
     * @return List<[anEntity.name.toUpperFirst()/]>
     */
    public List<[anEntity.name.toUpperFirst()/]> read([anEntity.generateDaoManagerFunctionParam()/]);


    /**
     * @return List<[anEntity.name.toUpperFirst()/]>
     */
    public List<[anEntity.name.toUpperFirst()/]> readAll();

    /**
	[for (aProp : Property | anEntity.classAttributes())]
     * @param [aProp.name/] 
	[/for]
     * @return [anEntity.name.toUpperFirst()/]
     */
    public [anEntity.name.toUpperFirst()/] update([anEntity.generateDaoManagerFunctionParam()/]);

    /**
     * @param ids
     */
    public void delete([anEntity.getPrimaryTypeName(true)/]['[]'/] ids);

    /**
     * @return BackingLists Map<String,Object>
     */
    public Map<String,Object> readBackingLists();


}
	[/file]
[/template]

