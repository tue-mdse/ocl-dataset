[module test_action('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::acceleo::module::pim::uml21::gen::java::struts::common::common/]
[import org::acceleo::module::pim::uml21::gen::java::struts::common::widgets_mappings/]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics /]
[import org::acceleo::module::pim::uml21::services::uml2services /]
[import org::acceleo::module::pim::uml21::services::stringservice /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[comment][template public fullFilePath(class:Class)]
[if (class.hasStereotype(getProperty('Screen')))]
[class.pathToTestJava()/]/[class.scenarioPackage().toPath()/]/test/htmlunit/Test[class.name/]Action.java
[/if]

[/template][/comment]


[template public generateTestAction(class:Class)? (class.hasStereotype(getProperty('Screen')))]
[comment This template is called by the main module file /]
[file (class.fullFilePath(class.pathToTestJava(), class.scenarioPackage().toPath().concat('/test/htmlunit'), 'Test'.concat(class.name).concat('Action.java')), false))]
package [class.scenarioPackage()/].test.htmlunit;

import java.net.URL;
import java.util.ResourceBundle;
import java.util.List;

import junit.framework.TestCase;

import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.html.*;

/**
 * HtmlUnit testing for <strong>[class.name/] Form</strong>
 * Scenario : [class._package.name/]
 *
 */
public class Test[class.name/]Action extends TestCase {

	/**
	 * initialize the TestCase.
	 * 
	 * @throws Exception if the test fails
	 */
	public void setUp() throws Exception {
		super.setUp();
		// [protected ('setUp')]		
		// [/protected]
	}

	/**
	 * terminate the TestCase.
	 * 
	 * @throws Exception if the test fails
	 */
	public void tearDown() throws Exception {
		super.tearDown();
		// [protected ('tearDown')]	
		// [/protected]
	}

	/**
	 * Constructor
	 */
	public Test[class.name/]Action(String testName) {
		super(testName);
		// [protected ('testAction')]		
		// [/protected]
	}
[comment  A test is created for each operation /]
[for (class.ownedOperation)]
	/**
	  * Regression test for "[class.name/]" action of class [class.name/]Action
	  * @param Nothing
	  * @return Nothing
	  * @throws Exception
	  */
	public void test[class.name/][class.name/]Action() throws Exception {
	    final WebClient webClient = new WebClient();
	    
	    ResourceBundle r = ResourceBundle.getBundle("tests");
	    final URL url = new URL(r.getString("fr.website.url") + "/[class.name/]Action.do?event=init");
	    final HtmlPage page1 = (HtmlPage)webClient.getPage(url);
	    final HtmlForm form = page1.getFormByName("[class.name/]Form");
[comment Iterates on each attribute of the class /]
	[for (prop:Property|class.ownedAttribute)]
		[if (not (prop.hasStereotype(getProperty('Title'))) and not (prop.hasStereotype(getProperty('List'))) and not (prop.hasStereotype(getProperty('Table'))))]
		final [prop.convertToHTMLUnitTypeFromStereotype()/] [prop.name/] = ([prop.convertToHTMLUnitTypeFromStereotype()/])form.get[prop.convertToHTMLUnitGetterTypeFromStereotype()/]ByName("[prop.name.toLowerFirst()/]");
		[/if]
	[/for]
	    final HtmlSubmitInput [class.name/] = (HtmlSubmitInput)form.getInputByName("[class.name/]");
	    
	    assertEquals("[for (prop:Property|class.ownedAttribute)][if (prop.hasStereotype(getProperty('Title')))][prop.name/][/if][/for]", page1.getTitleText());

		// [protected ('action')]	    
	    //TODO : initialize form here
	    
	    //Subit the form and get the result page
	    final HtmlPage page2 = (HtmlPage)[class.name/].click();

	    //TODO : validate resulting page
	    
		// [/protected]
	}
[/for]
	// [protected ('other tests')]	
	// [/protected]
}
[/file]
[/template]



