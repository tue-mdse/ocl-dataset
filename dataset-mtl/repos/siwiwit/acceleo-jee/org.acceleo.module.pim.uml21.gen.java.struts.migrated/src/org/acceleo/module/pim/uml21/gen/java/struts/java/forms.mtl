[module forms('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::struts::common::common/]
[import org::acceleo::module::pim::uml21::gen::java::struts::common::widgets_mappings/]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::acceleo::module::pim::uml21::services::stringservice /]
[import org::acceleo::module::pim::uml21::services::uml2services /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[comment][template public fullFilePath(class:Class)]
[if (class.hasStereotype(getProperty('Screen')))]
[class.pathToMainJava()/]/[class.scenarioPackage().toPath()/]/forms/[class.name/]Form.java
[/if]

[/template][/comment]


[template public generateForm(class:Class)? (class.hasStereotype(getProperty('Screen')))]
[comment This template is called by the main module file /]
[file (class.fullFilePath(class.pathToMainJava(), class.scenarioPackage().toPath().concat('/forms'), class.name.concat('Form.java')), false))]
package [class.scenarioPackage()/].forms;

// [protected ('imports')] 
// for import
import java.util.ArrayList;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;

import org.apache.struts.action.ActionMapping;
import org.apache.struts.validator.ValidatorForm;

// [/protected] for import

/**
 * Implementation of <strong>[class.name/] Form</strong>
 * Scenario : [class._package.name/]
 *
 */
public class [class.name/]Form extends ValidatorForm {
	private static final long serialVersionUID = 1L;

    /**
     * Attributes
     */
[for (prop:Property|class.ownedAttribute)]
	[if (not (prop.hasStereotype(getProperty('Title'))))]
		[if (prop.hasStereotype(getProperty('List')) or prop.hasStereotype(getProperty('Table')))]
	public [prop.convertToJavaTypeFromStereotype()/] [prop.name.toLowerFirst()/] = new ArrayList();	
		[elseif (prop.hasStereotype(getProperty('Title')))]
	public Collection [prop.name.toLowerFirst()/]Values = new ArrayList();
	public String [prop.name.toLowerFirst()/] = null;	
		[else]
	public [prop.convertToJavaTypeFromStereotype()/] [prop.name.toLowerFirst()/] = null;
		[/if]
	[/if]
[/for]

[for (prop:Property|class.ownedAttribute)]
	[if (not (prop.hasStereotype(getProperty('Title'))))]
		[if (prop.hasStereotype(getProperty('Combobox')))]
	/**
	 * Return [prop.name/] combobox values
	 * @return all the [prop.name/] combobox values
	 */
	public Collection get[prop.name.toUpperFirst()/]Values() {
		return [prop.name.toLowerFirst()/]Values;
	}
	
	/**
	 * Set a values to [prop.name/].combobox
	 * @param the  [prop.name/] combobox values
	 */
	 public void set[prop.name.toUpperFirst()/]Values(Collection [prop.name.toLowerFirst()/]Values) {
		this.[prop.name.toLowerFirst()/]Values = [prop.name.toLowerFirst()/]Values;
	}	

	/**
	 * Return [prop.name/]
	 * @return 
	 */
	 public String get[prop.name.toUpperFirst()/]() {
		return [prop.name.toLowerFirst()/];
	}
	
	/**
	 * Set a value to parameter [prop.name/].
	 * @param [prop.name/] [comment  ownedComment.body /]
	 */
	 public void set[prop.name.toUpperFirst()/](String [prop.name.toLowerFirst()/]) {
		this.[name.toLowerFirst()/] = [prop.name.toLowerFirst()/];
	}
[else]
	/**
	 * Return [prop.name/]
	 * @return [prop.ownedComment._body/]
	 */
	 public [prop.convertToJavaTypeFromStereotype()/] get[prop.name.toUpperFirst()/]() {
		return [prop.name.toLowerFirst()/];
	}
	
	/**
	 * Set a value to parameter [prop.name/].
	 * @param [prop.name/] [prop.ownedComment._body/]
	 */
	 public void set[prop.name.toUpperFirst()/]([prop.convertToJavaTypeFromStereotype()/] [prop.name.toLowerFirst()/]) {
		this.[prop.name.toLowerFirst()/] = [prop.name.toLowerFirst()/];
	}
		[/if]
	[/if]
[/for]

	/**
	 * Reset all properties to their default values.
	 *
	 * @param mapping The mapping used to select this instance
	 * @param request The servlet request we are processing
	 */
	public void reset(ActionMapping mapping, HttpServletRequest request) {
[for (prop:Property|class.ownedAttribute)]
	[if (not (prop.hasStereotype(getProperty('Title'))))]
		[if (prop.hasStereotype(getProperty('List')) or prop.hasStereotype(getProperty('Table')))]
		this.[prop.name.toLowerFirst()/].clear();
		[elseif (prop.hasStereotype(getProperty('Combobox')))]
		this.[prop.name.toLowerFirst()/]Values.clear();
		this.[prop.name.toLowerFirst()/] = null;		
		[else]
		this.[prop.name.toLowerFirst()/] = null;
		[/if]
	[/if]
[/for]
	}

// [protected ('other methods')]
// [/protected]
	
}
[/file]
[/template]



