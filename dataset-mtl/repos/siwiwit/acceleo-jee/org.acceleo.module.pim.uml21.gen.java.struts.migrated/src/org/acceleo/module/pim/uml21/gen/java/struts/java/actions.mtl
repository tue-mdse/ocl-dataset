[module actions('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::struts::common::common/]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::acceleo::module::pim::uml21::services::stringservice /]
[import org::acceleo::module::pim::uml21::services::uml2services /]

[comment][template public fullFilePath(class:Class) ]
[if (class.hasStereotype(getProperty('Screen')))]
[class.pathToMainJava()/]/[class.scenarioPackage().toPath()/]/actions/[class.name/]Action.java
[/if]

[/template][/comment]


[template public generateAction(class:Class)? (class.hasStereotype(getProperty('Screen')))]
[comment This template is called by the main module file /]
[file (class.fullFilePath(class.pathToMainJava(), class.scenarioPackage().toPath().concat('/actions'), class.name.concat('Action.java')), false))]
package [class.scenarioPackage()/].actions;

// [protected ('imports')] 
// for import 
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import [class.scenarioPackage()/].forms.[class.name/]Form;

// [/protected] for import

/**
 * Implementation of <strong>[class.name/] Action</strong>
 * Scenario : [class._package.name/]
 *
 */
public class [class.name/]Action extends org.apache.struts.actions.DispatchAction {
    /**
     * Commons Logging instance.
     */
	private static final Log log = LogFactory.getLog([class.name/]Action.class);

    /**
     * Forward codes.
     */
	public final static String PAGE_SELF = "self"; //$NON-NLS-1$
[comment  class association navigation /]
[for (prop:Property|class.getOppositeAttributes())]
	public final static String PAGE_[prop.type.name.toUpper()/] = "[prop.type.name.toLowerFirst()/]"; //$NON-NLS-1$
[/for]

[comment  init action method generation (Dispach)/]    /**
     * Process the specified HTTP request for <strong>init</strong> event.
     * 
     * @param mapping The ActionMapping used to select this instance
     * @param form The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     *
     * @exception Exception if an input/output error or servlet exception occurs
     */
	public ActionForward init(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		log.debug("Starting");
		String returnCode = PAGE_SELF;
		[class.name/]Form [class.name.toLowerFirst()/]Form = ([class.name/]Form)form;

		// [protected ('method init')]		
		// TODO Write here the action code for init
		// [/protected]
	
		return mapping.findForward(returnCode);
	} 

[comment  actions methods generation (Dispach)/]
[for (oper:Operation|class.ownedOperation)]
    /**
     * Process the specified HTTP request for <strong>[oper.name/]</strong> event.
     * 
     * @param mapping The ActionMapping used to select this instance
     * @param form The optional ActionForm bean for this request (if any)
     * @param request The HTTP request we are processing
     * @param response The HTTP response we are creating
     *
     * @exception Exception if an input/output error or servlet exception occurs
     */
	public ActionForward [oper.name/](ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		log.debug("Starting");
		String returnCode = PAGE_SELF;
		[class.name/]Form [class.name.toLowerFirst()/]Form = ([class.name/]Form)form;
		// [protected ('method')]		
		// TODO Write here the action code for [oper.name/]
		// [/protected]
		return mapping.findForward(returnCode);
	}
[/for]

// [protected ('user methods')]
// [/protected]

}
[/file]
[/template]



