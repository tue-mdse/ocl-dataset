[comment encoding = UTF-8 /]
[module generateManageableDtoJava('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::common::common/]
[import org::acceleo::module::pim::uml21::gen::java::common::requests/]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics/]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes/]
[import org::acceleo::module::pim::uml21::gen::java::common::structure/]
[import org::acceleo::module::pim::uml21::services::uml2services /]
[import org::acceleo::module::pim::uml21::services::stringservice /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::dto::common::dtoPathUtil /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::pathUtil /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::requests /]
[import org::acceleo::module::pim::uml21::gen::java::spring::common /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::entityUtil /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::main::common::mainCommon /]
[import org::acceleo::module::pim::uml21::gen::java::common::compositeUtil /]
[template public generateManageableDtoJava(anEntity : Class) ? (anEntity.isManageableEntity())]
	[file (anEntity.getModel().generateProjectFolder().concat(anEntity.getModel().pathToGeneratedMainJava()).concat('/').concat(anEntity.generateJavaPackagePath()).concat('/crud/').concat(anEntity.name.toUpperFirst()).concat('ValueObject.java'), false, 'UTF-8')]
package [anEntity.generateJavaPackage()/].crud;

import java.io.Serializable;
import java.util.Date;

/**
 * 
 */
public class [anEntity.name.toUpperFirst()/]ValueObject
    implements Serializable
{

		[for (aProperty : Property | anEntity.getAllEntityParents()->including(anEntity).ownedAttribute)]
    private [aProperty.convertToJavaDtoType()/] [aProperty.name.toLowerFirst()/];

    /**
     * 
     * @return [aProperty.name.toLowerFirst()/]
     */
    public [aProperty.convertToJavaDtoType()/] get[aProperty.name.toUpperFirst()/]()
    {
        return this.[aProperty.name.toLowerFirst()/];
    }

    /**
     * 
     * @param [anEntity.name.toLowerFirst()/]In
     */
    public void set[aProperty.name.toUpperFirst()/]([aProperty.convertToJavaDtoType()/] [aProperty.name.toLowerFirst()/]In)
    {
        this.[aProperty.name.toLowerFirst()/] = [aProperty.name.toLowerFirst()/]In;
    }
		[/for]

	private [anEntity.getPrimaryTypeName(true)/] id;

    /**
     * 
     * @return id
     */
    public [anEntity.getPrimaryTypeName(true)/] getId()
    {
        return this.id;
    }

    /**
     * 
     * @param idIn
     */
    public void setId([anEntity.getPrimaryTypeName(true)/] idIn)
    {
        this.id = idIn;
    }

		[for (aProperty : Property | (anEntity.getAllEntityParents()->including(anEntity)).getOppositeAttributes(false)->select(aField:Property | (aField.lower=1 or aField.lower=0) and ((aField.oppositeAttribute().upper<0 or aField.oppositeAttribute().upper>1) or aField.isNavigable())))]
    private [aProperty.type.oclAsType(Class).getPrimaryTypeName(true)/][aProperty.getArrayMarks()/] [aProperty.name.toLower()/];

    /**
     * 
     * @return roles
     */
    public [aProperty.type.oclAsType(Class).getPrimaryTypeName(true)/][aProperty.getArrayMarks()/] get[aProperty.name.toUpperFirst()/]()
    {
        return this.[aProperty.name.toLower()/];
    }

    /**
     * 
     * @param [aProperty.name.toLower()/]In
     */
    public void set[aProperty.name.toUpperFirst()/]([aProperty.type.oclAsType(Class).getPrimaryTypeName(true)/][aProperty.getArrayMarks()/] [aProperty.name.toLower()/]In)
    {
        this.[aProperty.name/] = [aProperty.name.toLower()/]In;
    }

    private [aProperty.type.oclAsType(Class).getPrimaryTypeName(true)/][aProperty.getArrayMarks()/]['[]'/] [aProperty.name.toLower()/]Labels;

    /**
     * 
     * @return [aProperty.name/]
     */
    public [aProperty.type.oclAsType(Class).getPrimaryTypeName(true)/][aProperty.getArrayMarks()/]['[]'/] get[aProperty.name.toUpperFirst()/]Labels()
    {
        return this.[aProperty.name.toLower()/]Labels;
    }

    /**
     * 
     * @param [aProperty.name.toLower()/]LabelsIn
     */
    public void set[aProperty.name.toUpperFirst()/]Labels([aProperty.type.oclAsType(Class).getPrimaryTypeName(true)/][aProperty.getArrayMarks()/]['[]'/] [aProperty.name.toLower()/]LabelsIn)
    {
        this.[aProperty.name.toLower()/]Labels = [aProperty.name.toLower()/]LabelsIn;
    }

		[/for]

}	
	[/file]
[/template]

[template public getArrayMarks(aProperty : Property) post (trim())]
	[if (not aProperty.type.oclIsTypeOf(Enumeration))]
		[if (aProperty.oppositeAttribute()=null)]
			[if (aProperty.upper=0 or aProperty.upper=1)]
			[else]
['[]'/]
			[/if]
		[else]
			[if (aProperty.upper=0 or aProperty.upper=1)]
			[else]
['[]'/]
			[/if]
		[/if]
	[/if]
[/template]
