[module daohibernatedirecttestjunit('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::hibernate::daohibernatecommon /]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::acceleo::module::pim::uml21::gen::java::common::requests /]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::acceleo::module::pim::uml21::services::stringservice /]
[import org::acceleo::module::pim::uml21::services::uml2services /]
[import org::acceleo::module::pim::uml21::gen::java::dao::api::daocommon /]

[template private fullFilePath(class:Class)]
	[if (class.isEntity())]
[class.pathToTestJava()/]/[class.hibernateTestPackage().toPath()/]/[class.daoInterfaceName()/]Test.java
	[/if]

[/template]


[template public generateHibernateDirectTest(class:Class)? (class.isEntity())]
[comment This template is called by the main module file /]
[file (class.fullFilePath(class.pathToTestJava(), class.hibernateTestPackage().toPath(), class.daoInterfaceName().concat('Test.java')), false))]
package [class.hibernateTestPackage()/];

// [protected ('imports')] for import 
	[if (class.attribute->select(type.convertToJavaType() = 'Date')->notEmpty())]
import java.util.Date;
	[/if]
	[if (class.ownedAttribute->select(upper > 1 or upper = -1)->notEmpty())]
import java.util.ArrayList;
import java.util.List;
	[/if]
import org.hibernate.Transaction;
import junit.framework.Assert;
import junit.framework.TestCase;

[class.importDaoException()/]
[class.importHibernateUtil()/]
import [class.eContainer(Model).daoFactoryQualifiedClassName()/];
import [class.daoInterfaceQualifiedName()/];
import [class.entityQualifiedName()/];
	[for (prop:Property|class.getOppositeAttributes())]
		[if (prop.lower <> 0)]
import [prop.type.entityQualifiedName()/];
		[/if]
	[/for]

// [/protected] for import

/**
 * Test class for [class.daoInterfaceName()/].
 */
public class [class.daoInterfaceName()/]Test extends TestCase {

    /**
     * The DAO for class [class.name/].
     */
    private [class.daoInterfaceName()/] dao;
    
    /**
     * The transaction that will be used.
     */
    private Transaction tx;

    /**
     * Sets up the test before its execution, by creating the dao and the
     * transaction.
     * @throws Exception if an unexpected exception occurs.
     */
    @Override
    protected void setUp() throws Exception {
        super.setUp();
        dao = [class.projectName().toUpperFirst()/]DaoFactory.get[class.name/]Dao();
        tx = HibernateUtil.currentSession().beginTransaction();
    }

    /**
     * Cleans up the test after its execution, by commiting the transaction in
     * order for the DB changes to become visible, and closing hibernate's
     * session.
     * @throws Exception if an unexpected exception occurs.
     */
    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
        tx.commit();
        HibernateUtil.closeSession();
    }

    /**
     * Tests the creation of the entity [class.name/].<br/>
     * <ul><li>Step 1 : Create an entity</li>
     * <li>Step 2 : Search the entity and verify it exists</li></ul>
     * @throws DaoException if an unexpected DAO exception occurs.
     */
    public final void testCreate[class.name/]() throws DaoException {
        // fill attributes with example values
        [class.name/] [class.name.toLowerFirst()/] = get[class.name/]Example();
        
        // Execute the tested code
        dao.create[class.name/]([class.name.toLowerFirst()/]);

        // Verify result
        boolean found = false;
        for ([class.name/] current[class.name/] : dao.findAll[class.name/]s()) {
            if (current[class.name/].equals([class.name.toLowerFirst()/])) {
                found = true;
            }
        }
        Assert.assertTrue("[class.name/] not created", found);
    }

    /**
     * Test the modification of an entity [class.name/].<br/>
     * <ul><li>Step 1 : Create an entity</li>
     * <li>Step 2 : Modify the entity</li>
     * <li>Step 3 : Search the entity and verify the modified values</li></ul>
     * @throws DaoException if an unexpected DAO exception occurs.
     */
    public final void testUpdate[class.name/]() throws DaoException {
        // Initialized the test
        [class.name/] [class.name.toLowerFirst()/] = get[class.name/]Example();
        dao.create[class.name/]([class.name.toLowerFirst()/]);

        // Execute the tested code
	[for (prop:Property|class.ownedAttribute)]
		[if (not (prop.hasStereotype('id')) and prop.upper = 1 and not (prop.isDerived) and not (prop.isReadOnly))]
        [class.name.toLowerFirst()/].set[prop.name.toLowerFirst()/]([prop.exampleValues2()/]);
		[/if]
	[/for]
        dao.update[class.name/]([class.name.toLowerFirst()/]);

        // Verify result
        boolean found = false;
        for ([class.name/] current[class.name/] : dao.findAll[class.name/]s()) {
            if (current[class.name/].equals([class.name.toLowerFirst()/])) {
                found = true;
	[for (prop:Property|class.ownedAttribute)]
		[if (not (prop.hasStereotype('id')) and prop.upper = 1 and not (prop.isDerived) and not (prop.isReadOnly))]
                Assert.assertEquals("Value [prop.name.toLowerFirst()/] not modified",
                        [prop.exampleValues2()/],
                        [prop.featuringClassifier.name.toLowerFirst()/].get[prop.name.toUpperFirst()/]());
		[/if]
	[/for]
            }
        }
        Assert.assertTrue("[class.name/] not found", found);
    }

    /**
     * Test the suppression of an entity [class.name/].<br/>
     * <ul><li>Step 1 : Create an entity</li>
     * <li>Step 2 : Delete the entity</li>
     * <li>Step 3 : Search the entity and verify it doesn't exist anymore</li>
     * </ul>
     * @throws DaoException if an unexpected DAO exception occurs.
     */
    public final void testDelete[class.name/]() throws DaoException {
        // Initialized the test
        [class.name/] [class.name.toLowerFirst()/] = get[class.name/]Example();
        dao.create[class.name/]([class.name.toLowerFirst()/]);
        
        // Execute the tested code
        dao.delete[class.name/]([class.name.toLowerFirst()/]);
        
        // Verify result
        boolean found = false;
        for ([class.name/] current[class.name/] : dao.findAll[class.name/]s()) {
            if (current[class.name/].equals([class.name.toLowerFirst()/])) {
                found = true;                
            }
        }
        Assert.assertFalse("[class.name/] not deleted", found);
    }

    /**
     * Test the search of all entities [class.name/].<br/>
     * <ul><li>Step 1 : Create many entities</li>
     * <li>Step 2 : Search all entities and verify the entities created are
     * found</li></ul>
     * @throws DaoException if an unexpected DAO exception occurs.
     */
    public final void testFindAll[class.name/]s() throws DaoException {
        // Verify number of element before testing
        int before = dao.findAll[class.name/]s().size();
        Assert.assertTrue("FindAll must return at least 0", before >= 0);
        
        // Add two elements
        [class.name/] [class.name.toLowerFirst()/]1 = get[class.name/]Example();
        dao.create[name/]([name.toLowerFirst()/]1);
                
        [class.name/] [class.name.toLowerFirst()/]2 = get[class.name/]Example();
        dao.create[class.name/]([class.name.toLowerFirst()/]2);

        // Verify result
        int after = dao.findAll[class.name/]s().size();
        Assert.assertEquals(
                "FindAll don't find the good number of elements", 
                2,
                after - before);
    }

[class.feature->filter(Operation).generateTest()/]

    /**
     * Creates an example of [class.name/].
     * @return Returns a new instance of class [class.name/], with fields filled
     * with example values.
     * @throws DaoException if an unexpected DAO exception occurs.
     */
    protected [class.name/] get[class.name/]Example() throws DaoException {
        // fill attributes with example values
        [class.name/] [class.name.toLowerFirst()/] = new [class.name/]();
[comment  Member attributes /]
	[for (prop:Property|class.ownedAttribute)]
		[if (not (prop.isDerived) and not (prop.isReadOnly))]
			[if (prop.upper = 1)]
        [class.name.toLowerFirst()/].set[prop.name.toLowerFirst()/]([prop.exampleValues()/]);
			[else]
        List<[prop.type.name/]> list[prop.name.toLowerFirst()/] = new ArrayList<[prop.type.name/]>();
        list[prop.name.toLowerFirst()/].add([prop.exampleValues()/]);
        [class.name.toLowerFirst()/].set[prop.name.toLowerFirst()/](list[prop.name.toUpperFirst()/]);
			[/if]
		[/if]
	[/for]
[comment  Composite relation required /]
	[for (prop:Property|class.getOppositeAttributes())]
		[if (prop.lower <> 0)]
            
        //  [protected ('examples')] for example of [prop.type.name/].[prop.name/] values        
		[prop.type.name/] [prop.name.toLowerFirst()/]Example = new [prop.type.name/]();
			[if (prop.upper = 1)]
        [prop.association.oppositeAttributeOf(prop.type.oclAsType(Classifier)).type.name.toLowerFirst()/].set[prop.name.toUpperFirst()/]([prop.name.toLowerFirst()/]Example);
			[else]
        [prop.association.oppositeAttributeOf(prop.type.oclAsType(Classifier)).type.name.toLowerFirst()/].get[prop.name.toUpperFirst()/]().add([prop.name.toLowerFirst()/]Example);
			[/if]
			[if (prop.opposite <> null)]
[comment  for bidirectionnal relation /]
				[if (prop.opposite.upper = 1)]
        [prop.name.toLowerFirst()/]Example.set[prop.opposite.name.toUpperFirst()/]([prop.class.name.toLowerFirst()/]);        
				[else]
        [prop.name.toLowerFirst()/]Example.get[opposite.name.toUpperFirst()/]().add([class.name.toLowerFirst()/]);        
				[/if]
			[/if]
        [prop.projectName().toUpperFirst()/]DaoFactory.get[prop.type.name/]Dao().create[prop.type.name/]([prop.name.toLowerFirst()/]Example);
        // [/protected] for example of [prop.type.name/].[prop.name/] values
		[/if]
	[/for]
        
        return [class.name.toLowerFirst()/];
    }
    
    /**
     * Creates a second example of [class.name/] with other values.
     * @return Returns a new instance of class [class.name/] with fields filled
     * with other test values.
     * @throws DaoException if an unexpected DAO exception occurs.
     */
    protected [class.name/] get[class.name/]Example2() throws DaoException {
        // fill attributes with example values
        [class.name/] [class.name.toLowerFirst()/] = new [class.name/]();
[comment  Member attributes /]
	[for (prop:Property|class.ownedAttribute)]
		[if (not (prop.isDerived) and not (prop.isReadOnly))]
			[if (prop.upper = 1)]
        [class.name.toLowerFirst()/].set[prop.name.toUpperFirst()/]([prop.exampleValues2()/]);
			[else]
        List<[prop.type.name/]> list[prop.name.toUpperFirst()/] = new ArrayList<[prop.type.name/]>();
        list[prop.name.toUpperFirst()/].add([prop.exampleValues2()/]);
        [class.name.toLowerFirst()/].set[prop.name.toUpperFirst()/](list[prop.name.toUpperFirst()/]);
			[/if]
		[/if]
	[/for]
[comment  Composite relation required /]
	[for (prop:Property|class.getOppositeAttributes())]
		[if (prop.lower <> 0)]
            
        // [protected ('examples2')] for example 2 of [prop.type.name/].[prop.name/] values        
		[prop.type.name/] [prop.name.toLowerFirst()/]Example = new [prop.type.name/]();
			[if (upper = 1)]
        [prop.association.oppositeAttributeOf(prop.type.oclAsType(Classifier)).type.name.toLowerFirst()/].set[prop.name.toUpperFirst()/]([prop.name.toLowerFirst()/]Example);
			[else]
        [prop.association.oppositeAttributeOf(prop.type.oclAsType(Classifier)).type.name.toLowerFirst()/].get[name.toUpperFirst()/]().add([name.toLowerFirst()/]Example);
			[/if]
			[if (prop.opposite <> null and prop.opposite.lower <> 0)]
[comment  for bidirectionnal relation /]
				[if (prop.opposite.upper = 1)]
        [prop.name.toLowerFirst()/]Example.set[prop.opposite.name.toUpperFirst()/]([class.name.toLowerFirst()/]);        
				[else]
        [prop.name.toLowerFirst()/]Example.get[prop.opposite.name.toUpperFirst()/]().add([class.name.toLowerFirst()/]);        
				[/if]
			[/if]
        [prop.projectName().toUpperFirst()/]DaoFactory.get[prop.type.name/]Dao().create[type.name/]([name.toLowerFirst()/]Example);
        // [/protected] for example 2 of [prop.type.name/].[prop.name/] values
		[/if]
	[/for]
        
        return [class.name.toLowerFirst()/];
    }
    
    // [protected ('specific tests')] of specific tests     
	// [/protected] of specific tests

}

[/file]
[/template]


[template public generateTest(operation:Operation)]
	[if (operation.hasStereotype(getProperty('find')))]
    [operation.findTest()/]
	[/if]

[/template]


[template public findTest(operation:Operation)]
    /**
     * Test the operation [name/].     
     * <!-- [protected ('test documentation')] of test documentation     
	 * <!-- [/protected] of test documentation
     */
    public void test[operation.name.toUpperFirst()/]() throws DaoException {    
        // [protected ('test operation')] of test[operation.name/]        
		// Initialized the test
        
        // Execute the tested code
        [operation.type.name/] [type.name.toLowerFirst()/] = dao.[operation.name/]([operation.generateParameterNames()/])        
        
        // Verify result
        Assert.assertNotNull("Result sould not be null", [operation.type.name.toLowerFirst()/]);
        
        // [/protected] of test[operation.name/]
    }
[/template]


[template public exampleValues(property : Property) post(trim())]
[if (property.type.convertToJavaType() = 'int' or property.type.convertToJavaType() = 'long')]
    [property.name.uniqueCode()/]
[elseif (property.type.convertToJavaType() = 'String')]
    "my[property.name.toUpperFirst()/]"
[elseif (type.convertToJavaType() = 'boolean')]
    true
[elseif (property.type.convertToJavaType() = 'Date')]
    new Date(0)
[elseif (property.type.convertToJavaType() = 'byte[]')]
    new byte['['/][']'/] {0}
[elseif (property.type.convertToJavaType() = 'float' or property.type.convertToJavaType() = 'double')]
    [property.name.uniqueCode()/].0
[else]
    new [property.type.name/]()
[/if]

[/template]


[template public exampleValues2(property : Property) post(trim())]
[if (property.type.convertToJavaType() = 'int' or property.type.convertToJavaType() = 'long')]
    [property.name.uniqueCode()/]
[elseif (property.type.convertToJavaType() = 'String')]
    "second[property.name.toUpperFirst()/]"
[elseif (property.type.convertToJavaType() = 'boolean')]
    false
[elseif (property.type.convertToJavaType() = 'Date')]
    new Date(1)
[elseif (property.type.convertToJavaType() = 'byte[]')]
    new byte['['/][']'/] {1}
[elseif (property.type.convertToJavaType() = 'float' or property.type.convertToJavaType() = 'double')]
    [property.name.uniqueCode()/].0
[else]
    new [property.type.name/]()
[/if]

[/template]



