[module entitytesthelper('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::spring::profile/]
[import org::acceleo::module::pim::uml21::gen::java::spring::common/]
[import org::acceleo::module::pim::uml21::gen::java::spring::ioc/]
[import org::acceleo::module::pim::uml21::gen::java::spring::services::uml2services /]
[import org::acceleo::module::pim::uml21::gen::java::spring::services::springservices /]

[import org::acceleo::module::pim::uml21::services::stringservice /]
[import org::acceleo::module::pim::uml21::services::uml2services /]

[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::acceleo::module::pim::uml21::gen::java::dao::api::daocommon /]

[comment][template private fullFilePath(class : Class)]
[if (class.isEntity())]
[class.pathToTestJava()/]/[class.daoImplPackage().toPath()/]/[class.name/]Helper.java
[/if]

[/template][/comment]


[template public generateEntityTestHelper(class : Class)? (class.isEntity())]
[comment This template is called by the main module file /]
[file (class.fullFilePath(class.pathToTestJava(), class.daoImplPackage().toPath(), class.name.concat('Helper.java')), false))]
package [class.daoImplPackage()/];

// [protected ('imports')]
import [class.getCompleteName()/];
[comment][class.generateImports()/][/comment]
[if (class.classAttributes()->select((upper = -1 or upper > 1))->notEmpty())]
	[if (class.classAttributes()->select((upper = -1 or upper > 1) and isOrdered)->notEmpty())]
import java.util.List;
import java.util.ArrayList;
	[/if]
	[if (class.classAttributes()->select((upper = -1 or upper > 1) and isUnique and  not isOrdered)->notEmpty())]
import java.util.Set;
import java.util.HashSet;
	[/if]
	[if (class.classAttributes()->select((upper = -1 or upper > 1) and  not isUnique and  not isOrdered)->notEmpty())]
import java.util.Collection;
		[if (class.classAttributes()->select((upper = -1 or upper > 1) and isOrdered)->isEmpty())]
import java.util.HashSet;
		[/if]
	[/if]
[/if]

[if (class.attribute->select(type.name = 'Date')->notEmpty())]
import java.util.Date;
[/if]

[if (class.ownedAttribute->select(upper > 1 or upper = -1)->notEmpty())]
import java.util.ArrayList;
import java.util.List;
[/if]
// [/protected] for import


public class [class.name/]Helper {

	/**
	 * Create an example of [class.name/]
	 */
	public static [class.name/] create[class.name.toUpperFirst()/]() {
		// fill attributes with exemple values
		[class.name/] [class.name.toLowerFirst()/] = new [class.name/]();

[comment  Member attributes /]
[for (prop:Property|class.ownedAttribute)]
	[if (not (prop.isDerived) and not (prop.isReadOnly))]
		[if (prop.upper = 1)]
		[class.name.toLowerFirst()/].set[name.toUpperFirst()/]([prop.myExempleValues()/]);
		[else]
		[prop.globalType()/]<[prop.type.name/]> list[prop.name.toUpperFirst()/] = new [prop.implType()/]<[prop.type.name/]>();
		list[name.toUpperFirst()/].add([exempleValues()/]);		
		[prop.eContainer().oclAsType(NamedElement).name.toLowerFirst()/].set[prop.name.toUpperFirst()/](list[prop.name.toUpperFirst()/]);
		[/if]
	[/if]
[/for]
		// Composite relation required 
[for (prop:Property|class.getOppositeAttributes())]
	[if (lower <> 0)]
			
		// [protected ('values')] 
		// for example of [prop.type.name/].[prop.name/] values		
		[prop.type.name/] [prop.name.toLowerFirst()/] = new [prop.type.name/]();
		[if (prop.upper = 1)]
		[class.name.toLowerFirst()/].set[prop.name.toUpperFirst()/]([prop.name.toLowerFirst()/]);
		[else]
		[class.name.toLowerFirst()/].get[prop.name.toUpperFirst()/]().add([prop.name.toLowerFirst()/]);
		[/if]
		[if (prop.opposite <> null)]
				// for bidirectionnal relation 
			[if (prop.opposite.upper = 1)]
		prop.[name.toLowerFirst()/].set[prop.opposite.name.toUpperFirst()/]([prop.name.toLowerFirst()/]);		
			[else]
		[prop.name.toLowerFirst()/].get[prop.opposite.name.toUpperFirst()/]().add([prop.name.toLowerFirst()/]);		
			[/if]
		[/if]
		// [/protected] for example of [prop.type.name/].[prop.name/] values
	[/if]
[/for]
		return [name.toLowerFirst()/];
	}

	// [protected ('others helpers')] 
	// for others helpers	
	// [/protected] 

}
[/file]
[/template]

[template public globalType(property : Property)]
[if (isOrdered)]List[elseif (isUnique)]Set[else]Collection[/if]
[/template]


[template public implType(property : Property)]
[if (isOrdered)]ArrayList[else]HashSet[/if]
[/template]


[template public myExempleValues(property : Property) post(trim())]
[if (type.name = 'int' or type.name = 'long')]
    [name.uniqueCode()/]
[elseif (type.name.startsWith('Map'))]
    new Hash[type.name/]()
[elseif (type.name = 'String')]
    "my[name.toUpperFirst()/]"
[elseif (type.name = 'boolean')]
    true
[elseif (type.name = 'Date')]
    new Date(0)    
[elseif (type.name = 'byte[]')]
    new byte['['/][']'/] {0}
[elseif (type.name.toLower() = 'float'.toLower() or type.name.toLower() = 'double'.toLower())]
    [name.uniqueCode()/].0
[else]
    [exempleValues()/]
[/if]

[/template]
