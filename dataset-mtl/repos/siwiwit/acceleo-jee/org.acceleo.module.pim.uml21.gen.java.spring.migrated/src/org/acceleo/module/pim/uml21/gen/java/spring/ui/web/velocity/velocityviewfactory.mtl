[module velocityviewfactory('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::spring::profile/]
[import org::acceleo::module::pim::uml21::gen::java::spring::common/]
[import org::acceleo::module::pim::uml21::gen::java::spring::ioc/]
[import org::acceleo::module::pim::uml21::gen::java::spring::services::uml2services /]
[import org::acceleo::module::pim::uml21::gen::java::spring::services::springservices /]
[import org::acceleo::module::pim::uml21::gen::java::spring::tests::entitytesthelper /]

[import org::acceleo::module::pim::uml21::services::stringservice /]
[import org::acceleo::module::pim::uml21::services::uml2services /]

[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::acceleo::module::pim::uml21::gen::java::dao::api::daocommon /]

[comment][template private fullFilePath(model : Model)]
[if (model.views()->notEmpty())][model.pathToMainJava()/]/[model.viewFactoryPackage().toPath()/]/ViewFactory.java[/if]
[/template][/comment]


[template public generateVelocityViewFactory(model : Model)? (model.views()->notEmpty())]
[comment This template is called by the main module file /]
[file (model.fullFilePath(model.pathToMainJava(), model.viewFactoryPackage().toPath(), 'ViewFactory.java'), false))]
package [model.viewFactoryPackage()/];

// [protected ('imports')] 
// for import
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;

[for (class:Class|model.views())]
import [class.uiImplPackage()/].[class.name/];
[/for]

// [/protected] for import


public class ViewFactory {	
	
	/**
	 * class dedicated logger
 	 */
	private static Log log = LogFactory.getLog(ViewFactory.class.getName());  

	private VelocityContext context = new VelocityContext();

	private VelocityEngine velocityEngine=null;
		
	public VelocityEngine getVelocityEngine() {
		return velocityEngine;
	}

	public void setVelocityEngine(VelocityEngine velocityEngine) {
		this.velocityEngine = velocityEngine;
	}
	
[for (class:Class|model.views())]
	public [class.name/] create[class.name/](){
		[class.name/] [class.name.toLowerFirst()/] = new [class.name/]();
		[class.name.toLowerFirst()/].setVelocityEngine(velocityEngine);
		VelocityContext velocityContext = new VelocityContext();
		// [protected ('create')]
		// [/protected]
		[class.name.toLowerFirst()/].setVelocityContext(velocityContext);	
		return [class.name.toLowerFirst()/];
	}
[/for]

// [protected ('others')]
// [/protected]
	
}
[/file]
[/template]



[query private toPath(arg0 : String) : String = invoke('org.acceleo.module.pim.uml21.services.StringServices', 'toPath(java.lang.String)', Sequence{arg0})/]
