[module servicehessianclientfactory('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::spring::profile/]
[import org::acceleo::module::pim::uml21::gen::java::spring::common/]
[import org::acceleo::module::pim::uml21::gen::java::spring::ioc/]
[import org::acceleo::module::pim::uml21::gen::java::spring::services::uml2services /]
[import org::acceleo::module::pim::uml21::gen::java::spring::services::springservices /]
[import org::acceleo::module::pim::uml21::gen::java::spring::tests::entitytesthelper /]

[import org::acceleo::module::pim::uml21::services::stringservice /]
[import org::acceleo::module::pim::uml21::services::uml2services /]

[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::acceleo::module::pim::uml21::gen::java::dao::api::daocommon /]

[comment][template private fullFilePath(model : Model)]
[if (model.webservices()->notEmpty())]
[model.pathToMainJava()/]/[model.baseImports().toPath()/]/ws/WSHessianClientFactory.java
[/if]

[/template][/comment]


[template public generateXfireWSClientFactory(model : Model)? (model.webservices()->notEmpty())]
[comment This template is called by the main module file /]
[file (model.fullFilePath(model.pathToMainJava(), model.baseImports().toPath(), 'ws/WSHessianClientFactory.java'), false))]
package [model.baseImports()/].ws;

// [protected ('imports')] 
// for import 
import java.net.MalformedURLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import com.caucho.hessian.client.HessianProxyFactory;

[for (class:Class|webservices())]
import [class.servicePackage()/].I[class.name.toUpperFirst()/]WebService;
[/for]
 
// [/protected] for import

public class WSHessianClientFactory {

	private static WSHessianClientFactory instance = new WSHessianClientFactory();
	
	static {
		Logger.getLogger("com.caucho.hessian").setLevel(Level.SEVERE);
	}
	
	private WSHessianClientFactory(){}
	
	public static WSHessianClientFactory getInstance(){
		return instance;
	}
	
[for (class:Class|webservices())]
	public I[class.name.toUpperFirst()/]WebService create[class.name.toUpperFirst()/]WebService(String address) throws MalformedURLException{		
		 //Create stub factory
		 HessianProxyFactory factory = new HessianProxyFactory();
		 //Doesn't Use Hessian protocol V2 because it's not completely stable with Spring AOP proxies)
		 factory.setHessian2Reply(false);	
		 factory.setHessian2Request(false);
		 // [protected ('WebService bindings')] 
		 //[class.name.toUpperFirst()/]WebService bindings		 
		 // [/protected] 
	 	 //Create service proxy
		 I[class.name.toUpperFirst()/]WebService ws = (I[class.name.toUpperFirst()/]WebService)factory.create(I[class.name.toUpperFirst()/]WebService.class, address);
		return ws;		
	}
[/for]
	
}
[/file]
[/template]
