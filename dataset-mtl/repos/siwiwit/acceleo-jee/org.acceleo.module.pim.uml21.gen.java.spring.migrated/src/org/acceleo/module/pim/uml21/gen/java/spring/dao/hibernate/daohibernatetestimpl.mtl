[module daohibernatetestimpl('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::spring::profile/]
[import org::acceleo::module::pim::uml21::gen::java::spring::common/]
[import org::acceleo::module::pim::uml21::gen::java::spring::ioc/]
[import org::acceleo::module::pim::uml21::gen::java::spring::services::uml2services /]
[import org::acceleo::module::pim::uml21::gen::java::spring::services::springservices /]
[import org::acceleo::module::pim::uml21::gen::java::spring::tests::entitytesthelper /]

[import org::acceleo::module::pim::uml21::services::stringservice /]
[import org::acceleo::module::pim::uml21::services::uml2services /]

[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::acceleo::module::pim::uml21::gen::java::dao::api::daocommon /]

[comment][template private fullFilePath(class : Class)]
[if (class.isDao())][class.pathToTestJava()/]/[class.daoImplPackage().toPath()/]/[class.name/]Test.java[/if]
[/template][/comment]


[template public generateDaoHibernateTestImpl(class : Class)? (class.isDao())]
[comment This template is called by the main module file /]
[file (class.fullFilePath(class.pathToTestJava(), class.daoImplPackage().toPath(), class.name.concat('Test.java')), false))]
package [class.daoImplPackage()/];

// [protected ('imports')]  
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.junit.Test;

import [class.baseImports()/].AbstractBusinessLayerTests;

import [class.daoPackage()/].I[class.name/];

import [class.entityPackage()/].[class.name/];

import [class.entityPackage()/].impl.[class.name/]Helper;

[comment][class.generateImports()/][/comment]

[if (class.attribute->select(type.name = 'Date')->notEmpty())]
import java.util.Date;
[/if]
[if (class.ownedAttribute->select(upper > 1 or upper = -1)->notEmpty())]
import java.util.ArrayList;
import java.util.List;
[/if]

[for (prop:Property|class.getOppositeAttributes()->select(lower <> 0))]
import [prop.baseImports()/].[prop.projectName()/].business.[prop.type._package.normalizedName()/].[prop.type.name/];
[/for]

// [/protected] for import

public class [class.name/]Test extends AbstractBusinessLayerTests {

	/**
	 * class dedicated logger
 	 */
	private static Log log = LogFactory.getLog([class.name/]Test.class.getName()); 

	private I[class.name/] [class.name.toLowerFirst()/];
	
	@Override
	protected void onSetUp() throws Exception {
		super.onSetUp();		
				
		this.[class.name.toLowerFirst()/] = get[class.name.toUpperFirst()/]();
		assertNotNull([class.name.toLowerFirst()/]);
		// [protected ('onSetUp')] 
		// of onSetUp		 
		// [/protected] of onSetUp	 
	}

	@Override
	protected void onTearDown() throws Exception {
		super.onTearDown();
		// [protected ('onTearDown')]	
		// of onTearDown 
		// [/protected] of onTearDown
	}
		
	protected I[class.name/] get[class.name.toUpperFirst()/]() throws Exception {
		I[class.name/] [class.name.toLowerFirst()/] = (I[class.name/])getApplicationContext().getBean("[class.name.toLowerFirst()/]");
		assertNotNull([class.name.toLowerFirst()/]);		
		return [class.name.toLowerFirst()/];
	}

	/**
	 * Test the creation of the entity [name/].<br/>
	 * <ul><li>Step 1 : Create an entity</li>
	 * <li>Step 2 : Search the entity and verify it exist</li></ul>
	 */
	@Test
	public final void testCreate[class.name/]() throws Exception {        
        // fill attributes with exemple values
		[class.name/] [class.name.toLowerFirst()/] = [class.name/]Helper.create[class.name.toUpperFirst()/]();
		
        // Execute the tested code
        saveTransitive( [class.name.toLowerFirst()/] );
		[name.toLowerFirst()/].create([class.name.toLowerFirst()/]);
		getSession().flush();
		getSession().refresh( [class.name.toLowerFirst()/] );

		// Verify result
		boolean found = false;
		for([class.name/] current[class.name.toUpperFirst()/] : [name.toLowerFirst()/].findAll()) {
			if (current[class.name.toUpperFirst()/].equals([class.name.toLowerFirst()/])) {
				found = true;
			}
		}
		assertTrue("[class.name/] not created", found);
		
	}
	
	/**
	 * Test the modification of an entity [name/].<br/>
	 * <ul><li>Step 1 : Create an entity</li>
	 * <li>Step 2 : Modify the entity</li>
	 * <li>Step 3 : Search the entity and verify the modified values</li></ul>
	 */
	@Test
	public final void testSave[class.name/]() throws Exception {
        // Initialized the test
		[class.name/] [class.name.toLowerFirst()/] = [class.name/]Helper.create[class.name.toUpperFirst()/]();
		saveTransitive( [class.name.toLowerFirst()/] );
		[name.toLowerFirst()/].create([class.name.toLowerFirst()/]);		
		
        // Execute the tested code
[comment  Member attributes /]
[for (prop:Property|class.ownedAttribute)]
	[if (not (isDerived) and not (isReadOnly))]
		[if (upper = 1)]
					[class.name.toLowerFirst()/].set[name.toUpperFirst()/]([myExempleValues()/]);
		[else]
					List<[type.name/]> list[name.toUpperFirst()/] = new ArrayList<[type.name/]>();
					list[name.toUpperFirst()/].add([exempleValues2()/]);
					[class.name.toLowerFirst()/].set[name.toUpperFirst()/](list[name.toUpperFirst()/]);
		[/if]
	[/if]
[/for]
        
[comment  TODO
		<%for (getAssociationProperties(true)){%>
			<%if (!hasStereotype(getProperty("id")) && upper == 1 && !isDerived && !isReadOnly){%>
		<%class.name.toL1Case()%>.set<%name.toU1Case()%>(<%exempleValues2%>);
			<%}%>
		<%}%>
		/]		[name.toLowerFirst()/].save([class.name.toLowerFirst()/]);
		getSession().flush();
		getSession().refresh( [class.name.toLowerFirst()/] );

		// Verify result
		boolean found = false;
		for([class.name/] current[class.name/] : [name.toLowerFirst()/].findAll()) {
			if (current[class.name/].equals([class.name.toLowerFirst()/])) {
				found = true;
[comment  TODO
				<%for (getAssociationProperties(true)){%>
					<%if (!hasStereotype(getProperty("id")) && upper == 1 && !isDerived && !isReadOnly){%>
				assertEquals("Value <%get("entity").name.toL1Case()%> not modified", <%exempleValues2%>, <%featuringClassifier.name.toL1Case()%>.get<%name.toU1Case()%>());
					<%}%>
				<%}%>
				/]			}
		}
		
		assertTrue("[class.name/] not found", found);
	}
	
	/**
	 * Test the suppression of an entity [name/].<br/>
	 * <ul><li>Step 1 : Create an entity</li>
	 * <li>Step 2 : Delete the entity</li>
	 * <li>Step 3 : Search the entity and verify it doesn't exist anymore</li></ul>
	 */
	@Test
	public final void testDelete[class.name/]() throws Exception {
        // Initialized the test
		[class.name/] [class.name.toLowerFirst()/] = [class.name/]Helper.create[class.name.toUpperFirst()/]();
		saveTransitive( [class.name.toLowerFirst()/] );
		[name.toLowerFirst()/].create([class.name.toLowerFirst()/]);
    	
        // Execute the tested code
		[name.toLowerFirst()/].delete([class.name.toLowerFirst()/]);		
		getSession().flush();
		
		// Verify result
		boolean found = false;		
		for([class.name/] current[class.name/] : [name.toLowerFirst()/].findAll()) {
			if (current[class.name/].equals([class.name.toLowerFirst()/])) {
				found = true;		
			}
		}
		
		assertFalse("[name/] not deleted", found);
	}
	
	/**
	 * Save transitive entities which are dependent from this one. 
	 */
	private void saveTransitive([class.name/] [class.name.toLowerFirst()/]) {
		// [protected ('saveTransitive')] 
		// of saveTransitive		
		// TODO persist transitive entities with getSession.save( [class.name.toLowerFirst()/].getYourAssociatedEntity );
		// [/protected] of saveTransitive
	}
	
	
[comment 
	/**
	 * Test the search of all entities <%name%>.<br/>
	 * <ul><li>Step 1 : Create many entities</li>
	 * <li>Step 2 : Search all entities and verify the entities created are found</li></ul>
	 */
	public final void testFindAll<%name%>s() throws DaoException {
		// Verify number of element before testing
		int before = dao.findAll<%name%>s().size();
		assertTrue("FindAll must return at least 0", before >= 0);
		
        // AclassAttributesdd two elements
		<%name%> <%name.toL1Case()%>1 = get<%name%>Exemple();
		dao.create<%name%>(<%name.toL1Case()%>1);
				
		<%name%> <%name.toL1Case()%>2 = get<%name%>Exemple();
		dao.create<%name%>(<%name.toL1Case()%>2);

		// Verify result
		int after = dao.findAll<%name%>s().size();
		assertEquals(
				"FindAll don't find the good number of elements", 
				2,
				after - before);
	}

	// feature.filter("operations").generateTest 
	
		// <%startUserCode%> for exemple 2 of <%type.name%>.<%name%> values
		<%type.name%> <%name.toL1Case()%>Exemple = new <%type.name%>();
				<%if (upper == 1){%>
		<%class.name.toL1Case()%>.set<%name.toU1Case()%>(<%name.toL1Case()%>Exemple);
				<%}else{%>
		<%class.name.toL1Case()%>.get<%name.toU1Case()%>().add(<%name.toL1Case()%>Exemple);
				<%}%>
				<%if (opposite != null && opposite.lower != 0){%> 
				// for bidirectionnal relation 
					<%if (opposite.upper == 1){%>
		<%name.toL1Case()%>Exemple.set<%opposite.name.toU1Case()%>(<%class.name.toL1Case()%>);		
					<%}else{%>
		<%name.toL1Case()%>Exemple.get<%opposite.name.toU1Case()%>().add(<%class.name.toL1Case()%>);		
					<%}%>
				<%}%>
		<%projectName.toU1Case()%>DaoFactory.get<%type.name%>Dao().create<%type.name%>(<%name.toL1Case()%>Exemple);
		// <%endUserCode%> for <%type.name%>.<%name%>
			<%}%>
		<%}%>
		
		return <%name.toL1Case()%>;
	}
/]
	// [protected ('specific tests')] 
	// of specific tests	
	// [/protected] of specific tests

}
[/file]
[/template]

