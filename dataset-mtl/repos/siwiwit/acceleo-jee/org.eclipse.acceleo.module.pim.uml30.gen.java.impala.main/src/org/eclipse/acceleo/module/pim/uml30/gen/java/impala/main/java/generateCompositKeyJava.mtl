[comment encoding = UTF-8 /]
[module generateCompositKeyJava('http://www.eclipse.org/uml2/3.0.0/UML') ]
[import org::acceleo::module::pim::uml21::gen::java::common::common/]
[import org::acceleo::module::pim::uml21::gen::java::common::requests/]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics/]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes/]
[import org::acceleo::module::pim::uml21::gen::java::common::structure/]
[import org::acceleo::module::pim::uml21::services::uml2services /]
[import org::acceleo::module::pim::uml21::services::stringservice /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::main::common::mainPathUtil /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::pathUtil /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::requests /]
[import org::acceleo::module::pim::uml21::gen::java::spring::common /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::entityUtil /]

[template public generateCompositKeyJava(aClass : Class)]
[aClass.generateJavaClass(aClass.getPKAttribute())/]
[/template]

[template public generateCompositKeyJava(anAssociationClass : AssociationClass)]
[anAssociationClass.generateJavaClass(anAssociationClass.getPKAttribute())/]
[/template]

[template private generateJavaClass(aClass : Class, pkProperties:Set(Property)) ]
[comment This template is called by the main module file /]
	[file (aClass.getModel().generateProjectFolder().concat(aClass.getModel().pathToMainJava()).concat('/').concat(aClass.generateJavaPackagePath()).concat('/').concat(aClass.name).concat('.java'), false, 'ISO-8859-1')]
package [aClass.generateJavaPackage()/];
// [protected ('imports')] 

import java.io.Serializable;
[if (attribute.type->select(getProperty('java.typeconversion.' + name) = 'Date')->notEmpty())]
import java.util.Date;
[/if]
// [/protected]

/**
[if (aClass.ownedComment._body->size() > 0)]
 * [aClass.ownedComment._body.replaceAll('\n', '\n * ')/]
[else]
 * Warning: no comment in the model for interface [name/].
[/if]
 */
public class [aClass.name/]Pk implements Serializable {

    /**
     * serialVersionUID is used for serialization.
     */
    private static final long serialVersionUID = 1L;
	[for (aPK : Property | aClass.getPKAttribute())]
	private [aPK.convertToJavaType()/] [aPK.name/];
	[/for]

    /**
     * Default constructor.
     */
    public [aClass.name/]() {
        super();
    }

[let props : Set(Property) = aClass.getPKAttribute()]
	[if (props->size() > 0)]

    /**
     * Constructor with all parameters initialized.
		[for (prop:Property|props)]
     * @param [prop.paramName()/]
			[if (prop.ownedComment._body->size() > 0)]
     *            [prop.ownedComment._body.replaceAll('n', '\n     *            ')/]
			[else]
     *            Warning, no comment in the model.
			[/if]
		[/for]
     */
    public [aClass.name/]([aClass.classAttributes()->filter(Property)->select(not (isPK())).asParameter()->sep(', ')/]) {
		[for (prop:Property|props)]
        this.[prop.name/] = [prop.paramName()/];
		[/for]
    }
	[/if]
	[for (prop:Property|props)]
    /**
     * Returns [name/].
		[if (prop.ownedComment._body->size() > 0)]
     * @return [prop.ownedComment._body.replaceAll('\n', '\n     * ')/]
		[else]
     * @return Warning, no comment in the model.
		[/if]
     */
    [prop.getterSignature()/] {
		[if (prop.isDerived)]
        // [protected ('getter')] 
		// of derived [prop.name/] attribute
		// TODO Logic to calculate [prop.name/]
        return this.[prop.name/];
        // [/protected]
		[else]
        return [prop.name/];
		[/if]
    }

		[if (not (prop.isReadOnly) and not (prop.isDerived))]
    /**
     * Sets a value to parameter [prop.name/].
     * @param [prop.paramName()/]
			[if (prop.ownedComment._body->size() > 0)]
     *            [prop.ownedComment._body.replaceAll('\n', '\n     *            ')/]
			[else]
     *            Warning, no comment in the model.
			[/if]
     */
    [prop.setterSignature()/] {
        this.[prop.name/] = [prop.paramName()/];
    }
		[/if]
	[/for]
[/let]
    /**
     * Equality test based on attributes values.
     * @param other Value to compare
     * @return Returns true if and only if given object is an instance of
[if (aClass.hasPrimaryKey() or aClass.defaultPKType().isPrimitiveType())]
     * [aClass.name/] and the given object has the same PK as this.
[else]
     * [aClass.name/] and the given object has the same PK as this
     * if the PK is not null or their fields are equal.
[/if]
     */
    @Override
    public boolean equals(final Object other) {
        // [protected ('equals')] 
		// for equals         
		if (this == other) {
            return true;
        }
        if (!(other instanceof [aClass.name/])) {
            return false;
        }
        final [aClass.name/] castedOther = ([aClass.name/]) other;
        if (id != null && castedOther.getId() != null) {
            return id.equals(castedOther.getId());
        }
	[for (prop:Property|aClass.getPKAttribute())]
		[if (prop.type.isJavaPrimitiveType())]
        if ([prop.name/] != castedOther.get[prop.name.toUpperFirst()/]()) {
            return false;
        }
		[else]
        if (([prop.name/] == null && castedOther.get[prop.name.toUpperFirst()/]() != null) 
             || ([prop.name/] != null && ![prop.name/].equals(
                castedOther.get[prop.name.toUpperFirst()/]()))) {
           return false;
        }
		[/if]
	[/for]
        return true;
        // [/protected] for equals
    }

    /**
     * HashTable code based on attributes hashcodes.
     * @return Returns hash value
     */
    @Override
    public int hashCode() {
        // [protected ('hashCode')]
		int result = 0;
[if (aClass.hasPrimaryKey())]
        result = new Long([aClass.getPKAttribute()->asSequence()->first().oclAsType(Property).name/]).hashCode();
[elseif (aClass.defaultPKType().isPrimitiveType())]
        result = new [aClass.defaultPKTypeWrapper()/](id).hashCode();
[else]
        if (id != null) {
            result = id.hashCode();
        } else {[comment  This else is required to be synchro with the equals() method, otherwise we could generate different hashCodes for equal objects ! /]
	[for (prop:Property|aClass.ownedAttribute->select(not (isPK())))]
		[if (prop.type.name = 'Boolean')]
            if ([prop.name/]) {
                result++;
            }
		[elseif (prop.type.name = 'Integer')]
            result = 29 * result + [prop.name/];
		[elseif (prop.type.name = 'Float')]
            if ([prop.name/] != null) {
                result = (int) (29 * result + [prop.name/].hashCode());
            }
		[else]
            if ([prop.name/] != null) {
                result = 29 * result + [prop.name/].hashCode();
            }
		[/if]
	[/for]
        }
[/if]
[if (aClass.isSupperAsEntity())]
    	return 29 * result + super.hashCode();
[else]
        return result;
[/if]
        // [/protected] for hashCode
    }

[comment  N.B. It is mandatory to have identical lines for start and end user code !!! /]    
	// [protected ('private methods')] 
	// for private methods
	// TODO Remove this line and add your private methods here
    // [/protected] for private methods

}

[/file]
[aClass.getAssociations()/]
[/template]


[comment][query public isSupperAsEntity(aClass : Class) : Boolean = 
aClass.superClass->notEmpty() and aClass.superClass->asSequence()->first().hasStereotype('Entity')/][/comment]


[template public extensions(aClass:Class)]
[if (not (aClass.superClass->isEmpty()))] extends [aClass.superClass.name/][/if]
[/template]


[template public asParameter(property:Property) ]
[property.convertToJavaType()/] [property.paramName()/]
[/template]


[template public implementedInterfaces(aClass:Class)]
[aClass.interfaceRealization.target->filter(Interface).name->sep(', ')/]
[/template]



[query public getOtherPKProperties(aClass : Class) : Set(Property) =
if(aClass.interfaceRealization->notEmpty()and 
	aClass.interfaceRealization.target->notEmpty() and
	aClass.interfaceRealization.target->filter(Interface)->notEmpty() and
	aClass.interfaceRealization.target->filter(Interface)->select(isEntity())->notEmpty() and
	aClass.interfaceRealization.target->filter(Interface)->select(isEntity())
		->asSequence()->first().attribute->notEmpty()) then   
	aClass.interfaceRealization.target->filter(Interface)->select(isEntity())
		->asSequence()->first().attribute->select(isPK())
else
	Set{}
endif
/]

