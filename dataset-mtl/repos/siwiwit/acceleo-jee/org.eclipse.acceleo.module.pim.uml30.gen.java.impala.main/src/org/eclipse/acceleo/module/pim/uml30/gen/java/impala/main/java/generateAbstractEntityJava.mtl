[comment encoding = UTF-8 /]
[module generateAbstractEntityJava('http://www.eclipse.org/uml2/3.0.0/UML') extends org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::generateJavaClass]
[import org::acceleo::module::pim::uml21::gen::java::common::common/]
[import org::acceleo::module::pim::uml21::gen::java::common::requests/]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics/]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes/]
[import org::acceleo::module::pim::uml21::gen::java::common::structure/]
[import org::acceleo::module::pim::uml21::services::uml2services /]
[import org::acceleo::module::pim::uml21::services::stringservice /] 
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::main::common::mainPathUtil /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::pathUtil /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::requests /]
[import org::acceleo::module::pim::uml21::gen::java::spring::common /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::entityUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::compositeUtil /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::main::common::mainCommon/]

[template public generateAbstractEntityJava(aClass : Class)]
[aClass.generateJavaClass()/]
[/template]

[template private generateJavaClass(aClass : Class) overrides generateJavaClass ? (not aClass.hasEntityParent()) ]
[comment This template is called by the main module file /]
	[file (aClass.getModel().generateProjectFolder().concat(aClass.getModel().pathToGeneratedMainJava()).concat('/').concat(aClass.generateJavaPackagePath()).concat('/').concat(aClass.name).concat('.java'), false, 'ISO-8859-1')]
package [aClass.generateJavaPackage()/];
// [protected ('imports')] 

import java.io.Serializable;
[aClass.generateImports()/]

[comment][if (aClass.getMultiplicity()->notEmpty())]
	[for (aMultiplicityElement:MultiplicityElement | aClass.getMultiplicity())]
		[if (aMultiplicityElement.oclIsTypeOf(Type))]
			[if (aClass.generateJavaPackage() <> aMultiplicityElement.oclAsType(Type).generateJavaPackage())]
import [aMultiplicityElement.oclAsType(Type).generateJavaPackage()/].[aMultiplicityElement.oclAsType(Type).name/];
			[/if]
		[/if]		
	[/for]
[/if][/comment]
[if (not (aClass.superClass->isEmpty()))]
	[if (aClass.generateJavaPackage() <> aClass.superClass->asSequence()->first().generateJavaPackage())]
import [aClass.superClass.generateJavaPackage()/].[aClass.superClass.name/];
	[/if]
[/if]

// [/protected]

/**
[if (aClass.ownedComment._body->size() > 0)]
 * [aClass.ownedComment._body.replaceAll('\n', '\n * ')/]
[else]
 * Warning: no comment in the model for interface [name/].
[/if]
 */
// [aClass.getAvailableProperties().name->sep(', ')/]
public abstract class [aClass.name/][if (aClass.interfaceRealization->size() > 0)] implementes [aClass.implementedInterfaces()/][/if]
 {

    /**
     * Constant representing the name of the automatic primary key field.
     */
    public static final String PROP_ID = "id";

[for (prop:Property|aClass.getAvailableProperties()->union(aClass.getOtherPKProperties()->asSequence()))]
    /**
     * Constant representing the name of the field [prop.name/].
     */
    public static final String PROP_[prop.name.toUpper()/] = "[prop.name/]";
	
[/for]

    /**
     * serialVersionUID is used for serialization.
     */
    private static final long serialVersionUID = 1L;
	private [aClass.getPrimaryTypeName()/] id;
[for (prop:Property|aClass.getAvailableProperties()->filter(Property)->select(not (isPK())))]
    /**
     * Field [prop.name/].
     */
    private [prop.convertToJavaType()/] [prop.name/];

[/for]


    /**
     * Default constructor.
     */
    public [aClass.name/]() {
        super();
[for (prop:Property|aClass.getAvailableProperties())]
	[if (prop.upper <> 1)]
		[if (prop.isOrdered)]
		        [prop.name/] = new ArrayList<[prop.type.name/]>();
		[else]
		        [prop.name/] = new HashSet<[prop.type.name/]>();
		[/if]
	[/if]
[/for]
    }

    /**
     * Returns the primary key.
     * @return Returns id.
     */
    public [aClass.getPrimaryTypeName()/] getId() {
        return this.id;
    }

    /**
     * Sets the primary key.
     * @param id Value to set.
     */
    public void setId(final [aClass.getPrimaryTypeName()/] id) {
        this.id = id;
    }
[let props : Sequence(Property) = aClass.getAvailableProperties()->filter(Property)->select(not (isPK()))]
	[if (props->size() > 0)]

    /**
     * Constructor with all parameters initialized.
		[for (prop:Property|props)]
     * @param [prop.paramName()/]
			[if (prop.ownedComment._body->size() > 0)]
     *            [prop.ownedComment._body.replaceAll('n', '\n     *            ')/]
			[else]
     *            Warning, no comment in the model.
			[/if]
		[/for]
     */
    public [aClass.name/]([aClass.getAvailableProperties()->filter(Property)->select(not (isPK())).asParameter()->sep(', ')/]) {
		[for (prop:Property|props)]
        this.[prop.name/] = [prop.paramName()/];
		[/for]
    }
	[/if]
	[for (prop:Property|props)]
    /**
     * Returns [name/].
		[if (prop.ownedComment._body->size() > 0)]
     * @return [prop.ownedComment._body.replaceAll('\n', '\n     * ')/]
		[else]
     * @return Warning, no comment in the model.
		[/if]
     */
    [prop.getterSignature()/] {
		[if (prop.isDerived)]
        // [protected ('getter')] 
		// of derived [prop.name/] attribute
		// TODO Logic to calculate [prop.name/]
        return this.[prop.name/];
        // [/protected]
		[else]
        return [prop.name/];
		[/if]
    }

		[if (not (prop.isReadOnly) and not (prop.isDerived))]
    /**
     * Sets a value to parameter [prop.name/].
     * @param [prop.paramName()/]
			[if (prop.ownedComment._body->size() > 0)]
     *            [prop.ownedComment._body.replaceAll('\n', '\n     *            ')/]
			[else]
     *            Warning, no comment in the model.
			[/if]
     */
    [prop.setterSignature()/] {
        this.[prop.name/] = [prop.paramName()/];
    }
		[/if]

		[if (upper = -1 or upper > 1)]
    /**
     * Adds a [name/] to the [name/] Collection.
			[if (opposite <> null)]
     * Birectionnal association : add the current [aClass.name/] instance to
     * the given [name/] parameter.
			[/if]
     * @param [name/]Elt Element to add
     */
    public void add[prop.name.toUpperFirst()/](final [prop.type.convertToJavaType()/] [prop.name/]Elt) {
        [prop.name/].add([prop.name/]Elt);
			[if (prop.opposite <> null)]
				[if (prop.opposite.upper = 1)]
        [prop.name/]Elt.set[prop.opposite.name.toUpperFirst()/](this);
				[else]
        [prop.name/]Elt.get[prop.opposite.name.toUpperFirst()/]().add(this);
				[/if]
			[/if]
    }

    /**
     * Removes a [prop.name/] from the [prop.name/] Collection.
			[if (prop.opposite <> null)]
     * Birectionnal association : remove the current [aClass.name/] instance
     * from the given [prop.name/] parameter.
			[/if]
     * @param [prop.name/]Elt Element to remove
     */
    public void remove[prop.name.toUpperFirst()/](final [prop.type.convertToJavaType()/] [prop.name/]Elt) {
        [prop.name/].remove([prop.name/]Elt);
			[if (prop.opposite <> null)]
				[if (prop.opposite.upper = 1)]
        [prop.name/]Elt.set[prop.opposite.name.toUpperFirst()/](null);
				[else]
        [prop.name/]Elt.get[prop.opposite.name.toUpperFirst()/]().remove(this);
				[/if]
			[/if]
    }
		[/if]
	[/for]
[/let]



[if (aClass.interfaceRealization->notEmpty())]
	[for (interface:Interface|aClass.interfaceRealization.target->filter(Interface))]
    /* Implementation of interface [aClass.name/]: start */
		[for (prop:Property|interface.itfAttributes()->filter(Property)->select(not (isPK())))]
			[if (aClass.attribute->select(name = prop.name)->notEmpty())]

    /**
     * Implementation of [interface.name/]'s [prop.name/] getter.
				[if (prop.ownedComment._body->size() > 0)]
     * @return [prop.ownedComment._body.replaceAll('\n', '\n     * ')/]
				[else]
     * @return Warning, no comment in the model.
				[/if]
     * @see [interface.name/].[prop.getterName()/]
     */
    [prop.getterSignature()/] {
        // [protected ('extra getter')] 
		// for getter of <%name%>  ['['/]DO NOT REMOVE[']'/]
        // TODO Implement me !
        throw new UnsupportedOperationException("Method not yet implemented");
        // [/protected] 
    }

    /**
     * Implementation of [interface.name/]'s [prop.name/] setter.
     * @param [prop.paramName()/]
				[if (prop.ownedComment._body->size() > 0)]
     *            [prop.ownedComment._body.replaceAll('\n', '\n     *            ')/]
				[else]
     *            Warning, no comment in the model.
				[/if]
     * @see [interface.name/].[prop.setterName()/]
     */
    [prop.setterSignature()/] {
        // [protected ('setter')] 
		// for getter of <%name%>  ['['/]DO NOT REMOVE[']'/]
        // TODO Implement me !
        throw new UnsupportedOperationException("Method not yet implemented");
        // [/protected] for setter of [prop.name/] ['['/]DO NOT REMOVE[']'/]
    }

			[/if]

		[/for]
    /* Implementation of interface [name/]: end */

	[/for]
[/if]
[comment  Recopie vers et depuis les value objects /]

    /**
     * Equality test based on attributes values.
     * @param other Value to compare
     * @return Returns true if and only if given object is an instance of
[if (aClass.hasPrimaryKey() or aClass.defaultPKType().isPrimitiveType())]
     * [aClass.name/] and the given object has the same PK as this.
[else]
     * [aClass.name/] and the given object has the same PK as this
     * if the PK is not null or their fields are equal.
[/if]
     */
    @Override
    public boolean equals(final Object other) {
        // [protected ('equals')] 
		// for equals         
		if (this == other) {
            return true;
        }
        if (!(other instanceof [aClass.name/])) {
            return false;
        }
        final [aClass.name/] castedOther = ([aClass.name/]) other;
[if (aClass.hasPrimaryKey())]
	[for (prop:Property|aClass.getPKAttribute())]
        return [prop.name/] == castedOther.get[prop.name.toUpperFirst()/]();
	[/for]
[elseif (aClass.defaultPKType().isPrimitiveType())]
        return id == castedOther.getId();
[else]
        if (id != null && castedOther.getId() != null) {
            return id.equals(castedOther.getId());
        }
	[for (prop:Property|aClass.getAvailableProperties()->filter(Property)->select(not (isPK())))]
		[if (prop.type.isJavaPrimitiveType())]
        if ([prop.name/] != castedOther.get[prop.name.toUpperFirst()/]()) {
            return false;
        }
		[else]
        if (([prop.name/] == null && castedOther.get[prop.name.toUpperFirst()/]() != null) 
             || ([prop.name/] != null && ![prop.name/].equals(
                castedOther.get[prop.name.toUpperFirst()/]()))) {
           return false;
        }
		[/if]
	[/for]
	[if (aClass.isSupperAsEntity())]
    	return super.equals(other);
	[else]
        return true;
	[/if]
[/if]
        // [/protected] for equals
    }

    /**
     * HashTable code based on attributes hashcodes.
     * @return Returns hash value
     */
    @Override
    public int hashCode() {
        // [protected ('hashCode')]
		int result = 0;
[if (aClass.hasPrimaryKey())]
        result = new Long([aClass.getPKAttribute()->asSequence()->first().oclAsType(Property).name/]).hashCode();
[elseif (aClass.defaultPKType().isPrimitiveType())]
        result = new [aClass.defaultPKTypeWrapper()/](id).hashCode();
[else]
        if (id != null) {
            result = id.hashCode();
        } else {[comment  This else is required to be synchro with the equals() method, otherwise we could generate different hashCodes for equal objects ! /]
	[for (prop:Property|aClass.ownedAttribute->select(not (isPK())))]
		[if (prop.type.name = 'Boolean')]
            if ([prop.name/]) {
                result++;
            }
		[elseif (prop.type.name = 'Integer')]
            result = 29 * result + [prop.name/];
		[elseif (prop.type.name = 'Float')]
            if ([prop.name/] != null) {
                result = (int) (29 * result + [prop.name/].hashCode());
            }
		[else]
            if ([prop.name/] != null) {
                result = 29 * result + [prop.name/].hashCode();
            }
		[/if]
	[/for]
        }
[/if]
[if (aClass.isSupperAsEntity())]
    	return 29 * result + super.hashCode();
[else]
        return result;
[/if]
        // [/protected] for hashCode

    }

	[for (anSimpleOperation : Operation | aClass.ownedOperation->select(oper:Operation|not oper.isFinder()))]
[anSimpleOperation.generateJavadoc()/]
	[anSimpleOperation.genModifiers()/] abstract [anSimpleOperation.generateReturn()/] [anSimpleOperation.name/]([anSimpleOperation.generateParameters()/]);

	[/for]

[comment  N.B. It is mandatory to have identical lines for start and end user code !!! /]    
	// [protected ('private methods')] 
	// for private methods
	// TODO Remove this line and add your private methods here
    // [/protected] for private methods


}

[/file]
[aClass.getAssociations()/]
[/template]

[template public extensions(aClass:Class)]
[if (not (aClass.superClass->isEmpty()))] extends [aClass.superClass.name/][/if]
[/template]

[template public asParameter(property:Property) ]
[property.convertToJavaType()/] [property.paramName()/]
[/template]

[template public implementedInterfaces(aClass:Class)]
[aClass.interfaceRealization.target->filter(Interface).name->sep(', ')/]
[/template]

[query public getOtherPKProperties(aClass : Class) : Set(Property) =
if(aClass.interfaceRealization->notEmpty()and 
	aClass.interfaceRealization.target->notEmpty() and
	aClass.interfaceRealization.target->filter(Interface)->notEmpty() and
	aClass.interfaceRealization.target->filter(Interface)->select(isEntity())->notEmpty() and
	aClass.interfaceRealization.target->filter(Interface)->select(isEntity())
		->asSequence()->first().attribute->notEmpty()) then   
	aClass.interfaceRealization.target->filter(Interface)->select(isEntity())
		->asSequence()->first().attribute->select(isPK())
else
	Set{}
endif
/]

[query public getAvailableProperties(aClass : Class) : Sequence(Property) = 
aClass.ownedAttribute->asSequence()->union(aClass.getOppositeAttributes(false)->select(anOppProp:Property|anOppProp.isNavigable() or (anOppProp.upper=1 and (anOppProp.oppositeAttribute().upper>1 or anOppProp.oppositeAttribute().upper<0))))
/]
