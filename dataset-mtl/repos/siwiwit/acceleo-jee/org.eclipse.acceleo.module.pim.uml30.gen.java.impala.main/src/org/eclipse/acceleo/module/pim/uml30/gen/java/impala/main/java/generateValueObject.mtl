[comment encoding = UTF-8 /]
[module generateValueObject('http://www.eclipse.org/uml2/3.0.0/UML') extends org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::generateJavaClass]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::main::common::mainPathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::acceleo::module::pim::uml21::gen::java::spring::common /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::pathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[template public generateValueObject(aClass : Class)]
[file (aClass.getModel().generateProjectFolder().concat(aClass.getModel().pathToMainJava()).concat('/').concat(aClass.generateJavaPackagePath()).concat('/').concat(aClass.name).concat('.java'), false, 'ISO-8859-1')]
[aClass.generateJavaClass()/]
[/file]
[/template]

[comment]
	@TODO You should probably add the extension 'org.eclipse.acceleo.engine.dynamic.templates' in your 'plugin.xml' file if you wish to enable the 'dynamic overrides' mechanism
[/comment]
[comment @Override generateJavaClass.generateJavaClass /]
[template public generateJavaClass(aClass : Class) overrides generateJavaClass ]
[comment This template is called by the main module file /]
package [aClass.generateJavaPackage()/];

// [protected ('imports')] 

[for (classifier:Classifier|aClass.operationsParametersTypes())]
import [classifier.getCompleteName()/];	
[/for]
[if (attribute.type->select(aType:Type|getProperty('java.typeconversion.' + aType.name) = 'Date')->notEmpty())]
import java.util.Date;
[/if]
[for (prop:Property | aClass.getOppositeAttributes())]
	[if (aClass.generateJavaPackage() <> prop.type.generateJavaPackage())]
import [prop.type.entityPackage()/].[prop.type.name/];
	[/if]
[/for]

[if (not (aClass.superClass->isEmpty()))]
import [aClass.generateJavaPackage()/].[aClass.superClass.name/];
[/if]

[aClass.genCollectionImports()/]

// [/protected]

[aClass.generateJavadoc()/]
[aClass.genModifiers()/] class [aClass.name/][aClass.extensions()/] {

[comment  Generate attributes /]
[for (prop:Property|aClass.attribute)]
	[prop.visibility/] [prop.convertToJavaType()/] [prop.name/];
[/for]

	/**
	 * Default constructor 
	 */
	public [aClass.name/]() {
		super();
	}

[if (aClass.attribute->notEmpty())]
	/**
	 * Constructor with all parameters initialized
	[for (prop:Property|aClass.attribute)]
	 * @param [prop.name/] [prop.ownedComment._body/]
	[/for]
	 */	
	public [aClass.name/]([aClass.attribute.asParameter()->sep(', ')/]) {

	[for (prop:Property|aClass.attribute)]
		this.[prop.name/] = [prop.name/];
	[/for]
	}	
[/if]

[let props : Set(Property) = aClass.classAttributes()]
	[comment][if (props->size() > 0)]

    /**
     * Constructor with all parameters initialized.
		[for (prop:Property|props)]
     * @param [prop.paramName()/]
			[if (prop.ownedComment._body->size() > 0)]
     *            [prop.ownedComment._body.replaceAll('n', '\n     *            ')/]
			[else]
     *            Warning, no comment in the model.
			[/if]
		[/for]
     */
    public [aClass.name/]([aClass.classAttributes()->filter(Property).asParameter()->sep(', ')/]) {
		[for (prop:Property|props)]
        this.[prop.name/] = [prop.paramName()/];
		[/for]
    }
	[/if][/comment]
	[for (prop:Property|props)]
    /**
     * Returns [name/].
		[if (prop.ownedComment._body->size() > 0)]
     * @return [prop.ownedComment._body.replaceAll('\n', '\n     * ')/]
		[else]
     * @return Warning, no comment in the model.
		[/if]
     */
    [prop.getterSignature()/] {
		[if (prop.isDerived)]
        // [protected ('getter')] 
		// of derived [prop.name/] attribute
		// TODO Logic to calculate [prop.name/]
        return this.[prop.name/];
        // [/protected]
		[else]
        return [prop.name/];
		[/if]
    }

		[if (not (prop.isReadOnly) and not (prop.isDerived))]
    /**
     * Sets a value to parameter [prop.name/].
     * @param [prop.paramName()/]
			[if (prop.ownedComment._body->size() > 0)]
     *            [prop.ownedComment._body.replaceAll('\n', '\n     *            ')/]
			[else]
     *            Warning, no comment in the model.
			[/if]
     */
    [prop.setterSignature()/] {
        this.[prop.name/] = [prop.paramName()/];
    }
		[/if]

		[if (upper = -1 or upper > 1)]
    /**
     * Adds a [name/] to the [name/] Collection.
			[if (opposite <> null)]
     * Birectionnal association : add the current [aClass.name/] instance to
     * the given [name/] parameter.
			[/if]
     * @param [name/]Elt Element to add
     */
    public void add[prop.name.toUpperFirst()/](final [prop.type.convertToJavaType()/] [prop.name/]Elt) {
        [prop.name/].add([prop.name/]Elt);
			[if (prop.opposite <> null)]
				[if (prop.opposite.upper = 1)]
        [prop.name/]Elt.set[prop.opposite.name.toUpperFirst()/](this);
				[else]
        [prop.name/]Elt.get[prop.opposite.name.toUpperFirst()/]().add(this);
				[/if]
			[/if]
    }

    /**
     * Removes a [prop.name/] from the [prop.name/] Collection.
			[if (prop.opposite <> null)]
     * Birectionnal association : remove the current [aClass.name/] instance
     * from the given [prop.name/] parameter.
			[/if]
     * @param [prop.name/]Elt Element to remove
     */
    public void remove[prop.name.toUpperFirst()/](final [prop.type.convertToJavaType()/] [prop.name/]Elt) {
        [prop.name/].remove([prop.name/]Elt);
			[if (prop.opposite <> null)]
				[if (prop.opposite.upper = 1)]
        [prop.name/]Elt.set[prop.opposite.name.toUpperFirst()/](null);
				[else]
        [prop.name/]Elt.get[prop.opposite.name.toUpperFirst()/]().remove(this);
				[/if]
			[/if]
    }
		[/if]
	[/for]
[/let]

[if (aClass.interfaceRealization->notEmpty())]
	[for (interface:Interface|aClass.interfaceRealization.target->filter(Interface))]
    /* Implementation of interface [aClass.name/]: start */
		[for (prop:Property|interface.itfAttributes())]
			[if (aClass.attribute->select(name = prop.name)->notEmpty())]

    /**
     * Implementation of [interface.name/]'s [prop.name/] getter.
				[if (prop.ownedComment._body->size() > 0)]
     * @return [prop.ownedComment._body.replaceAll('\n', '\n     * ')/]
				[else]
     * @return Warning, no comment in the model.
				[/if]
     * @see [interface.name/].[prop.getterName()/]
     */
    [prop.getterSignature()/] {
        // [protected ('extra getter')] 
		// for getter of <%name%>  ['['/]DO NOT REMOVE[']'/]
        // TODO Implement me !
        throw new UnsupportedOperationException("Method not yet implemented");
        // [/protected] 
    }

    /**
     * Implementation of [interface.name/]'s [prop.name/] setter.
     * @param [prop.paramName()/]
				[if (prop.ownedComment._body->size() > 0)]
     *            [prop.ownedComment._body.replaceAll('\n', '\n     *            ')/]
				[else]
     *            Warning, no comment in the model.
				[/if]
     * @see [interface.name/].[prop.setterName()/]
     */
    [prop.setterSignature()/] {
        // [protected ('setter')] 
		// for getter of <%name%>  ['['/]DO NOT REMOVE[']'/]
        // TODO Implement me !
        throw new UnsupportedOperationException("Method not yet implemented");
        // [/protected] for setter of [prop.name/] ['['/]DO NOT REMOVE[']'/]
    }

			[/if]

		[/for]
    /* Implementation of interface [name/]: end */

	[/for]
[/if]

[comment  Generate operations /]
[for (oper:Operation|aClass.ownedOperation)]
	[oper.generateJavadoc()/]
	[oper.genModifiers()/] [oper.generateReturn()/] [oper.name/]([oper.generateRawParameters()/]) [if (oper.raisedException->notEmpty())]throws [oper.raisedException.name->sep(', ')/][/if][oper.genOperationBody()/]
[/for]

}

[/template]
