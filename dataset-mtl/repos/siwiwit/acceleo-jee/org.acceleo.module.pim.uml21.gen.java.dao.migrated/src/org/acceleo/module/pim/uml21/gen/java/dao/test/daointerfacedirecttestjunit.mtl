[module daointerfacedirecttestjunit('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::dao::api::daocommon/]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics /]
[import org::acceleo::module::pim::uml21::gen::java::common::requests /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::acceleo::module::pim::uml21::services::stringservice /]
[import org::acceleo::module::pim::uml21::services::uml2services /]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::acceleo::module::pim::uml21::gen::java::dao::api::daofactory /]
[comment][template private fullFilePath(class:Class)]
[if (class.isEntity())]
[class.pathToTestJava()/]/[class.objectsPackage().toPath()/]/[class.daoInterfaceName()/]Test.java
[/if]

[/template][/comment]


[template public generateInterfaceDirectTest(class:Class)? (class.isEntity())]
[comment This template is called by the main module file /]
[file (class.fullFilePath(class.pathToTestJava(), class.objectsPackage().toPath(), class.daoInterfaceName().concat('Test.java')), false))]
package [class.objectsPackage()/];

// [protected ('imports')] 
// for import
[if (class.ownedAttribute->select(type.name = 'Date')->notEmpty())]
import java.util.Date;
	[/if]
	[if (class.classAttributes()->select(upper > 1 or upper = -1)->notEmpty())]
import java.util.ArrayList;
import java.util.List;
	[/if]
import junit.framework.Assert;
import junit.framework.TestCase;

[class.importDaoException()/]
import [class.eContainer(Model).daoFactoryQualifiedClassName()/];
import [class.daoInterfaceQualifiedName()/];
import [class.entityQualifiedName()/];
	[for (prop:Property|class.getOppositeAttributes())]
		[if (prop.lower <> 0)]
import [prop.type.entityQualifiedName()/];
		[/if]
	[/for]

// [/protected] for import

public class [class.daoInterfaceName()/]Test extends TestCase {

    private [class.daoInterfaceName()/] dao;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
        this.dao = [class.projectName().toUpperFirst()/]DaoFactory.get[class.getterPrefix()/][class.name/]Dao();
        // [protected ('setup')] 
		// for setup        
		// [/protected] for setup 
    }

    @Override
    protected void tearDown() throws Exception {
        super.tearDown();
        this.dao = null;
        // [protected ('tearDown')] for tearDown        
		// [/protected] for tearDown 
    }

    /**
     * Test the creation of the entity [class.name/].<br/>
     * <ul><li>Step 1 : Create an entity</li>
     * <li>Step 2 : Search the entity and verify it exist</li></ul>
     */
    public final void testCreate[class.name/]() throws DaoException {        
        // fill attributes with exemple values
        [class.name/] [class.name.toLowerFirst()/] = get[class.name/]Exemple();
        
        // Execute the tested code
        dao.create[class.name/]([class.name.toLowerFirst()/]);

        // Verify result
        boolean found = false;
        for([class.name/] current[class.name/] : dao.findAll[class.name/]s()) {
            if (current[class.name/].equals([class.name.toLowerFirst()/])) {
                found = true;
            }
        }
        Assert.assertTrue("[class.name/] not created", found);
    }

    /**
     * Test the modification of an entity [class.name/].<br/>
     * <ul><li>Step 1 : Create an entity</li>
     * <li>Step 2 : Modify the entity</li>
     * <li>Step 3 : Search the entity and verify the modified values</li></ul>
     */
    public final void testUpdate[class.name/]() throws DaoException {
        // Initialized the test
        [class.name/] [class.name.toLowerFirst()/] = get[class.name/]Exemple();
        dao.create[class.name/]([class.name.toLowerFirst()/]);

        // Execute the tested code
	[for (prop:Property|class.ownedAttribute)]
		[if (not (prop.hasStereotype('id')) and prop.upper = 1 and not (prop.isDerived) and not (prop.isReadOnly))]
        [class.name.toLowerFirst()/].set[name.toUpperFirst()/]([prop.exempleValues2()/]);
		[/if]
	[/for]
        dao.update[class.name/]([class.name.toLowerFirst()/]);

        // Verify result
        boolean found = false;
        for([class.name/] current[class.name/] : dao.findAll[class.name/]s()) {
            if (current[class.name/].equals([class.name.toLowerFirst()/])) {
                found = true;
	[for (prop:Property|class.ownedAttribute)]
		[if (not (prop.hasStereotype('id')) and prop.upper = 1 and not (prop.isDerived) and not (prop.isReadOnly))]
                Assert.assertEquals("Value [prop.name.toLowerFirst()/] not modified", [prop.exempleValues2()/], [featuringClassifier.name.toLowerFirst()/].get[name.toUpperFirst()/]());
		[/if]
	[/for]
            }
        }
        Assert.assertTrue("[class.name/] not found", found);
    }

    /**
     * Test the suppression of an entity [class.name/].<br/>
     * <ul><li>Step 1 : Create an entity</li>
     * <li>Step 2 : Delete the entity</li>
     * <li>Step 3 : Search the entity and verify it doesn't exist anymore</li></ul>
     */
    public final void testDelete[class.name/]() throws DaoException {
        // Initialized the test
        [class.name/] [class.name.toLowerFirst()/] = get[class.name/]Exemple();
        dao.create[class.name/]([class.name.toLowerFirst()/]);
        
        // Execute the tested code
        dao.delete[class.name/]([class.name.toLowerFirst()/]);
        
        // Verify result
        boolean found = false;
        for([class.name/] current[class.name/] : dao.findAll[class.name/]s()) {
            if (current[class.name/].equals([class.name.toLowerFirst()/])) {
                found = true;                
            }
        }
        Assert.assertFalse("[class.name/] not deleted", found);
    }

    /**
     * Test the search of all entities [class.name/].<br/>
     * <ul><li>Step 1 : Create many entities</li>
     * <li>Step 2 : Search all entities and verify the entities created are found</li></ul>
     */
    public final void testFindAll[class.name/]s() throws DaoException {
        // Verify number of element before testing
        int before = dao.findAll[class.name/]s().size();
        Assert.assertTrue("FindAll must return at least 0", before >= 0);
        
        // Add two elements
        [class.name/] [class.name.toLowerFirst()/]1 = get[class.name/]Exemple();
        dao.create[name/]([class.name.toLowerFirst()/]1);
                
        [class.name/] [class.name.toLowerFirst()/]2 = get[class.name/]Exemple();
        dao.create[class.name/]([class.name.toLowerFirst()/]2);

        // Verify result
        int after = dao.findAll[class.name/]s().size();
        Assert.assertEquals(
                "FindAll don't find the good number of elements", 
                2,
                after - before);
    }

[class.feature->filter(Operation).generateTest()/]

    /**
     * Create an exemple of [class.name/]
     */
    protected [class.name/] get[class.name/]Exemple() throws DaoException {
       // fill attributes with exemple values
        [class.name/] [class.name.toLowerFirst()/] = new [class.name/]();
[comment  Member attributes /]
	[for (prop:Property|class.ownedAttribute)]
		[if (not (prop.isDerived) and not (prop.isReadOnly))]
			[if (prop.upper = 1)]
        [class.name.toLowerFirst()/].set[prop.name.toUpperFirst()/]([prop.exempleValues()/]);
			[else]
        List<[prop.type.name/]> list[prop.name.toUpperFirst()/] = new ArrayList<[prop.type.name/]>();
        list[prop.name.toUpperFirst()/].add([prop.exempleValues()/]);
        [class.name.toLowerFirst()/].set[name.toUpperFirst()/](list[name.toUpperFirst()/]);
			[/if]
		[/if]
	[/for]
[comment  Composite relation required /]
	[for (prop:Property|class.getOppositeAttributes())]
		[if (prop.lower <> 0)]
            
        // [protected ('relations1')] 
		// for [type.name/].[name/]        
		[type.name/] [name.toLowerFirst()/]Exemple = new [type.name/]();
			[if (upper = 1)]
        [class.name.toLowerFirst()/].set[prop.name.toUpperFirst()/]([name.toLowerFirst()/]Exemple);
			[else]
        [class.name.toLowerFirst()/].get[prop.name.toUpperFirst()/]().add([name.toLowerFirst()/]Exemple);
			[/if]
			[if (opposite <> null)]
[comment  for bidirectionnal relation /]
				[if (opposite.upper = 1)]
    	[name.toLowerFirst()/]Exemple.set[opposite.name.toUpperFirst()/]([class.name.toLowerFirst()/]);        
				[else]
        [name.toLowerFirst()/]Exemple.get[opposite.name.toUpperFirst()/]().add([class.name.toLowerFirst()/]);        
				[/if]
			[/if]
        // [/protected] for [type.name/].[name/]
		[/if]
	[/for]
        [class.projectName().toUpperFirst()/]DaoFactory.get[class.name/]Dao().create[class.name/]([class.name.toLowerFirst()/]);
        return [class.name.toLowerFirst()/];
    }
    
    /**
     * Create a second exemple of [class.name/] with other values
     */
    protected [class.name/] get[class.name/]Exemple2() throws DaoException {
       // fill attributes with exemple values
        [class.name/] [class.name.toLowerFirst()/] = new [class.name/]();
[comment  Member attributes /]
	[for (prop:Property|class.ownedAttribute)]
		[if (not (prop.isDerived) and not (prop.isReadOnly))]
			[if (prop.upper = 1)]
        [class.name.toLowerFirst()/].set[prop.name.toUpperFirst()/]([prop.exempleValues2()/]);
			[else]
        List<[prop.type.name/]> list[prop.name.toUpperFirst()/] = new ArrayList<[prop.type.name/]>();
        list[name.toLowerFirst()/].add([prop.exempleValues2()/]);
        [class.name.toLowerFirst()/].set[prop.name.toUpperFirst()/](list[prop.name.toUpperFirst()/]);
			[/if]
		[/if]
	[/for]
[comment  Composite relation required /]
	[for (prop:Property|class.getOppositeAttributes())]
		[if (prop.lower <> 0)]
            
        // [protected ('relations2')] 
		// for [prop.type.name/].[name/]         
[prop.type.name/] [prop.name.toLowerFirst()/]Exemple = new [prop.type.name/]();
			[if (prop.upper = 1)]
        [class.name.toLowerFirst()/].set[prop.name.toUpperFirst()/]([prop.name.toLowerFirst()/]Exemple);
			[else]
        [class.name.toLowerFirst()/].get[prop.name.toUpperFirst()/]().add([prop.name.toLowerFirst()/]Exemple);
			[/if]
			[if (prop.opposite <> null and prop.opposite.lower <> 0)]
[comment  for bidirectionnal relation /]
				[if (opposite.upper = 1)]
        [name.toLowerFirst()/]Exemple.set[prop.opposite.name.toUpperFirst()/]([class.name.toLowerFirst()/]);        
				[else]
        [name.toLowerFirst()/]Exemple.get[prop.opposite.name.toUpperFirst()/]().add([class.name.toLowerFirst()/]);        
				[/if]
			[/if]
        // [/protected] for [prop.type.name/].[name/]
		[/if]
	[/for]
        [class.projectName().toUpperFirst()/]DaoFactory.get[class.name/]Dao().create[class.name/]([class.name.toLowerFirst()/]);
        return [class.name.toLowerFirst()/];
    }
    
    // [protected ('testSpecific')]    
	// [/protected]

}

[/file]
[/template]


[template public generateTest(oper:Operation)]
[if (oper.hasStereotype(getProperty('find')))]
    [oper.findTest()/]
[/if]

[/template]


[template public findTest(oper:Operation)]
    /**
     * Test the operation [oper.name/].     
     * <!-- [protected ('findTest')] of test documentation     
	 * <!-- [/protected] of test documentation
     */
    public void test[oper.name.toLowerFirst()/]() throws DaoException {    
        // [protected ('findTestImpl')] of test[oper.name/]       
		// Initialized the test
        
        // Execute the tested code
        [oper.returnResult().type.name/] [oper.returnResult().type.name.toLowerFirst()/] = dao.[oper.name/]([oper.generateParameterNames()/])        
        
        // Verify result
        Assert.assertNotNull("Result sould not be null", [oper.returnResult().type.name.toLowerFirst()/]);
        
        // [/protected] of test[oper.name/]
    }
[/template]


[template public objectsPackage(class:Class)]
[class.daoPackage()/].test
[/template]


[template public exempleValues(prop:Property)]
	[if (prop.type.name = 'Integer')]
		[prop.name.uniqueCode()/]
	[else]
		[if (prop.type.name = 'String')]
		"my[prop.name.toUpperFirst()/]"
		[else]
			[if (prop.type.name = 'Boolean')]
		true
			[else] 
				[if (prop.type.name = 'Date')]
		new Date(0)
				[else]
					[if (prop.type.name = 'Float')]
		[prop.name.uniqueCode()/].0
					[else]
		new [prop.type.name/]()
					[/if]
				[/if]
			[/if]
		[/if]
	[/if]
[/template]


[template public exempleValues2(prop:Property)]
	[if (prop.type.name = 'Integer')]
		[prop.name.uniqueCode()/]
	[else]
		[if (prop.type.name = 'String')]
		"second[prop.name.toUpperFirst()/]"
		[else]
			[if (prop.type.name = 'Boolean')]
		false
			[else]
				[if (prop.type.name = 'Date')]
		new Date(1)
				[else]
					[if (type.name = 'Float')]
		[prop.name.uniqueCode()/].0
					[else]
		new [prop.type.name/]()
					[/if]
				[/if]
			[/if]
		[/if]
	[/if]
[/template]



