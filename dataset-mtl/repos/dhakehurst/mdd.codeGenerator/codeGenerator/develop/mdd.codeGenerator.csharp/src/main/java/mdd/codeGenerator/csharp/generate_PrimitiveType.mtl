[comment encoding = UTF-8 /]
[comment ****************************************************************
* Copyright (c) 2013 - 2014 Dr David H. Akehurst.
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* and is available at http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
* 
************************************************************************* /]
[module generate_PrimitiveType('http://www.eclipse.org/uml2/4.0.0/UML')]

[import mdd::codeGenerator::common::utils /]
[import mdd::codeGenerator::csharp::utils_csharp /]
[import mdd::codeGenerator::csharp::generate_Classifier/]
[import mdd::codeGenerator::csharp::generate_Operation /]
[import mdd::codeGenerator::csharp::generate_Behaviour /]

[template public generate(c : PrimitiveType, srcDir:String)]
[file (srcDir+getProperty('artifact.codeFolder')+'/'+c.qualifiedName('/')+'.cs', false, 'UTF-8')]
namespace [c.namespace.qualifiedName('.')/] {
    using global::framework.basicTypes;

	/// <summary> Primitive Type Description </summary>
	public[(if self.isAbstract then ' abstract ' else ' ' endif)/]class [c.name/]
	: [c.baseTypeName()/]
	{
	
	  [if (c.constructors()->isEmpty())]
	    [c.generate_DefaultConstructor()/]
	  [else]
	  [for (op : Operation | c.constructors())]
		[op.gen_Constructor()/]
	  [/for]
	  [/if]
	
	  #region Operations
	  [for (op : Operation | c.ownedOperation->reject(op2|op2.name = c.name))]
		[op.generate()/]
	  [/for]
	  #endregion

	  #region framework Specific
		[if self.isAbstract]
		[else]
		/// <summary> Clone </summary>
        public [self.name/] deepClone() {
			[self.name/] clone = new [self.name/](this);
			return clone;
        }
		[/if]
	  #endregion
	
	}

}
[/file]
[/template]

[template public generate_DefaultConstructor(arg : PrimitiveType)]
/// <summary> Constructor Description </summary>
public [self.name/]([self.baseTypeImplName()/] value) : this( new [self.basePType().fullName()/](value) ) {}

/// <summary> Constructor Description </summary>
public [self.name/]([self.basePType().fullName()/] value) : base(value) {
  [if not self.range().oclIsUndefined()]
    if ( ! ([self.rangeExpression()/]) ) {
      throw new global::System.ArgumentOutOfRangeException("[self.name/]: [self.rangeExpression().replaceAll('"', '\'').replaceAll('value','"+value.asString().to_string()+"')/]");
    }
  [/if]
}
[/template]

[query public range(arg : PrimitiveType) : Constraint =
  self.ownedRule->any( c | 'range'=c.name)
/]

[query public rangeExpression(arg : PrimitiveType) : String =
  let s:String = self.range().specification.generate()
  in
   if s.oclIsUndefined() then '' else s endif
/]

[query public baseType(c : PrimitiveType) : Type =
  let
    t : Type = c.generalization.general->any(true)
  in
    if t.oclIsUndefined() then
      c
    else
      t
    endif
/]

[query public baseTypeName(c : PrimitiveType) : String =
  let
    t : Type = c.generalization.general->any(true)
  in
    'global::'+t.qualifiedName('.')
/]

[query public baseTypeImplName(c : PrimitiveType) : String =
  let
    t : PrimitiveType = c.basePType()
  in
    if t.oclIsUndefined() then
	  'Error PrimitiveType '+c.name+' must subset another PrimitiveType or a basicType'
	else
      t.name.mappedBasicTypeName()
	endif
/]

[query public mappedBasicTypeName(n : String) : String =
  let
	s1 : Sequence(String) = Sequence{'Boolean',       'Real',         'Integer',     'String',       'DateTime',       'PositiveInteger', 'BitString'},
	s2 : Sequence(String) = Sequence{'System.Boolean','System.Double','System.Int64','System.String','System.DateTime','System.UInt64',   'System.UInt64'}
  in
	if s1->indexOf(n).oclIsUndefined() then
	  'Error no mapped basic type for: '+n
	else
      s2->at( s1->indexOf(n) )
	endif
/]


