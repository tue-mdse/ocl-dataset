[comment encoding = UTF-8 /]
[**
 * The documentation of the module module.
 */]
[module haxemodule('http://haxe.unicen.edu.ar')/]
[import ar::edu::unicen::haxe::utils /]
[import ar::edu::unicen::haxe::haxetype /]

[**
 * The documentation of the template generateElement.
 * @param aHaxeModule
 */] 
[template public physicalTemplate(srcRoot:String,element : HaxeModule)]
[let pkgname : String = if (element.thePackage->size() > 0) then element.thePackage.qualifiedName('/') else '' endif]	
[file (srcRoot.concat('/').concat(pkgname).concat('/').concat(element.name).concat('.hx'), false, 'UTF-8')]
package [if (element.thePackage->size() > 0)][element.thePackage.qualifiedName('.')/][/if]; 
[for (it : HaxeDependencyDeclaration |element.dependencies)]
[dependency(it)/] 
[/for] 
[for (it : HaxeType | element.theElements)] 
[typeTemplate(it)/]  
[/for]
[/file].
[/let]
[/template]

[template public dependency(arg : HaxeDependencyDeclaration)]
[/template]

[template public dependency(arg : HaxeUsingDeclaration)]
using [arg.referencedTerminal.qualifiedName('.')/].[arg.staticField.name/];
[/template]

[template public dependency(arg : HaxeImportDeclaration)]
import [arg.referencedTerminal.qualifiedName('.')/][if (arg.staticElement->notEmpty())].[arg.staticElement.name/][/if];
[/template]
