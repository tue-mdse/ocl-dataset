[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module utils('http://haxe.unicen.edu.ar')]

[**
 * The documentation of the query generateElement.
 * @param aHaxeAttribute
 */]
[query public makePath(mod : HaxePathReferentiable,separator :String) : Sequence(OclAny) = 
	mod.ancestors(HaxePackage)->reverse()->collect(name)->sep(separator)
/]

[query public qualifiedName(m: HaxePathReferentiable ,separator : String) : String =
if (m.parentReference->isEmpty()) then m.name else m.parentReference.qualifiedName(separator).concat(separator).concat(name) endif
/]

[template public typeAccessTemplate(arg : HaxePathReference)]
[arg.referencedTerminal.name/]
[/template]

[template public typeAccessTemplate(arg : HaxeTypeAccess)]
[/template]

[template public typeAccessTemplate(arg : HaxeFunctionTypeAccess)]
[arg.argumentTypes->collect(it|typeAccessTemplate(it))->sep(',')/] -> [typeAccessTemplate(arg.returnType)/]
[/template]

[template public typeAccessTemplate(arg : HaxeClassifierAccess)]
[arg.referencedTerminal.name/][if (arg.parameterMapping->notEmpty())]<[arg.parameterMapping->collect(x|typeAccessTemplate(x))->sep(',')/]>[/if]
[/template]
