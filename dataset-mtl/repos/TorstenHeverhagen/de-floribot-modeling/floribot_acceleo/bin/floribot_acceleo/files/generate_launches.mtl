[comment encoding = UTF-8 /]
[module generate_launches('http://www.eclipse.org/uml2/4.0.0/UML')]

[query public getRemaps(aPart : Property) : Set(String) = invoke('floribot_acceleo.java.FloriBotAcceleo', 'remaps(org.eclipse.uml2.uml.Property)', Sequence{aPart}) /]

[template public generateLaunch(aClass : Class)]

[file (aClass.namespace.name.concat('/launch/'.concat(aClass.name.concat('.launch'))), false, 'UTF-8')]
<launch>
<!-- generated by floribot_acceleo -->
	[for (param : Property | aClass.attribute) ?  (param.type.isStereotypeApplied(param.type.getAppliedStereotype('ros_profile::primitive_type')))]
		[if (param.type.name.equalsIgnoreCase('Boolean'))]
  <param name="[param.name/]" value="[param.default/]" type="bool"/>
		[elseif (param.type.name.equalsIgnoreCase('Integer')) ]
  <param name="[param.name/]" value="[param.default/]" type="int"/>
		[elseif (param.type.name.equalsIgnoreCase('Double')) ]
  <param name="[param.name/]" value="[param.default/]" type="double"/>
		[elseif (param.type.name.equalsIgnoreCase('String')) ]
  <param name="[param.name/]" value="[param.default/]"/>
		[/if]
	[/for]
  [for (aPart : Property | aClass.attribute)]
  	[if (aPart.type.isStereotypeApplied(aPart.type.getAppliedStereotype('ros_profile::node')))]
		[let lang : EnumerationLiteral = (aPart.type.getValue(aPart.type.getAppliedStereotype('ros_profile::node'), 'language')).oclAsType(EnumerationLiteral)]
			[if (lang.name.equalsIgnoreCase('Cpp') or lang.name.equalsIgnoreCase('Simulink'))]
  <node name="[aPart.name/]" pkg="[aPart.type.namespace.name/]" type="[aPart.type.name + '_node'/]" [if (not aPart.ownedComment->isEmpty())]args="[for(aComment:Comment|aPart.ownedComment)][aComment._body/] [/for]"[/if]>
			[elseif (lang.name.equalsIgnoreCase('Python'))]
  <node name="[aPart.name/]" pkg="[aPart.type.namespace.name/]" type="[aPart.type.name + '_node.py'/]" [if (not aPart.ownedComment->isEmpty())]args="[for(aComment:Comment|aPart.ownedComment)][aComment._body/] [/for]"[/if]>
			[else]
  <node name="[aPart.name/]" pkg="[aPart.type.namespace.name/]" type="[aPart.type.name/]" [if (not aPart.ownedComment->isEmpty())]args="[for(aComment:Comment|aPart.ownedComment)][aComment._body/] [/for]"[/if]>
			[/if]
		[/let]
		[for (s : String | getRemaps(aPart)) separator (    )]
    [s/]
		[/for]
		[for (param : Property | aPart.type.oclAsType(Class).attribute) ?  (param.type.isStereotypeApplied(param.type.getAppliedStereotype('ros_profile::primitive_type')))]
			[if (param.type.name.equalsIgnoreCase('Boolean'))]
      <param name="[param.name/]" value="[param.default/]" type="bool"/>
			[elseif (param.type.name.equalsIgnoreCase('Integer')) ]
      <param name="[param.name/]" value="[param.default/]" type="int"/>
			[elseif (param.type.name.equalsIgnoreCase('Double')) ]
      <param name="[param.name/]" value="[param.default/]" type="double"/>
			[elseif (param.type.name.equalsIgnoreCase('String')) ]
      <param name="[param.name/]" value="[param.default/]"/>
			[/if]
	[/for]
  </node>
	[elseif (aPart.type.isStereotypeApplied(aPart.type.getAppliedStereotype('ros_profile::launch')))]
  <include file="$(find [aPart.type.namespace.name/])/launch/[aPart.name/].launch" />
	[/if]
  [/for]
</launch>
[/file]
[/template]

