[comment encoding = UTF-8 /]
[module generate_cmakelists('http://www.eclipse.org/uml2/4.0.0/UML')]

[template public generateCMakeList(aPackage : Package) ]

[file (aPackage.name.concat('/CMakeLists.txt'), false, 'UTF-8')]
# @generated

cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

set (CMAKE_VERBOSE_MAKEFILE 1)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

[for (aNamedElement : NamedElement | aPackage.ownedMember)]
	[if (aNamedElement.isStereotypeApplied(getAppliedStereotype('ros_profile::node')))]
rosbuild_add_library([aNamedElement.name.toUpperFirst()/] src/[aNamedElement.name.toUpperFirst()/].cpp)
rosbuild_add_executable([aNamedElement.name + '_node'/] src/[aNamedElement.name + '_node'/].cpp)
target_link_libraries([aNamedElement.name + '_node'/] [aNamedElement.name.toUpperFirst()/])
[let lang : EnumerationLiteral = (aNamedElement.getValue(aNamedElement.getAppliedStereotype('ros_profile::node'), 'language')).oclAsType(EnumerationLiteral)]
	[if (lang.name.equalsIgnoreCase('Simulink'))]
rosbuild_add_library(simulink_[aNamedElement.name/] src/simulink/[aNamedElement.name/]_ert_rtw/[aNamedElement.name/].cpp)
target_link_libraries([aNamedElement.name/]_node simulink_[aNamedElement.name/])
	[/if]
[/let]
	[/if]
[/for]

#[protected ('user defined libraries')]

	#uncomment if you have defined messages
	#rosbuild_genmsg()
	#uncomment if you have defined services
	#rosbuild_gensrv()
	
	#common commands for building c++ executables and libraries
	#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
	#target_link_libraries(${PROJECT_NAME} another_library)
	#rosbuild_add_boost_directories()
	#rosbuild_link_boost(${PROJECT_NAME} thread)

#[/protected]
[/file]
[/template]
