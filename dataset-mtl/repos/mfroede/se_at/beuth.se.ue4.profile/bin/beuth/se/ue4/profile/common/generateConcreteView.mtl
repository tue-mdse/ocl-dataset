[comment encoding = UTF-8 /]
[module generateConcreteView('http://www.eclipse.org/uml2/4.0.0/UML')]
[import beuth::se::ue4::profile::common::util /]
[import beuth::se::ue4::profile::common::packageDeclaration /]

[template public generateConcreteView(model: Model, packageName : String)]
[for (class : Class | model.ownedElement)]
	[viewXML(class, model.name, 'client.view.')/]
	[viewImpl(class, model.name, 'client.view.')/]
	[if (isNotViewExisting(class))]
	[view(class, model.name, 'client.view.')/]
	[place(class, model.name, 'client.view.')/]
	[activity(class, model.name, 'client.view.')/]
	[/if]
[/for]
[for (pack : Package | model.allOwnedElements()->select(oclIsTypeOf(Package)))]
[for (class : Class | pack.ownedElement)]
	[viewXML(class, model.name, 'client.view.')/]
	[viewImpl(class, model.name, 'client.view.')/]
	[if (isNotViewExisting(class))]
	[view(class, model.name,'client.view.')/]
	[place(class, model.name,'client.view.')/]
	[activity(class, model.name,'client.view.')/]
	[/if]
[/for]
[/for]

[/template]

[template public viewImpl(class : Class, packageName : String, string :String)]
[comment][file (quallyName(packageName) + 'client/view/'+class.name+'ViewImpl.java', false, 'UTF-8')][/comment]
[file (generatePackage(class, packageName, string)+class.name+'ViewImpl.java', false, 'UTF-8')]
package [generatePackageDeclaration(class, packageName, string)/];

//import AbstractView
import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiHandler;
import com.google.gwt.user.client.ui.Widget;
import com.google.inject.Inject;

public class [class.name/]ViewImpl extends AbstractView implements [getClassName(class)/]View {
	private static [class.name/]ViewImplUiBinder uiBinder = GWT
			.create([class.name/]ViewImplUiBinder.class);

	interface [class.name/]ViewImplUiBinder extends UiBinder<Widget, [class.name/]ViewImpl> {
		// TODO Generated by GWT
		[generateProtectetRegion(class.name+'ViewImplUiBinder')/]
	}
	//[protected (class.name)]
	// TODO Auto generated Method
	[if (class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('OwnViewObject'))]
		//You must set your OwnViewObjects here. To adding them to your panel you call 'ownViewObject.asWidget()'
		[comment][for (c : Class | getTaggedValueClass(class, class.getAppliedStereotypes()->asOrderedSet()->first(),  'ownViewOject', true).oclAsSet())]
				private [c.name/] [c.name.toLowerFirst()/]; 

		[/for][/comment]
	[/if]
	[for (property : Property | class.attribute)]
		[if(property.getAppliedStereotypes()->notEmpty())]
			[if (property.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('ViewObject'))]
				[if (not isValueExists(property, 'type', 'LABEL'))]
					[if (getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'viewNavigationObject')->isEmpty() or getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'viewObject')->isEmpty())]
						[if (isValueExists(property, 'type', 'MENU'))]
							//TODO Value must be set
							@UiField
							MenuBar [property.name/];
						[elseif (isValueExists(property, 'type', 'TABLE')  or isValueExists(property, 'type', 'LIST'))]
							//TODO Value must be set						
							@UiField
							Grid [property.name/];
						[elseif (isValueExists(property, 'type', 'TREE'))]
							//TODO Value must be set
							@UiField
							Tree [property.name/];
						[elseif (isValueExists(property, 'type', 'CHECKBOX'))]
							//TODO Value must be set
							@UiField
							CheckBox [property.name/];
						[elseif (isValueExists(property, 'type', 'PANEL'))]
							//TODO Value must be set
							@UiField
							Panel [property.name/];
						[/if]
					[elseif (property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'viewNavigationObject')->notEmpty())]
						[for (prop : Property | property.getTaggedValue('ViewObject','viewNavigationObject', false).oclAsSet().oclAsType(Property))]
							[if (prop.getValue(prop.getAppliedStereotypes()->asOrderedSet()->first(),'type').oclAsType(uml::EnumerationLiteral).name.endsWith('ITEM'))]
								[if (isValueExists(property, 'type', 'MENU'))]
	@UiField
	MenuItem [prop.name/];

								[comment][elseif (isValueExists(property, 'type', 'TABLE')  or isValueExists(property, 'type', 'LIST') or isValueExists(property, 'type', 'PANEL'))]
									@UiField
									Button [stereotype.name/];[/comment]
								[elseif (isValueExists(property, 'type', 'TREE'))]
	@UiField
	TreeItem [prop.name/];

								[/if]
							[/if]
						[/for]
					[elseif (isValueExists(property, 'type', 'TEXTFIELD') and getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'value')->isEmpty())]
							//TODO Value must be set
							@UiField
							TextArea [property.name/];
					[elseif(isValueExists(property, 'type', 'POPUP'))]
							DialogBox [property.name/];	
					[elseif(isValueExists(property, 'type', 'DATEPICKER'))]
						//TODO Value must be set
						@UiField
						DatePicker [property.name/];
					[elseif (isValueExists(property, 'type', 'RADIOBUTTON'))]
						@UiField
						RadioButton [property.name/];					
					[/if]
				[/if]
			[comment][elseif (property.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('NavigationObject'))]
				[if (isValueExists(property, 'type', 'BUTTON') and getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'value')->isEmpty())]
						@UiField
						Button [property.name/];
				[/if][/comment]

			[/if]
		[/if]
	[/for]
	
	private Presenter presenter;
	//[/protected]
	@Inject
	public [class.name/]ViewImpl() {
		content.add(uiBinder.createAndBindUi(this));
		
		[for (property: Property | class.attribute)]
			[if (property.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('NavigationObject'))]
				[if (not getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name.endsWith('BUTTON'))]
		[property.name/].setCommand(new Command() {

			@Override
			public void execute() {
				presenter.on[property.name.toUpperFirst()/]Clicked();

			}
		});

				[/if]
			[/if]
		[/for]
		[generateProtectetRegion(class.name+ 'ViewImpl')/]
	}
	[if (class.interfaceRealization->isEmpty())]
	[else]
	[for (o : Operation | class.getOperations())]
	[operation(o)/]
	[/for]
	[for (o : Operation | class.interfaceRealization.target.oclAsType(Interface).getAllOperations())]
	@Override
	[operation(o)/]
	[/for]	
	[/if]

		[for (property : Property | class.attribute->sortedBy(e|e.getValue(e.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name))]	
			[if (property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name.endsWith('BUTTON'))]
	
				
			[if (i<=1)]	
	@UiHandler({ "[class.attribute->select(e|e.getValue(e.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name.endsWith('BUTTON')).name->sep('\", "')/]" })
	public void onButtonPressed(ClickEvent e) {
		presenter.onButtonClicked(e.getRelativeElement().getInnerText());
	}		
			[/if]	
			[/if]
			[/for]
	@Override
	public void setPresenter(final Presenter presenter) {
		this.presenter = presenter;
	}
	[generateProtectetRegion(class.name)/]
}
[/file]
[/template]

[template public viewXML(class : Class, packageName : String, string:String)]
[file (generatePackage(class, packageName, string)+class.name+'ViewImpl.ui.xml', false, 'UTF-8')]
<!DOCTYPE ui:UiBinder SYSTEM "http://dl.google.com/gwt/DTD/xhtml.ent">
<ui:UiBinder xmlns:ui="urn:ui:com.google.gwt.uibinder"
	xmlns:g="urn:import:com.google.gwt.user.client.ui">
	<ui:style>
	[generateProtectetRegionXML(class.name)/]
	</ui:style>
	<g:FlowPanel>
	<!-- InteractionElements -->
	<!-- [protected (class.name)] 
	     Start protectetRegion -->
		[for (property : Property | class.attribute)]
		[if(property.getAppliedStereotypes()->notEmpty())]
[comment][generateUniqueViewElements(class)/][/comment]

				[newMenu(property)/]
				[newTree(property)/]

				[newTable(property)/]
				[newList(property)/]

				[newButton(property)/]
				[newCheckBox(property)/]
				[newRadioButton(property)/]	
				[newTextField(property)/]
				[newLabel(property)/]					
[comment]			[else][/comment]
[comment]			[elseif (property.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('NavigationObject'))][/comment]
				
[comment]			[/if][/comment]
		[/if]
	[/for]
	<!-- [/protected] -->
	</g:FlowPanel>
	
</ui:UiBinder> 
[/file]
[/template]

[template public generateUniqueViewElements (class : Class) ]
				[for (prop : Property | class.attribute)]
					[setIsExisting(false)/]
					
					[if (not prop.getValue(prop.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name.endsWith('MENU') or
						 not prop.getValue(prop.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name.endsWith('TREE') or
						 not prop.getValue(prop.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name.endsWith('LIST') or
						 not prop.getValue(prop.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name.endsWith('TABLE'))]
						[for (p : Property | class.attribute)]
							[if (p.getValue(p.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name.endsWith('LIST') or
						 		 p.getValue(p.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name.endsWith('TABLE') or
								 p.getValue(p.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name.endsWith('TREE'))]
								[if (p.getTaggedValue('ViewObject', 'viewObject', false).oclAsSet()->notEmpty())]
[comment]									values: [p.getTaggedValue('ViewObject', 'viewObject', false).oclAsSet()->select(e|e.oclAsType(Property).name.endsWith(prop.name))/][/comment]
									[if ((p.getTaggedValue('ViewObject', 'viewObject', false).oclAsSet()->select(e|e.oclAsType(Property).name.endsWith(prop.name))->notEmpty()))]
[comment]									-->[setIsExisting(true)/][/comment]
									[/if]
								[/if]
								[if (p.getTaggedValue('ViewObject', 'viewNavigationObject', false).oclAsSet()->notEmpty())]
[comment]									values: [p.getTaggedValue('ViewObject', 'viewNavigationObject', false).oclAsSet()->select(e|e.oclAsType(Property).name.endsWith(prop.name))/][/comment]
									[if ((p.getTaggedValue('ViewObject', 'viewNavigationObject', false).oclAsSet()->select(e|e.oclAsType(Property).name.endsWith(prop.name))->notEmpty()))]
[comment]									-->[setIsExisting(true)/][/comment]
									[/if]
								[/if]
							[/if]
						[/for]
					[/if]
[comment]					is Existing [setter(false)/][/comment]
					[if (not setter(false))]
[comment]						-->is Existing [setter(false).oclAsType(Boolean)/][/comment]
						[newButton(prop)/]
						[newCheckBox(prop)/]
						[newRadioButton(prop)/]	
						[newTextField(prop)/]
						[newLabel(prop)/]
					[/if]
				[/for]
[/template]

[template public newList (property : Property) ]
[if (isValueExists(property, 'type', 'LIST'))]
	<g:Grid ui:field="[property.name/]">
	[if (property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'viewNavigationObject')->notEmpty() and property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'viewObject')->notEmpty())]
		<g:row>
		[for (prop : Property | property.getTaggedValue('ViewObject','viewNavigationObject', false).oclAsSet().oclAsType(Property))]
			<g:customCell>
			[newButton(prop)/]
			</g:customCell>
			[/for]
			[for (prop : Property | property.getTaggedValue('ViewObject','viewObject', false).oclAsSet().oclAsType(Property))]
			<g:customCell>
			[newLabel(prop)/]
			[newTextField(prop)/]
			</g:customCell>
		[/for]
		</g:row>
	[elseif(property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'viewNavigationObject')->notEmpty())]
		[for (prop : Property | property.getTaggedValue('ViewObject','viewNavigationObject', false).oclAsSet().oclAsType(Property))]
		<g:row>
			<g:customCell>
			[newButton(prop)/]
			</g:customCell>
		</g:row>
		[/for]
	[elseif(property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'viewObject')->notEmpty())]
		[for (prop : Property | property.getTaggedValue('ViewObject','viewObject', false).oclAsSet().oclAsType(Property))]
		<g:row>
				<g:customCell>
				[newLabel(prop)/]
				[newTextField(prop)/]
				</g:customCell>
		</g:row>
		[/for]
	[/if]
</g:Grid>
[/if]
[/template]

[template public newTable (property : Property) ]
[if (isValueExists(property, 'type', 'TABLE'))]
<g:Grid ui:field="[property.name/]">
	[if (property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'viewNavigationObject')->notEmpty() and property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'viewObject')->notEmpty())]
		<g:row>
		[for (prop : Property | property.getTaggedValue('ViewObject','viewNavigationObject', false).oclAsSet().oclAsType(Property))]
			<g:customCell>
			[newButton(prop)/]
			</g:customCell>
			<g:customCell>
			[newButton(prop)/]
			</g:customCell>
			[/for]
			[for (prop : Property | property.getTaggedValue('ViewObject','viewObject', false).oclAsSet().oclAsType(Property))]
			<g:customCell>
			[newLabel(prop)/]
			[newTextField(prop)/]
			</g:customCell>
			<g:customCell>
			[newLabel(prop)/]
			[newTextField(prop)/]
			</g:customCell>
		[/for]
		</g:row>
	[elseif(property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'viewNavigationObject')->notEmpty())]
		[for (prop : Property | property.getTaggedValue('ViewObject','viewNavigationObject', false).oclAsSet().oclAsType(Property))]
    	<g:row>
			<g:customCell>
      		[newButton(prop)/]
			</g:customCell>
			<g:customCell>
      		[newButton(prop)/]
			</g:customCell>
    	</g:row>
		[/for]
		[elseif(property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'viewObject')->notEmpty())]
			[for (prop : Property | property.getTaggedValue('ViewObject','viewObject', false).oclAsSet().oclAsType(Property))]
    	<g:row>
			<g:customCell>
      		[newLabel(prop)/]
			[newTextField(prop)/]
			</g:customCell>
			<g:customCell>
      		[newLabel(prop)/]
			[newTextField(prop)/]
			</g:customCell>
    	</g:row>
		[/for]
	[/if]
</g:Grid>
[/if]
[/template]

[template public newRadioButton (property : Property) ]
[if (isValueExists(property, 'type', 'RADIOBUTTON'))]
	<g:RadoButton ui:field="[property.name/]" name="[property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'label')/]" text="[property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'value')/]" />
[/if]
[/template]

[template public newCheckBox (property : Property) ]
[if (isValueExists(property, 'type', 'CHECKBOX'))]
	<g:CheckBox ui:field="[property.name/]">[property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'value')/]</g:CheckBox>
[/if]
[/template]

[template public newTree (property : Property) ]
[if (isValueExists(property, 'type', 'TREE'))]
<g:Tree ui:field="[property.name/]">
	[newTreeItems(property, 'viewNavigationObject')/]
	[newTreeItems(property, 'viewObject')/]
</g:Tree>
[/if]	
[/template]

[template public newMenu (property : Property) ]
[if (isValueExists(property, 'type', 'MENU'))]
<g:MenuBar ui:field="[property.name/]">
[if(property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'viewNavigationObject')->notEmpty())]
	[for (prop : Property | property.getTaggedValue('ViewObject','viewNavigationObject', false).oclAsSet().oclAsType(Property))]
	<g:MenuItem ui:field="[prop.name/]" text="[prop.getValue(prop.getAppliedStereotypes()->asOrderedSet()->first(), 'value')/]"/>
	[/for]
[/if]
</g:MenuBar>
[/if]
[/template]

[template public newTextField (property : Property) ]
[if (isValueExists(property, 'type', 'TEXTFIELD'))]
	<g:TextArea ui:field="[property.name/]" text="[property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'value')/]"/>			
[/if]
[/template]

[template public newLabel (prop : Property) ]
[if (isValueExists(prop, 'type', 'LABEL'))]
	<g:Label text="[prop.getValue(prop.getAppliedStereotypes()->asOrderedSet()->first(), 'value')/]"/>
[/if]
[/template]

[template public newButton (property : Property) ]
[if (isValueExists(property, 'type', 'BUTTON'))]
	<g:Button ui:field="[property.name/]" text="[property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'value')/]"/>
[/if]
[/template]

[template public newTreeItems (property : Property, viewObjectString: String) ]
[if(property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), viewObjectString)->notEmpty())]
	[for (prop : Property | property.getTaggedValue('ViewObject',viewObjectString, false).oclAsSet().oclAsType(Property))]
	<g:TreeItem ui:field="[prop.name/]" text="[prop.getValue(prop.getAppliedStereotypes()->asOrderedSet()->first(), 'value')/]">
		[if (prop.getValue(prop.getAppliedStereotypes()->asOrderedSet()->first(), 'viewNavigationObject')->notEmpty())]
			[newTreeItems (prop, 'viewNavigationObject')/]
		[/if]
		[if (prop.getValue(prop.getAppliedStereotypes()->asOrderedSet()->first(), 'viewObject')->notEmpty())]
			[newTreeItems (prop, 'viewObject')/]
		[/if]
	</g:TreeItem>
	[/for]
[/if]
[/template]

[template public activity(class : Class, packageName : String, string:String)]
[file (generatePackage(class, packageName, string)+class.name+'Activity.java', false, 'UTF-8')]
package [generatePackageDeclaration(class, packageName, string)/];

import com.google.gwt.place.shared.PlaceController;
import com.google.gwt.user.client.ui.AcceptsOneWidget;
import com.google.inject.Inject;
import com.google.web.bindery.event.shared.EventBus;

public class [class.name/]Activity extends AbstractActivityDefaultImpl<[class.name/]Place> implements [class.name/]View.Presenter{
	private final [class.name/]View view;
	private final EventBus eventBus;
	private final PlaceController placeController;

	@Inject
	public [class.name/]Activity(final [class.name/]View view,
			final EventBus eventBus, PlaceController placeController) {
		this.view = view;
		this.eventBus = eventBus;
		this.placeController = placeController;

	}
	@Override
	public void start(final AcceptsOneWidget panel,
			final com.google.gwt.event.shared.EventBus pEventBus) {
		[generateProtectetRegion('start')/]
		view.setPresenter(this);

		panel.setWidget(view);

	}
	//[protected (class.name)]
	// TODO Auto generated Method
		[for (property: Property | class.attribute)]
			[if (property.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('NavigationObject'))]
				[if (not getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name.endsWith('BUTTON'))]
		@Override
		public void on[property.name.toUpperFirst()/]Clicked(){
			placeController.goTo(new [getClassName(property.getTaggedValue('ViewNavigationObject', 'goToView', true)->asOrderedSet()->first().oclAsType(uml::Class))/]Place());
		}

				[/if]
			[/if]
		[/for]
		[for (property : Property | class.attribute->sortedBy(e|e.getValue(e.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name))]	
			[if (property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name.endsWith('BUTTON'))]
				[if (i<=1)]				
	@Override
	public void onButtonClicked(String buttonName){
				[/if]
		if(buttonName.equals("[property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'label')/]")) {
			placeController.goTo(new [getClassName(property.getTaggedValue('ViewNavigationObject', 'goToView', true)->asOrderedSet()->first().oclAsType(uml::Class))/]Place());
		}
			[/if]
		[/for]
		[for (property : Property | class.attribute->sortedBy(e|e.getValue(e.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name))]	
			[if (property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name.endsWith('BUTTON'))]
				[if (i<=1)]	
	}
				[/if]
			[/if]
	[/for]
	//[/protected]
}
[/file]
[/template]

[template public place(class : Class, packageName : String, string:String)]
[file (generatePackage(class, packageName, string)+class.name+'Place.java', false, 'UTF-8')]
package [generatePackageDeclaration(class, packageName, string)/];

import com.google.gwt.place.shared.Place;
import com.google.gwt.place.shared.PlaceTokenizer;

public class [class.name/]Place extends Place {
	public static class Tokenizer implements
			PlaceTokenizer<[class.name/]Place> {

		@Override
		public [class.name/]Place getPlace(final String token) {
			return new [class.name/]Place();
		}

		@Override
		public String getToken(final [class.name/]Place place) {
			return ""; //$NON-NLS-1$
		}

	}
}
[/file]
[/template]

[template public view(class : Class, packageName : String, string:String)]
[file (generatePackage(class, packageName, string)+class.name+'View.java', false, 'UTF-8')]
package [generatePackageDeclaration(class, packageName, string)/];

import com.google.gwt.user.client.ui.IsWidget;

public interface [class.name/]View extends IsWidget {
	public interface Presenter {
	
			[comment][if (class.attribute.getAppliedStereotypes())]
				[class.attribute/]
			[/if][/comment]
		[for (property: Property | class.attribute)]
		[if (property.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('NavigationObject'))]
			[if (not getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name.endsWith('BUTTON'))]
				public void on[property.name.toUpperFirst()/]Clicked();
			[/if]
		[/if]
		[/for]
		[for (property : Property | class.attribute->sortedBy(e|e.getValue(e.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name))]	
			[if (property.getValue(property.getAppliedStereotypes()->asOrderedSet()->first(), 'type').oclAsType(uml::EnumerationLiteral).name.endsWith('BUTTON'))]
				[if (i<=1)]				
		public void onButtonClicked(String buttonName);
				[/if]
			[/if]
		[/for]
		[generateProtectetRegion(class.name)/]

	}

	void setPresenter(Presenter presenter);
	[for (o : Operation | class.getOperations())]
	[operationIA(o)/]
	[/for]
	[generateProtectetRegion(class.name)/]
}
[/file]
[/template]
