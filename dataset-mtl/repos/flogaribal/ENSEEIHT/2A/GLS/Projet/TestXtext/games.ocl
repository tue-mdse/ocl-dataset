import '/plugin/fr.enseeiht.gls.projet404.games/model/generated/Games.ecore'

package games

context Game
	-----------
	-- Verify that all attributes of game are not null
	-----------
	
	inv NonNull_gameName('The \'gameName\' property of Game is null'):
		Game.name <> null
	inv NonEmpty_gameName('The \'gameName\' property of Game is empty'):
		Game.name <> ''
		
	inv NonNull_player('The \'player\' property of Game is null'):
		player <> null
	
	inv NonNull_places('At least one of the places of the Game is null'):
		places->count(null) = 0
	
	inv NonNull_knowledge('At least one of the knowledge of the Game is null'):
		knowledge->count(null) = 0
	
	inv NonNull_people('At least one of the people of the Game is null'):
		people->count(null) = 0
	
	inv NonNull_item('At least one of the items of the Game is null'):
		items->count(null) = 0
		
	inv NonNull_path('At least one of the paths of the Game is null'):
		path->count(null) = 0
		
	inv NonNull_recipe('At least one of the recipes of the Game is null'):
		recipes->count(null) = 0
	
	inv NonNull_startPlace('The startPlace of the Game is null'):
		startPlace <> null
	
	inv NonNull_endPlace('At least one of the endPlaces of the Game is null'):
		endPlace->count(null) = 0
		
	inv NonNull_difficulty('The difficulty of the Game is null'):
		difficulty <> null
	
	
	--------
	-- Verify that the player doesn't carry too much items
	--------
	inv SizeLimit_items('The player has too many items'):
		player.items->iterate(i : Item; sum: Integer = 0 | sum + i.size) <= difficulty.sizeMax
	
context Difficulty
	
	inv Positive_SizeMax('The sizemax of Difficulty is negative'):
		sizeMax >= 0
		
	inv NonNull_knowledge('At least one of the knowledge of the Game is null'):
		knowledges->count(null) = 0
	
	inv NonNull_item('At least one of the items of the Game is null'):
		items->count(null) = 0


context Player
	inv NonNull_playerName('The \'name\' property of Player is null'):
		name <> null
	inv NonEmpty_playerName('The \'name\' property of Player is empty'):
		name <> ''	
	inv NonNull_knowledge('At least one of the knowledge of the Game is null'):
		knowledge->count(null) = 0
	
	inv NonNull_item('At least one of the items of the Game is null'):
		items->count(null) = 0

context People
	inv NonNull_peopleName('The \'name\' property of People is null'):
		name <> null
	inv NonEmpty_peopleName('The \'name\' property of People is empty'):
		name <> ''
	inv NonNull_description('The \'description\' property of People is null'):
		description <> null
	inv NonEmpty_description('The \'description\' property of People is empty'):
		description <> ''
		
	inv correctValue_visible('The \'visible\' value of People must be 0 or 1'):
		visible = 0 or visible = 1
	inv correctValue_active('The \'active\' value of People must be 0 or 1'):
		active = 0 or active = 1
	inv correctValue_isMandatory('The \'isMandatory\' value of People must be 0 or 1'):
		isMandatory = 0 or isMandatory = 1
	

context Path
	inv NonNull_pathName('The \'name\' property of Path is null'):
		name <> null
	inv NonEmpty_pathName('The \'name\' property of Path is empty'):
		name <> ''
	inv NonNull_description('The \'description\' property of Path is null'):
		description <> null
	inv NonEmpty_description('The \'description\' property of Path is empty'):
		description <> ''

	inv correctValue_visible('The \'visible\' value of Path must be 0 or 1'):
		visible = 0 or visible = 1
	inv correctValue_isOpen('The \'isOpen\' value of Path must be 0 or 1'):
		isOpen = 0 or isOpen = 1
	inv correctValue_isMandatory('The \'isMandatory\' value of Path must be 0 or 1'):
		isMandatory = 0 or isMandatory = 1

context Item
	inv NonNull_itemName('The \'name\' property of Item is null'):
		name <> null
	inv NonEmpty_itemName('The \'name\' property of Item is empty'):
		name <> ''
	inv NonNull_description('The \'description\' property of Item is null'):
		description <> null
	inv NonEmpty_description('The \'description\' property of Item is empty'):
		description <> ''
	
	inv correctValue_size('The size of an Item must be positive or 0'):
		size >= 0
	inv correctValue_visible('The \'visible\' value of People must be 0 or 1'):
		visible = 0 or visible = 1
	inv correctValue_active('The \'active\' value of People must be 0 or 1'):
		active = 0 or active = 1
	inv correctValue_canPutDown('The \'canPutDown\' value of People must be 0 or 1'):
		canPutDown = 0 or canPutDown = 1
		
context Recipe
	inv NonNull_recipeName('The \'name\' property of Recipe is null'):
		name <> null
	inv NonEmpty_recipeName('The \'name\' property of Recipe is empty'):
		name <> ''
	
context Knowledge
	inv NonNull_knowledgeName('The \'name\' property of Knowledge is null'):
		name <> null
	inv NonEmpty_knowledgeName('The \'name\' property of Knowledge is empty'):
		name <> ''
	
	inv correctValue_visible('The \'visible\' value of People must be 0 or 1'):
		visible = 0 or visible = 1
	inv correctValue_active('The \'active\' value of People must be 0 or 1'):
		active = 0 or active = 1

context Place
	inv NonNull_placeName('The \'name\' property of Place is null'):
		name <> null
	inv NonEmpty_placeName('The \'name\' property of Place is empty'):
		name <> ''

	inv OnlyOne_mandatoryAndOpenAndVisiblePath('There is more than one mandatory path'):
		paths->select(isMandatory = 1 and isOpen = 1 and visible = 1)->size() <= 1
	
	inv OnlyOne_mandatoryAndActiveAndVisiblePerson('There is more than one mandatory person'):
		people->select(isMandatory = 1 and active = 1 and visible = 1)->size() <= 1

context ItemInCondition
	inv correctValue_quantity('The \'quantity\' value of ItemInCondition must be positive or 0'):
		quantity >= 0

context Condition
	inv NonNull_conditionName('The \'name\' property of Condition is null'):
		name <> null
	inv NonEmpty_conditionName('The \'name\' property of Condition is empty'):
		name <> ''

context Action
	inv NonNull_ActionName('The \'name\' property of Action is null'):
		name <> null
	inv NonEmpty_ActionName('The \'name\' property of Action is empty'):
		name <> ''

context Interaction
	inv NonNull_interactionName('The \'name\' property of Interaction is null'):
		name <> null
	inv NonEmpty_interactionName('The \'name\' property of Interaction is empty'):
		name <> ''
		
context Proposition
	inv NonNull_interactionValue('The \'value\' property of Interaction is null'):
		value <> null
	inv NonEmpty_interactionValue('The \'value\' property of Interaction is empty'):
		value <> ''
endpackage