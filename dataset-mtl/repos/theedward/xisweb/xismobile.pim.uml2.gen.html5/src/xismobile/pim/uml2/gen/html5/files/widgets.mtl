[comment encoding = UTF-8 /]
[module widgets('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::html5::common::xisWebUtils /]
[import xismobile::pim::uml2::gen::html5::files::action /]
[import xismobile::pim::uml2::gen::html5::services::services /]

[template public widgets(c : Class)]

[/template]

[template public writePageTitle(c : Class)]
	[let name : String = 'header' + c.name.toUpperFirst() + 'Title']
		<h2 id="[name/]">
		[let value : String = c.getXisWidgetValue(c.getXisLabel())]
			[if (not value.oclIsUndefined())]
			[value/]
			[/if]
		[/let]
		</h2>
	[/let]
[/template]

[template public writeWidget(c : Class) post (trim())]
	[if (c.isXisLabel())]
		[writeLabel(c)/]
	[elseif (c.isXisTextBox())]
		[writeTextBox(c)/]
	[elseif (c.isXisCheckBox())]
		[writeCheckBox(c)/]
	[elseif (c.isXisButton())]
		[writeButton(c)/]
	[elseif (c.isXisLink())]
		[writeLink(c)/]
	[elseif (c.isXisImage())]
		[writeImage(c)/]
	[elseif (c.isXisSitemap())]
		[writeSitemap(c)/]
	[elseif (c.isXisDatePicker())]
		[writeDatePicker(c)/]
	[elseif (c.isXisTimePicker())]
		[writeTimePicker(c)/]
	[elseif (c.isXisMapView())]
		[writeMap(c)/]
	[elseif (c.isXisList())]
		[writeListView(c)/]
	[elseif (c.isXisMenu())]
		[writeMenu(c)/]
	[elseif (c.isXisDropdown())]
		[writeDropdown(c)/]
	[elseif (c.isXisRadioButton())]
		[writeRadioButton(c)/]
	[elseif (c.isXisForm())]
		[writeForm(c)/]
	[elseif (c.isXisCollapsible())]
		[writeCollapsible(c)/]
	[/if]
[/template]

[template public writeWidgetJS(c : Class) post (trim())]
	[if (c.isXisMapView())]
		[writeMapJS(c) /]
	[/if]
[/template]

[template private writeLabel(c : Class)]
	[let name : String = 'label' + c.name.toUpperFirst()]
		<span id="[name/]" class="label label-default">
			[let value : String = c.getXisWidgetValue(c.getXisLabel())]
				[if (not value.oclIsUndefined())]
					[value /]
				[else]
					Empty Label
				[/if]
			[/let]
		</span>
	[/let]
[/template]
	
[template private writeTextBox(c : Class)]
	[let name : String = c.getParentXisInteractionSpace().name.toLower() + '_' + c.getXisSimpleWidgetEntityAttributeName(c.getXisTextBox()).substitute('.','_').toLower()]
		<span class="label label-default">[c.getValue(c.getXisTextBox(), 'label').toString().toUpperFirst()/]</span>
		[if (c.getXisTextBoxLines() > 1)]
			<textarea id="[name/]" rows=[c.getXisTextBoxLines() /]
			[if (c.xisTextBoxHasHint())]
				placeholder="[c.getXisTextBoxHint() /]"
			[/if]
			>
			[let value : String = c.getXisWidgetValue(c.getXisTextBox())]
				[if (not value.oclIsUndefined())]
				[value/]
				[/if]
			[/let]
				</textarea>
		[else]
			<input type="text" id="[name/]">
			[let value : String = c.getXisWidgetValue(c.getXisTextBox())]
				[if (not value.oclIsUndefined())]
					[value/]
				[/if]
			[/let]
			</input>
		[/if]
	[/let]
[/template]

[template private writeCheckBox(c : Class)]
	[let name : String = 'checkBox' + c.name.toUpperFirst()]
		<div>	
			<input type="checkbox" id="[name/]"
			[comment][if (c.hasXisAction())]
			onClick="[c.getXisAction().name.toLowerFirst()/]"
			[/if]
			[/comment]
			>
		[let value : String = c.getXisWidgetValue(c.getXisCheckBox())]
			[if (not value.oclIsUndefined())]
				[value/]
			[/if]
		[/let]
			</input>
		</div>
	[/let]
[/template]

[template private writeButton(c : Class)]
	[let name : String = 'button' + c.name.toUpperFirst()]
		<a class="btn btn-default" href="[c.getXisButtonOnTap()/]" id="[name/]"[if (c.hasXisAction())] onClick="[c.getXisAction().name.toLowerFirst()/]"[/if]>
		[let value : String = c.getXisWidgetValue(c.getXisButton())]
			[if (not value.oclIsUndefined())]
				[value/]
			[/if]
		[/let]
		</a>
	[/let]
[/template]

[template private writeLink(c : Class)]
	[let name : String = 'link' + c.name.toUpperFirst()]
		<button type="button" class="btn btn-link" href="[c.getXisLinkURL()/]" id="[name/]"
		[if (c.hasXisAction())]
			onClick="[c.getXisAction().name.toLowerFirst()/]"
		[/if]
		>
		[let value : String = c.getXisWidgetValue(c.getXisLink())]
			[if (not value.oclIsUndefined())]
				[value/]
			[/if]
		[/let]
		</button>
	[/let]
[/template]

[template private writeSitemap(c : Class)]
<nav class="navbar navbar-inverse">
	<div class="container-fluid">
		<ul class="nav navbar-nav">
			[let spaces: OrderedSet(Class) = c.getModel().getAllXisInteractionSpaces()]
				[if (spaces->size() > 0)]
					[for(cl : Class | spaces)]
			<li><a href="[cl.name.concat('.html')/]">[cl.name.toUpperFirst()/]</a></li>
					[/for]
				[/if]
			[/let]
		</ul>
	</div>
</nav>
[/template]

[template private writeImage(c : Class)]
	[let name : String = 'image' + c.name.toUpperFirst()]
		<img src="[getXisImageSrc(c) /]" class="img-rounded"/>
	[/let]
[/template]

[template private writeDatePicker(c : Class)]
	[let name : String = c.getParentXisInteractionSpace().name.toLower() + '_' + c.getXisSimpleWidgetEntityAttributeName(c.getXisDatePicker()).substitute('.','_').toLower()]
		<span class="label label-default">Date</span><input id="[name/]" type="date">
	[/let]
[/template]

[template private writeTimePicker(c : Class)]
	[let name : String = 'timePicker' + c.name.toUpperFirst()]
		<span class="label label-default">Time</span><input type="time" id="[name/]">
	[/let]
[/template]

[comment This function is worthless without writeMapPickerJS/]
[template private writeMap(c : Class)]
	[let name : String = 'map' + c.name.toUpperFirst()]
		<div id="[name/]" style="width:500px;height:380px;"></div>
	[/let]
[/template]

[comment This function should be called when writting the JS File equivalent to the map .html File/]
[template private writeMapJS(c : Class)]
	[let name : String = 'map' + c.name.toUpperFirst()]
		function initialize() {
	  		var mapProp = {
	    	center:new google.maps.LatLng([c.getMapLatitute()/],[c.getMapLongitude()/]),
	    	zoom:[c.getMapZoom()/],
	    	mapTypeId:google.maps.MapTypeId.ROADMAP
	  	};
	  	var map=new google.maps.Map(document.getElementById("[name/]"),mapProp);
		}
		google.maps.event.addDomListener(window, 'load', initialize);
	[/let]
[/template]

[template private writeListView(c : Class)]
	[let name : String = c.getParentXisInteractionSpace().name.toLower() + '_ol_' + c.getXisCompositeWidgetEntityName(c.getXisList()).toLower()]
		<div class = "panel panel-default">
		   <div class = "panel-heading">
		      <h3 class = "panel-title">
		         <i class="fa fa-bars"></i> [c.getXisCompositeWidgetEntityName(c.getXisList()).toUpperFirst()/] List
		      </h3>
		   </div>
		   <div class = "panel-body">
		      <ul class="list-group" id="[name/]">
			</ul>
		   </div>
		</div>
	[/let]
[/template]

[template private writeMenu(c : Class)]
	<div class="panel panel-primary">
      <div class="panel-heading"><i class="fa fa-cogs"></i> [c.getXisCompositeWidgetEntityName(c.getXisMenu()).toUpperFirst()/] Actions</div>
		<ul class="nav nav-pills">
			[for (cl : Class | c.getXisMenuItems())]
			[if(cl.getXisAction().isOKAction())]
			<li role="presentation"><a class="btn btn-default" id="[c.getParentXisInteractionSpace().name.toLower() + '_' + c.getXisCompositeWidgetEntityName(c.getXisMenu()).toLower() + '_' + cl.getXisAction().name.toLower()/]_btn" onClick="[cl.getXisMenuItemOnTap()/]()">[cl.getXisWidgetValue(cl.getXisMenuItem())/]</a></button></li>
			[elseif(cl.getXisAction().isDeleteAllAction() or cl.getXisAction().isDeleteAction())]
			<li role="presentation"><a class="btn btn-danger" id="[c.getParentXisInteractionSpace().name.toLower() + '_' + c.getXisCompositeWidgetEntityName(c.getXisMenu()).toLower() + '_' + cl.getXisAction().name.toLower()/]_btn" onClick="[cl.getXisMenuItemOnTap()/]()">[cl.getXisWidgetValue(cl.getXisMenuItem())/]</a></button></li>
			[else]
			<li role="presentation"><a class="btn btn-default" [if (not cl.getXisAction().getNavigation().oclIsUndefined())]href="[cl.getXisAction().getNavigation().toLowerFirst()/].html"[/if] id="[c.getParentXisInteractionSpace().name.toLower() + '_' + c.getXisCompositeWidgetEntityName(c.getXisMenu()).toLower() + '_' + cl.getXisAction().name.toLower()/]_btn">[cl.getXisWidgetValue(cl.getXisMenuItem())/]</a></button></li>
			[/if]
			[/for]
		</ul>
	</div>
	<br />
[/template]

[template private writeDropdown(c : Class)]
	[let name : String = 'dropdown' + c.name.toUpperFirst()]
		<div class="dropdown">
			<button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">
			[let header : String = c.getXisDropdownHeader()]
				[if (not header.oclIsUndefined())]
					[header/]
				[/if]
			[/let]
			<span class="caret"></span></button>
			<ul class="dropdown-menu" id="[name/]">
			[for (it : Class | getXisDropdownItems(c))]
				<li><a href="
				[let url : String = c.getXisDropdownItemURL()]
					[if (not url.oclIsUndefined())]
						[url/]
					[else]
						#
					[/if]
				[/let]
				">
				[let label : String = c.getXisDropdownItemLabel()]
					[if(not label.oclIsUndefined())]
						[label/]
					[/if]
				[/let]
				</a></li>
			[/for]
			</ul>
		</div>
	[/let]
[/template]

[template private writeRadioButton(c : Class)]
[let name : String = 'radioButton' + c.name.toUpperFirst()]
	<div>
		<input id="[name/]" type="radio">
			[let value: String = c.getXisWidgetValue(c.getXisRadioButton())]
				[if (not value.oclIsUndefined())]
					[value/]
				[/if]
			[/let]
		</input>
	</div>
[/let]
[/template]

[template private writeForm(c : Class)]
[let name : String = 'form' + c.name.toUpperFirst()]
	<div class = "panel panel-default">
	   <div class = "panel-heading">
	      <h3 class = "panel-title">
	         <i class="fa fa-pencil-square-o"></i> [c.getXisCompositeWidgetEntityName(c.getXisForm()).toUpperFirst()/] Fields
	      </h3>
	   </div>
	   <div class = "panel-body">
	      <form role="form">
			[for (cl : Class | c.getXisFormWidgets())]
				<div class="form-group">
				[writeWidget(cl)/]
				</div>
			[/for]
		</form>
	   </div>
	</div>
[/let]
[/template]

[template private writeCollapsible(c : Class)]
[let name : String = 'collapsible' + c.name.toUpperFirst()]
<div class="panel-group">
  <div class="panel panel-default">
    <div class="panel-heading">
      <h4 class="panel-title">
        <a data-toggle="collapse" href="#collapse1"><i class="fa fa-caret-square-o-down"></i> [c.getXisCollapsibleEntityName()/] Management</a>
      </h4>
    </div>
    <div id="collapse1" class="panel-collapse collapse">
	  [for (cl : Class | c.getXisCollapsibleWidgets())]
	  	[if(not cl.isXisMenu())]
		<div class="panel-body">
			[writeWidget(cl)/]
		</div>
		[/if]
	  [/for]
      <div class="panel-footer">
	  [for (cl : Class | c.getXisCollapsibleWidgets())]
	  	[if(cl.isXisMenu())]
			[writeWidget(cl)/]
		[/if]
	  [/for]
	  </div>
    </div>
  </div>
</div>
[/let]
[/template]

[template private writeAudio(c : Class)]
	[let name : String = 'audio' + c.name.toUpperFirst()]
		<audio controls="controls" src="[getXisAudioSrc(c)/]">
		    Your browser does not support the HTML5 Audio element.
		</audio>
	[/let]
[/template]

[template private writeVideo(c : Class)]
	[let name : String = 'video' + c.name.toUpperFirst()]
		<video controls="controls" src="[getXisVideoSrc(c)/]">
			Your browser does not support the HTML5 Video element.
		</video>
	[/let]
[/template]

[template private writeEmbed(c : Class)]
	[let name : String = 'video' + c.name.toUpperFirst()]
		<embed src="[getXisEmbedSrc(c)/]">
	[/let]
[/template]

[template private writeIFrame(c : Class)]
	[let name : String = 'iframe' + c.name.toUpperFirst()]
		<iframe src="[getXisIFrameSrc(c)/]">
			Your browser does not support the HTML5 IFrame element.
		</input>
	[/let]
[/template]

[template private writeCustomInput(c : Class)]
	[let name : String = 'input' + c.name.toUpperFirst()]
		<div class="form-group">
		<input id="[name/]" type="[getXisInputCustomType(c)/]">
			[let value: String = c.getXisWidgetValue(getXisInputCustom(c))]
				[if (not value.oclIsUndefined())]
					[value/]
				[/if]
			[/let]
		</input>
	</div>
	[/let]
[/template]

[template private writeImageSlider(c : Class)]
	[let name : String = 'imageSlider' + c.name.toUpperFirst()]
		<div id="[name/]" class="carousel slide" data-ride="carousel">
		  <!-- Indicators -->
		  <ol class="carousel-indicators">
			<li data-target="[name/]" data-slide-to="0" class="active"></li>
			[for (c : Class | getXisImagesFromImageSlider())]

			[/for]
		  </ol>
		
		  <!-- Wrapper for slides -->
		  <div class="carousel-inner" role="listbox">
		    <div class="item active">
		      [comment] <img src="[getXisImagePath(getFirstXisImageFromImageSlider(c), 'XIS-Mobile::XisImage')/]" >[/comment]
		    </div>
		
		    <div class="item">
		      <img src="img_chania2.jpg" alt="Chania">
		    </div>
		
		    <div class="item">
		      <img src="img_flower.jpg" alt="Flower">
		    </div>
		
		    <div class="item">
		      <img src="img_flower2.jpg" alt="Flower">
		    </div>
		  </div>
		
		  <!-- Left and right controls -->
		  <a class="left carousel-control" href="#myCarousel" role="button" data-slide="prev">
		    <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
		    <span class="sr-only">Previous</span>
		  </a>
		  <a class="right carousel-control" href="#myCarousel" role="button" data-slide="next">
		    <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
		    <span class="sr-only">Next</span>
		  </a>
		</div>
	[/let]
[/template]
