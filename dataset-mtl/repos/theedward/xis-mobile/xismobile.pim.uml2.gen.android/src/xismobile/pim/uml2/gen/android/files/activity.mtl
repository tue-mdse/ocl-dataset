[comment encoding = UTF-8 /]
[module activity('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::utils /]
[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::android::files::action /]
[import xismobile::pim::uml2::gen::android::files::widget /]
[import xismobile::pim::uml2::gen::android::files::menu /]
[import xismobile::pim::uml2::gen::android::services::services /]

[template public generateActivity(c : Class)]

[file ('src/' + c.getPackageDirectoryPath() + '/'.concat(c.name.toUpperFirst()).concat('Activity.java'), false, 'UTF-8')]
[let widgets : Sequence(Class) = c.getXisInteractionSpaceWidgets()]
package [c.getPackagePath()/];

import java.sql.Date;
[if (c.getXisLists()->size() > 0)]
import java.util.List;
[/if]

import android.app.Activity;
[if (c.hasXisDialogs())]
import android.app.AlertDialog;
[/if]
import android.content.Intent;
import android.os.Bundle;
[if (c.hasContextMenu())]
import android.view.ContextMenu.ContextMenuInfo;
import android.view.ContextMenu;
[/if]
[if (c.hasOptionsMenu())]
import android.view.Menu;
[/if]
[if (c.hasOptionsMenu() or c.hasContextMenu())]
import android.view.MenuItem;
[/if]
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnLongClickListener;
[if (c.hasContextMenu())]
import android.widget.AdapterView.AdapterContextMenuInfo;
[/if]
[if (c.getXisLists()->size() > 0)]
import android.widget.ListView;
[/if]
[let entities : Sequence(Class) = c.getInteractionSpaceReferencedEntities()]
[if (entities->needsDbHelper())]

import com.j256.ormlite.android.apptools.OpenHelperManager;
[/if]
[if (widgets->size() > 0)]

import xis_mobile.library.gestures.*;
import xis_mobile.library.widgets.*;
[/if]

[for (entity : Class | entities)]
import [c.getPackagePath()/].domain.[entity.name.toUpperFirst()/];
[/for]
[if (entities->needsDbHelper())]
import [c.getPackagePath()/].domain.OrmLiteHelper;
[elseif (entities->needsEntityManager())]
import [c.getPackagePath()/].domain.DomainEntityManager;
[/if]

public class [c.name.toUpperFirst()/]Activity extends Activity {

[let dbNeeded : Boolean = entities->needsDbHelper()]
[let managerNeeded : Boolean = entities->needsEntityManager()]
[if (dbNeeded)]
	private OrmLiteHelper helper;
[elseif (managerNeeded)]
	private DomainEntityManager manager;
[/if]
	[writeWidgetVariables(widgets)/]
[if (entities->size() > 0)]
	[for (entity : Class | c.getAllOwnedListsEntities())]
	private List<[entity.name.toUpperFirst()/]> [entity.name.toLowerFirst()/]s;
	[/for]
	[let refs : Sequence(Class) = c.getInboundCrudOperationsEntities()]
	[for (ref : Class | refs)]
	[if (ref.isPersistent())]
	private int [ref.name.toLowerFirst()/]Id = -1;
	[else]
	private String [ref.name.toLowerFirst()/]Id;	
	[/if]
	private [ref.name.toUpperFirst()/] [ref.name.toLowerFirst()/];
	[/for]
	[/let]
	[if (c.needsModes())]
	private boolean inCreateMode = false;
	private boolean inViewMode = false;
	private boolean inEditMode = false;
	[/if]
[/if]

	/** Called when the activity is first created. */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.[c.name.toLowerCase()/]);
	[if (c.hasTitle())]
		setTitle("[c.getTitle()/]");
	[/if]
	[if (entities->size() > 0)]
		[if (dbNeeded)]
		helper = OrmLiteHelper.getHelper(getApplicationContext());
		[if (c.isMainScreen())]
		[for (ent : Class | c.getMasterEntities())]
		[ent.name.toLowerFirst()/]s = helper.getAll[ent.name.toUpperFirst()/]s();
		[/for]
		[/if]
		[elseif (managerNeeded)]
		manager = DomainEntityManager.getManager(getApplicationContext());
		[if (c.isMainScreen())]
		[for (ent : Class | c.getMasterEntities())]
		[ent.name.toLowerFirst()/]s = manager.getAll[ent.name.toUpperFirst()/]s();
		[/for]
		[/if]
		[/if]
	[/if]
		[let refs : Sequence(Class) = c.getInboundCrudOperationsEntities()]
		[if (refs->size() > 0)]
		if (getIntent() != null && getIntent().getExtras() != null) {
			Bundle extras = getIntent().getExtras();
			inEditMode = true;
			[for (ref : Class | refs)]
			[if (ref.isPersistent())]
			[ref.name.toLowerFirst()/]Id = extras.getInt("[ref.name.toUpperFirst()/]Id");
			[ref.name.toLowerFirst()/] = helper.get[ref.name.toUpperFirst()/]ById([ref.name.toLowerFirst()/]Id);
			[else]
			[ref.name.toLowerFirst()/]Id = extras.getString("[ref.name.toUpperFirst()/]Id");
			[ref.name.toLowerFirst()/] = manager.get[ref.name.toUpperFirst()/]ById([ref.name.toLowerFirst()/]Id);
			[/if]
			[/for]
		} else {
			inCreateMode = true;
			[for (ref : Class | refs)]
			[ref.name.toLowerFirst()/] = new [ref.name.toUpperFirst()/]();
			[/for]
		}
		[/if]
		[/let]
		[if (widgets->size() > 0)]
		initializeWidgets();
		[/if]
	}
	[if (entities->size() > 0)]

	@Override
	protected void onDestroy() {
		super.onDestroy();
		[if (dbNeeded)]
		if (helper != null) {
			OpenHelperManager.releaseHelper();
			helper.close();
			helper = null;
		}
		[elseif (managerNeeded)]
		if (manager != null) {
			manager = null;
		}
		[/if]
	}
	[/if]
[if (widgets->size() > 0)]

	public void initializeWidgets() {
		[for (w : Class | widgets)]
		initialize[w.getWidgetName().toUpperFirst()/]();
		[/for]
	}

[for (w : Class | widgets) separator('\n')]
[if (w.isXisForm())]
[let widgets : Sequence(Class) = w.getXisInteractionSpaceWidgets()]
	[if (widgets->size() > 0)]
	[w.writeWidgetInit()/]
	[for (it : Class | widgets)]

	[it.writeWidgetInit()/]
	[/for]
	[/if]
[/let]
[else]
	[w.writeWidgetInit()/]
[/if]
[/for]
[/if]
[let m : Class = c.getOptionsMenu()]
	[generateOptionsMenu(m)/]
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.[m.name.toLowerCase()/]_menu, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		[for (it : Class | m.getXisMenuItems())]
			case R.id.[it.name.toLowerCase()/]_item:
			[if (it.hasXisAction())]
				[let op : Operation = it.getXisAction()]
				[op.writeXisAction()/]
				[/let]
			[/if]
				return true;
		[/for]
			default:
				return super.onOptionsItemSelected(item);
		}
	}
[/let]
[let m : Class = c.getContextMenu()]
	[generateContextMenu(m)/]
	@Override
	public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
		super.onCreateContextMenu(menu, v, menuInfo);
		getMenuInflater().inflate(R.menu.[m.name.toLowerCase()/]_context, menu);
	}

	@Override
	public boolean onContextItemSelected(android.view.MenuItem item) {
		[if (m.menuPerformsCrudOperations())]
		AdapterContextMenuInfo info = (AdapterContextMenuInfo) item.getMenuInfo();
		[let ent : String = m.getXisCompositeWidgetEntityName(m.getXisMenu())]
		[ent.toUpperFirst()/] [ent.toLowerFirst()/] = [ent.toLowerFirst()/]s.get(info.position);
		[/let]

		[/if]
		switch (item.getItemId()) {
		[for (it : Class | m.getXisMenuItems())]
			case R.id.[it.name.toLowerCase()/]_item:
			[if (it.hasXisAction())]
				[let op : Operation = it.getXisAction()]
				[op.writeXisAction()/]
				[/let]
			[/if]
				return true;
		[/for]
			default:
				return super.onContextItemSelected(item);
		}
	}
[/let]
[let cls : Set(Operation) = c.getAllCustomActions()]
	[if (cls->size() > 0)]

	[cls->writeCustomActionArea()/]
	[/if]
[/let]
}
[/let]
[/let]
[/let]
[/let]
[/file]
[/template]

[template private writeWidgetVariables(widgets : Sequence(Class)) post (trim())]
[if (not widgets->oclIsUndefined())]
[for (w : Class | widgets)]
[if (w.isXisForm())]
[writeWidgetVariables(w.getXisInteractionSpaceWidgets())/]
[else]
private [w.writeWidgetTypeAndName()/];
[/if]
[/for]
[/if]
[/template]

[template private writeWidgetInit(w : Class) post (trim())]
public void initialize[w.getWidgetName().toUpperFirst()/]() {
[if (w.isXisForm())]
[let widgets : Sequence(Class) = w.getXisInteractionSpaceWidgets()]
[if (widgets->size() > 0)]
	[for (it : Class | widgets)]
	initialize[it.getWidgetName().toUpperFirst()/]();
	[/for]
[/if]
[/let]
[else]
	[w.initializeWidget()/]
[/if]
}
[/template]

[template private writeWidgetTypeAndName(c : Class) post (trim())]
[if (c.isXisLabel())]
XisLabel mLabel[c.name.toUpperFirst()/]
[elseif (c.isXisTextBox())]
XisTextBox mTextBox[c.name.toUpperFirst()/]
[elseif (c.isXisCheckBox())]
XisCheckBox mCheckBox[c.name.toUpperFirst()/]
[elseif (c.isXisButton())]
XisButton mButton[c.name.toUpperFirst()/]
[elseif (c.isXisLink())]
XisLink mLink[c.name.toUpperFirst()/]
[elseif (c.isXisImage())]
XisImage mImage[c.name.toUpperFirst()/]
[elseif (c.isXisDatePicker())]
XisDatePicker mDatePicker[c.name.toUpperFirst()/]
[elseif (c.isXisTimePicker())]
XisTimePicker mTimePicker[c.name.toUpperFirst()/]
[elseif (c.isXisWebView())]
XisWebView mWeb[c.name.toUpperFirst()/]
[elseif (c.isXisMapView())]
XisMapView mMap[c.name.toUpperFirst()/]
[elseif (c.isXisList())]
ListView mList[c.name.toUpperFirst()/]
[elseif (c.isXisDropdown())]
XisDropdown mDropdown[c.name.toUpperFirst()/]
[elseif (c.isXisRadioButton())]
XisRadioButton mRadioButton[c.name.toUpperFirst()/]
[/if]
[/template]
