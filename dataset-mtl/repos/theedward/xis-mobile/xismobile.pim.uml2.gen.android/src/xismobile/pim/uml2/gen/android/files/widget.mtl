[comment encoding = UTF-8 /]
[module widget('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::android::files::action /]
[import xismobile::pim::uml2::gen::android::files::adapter /]
[import xismobile::pim::uml2::gen::android::files::strings /]
[import xismobile::pim::uml2::gen::android::services::services /]

[template public getWidgetName(c : Class) post (trim())]
[if (c.isXisLabel())]
mLabel[c.name.toUpperFirst()/]
[elseif (c.isXisTextBox())]
mTextBox[c.name.toUpperFirst()/]
[elseif (c.isXisCheckBox())]
mCheckBox[c.name.toUpperFirst()/]
[elseif (c.isXisButton())]
mButton[c.name.toUpperFirst()/]
[elseif (c.isXisLink())]
mLink[c.name.toUpperFirst()/]
[elseif (c.isXisImage())]
mImage[c.name.toUpperFirst()/]
[elseif (c.isXisDatePicker())]
mDatePicker[c.name.toUpperFirst()/]
[elseif (c.isXisTimePicker())]
mTimePicker[c.name.toUpperFirst()/]
[elseif (c.isXisWebView())]
mWebView[c.name.toUpperFirst()/]
[elseif (c.isXisMapView())]
mMapView[c.name.toUpperFirst()/]
[elseif (c.isXisDropdown())]
mDropdown[c.name.toUpperFirst()/]
[elseif (c.isXisRadioButton())]
mRadioButton[c.name.toUpperFirst()/]	
[elseif (c.isXisForm())]
mForm[c.name.toUpperFirst()/]
[elseif (c.isXisList())]
mList[c.name.toUpperFirst()/]
[/if]
[/template]

[template public initializeWidget(c : Class) post (trim())]
[if (c.isXisLabel())]
[let name : String = 'mLabel' + c.name.toUpperFirst()]
[name/] = (XisLabel) findViewById(R.id.label[c.name.toUpperFirst()/]);
	[if (c.getXisWidgetValue(c.getXisLabel()).oclIsUndefined())]
[c.writeSetWidgetValue(c.getXisLabel(), name)/]
	[/if]
	[if (c.owner.oclIsTypeOf(Class) and c.owner.oclAsType(Class).isXisVisibilityBoundary())]
[c.writeVisibility(name)/]
	[/if]
[/let]
[elseif (c.isXisTextBox())]
[let name : String = 'mTextBox' + c.name.toUpperFirst()]
[name/] = (XisTextBox) findViewById(R.id.textBox[c.name.toUpperFirst()/]);
	[if (c.getXisWidgetValue(c.getXisTextBox()).oclIsUndefined())]
[c.writeSetWidgetValue(c.getXisTextBox(), name)/]
	[/if]
	[if (c.owner.oclIsTypeOf(Class) and c.owner.oclAsType(Class).isXisVisibilityBoundary())]
[c.writeVisibility(name)/]
	[/if]
[/let]
[elseif (c.isXisCheckBox())]
[let name : String = 'mCheckBox' + c.name.toUpperFirst()]
[name/] = (XisCheckBox) findViewById(R.id.checkBox[c.name.toUpperFirst()/]);
	[if (c.getXisWidgetValue(c.getXisCheckBox()).oclIsUndefined())]
[c.writeSetWidgetValue(c.getXisCheckBox(), name)/]
	[/if]
	[if (c.owner.oclIsTypeOf(Class) and c.owner.oclAsType(Class).isXisVisibilityBoundary())]
[c.writeVisibility('mCheckBox' + c.name.toUpperFirst())/]
	[/if]
[/let]
[elseif (c.isXisButton())]
[let name : String = 'mButton' + c.name.toUpperFirst()]
[name/] = (XisButton) findViewById(R.id.button[c.name.toUpperFirst()/]);
	[if (c.getXisWidgetValue(c.getXisButton()).oclIsUndefined())]
[c.writeSetWidgetValue(c.getXisButton(), name)/]
	[/if]
	[if (c.owner.oclIsTypeOf(Class) and c.owner.oclAsType(Class).isXisVisibilityBoundary())]
[c.writeVisibility(name)/]
	[/if]
[/let]
[elseif (c.isXisLink())]
mLink[c.name.toUpperFirst()/] = (XisLink) findViewById(R.id.link[c.name.toUpperFirst()/]);
	[if (c.owner.oclIsTypeOf(Class) and c.owner.oclAsType(Class).isXisVisibilityBoundary())]
[c.writeVisibility('mLink' + c.name.toUpperFirst())/]
	[/if]
[elseif (c.isXisImage())]
mImage[c.name.toUpperFirst()/] = (XisImage) findViewById(R.id.image[c.name.toUpperFirst()/]);
	[if (c.owner.oclIsTypeOf(Class) and c.owner.oclAsType(Class).isXisVisibilityBoundary())]
[c.writeVisibility('mImage' + c.name.toUpperFirst())/]
	[/if]
[elseif (c.isXisDatePicker())]
[let name : String = 'mDatePicker' + c.name.toUpperFirst()]
[name/] = (XisDatePicker) findViewById(R.id.datePicker[c.name.toUpperFirst()/]);
	[if (c.getXisWidgetValue(c.getXisDatePicker()).oclIsUndefined())]
[c.writeSetWidgetValue(c.getXisDatePicker(), name)/]
	[/if]
	[if (c.owner.oclIsTypeOf(Class) and c.owner.oclAsType(Class).isXisVisibilityBoundary())]
[c.writeVisibility(name)/]
	[/if]
[/let]
[elseif (c.isXisTimePicker())]
[let name : String = 'mTimePicker' + c.name.toUpperFirst()]
[name/] = (XisTimePicker) findViewById(R.id.timePicker[c.name.toUpperFirst()/]);
	[if (c.getXisWidgetValue(c.getXisTimePicker()).oclIsUndefined())]
[c.writeSetWidgetValue(c.getXisTimePicker(), name)/]
	[/if]
	[if (c.owner.oclIsTypeOf(Class) and c.owner.oclAsType(Class).isXisVisibilityBoundary())]
[c.writeVisibility(name)/]
	[/if]
[/let]
[elseif (c.isXisWebView())]
mWebView[c.name.toUpperFirst()/] = (XisWebView) findViewById(R.id.web[c.name.toUpperFirst()/]);
	[if (c.owner.oclIsTypeOf(Class) and c.owner.oclAsType(Class).isXisVisibilityBoundary())]
[c.writeVisibility('mWebView' + c.name.toUpperFirst())/]
	[/if]
[elseif (c.isXisMapView())]
SupportMapFragment mv = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map[c.name.toUpperFirst()/]);
mMap[c.name.toUpperFirst()/] = mv.getMap();

if (mMap[c.name.toUpperFirst()/] == null) {
	Toast.makeText(getApplicationContext(), "Unable to create mMap[c.name.toUpperFirst()/]!", Toast.LENGTH_SHORT).show();
} else {
	[if (c.mapHasCenter())]
	LatLng center = new LatLng([c.getMapLatitute()/], [c.getMapLongitude()/]);
	[if (c.mapHasZoom())]
	mMap[c.name.toUpperFirst()/].moveCamera(CameraUpdateFactory.newLatLngZoom(center, [c.getMapZoom()/]));
	[else]
	mMap[c.name.toUpperFirst()/].moveCamera(CameraUpdateFactory.newLatLng(center));
	[/if]
	[/if]
	[if (c.mapHasMarkers())]
	for (int i = 0; i < [c.getMapMarkers()->size()/]; i++) {
	[for (m : Class | c.getMapMarkers())]
		[if (m.markerHasTitle() or m.markerHasDescription() or
			(m.markerHasLatitude() and m.markerHasLongitude()) or m.markerHasIcon())]
		MarkerOptions mOpt = new MarkerOptions();
		[if (m.markerHasTitle())]
		mOpt.title([m.getMarkerTitle()/]);
		[/if]
		[if (m.markerHasDescription())]
		mOpt.snippet([m.getMarkerDescription()/]);
		[/if]
		[if (m.markerHasLatitude() and m.markerHasLongitude())]
		mOpt.position(new LatLng([m.getMarkerLatitude()/], [m.getMarkerLongitude()/]));
		[/if]
		[if (m.markerHasIcon())]
		mOpt.icon(BitmapDescriptorFactory.fromAsset("[m.getMarkerIcon()/]"));
		[/if]
		mMap[c.name.toUpperFirst()/].addMarker(mOpt);
		[/if]
	}
	[comment @FIXME Review the use of OnTap /]
	[if (m.markerHasOnTap())]
	mMap[c.name.toUpperFirst()/].setOnInfoWindowClickListener(new OnInfoWindowClickListener() {
		@Override
		public void onInfoWindowClick(Marker marker) {
			
		}
	});
	[/if]
	[/for]
	[/if]
}
[elseif (c.isXisDropdown())]
mDropdown[c.name.toUpperFirst()/] = (XisDropdown) findViewById(R.id.dropdown[c.name.toUpperFirst()/]);
ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item);
[comment @TODO Add Items to XisDropdown  /]
adapter.add("TODO");
mDropdown.setPrompt("Select [c.name/]...");
	[if (c.owner.oclIsTypeOf(Class) and c.owner.oclAsType(Class).isXisVisibilityBoundary())]
[c.writeVisibility('mDropdown' + c.name.toUpperFirst())/]
	[/if]
[elseif (c.isXisRadioButton())]
mRadioButton[c.name.toUpperFirst()/] = (XisRadioButton) findViewById(R.id.radioButton[c.name.toUpperFirst()/]);
	[if (c.getXisWidgetValue(c.getXisRadioButton()).oclIsUndefined())]
[c.writeSetWidgetValue(c.getXisRadioButton(), name)/]
	[/if]
	[if (c.owner.oclIsTypeOf(Class) and c.owner.oclAsType(Class).isXisVisibilityBoundary())]
[c.writeVisibility('mRadioButton' + c.name.toUpperFirst())/]
	[/if]
[elseif (c.isXisList())]
mList[c.name.toUpperFirst()/] = (ListView) findViewById(R.id.list[c.name.toUpperFirst()/]);
[let entity : Class = c.getXisListEntity()]
[let item : Class = c.getXisListItems()->at(1)]
mList[c.name.toUpperFirst()/].setAdapter(new [entity.name.toUpperFirst()/]Adapter(getApplicationContext(), R.layout.[item.name.toLower()/]_item, [entity.name.toLowerFirst()/]s));
[if (item.hasContextMenu())]
registerForContextMenu(mList[c.name.toUpperFirst()/]);
[/if]
[if (c.owner.oclIsTypeOf(Class) and c.owner.oclAsType(Class).isXisVisibilityBoundary())]
[c.writeVisibility('mList' + c.name.toUpperFirst())/]
[/if]
[item.generateListItem()/]
[item.generateAdapter(entity)/]
[/let]
[/let]
[/if]
[if (not c.isXisList())]
[c.writeGestureBinding()/]
[/if]
[/template]

[template private writeVisibility(c : Class, name : String) post (trim())]
[let boundary : Class = c.owner.oclAsType(Class)]
[let entity : String = boundary.getXisCompositeWidgetEntityName(boundary.getXisVisibilityBoundary())]
[comment @FIXME Visibility Modes /]
[if (not boundary.getXisVisibilityBoundaryCreate() and
	 not boundary.getXisVisibilityBoundaryView() and
	 not boundary.getXisVisibilityBoundaryEdit())]
[name/].setVisibility(View.INVISIBLE);
[elseif (boundary.getXisVisibilityBoundaryCreate() and
	 	 not boundary.getXisVisibilityBoundaryView() and
	 	 not boundary.getXisVisibilityBoundaryEdit())]
if (!inCreateMode) {
	[name/].setVisibility(View.INVISIBLE);
}
[elseif (not boundary.getXisVisibilityBoundaryCreate() and
	 	 boundary.getXisVisibilityBoundaryView() and
	 	 not boundary.getXisVisibilityBoundaryEdit())]
if (!inViewMode) {
	[name/].setVisibility(View.INVISIBLE);
}
[elseif (not boundary.getXisVisibilityBoundaryCreate() and
	 	 not boundary.getXisVisibilityBoundaryView() and
	 	 boundary.getXisVisibilityBoundaryEdit())]
if (!inEditMode) {
	[name/].setVisibility(View.INVISIBLE);
}
[elseif (boundary.getXisVisibilityBoundaryCreate() and
	 	 boundary.getXisVisibilityBoundaryView() and
	 	 not boundary.getXisVisibilityBoundaryEdit())]
if (inEditMode) {
	[name/].setVisibility(View.INVISIBLE);
}
[elseif (boundary.getXisVisibilityBoundaryCreate() and
	 	 not boundary.getXisVisibilityBoundaryView() and
	 	 boundary.getXisVisibilityBoundaryEdit())]
if (inViewMode) {
	[name/].setVisibility(View.INVISIBLE);
}
[elseif (not boundary.getXisVisibilityBoundaryCreate() and
	 	 boundary.getXisVisibilityBoundaryView() and
	 	 boundary.getXisVisibilityBoundaryEdit())]
if (inCreateMode) {
	[name/].setVisibility(View.INVISIBLE);
}
[/if]
[/let]
[/let]
[/template]

[template private writeGestureBinding(c : Class) post (trim())]
[if (c.isXisButton() or c.isXisLink())]
[let s : Stereotype = 
	if c.isXisButton()
	then c.getXisButton()
	else c.getXisLink()
	endif
]
[let op : Operation = c.getDefaultOnTapGesture(s)]
	[if (not op.oclIsUndefined())]
[c.writeOnTapDefault(op)/]
	[/if]
[/let]
[/let]
[/if]
[let gestures : OrderedSet(Class) = c.getWidgetGestures()]
[if (gestures->size() > 0)]
	[if (gestures->select(g : Class | g.isTapGesture())->size() = 1)]
[c.writeOnTap(gestures)/]
	[/if]
	[if (gestures->select(g : Class | g.isLongTapGesture())->size() = 1)]
[c.writeOnLongTap(gestures)/]
	[/if]
	[if (gestures->select(g : Class |
		not g.isTapGesture() and not g.isLongTapGesture())->size() > 0)]
[c.writeXisGestureManager(gestures)/]
	[/if]
[/if]
[/let]
[/template]

[template private getXisGestureManagerName(c : Class) post (trim())]
[if (c.isXisLabel())]
XisLabelGestureManager
[elseif (c.isXisTextBox())]
XisTextBoxGestureManager
[elseif (c.isXisCheckBox())]
XisCheckBoxGestureManager
[elseif (c.isXisButton())]
XisButtonGestureManager
[elseif (c.isXisLink())]
XisLinkGestureManager
[elseif (c.isXisImage())]
XisImageGestureManager
[elseif (c.isXisDatePicker())]
XisDatePickerGestureManager
[elseif (c.isXisTimePicker())]
XisTimePickerGestureManager
[elseif (c.isXisWebView())]
XisWebViewGestureManager
[elseif (c.isXisMapView())]
XisMapViewGestureManager
[elseif (c.isXisDropdown())]
XisDropdownGestureManager
[elseif (c.isXisRadioButton())]
XisRadioButtonGestureManager
[/if]
[/template]

[template private writeXisGestureManager(c : Class, gestures : OrderedSet(Class)) post (trim())]
[c.getWidgetName()/].setXisGestureManager(new [c.getXisGestureManagerName()/]() {
	[writeOnDoubleTap(gestures)/]
[if (c.isXisTextBox() or c.isXisImage() or c.isXisWebView() or c.isXisMapView())]
	[writeOnSwipe(gestures)/]
[/if]
[if (c.isXisImage() or c.isXisWebView() or c.isXisMapView())]
	[writeOnStretch(gestures)/]
	[writeOnPinch(gestures)/]
[/if]
});
[/template]

[template private writeOnTap(c : Class, gestures : OrderedSet(Class)) post (trim())]
[c.getWidgetName()/].setOnClickListener(new OnClickListener() {
	@Override
	public void onClick(View v) {
	[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isTapGesture())]
	[if (taps->size() = 1)]
		[let action : Operation = taps->at(1).getXisAction()]
		[if (not action.oclIsUndefined())]
		[action.writeXisAction()/]
		[/if]
		[/let]
	[/if]
	[/let]
	}
});
[/template]

[template private writeOnTapDefault(c : Class, op : Operation) post (trim())]
[c.getWidgetName()/].setOnClickListener(new OnClickListener() {
	@Override
	public void onClick(View v) {
		[op.writeXisAction()/]
	}
});
[/template]
	
[template private writeOnDoubleTap(gestures : OrderedSet(Class)) post (trim())]
@Override
public void onDoubleTap() {
[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isDoubleTapGesture())]
[if (taps->size() = 1)]
	[let action : Operation = taps->at(1).getXisAction()]
	[if (not action.oclIsUndefined())]
	[action.writeXisAction()/]
	[/if]
	[/let]
[else]
	[writeTODO()/]
[/if]
[/let]
}
[/template]

[template private writeOnLongTap(c : Class, gestures : OrderedSet(Class)) post (trim())]
[c.getWidgetName()/].setOnLongClickListener(new OnLongClickListener() {
	@Override
	public void onLongClick(View v) {
	[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isLongTapGesture())]
	[if (taps->size() = 1)]
		[let action : Operation = taps->at(1).getXisAction()]
		[if (not action.oclIsUndefined())]
		[action.writeXisAction()/]
		[/if]
		[/let]
	[/if]
	[/let]
	}
});
[/template]

[template private writeOnSwipe(gestures : OrderedSet(Class)) post (trim())]
@Override
public void onSwipe() {
[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isSwipeGesture())]
[if (taps->size() = 1)]
	[let action : Operation = taps->at(1).getXisAction()]
	[if (not action.oclIsUndefined())]
	[action.writeXisAction()/]
	[/if]
	[/let]
[else]
	[writeTODO()/]
[/if]
[/let]
}
[/template]

[template private writeOnStretch(gestures : OrderedSet(Class)) post (trim())]
@Override
public void onStretch() {
[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isStretchGesture())]
[if (taps->size() = 1)]
	[let action : Operation = taps->at(1).getXisAction()]
	[if (not action.oclIsUndefined())]
	[action.writeXisAction()/]
	[/if]
	[/let]
[else]
	[writeTODO()/]
[/if]
[/let]
}
[/template]

[template private writeOnPinch(gestures : OrderedSet(Class)) post (trim())]
@Override
public void onPinch() {
[let taps : OrderedSet(Class) = gestures->select(g : Class | g.isPinchGesture())]
[if (taps->size() = 1)]
	[let action : Operation = taps->at(1).getXisAction()]
	[if (not action.oclIsUndefined())]
	[action.writeXisAction()/]
	[/if]
	[/let]
[else]
	[writeTODO()/]
[/if]
[/let]
}
[/template]

[template public writeWidget(widgets : Sequence(Class), c : Class) post (trim())]
[if (c.isXisLabel())]
[writeLabel(widgets, c)/]
[elseif (c.isXisTextBox())]
[writeTextBox(widgets, c)/]
[elseif (c.isXisCheckBox())]
[writeCheckBox(widgets, c)/]
[elseif (c.isXisButton())]
[writeButton(widgets, c)/]
[elseif (c.isXisLink())]
[writeLink(widgets, c)/]
[elseif (c.isXisImage())]
[writeImageView(widgets, c)/]
[elseif (c.isXisDatePicker())]
[writeDatePicker(widgets, c)/]
[elseif (c.isXisTimePicker())]
[writeTimePicker(widgets, c)/]
[elseif (c.isXisWebView())]
[writeWebView(widgets, c)/]
[elseif (c.isXisMapView())]
[writeMapView(widgets, c)/]
[elseif (c.isXisList())]
[writeListView(c)/]
[elseif (c.isXisDropdown())]
[writeDropdown(widgets, c)/]
[elseif (c.isXisRadioButton())]
[writeRadioButton(widgets, c)/]
[elseif (c.isXisForm())]
[writeForm(widgets, c)/]
[/if]
[/template]

[template public writePageTitle(c : Class)]
[let name : String = 'label' + c.name.toUpperFirst() + 'Title']
<TextView
	android:id="@+id/[name/]"
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	android:layout_centerHorizontal="true"
	[let value : String = c.getTitle()]
	android:text="[addString(name + '_text', value)/]"
	[/let]
	android:textAppearance="?android:attr/textAppearanceLarge"
/>
[/let]
[/template]

[template private writeLabel(widgets : Sequence(Class), c : Class)]
[let name : String = 'label' + c.name.toUpperFirst()]
<xis_mobile.library.widgets.XisLabel
	android:id="@+id/[name/]"
	android:layout_width="fill_parent"
	android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
[let value : String = c.getXisWidgetValue(c.getXisLabel())]
	[if (not value.oclIsUndefined())]
	android:text="[addString(name + '_text', value)/]"
	[/if]
[/let]
/>
[/let]
[/template]

[template private writeTextBox(widgets : Sequence(Class), c : Class)]
[let name : String = 'textBox' + c.name.toUpperFirst()]
<xis_mobile.library.widgets.XisTextBox
	android:id="@+id/[name/]"
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
	android:ems="10"
	[if (c.getXisTexBoxLines() > 1)]
	android:inputType="textMultiLine"
	[/if]
	android:minLines="[c.getXisTexBoxLines()/]"
	android:gravity="top"
	android:scrollbars="vertical"
	[if (c.xisTextBoxHasHint())]
	android:hint="[addString(name + '_hint', c.getXisTexBoxHint())/]"
	[/if]
[let value : String = c.getXisWidgetValue(c.getXisTextBox())]
	[if (not value.oclIsUndefined())]
	android:text="[addString(name + '_text', value)/]"
	[/if]
[/let]
/>
[/let]
[/template]

[template private writeCheckBox(widgets : Sequence(Class), c : Class)]
[let name : String = 'checkBox' + c.name.toUpperFirst()]
<xis_mobile.library.widgets.XisCheckBox
	android:id="@+id/[name/]"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
    [if (c.hasXisAction())]
	android:onClick="[c.getXisAction().name.toLowerFirst()/]"
	[/if]
[let value : String = c.getXisWidgetValue(c.getXisCheckBox())]
	[if (not value.oclIsUndefined())]
	android:text="[addString(name + '_text', value)/]"
	[/if]
[/let]
/>
[/let]
[/template]

[template private writeButton(widgets : Sequence(Class), c : Class)]
[let name : String = 'button' + c.name.toUpperFirst()]
<xis_mobile.library.widgets.XisButton
	android:id="@+id/[name/]"
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
	[if (c.hasXisAction())]
	android:onClick="[c.getXisAction().name.toLowerFirst()/]"
	[/if]
[let value : String = c.getXisWidgetValue(c.getXisButton())]
	[if (not value.oclIsUndefined())]
	android:text="[addString(name + '_text', value)/]"
	[/if]
[/let]
/>
[/let]
[/template]

[template private writeLink(widgets : Sequence(Class), c : Class)]
[let name : String = 'link' + c.name.toUpperFirst()]
<<xis_mobile.library.widgets.XisLink
	android:id="@+id/[name/]"
	android:layout_width="fill_parent"
	android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
	android:autolink="web"
	android:text="[addString(name + '_text', c.getXisLinkURL())/]"
/>
[/let]
[/template]

[template private writeImageView(widgets : Sequence(Class), c : Class)]
[let name : String = 'image' + c.name.toUpperFirst()]
<xis_mobile.library.widgets.XisImage
	android:id="@+id/[name/]"
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
	android:src="[addString(name + '_src', c.getXisImagePath())/]"
/>
[/let]
[/template]

[template private writeDatePicker(widgets : Sequence(Class), c : Class)]
[let name : String = 'datePicker' + c.name.toUpperFirst()]
<xis_mobile.library.widgets.XisDatePicker
	android:id="@+id/[name/]"
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
[let value : String = c.getXisWidgetValue(c.getXisDatePicker())]
	[if (not value.oclIsUndefined())]
	android:text="[addString(name + '_text', value)/]"
	[/if]
[/let]
/>
[/let]
[/template]

[template private writeTimePicker(widgets : Sequence(Class), c : Class)]
[let name : String = 'timePicker' + c.name.toUpperFirst()]
<xis_mobile.library.widgets.XisTimePicker
	android:id="@+id/[name/]"
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
[let value : String = c.getXisWidgetValue(c.getXisTimePicker())]
	[if (not value.oclIsUndefined())]
	android:text="[addString(name + '_text', value)/]"
	[/if]
[/let]
/>
[/let]
[/template]

[template private writeWebView(widgets : Sequence(Class), c : Class)]
[let name : String = 'webView' + c.name.toUpperFirst()]
<xis_mobile.library.widgets.XisWebView
	android:id="@+id/[name/]"
	android:layout_width="fill_parent"
	android:layout_height="fill_parent"
	[writeWidgetRelativePositioning(widgets, c)/]
/>
[/let]
[/template]

[template private writeMapView(widgets : Sequence(Class), c : Class)]
[let name : String = 'mapView' + c.name.toUpperFirst()]
<fragment
	android:id="@+id/[name/]"
	android:name="xis_mobile.library.widgets.XisMapView"
	android:layout_width="fill_parent"
	android:layout_height="fill_parent"
	[writeWidgetRelativePositioning(widgets, c)/]
/>
[/let]
[/template]

[template private writeListView(c : Class)]
[if (c.xisListIsSearchable())]
[let name : String = 'search' + c.name.toUpperFirst()]
<EditText
    android:id="@+id/[name/]"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:drawableRight="@android:drawable/ic_search_category_default"
    android:ems="10"
    android:hint="[addString(name + '_hint', 'Search...')/]" >
    <requestFocus />
</EditText>
[/let]
[/if]
<ListView
	android:id="@+id/list[c.name.toUpperFirst()/]"
	android:layout_width="match_parent"
	android:layout_height="wrap_content"
	android:layout_centerHorizontal="true"
/>
[/template]

[template private writeDropdown(widgets : Sequence(Class), c : Class)]
[let name : String = 'dropdown' + c.name.toUpperFirst()]
<xis_mobile.library.widgets.XisDropdown
    android:id="@+id/[name/]"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
/>
[/let]
[/template]

[template private writeRadioButton(widgets : Sequence(Class), c : Class)]
[let name : String = 'radioButton' + c.name.toUpperFirst()]
<xis_mobile.library.widgets.XisRadioButton
	android:id="@+id/[name/]"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    [writeWidgetRelativePositioning(widgets, c)/]
/>
[/let]
[/template]

[template private writeForm(widgets : Sequence(Class), c : Class)]
[let name : String = 'form' + c.name.toUpperFirst()]
<RelativeLayout
	android:id="@+id/[name/]"
	android:layout_width="match_parent"
	android:layout_height="wrap_content"
	[writeWidgetRelativePositioning(widgets, c)/]
	android:background="@drawable/form_border" >

[let w : Sequence(Class) = orderWidgetsByPosition(c.getXisInteractionSpaceWidgets())]
[for (cl : Class | w)]
	[writeWidget(w, cl)/]
[/for]
[/let]

</RelativeLayout>
[/let]
[/template]

[template private generateListItem(c : Class)]

[file ('res/layout/' + c.name.toLowerCase() + '_item.xml', false, 'UTF-8')]
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent" >

[if (c.itemIsSelectable())]
	<CheckBox
        android:id="@+id/checkBox[c.name.toUpperFirst()/]Selected"
        android:focusable="false"
        android:layout_alignParentRight="true"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" />
[/if]
[let widgets : Sequence(Class) = orderWidgetsByPosition(c.getXisInteractionSpaceWidgets())]
[for (cl : Class | widgets)]
	[writeWidget(widgets, cl)/]
[/for]
[/let]

</RelativeLayout>
[/file]
[/template]
