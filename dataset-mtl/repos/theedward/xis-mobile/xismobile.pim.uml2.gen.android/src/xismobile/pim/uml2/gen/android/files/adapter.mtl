[comment encoding = UTF-8 /]
[module adapter('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::android::common::utils /]
[import xismobile::pim::uml2::gen::android::services::services /]

[template public generateAdapter(widget : Class, entity : Class)]

[file ('src/' + widget.getPackageDirectoryPath() + '/'.concat(entity.name.toUpperFirst()).concat('Adapter.java'), false, 'UTF-8')]
package [widget.getPackagePath()/];

import java.util.List;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
[comment][if (widget.itemIsSelectable())]
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
[/if][/comment]

import xis_mobile.library.widgets.*;

import [widget.getPackagePath()/].domain.[entity.name.toUpperFirst()/];


public class [entity.name.toUpperFirst()/]Adapter extends ArrayAdapter<[entity.name.toUpperFirst()/]> {
    private Context context;
    private int row;
    private List<[entity.name.toUpperFirst()/]> list;
    
	public [entity.name.toUpperFirst()/]Adapter(Context context, int rowId, List<[entity.name.toUpperFirst()/]> list) {
		super(context, rowId, list);
		this.context = context;
		this.row = rowId;
		this.list = list;
	}

	@Override
	public int getCount() {
		return list.size();
	}
	
	@Override
	public [entity.name.toUpperFirst()/] getItem(int position) {
		return list.get(position);
	}
	
	@Override
	public long getItemId(int position) {
		return position;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		final ViewHolder holder;
		
		if (convertView == null) {
			LayoutInflater inflater = (LayoutInflater) context
				.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			convertView = inflater.inflate(row, null);
			holder = new ViewHolder();
[comment]	[let rowElements : Collection(Class) = widget.getChildren()][/comment]
		[for (el : Class | widget.getChildren())]
			holder.[el.name.toLowerFirst()/] = [el.writeFindWidget()/]
		[/for]
			[comment][if (widget.itemIsSelectable())]
			holder.selected = (CheckBox) convertView.findViewById(R.id.checkBox[widget.name.toUpperFirst()/]Selected);
			holder.selected.setOnCheckedChangeListener(new OnCheckedChangeListener() {
				@Override
				public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
					// TODO: Add implementation here...
				}
			});
			[/if][/comment]
			convertView.setTag(holder);
			[comment][if (widget.itemIsSelectable())]
			holder.selected.setTag(list.get(position));
			[/if][/comment]
		} else {
			holder = (ViewHolder) convertView.getTag();
			[comment][if (widget.itemIsSelectable())]
			holder.selected.setTag(list.get(position));
			[/if][/comment]
		}
	 
		if (list == null || (position + 1) > list.size())
			return convertView;

		[entity.name.toUpperFirst()/] [entity.name.toLowerFirst()/] = list.get(position);

		if ([entity.name.toLowerFirst()/] != null) {
			[for (el : Class | widget.getChildren())]
			[let attr : String = el.getXisSimpleWidgetEntityAttributeName(el.getAppliedStereotypes()->asOrderedSet()->at(1))]
			holder.[el.name.toLowerFirst()/].setText(String.valueOf([entity.name.toLowerFirst()/].get[attr.getEntityAttributeOfWidget().toUpperFirst()/]()));
			[/let]
			[/for]
		}
		
		return convertView;
	}

	public static class ViewHolder {
		[for (el : Class | widget.getChildren())]
		public [el.writeWidgetType()/] [el.name.toLowerFirst()/];
		[/for]
		[comment][if (widget.itemIsSelectable())]
		public CheckBox selected;
		[/if][/comment]
	}
[comment]	[/let][/comment]
}
[/file]
[/template]

[template private writeFindWidget(c : Class) post (trim())]
[if (c.isXisLabel())]
(XisLabel) convertView.findViewById(R.id.label[c.name.toUpperFirst()/]);
[elseif (c.isXisTextBox())]
(XisTextBox) convertView.findViewById(R.id.editText[c.name.toUpperFirst()/]);
[elseif (c.isXisCheckBox())]
(XisCheckBox) convertView.findViewById(R.id.checkBox[c.name.toUpperFirst()/]);
[elseif (c.isXisButton())]
(XisButton) convertView.findViewById(R.id.button[c.name.toUpperFirst()/]);
[elseif (c.isXisLink())]
(XisLink) convertView.findViewById(R.id.link[c.name.toUpperFirst()/]);
[elseif (c.isXisImage())]
(XisImage) convertView.findViewById(R.id.image[c.name.toUpperFirst()/]);
[elseif (c.isXisDatePicker())]
(XisDatePicker) convertView.findViewById(R.id.datePicker[c.name.toUpperFirst()/]);
[elseif (c.isXisTimePicker())]
(XisTimePicker) findViewById(R.id.timePicker[c.name.toUpperFirst()/]);
[elseif (c.isXisWebView())]
(XisWebView) convertView.findViewById(R.id.web[c.name.toUpperFirst()/]);
[elseif (c.isXisMapView())]
(XisMapView) convertView.findViewById(R.id.map[c.name.toUpperFirst()/]);
[elseif (c.isXisList())]
(ListView) convertView.findViewById(R.id.list[c.name.toUpperFirst()/]);
[elseif (c.isXisDropdown())]
(XisDropdown) convertView.findViewById(R.id.dropdown[c.name.toUpperFirst()/]);
[elseif (c.isXisRadioButton())]
(XisRadioButton) convertView.findViewById(R.id.radioButton[c.name.toUpperFirst()/]);
[/if]
[/template]

[template private writeWidgetType(c : Class) post (trim())]
[if (c.isXisLabel())]
XisLabel
[elseif (c.isXisTextBox())]
XisTextBox
[elseif (c.isXisCheckBox())]
XisCheckBox
[elseif (c.isXisButton())]
XisButton
[elseif (c.isXisLink())]
XisLink
[elseif (c.isXisImage())]
XisImage
[elseif (c.isXisDatePicker())]
XisDatePicker
[elseif (c.isXisTimePicker())]
XisTimePicker
[elseif (c.isXisWebView())]
XisWebView
[elseif (c.isXisMapView())]
XisMapView
[elseif (c.isXisList())]
ListView
[elseif (c.isXisDropdown())]
XisDropdown
[elseif (c.isXisRadioButton())]
XisRadioButton
[/if]
[/template]
