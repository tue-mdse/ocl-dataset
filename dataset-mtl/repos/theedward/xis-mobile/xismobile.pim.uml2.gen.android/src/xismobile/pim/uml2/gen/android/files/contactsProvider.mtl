[comment encoding = UTF-8 /]
[module contactsProvider('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::android::common::utils /]
[import xismobile::pim::uml2::gen::android::files::provider /]
[import xismobile::pim::uml2::gen::android::services::services /]

[template public generateContactsProvider(c : Class)]

[file ('src/' + c.getPackageDirectoryPath() + '/' + c.name.toUpperFirst() + 'ContactsProvider.java', false, 'UTF-8')]
package [c.getPackagePath()/];

import java.util.ArrayList;

import android.content.ContentProviderOperation;
import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.provider.ContactsContract;
import android.provider.ContactsContract.PhoneLookup;
import android.util.Log;

public class [c.name.toUpperFirst()/]ContactsProvider {

	private static [c.name.toUpperFirst()/]ContactsProvider instance = null;

	private Context context;
	private ContentResolver;
	
	private Uri CONTENT_URI = ContactsContract.Contacts.CONTENT_URI;
	private String _ID = ContactsContract.Contacts._ID;
	private String DISPLAY_NAME = ContactsContract.Contacts.DISPLAY_NAME;
	private String HAS_PHONE_NUMBER = ContactsContract.Contacts.HAS_PHONE_NUMBER;
	
	private Uri PhoneCONTENT_URI = ContactsContract.CommonDataKinds.Phone.CONTENT_URI;
	private String Phone_CONTACT_ID = ContactsContract.CommonDataKinds.Phone.CONTACT_ID;
	private String NUMBER = ContactsContract.CommonDataKinds.Phone.NUMBER;
	
	private Uri EmailCONTENT_URI =  ContactsContract.CommonDataKinds.Email.CONTENT_URI;
	private String EmailCONTACT_ID = ContactsContract.CommonDataKinds.Email.CONTACT_ID;
	private String DATA = ContactsContract.CommonDataKinds.Email.DATA;


	protected [c.name.toUpperFirst()/]ContactsProvider(Context context) {
		this.context = context;
		this.contentResolver = this.context.getContentResolver();
	}
	
	public static [c.name.toUpperFirst()/]ContactsProvider getInstance(Context context) {
		if (instance == null) {
			instance = new [c.name.toUpperFirst()/]ContactsProvider(context);
		}
		return instance;
	}
[let services : Sequence(Interface) = c.getXisInternalServices()]
[if (services->size() > 0)]

	[services->writeServiceArea()/]
[/if]
[/let]

	public void createContact(Contact c) {
		ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();
		
		ContentProviderOperation.Builder op =
			ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI)
	        .withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, null)
	        .withValue(ContactsContract.RawContacts.ACCOUNT_NAME, null);
		ops.add(op.build());
		
		op = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
	            .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
	            .withValue(ContactsContract.Data.MIMETYPE,
	            	ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)
	            .withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME, c.getName());
	    ops.add(op.build());

	    if (c.getPhoneNumbers().size() > 0) {
	    	for (String phone : c.getPhoneNumbers()) {
		    	op = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
		    			.withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
			            .withValue(ContactsContract.Data.MIMETYPE,
			            	ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE)
			            .withValue(ContactsContract.CommonDataKinds.Phone.NUMBER, phone)
			            .withValue(ContactsContract.CommonDataKinds.Phone.TYPE,
			            	ContactsContract.CommonDataKinds.Phone.TYPE_HOME);
		    	op.withYieldAllowed(true);
			    ops.add(op.build());
	    	}
	    }

	    if (c.getEmails().size() > 0) {
	    	for (String email : c.getEmails()) {
	    		op = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
	    	           	.withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
	    	           	.withValue(ContactsContract.Data.MIMETYPE,
	    	           		ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE)
	    	            .withValue(ContactsContract.CommonDataKinds.Email.ADDRESS, email)
	    	            .withValue(ContactsContract.CommonDataKinds.Email.TYPE,
	    	            	ContactsContract.CommonDataKinds.Email.TYPE_HOME);
	    		op.withYieldAllowed(true);
	    	    ops.add(op.build());
	    	}
	    }
	    
	    try {
	    	contentResolver.applyBatch(ContactsContract.AUTHORITY, ops);
	    	
	    	// Set Contact Id as lookup key.
	    	Uri uri = ContactsContract.Data.CONTENT_URI;
		    String['['/][']'/] projection = new String['['/][']'/] { PhoneLookup.LOOKUP_KEY };
		    String selection = ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME + " = ?";
		    String['['/][']'/] selectionArguments = { c.getName() };
		    Cursor cursor = contentResolver.query(uri, projection, selection, selectionArguments, null);
		    
		    if (cursor.getCount() > 0) {
		        while (cursor.moveToNext()) {
		        	String contact_id = cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.LOOKUP_KEY));
		        	c.setId(contact_id);
		        }
		    }
			cursor.close()
		} catch (Exception e) {
			Log.e("CONTACT", "Exception encountered while inserting contact: " + e);
		}
	}

	public void deleteContact(String id) {
		Uri	uri = Uri.withAppendedPath(ContactsContract.Contacts.CONTENT_LOOKUP_URI, id);
		try {
			contentResolver.delete(uri, null, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void updateContact(Contact c) {
		ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();

		ContentProviderOperation.Builder op =
			ContentProviderOperation.newUpdate(CONTENT_URI)
			.withSelection(ContactsContract.Data.LOOKUP_KEY + "=?", new String['['/][']'/]{ c.getId()})
			.withValue(ContactsContract.Data.MIMETYPE,
	            ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)
        	.withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME, c.getName());
        ops.add(op.build());

	    if (c.getPhoneNumbers().size() > 0) {
	    	for (String phone : c.getPhoneNumbers()) {
		    	op = ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)
		    			.withSelection(ContactsContract.Data.LOOKUP_KEY + "=?", new String['['/][']'/]{ c.getId()})
			            .withValue(ContactsContract.Data.MIMETYPE,
			            	ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE)
			            .withValue(ContactsContract.CommonDataKinds.Phone.NUMBER, phone)
			            .withValue(ContactsContract.CommonDataKinds.Phone.TYPE,
			            	ContactsContract.CommonDataKinds.Phone.TYPE_HOME);
		    	op.withYieldAllowed(true);
			    ops.add(op.build());
	    	}
	    }

	    if (c.getEmails().size() > 0) {
	    	for (String email : c.getEmails()) {
	    		op = ContentProviderOperation.newUpdate(ContactsContract.Data.CONTENT_URI)
	    				.withSelection(ContactsContract.Data.LOOKUP_KEY + "=?", String['['/][']'/]{ c.getId()})
	    	           	.withValue(ContactsContract.Data.MIMETYPE,
	    	           		ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE)
	    	            .withValue(ContactsContract.CommonDataKinds.Email.ADDRESS, email)
	    	            .withValue(ContactsContract.CommonDataKinds.Email.TYPE,
	    	            	ContactsContract.CommonDataKinds.Email.TYPE_HOME);
	    		
	    		op.withYieldAllowed(true);
	    	    ops.add(op.build());
	    	}
	    }
	    
	    try {
	    	contentResolver.applyBatch(ContactsContract.AUTHORITY, ops);
		} catch (Exception e) {
			Log.e("CONTACT", "Exception encountered while updating contact: " + e);
		}
	}
	}

	public ArrayList<Contact> getAllContacts() {
		ArrayList<Contact> contacts = new ArrayList<Contact>();
		Cursor cursor = contentResolver.query(CONTENT_URI, null, null, null, null);	

		if (cursor.getCount() > 0) {
			String phoneNumber = null;
			String email = null;
			Contact c = null;
			
			while (cursor.moveToNext()) {
	
				String contact_id = cursor.getString(cursor.getColumnIndex(_ID));
				String name = cursor.getString(cursor.getColumnIndex(DISPLAY_NAME));
				int hasPhoneNumber = Integer.parseInt(cursor.getString(cursor.getColumnIndex(HAS_PHONE_NUMBER)));
	
				if (hasPhoneNumber > 0) {
					c = new Contact();
					c.setName(name);
					// Query and loop for every phone number of the contact
					Cursor phoneCursor = contentResolver.query(PhoneCONTENT_URI, null, Phone_CONTACT_ID + " = ?", new String['['/][']'/] { contact_id }, null);
	
					while (phoneCursor.moveToNext()) {
						phoneNumber = phoneCursor.getString(phoneCursor.getColumnIndex(NUMBER));
						c.addPhoneNumber(phoneNumber);
					}
					phoneCursor.close();
	
					// Query and loop for every email of the contact
					Cursor emailCursor = contentResolver.query(EmailCONTENT_URI, null, EmailCONTACT_ID + " = ?", new String['['/][']'/] { contact_id }, null);
	
					while (emailCursor.moveToNext()) {
						email = emailCursor.getString(emailCursor.getColumnIndex(DATA));
						c.addEmail(email);
					}
					emailCursor.close();
				}
				contacts.add(c);
			}
		}
		cursor.close()
		return contacts;
	}
	
	public void deleteAllContacts() {
		contentResolver.delete(ContactsContract.RawContacts.CONTENT_URI, null, null);
	}

	public static class Contact {
		
		private String id;
		private String name;
		private ArrayList<String> phoneNumbers;
		private ArrayList<String> emails;
		
		public Contact() {
			phoneNumbers = new ArrayList<String>();
			emails = new ArrayList<String>();
		}
		
		public Contact(String name, ArrayList<String> phoneNumbers, ArrayList<String> emails) {
			this.name = name;
			this.phoneNumbers = phoneNumbers;
			this.emails = emails;
		}

		public String getId() {
			return id;
		}

		public void setId(String id) {
			this.id = id;
		}

		public String getName() {
			return name;
		}

		public void setName(String name) {
			this.name = name;
		}

		public ArrayList<String> getPhoneNumbers() {
			return phoneNumbers;
		}

		public void setPhoneNumbers(ArrayList<String> phoneNumbers) {
			this.phoneNumbers = phoneNumbers;
		}

		public void addPhoneNumber(String phoneNumber) {
			this.phoneNumbers.add(phoneNumber);
		}
		
		public ArrayList<String> getEmails() {
			return emails;
		}

		public void setEmails(ArrayList<String> emails) {
			this.emails = emails;
		}
		
		public void addEmail(String email) {
			this.emails.add(email);
		}
	}
}
[/file]
[/template]
