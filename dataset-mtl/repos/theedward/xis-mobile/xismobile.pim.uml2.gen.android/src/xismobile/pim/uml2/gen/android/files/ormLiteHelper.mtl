[comment encoding = UTF-8 /]
[module ormLiteHelper('http://www.eclipse.org/uml2/4.0.0/UML')]

[import xismobile::pim::uml2::gen::android::common::xisMobileUtils /]
[import xismobile::pim::uml2::gen::android::common::utils /]
[import xismobile::pim::uml2::gen::android::services::services /]

[template public generateOrmLiteHelper(entities : OrderedSet(Class), model : Model)]

[file ('src/' + entities->first().getPackageDirectoryPath()  +  '/domain/OrmLiteHelper.java', false, 'UTF-8')]
package [entities->first().getPackagePath()/].domain;

import java.sql.SQLException;
import java.util.List;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;

import com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper;
import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.support.ConnectionSource;
import com.j256.ormlite.table.TableUtils;


public class OrmLiteHelper extends OrmLiteSqliteOpenHelper {
 
	private static final String TAG = "OrmLiteHelper";
	private static final String DB_NAME = "[model.name.toUpperFirst()/].db";
	private static final int DB_VERSION = 1;
	private static OrmLiteHelper instance = null;

	private Context context;
	[for (c : Class | entities)]
	private Dao<[c.name.toUpperFirst()/], Integer> [c.name.toLowerFirst()/]Dao = null;
	[/for]
[let assocs : Sequence(String) = entities.getManyToManyAssociations()]
	[for (s : String | assocs)]
	private Dao<[s/], Integer> [s.toLowerFirst()/]Dao = null;
	[/for]
 
	protected OrmLiteHelper(Context context) {
		super(context, DB_NAME, null, DB_VERSION);
		this.context = context;
	}

	public static OrmLiteHelper getHelper(Context context) {
		if (instance == null) {
			instance = new OrmLiteHelper(context);
		}
		return instance;
	}
 
	[for (c : Class | entities) separator ('\n')]
	[c.name.writeDaoOperations()/]
	[/for]
	[if (assocs->size() > 0)]

	[for (s : String | assocs) separator ('\n')]
	[s.writeDaoOperations()/]
	[/for]
	[/if]

	public void createTables(ConnectionSource connectionSource) throws SQLException {
		[for (c : Class | entities)]
		TableUtils.createTable(connectionSource, [c.name.toUpperFirst()/].class);
		[/for]
		[for (s : String | assocs)]
		TableUtils.createTable(connectionSource, [s/].class);
		[/for]
	}

	public void dropTables(ConnectionSource connectionSource) throws SQLException {
		[for (c : Class | entities)]
		TableUtils.dropTable(connectionSource, [c.name.toUpperFirst()/].class, true);
		[/for]
		[for (s : String | assocs)]
		TableUtils.dropTable(connectionSource, [s/].class, true);
		[/for]
	}
	
	@Override
	public void close() {
		super.close();
		[for (c : Class | entities)]
		[c.name.toLowerFirst()/]Dao = null;
		[/for]
		[for (s : String | assocs)]
		[s.toLowerFirst()/]Dao = null;
		[/for]
	}
[/let]

	@Override
	public void onCreate(SQLiteDatabase db, ConnectionSource connectionSource) {
		try {
			Log.i(TAG, "Creating the tables...");
			createTables(connectionSource);
		} catch(SQLException e) {
			Log.e(TAG, "Not possible to create the tables", e);
		}
	}
 
	@Override
	public void onUpgrade(SQLiteDatabase db, ConnectionSource connectionSource, int oldVersion, int newVersion) {
		try {
			Log.i(TAG,
				"Upgrading database from version " + oldVersion + " to "
		        + newVersion + ", which will destroy all old data...");
			dropTables(connectionSource);
			onCreate(db, connectionSource);
		} catch(SQLException e) {
			Log.e(TAG, "Not possible to drop the tables", e);
		}
	}

}
[/file]
[/template]

[template private writeDaoOperations(s : String)]
public Dao<[s.toUpperFirst()/], Integer> get[s.toUpperFirst()/]Dao() {
	if ([s.toLowerFirst()/]Dao == null) {
		try {
			[s.toLowerFirst()/]Dao = getDao([s.toUpperFirst()/].class);
		} catch(SQLException e) {
			e.printStackTrace();
		}
	}
	return [s.toLowerFirst()/]Dao;
}

public int createOrUpdate[s.toUpperFirst()/]([s.toUpperFirst()/] [s.toLowerFirst()/]) {
	int i = -1;
	try {
		[s.toLowerFirst()/]Dao = get[s.toUpperFirst()/]Dao();
		i = [s.toLowerFirst()/]Dao.createOrUpdate([s.toLowerFirst()/]).getNumLinesChanged();
	} catch (SQLException e) {
		e.printStackTrace();
	}
	return i;
}

public [s.toUpperFirst()/] get[s.toUpperFirst()/]ById(int id) {
	[s.toUpperFirst()/] res = null;
	try {
		[s.toLowerFirst()/]Dao = get[s.toUpperFirst()/]Dao();
		res = [s.toLowerFirst()/]Dao.queryForId(id);
	} catch (SQLException e) {
		e.printStackTrace();
	}
	return res;
}

public List<[s.toUpperFirst()/]> getAll[s.toUpperFirst()/]s() {
	List<[s.toUpperFirst()/]> list = null;
	try {
		[s.toLowerFirst()/]Dao = get[s.toUpperFirst()/]Dao();
		list = [s.toLowerFirst()/]Dao.queryForAll();
	} catch (SQLException e) {
		e.printStackTrace();
	}
	return list;
}

public int delete[s.toUpperFirst()/]([s.toUpperFirst()/] [s.toLowerFirst()/]) {
	int i = -1;
	try {
		[s.toLowerFirst()/]Dao = get[s.toUpperFirst()/]Dao();
		i = [s.toLowerFirst()/]Dao.delete([s.toLowerFirst()/]);
	} catch (SQLException e) {
		e.printStackTrace();
	}
	return i;
}

public int deleteAll[s.toUpperFirst()/]s() {
	int i = -1;
	try {
		[s.toLowerFirst()/]Dao = get[s.toUpperFirst()/]Dao();
		List<[s.toUpperFirst()/]> list = [s.toLowerFirst()/]Dao.queryForAll();
		i = [s.toLowerFirst()/]Dao.delete(list);
	} catch (SQLException e) {
		e.printStackTrace();
	}
	return i;
}
[/template]
