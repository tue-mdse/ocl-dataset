[comment encoding = UTF-8 /]
[**
 * The name of module must be the same as the mtl file.
*/]
[module php('http://www.eclipse.org/uml2/4.0.0/UML')]

[**
 * The main entry - looks over the UML diagram and creates one php file per class.
 * If the class is contained in a package, the php file will be created in the folder with the package name.
 * @param c UML Class.
*/]
[template public generate(c : Class)]
[comment @main/]
[file (c.qualifiedName.path().concat('.php'), false, 'UTF-8')]
[c.genClass()/]
[/file]
[/template]

[**
 * The main entry - generate a php main file.
 * @param m UML Model.
*/]
[template public generate(m : Model)]
[comment @main/]
[file ('Main.php', false, 'UTF-8')]
<?php

/* Generated from GenMyModel */


[/file]
[/template]

[**
 * Generates the class (content of the php file).
 * @param c UML Class.
*/]
[template public genClass(c : Class)]
<?php[c.generalization.genRequire()/]

/* Generated from GenMyModel */

class [c.name/][c.generalization.genGeneralization()/] {
	[c.attribute.genAttribute()/]
}
[/template]

[**
 * Generates attribute code (name and visibility).
 * If the attribute visibility is set to "package", then it will be considered as protected. 
 * @param p UML Property.
*/]
[template public genAttribute(p : Property)]
[if (p.visibility <> VisibilityKind::_package )][p.visibility/][else]protected[/if] $[p.name/];

[/template]

[**
 * Generates class inheritance (i.e., when a class inherits from an other one).
 * @param g UML Generalization (Generalisation is the ineheritance link between two classes or two interfaces).
*/]
[template public genGeneralization(g : Generalization)]
 extends [g.general->any(true).name/]
[/template]


[**
 * Generates "require" link when a class inherits from an other class.
 * @param g UML Generalization.
*/]
[template public genRequire(g : Generalization)]

require_once '[g.general->any(true).qualifiedName.path().concat('.php')/]';

[/template]

[**
 * Translates the given string to a path.
 * Example : A::B::C::D produces B/C/D.
 * @param n String.
*/]
[query public path(n : String) : String =
	 n.replaceAll('[^:]*::(.*)', '$1').replaceAll('::', '/')
/]