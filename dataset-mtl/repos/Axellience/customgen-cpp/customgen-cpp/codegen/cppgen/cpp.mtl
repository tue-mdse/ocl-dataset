[comment encoding = UTF-8 /]
[**
 * The name of module must be the same as the mtl file.
*/]
[module cpp('http://www.eclipse.org/uml2/4.0.0/UML')]

[template public generate(c : Class) ? (c.owner->selectByKind(Model)->isEmpty() and c.name.isValid())]
[comment @main/]
[file ('src/'.concat(c.qualifiedName.path()).concat('.hpp'), false, 'UTF-8')]

/* Generated from GenMyModel */

[let packs : Sequence(String) = c.getNearestPackage().qualifiedName.nameSpace().tokenize('::')]
#ifndef __DEF_[c.name.toUpper()/]__
#define __DEF_[c.name.toUpper()/]__

[c.genTypeInclude()/][c.genGeneralizationInclude()/]
[c.getModel().nestedPackage->select(allOwnedElements()->includes(c)).genNamespace(c)/]

#endif
[/let]
[/file]

[file ('src/'.concat(c.qualifiedName.path()).concat('.cpp'), false, 'UTF-8')]

/* Generated from GenMyModel */

#include "[c.name/].hpp"
[c.getModel().nestedPackage->select(allOwnedElements()->includes(c)).genNamespace(c.getNearestPackage())/]
[/file]
[/template]

[template public genNamespace(p : Package, e : Element) ? (not p.ownedElement->includes(e))]
namespace [p.name/]
{
	[p.nestedPackage->select(allOwnedElements()->includes(e)).genNamespace(e)/]
}
[/template]

[template public genNamespace(p : Package, e : Element) ? (p.ownedElement->includes(e))]
namespace [p.name/]
{
	[if (e.oclIsKindOf(Class))]
	[e.oclAsType(Class).genClass()/]
	[else]
	namespace [e.oclAsType(NamedElement).name/]
	{

	}
	[/if]
}
[/template]

[template public generate(c : Class) ? (not c.owner->selectByKind(Model)->isEmpty() and c.name.isValid())]
[comment @main/]
[file ('src/'.concat(c.name).concat('.hpp'), false, 'UTF-8')]

/* Generated from GenMyModel */

#ifndef DEF_[c.name.toUpper()/]
#define DEF_[c.name.toUpper()/]

[c.genTypeInclude()/][c.genGeneralizationInclude()/]
[c.genClass()/]

#endif
[/file]

[file ('src/'.concat(c.name).concat('.cpp'), false, 'UTF-8')]

/* Generated from GenMyModel */

#include "[c.name/].hpp"
[/file]
[/template]

[template public genClass(c : Class) ? (c.name.isValid())]
class [c.name/][c.genGeneralization()/]
{
	[c.genAttribute()/]
};['\n'/]
[/template]

[template public genGeneralization(c : Class)]
[for (g : Generalization | c.generalization) before (' : ') separator (', ')]public [g.general.qualifiedName.nameSpace()/][/for]
[/template]

[template public genGeneralizationInclude(c : Class)]
[for (g : Generalization | c.generalization)]
#include "[c.qualifiedName.include()/][g.general.qualifiedName.path()/].hpp"
[/for]
[/template]

[template public genAttribute(c : Class)]
[if (c.attribute->select((type <> null) and (name.isValid()))->exists(visibility = VisibilityKind::public))][VisibilityKind::public/] :
	[for (p : Property | c.attribute)][if (p.visibility  = VisibilityKind::public)][p.type.name.toType().trim()/] [p.name/];['\n\t'/][/if][/for]
[/if]
[if (c.attribute->select((type <> null) and (name.isValid()))->exists(visibility = VisibilityKind::protected))][VisibilityKind::protected/] :
	[for (p : Property | c.attribute)][if (p.visibility  = VisibilityKind::protected)][p.type.name.toType().trim()/] [p.name/];['\n\t'/][/if][/for]
[/if]
[if (c.attribute->select((type <> null) and (name.isValid()))->exists((visibility = VisibilityKind::private)or(visibility = VisibilityKind::_package)))][VisibilityKind::private/] :
	[for (p : Property | c.attribute)][if ((visibility = VisibilityKind::private)or(visibility = VisibilityKind::_package))][p.type.name.toType().trim()/] [p.name/];['\n\t'/][/if][/for]
[/if]
[/template]

[template public toType(s : String)]
[if (s.equalsIgnoreCase('Integer'))]	int
	[elseif (s.equalsIgnoreCase('Boolean'))]	bool
	[elseif (s.equalsIgnoreCase('ByteArray'))]	unsigned char *array
	[elseif (s.equalsIgnoreCase('Date'))]	time_t
	[elseif (s.equalsIgnoreCase('Real'))]	double
	[elseif (s.equalsIgnoreCase('UnlimitedNatural'))]	unsigned int
	[elseif (s.equalsIgnoreCase('String'))]	std::string
	[elseif (s.equalsIgnoreCase('Long'))]	long double
	[elseif (s.equalsIgnoreCase('Char'))]	char
[else] [s/]	
[/if]
[/template]

[template public genTypeInclude(c : Class) ? (c.ownedAttribute->select(type <> null)->exists(type.name = 'Date'))]
#include <ctime>['\n'/]
[/template]

[template public genTypeInclude(c : Class) ? (c.ownedAttribute->select(type <> null)->exists(type.name = 'String'))]
#include <iostream>['\n'/]
[/template]

[query public isValid(n : String) : Boolean =
	 n <> null and n <> ''
/]
[query public path(n : String) : String =
	 n.replaceAll('[^:]*::(.*)', '$1').replaceAll('::', '/')
/]
[query public nameSpace(n : String) : String =
	 n.replaceAll('[^:]*::(.*)', '$1')
/]
[query public include(n : String) : String =
	 n.replaceAll('[^:]*::[^:]*(.*)', '$1').replaceAll('::[^:]*','../')
/]