[comment encoding = UTF-8 /]
[module generateCSharp('http://github.com/crytherion/FormModeler')]


[template public generateElement(aRacine : Racine)]
[comment @main/]
[for (aEcran : Ecran | ecrans)]
	[file ('out/csharp/' + aEcran.nom + '.xaml.cs', false, 'UTF-8')]
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
	using System.Windows;
	using System.Windows.Controls;
	using System.Windows.Data;
	using System.Windows.Documents;
	using System.Windows.Input;
	using System.Windows.Media;
	using System.Windows.Media.Imaging;
	using System.Windows.Navigation;
	using System.Windows.Shapes;
	
	namespace GeneratedCode
	{
	    /// <summary>
	    /// Logique d'interaction pour [aEcran.nom/].xaml
	    /// </summary>
	    public partial class [aEcran.nom/] : Page
	    {
	        public [aEcran.nom/]()
	        {
	            InitializeComponent();
	        }

	[/file] 
	[file ('out/csharp/' + aEcran.nom + '.xaml', false, 'UTF-8')]
	<Page x:Class="GeneratedCode.[aEcran.nom/]"
	      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	      mc:Ignorable="d"
	      Background="White"
		  Title="[titre/]">
	    <ScrollViewer>
	        <Grid>
	            <Grid.RowDefinitions>
				[nom.setLigne(widgets->sortedBy(row)->first().row)/]
				<RowDefinition Height="Auto" />
				[for (aWidget : Widget | widgets->sortedBy(row))]
					[if (aEcran.nom.getLigne() <> row)]
						[aEcran.nom.setLigne(row)/]
						<RowDefinition Height="Auto" />
					[/if]
				[/for]
	            </Grid.RowDefinitions>
	
	            <Grid.ColumnDefinitions>
				[nom.setLigne(widgets->sortedBy(col)->first().col)/]
				<ColumnDefinition Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type NavigationWindow}}}"/>
				[for (aWidget : Widget | widgets->sortedBy(col))]
					[if (aEcran.nom.getLigne() <> col)]
						[aEcran.nom.setLigne(col)/]
						<ColumnDefinition Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type NavigationWindow}}}"/>
					[/if]
				[/for]
	            </Grid.ColumnDefinitions>

				[for (aWidget : Widget | widgets)]
					[genererWidget(aWidget)/]
				[/for]
	        </Grid>
	    </ScrollViewer>
	</Page>		
	[/file]
	[file ('out/csharp/' + aEcran.nom + '.xaml.cs', true, 'UTF-8')]
		}
	}
	[/file]
[/for]
[/template]

[query public getLigne(contexte : String) : Integer
	= invoke('org.eclipse.acceleo.module.formModeler.Service', 'getLigne(java.lang.String)', Sequence{contexte})
/]

[query public setLigne(contexte : String, ligne : Integer) : OclVoid
	= invoke('org.eclipse.acceleo.module.formModeler.Service', 'setLigne(java.lang.String, java.lang.Integer)', Sequence{contexte, ligne})
/]



[template genererWidget(w : Widget) post (trim())] 
[/template] 

[template genererWidget(w : Label) post (trim())] 
    <TextBlock x:Name="[w.nom/]" TextWrapping="Wrap" Text="[w.valeur/]" Grid.Row="[w.row/]" Grid.Column="[w.col/]" />
[/template]

[template genererWidget(w : Photo) post (trim())] 
	<Image x:Name="[w.nom/]" Source="[w.chemin/]" Grid.Row="[w.row/]" Grid.Column="[w.col/]" HorizontalAlignment="Left" VerticalAlignment="Top" Stretch="None" />
[/template]

[template genererWidget(w : Bouton) post (trim())] 
	<Button x:Name="[w.nom/]" Content="[w.valeur/]" Grid.Row="[w.row/]" Grid.Column="[w.col/]" Click="[w.nom/]_Click"/>
		[file ('out/csharp/' + w.ancestors(Ecran).nom + '.xaml.cs', true, 'UTF-8')]
			private void [w.nom/]_Click(object sender, RoutedEventArgs e)
	        {
				//  [w.ancestors(Ecran).nom/]
	            this.NavigationService.Navigate(new Uri("[w.cible.nom/].xaml", UriKind.Relative));
	        }
		[/file]
[/template]

[template genererWidget(w : ChampTexte) post (trim())]
 	<TextBox x:Name="[w.nom/]" Grid.Row="[w.row/]" Grid.Column="[w.col/]" />
[/template]

[template genererWidget(w : Cocher) post (trim())] 
	<CheckBox Grid.Row="[w.row/]" Grid.Column="[w.col/]" IsChecked="[if (w.etatParDefaut)]true[else]false[/if]"/>
[/template]

[template genererWidget(w : Lien) post (trim())] 
	<TextBlock x:Name="[w.nom/]" Grid.Row="[w.row/]" Grid.Column="[w.col/]">
		<Hyperlink  NavigateUri="[w.cible.nom/].xaml">[w.valeur/]</Hyperlink>
	</TextBlock>
[/template]

[template genererWidget(w : MenuDeroulant) post (trim())]
	<ComboBox x:Name="[w.nom/]" Grid.Row="[w.row/]" Grid.Column="[w.col/]" SelectedIndex="0">
		[for (chaine : String | w.valeur)]
			<ComboBoxItem Content="[chaine/]"></ComboBoxItem>
		[/for]
    </ComboBox>
[/template]