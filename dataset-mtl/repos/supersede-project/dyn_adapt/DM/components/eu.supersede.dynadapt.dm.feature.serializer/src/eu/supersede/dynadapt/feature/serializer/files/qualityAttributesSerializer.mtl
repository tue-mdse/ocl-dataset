[comment encoding = UTF-8 /]
[module qualityAttributesSerializer('http://zcu.cz/yafmt/model/fm')]


[template public serializeQualityAttributes(aFeatureModel : FeatureModel)]
[file (aFeatureModel.name.concat('.quality'), false, 'UTF-8')]
[featureModel(aFeatureModel)/]
[/file]
[/template]

[comment Post action removes last comma placed after last quality attribute serialized by attributeJSON template/]
[template public featureModel(aFeatureModel : FeatureModel) post (substitute('},\n}', '}\n}').trim())]
{
[if (not aFeatureModel.root.oclIsUndefined())]
[let rootFeature : Feature = aFeatureModel.root]
[feature(rootFeature)/]
[/let]
[/if]
}
[/template]

[template public feature (aFeature : Feature) post (trim())]
[for (anAttribute : Attribute | aFeature.attributes)]
[attributeJSON(aFeature.id ,anAttribute)/]
[/for]
[if (aFeature.hasANDGroup())]
[for (anChildFeature : Feature | aFeature.features)]
[feature(anChildFeature)/]
[/for]
[/if]
[if (aFeature.hasORGroup() or aFeature.hasXORGroup())]
[for (anChildFeature : Feature | aFeature.groups->first().features)]
[feature(anChildFeature)/]
[/for]
[/if]
[/template]

[comment RemovesDuplicates:Boolean determines whether or not quality attributes with same name will be serialized only once.
First occurrence of attribute will be serialized, not the others
TODO: investigate and implement the external parameterization of this behavior, that is, passing this boolean to this template
from an external Java invocation, so the caller can customize this behavior 
NOTE: This template is not used anymore, since attribute serialization is prefixed with feature_id /]
[template public attribute (feature_id: String, anAttribute : Attribute, removeDuplicates:Boolean) 
	? (anAttribute.qualityAttribute) post(trim())]
[if (removeDuplicates)]
[if not anAttribute.hasBeenAlreadySerialized()]
[attributeJSON(feature_id, anAttribute)/]
[/if]
[else]
[attributeJSON(feature_id, anAttribute)/]
[/if]
[/template]

[template public attributeJSON(feature_id: String, anAttribute : Attribute)]
"[feature_id/].[anAttribute.name/]":{
	"domain":"[anAttribute.type/]",
	"min":[anAttribute.minRangeValue/],
	"max":[anAttribute.maxRangeValue/],
	"weight":[anAttribute.weight/],
	"minimize":[anAttribute.minimize/],
	"aggregator":"[anAttribute.objectiveFunctionAggregator/]"
},
[/template]

[query public hasANDGroup(aFeature : Feature) : Boolean = not (aFeature.features->isEmpty()) /]
[query public hasORGroup(aFeature : Feature) : Boolean = not (aFeature.groups->isEmpty()) and aFeature.groups->first()._or /]
[query public hasXORGroup(aFeature : Feature) : Boolean = not (aFeature.groups->isEmpty()) and aFeature.groups->first()._xor /]

[query public hasBeenAlreadySerialized(anAttribute: Attribute) : Boolean = 
    invoke(
		'eu.supersede.dynadapt.feature.serializer.helpers.AttributeSerializationHelper', 
		'attributeHasBeenSerialized(java.lang.String)', Sequence{anAttribute.name})
  /]

[comment Below code is a more elegant attempt to implement this quality attribute serialization but it not working
NOTE: From Eclipse Luna, Acceleo compiler does not work, so debugging is not possible
TODO: Investigate how to place debugging information in console when invoking queries /]

[comment FIXME: this approach using recursive queries to collect all attributes, aiming at removing duplicates
does not work /]
[template public featureUsingRecursion (aFeature : Feature)]
	[let theAttributes : Collection(Attribute) = allNestedAttributes(aFeature)]
		[for (anAttribute : Attribute | theAttributes)]
			[attribute(aFeature.id, anAttribute, false)/]
		[/for]
	[/let]
[/template]

[query public allNestedAttributes (aFeature : Feature) : Collection(Attribute) = 
	aFeature.attributes->union(aFeature.childFeatures()->collect(childFeature|allNestedAttributes(childFeature)))/]

[query public childFeatures(aFeature : Feature) : Collection(Feature) = 
	if aFeature.hasANDGroup() 
		then aFeature.features 
		else  
			if aFeature.hasORGroup() or aFeature.hasXORGroup()
				then
					aFeature.groups->first().features
				else
					Sequence{}
			endif
	endif /]

	

