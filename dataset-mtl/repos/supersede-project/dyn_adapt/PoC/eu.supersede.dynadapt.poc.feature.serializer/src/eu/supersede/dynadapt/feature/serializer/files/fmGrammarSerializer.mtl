[comment encoding = UTF-8 /]
[module fmGrammarSerializer('http://zcu.cz/yafmt/model/fm')]

[template public serializeFMGrammar(aFeatureModel : FeatureModel)]
[file (aFeatureModel.name.concat('.grammar'), false, 'UTF-8')]
[if (not aFeatureModel.root.oclIsUndefined())]
	[let rootFeature : Feature = aFeatureModel.root]
[feature(rootFeature, false)/]
	[/let]
[/if]
[/file]
[/template]

[template public feature (aFeature : Feature, belongsToXORGroup : Boolean) post(trim())]
[if (aFeature.hasANDGroup())]
<[aFeature.name/][groupType(aFeature)/]>::= [andGroupList(aFeature)/]
[for (aChildFeature : Feature | aFeature.features)]
[feature(aChildFeature, false)/]
[/for][elseif (aFeature.hasORGroup())]
<[aFeature.name/]_or>::= <[aFeature.name/]> <[aFeature.name/]_or>
	| <[aFeature.name/]>
<[aFeature.name/]>::= [orGroupList(aFeature)/]
[for (aChildFeature : Feature | aFeature.groups->first().features)]
[feature(aChildFeature, false)/]
[/for][elseif (aFeature.hasXORGroup())]
<[aFeature.name/]>::= [xorGroupList(aFeature)/]
[for (aChildFeature : Feature | aFeature.groups->first().features)]
[feature(aChildFeature, true)/]
[/for][elseif (aFeature.hasMultipleMultiplicity())]
<[aFeature.name/][groupType(aFeature)/]>::= <[aFeature.name/]> <[aFeature.name/][groupType(aFeature)/]>
	| <[aFeature.name/]>
<[aFeature.name/]>::= "[aFeature.name/]"[elseif (belongsToXORGroup)]
<[aFeature.name/]>::= "[aFeature.name/]"[else]
<[aFeature.name/][groupType(aFeature)/]>::= <[aFeature.name/]>
	|
<[aFeature.name/]>::= "[aFeature.name/]"[/if]
[/template]

[template public andGroupList (aFeature : Feature)]
[if hasANDGroup(aFeature)][for (aChildFeature : Feature | aFeature.features)]<[aChildFeature.name/][groupType(aChildFeature)/]> [/for][/if]
[/template]

[template public orGroupList (aFeature : Feature) post(trim())]
[let firstFeature : Feature = aFeature.groups->first().features->first()]
<[firstFeature.name/][groupType(firstFeature)/]>
[for (aChildFeature : Feature | aFeature.groups->first().features->excluding(firstFeature))] 
	| <[aChildFeature.name/][groupType(aChildFeature)/]>
[/for]
[/let]
[/template]

[template public xorGroupList (aFeature : Feature) post(trim())]
[let firstFeature : Feature = aFeature.groups->first().features->first()]
<[firstFeature.name/]>
[for (aChildFeature : Feature | aFeature.groups->first().features->excluding(firstFeature))]
	| <[aChildFeature.name/]>
[/for]
[/let]
[/template]

[template public groupType(aFeature : Feature)]
[if not (aFeature.groups->isEmpty())][let aGroup : Group = aFeature.groups->first()][if (aGroup._or)]_or[/if][/let][elseif (aFeature.optional)]_opt[elseif (aFeature.upper > 1)]_plus[/if]
[/template]

[query public hasANDGroup(aFeature : Feature) : Boolean = not (aFeature.features->isEmpty()) /]
[query public hasORGroup(aFeature : Feature) : Boolean = not (aFeature.groups->isEmpty()) and aFeature.groups->first()._or /]
[query public hasXORGroup(aFeature : Feature) : Boolean = not (aFeature.groups->isEmpty()) and aFeature.groups->first()._xor /]
[query public hasMultipleMultiplicity(aFeature : Feature) : Boolean = aFeature.upper > 1 /]
