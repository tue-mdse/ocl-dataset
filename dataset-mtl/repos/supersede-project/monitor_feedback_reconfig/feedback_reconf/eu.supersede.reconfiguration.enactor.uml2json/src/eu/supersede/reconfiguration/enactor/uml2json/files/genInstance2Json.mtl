[comment encoding = UTF-8 /]
[**
 * /*******************************************************************************
 * Copyright (c) 2016 FBK
 * All rights reserved. Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributors:
 *     Denisse Mu√±ante (FBK) - main development
 *
 * Initially developed in the context of SUPERSEDE EU project www.supersede.eu
 *******************************************************************************/
 */]
[**
 * genInstance2Json: this module translates UML instances to JSON entries
*/]
[module genInstance2Json('http://www.eclipse.org/uml2/5.0.0/UML')]
[import eu::supersede::reconfiguration::enactor::uml2json::common::common /]


[**
 * Generates JSON entries from UML instances
 * @param anInstanceSpecification - UML instance
 */]
[template public generateInstance2Json(anInstanceSpecification : InstanceSpecification)]
"[anInstanceSpecification.classifier.name/].[anInstanceSpecification.name/]":
[for (aSlot : Slot | getSlots(anInstanceSpecification)) before ('{') separator (',') after('},') ]
[let val : ValueSpecification = aSlot.getValueSlot()]
"[val.name/]":"[val.stringValue()/]"
[/let]
[/for]
[/template]

[**
 * Generates JSON entries from UML instances 
 * This version is used by the monitoring.
 * @param anInstanceSpecification - UML instance 
 */]
[template public generateInstance2JsonMonitor(anInstanceSpecification : InstanceSpecification)]
"[anInstanceSpecification.classifier.name/]":
[for (aSlot : Slot | getSlots(anInstanceSpecification)) before ('{') separator (',') after('},') ]
[let val : ValueSpecification = aSlot.getValueSlot()]
"[val.name/]":"[val.stringValue()/]"
[/let]
[/for]
[/template]