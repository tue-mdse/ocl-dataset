[comment encoding = UTF-8 /]
[module downloads('http://eclipse.org/eclipsescada', 'http://www.eclipse.org/emf/2002/Ecore')]

[import org::eclipse::scada::web::generator::main::html /]
[import org::eclipse::scada::web::generator::main::author /]
[import org::eclipse::scada::web::generator::main::content /]
[import org::eclipse::scada::web::generator::main::social /]
[import org::eclipse::scada::web::generator::main::common /]
[import org::eclipse::scada::web::generator::main::release /]

[template public generateReleases(site : Site)]
[for (version : Version | site.versions)]

[file ( 'releases/' + version.name + '/index.html', false, 'UTF-8')]
[generateVersionsPage(site,version, 'releases/' + version.name + '/index.html')/]
[/file]

[for (release : Release | version.releases)]
[file ('releases/' + version.name + '/' + release.buildId + '.html', false, 'UTF-8')]
[generateReleasePage(site,release,'releases/' + version.name + '/' + release.buildId + '.html')/]
[/file]
[/for]
[/for]
[generateReleasePage(site)/]
[/template]

[template public generateReleasePage(site : Site)]
[file ('releases/index.html', false, 'UTF-8')]
[header(site, 'Releases', 'List of releases', 'releases/index.html')/]

<header>
<h1>Releases</h1>


<table class="releases_master_table">
<tr><th>Released:</th><td>[versionShortcuts(site, VersionState::RELEASED)/]</td></tr>
<tr><th>In development:</th><td>[versionShortcuts(site, VersionState::IN_DEVELOPMENT)/]</td></tr>
</table>

</header>

[for (version : Version | site.versions->sortedBy(v|v.name)->reverse())]
<section>
<h2 id="[version.name/]">
	<a href="[version.name/]">
		[version.name/] ([version.state.toLabel()/])
	</a>
</h2>
<ul>
	[for (release : Release | version.releases)]
	<li>
	[release.name/]
	→ <a href="[version.name/]/[release.buildId/].html">[release.buildId/]</a>
	</li>
	[/for]
</ul>
</section>
[/for]

[footer(site, 'releases/index.html')/]
[/file]
[/template]

[template public generateReleasePage(site : Site, release : Release, fileName : String )]
[header(site,release.buildId, release.name, fileName)/]

<header>
<h1>
[release.name/] ([release.type/]) – [release.buildId/]
</h1>
</header>

[processRelease(release, fileName)/]
[footer(site, fileName)/]
[/template]

[template public processRelease(release : Release, fileName : String )]
[generateRelease(release, fileName)/]
[/template]

[template protected versionShortcuts(site : Site, state: VersionState)]
[let versions : OrderedSet(Version) = site.versions->reject(v|v.state<>state)]
[if versions->isEmpty()]
None
[else]
[for (version : Version | versions->sortedBy(v|v.name)->reverse()) separator (', ')]
<a href="[version.name/]">[version.name/]</a>
[/for]
[/if]
[/let]
[/template]

[template public generateVersionsPage(site : Site, version : Version, fileName : String )]
[header(site, 'Version ' + version.name, 'List of releases', fileName)/]

<header>

<h1>Releases of version [version.name/]</h1>
</header>

<section>
<h2>Most recent</h2>
[processRelease(version.releases->first(), fileName)/]
</section>

[if (not version.earlierReleases()->isEmpty())]
	<section>
	<h2>Earlier releases</h2>
	[for (release : Release | version.earlierReleases())]
	[processRelease(release, fileName)/]
	[/for]
	</section>
[/if]

[footer(site, fileName)/]
[/template]

[query public earlierReleases(version : Version) : Set(Release) = version.releases->excluding(version.releases->first()) /]
