[comment encoding = Cp1252 /]
[module eclQueries('http://fr.inria.aoste.timesquare.ecl',
	'http://www.eclipse.org/ocl/3.1.0/CompleteOCLCST',
	'http://www.eclipse.org/ocl/3.1.0/BaseCST',
	'http://www.eclipse.org/ocl/3.1.0/EssentialOCLCST',
	'http://www.eclipse.org/emf/2002/Ecore')/]

[query public getMoCIDFromFirstLib(arg0 : ECLDocument) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getMoCIDFromFirstLib(fr.inria.aoste.timesquare.ECL.ECLDocument)', Sequence{arg0})
/] 

[query public getContextFullLabels(arg0 : ECLDocument) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getContextFullLabels(fr.inria.aoste.timesquare.ECL.ECLDocument)', Sequence{arg0})
/] 

[query public getContexts(arg0 : ECLDocument) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getContexts(fr.inria.aoste.timesquare.ECL.ECLDocument)', Sequence{arg0})
/] 

[query public getContextLabels(arg0 : ECLDocument, arg1 : String) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getContextLabels(fr.inria.aoste.timesquare.ECL.ECLDocument, java.lang.String)', Sequence{arg0,arg1})
/] 

[query public getAllContextOccurences(arg0 : ECLDocument) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getAllContextOccurences(fr.inria.aoste.timesquare.ECL.ECLDocument)', Sequence{arg0})
/]

[query public getAllEvents(arg0 : ECLDocument) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getAllEvents(fr.inria.aoste.timesquare.ECL.ECLDocument)', Sequence{arg0})
/] 

[query public getEvents(arg0 : ContextDeclCS) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getEvents(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.ContextDeclCS)', Sequence{arg0})
/]

[query public getEvents(arg0 : ECLDocument, arg1 : ContextDeclCS) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getEvents(fr.inria.aoste.timesquare.ECL.ECLDocument, org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.ContextDeclCS)', Sequence{arg0,arg1})
/]

[query public getAllEvents(arg0 : ECLDocument, arg1 : String) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getAllEvents(fr.inria.aoste.timesquare.ECL.ECLDocument, java.lang.String)', Sequence{arg0,arg1})
/]

[query public hasEventsDSA(arg0 : ECLDocument, arg1 : String) : Boolean
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'hasEventsDSA(fr.inria.aoste.timesquare.ECL.ECLDocument, java.lang.String)', Sequence{arg0,arg1})
/]

[query public getAllInternalEventsAsString(arg0 : ECLDocument, arg1 : String) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getAllInternalEventsAsString(fr.inria.aoste.timesquare.ECL.ECLDocument, java.lang.String)', Sequence{arg0,arg1})
/]

[query public getAllInternalEventsListAsString(arg0 : ECLDocument, arg1 : String) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getAllInternalEventsListAsString(fr.inria.aoste.timesquare.ECL.ECLDocument, java.lang.String)', Sequence{arg0,arg1})
/]

[query public getExpressionName(arg0 : ECLDocument, arg1 : String, arg2 : String) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getExpressionName(fr.inria.aoste.timesquare.ECL.ECLDocument, java.lang.String, java.lang.String)', Sequence{arg0,arg1,arg2})
/]

[query public printListedClockParameters(arg0 : ECLDocument, arg1 : String, arg2 : String) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'printListedClockParameters(fr.inria.aoste.timesquare.ECL.ECLDocument, java.lang.String, java.lang.String)', Sequence{arg0,arg1,arg2})
/]

[query public getClockIterator(arg0 : ECLDocument, arg1 : String, arg2 : String) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getClockIterator(fr.inria.aoste.timesquare.ECL.ECLDocument, java.lang.String, java.lang.String)', Sequence{arg0,arg1,arg2})
/]

[query public printListedClockParametersSepByDot(arg0 : ECLDocument, arg1 : String, arg2 : String) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'printListedClockParametersSepByDot(fr.inria.aoste.timesquare.ECL.ECLDocument, java.lang.String, java.lang.String)', Sequence{arg0,arg1,arg2})
/]

[query public hasInternalEvents(arg0 : ECLDocument, arg1 : String) : Boolean
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'hasInternalEvents(fr.inria.aoste.timesquare.ECL.ECLDocument, java.lang.String)', Sequence{arg0,arg1})
/]

[query public getEvents(arg0 : ECLDocument, arg1 : String) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getEvents(fr.inria.aoste.timesquare.ECL.ECLDocument, java.lang.String)', Sequence{arg0,arg1})
/]

[query public getListedEventsSepByDot(arg0 : ECLDocument, arg1 : String) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getListedEventsSepByDot(fr.inria.aoste.timesquare.ECL.ECLDocument, java.lang.String)', Sequence{arg0,arg1})
/]

[query public getInvariants(arg0 : ContextDeclCS) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getInvariants(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.ContextDeclCS)', Sequence{arg0})
/] 

[query public getInvariants(arg0 : ECLDocument, arg1 : String) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getInvariants(fr.inria.aoste.timesquare.ECL.ECLDocument, java.lang.String)', Sequence{arg0,arg1})
/] 

[query public getLabel(arg0 : ContextDeclCS) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getLabel(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.ContextDeclCS)', Sequence{arg0})
/] 

[query public getLibraryName(arg0 : ConstraintCS) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getLibraryName(org.eclipse.ocl.examples.xtext.base.basecs.ConstraintCS)', Sequence{arg0})
/] 

[query public getLibraryName(arg0 : LetVariableCS) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getLibraryName(org.eclipse.ocl.examples.xtext.essentialocl.essentialoclcs.LetVariableCS)', Sequence{arg0})
/] 

[query public getRelationName(arg0 : LetVariableCS) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getRelationName(org.eclipse.ocl.examples.xtext.essentialocl.essentialoclcs.LetVariableCS)', Sequence{arg0})
/] 

[query public getClockNamesListedAndSepByDot(arg0 : LetVariableCS) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getClockNamesListedAndSepByDot(org.eclipse.ocl.examples.xtext.essentialocl.essentialoclcs.LetVariableCS)', Sequence{arg0})
/]

[query public getConstantsOrLinkersListedAndSepByDot(arg0 : LetVariableCS) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getConstantsOrLinkersListedAndSepByDot(org.eclipse.ocl.examples.xtext.essentialocl.essentialoclcs.LetVariableCS)', Sequence{arg0})
/]

[query public getVariablesListedAndSepByDot(arg0 : ConstraintCS) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getVariablesListedAndSepByDot(org.eclipse.ocl.examples.xtext.base.basecs.ConstraintCS)', Sequence{arg0})
/]

[query public getConstantsOrLinkersListedAndSepByDot(arg0 : ConstraintCS) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getConstantsOrLinkersListedAndSepByDot(org.eclipse.ocl.examples.xtext.base.basecs.ConstraintCS)', Sequence{arg0})
/]

[query public getRelationName(arg0 : ConstraintCS) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getRelationName(org.eclipse.ocl.examples.xtext.base.basecs.ConstraintCS)', Sequence{arg0})
/] 

[query public getRelationDeclName(arg0 : ConstraintCS) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getRelationDeclName(org.eclipse.ocl.examples.xtext.base.basecs.ConstraintCS)', Sequence{arg0})
/]

[query public getRelationCondition(arg0 : ConstraintCS) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getRelationCondition(org.eclipse.ocl.examples.xtext.base.basecs.ConstraintCS)', Sequence{arg0})
/]

[query public getClockNamesListedAndSepByDot(arg0 : ConstraintCS) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getClockNamesListedAndSepByDot(org.eclipse.ocl.examples.xtext.base.basecs.ConstraintCS)', Sequence{arg0})
/] 

[query public getClockNamesListedAndSepBySpace(arg0 : ConstraintCS) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getClockNamesListedAndSepBySpace(org.eclipse.ocl.examples.xtext.base.basecs.ConstraintCS)', Sequence{arg0})
/] 

[query public getOrderedDataNames(arg0 : ConstraintCS) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getOrderedDataNames(org.eclipse.ocl.examples.xtext.base.basecs.ConstraintCS)', Sequence{arg0})
/] 

[query public getNsURIToDeclare(arg0 : ECLDocument) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getNsURIToDeclare(fr.inria.aoste.timesquare.ECL.ECLDocument)', Sequence{arg0})
/] 

[query public hasInternalClocks(arg0 : ECLDocument) : Boolean
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'hasInternalClocks(fr.inria.aoste.timesquare.ECL.ECLDocument)', Sequence{arg0})
/]

[query public hasInternalClocks(arg0 : ConstraintCS) : Boolean
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'hasInternalClocks(org.eclipse.ocl.examples.xtext.base.basecs.ConstraintCS)', Sequence{arg0})
/]  

[query public getInternalClocks(arg0 : ConstraintCS) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getInternalClocks(org.eclipse.ocl.examples.xtext.base.basecs.ConstraintCS)', Sequence{arg0})
/] 

[query public getInternalClockExps(arg0 : ConstraintCS) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getInternalClockExps(org.eclipse.ocl.examples.xtext.base.basecs.ConstraintCS)', Sequence{arg0})
/]   

[query public getInternalClocks(arg0 : ECLDocument) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getInternalClocks(fr.inria.aoste.timesquare.ECL.ECLDocument)', Sequence{arg0})
/] 
[query public getContextsFromPack(arg0 : PackageDeclarationCS) : EEList
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getContextsFromPack(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.PackageDeclarationCS)', Sequence{arg0})
/]

[query public getGlobalParameters(arg0 : ClassifierContextDeclCS) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getGlobalParameters(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.ClassifierContextDeclCS)', Sequence{arg0})
/]

[query public getGlobalParametersInit(arg0 : ClassifierContextDeclCS) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getGlobalParametersInit(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.ClassifierContextDeclCS)', Sequence{arg0})
/]

[query public getParametersDeclaration(arg0 : PackageDeclarationCS) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getParametersDeclaration(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.PackageDeclarationCS)', Sequence{arg0})
/]  

[query public getEventParameters(arg0 : PackageDeclarationCS, arg1 : String , arg2 : String) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getEventParameters(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.PackageDeclarationCS, java.lang.String, java.lang.String)', Sequence{arg0,arg1,arg2})
/]

[query public getEventParametersOUT(arg0 : PackageDeclarationCS, arg1 : String , arg2 : String) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getEventParametersOUT(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.PackageDeclarationCS, java.lang.String, java.lang.String)', Sequence{arg0,arg1,arg2})
/]

[query public getEventParameterParDefinition(arg0 : PackageDeclarationCS, arg1 : String , arg2 : String) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getEventParameterParDefinition(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.PackageDeclarationCS, java.lang.String, java.lang.String)', Sequence{arg0,arg1,arg2})
/]

[query public getPortDeclaration(arg0 : PackageDeclarationCS, arg1 : String , arg2 : String) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getPortDeclaration(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.PackageDeclarationCS, java.lang.String, java.lang.String)', Sequence{arg0,arg1,arg2})
/]

[query public getProcTransitions(arg0 : PackageDeclarationCS, arg1 : String , arg2 : String) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getProcTransitions(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.PackageDeclarationCS, java.lang.String, java.lang.String)', Sequence{arg0,arg1,arg2})
/]

[query public getProcTransitionsOUT(arg0 : PackageDeclarationCS, arg1 : String , arg2 : String) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getProcTransitionsOUT(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.PackageDeclarationCS, java.lang.String, java.lang.String)', Sequence{arg0,arg1,arg2})
/]

[query public getMainNsURIToDeclare(arg0 : ECLDocument) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getMainNsURIToDeclare(fr.inria.aoste.timesquare.ECL.ECLDocument)', Sequence{arg0})
/]

[query public getXtendFilePath(arg0 : ECLDocument) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getXtendFilePath(fr.inria.aoste.timesquare.ECL.ECLDocument)', Sequence{arg0})
/] 

[query public getBodyExpression(arg0: PackageDeclarationCS, arg1 : String, arg2:String) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getBodyExpression(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.PackageDeclarationCS,java.lang.String , java.lang.String)', Sequence{arg0,arg1,arg2})
/]

[query public getBasicTypesDeclaration(arg0 : PackageDeclarationCS, arg1 : String) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getBasicTypesDeclaration(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.PackageDeclarationCS, java.lang.String)', Sequence{arg0, arg1})
/]

[query public getRootTypeArraysDeclaration(arg0 : PackageDeclarationCS, arg1 : String) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getRootTypeArraysDeclaration(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.PackageDeclarationCS, java.lang.String)', Sequence{arg0, arg1})
/] 

[query public INITIAL_Configuration(arg0 : PackageDeclarationCS, arg1 : String) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'INITIAL_Configuration(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.PackageDeclarationCS, java.lang.String)', Sequence{arg0, arg1})
/] 

[query public buildSystemRootFlatModel(arg0 : EObject) : EObject
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'buildSystemRootFlatModel(org.eclipse.emf.ecore.EObject)', Sequence{arg0})
/] 

[query public getTypesDeclaration(arg0 : PackageDeclarationCS, arg1 : String) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getTypesDeclaration(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.PackageDeclarationCS, java.lang.String)', Sequence{arg0,arg1})
/]

[query public getUnChangingFunctionsDeclarations(arg0 : PackageDeclarationCS) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getUnChangingFunctionsDeclarations(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.PackageDeclarationCS)', Sequence{arg0})
/] 

[query public getChangingFunctionsDeclarations(arg0 : PackageDeclarationCS, arg1 : String) : String
	= invoke('org.gemoc.mocc.transformations.ecl2mtl.services.EclServices', 'getChangingFunctionsDeclarations(org.eclipse.ocl.examples.xtext.completeocl.completeoclcs.PackageDeclarationCS, java.lang.String)', Sequence{arg0,arg1})
/] 