[comment]
  Copyright 2008, 2010 Obeo
  All rights reserved.  This program and the accompanying materials
  are made available under the terms of the Eclipse Public License 1.0
  
  Any license can be applied to the files generated with this template.
  
  author <a href="mailto:stephane.bouchet@obeo.fr">Stephane Bouchet</a>
[/comment]
[module classHeader('http://www.eclipse.org/uml2/2.1.0/UML')/]
[import org::unicase::papyrus::codegeneration::common::common/]
[import org::unicase::papyrus::codegeneration::cpp::common/]

[template public generateClassHeaderBody(c : Class)]
class [c.normalizeName()/][if (c.superClass->notEmpty() or not c.getImplementedInterfaces()->isEmpty())] : [for (superName : String | c.superClass.normalizeName()->asSet()->union(c.getImplementedInterfaces().normalizeName())) separator(', ')][superName/][/for][/if]
{
public:
[for (p : Property | c.getAllAttributes())]
[if (p.visibility <> 'private')]
	[getTypeString(p.type, p.upper)/] get[p.normalizeName().toUpperFirst()/]();
	void set[p.normalizeName().toUpperFirst()/]([getTypeString(p.type, p.upper)/] p_[p.normalizeName()/]);
[/if]
[/for]
[for (o : Operation | c.getOperations())]
[if (o.visibility <> 'private')]
[operationBody(o, false)/]
[/if]
[/for]
[if (c.isAbstract = false)]
[for (interf : Interface | c.getImplementedInterfaces())]
[interf.implementInterface()/]
[/for]
[for (superC : Class | c.superClass)]
[superC.implementAbstractMethodsFromClass()/]
[/for]
[/if]

private:
[for (p : Property | c.getAllAttributes())]
[p.propertyBody()/]
[/for]
[for (p : Property | c.getAssociations().memberEnd)]
[if (p.type <> c and not c.getAllAttributes()->includes(p))] 
[p.propertyBody()/]
[/if]
[/for]
[for (o : Operation | c.getOperations())]
[if (o.visibility = 'private')]
[operationBody(o, false)/]
[/if]
[/for]
};
[/template]

[template private implementAbstractMethodsFromClass(c : Class)]
[if (c.isAbstract)][comment abstract methods from super super classes and interfaces of abstract classes should also be handled, but it has to be ensured somehow that those methods are already implemented by the superclass/]
[for (o : Operation | c.ownedOperation)]
[if (o.isAbstract)]
[operationBody(o, true)/]
[/if]
[/for]
[/if]
[/template]

[template private implementInterface(i : Interface)]
[for (o : Operation | i.ownedOperation)]
[operationBody(o, true)/]
[/for]
[for (general : Generalization | i.generalization)]
[for (i : Interface | general.target->filter(Interface))]
[i.implementInterface()/]
[/for]
[/for]
[/template]

[template private operationBody(o : Operation, notAbstract : Boolean)]
	virtual [o.returnTypeOperation()/] [o.normalizeName()/]([o.getInParameter()/])[if (notAbstract = false and o.isAbstract)] = 0[/if];
[/template]

[template private propertyBody(p : Property)]
	[getTypeString(p.type, p.upper)/] [p.normalizeName()/];
[/template]