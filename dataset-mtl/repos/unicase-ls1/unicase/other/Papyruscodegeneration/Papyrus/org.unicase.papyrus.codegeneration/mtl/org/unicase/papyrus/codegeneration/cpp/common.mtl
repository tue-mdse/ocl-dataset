[comment]
  Copyright 2008, 2010 Obeo
  All rights reserved.  This program and the accompanying materials
  are made available under the terms of the Eclipse Public License 1.0
  
  Any license can be applied to the files generated with this template.
  
  author <a href="mailto:stephane.bouchet@obeo.fr">Stephane Bouchet</a>
[/comment]
[module common('http://www.eclipse.org/uml2/2.1.0/UML')/]
[import org::unicase::papyrus::codegeneration::common::common/]

[template public getFullPathFile(cl : Classifier)]
[if (not cl.getNearestPackage().oclIsUndefined())]
[cl.packagePath().concat('/').concat(cl.normalizeName())/]
[else]
[cl.normalizeName()/]
[/if]
[/template]

[template public getInParameter(o : Operation)]
[for (p : Parameter | o.ownedParameter) separator(',') ? (p.direction <> ParameterDirectionKind::return)][p.type.normalizeName()/] [p.normalizeName()/][/for]
[/template]

[template public returnTypeOperation(o : Operation)]
[if (o.type.oclIsUndefined())]void[else][o.type.getTypeString()/][/if]
[/template]

[template public importBlock(interface : Interface)]
[for (p : String | interface.generalization.target->filter(Interface).normalizeName()->asSet())]
#include "[p/].h"
[/for]
[for (p : String | interface.getTypesToInclude())]
[if (interface.normalizeName() <> p)]
class [p/];
[/if]
[/for]
[/template]

[template public importBlock(c : Class)]
[for (p : String | c.getTypesToInclude()->union(c.getSupersAndInterfaces()))]
[if (p = 'String')]
#include <string>
[else]
[if (c.normalizeName() <> p)]
#include "[p/].h"
[/if]
[/if]
[/for]
[/template]

[template public headerImportBlock(c : Class)]
[for (p : String | c.getSupersAndInterfaces())]
#include "[p/].h"
[/for]
[for (p : String | c.getTypesToInclude())]
[if (p = 'String')]
#include <string>
[else]
[if (c.normalizeName() <> p)]
class [p/];
[/if]
[/if]
[/for]
[/template]

[query private getSupersAndInterfaces(c : Class) : Set(String) =
c.superClass.normalizeName()->asSet()->union(c.getImplementedInterfaces().normalizeName()->asSet()) /]

[query public getTypesToInclude(c : Class) : Set(String) = 
c.getAllAttributes().type.normalizeName()->asSet()->union(c.operationsParametersTypes().normalizeName()->asSet())->union(c.getAssociations().memberEnd->select(a : Property|not c.getAllAttributes()->includes(a)).type.normalizeName()->asSet())->select(not isPrimitiveType())
/]
[query public getTypesToInclude(i : Interface) : Set(String) = 
i.operationsParametersTypes().normalizeName()->asSet()->union(i.getAssociations().memberEnd.type.normalizeName()->asSet())->select(not isPrimitiveType())
/]

[query public allOperations(i: Interface) : Set( Operation ) =
i.ownedOperation->union( i.generalization.target->filter(Interface)->iterate(g : Interface;
os:Set(Operation) = Set{}| os->union(allOperations(g)))) /]
[query public operationsParameters(i : Interface) : Set(Parameter) = 
i.allOperations().ownedParameter->asSet()->union(if(i.allOperations().returnResult()->notEmpty())then i.allOperations().returnResult()->asSet() else Set{} endif )
/]
[query public operationsParametersTypes(i : Interface) : Sequence(Classifier) = 
i.operationsParameters().type->filter(Classifier)->select(not name.isPrimitiveType())->asOrderedSet()->asSequence()
/]

[query public allOperations(c: Class) : Set( Operation ) =
c.ownedOperation->union( c.superClass->select(sc|sc.isAbstract=true)->iterate(ac : Class;
os:Set(Operation) = Set{}| os->union(allOperations(ac)))) /]
[query public operationsParameters(class : Class) : Set(Parameter) = 
class.allOperations().ownedParameter->asSet()->union(if(class.allOperations().returnResult()->notEmpty())then class.allOperations().returnResult()->asSet() else Set{} endif )
/]
[query public operationsParametersTypes(class : Class) : Sequence(Classifier) = 
class.operationsParameters().type->filter(Classifier)->select(not name.isPrimitiveType())->asOrderedSet()->asSequence()
/]

[query public isPrimitiveType(name : String) : Boolean =
(name.endsWith('Integer')) or (name.endsWith('Float')) or (name.endsWith('Long')) or (name.endsWith('Double')) or (name.endsWith('Boolean')) or (name.startsWith('byte')) or (name.endsWith('Object'))/]

[template public packageBlock(cl : Classifier)]
[comment]
[if (not cl.getNearestPackage().oclIsUndefined())]namespace [cl.packagePath().replace('.', '::')/];[/if]
[/comment]
[/template]

[template public _commentFileBlock(traceabilityContext : OclAny)]
/**
 * Generated with Unicase UML 2 CPP export
 */
[/template]

[template public returnOperationComment(traceabilityContext : OclAny)]
     * @return
[/template]

[template public paramOperationComment(p : Parameter)]
     * @param [p.normalizeName()/]
[/template]

[template public getTypeString(t : Type, upper : UnlimitedNatural)]
[if (upper = -1 or upper > 1)]vector<[t.getTypeString()/]>*[else][t.getTypeString()/][/if]
[/template]

[template private getTypeString(t : Type)]
[if (t.normalizeName() = 'String')]std::string[else]
[if (t.normalizeName() = 'Integer')]int[else]
[if (t.normalizeName() = 'Float')]float[else]
[if (t.normalizeName() = 'Long')]long[else]
[if (t.normalizeName() = 'Double')]double[else]
[if (t.normalizeName() = 'Boolean')]bool[else]
[if (t.normalizeName() = 'Byte')]char[else]
[if (t.normalizeName() = 'Object')]void*[else]
[t.normalizeName()/]*[/if]
[/if][/if][/if][/if][/if][/if][/if]
[/template]
