[comment]
  Copyright 2008, 2010 Obeo
  All rights reserved.  This program and the accompanying materials
  are made available under the terms of the Eclipse Public License 1.0
  
  Any license can be applied to the files generated with this template.
  
  author <a href="mailto:stephane.bouchet@obeo.fr">Stephane Bouchet</a>
[/comment]
[module classBody('http://www.eclipse.org/uml2/2.1.0/UML')/]
[import org::unicase::papyrus::codegeneration::common::common/]
[import org::unicase::papyrus::codegeneration::cpp::common/]

[template public generateClassBody(c : Class)]
[for (p : Property | c.getAllAttributes())]
[if (p.visibility <> 'private')]

/**
 * the [p.normalizeName()/] getter.
 * @return the [p.normalizeName()/].
 */
[getTypeString(p.type, p.upper)/] [c.normalizeName()/]::get[p.normalizeName().toUpperFirst()/]() {
	return this->[p.normalizeName()/];
}

/**
 * the [p.normalizeName()/] setter.
 * @param p_[p.normalizeName()/] the [p.normalizeName()/] to set.
 */
void [c.normalizeName()/]::set[p.normalizeName().toUpperFirst()/]([getTypeString(p.type, p.upper)/] p_[p.normalizeName()/]) {
	this->[p.normalizeName()/] = p_[p.normalizeName()/];
}
[/if]
[/for]
[for (o : Operation | c.getOperations())]
[if (c.isAbstract = false or o.isAbstract = false)]
[operationBody(o, c)/]
[/if]
[/for]
[if (c.isAbstract = false)]
[for (interf : Interface | c.getImplementedInterfaces())]
[interf.implementInterface(c)/]
[/for]
[for (superC : Class | c.superClass)]
[superC.implementAbstractMethodsFromClass(c)/]
[/for]
[/if]
[/template]

[template private implementAbstractMethodsFromClass(c : Class, cSuper : Class)]
[if (c.isAbstract)][comment abstract methods from super super classes and interfaces of abstract classes should also be handled, but it has to be ensured somehow that those methods are already implemented by the superclass/]
[for (o : Operation | c.ownedOperation)]
[if (o.isAbstract)]
[operationBody(o, cSuper)/]
[/if]
[/for]
[/if]
[/template]

[template private implementInterface(i : Interface, c : Class)]
[for (o : Operation | i.ownedOperation)]
[operationBody(o, c)/]
[/for]
[for (general : Generalization | i.generalization)]
[for (i : Interface | general.target->filter(Interface))]
[i.implementInterface(c)/]
[/for]
[/for]
[/template]

[template private operationBody(o : Operation, c : Class)]

/**
 *[for (cmt : Comment | o.ownedComment)] [cmt._body/][/for]
[for (p : Parameter | o.ownedParameter) ? (p.direction <> ParameterDirectionKind::return)]
[paramOperationComment(p)/]
[/for]
[if (not o.type.oclIsUndefined())]
[returnOperationComment()/]
[/if]
 */
[o.returnTypeOperation()/] [c.normalizeName()/]::[o.normalizeName()/]([o.getInParameter()/])
{
	// [protected ('for operation '.concat(o.normalizeName()))]
	// TODO should be implemented
[if (not o.type.oclIsUndefined())]
	return 0;
[/if]
	// [/protected]
}
[/template]
