[comment encoding = UTF-8 /]
[module  commonQuery('http://www.nomagic.com/magicdraw/UML/2.4.1',
	'http://www.eclipse.org/xsd/2002/XSD',
	'http://www.eclipse.org/ocl/1.1.0/Ecore')/]
	
	
	
[comment]
NIEM UML 
Copyright Â© 2011, ModelDriven.org and Tom Digre, all rights reserved worldwide.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see http://www.gnu.org/licenses/gpl-3.0-standalone.html.

There are also commercial licenses available for this software.
Contact ModelDriven.org for more information.
[/comment]	
	
[query public helperName():String='org.modeldriven.magicdraw.niem.m2t.NiemHelper'/]
[query public log(text:String):VoidType=invoke(helperName(),'log(java.lang.String)',Sequence{text})/]
[query public SchemaForSchemaNamespace():String='http://www.w3.org/2001/XMLSchema'/]
[query public SchemaForStructuresNamespace():String='http://niem.gov/niem/structures/2.0'/]
[query public SchemaForAppinfoNamespace():String='http://niem.gov/niem/appinfo/2.0'/]
[query public SchemaForProxyNamespace():String='http://niem.gov/niem/proxy/xsd/2.0'/]
[query public SchemaForNamespaceNamespace():String='http://www.w3.org/XML/1998/namespace'/]
[query public XsdSchemaStereotypeName():String='xsd::XSDSchema'/]
[query public NdrSchemaStereotypeName():String='niem::ndr::ndrSchema'/]
[query public NdrTypeDefinitionStereotypeName():String='niem::ndr::ndrTypeDefinition'/]

[query public baseNiemNamespace():String='http://niem.gov/niem/'/]
[query public purposeURI():String=baseNiemNamespace()+'resources/purposes/1#'/]
[query public purposeExchangeSchemaURI():String=purposeURI()+'exchange-schema'/]
[query public purposeExtensionSchemaURI():String=purposeURI()+'extension-schema'/]
[query public purposeSubsetSchemaURI():String=purposeURI()+'subset-schema'/]
[query public purposeReferenceSchemaURI():String=purposeURI()+'reference-schema'/]
[query public purposeExchangeSchemaSetURI():String=purposeURI()+'exchange-schema-set'/]
[query public purposeExtensionSchemaSetURI():String=purposeURI()+'extension-schema-set'/]
[query public purposeSubsetSchemaSetURI():String=purposeURI()+'subset-schema-set'/]
[query public purposeReferenceSchemaSetURI():String=purposeURI()+'reference-schema-set'/]
[query public purposeMasterDocumentURI():String=purposeURI()+'master-document'/]
[query public purposeChangelogURI():String=purposeURI()+'changelog'/]
[query public purposeCatalogURI():String=purposeURI()+'catalog'/]
[query public purposeTransformationURI():String=purposeURI()+'transformation'/]
[query public purposeDisplayURI():String=purposeURI()+'display'/]
[query public purposeConstraintSchemaURI():String=purposeURI()+'constraint-schema'/]
[query public purposeSchemaURI():String=purposeURI()+'schema'/]

[comment] Set(OclAny) does not work well, try changing to OclAny or something else [/comment]
[query public getQNamePrefixToNamespaceMap(schema:XSDSchema):OclAny=invoke(helperName(),'getQNamePrefixToNamespaceMap(org.eclipse.xsd.XSDSchema)',Sequence{schema})/]
[query public xmlnsAttribues(map:OclAny,slot:Slot):String=invoke(helperName(),'xmlnsAttribues(java.lang.Object,com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Slot)',Sequence{map,slot})/]
[query public nextID(map:OclAny):String=invoke(helperName(),'nextID(java.lang.Object)',Sequence{map})/]

[query public getValidationResults():Sequence(String)=invoke(helperName(),'getValidationResults()',Sequence{})/]
[query public getValidationElement(annotation:String):String=invoke(helperName(),'getValidationElement(java.lang.String)',Sequence{annotation})/]
[query public getValidationSeverity(annotation:String):String=invoke(helperName(),'getValidationSeverity(java.lang.String)',Sequence{annotation})/]
[query public getValidationAbbreviation(annotation:String):String=invoke(helperName(),'getValidationAbbreviation(java.lang.String)',Sequence{annotation})/]
[query public getValidationMessage(annotation:String):String=invoke(helperName(),'getValidationMessage(java.lang.String)',Sequence{annotation})/]

[comment]
[query public getKey(entry:OclAny):String=invoke(helperName(),'getKey(java.lang.Object)',Sequence{entry})/]
[query public getValue(entry:OclAny):String=invoke(helperName(),'getValue(java.lang.Object)',Sequence{entry})/]
[/comment]

[query public getCommentBody(comment:Comment):String=invoke(helperName(),'getCommentBody(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Comment)',Sequence{comment})/]
[query public convertAnchors(html:String):String=invoke(helperName(),'convertAnchors(java.lang.String)',Sequence{html})/]
[query public getElementByID(id:String):Element=invoke(helperName(),'getElementByID(java.lang.String)',Sequence{id})/]
[query public ID(element:Element):String=invoke(helperName(),'getID(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Element)',Sequence{element})/]
[query public isEditable(element:Element):Boolean=invoke(helperName(),'isEditable(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Element)',Sequence{element})/]

[query public getResourceObjects(uri:String):Sequence(ecore::EObject)=invoke(helperName(),'getResourceObjects(java.lang.String)',Sequence{uri})/]
[query public createDiagramImage(diagram:Diagram):String=invoke(helperName(),'createDiagramImage(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Diagram)',Sequence{diagram})/]
[query public copyImage(imageFile:Artifact):String=invoke(helperName(),'copyImage(com.nomagic.uml2.ext.magicdraw.deployments.mdartifacts.Artifact)',Sequence{imageFile})/]
[query public year(m:String):String=m+invoke(helperName(),'year()',Sequence{})/]
[query public month(m:String):String=m+invoke(helperName(),'month()',Sequence{})/]
[query public date(m:String):String=m+invoke(helperName(),'date()',Sequence{})/]
[query public getApplicationInformation(annotation:XSDAnnotation):Sequence(String)=invoke(helperName(),'getApplicationInformation(org.eclipse.xsd.XSDAnnotation)',Sequence{annotation})/]

	
[query public getMpdCatalog(m : Element , catalog : String):mpdcat::CatalogType=
	invoke(helperName(),'getMpdCatalog(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Element,java.lang.String)',Sequence{m,catalog})/]
[query public stereotypedBy(m : Element,stereotypeName:String):Boolean=invoke(helperName(),'hasAppliedStereotype(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Element,java.lang.String)',Sequence{m,stereotypeName.toString()})/]
[query public getStereotype(m : Element,stereotypeName:String):Stereotype=invoke(helperName(),'getStereotype(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Element,java.lang.String)',Sequence{m,stereotypeName.toString()})/]
[query public getApplication(m : Element):InstanceSpecification=invoke(helperName(),'getApplication(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Element)',Sequence{m})/]
[comment]
[query public getValues(m : Element,tagName:String):Sequence(ValueSpecification)=invoke(helperName(),'getValues(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Element,org.eclipse.uml2.uml.Stereotype,java.lang.String)',Sequence{m,tagName})/]
[/comment]
[query public getValues(m : Element,tagName:String):Sequence(ValueSpecification)=invoke(helperName(),'getValues(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Element,java.lang.String)',Sequence{m,tagName})/]
[query public eobjectURI(m : ecore::EObject):String=invoke(helperName(),'getUriFragment(org.eclipse.emf.ecore.EObject)',Sequence{m})/]
[query public getProjectName():String=invoke(helperName(),'getProjectName()',Sequence{})/]
[query public getUserInformationSources(m : XSDAnnotation):Set(String)=invoke(helperName(),'getUserInformationSources(org.eclipse.xsd.XSDAnnotation)',Sequence{m})/]
[query public getTextContent(m : OclAny):String=invoke(helperName(),'getTextContent(java.lang.Object)',Sequence{m})/]
[comment]
[query public getNodeName(m : OclAny):String=invoke(helperName(),'getNodeName(java.lang.Object)',Sequence{m})/]
[query public getNodeValue(m : OclAny):String=invoke(helperName(),'getNodeValue(java.lang.Object)',Sequence{m})/]
[query public getAttributes(m : OclAny):Set(OclAny)=invoke(helperName(),'getAttributes(java.lang.Object)',Sequence{m})/]
[query public getNIEMName(p:Property):String=p.name /]
[/comment]
[query public getAttributes(annotation:XSDAnnotation,elementIndex:Integer):Sequence(String)=invoke(helperName(),'getAttributes(org.eclipse.xsd.XSDAnnotation,java.lang.Integer)',Sequence{annotation,elementIndex})/]

[query public getNIEMName(p:Classifier):String=invoke(helperName(),'getNIEMName(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Classifier)',Sequence{p})/]
[query public getPropertyNIEMName(p:Property):String=invoke(helperName(),'getPropertyNIEMName(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Property)',Sequence{p})/] 
[query public getXmlDate():String=invoke(helperName(),'getXmlDate()',Sequence{})/] 
[query public getXmlDateTime():String=invoke(helperName(),'getXmlDateTime()',Sequence{})/] 
[query public getXmlTime():String=invoke(helperName(),'getXmlTime()',Sequence{})/] 
[query public getXmlGYearMonth():String=invoke(helperName(),'getXmlGYearMonth()',Sequence{})/] 
[query public getXmlGYear():String=invoke(helperName(),'getXmlGYear()',Sequence{})/] 
[query public getXmlGMonthDay():String=invoke(helperName(),'getXmlGMonthDay()',Sequence{})/] 
[query public getXmlGDay():String=invoke(helperName(),'getXmlGDay()',Sequence{})/] 
[query public getXmlGMonth():String=invoke(helperName(),'getXmlGMonth()',Sequence{})/] 
[query public getPrefix(element : XSDNamedComponent,namespaceMap:OclAny):String=invoke(helperName(),'getPrefix(org.eclipse.xsd.XSDNamedComponent,java.lang.Object)',Sequence{element,namespaceMap})/] 


[query public getInstanceValues(m : Element,tagName:String):Sequence(InstanceSpecification)=
	m.getValues(tagName)->select(v:ValueSpecification|v.oclIsKindOf(InstanceValue))
		.oclAsType(InstanceValue).instance
/]		
[query public getStringValues(m : Element,tagName:String):Sequence(String)=
	m.getValues(tagName)->select(v:ValueSpecification|v.oclIsKindOf(LiteralString))
		.oclAsType(LiteralString).value
		->asSequence()/]
[query public getStringValue(m : Element,tagName:String):String=
	if(m.getStringValues(tagName)->isEmpty())then '' else m.getStringValues(tagName)->first() endif /] 
[query public getEnumerationValue(m : Element,tagName:String):String=
	m.getInstanceValues(tagName)->select(instance:InstanceSpecification|instance.oclIsKindOf(EnumerationLiteral))
		.oclAsType(EnumerationLiteral).name
		->asSequence()->first()
/]		

[comment]
[query public getExtendedMetaclasses(m:Stereotype):Set(Class)=m._extensionEndOfType._extensionOfOwnedEnd.metaclass/]
[query public getMagicDrawExtendedMetaclasses(m:Stereotype):Set(Class)=m._extensionEndOfType._extensionOfOwnedEnd.metaclass/]
[query public getExtendedMetaclasses(m:Stereotype):Set(Class)=
	m._extensionEndOfType._extensionOfOwnedEnd.metaclass.name.getEmfMetaclass(m)/]
[query public getTopLevelPackage(elementcontext:Package):Package=
	if(elementcontext.nestingPackage.oclIsUndefined())then elementcontext else elementcontext.nestingPackage endif/]
[/comment]
[query public getTopLevelPackage(elementcontext:Package):Package=
	if(elementcontext.nestingPackage.oclIsUndefined())then elementcontext else elementcontext.nestingPackage.getTopLevelPackage() endif/]
[query public getEmfMetaclassPackage(elementcontext:NamedElement):Package=
	elementcontext.getNearestPackage().getTopLevelPackage().packagedElement->select(e|e.name='UML')->asSequence()->first()/]
[query public getEmfMetaclass(name:String,elementcontext:NamedElement):Class=
	elementcontext.getEmfMetaclassPackage().packagedElement->select(e|e.name=name)->asSequence()->first()/]
[query public getExtendedMetaclass(extension:Extension,m:Stereotype):Class=
	extension.metaclass.name.getEmfMetaclass(m)/]
[query public getExtensions(m:Stereotype):Set(Extension)=
	m._extensionEndOfType._extensionOfOwnedEnd/]

[query public getProfile(m:Stereotype):Profile=m.profile/]
[query public indexOf(m:String,after:String):Integer=m.index(after)/]
[query public substringAfter(m:String,after:String):String=
	if(m.indexOf(after)>0)
		then m.substring(m.indexOf(after)+after.size(),m.size())
		else ''
		endif
	/]
[query public substringBefore(m:String,after:String):String=
	if(m.indexOf(after)>1)
		then m.substring(1,m.indexOf(after)-1)
		else ''
		endif
	/]
[query public getAppliedStereotypes(element : Element):Set(Stereotype)=
	if(self.appliedStereotypeInstance.oclIsUndefined()) then Set{} else
	self.appliedStereotypeInstance.classifier->select(c|c.oclIsKindOf(Stereotype)).oclAsType(Stereotype)
	endif
/]

[query public displayAppliedStereotype(element : Element):Sequence(String)=
	if(element.getAppliedStereotypes()->isEmpty())then Sequence{''} else
	element.getAppliedStereotypes().displayStereotype()
	endif
	/]
[query public displayStereotype(stereotype:Stereotype):String=
	if(stereotype.isNiemStereotype())then ('&lt;&lt;'+stereotype.name+'>>') else '' endif
/]
[query public isNiemStereotype(stereotype:Stereotype):Boolean=
	stereotype.profile.isNiemProfile()
/]
[query public isNiemProfile(profile:Profile):Boolean=
	profile.name.startsWith('NIEM') or (profile.name='Model_Package_Description_Profile')
/]
[comment]
	Stereotype->forEach(stereotype)()
	[for(stereotype:Stereotype|element.getAppliedStereotypes())]&lt;&lt;[stereotype.name/]>> [/for][/template]
[template public displayAppliedStereotype(element : Element)][for(stereotype:Stereotype|element.getAppliedStereotypes())]&lt;&lt;[stereotype.name/]>> [/for][/template]
[query public getProvisioningMpdStereotypeName():String='MPD'/]
[query public getProvisioningMpdComponent(umlPackage : Package):Component=
	Set{umlPackage}->union(umlPackage.allOwnedElements()->select(e|e.oclIsKindOf(Package)).oclAsType(Package))
	._directedRelationshipOfTarget
	->select(r|r.oclIsKindOf(ElementImport) and r.oclAsType(ElementImport).importingNamespace.oclIsKindOf(Component))
		.oclAsType(ElementImport).importingNamespace.oclAsType(Component)
		->select(c|c.stereotypedBy(getProvisioningMpdStereotypeName()))
		->asSequence()->first()
/]
[/comment]
[query public getProvisioningMpdStereotypeName():String='ModelPackageDescription'/]
[query public getProvisioningMpdComponent(umlPackage : Package):Component=
	umlPackage.allOwnedElements()
	->select(e|e.oclIsKindOf(Component) and e.stereotypedBy(getProvisioningMpdStereotypeName())).oclAsType(Component)
		->asSequence()->first()
/]
[query public allOwnedElements(element : Element):Set(Element)=
	element.ownedElement->union(element.ownedElement.allOwnedElements())->asSet()
/]
[query public allClassifierConstraints(element : Element):Set(Element)=
	element.allOwnedElements()->select(c|c.isEditable() and c.oclIsKindOf(Constraint) and c.owner.oclIsKindOf(Classifier))->asSet()
/]

[query public getNearestPackage(s : Element):Package=if(s.oclIsKindOf(Package)) then self.oclAsType(Package) 
	else s.owner.getNearestPackage() endif/] 
[query public stringValue(s : ValueSpecification):String=''/] 
[query public stringValue(s : LiteralString):String=self.value/] 

[comment]
[query public getPimSchemas(pimPackage:Package):Sequence(Package)=
	self.eAllContents(Package)->select(p:Package|p.isPimSchema())
/]
[/comment]
[query public getPimSchemas(pimPackage:Package):Sequence(Package)=
	pimPackage.eAllContents(Package)->select(p:Package|p.isPimSchema())
	->asSet()->asSequence()
/]
[comment] if it has classifiers or imported by schema component[/comment]
[comment]
[query public isPimSchema(pimPackage:Package):Boolean=
	self.ownedType->select(t|t.oclIsKindOf(Classifier))->notEmpty()
	or self.isImportedBySchemaComponent()
/]
[query public isPimSchema(pimPackage:Package):Boolean=
	self.isEditable() and self.stereotypedBy('Namespace')
/]
[/comment]
[query public isPimSchema(pimPackage:Package):Boolean=
	self.isEditable() and self.isInformationModel()
/]
[query public isInformationModel(element:Element):Boolean=
	element.stereotypedBy('InformationModel')
/]
[query public isImportedBySchemaComponent(pimPackage:Package):Boolean=
	not(self.getSchemaComponentElementImport().oclIsUndefined())
/]
[query public getSchemaComponentElementImport(pimPackage:Package):ElementImport=
	self._directedRelationshipOfTarget
	->select(r|
		r.oclIsKindOf(ElementImport) 
		and r.oclAsType(ElementImport).importingNamespace.oclIsKindOf(Component)
		and (r.oclAsType(ElementImport).importingNamespace.oclAsType(Component).name='schemas')
		and (r.oclAsType(ElementImport).alias<>null)
		and (r.oclAsType(ElementImport).alias<>'')
	)->asSequence()->first()
/]
[query public getTargetNamespace(pimPackage:Package):String=
	self.getStringValue('targetNamespace')
/]
[comment]
[query public getTargetNamespace(pimPackage:Package):String=
	if(self.getSchemaComponentElementImport().oclIsUndefined()) then '' else self.getSchemaComponentElementImport().alias endif
/]
[query public getPimClassifiers(schema:Package):Sequence(Classifier)=schema.ownedType
		->select(t|t.oclIsKindOf(Class) or t.oclIsKindOf(DataType) or t.oclIsKindOf(Signal))
		.oclAsType(Classifier)->sortedBy(c|c.umlName())
/]
[/comment]
[query public getPimClassifiers(schema:Package):Sequence(Classifier)=schema.ownedType
		->select(t|t.oclIsKindOf(Class) or t.oclIsKindOf(DataType) )
		.oclAsType(Classifier)->sortedBy(c|c.umlName())
/]

[query public isPropertyRedefinition(p:Property):Boolean=not(p.redefinedProperty().oclIsUndefined())/]
[comment]
[query public redefinedProperty(p:Property):Property=
	if (p.redefinedProperty->notEmpty()) then p.redefinedProperty->asSequence()->first()
	else p.getRedefinitionContext().getAllAttributes()->select(a|a.name=p.name)->asSequence()->first()
	endif 
/]
[query public getRedefinitionContext(c:Property):Sequence(Classifier)=
	c.owner.oclAsType(Classifier).getBases()
/]
[query public getRedefinitionContext(c:Property):Sequence(Classifier)=
	c.owner.oclAsType(NamedElement).clientDependency
	->select(d:Dependency|d.oclIsKindOf(Realization) and d.oclAsType(Realization).isSubsets())
	.supplier.oclAsType(Classifier)
/]
[query public getExplicitRedefinitionContext(c:Property):Classifier=
	c.owner.oclAsType(NamedElement).clientDependency
	->select(d:Dependency|d.oclIsKindOf(Realization) and d.oclAsType(Realization).isSubsets())
	.supplier.oclAsType(Classifier)->asSequence()->first()
/]
[query public redefinedProperty(p:Property):Property=
	if(p.getRedefinitionContext().oclIsUndefined())then null
	else p.getRedefinitionContext().getAllAttributes()->select(a|a.getPropertyNIEMName()=p.getPropertyNIEMName())->asSequence()->first()
	endif
/]
[/comment]
 
[query public redefinedProperty(p:Property):Property=invoke(helperName(),'redefinedProperty(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Property)',Sequence{p})/] 

[query public getAllAttributes(c:Classifier):Set(Property)=
	c.attribute->union(c.allParents().getAllAttributes())->asSet()
/]
[query public getRedefinitionContext(c:Property):Classifier=
	c.owner.oclAsType(Classifier).getSubsets()
/]

[query public getGeneralizations(c:Classifier):Set(Generalization)=
	c.generalization
		->select(g:Generalization|
			(g.general<>null)
			and not(g.general.oclIsUndefined()) 
			and (g.general.name<>null) 
			and not(g.general.name.oclIsUndefined())
		)->asSet()
/]
[query public getRealizations(c:NamedElement):Set(Realization)=
	c._directedRelationshipOfSource
		->select(g:DirectedRelationship|
			g.oclIsKindOf(Realization)
		).oclAsType(Realization)->asSet()
/]
[query public getBases(c:Classifier):Sequence(Classifier)=
	c.getGeneralizations()->select(g:Generalization|g.isExtends()).general
	->union(c.clientDependency->select(d|d.stereotypedBy('Restriction')).supplier.oclAsType(Classifier))
		->sortedBy(s:Classifier|s.umlName())
		->asSequence()
/]
[comment]
[query public getBases(c:Classifier):Sequence(Classifier)=
	c.getGeneralizations()
		->select(g:Generalization|g.isExtends()).general
		->sortedBy(s:Classifier|s.name())
		->asSequence()
/]
[query public isURI(uri:String):Boolean=
	self.startsWith('http://')
/]
[query public isSubsets(classifier:Generalization):Boolean=
	classifier.stereotypedBy('Subsets')
/]
[query public isExtends(classifier:Generalization):Boolean=
	classifier.stereotypedBy('Extends')
/]
[/comment]
[query public isExtends(generalization:Generalization):Boolean=
	not(generalization.stereotypedBy('Augments'))
	and not(generalization.stereotypedBy('RolePlayedBy'))
	and not(not(generalization.specific.isAugmentationType()) and generalization.general.isAugmentationType())
	
/]
[query public getSubsetsPackage(classifier:Package):Package=
	classifier.getRealizations()->select(g:Realization|g.isSubsetsPackage()).supplier.oclAsType(Package)
	->asSequence()->first()
/]
[query public getSubsetsClassifier(classifier:Classifier):Classifier=
	classifier.getRealizations()->select(g:Realization|g.isSubsets()).supplier.oclAsType(Classifier)
	->asSequence()->first()
/]
[comment]
				and (t.oclAsType(Classifier).getNIEMName()=classifier.getNIEMName())
[query public getSubsets(classifier:Classifier):Classifier=
	if(classifier.getSubsetsClassifier().oclIsUndefined()) then
		if(classifier.getNearestPackage().getSubsetsPackage().oclIsUndefined()) then
			null
		else
			classifier.getNearestPackage().getSubsetsPackage().ownedType
			->select(t:Type|t.oclIsKindOf(Classifier) 
				and (t.name=classifier.getNIEMName())
				).oclAsType(Classifier)->asSequence()->first()
		endif
	else
		classifier.getSubsetsClassifier()
	endif
/]
[/comment]

[query public getSubsets(classifier:Classifier):Classifier=
	if(classifier.getSubsetsClassifier().oclIsUndefined()) then
		if(classifier.getNearestPackage().getSubsetsPackage().oclIsUndefined()) then
			null
		else
			classifier.getNearestPackage().getSubsetsPackage().ownedType
			->select(t:Type|t.oclIsKindOf(Classifier) 
				and (t.oclAsType(Classifier).getNIEMName()=classifier.getNIEMName())
				).oclAsType(Classifier)->asSequence()->first()
		endif
	else
		classifier.getSubsetsClassifier()
	endif
/]
[query public isSubsetsPackage(realization:Realization):Boolean=
	realization.isSubsets() 
	and realization.client->forAll(c|c.isInformationModel())
	and realization.supplier->forAll(c|c.isInformationModel())
/]
[comment]
	and realization.client->forAll(c|c.isInformationModelSubset())
	and realization.supplier->forAll(c|c.isInformationModelReference())

[/comment]
[query public isInformationModelSubset(element:Element):Boolean=
	element.isInformationModel() 
	and (element.getEnumerationValue('defaultPurpose')='subset')
/]
[query public isInformationModelReference(element:Element):Boolean=
	element.isInformationModel()  
	and (element.getEnumerationValue('defaultPurpose')='reference')
/]
[query public isSubsets(classifier:Realization):Boolean=
	classifier.stereotypedBy('References')
/]
[query public isRoleOf(classifier:Generalization):Boolean=
	classifier.stereotypedBy('RoleOf')
/]
[query public isAugments(classifier:Generalization):Boolean=
	classifier.stereotypedBy('Augments')
/]
[query public isAugmentationType(classifier:Classifier):Boolean=
	classifier.stereotypedBy('AugmentationType')
	or classifier.generalization->select(g:Generalization|g.isAugments())->notEmpty()
/]
[query public isMetadataType(classifier:Classifier):Boolean=
	classifier.stereotypedBy('MetadataType')
/]
[query public isPropertyHolder(classifier:Element):Boolean=
	classifier.stereotypedBy('PropertyHolder')
/]
[query public getAllParentClassifiers(c : Classifier):Set(Classifier)=
	if((c=null)or c.oclIsUndefined()) then Set(Classifier){}
	else c.allParents()->select(g:Classifier|(g<>null)and not(g.oclIsUndefined()) and (g.name<>null) and not(g.name.oclIsUndefined()))->flatten()->asSet()
	endif
/]
[query public allParents(c : Classifier):Set(Classifier)=
	c.general->union(c.general.allParents())->asSet()
/]
	
[query public getAllBases(c : Classifier):Sequence(Classifier)=
	if((c=null)or c.oclIsUndefined()) then Set(Classifier){}
	else c.getBases()->union(c.getBases().getAllBases())
	endif
/]
[query public allSubtypes(c : Classifier):Set(Classifier)=
	c._directedRelationshipOfTarget
		->select(r|r.oclIsKindOf(Generalization)).oclAsType(Generalization).specific
		->collect(c|c->union(c.allSubtypes()))
/]

[comment]
[query public allSubtypes(c : Classifier):Set(Classifier)=
	c._package.ownedType
		->select(s:Type|
			s.oclIsKindOf(Classifier)
			and s.oclAsType(Classifier).allParents()->includes(c)
		).oclAsType(Classifier)->asSet()
/]
[query public getAllParentClassifiers(c : Classifier):Set(Classifier)=
	if((c=null)or c.oclIsUndefined()) then Set(Classifier){}
	else c.generalization->select(g:Generalization|(g.general<>null)and not(g.general.oclIsUndefined()) and (g.general.name<>null) and not(g.general.name.oclIsUndefined())).general->flatten()->asSet()
	endif
/]
[query public getAllParentClassifiers(c : Classifier):Set(Classifier)=c.allParents()/]
[query public allParentClassifiers(c : Classifier , didThat : Set(Classifier)):Set(Classifier)=
	if(didThat->includes(c)) then didThat else
	c.generalization.general.allParentClassifiers(didThat->union(Set{c}))->asSet()
	endif
/]
[query public getAllParentClassifiers(c : Classifier):Set(Classifier)=
	if((c=null)or c.oclIsUndefined()) then Set(Classifier){}
	else c.generalization->select(g:Generalization|(g.general<>null)and not(g.general.oclIsUndefined()) and (g.general.name<>null) and not(g.general.name.oclIsUndefined())).general->flatten()->asSet()
	endif
/]
	Set(Classifier){c}
	c.generalization->select(g:Generalization|(g.general<>null)and not(g.general.oclIsUndefined())).general->flatten()->asSet()
	c.generalization->select(g:Generalization|(g.general<>null)and not(g.general.oclIsUndefined())).general
[query public getAllParentClassifiers(c : Classifier):Set(Classifier)=c.allParentClassifiers(Set(Classifier){})
/]
[query public allSubtypes(c : Classifier):Set(Classifier)=
	c._package.ownedType
		->select(s:Type|
			s.oclIsKindOf(Classifier)
			and s.oclAsType(Classifier).allParents()->includes(c)
		).oclAsType(Classifier)->asSet()
/]
[query public allSubtypes(c : Classifier):Set(Classifier)=
	c._package.ownedType
		->select(s:Type|
			s.oclIsKindOf(Classifier)
			and s.oclAsType(Classifier).allParents()->includes(c)
		)
/]
[query public allSubtypes(c : Classifier):Set(Classifier)=
	c.subtypes()->union(c.subtypes().allSubtypes())
/]
[query public subtypes(c : Classifier):Set(Classifier)=
	c._package.ownedType->select(s:Type|s.oclIsKindOf(Classifier)and s.oclAsType(Classifier).general->includes(c))
/]
[query public subtypes(c : Classifier):Set(Classifier)=
	c._package.ownedType
		->select(s:Type|
			(s<>c) 
			and s.oclIsKindOf(Classifier)
			and s.oclAsType(Classifier).generalization
				->select(g:Generalization|(g.general<>null) and not(g.general.oclIsUndefined())).general->includes(c)
		)
/]
[/comment]
[query public getAssociations(c:Classifier):Set(Association)=
	c._associationOfEndType
/]

[query public getAllOwnedProperties(c:Classifier):Set(Property)=
	c.attribute
	->union(c.getAssociations().ownedEnd->select(ae|ae.getOtherEnd().type=c))
	->asSet()
/]
[query public getOtherEnd(p:Property):Property=p.opposite/]
[query public umlName(namedElement:NamedElement):String=
	if((namedElement.name=null) or namedElement.name.oclIsUndefined()) then '(unnamed)' else namedElement.name endif
/]	
[query public name(namedElement:NamedElement):String=
	if((namedElement.name=null) or namedElement.name.oclIsUndefined()) then '(unnamed)' else namedElement.name endif
/]	
[query public name(namedElement:ecore::ENamedElement):String=
	if((namedElement.name=null) or namedElement.name.oclIsUndefined()) then '(unnamed)' else namedElement.name endif
/]	

[comment]operation property crashes
[query public getOwnedProperty(c:Classifier):Sequence(Property)=
	if(c.oclIsKindOf(Class))then c.oclAsType(Class).ownedAttribute
		else if(c.oclIsKindOf(DataType))then c.oclAsType(DataType).ownedAttribute
			else if(c.oclIsKindOf(Signal))then c.oclAsType(Signal).ownedAttribute
				else Sequence{} endif
			endif
		endif		
/]
[query public getOwnedProperty(c:Classifier):Sequence(Property)=
	if((c<>null) and c.oclIsKindOf(Class))then c.oclAsType(Class).ownedAttribute
				else Sequence{} endif
/]
[query public getOwnedProperty(c:Classifier):Sequence(Property)=
	if(c.oclIsKindOf(Class))then c.oclAsType(Class).ownedAttribute->select(a|a.type<>null)
				else Sequence{} endif
/]
[query public getOwnedProperty(c:Classifier):Sequence(Property)=
	if(c.oclIsKindOf(Class))then c.oclAsType(Class).ownedAttribute
		else if(c.oclIsKindOf(DataType))then c.oclAsType(DataType).ownedAttribute
			else if(c.oclIsKindOf(Signal))then c.oclAsType(Signal).ownedAttribute
				else Sequence{} endif
			endif
		endif		
/]
[/comment]
[query public getOwnedProperty(c:Classifier):Sequence(Property)=
	if(c.oclIsKindOf(Class))then c.oclAsType(Class).ownedAttribute
		else if(c.oclIsKindOf(DataType))then c.oclAsType(DataType).ownedAttribute
				else Sequence{} endif
		endif		
/]
[query public qualifiedName(type:NamedElement):String=
	if(type<>null)
		then if((type.qualifiedName<>'') and (type.qualifiedName<>null) and not(type.qualifiedName.oclIsUndefined()))
			then type.qualifiedName.replace('<','&lt;').replace('>','&gt;')
			else (type.owner.oclAsType(NamedElement).qualifiedName()+'::(unnamed)')
			endif
		else ''
		endif
/]
[template public getPurposeDescription(purposeURI:String){
	purpose:String=purposeURI.substringAfter('#');
}]
	[if(purpose='administrative')]Serves the purpose of documentation that relates to business operations, decisions, organizing people and resources, agreements, testimonials, etc. about a model package description.
	[elseif(purpose='business-rules')]Serves the purpose of a statement or set of statements (formal or informal) that define and/or constrain some aspect of business data or information.
	[elseif(purpose='catalog')]Serves the purpose of identifying, locating, and describing all artifacts in a model package description.
	[elseif(purpose='changelog')]Serves the purpose of recording all changes (additions, deletions, modifications) to a model package description relative to a previous version.
	[elseif(purpose='conformance-report')]Serves the purpose of a report that evaluates NIEM conformance.
	[elseif(purpose='constraint-schema')]Serves the purpose of an XML schema that defines additional constraints on XML instances beyond those that NIEM Naming and Design Rules are capable of enforcing.
	[elseif(purpose='constraint-schema-set')]Serves the purpose of a collection of XML schemas which impose additional constraints on the XML instance documents (IEPs) of an IEPD.
	[elseif(purpose='data-dictionary')]Serves the purpose of a record of information about data (i.e. metadata) such as names, meaning, relationships to other data, origin, usage, and format.
	[elseif(purpose='data-model')]Serves the purpose of a formal representation (e.g., UML) of business data requirements that indicates data semantics, structure, and relationships.
	[elseif(purpose='display')]Serves the purpose of formatting information for viewing on a computer monitor.
	[elseif(purpose='documentation')]Serves the purpose of describing or explaining any aspect of design, usage, testing, processing, etc. of a model package description and/or its contents.
	[elseif(purpose='endorsement')]Serves the purpose of documentation that supports, approves, sanctions, or recommends a model package description.
	[elseif(purpose='exchange-schema')]Serves the purpose of an XML schema that is a root schema (and declares a root element) for an IEPD.
	[elseif(purpose='exchange-schema-set')]Serves the purpose of a collection of XML schemas which declare root elements for XML instance documents (IEPs) of an IEPD.
	[elseif(purpose='extension-schema')]Serves the purpose of an XML schema that extends a NIEM release in accordance with the NIEM Naming and Design Rules.
	[elseif(purpose='extension-schema-set')]Serves the purpose of a collection of XML schemas which contain new or extend existing NIEM data components and conform to the NIEM Naming and Design Rules.
	[elseif(purpose='file')]Serves the purpose of a block of arbitrary information, or resource for storing information, which is available to a computer program and is usually based on some kind of durable storage.
	[elseif(purpose='file-set')]Serves the purpose of a collection of files managed together for a specific purpose or reason.
	[elseif(purpose='incremental-schema')]Serves the purpose of an XML schema within a Domain Update that represents incremental changes to an existing NIEM domain.
	[elseif(purpose='mapping')]Serves the purpose of describing how one data model or set of data components corresponds to another by identifying semantic equivalence or similarity.
	[elseif(purpose='master-document')]Serves the purpose of a primary source of documentation; a readme file; a first documentation source to consult and one that may reference other supplemental documentation.
	[elseif(purpose='memorandum')]Serves the purpose of documentation that records events, observations, agreements, or other business related aspects pertaining to a model package description.
	[elseif(purpose='metadata-extended')]Serves the purpose of an XML artifact that provides additional metadata beyond that contained in a model package description catalog.
	[elseif(purpose='non-normative-reference')]Serves the purpose of technical documentation that provides informal guidance or recommends methods that relate to technical aspects of a model package description.
	[elseif(purpose='normative-reference')]Serves the purpose of technical documentation that provides formal specifications, instructions, or rules for techniques and methods that relate to a model package description.
	[elseif(purpose='ontology')]Serves the purpose of a standardized representation of knowledge as a set of concepts within a domain, and the relationships between those concepts. It can be used to reason about the entities within that domain, and may be used to describe the domain.
	[elseif(purpose='quality-assurance-report')]Serves the purpose of a report that evaluates or measures degree of excellence against some prescribed criteria.
	[elseif(purpose='reference-schema')]Serves the purpose of an XML schema that defines and declares NIEM data components that are authoritative.
	[elseif(purpose='reference-schema-set')]Serves the purpose of a collection of XML schemas that contain data components that are authoritive for NIEM.
	[elseif(purpose='replacement-schema')]Serves the purpose of an XML schema within a domain update that represents a complete replacement of an existing NIEM domain schema.
	[elseif(purpose='report')]Serves the purpose of a document that records evaluation results produced through review, testing, or analysis that was executed by automatic processing, manual (human) means, or a combination of both.
	[elseif(purpose='sample-instance')]Serves the purpose of an XML instance document that exemplifies a typical instance that validates against an XML schema or schema set.
	[elseif(purpose='schema')]Serves the purpose of an XML schema in general.
	[elseif(purpose='schema-set')]Serves the purpose of a collection of XML schemas that are maintained together for a logical reason or purpose (usually because of inter dependencies).
	[elseif(purpose='subset-schema')]Serves the purpose of an XML schema that has been derived from a NIEM reference schema and represents a subset of the reference schema.
	[elseif(purpose='subset-schema-set')]Serves the purpose of a collection of XML schemas which have been derived from and represent a subset of a particular NIEM reference schema set (release).
	[elseif(purpose='technical-reference')]Serves the purpose of technical documentation that defines, describes, or explains technical aspects of a model package description.
	[elseif(purpose='test-report')]Serves the purpose of a document that records the results of testing.
	[elseif(purpose='tool-specific-file')]Serves the purpose of an artifact that is an input to or output from some software tool used to develop contents of or implement a model package description. Such artifacts may be in either a standard open format or proprietary format.
	[elseif(purpose='transformation')]Serves the purpose of translating an artifact into another format or representation.
	[elseif(purpose='wantlist')]Serves the purpose of an XML instance document that represents a NIEM schema subset and is an input to or output from the NIEM Schema Subset Generation Tool.
	[elseif(purpose='web-service')]Serves the purpose of establishing a method for communication between two electronic devices over a network.
	[else](unknown)
	[/if]
[/template]
