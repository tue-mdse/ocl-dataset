[comment encoding = UTF-8 /]
[module umlInstanceDocument('http://www.nomagic.com/magicdraw/UML/2.4.1')/]

[comment]
NIEM UML 
Copyright Â© 2011, ModelDriven.org and Tom Digre, all rights reserved worldwide.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see http://www.gnu.org/licenses/gpl-3.0-standalone.html.

There are also commercial licenses available for this software.
Contact ModelDriven.org for more information.
[/comment]	
[import commonQuery/]
[template public umlInstanceDocument(mpdModel : Model){
	elements:Set(InstanceSpecification)=mpdModel.getDocumentInstances();
}]
[comment @main /]
[comment] for each top level element of schema [/comment]
[elements.topLevelElement()/]	
[/template]
[comment]
[template public umlInstanceDocument(mpdModel : Model){
	elements:Collection(InstanceSpecification)=mpdModel.getDocumentInstances();
}]
[('model '+mpdModel.qualifiedName).log()/]
[('component '+mpdModel.getMpdComponent().qualifiedName).log()/]
[elements.topLevelElement()/]	
[/template]
[file('XMLSamples/'+packageName+'.xml',false, 'UTF-8')]
[/comment]
[template public topLevelElement(topLevelElement : InstanceSpecification){
	packageName:String=topLevelElement.owningPackage.name;
	slots:Sequence(Slot)=topLevelElement.slot->asSequence();
	namespaceMap:OclAny=topLevelElement.getUmlQNamePrefixToNamespaceMap();
	instanceDocumentLocation:String= topLevelElement.resolveInstanceDocumentLocation().substring(2);
}]
[file(instanceDocumentLocation,false, 'UTF-8')]
[for(owningSlot:Slot|slots)][for(topInstance: InstanceSpecification |owningSlot.value.oclAsType(InstanceValue).instance)]
<[owningSlot.instanceQName(namespaceMap)/] [namespaceMap.xmlnsAttribues(owningSlot)/] [topInstance.getOrderedSlots().AttributeContents(namespaceMap)/]>
[for(slot:Slot|topInstance.getOrderedSlots())]
	[slot.NestedElements(namespaceMap)/]
[/for]
</[owningSlot.instanceQName(namespaceMap)/]>	
[/for][/for]
[/file]
[/template]

[query public resolveInstanceDocumentLocation(instanceSpecification : InstanceSpecification):String=invoke(helperName(),'resolveInstanceDocumentLocation(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.InstanceSpecification)',Sequence{instanceSpecification})/] 
[query public getOrderedSlots(instanceSpecification : InstanceSpecification):Sequence(Slot)=invoke(helperName(),'getOrderedSlots(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.InstanceSpecification)',Sequence{instanceSpecification})/] 
[query public getUmlPrefix(element : Element,namespaceMap:OclAny):String=invoke(helperName(),'getUmlPrefix(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Element,java.lang.Object)',Sequence{element,namespaceMap})/] 
[query public getUmlQNamePrefixToNamespaceMap(schema:InstanceSpecification):OclAny=invoke(helperName(),'getUmlQNamePrefixToNamespaceMap(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.Element)',Sequence{schema})/]
[query public isXSDAttribute(schema:StructuralFeature):Boolean=invoke(helperName(),'isXSDAttribute(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.StructuralFeature)',Sequence{schema})/]
[query public getNIEMName(schema:NamedElement):Boolean=invoke(helperName(),'getNIEMName(com.nomagic.uml2.ext.magicdraw.classes.mdkernel.NamedElement)',Sequence{schema})/]

[query public instanceQName(slot : Slot,namespaceMap:OclAny):String=
	if((slot.definingFeature=null) or slot.definingFeature.oclIsUndefined()) 
		then 'UNDEFINED:FEATURE' 
		else slot.definingFeature.getUmlPrefix(namespaceMap)+':'+slot.definingFeature.getNIEMName()
	endif
/]	
[query public typeQName(type : Type,namespaceMap:OclAny):String=
	if((type=null) or type.oclIsUndefined()) 
		then 'UNDEFINED:TYPE' 
		else type.getUmlPrefix(namespaceMap)+':'+type.getNIEMName()
	endif
/]	

[query public getDocumentInstances(model:Model):Set(InstanceSpecification)=
	model.getMpdComponent()->select(c|(c<>null) and not(c.oclIsUndefined())).getMpdFile()
	->select(f|f.isDocumentInstance()).supplier
	->select(f|f.oclIsKindOf(Package)).oclAsType(Package).getPackageDocumentInstance()
	->select(d|(d<>null) and not(d.oclIsUndefined()))
	->asSet()
/]	
[query public getMpdComponent(umlPackage : Package):Component=
	umlPackage.allOwnedElements()
	->select(e|e.oclIsKindOf(Component) 
		and e.isEditable()
		and e.stereotypedBy(getProvisioningMpdStereotypeName())
		and (e.oclAsType(Component)._package.nestingPackage.name<>'PSM')
	).oclAsType(Component)
		->asSequence()->first()
/]

[query public getMpdFile(mpd:Component):Collection(Dependency)=
	mpd.clientDependency->select(d|d.isMpdFile())
/]	
[query public getProvisioningMpdFileStereotypeName():String='ModelPackageDescriptionFile'/]
[query public isMpdFile(mpdFile : Dependency):Boolean=
	mpdFile.stereotypedBy(getProvisioningMpdFileStereotypeName())
/]
[comment]
	
[/comment]
[query public isDocumentInstance(mpdFile:Dependency):Boolean=
	(mpdFile.getEnumerationValue('natureCode')='xml')
	and (mpdFile.getEnumerationValue('purposeCode')='sample_instance')
/]	
[query public getPackageDocumentInstance(instancePackage:Package):InstanceSpecification=
	instancePackage.packagedElement->select(i|i.oclIsKindOf(InstanceSpecification)).oclAsType(InstanceSpecification)
	->select(i|i.isRootInstance())->asSequence()->first()
/]	
[query public isRootInstance(instance:InstanceSpecification):Boolean=
	instance._instanceValueOfInstance->isEmpty()
	and (instance.slot->size()=1)
	and instance.slot.definingFeature.getNearestPackage()->forAll(p|p.getEnumerationValue('defaultPurpose')='exchange')
/]	

[template public NestedElements(slot : Slot,namespaceMap : OclAny)
][slot.value.NestedElement(slot,namespaceMap)/][/template]

[template public NestedElement(valueSpecification : ValueSpecification, slot : Slot, namespaceMap : OclAny)
][if(valueSpecification.oclIsKindOf(InstanceValue))][if((valueSpecification.oclAsType(InstanceValue).instance=null)or valueSpecification.oclAsType(InstanceValue).instance.oclIsUndefined())][slot.UndefinedContent(namespaceMap)/][else][valueSpecification.oclAsType(InstanceValue).instance.TypeDefinitionComplex(slot,valueSpecification,namespaceMap)/][/if][else][valueSpecification.TypeDefinitionSimple(slot,namespaceMap)/][/if][/template]

[template public TypeDefinitionComplex(nestedElement : InstanceSpecification, owningSlot : Slot, valueSpecification : ValueSpecification,namespaceMap : OclAny)
][if(owningSlot.definingFeature.oclAsType(Property).aggregation=AggregationKind::none)][nestedElement.ReferencedComplex(owningSlot,namespaceMap)/][else][nestedElement.ContainedComplexInstance(owningSlot,valueSpecification,namespaceMap)/][/if]
[/template]
[comment]
if referenced, add s:id=
for references, add s:ref=
[/comment]
[template public UndefinedContent(owningSlot : Slot, namespaceMap : OclAny)
][if(owningSlot.definingFeature.oclAsType(Property).aggregation=AggregationKind::none)][owningSlot.UndefinedRefContent(namespaceMap)/][else][owningSlot.UndefinedContainedContent(namespaceMap)/][/if]
[/template]
[template public UndefinedRefContent(owningSlot : Slot, namespaceMap : OclAny)
]
<[owningSlot.instanceQName(namespaceMap)/] s:ref="UNDEFINED_REFERENCE"/>
[/template]
[template public UndefinedContainedContent(owningSlot : Slot, namespaceMap : OclAny)
]
<[owningSlot.instanceQName(namespaceMap)/]>UNDEFINED CONTENT</[owningSlot.instanceQName(namespaceMap)/]>
[/template]
[template public ReferencedComplex(referencedElement : InstanceSpecification, owningSlot : Slot, namespaceMap : OclAny)
]
<[owningSlot.instanceQName(namespaceMap)/] s:ref="[if((referencedElement=null)or referencedElement.oclIsUndefined())]UNRESOLVED[else][referencedElement.name/][/if]"/>
[/template]
[template public ContainedComplexInstance(nestedElement : InstanceSpecification, owningSlot : Slot, valueSpecification : ValueSpecification,namespaceMap : OclAny)
][if(nestedElement.oclIsKindOf(EnumerationLiteral))][nestedElement.oclAsType(EnumerationLiteral).ContainedEnumerationLiteral(owningSlot,namespaceMap)/][else][nestedElement.ContainedComplex(owningSlot,valueSpecification,namespaceMap)/][/if]
[/template]
[template public ContainedEnumerationLiteral(nestedElement : EnumerationLiteral, owningSlot : Slot, namespaceMap : OclAny)
]
<[owningSlot.instanceQName(namespaceMap)/]>[nestedElement.getNIEMName()/]</[owningSlot.instanceQName(namespaceMap)/]>	
[/template]

[template public ContainedComplex(nestedElement : InstanceSpecification, owningSlot : Slot, valueSpecification : ValueSpecification,namespaceMap : OclAny){
	nestedSlots:Sequence(Slot)=nestedElement.getOrderedSlots();
}][if(nestedSlots->select(s|(s.definingFeature<>null) and not(s.definingFeature.oclIsUndefined()) and not(s.definingFeature.isXSDAttribute()))->isEmpty())][nestedElement.ContainedComplexEmpty(owningSlot,valueSpecification,namespaceMap)/][else][nestedElement.ContainedComplexContent(owningSlot,valueSpecification,namespaceMap)/][/if]
[/template]
[comment]
[template public ContainedComplexContent(nestedElement : InstanceSpecification, owningSlot : Slot, namespaceMap : OclAny){
	nestedSlots:Sequence(Slot)=nestedElement.getOrderedSlots();
}]
<[owningSlot.instanceQName(namespaceMap)/] [if(nestedElement._instanceValueOfInstance->size()>1)]s:id="[nestedElement.name/]"[/if] [nestedSlots.AttributeContents(namespaceMap)/]>
[for(slot:Slot|nestedSlots->select(s|not(s.definingFeature.isXSDAttribute())))]
	[slot.NestedElements(namespaceMap)/]
[/for]
</[owningSlot.instanceQName(namespaceMap)/]>	
[/template]
[/comment]
[template public ContainedComplexContent(nestedElement : InstanceSpecification, owningSlot : Slot, valueSpecification : ValueSpecification,namespaceMap : OclAny){
	nestedSlots:Sequence(Slot)=nestedElement.getOrderedSlots();
}]
<[owningSlot.instanceQName(namespaceMap)/] [nestedElement.Attributes(valueSpecification,namespaceMap)/]>
[for(slot:Slot|nestedSlots->select(s|not(s.definingFeature.isXSDAttribute())))]
	[slot.NestedElements(namespaceMap)/]
[/for]
</[owningSlot.instanceQName(namespaceMap)/]>	
[/template]
[template public Attributes(nestedElement : InstanceSpecification, valueSpecification : ValueSpecification,namespaceMap : OclAny){
	nestedSlots:Sequence(Slot)=nestedElement.getOrderedSlots();
}][nestedElement.StructuresId()/][valueSpecification.StructuresMetadata()/][valueSpecification.XsiType(namespaceMap)/][nestedSlots.AttributeContents(namespaceMap)/]
[/template]
[template public XsiType(valueSpecification : ValueSpecification, namespaceMap : OclAny){
	owningSlot:Slot=valueSpecification.owningSlot;
	feature:StructuralFeature=owningSlot.definingFeature;
	redefinedProperty:Property=if(feature.oclIsKindOf(Property))then feature.oclAsType(Property).redefinedProperty() else null endif;
	definingType:Type=if(redefinedProperty.oclIsUndefined())then feature.type else redefinedProperty.type endif;
	valueType:Type=valueSpecification.type;
}][if(not(valueType.oclIsUndefined()) and (definingType.typeQName(namespaceMap)<>valueType.typeQName(namespaceMap)) )] xsi:type="[valueType.typeQName(namespaceMap)/]"[/if]
[/template]
[template public StructuresId(nestedElement : InstanceSpecification){
	metadata:ValueSpecification=nestedElement.supplierDependency->select(d|d.name='metadata').client
		->select(s|s.oclIsKindOf(ValueSpecification)).oclAsType(ValueSpecification)
		->asSequence()->first();
}][if((nestedElement._instanceValueOfInstance->size()>1)or not(metadata.oclIsUndefined()))] s:id="[nestedElement.name/]"[/if]
[/template]
[template public StructuresMetadata(nestedElement : ValueSpecification){
	metadata:InstanceSpecification=nestedElement.clientDependency->select(d|d.name='metadata').supplier
		->select(s|s.oclIsKindOf(InstanceSpecification)).oclAsType(InstanceSpecification)
		->asSequence()->first();
}][if(not(metadata.oclIsUndefined()))] s:metadata="[metadata.name/]"[/if]
[/template]
[template public ContainedComplexEmpty(nestedElement : InstanceSpecification, owningSlot : Slot, valueSpecification :ValueSpecification,namespaceMap : OclAny){
	nestedSlots:Sequence(Slot)=nestedElement.getOrderedSlots();
}]
<[owningSlot.instanceQName(namespaceMap)/][nestedElement.Attributes(valueSpecification,namespaceMap)/]/>
[/template]

[template public TypeDefinitionSimple(value : ValueSpecification , owningSlot : Slot , namespaceMap : OclAny)
]
<[owningSlot.instanceQName(namespaceMap)/] >[value.simpleTypeValue()/]</[owningSlot.instanceQName(namespaceMap)/]>
[/template]

[query public simpleTypeValue(value : ValueSpecification):String=
	if(value.oclIsKindOf(LiteralBoolean))
	then value.oclAsType(LiteralBoolean).value.toString()
	else 
		if(value.oclIsKindOf(LiteralInteger))
		then value.oclAsType(LiteralInteger).value.toString()
		else 
			if(value.oclIsKindOf(LiteralReal))
			then value.oclAsType(LiteralReal).value.toString()
			else 
				if(value.oclIsKindOf(LiteralString))
				then value.oclAsType(LiteralString).value
				else 
					if(value.oclIsKindOf(LiteralUnlimitedNatural))
					then value.oclAsType(LiteralUnlimitedNatural).value.toString()
					else 
						if(value.oclIsKindOf(InstanceValue))
						then value.oclAsType(InstanceValue).instance.oclAsType(EnumerationLiteral).getNIEMName()
						else ''
						endif

					endif
				endif
			endif
		endif
	endif
/]



[template public AttributeContents(slot : Slot , namespaceMap : OclAny)
][if(slot.definingFeature.isXSDAttribute())] [slot.XSDAttributeGroupContentUse(namespaceMap)/][/if][/template]

[template public XSDAttributeGroupContentUse(slot:Slot,namespaceMap : OclAny)
][slot.instanceQName(namespaceMap)/]="[slot.value.simpleTypeValue()/]"[/template]
