[comment encoding = UTF-8 /]
[module odtNiemMasterContent('http://www.nomagic.com/magicdraw/UML/2.4.1',
	'http://reference.niem.gov/niem/resource/mpd/catalog/1.0/',
	'http://www.eclipse.org/ocl/1.1.0/Ecore')/]
[comment]
	'http://niem.gov/uml/schemas/niem.provisioning/1',
[/comment]

[import commonQuery/]
[import odtBoilerPlate/]
[import odtCommon/]
[comment]
NIEM UML 
Copyright Â© 2011, ModelDriven.org and Tom Digre, all rights reserved worldwide.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see http://www.gnu.org/licenses/gpl-3.0-standalone.html.

There are also commercial licenses available for this software.
Contact ModelDriven.org for more information.
[/comment]	
[template public odtNiemMasterContent(mpdx : Model , mpdCatalog:mpdcat::CatalogType , mpdComponent:Component)]
	[('mpdComponent '+mpdComponent.qualifiedName).log()/]
	[file ('../temp~/master-document/content.xml', false, 'UTF-8')][startOfficeDocument()/]
	[mpdx.odtBody(mpdCatalog,mpdComponent)/]
</office:document-content>
	[/file]
[/template]



[template public header( mpdCatalog:mpdcat::CatalogType){
	version:String=if(mpdCatalog.mpdVersionID.oclIsUndefined())then '1.0' else mpdCatalog.mpdVersionID endif;
}]
	[version.odtCoverPage()/]
[/template]
[template public odtCoverPage(mpdVersionID:String)]
	['coverPageStartMasterDoc'.textStart()/]
		<draw:frame draw:style-name="fr2" draw:name="graphics1"
			text:anchor-type="paragraph" svg:width="3.3429in" svg:height="0.7811in"
			draw:z-index="37">
			<draw:image xlink:href="Pictures/10000201000001410000004B109CF868.png"
				xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad" />
		</draw:frame>
	[textEnd()/]
	
	[emptyP()/]
	[emptyP()/]
	[emptyP()/]
	[emptyP()/]
	[emptyP()/]
	[emptyP()/]
	[emptyP()/]
	[headerTitle()/]
	[headerSubject()/]
	[emptyP()/]
	[(' Version '+mpdVersionID).headerTextSpan('P4','T1')/]
	[emptyP6()/]
	[('Updated '.date()).headerTextSpan('P1','T4')/]
	[emptyP()/]
	[emptyP()/]
	[emptyP()/]
	[pageBreak()/]
[/template]
[template public tableOfContents(mpd : Model,schemas:Sequence(Package))]
	<text:table-of-content text:style-name="Sect1"
		text:name="Table of Contents1">
		[tableOfContentSource()/]
		<text:index-body>
			<text:index-title text:style-name="Sect3"
				text:name="Table of Contents2_Head">
				<text:p text:style-name="P7">Table of Contents</text:p>
			</text:index-title>
			['Purpose and Scope'.toch1(1)/]
				['Scope'.toch2(1,1)/]
				['Purpose'.toch2(1,2)/]
				['Exchange Partners'.toch2(1,3)/]
				['Interactions'.toch2(1,4)/]
			['List of Artifacts'.toch1(2)/]
			['XML Schemas'.toch1(3)/]
			['Subset Schema'.toch2(3,1)/]
			['Constraint Schema'.toch2(3,2)/]
			['Extension Schema'.toch2(3,3)/]
			['Exchange Schema'.toch2(3,4)/]
			['Additional Provisions'.toch1(4)/]
			['Additional Property Definitions'.toch2(4,1)/]
				[for(schema:Package|schemas)]
					[comment]
					[schema.getTargetNamespace().toch3(4,1,schemas->indexOf(schema))/]
					[/comment]
					[(schema.displayAppliedStereotype()+schema.name).toch3(4,1,schemas->indexOf(schema))/]
				[/for]
			['Minimal Property Set'.toch2(4,2)/]
				[for(schema:Package|schemas)]
					[comment]
					[schema.getTargetNamespace().toch3(4,2,schemas->indexOf(schema))/]
					[/comment]
					[(schema.displayAppliedStereotype()+schema.name).toch3(4,2,schemas->indexOf(schema))/]
				[/for]
			['Additional Business Rules'.toch2(4,3)/]
			['Other Information'.toch2(4,4)/]
			['Samples'.toch1(5)/]
			['Sample XML Instances'.toch2(5,1)/]
			['Sample XSL Style Sheets'.toch2(5,2)/]
			['Development'.toch1(6)/]
			['Participants'.toch2(6,1)/]
			['Process'.toch2(6,2)/]
			['Development Artifacts'.toch2(6,3)/]
			['Testing and Conformance'.toch1(7)/]
			['Testing'.toch2(7,1)/]
			['Conformance'.toch2(7,2)/]
			['Feedback'.toch1(8)/]
		</text:index-body>
	</text:table-of-content>
	[pageBreak()/]
[/template]
[comment]
	ExchangePartnerNames:Sequence(OclAny)=mpdComponent.getValues(provmpdStereotype,'ExchangePartnerName');
	ExchangePatternTexts:Sequence(OclAny)=mpdComponent.getValues(provmpdStereotype,'ExchangePatternText');
[/comment]
[template public purposeAndScope(mpdx : Model,mpdComponent:Component){
	provmpdStereotype:Stereotype=mpdComponent.getAppliedStereotypes()->select(s|s.name=getProvisioningMpdStereotypeName())->asSequence()->first();
	PurposeTexts:String=mpdComponent.getStringValue('PurposeText');
	ScopeText:String=mpdComponent.getStringValue('descriptionText');
	ExchangePartnerNames:Sequence(String)=mpdComponent.getValues('ExchangePartnerName').oclAsType(LiteralString).value;
	ExchangePatternTexts:Sequence(String)=mpdComponent.getValues('ExchangePatternText').oclAsType(LiteralString).value;
}]
[comment]
	[startP()/]This release of the IEPD is
			based on the NIEM IEPD Template Requirements document and contains
			written documentation, schemas, instance documents, style sheet, a
			mapping spreadsheet, and additional documentation.
[mpdx.name/],[mpdComponent.name/],[PurposeTexts/],[ExchangePatternTexts/]	,[ExchangePartnerNames/]		

			[endP()/]
[/comment]
	['Scope'.contenth2(1,1,'')/]
		[indentp()/][ScopeText.displayHtml()/][indentpEnd()/]	
	['Purpose'.contenth2(1,2,'')/]
		[indentp()/][PurposeTexts.displayHtml()/][indentpEnd()/]	
	
	['Exchange Partners'.contenth2(1,3,'')/]
		[ul()/]
			[ExchangePartnerNames.displayHtml().li()/]
		[ulEnd()/]	
	['Interactions'.contenth2(1,4,'')/]
		[indentp()/][ExchangePatternTexts.displayHtml()/][indentpEnd()/]	
	
	[comment]
		[file('stdout',true)]mpdComponent [mpdComponent.name/][/file]
		[file('stdout',true)]provmpdStereotype [provmpdStereotype.toString()/][/file]
		[file('stdout',true)]provmpdx [mpdComponent.getStereotypeApplication(provmpdStereotype).toString()/][/file]
		[file('stdout',true)]provmpd [PurposeTexts.toString()/][/file]
	PurposeTexts:Sequence(String)=mpdComponent.getValue(provmpdStereotype,'PurposeText').oclAsType(Sequence(String));
	provmpd:niemprovision::mpd=mpdComponent.getStereotypeApplication(provmpdStereotype).oclAsType(niemprovision::mpd);
		[mpdComponent.getStereotypeApplication(provmpdStereotype).toString()/]
		[provmpd.toString()/]
		[provmpd.PurposeText/]
		[/comment]			
[/template]
[template public fileReference(mpdfile:mpdcat::FileType)]
	[tdNormalStart()/]<text:a xlink:type="simple" xlink:href=".[mpdfile.relativePathName/]">[mpdfile.relativePathName/]</text:a>[tdEnd()/]
[/template]
[template public listOfArtifacts(mpdCatalog:mpdcat::CatalogType)]
	[startP()/]The following artifacts are included in the MPD:[endP()/]
	[comment][emptyP()/][/comment]
	[startTable('listOfArtifacts')/]
		[startTableRow()/]['Artifact File Name'.tdBold()/]['Purpose'.tdBoldB()/][endTableRow()/]
		[for(mpdfile:mpdcat::FileType|
			mpdCatalog.artifact->select(eObject:EObject|eObject.oclIsKindOf(mpdcat::FileType)).oclAsType(mpdcat::FileType))]
			[startTableRow()/]
				[mpdfile.fileReference()/]
				[tdNormalBStart()/]
					[if((mpdfile.descriptionText<>null) and (mpdfile.descriptionText<>''))][mpdfile.descriptionText.displayHtml()/]
					[else]
						[if((mpdfile.purposeURI<>null) and not(mpdfile.purposeURI.oclIsUndefined()))][mpdfile.purposeURI.getPurposeDescription()/]
						[else](unspecified)
						[/if]
					[/if]
				[tdEnd()/]
			[endTableRow()/]
		[/for]
	[endTable()/]
[/template]
[template public xmlSchemas(mpd : Model)]
	[startP()/]This
			section references the XML Schemas used to define the Structured
			Payload.[endP()/]
	[comment][emptyP()/][/comment]
[/template]
[template public schemaTable(mpdCatalog:mpdcat::CatalogType,purposeURI:String)]
	[startTable('schemaTable')/]
		[startTableRow()/]['Artifact File Name'.tdBold()/]['Purpose'.tdBoldB()/][endTableRow()/]
		[for(mpdfile:mpdcat::FileType|mpdCatalog.artifact
			->select(eObject:EObject|
				eObject.oclIsKindOf(mpdcat::FileType)
				and (eObject.oclAsType(mpdcat::FileType).purposeURI=purposeURI)
				).oclAsType(mpdcat::FileType))]
			[startTableRow()/][mpdfile.fileReference()/]
				[if((mpdfile.descriptionText<>null) and (mpdfile.descriptionText<>''))][mpdfile.descriptionText.displayHtml().tdNormalB()/]
				[else][mpdfile.purposeURI.getPurposeDescription().tdNormalB()/]
				[/if]
			[endTableRow()/]
		[/for]
	[endTable()/]
[/template]
[template public subsetSchemas(mpdCatalog:mpdcat::CatalogType)][mpdCatalog.schemaTable('http://reference.niem.gov/niem/resource/mpd/lexicon/1.0/purpose#subset-schema')/][/template]
[template public extensionSchemas(mpdCatalog:mpdcat::CatalogType)][mpdCatalog.schemaTable('http://reference.niem.gov/niem/resource/mpd/lexicon/1.0/purpose#extension-schema')/][/template]
[template public constraintSchemas(mpdCatalog:mpdcat::CatalogType)][mpdCatalog.schemaTable('http://reference.niem.gov/niem/resource/mpd/lexicon/1.0/purpose#constraint-schema')/][/template]
[template public documentSchemas(mpdCatalog:mpdcat::CatalogType)][mpdCatalog.schemaTable('http://reference.niem.gov/niem/resource/mpd/lexicon/1.0/purpose#exchange-schema')/][/template]
[template public sampleXmlInstances(mpdCatalog:mpdcat::CatalogType)]
	[startP()/]
This section provides or references sample XML Instances (xml files) for the IEP.  It should include samples of both simple and complex information exchanges.  Realistic data should be used (although data should be "sanitized" to omit actual identifying information that would violate privacy).  
	[endP()/]
	[mpdCatalog.sampleXmlInstancesTable()/]
[/template]
[template public sampleXmlInstancesTable(mpdCatalog:mpdcat::CatalogType)]
	[mpdCatalog.schemaTable('http://reference.niem.gov/niem/resource/mpd/lexicon/1.0/purpose#sample-instance')/]
[/template]

[template public validationResultsTable()]
	[startP()/]
	[bold()/]Validation Results[spanEnd()/]
	[endP()/]
		[for(annotation:String|getValidationResults())]
			[startP()/]
				[bold()/]Model Element:[spanEnd()/][annotation.getValidationElement()/]
			[endP()/]
				[ul()/]
					[liStart()/][bold()/]Severity:[spanEnd()/][annotation.getValidationSeverity()/][liEnd()/]
					[liStart()/][bold()/]Abbreviation:[spanEnd()/][annotation.getValidationAbbreviation()/][liEnd()/]
					[liStart()/][bold()/]Message:[spanEnd()/][annotation.getValidationMessage().displayHtml()/][liEnd()/]
				[ulEnd()/]
		[/for]
[comment]
	[startTable('validationTable')/]
		[startTableRow()/]['Model Element'.tdBold()/]['Severity'.tdBoldB()/]['Abbreviation'.tdBoldB()/]['Message'.tdBoldB()/][endTableRow()/]
		[for(annotation:String|getValidationResults())]
			[startTableRow()/]
				[annotation.getValidationElement().oclAsType(NamedElement).name.tdNormal()/]
				[annotation.getValidationElement().tdNormal()/]
				[annotation.getValidationSeverity().tdNormal()/]
				[annotation.getValidationAbbreviation().tdNormal()/]
				[annotation.getValidationMessage().tdNormal()/]
			[endTableRow()/]
		[/for]
	[endTable()/]
[/comment]
[/template]
[template public sampleXslStyleSheets(mpdCatalog:mpdcat::CatalogType)]
	[startP()/]
This section provides or references sample Style Sheets (xsl files) that could be used in conjunction with the MPD.  
These style sheets could be used to transform the xml instance into human readable format such as HTML or text; 
to transform the xml instance into a different xml instance (such as a different GJXDM version or another XML standard); 
or to transform the xml instance into a different structured format, such as a legacy "dot-slash" delimited format.  
The section should also include sample transform output.  	
	[endP()/]
	[mpdCatalog.schemaTable('http://reference.niem.gov/niem/resource/mpd/lexicon/1.0/purpose#transformation')/]
[/template]

[template public developmentArtifacts(mpdCatalog:mpdcat::CatalogType)]
	[startP()/]
This section provides or references artifacts (other than the XML schemas and samples) created during the development process.  
These artifacts can help an implementer better understand the MPD, and can be re-used if the MPD Documentation is later modified, extended, or re-purposed.  
Organizations (or groups of organizations) developing MPD Documentation using established processes or methodologies 
may identify specific development artifacts to be included in this section, some of which may be mandatory.
Development artifacts can include:
	[endP()/]
		[ul()/]
			['Business scenarios'.li()/]
			['High-level model of business data and relationships'.li()/]
			['Detailed models of business data and relationships; UML Class Diagrams are strongly recommended as a consistent method for graphically depicting the domain model'.li()/]
			['Spreadsheet of business data requirements'.li()/]
			['Source paper documents or requirements specifications (e.g., paper Incident Report)'.li()/]
			['Spreadsheet of business data to GJXDM component mapping'.li()/]
			['Subset Schema Generation Tool (SSGT) Want Lists'.li()/]
		[ulEnd()/]	


	[startTable('developmentArtifacts')/]
		[startTableRow()/]['Artifact File Name'.tdBold()/]['Purpose'.tdBoldB()/][endTableRow()/]
		[for(mpdfile:mpdcat::FileType|mpdCatalog.artifact
			->select(eObject:EObject|
				eObject.oclIsKindOf(mpdcat::FileType)
				and (not(eObject.oclAsType(mpdcat::FileType).purposeURI.endsWith('-schema')))
				).oclAsType(mpdcat::FileType))]
			[startTableRow()/][mpdfile.fileReference()/][mpdfile.purposeURI.getPurposeDescription().tdNormalB()/][endTableRow()/]
		[/for]
	[endTable()/]
[/template]

[template public additionalProvisions(mpd : Model)]
	[startP()/]This
			section provides additional definitions, business rules, and other
			information required to implement the MPD over and above that
			specified in the XML Schemas.[endP()/]
[/template]
[template public additionalPropertyDefinition(schema : Package,chapter:Integer,section:Integer,subsection:Integer,documentedPackages:Collection(Package)){
	classifiers:Sequence(Classifier)=schema.getPimClassifiers();
	subsets:Package=schema.getSubsetsPackage();	
}]
[comment]
	[schema.getTargetNamespace().contenth3(chapter,section,subsection,schema.elementAnchorBookmark())/]
[/comment]
	[(schema.displayAppliedStereotype()+schema.name).contenth3(chapter,section,subsection,schema.elementAnchorBookmark())/]
	[schema.displayTagValues()/]

	[if(not(subsets.oclIsUndefined()))]
		[indentp()/][bold()/]Subsets: [spanEnd()/][subsets.name/]
			[subsets.genUmlElementComments()/]
		[indentpEnd()/]
	[/if]
	[schema.comments()/]	
	[schema.diagrams()/]
	[for(classifier:Classifier|classifiers)]
		[classifier.classifierDetail(chapter,section,subsection,classifiers->indexOf(classifier),documentedPackages)/]
	[/for]
[/template]
[comment]
[query public displayValueSpecification(value:LiteralString):String=value.value/]
[query public displayValueSpecification(value:LiteralBoolean):String=value.value/]
[query public displayValueSpecification(value:LiteralInteger):String=value.value/]
[query public displayValueSpecification(value:InstanceValue):String=value.instance.displayInstanceSpecification()/]
[query public displayInstanceSpecification(instance:InstanceSpecification):String=instance.toString()/]
[query public displayInstanceSpecification(instance:EnumerationLiteral):String=instance.name/]
[/comment]

[template public diagrams(part:Namespace){
	diagrams:Sequence(Diagram)=part.ownedDiagram
		->asSequence()->sortedBy(a|a.name);
}]
	[diagrams.diagram()/]
[/template]
[template public diagram(diagram:Diagram)]
		[comment precede artifact with comments if any /]
		[diagram.genUmlElementCommentsIndented()/]
		[if (diagram.ownedComment->isEmpty())][emptyP()/][/if]
		[pStart()/][diagram.createDiagramImage()/][pEnd()/]
			[file('../temp~/master-document/META-INF/manifest.xml',true, 'UTF-8')]
		 <manifest:file-entry manifest:media-type="image/png" manifest:full-path="Pictures/[diagram.name/].png"/>
			[/file]
[/template]

[comment]
	subsets:Sequence(Classifier)=generalizations->select(g:Generalization|g.isSubsets()).general->sortedBy(s:Classifier|s.umlName())->asSequence();	
	realizations:Set(Realization)=stereotype.getRealizations();	
	realizations:Set(Realization)=stereotype.clientDependency->select(d:Dependency|d.oclIsKindOf(Realization)).oclAsType(Realization)->asSet();	
	subsets:Sequence(Classifier)=realizations->select(g:Realization|g.isSubsets()).supplier.oclAsType(Classifier)->sortedBy(s:Classifier|s.umlName())->asSequence();	
	realizations:Set(Realization)=stereotype.getRealizations();	
	bases:Sequence(Classifier)=stereotype.getBases();	
	associations:Sequence(Association)=stereotype.getAssociations()->sortedBy(s:Association|s.name())->asSequence();	
	constraints:Sequence(Constraint)=stereotype.ownedRule->sortedBy(s:Constraint|s.umlName())->asSequence();
[/comment]
[template public classifierDetail(stereotype : Classifier,chapter:Integer,section:Integer,subsection:Integer,subsubsection:Integer,documentedPackages:Collection(Package)){
	allSubtypes:Sequence(Classifier)=stereotype.allSubtypes()
		->sortedBy(s:Classifier|s.umlName())->asSequence();
	ownedProperties:Sequence(Property)=stereotype.getOwnedProperty()->select(p:Property|p.upper<>0)->sortedBy(s:Property|s.name())->asSequence();	
	redefinedProperties:Sequence(Property)=stereotype.getOwnedProperty()->select(p:Property|p.isPropertyRedefinition())->sortedBy(s:Property|s.name())->asSequence();	
	usages:Sequence(Usage)=stereotype.getOwnedProperty().clientDependency->select(p:Dependency|p.oclIsKindOf(Usage)).oclAsType(Usage)->sortedBy(s:Usage|s.client.name()->asSequence()->first())->asSequence();	
	generalizations:Set(Generalization)=stereotype.getGeneralizations();	
	bases:Sequence(Classifier)=stereotype.getBases();	
	subsets:Classifier=stereotype.getSubsets();	
	roleOfs:Sequence(Classifier)=generalizations->select(g:Generalization|g.isRoleOf()).general->sortedBy(s:Classifier|s.umlName())->asSequence();	
	augmentationAppliesTo:Sequence(Classifier)=generalizations->select(g:Generalization|g.isAugments()).general->asSequence();	
	augmentations:Sequence(Classifier)=
		generalizations->select(g|not(g.specific.isAugmentationType()))
		.general->select(g:Classifier|g.isAugmentationType())->sortedBy(s:Classifier|s.umlName())->asSequence();	
	metadatas:Sequence(Classifier)=generalizations.general->select(g:Classifier|g.isMetadataType())->sortedBy(s:Classifier|s.umlName())->asSequence();	
	allBases:Sequence(Classifier)=stereotype.getAllBases()->sortedBy(s:Classifier|s.umlName())->asSequence();
	niemName:String=stereotype.getNIEMName();
	referenceModel:Package=stereotype.getNearestPackage().getSubsetsPackage();
	referenceQualifiedName:String=referenceModel.qualifiedName;
	niemNameMessage:String='Subset Type with NIEM name '+niemName+' has no Reference Model counterpart in '
		+referenceQualifiedName;
}]
	[comment]decompose generalizations into extends (base), subsets, augmentation, metatype, other?(in case we missed something) 
	associations:Sequence(Association)=stereotype.getAssociations()->sortedBy(s:Association|s.name)->asSequence();	
	allRoleOfs:Sequence(Classifier)=roleOfs->asSet()->union(roleOfs.getAllParentClassifiers()->flatten()->asSet())->asSet()->sortedBy(s:Classifier|s.name)->asSequence();	
	allSubsets:Sequence(Classifier)=subsets->asSet()->union(subsets.getAllParentClassifiers()->flatten()->asSet())->asSet()->sortedBy(s:Classifier|s.name)->asSequence();	
	allAugmentations:Sequence(Classifier)=augmentations->asSet()->union(augmentations.getAllParentClassifiers()->flatten()->asSet())->asSet()->sortedBy(s:Classifier|s.name)->asSequence();	
	allMetatypes:Sequence(Classifier)=metadatas->asSet()->union(metadatas.getAllParentClassifiers()->flatten()->asSet())->sortedBy(s:Classifier|s.name)->asSequence();	
	allBases:Sequence(Classifier)=bases->asSet()->union(bases.getAllParentClassifiers()->flatten()->asSet())->asSet()->asSequence();	
	allBases:Sequence(Classifier)=bases->union(bases.getAllParentClassifiers())->asSet()->sortedBy(s:Classifier|s.name)->asSequence();	
	allGeneralizations:Sequence(Classifier)=stereotype.allParents()->asSequence();	
	allSubsets:Sequence(Classifier)=subsets.getAllParentClassifiers()->sortedBy(s:Classifier|s.name)->asSequence();	
	allSubsets:Sequence(Classifier)=subsets->union(subsets.allParents())->sortedBy(s:Classifier|s.name)->asSequence();	
	allSubsets:Sequence(Classifier)=subsets->asSet()->union(subsets.getAllParentClassifiers()->flatten()->asSet())->sortedBy(s:Classifier|s.name)->asSequence();	
	[(stereotype.umlName()).contenth4(chapter,section,subsection,subsubsection,stereotype.elementAnchorBookmark())/]
	[/comment]
	[(stereotype.displayAppliedStereotype()+stereotype.name).contenth4(chapter,section,subsection,subsubsection,stereotype.elementAnchorBookmark())/]
	[stereotype._package.Package()/]
	[stereotype.isAbstract.isAbstract()/]
	[bases.niemGeneralization('Base',documentedPackages)/]
	[augmentationAppliesTo.niemGeneralization('Augmentation Applies To',documentedPackages)/]
	[augmentations.niemGeneralization('Augmentation',documentedPackages)/]
	[metadatas.niemGeneralization('Metadata',documentedPackages)/]
	[roleOfs.niemGeneralization('RoleOf',documentedPackages)/]
	[if(subsets.oclIsUndefined())]

		[if(not(stereotype.isPropertyHolder())
			and stereotype.getNearestPackage().isInformationModel()
			and not(stereotype.getNearestPackage().getSubsetsPackage().oclIsUndefined())
		)]
			[indentp()/][niemNameMessage.missing()/][indentpEnd()/]
		[/if]
	[else][subsets.niemGeneralization('Subsets',documentedPackages)/]
	[/if]
	['All bases'.niemAllGeneralizations(allBases,documentedPackages)/]

	[comment]	
	['All augmentations'.niemAllGeneralizations(allAugmentations,documentedPackages)/]
	['All metatypes'.niemAllGeneralizations(allMetatypes,documentedPackages)/]
	['All roleOfs'.niemAllGeneralizations(allRoleOfs,documentedPackages)/]
	['All subsets'.niemAllGeneralizations(allSubsets,documentedPackages)/]
				[(stereotype.qualifiedName()+'.Constraints').indentTable()/]
					[for(constraint:Constraint|stereotype.ownedRule)]
						[constraint.constraintRow()/]
					[/for]
				[indentTableEnd()/]
	[/comment]
	
	[if(allSubtypes->notEmpty())]
		['All Specializations'.paragraph()/]
			[ul()/]
			[for(subtype:Classifier|allSubtypes)]
				[liStart()/][subtype.umlTypeReference(documentedPackages)/][liEnd()/]
			[/for]
			[ulEnd()/]
		[comment]
			[indentp()/]
			[for(subtype:Classifier|allSubtypes)separator(',')]
				[subtype.umlTypeReference(documentedPackages)/]
			[/for]
			[indentpEnd()/]
		[/comment]
		[comment][emptyP()/][/comment]
	[/if]
	[stereotype.displayTagValues()/]
	['Description'.paragraph()/]
	[indentp()/][stereotype.genUmlElementComments()/][indentpEnd()/]
		[comment][emptyP()/][/comment]
		[if(ownedProperties->notEmpty())]
			['Attributes'.paragraph()/]
			[ul()/]
				[for(attribute:Property|ownedProperties)]
					[attribute.masterStructuralFeatureRow(documentedPackages)/]
				[/for]
			[ulEnd()/]
			[comment]
			[(stereotype.qualifiedName()+'.Attributes').indentTable()/]
				[for(attribute:Property|ownedProperties)]
					[attribute.structuralFeatureRow(documentedPackages)/]
				[/for]
			[indentTableEnd()/]
			[/comment]
			[comment][emptyP()/][/comment]
		[/if]
		[comment]
		[if((associations<>null) and associations->notEmpty())]
			['Associations'.paragraph()/]
			[(stereotype.qualifiedName()+'.Associations').indentTable()/]
				[for(association:Association|associations)]
					[association.associationRow(documentedPackages)/]
				[/for]
			[indentTableEnd()/]
			[comment][emptyP()/][/comment]
		[/if]		
		[/comment]

		[if(stereotype.oclIsKindOf(Enumeration))]
			['Enumeration Literals'.paragraph()/]
			[ul()/]
				[for(attribute:EnumerationLiteral|stereotype.oclAsType(Enumeration).ownedLiteral->sortedBy(s|s.umlName()))]
					[attribute.enumLiteralRow()/]
				[/for]
			[ulEnd()/]
			[comment]
			[(stereotype.qualifiedName()+'.EnumerationLiterals').indentTable()/]
				[for(attribute:EnumerationLiteral|stereotype.oclAsType(Enumeration).ownedLiteral->sortedBy(s|s.umlName()))]
					[attribute.enumLiteralRow()/]
				[/for]
			[indentTableEnd()/]
			[/comment]
			[comment][emptyP()/][/comment]
		[comment][emptyP()/][/comment]
		[/if]
		[comment]		
		[if((constraints<>null) and constraints->notEmpty())]
			['Constraints'.paragraph()/]
			[ul()/]
					[for(constraint:Constraint|stereotype.ownedRule)]
						[constraint.constraintRow()/]
					[/for]
			[ulEnd()/]
		[/if]		
		
		[if(redefinedProperties->notEmpty())]
		[if(subsets->notEmpty())]
		[/comment]
		[if(not(subsets.oclIsUndefined()))]
			['Subset Traceability'.paragraph()/]
			[(stereotype.qualifiedName()+'.Subset').indentTable()/]
				[for(target:Property|redefinedProperties)]
								[target.redefinitionRow(documentedPackages)/]
				[/for]
				[comment] check for additions [/comment]
				[for(attribute:Property|ownedProperties->select(p:Property|not(p.isPropertyRedefinition())))]
					[attribute.notRedefinitionRow(documentedPackages)/]
				[/for]
				[comment] check for enumerations [/comment]
				[if(stereotype.oclIsKindOf(Enumeration))]
					[for(enumeration:EnumerationLiteral|stereotype.oclAsType(Enumeration).ownedLiteral->sortedBy(s|s.umlName()))]
						[enumeration.enumerationAddedRow(subsets)/]
					[/for]
					[for(enumeration:EnumerationLiteral|
						subsets
						->select(s:Classifier|s.oclIsKindOf(Enumeration)).oclAsType(Enumeration)
						.ownedLiteral->sortedBy(s|s.name()))]
						[enumeration.enumerationRemovedRow(stereotype.oclAsType(Enumeration))/]
					[/for]
				[/if]		
			[indentTableEnd()/]
		[/if]		
		[if(usages->notEmpty())]
			['External Namespace Usage'.paragraph()/]
			[(stereotype.qualifiedName()+'.Usage').indentTable()/]
				[for(target:Usage|usages)]
								[target.traceabilityRow(documentedPackages)/]
				[/for]
			[indentTableEnd()/]
		[/if]		
[/template]		
[template public masterStructuralFeatureRow(sf : Property,documentedPackages:Collection(Package))]
	[liStart()/]
		[sf.masterStructuralFeatureAnchor(documentedPackages)/]
		[pEnd()/][sf.displayTagValues()/][pStart()/]
		[comment][newP()/][/comment]
			[sf.genUmlElementComments()/]
			[if(sf.derivedValue()->notEmpty())]
				[pEnd()/]['derived value'.paragraph()/][pStart()/]
				[for(constraint:Constraint|sf.derivedValue()->sortedBy(s|s.name))]
					[constraint.constraintContent()/]
				[/for]
			[/if]
		
	[liEnd()/]
[/template]
[template public masterStructuralFeatureAnchor(sf : Property,documentedPackages:Collection(Package))]
	[sf.displayAppliedStereotype()/] [if(sf.isDerived)]/[/if][sf.elementAnchor()/][sf.structuralFeatureBase(documentedPackages)/]
[/template]

[template public additionalPropertyDefinitions(mpd : Model,chapter:Integer,section:Integer,schemas:Sequence(Package))]
	[comment]For each of the schemas, provide a table for the type, feature, documentation, 
		how it is related to reference schemas
	[/comment]
	[for(schema:Package|schemas)]
		[schema.additionalPropertyDefinition(chapter,section,schemas->indexOf(schema),schemas)/]
	[/for]
[/template]
[template public minimalPropertySet(schema : Package,chapter:Integer,section:Integer,subsection:Integer,documentedPackages:Collection(Package)){
	classifiers:Sequence(Classifier)=schema.getPimClassifiers();
}]
[comment]
	[schema.getTargetNamespace().contenth3(chapter,section,subsection,'')/]
[/comment]
	[(schema.displayAppliedStereotype()+schema.name).contenth3(chapter,section,subsection,'')/]
	[for(classifier:Classifier|classifiers)]
		[classifier.classifierMinimalDetail(chapter,section,subsection,classifiers->indexOf(classifier),documentedPackages)/]
	[/for]
[/template]
[template public classifierMinimalDetail(stereotype : Classifier,chapter:Integer,section:Integer,subsection:Integer,subsubsection:Integer,documentedPackages:Collection(Package)){
	ownedProperties:Sequence(Property)=stereotype.getOwnedProperty()
		->select(p:Property|p.lower<>0)
		->sortedBy(s:Property|s.umlName())->asSequence();	
}]
	[if(ownedProperties->notEmpty())]
		[(stereotype.umlName()).contenth4(chapter,section,subsection,subsubsection,'')/]
		['Attributes'.paragraph()/]
		[comment]
		[(stereotype.qualifiedName()+'.MinimalDetail').indentTable()/]
		[indentTableEnd()/]
		[/comment]
		[ul()/]
			[for(attribute:Property|ownedProperties)]
				[attribute.structuralFeatureRow(documentedPackages)/]
			[/for]
		[ulEnd()/]
		[comment][emptyP()/][/comment]
	[/if]
		
[/template]		

[template public minimalPropertySets(mpd : Model,chapter:Integer,section:Integer,schemas:Sequence(Package))]
	[for(schema:Package|schemas)]
		[schema.minimalPropertySet(chapter,section,schemas->indexOf(schema),schemas)/]
	[/for]
[/template]
[template public additionalBusinessRules(mpd : Model)]
	[startP()/]This section identifies business rules associated with the MPD.  
It only specifies business rules associated with the MPD, not business rules internal to a sending or receiving system.  Some examples are:
		[ul()/]
			[liStart()/]Cross-field validation  e.g., if optional property A is provided, optional property B must also be provided.[liEnd()/]
			[liStart()/]Type substitution  if type substitution is to be used in XML Instances, what type is substituted and under what circumstances.[liEnd()/]
		[ulEnd()/]

		[comment]Get constraints applied to Classifiers[/comment]
		[ul()/]
			[for(constraint:Constraint|mpd.allClassifierConstraints())]
				[liStart()/][constraint.businessRule()/][liEnd()/]
			[/for]
		[ulEnd()/]
	[endP()/]
[/template]
[template public businessRule(constraint : Constraint){
	specification:OpaqueExpression=constraint.specification.oclAsType(OpaqueExpression);
	expressionBody:Sequence(String)=specification._body;
}]
	[constraint.name/] Constrains [constraint.constrainedElement.oclAsType(NamedElement).qualifiedName/].  [constraint.ownedComment._body/].
	Expression: [italic()/][expressionBody/][spanEnd()/]
[/template]
[template public otherInformation(mpd : Model)]
	[startP()/]This section provides any other information not covered by the other subsections of this section.[endP()/]
[/template]
[template public samples(mpd : Model)]
	[startP()/]This
			section provides samples that would be useful to an implementer to
			facilitate understanding of the MPD.[endP()/]
[/template]
[comment]
	ASName:String=mpdComponent.getStringValue(provmpdStereotype,'ASName').toString();
	ASAddressText:String=mpdComponent.getStringValue(provmpdStereotype,'ASAddressText').toString();
	ASWebSiteURL:String=mpdComponent.getStringValue(provmpdStereotype,'ASWebSiteURL').toString();
	provmpdStereotype:Stereotype=mpdComponent.getAppliedStereotypes()->select(s|s.name=getProvisioningMpdStereotypeName())->asSequence()->first();
	ASNameTest:String=mpdComponent.getStringValue(provmpdStereotype,'ASName');
	ASAddressTextTest:String=mpdComponent.getStringValue(provmpdStereotype,'ASAddressText');
	ASWebSiteURLTest:String=mpdComponent.getStringValue(provmpdStereotype,'ASWebSiteURL');
[/comment]
[template public development(mpdx : Model,mpdComponent:Component){
	ASName:String=mpdComponent.getStringValue('ASName');
	ASAddressText:String=mpdComponent.getStringValue('ASAddressText');
	ASWebSiteURL:String=mpdComponent.getStringValue('ASWebSiteURL');
}]

	[startP()/]This
			section describes the people, process, and artifacts used in the
			development of the MPD Documentation.[endP()/]
	[comment][emptyP()/][/comment]		
	[startP()/][bold()/]ASName[spanEnd()/] [ASName/][endP()/]
	[startP()/][bold()/]ASAddressText[spanEnd()/] [ASAddressText/][endP()/]
	[startP()/][bold()/]ASWebSiteURL[spanEnd()/] [ASWebSiteURL/][endP()/]
	
[/template]
[comment]
	provmpdStereotype:Stereotype=mpdComponent.getAppliedStereotypes()->select(s|s.name=getProvisioningMpdStereotypeName())->asSequence()->first();
[/comment]
[template public participants(mpdx : Model,mpdComponent:Component){
	POCs:Sequence(InstanceSpecification)=mpdComponent.getInstanceValues('POC');
}]
[startP()/]
This section lists the organizations and persons who supported and/or participated in the development of the MPD Documentation.  
It should include contact information (when permission to release that information has been given); 
authoritative organizations that supported the development; and organizations that funded the development.  
Key roles of individuals and organizations should be noted.
[endP()/]
	[startTable('participants')/]
		[startTableRow()/]['Name'.tdBold()/]['Email'.tdBoldB()/]['Telephone'.tdBoldB()/][endTableRow()/]
		[for(poc:InstanceSpecification|POCs)]
			[startTableRow()/]
				[poc.getStringValue('POCName').displayHtml().tdNormal()/]
				[poc.getStringValue('POCEmail').displayHtml().tdNormal()/]
				[poc.getStringValue('POCTelephone').displayHtml().tdNormal()/]
			[endTableRow()/]
		[/for]
	[endTable()/]

[/template]
[template public process(mpd : Model)]
	[startP()/]
		[comment]
		[redFont()/]TODO from model[spanEnd()/].
		[/comment]
This section describes or references the process actually used to develop the MPD Documentation.  
It should include meeting dates and locations.
	[endP()/]
[/template]
[template public testingAndConformance(mpd : Model)]
	[startP()/]
This section provides information on any testing or conformance activities.  
The information in this section will provide additional assurance to potential users that the IEP Documentation is likely to be free from defects, 
meets the business requirements, and results in NIEM-conformant Information Exchange Packages.
[endP()/]
[/template]
[template public redFontSpan(text:String)][startP()/][redFont()/][text/][spanEnd()/].[endP()/][/template]
[template public testing(mpd : Model)]
	[startP()/]
This section provides information on any testing that was performed to verify that the MPD Documentation has no technical defects 
and that it meets the business requirements for the information exchange.  
An example would be a report from two organizations that developed or prototyped the information exchange 
and successfully tested it with a number of XML instances, including normal data, boundary conditions, exceptions, and invalid data.
[endP()/]
	[comment]
	['TODO from catalog and introspection on test artifacts'.redFontSpan()/]
	[/comment]
[/template]
[template public conformance(mpd : Model , mpdCatalog:mpdcat::CatalogType)]
	[startP()/]
This section provides information on any activities performed to verify that Information Exchange Packages (including the sample XML Instances) 
resulting from application of the MPD Documentation conform to the NIEM.  
An example would be an independent review by a knowledgeable and respected person or organization making a determination of NIEM conformance.
[endP()/]
	[mpdCatalog.sampleXmlInstancesTable()/]
	[startP()/]
[endP()/]
	[validationResultsTable()/]
	[comment]
	['TODO from model validation'.redFontSpan()/]
	[/comment]
[/template]
[template public feedback(mpd : Model)]
	[startP()/]
This section includes any lessons learned, suggestions, or recommendations that resulted from the development of the MPD Documentation.  
It should also include any recommended additions or changes to NIEM.  
The experiences and feedback from development of this MPD Documentation could significantly benefit future MPD Documentation development.
[endP()/]
	[comment]
	['TODO'.redFontSpan()/]
	[/comment]
[/template]
[template public contents(mpdx : Model,mpdCatalog:mpdcat::CatalogType,schemas:Sequence(Package) , mpdComponent:Component)]
	<text:section text:style-name="Sect2" text:name="Section2">
['Purpose and Scope'.log()/]	
		['Purpose and Scope'.contenth1break(1,'')/][mpdx.purposeAndScope(mpdComponent)/]
['List of Artifacts'.log()/]	
	
		['List of Artifacts'.contenth1(2,'')/][mpdCatalog.listOfArtifacts()/]
		
['XML Schemas'.log()/]	
		['XML Schemas'.contenth1(3,'')/][mpdx.xmlSchemas()/]
['Subset Schema'.log()/]	
		['Subset Schema'.contenth2(3,1,'')/][mpdCatalog.subsetSchemas()/]
['Constraint Schema'.log()/]	
		['Constraint Schema'.contenth2(3,2,'')/][mpdCatalog.constraintSchemas()/]
['Extension Schema'.log()/]	
		['Extension Schema'.contenth2(3,3,'')/][mpdCatalog.extensionSchemas()/]
['Exchange Schema'.log()/]	
		['Exchange Schema'.contenth2(3,4,'')/][mpdCatalog.documentSchemas()/]
['Additional Provisions'.log()/]	
		['Additional Provisions'.contenth1(4,'')/][mpdx.additionalProvisions()/]
['Additional Property Definitions'.log()/]	
		['Additional Property Definitions'.contenth2(4,1,'')/][mpdx.additionalPropertyDefinitions(4,1,schemas)/]
['Minimal Property Set'.log()/]	
		['Minimal Property Set'.contenth2(4,2,'')/][mpdx.minimalPropertySets(4,2,schemas)/]
['Additional Business Rules'.log()/]	
		['Additional Business Rules'.contenth2(4,3,'')/][mpdx.additionalBusinessRules()/]
['Other Information'.log()/]	
		['Other Information'.contenth2(4,4,'')/][mpdx.otherInformation()/]
['Samples'.log()/]	
		['Samples'.contenth1(5,'')/][mpdx.samples()/]
['Sample XML Instances'.log()/]	
		['Sample XML Instances'.contenth2(5,1,'')/][mpdCatalog.sampleXmlInstances()/]
['Sample XSL Style Sheets'.log()/]	
		['Sample XSL Style Sheets'.contenth2(5,2,'')/][mpdCatalog.sampleXslStyleSheets()/]
['Development suppressed'.log()/]	
		['Development'.contenth1(6,'')/][mpdx.development(mpdComponent)/]

['Participants'.log()/]	
		['Participants'.contenth2(6,1,'')/][mpdx.participants(mpdComponent)/]
['Process'.log()/]	
		['Process'.contenth2(6,2,'')/][mpdx.process()/]
['Development Artifacts'.log()/]	
		['Development Artifacts'.contenth2(6,3,'')/][mpdCatalog.developmentArtifacts()/]
['Testing and Conformance'.log()/]	
		['Testing and Conformance'.contenth1(7,'')/][mpdx.testingAndConformance()/]
['Testing'.log()/]	
		['Testing'.contenth2(7,1,'')/][mpdx.testing()/]
['Conformance'.log()/]	
		['Conformance'.contenth2(7,2,'')/][mpdx.conformance(mpdCatalog)/]
['Feedback'.log()/]	
		['Feedback'.contenth1(8,'')/][mpdx.feedback()/]
['Done'.log()/]	
		
	</text:section>
[/template]
[template public odtBody(mpdx : Model, mpdCatalog:mpdcat::CatalogType , mpdComponent:Component)]
	<office:body>
		[mpdx.odtText(mpdCatalog,mpdComponent)/]
	</office:body>
[/template]
[template public odtText(mpdx : Model, mpdCatalog:mpdcat::CatalogType , mpdComponent:Component){
	schemas:Sequence(Package)=mpdx.getPimSchemas()->sortedBy(s:Package|s.getTargetNamespace());
}]
	[startOfficeText()/]
['startHeader'.log()/]	
		[mpdCatalog.header()/]
['tableOfContents'.log()/]	
		[mpdx.tableOfContents(schemas)/]
['contents'.log()/]	
		[mpdx.contents(mpdCatalog,schemas,mpdComponent)/]
	</office:text>
[/template]

