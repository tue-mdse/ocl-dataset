[comment encoding = UTF-8 /]
[module OmgOdtRfpNiemDocument(
	'http://www.nomagic.com/magicdraw/UML/2.4.1',
	'http://www.eclipse.org/ocl/1.1.0/Ecore',
	'http://reference.niem.gov/niem/resource/mpd/catalog/1.0/',
	
	'http://www.eclipse.org/qvt/1.0/ImperativeOCL',
	'http://www.eclipse.org/xsd/2002/XSD',
	'http://www.eclipse.org/qvt/1.0.0/Operational/Expressions',
	'http://www.eclipse.org/emf/2002/Ecore'
	)/]
[comment]
Copyright Â© 2011, ModelDriven.org and Tom Digre, all rights reserved worldwide.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see http://www.gnu.org/licenses/gpl-3.0-standalone.html.

There are also commercial licenses available for this software.
Contact ModelDriven.org for more information.
[/comment]	
[import commonQuery/]
[import odtCommon/]
[import odtBoilerPlate/]
[import OmgOdtBoilerPlate/]

[template public OmgOdtRfpNiemDocument(rfpModel : Model)]
	[if(rfpModel.name.matches('.*RFP.*') or rfpModel.name.matches('.*RFC.*'))]
	[file('../temp~/'+getProjectName()+'/META-INF/manifest.xml',false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0">
 <manifest:file-entry manifest:media-type="application/vnd.oasis.opendocument.text" manifest:version="1.2" manifest:full-path="/"/>
 <manifest:file-entry manifest:media-type="" manifest:full-path="Configurations2/statusbar/"/>
 <manifest:file-entry manifest:media-type="" manifest:full-path="Configurations2/accelerator/current.xml"/>
 <manifest:file-entry manifest:media-type="" manifest:full-path="Configurations2/accelerator/"/>
 <manifest:file-entry manifest:media-type="" manifest:full-path="Configurations2/floater/"/>
 <manifest:file-entry manifest:media-type="" manifest:full-path="Configurations2/popupmenu/"/>
 <manifest:file-entry manifest:media-type="" manifest:full-path="Configurations2/progressbar/"/>
 <manifest:file-entry manifest:media-type="" manifest:full-path="Configurations2/menubar/"/>
 <manifest:file-entry manifest:media-type="" manifest:full-path="Configurations2/toolbar/"/>
 <manifest:file-entry manifest:media-type="" manifest:full-path="Configurations2/images/Bitmaps/"/>
 <manifest:file-entry manifest:media-type="" manifest:full-path="Configurations2/images/"/>
 <manifest:file-entry manifest:media-type="application/vnd.sun.xml.ui.configuration" manifest:full-path="Configurations2/"/>
 <manifest:file-entry manifest:media-type="image/png" manifest:full-path="Pictures/10000201000001410000004B109CF868.png"/>
 <manifest:file-entry manifest:media-type="" manifest:full-path="Pictures/"/>
 <manifest:file-entry manifest:media-type="application/binary" manifest:full-path="layout-cache"/>
 <manifest:file-entry manifest:media-type="text/xml" manifest:full-path="content.xml"/>
 <manifest:file-entry manifest:media-type="text/xml" manifest:full-path="styles.xml"/>
 <manifest:file-entry manifest:media-type="text/xml" manifest:full-path="meta.xml"/>
 <manifest:file-entry manifest:media-type="" manifest:full-path="Thumbnails/thumbnail.png"/>
 <manifest:file-entry manifest:media-type="" manifest:full-path="Thumbnails/"/>
 <manifest:file-entry manifest:media-type="text/xml" manifest:full-path="settings.xml"/>
 <manifest:file-entry manifest:media-type="application/rdf+xml" manifest:full-path="manifest.rdf"/>
	[/file]
[rfpModel.odtNiemMasterContent()/]
	[comment]
	[if(rfpModel.name.endsWith('RFP') or rfpModel.name.endsWith('RFC'))]
	['NIEM UML Specification'.odtNiemMasterMeta()/]
[template public odtNiemMasterMeta(title:String)]
	[file ('../temp~/'+getProjectName()+'/meta.xml', false, 'UTF-8')][title.odtMasterMeta('OMG RFP Response')/]
	[/file]
[/template]
	[/comment]
	[rfpModel.odtNiemMasterMeta()/]
	[file('../temp~/'+getProjectName()+'/META-INF/manifest.xml',true, 'UTF-8')]
</manifest:manifest>
	[/file]
	[/if]
[/template]

[template public odtNiemMasterMeta(rfpModel : Model){
	executionEnvironment:ExecutionEnvironment=rfpModel.packagedElement->select(e|e.oclIsKindOf(ExecutionEnvironment)).oclAsType(ExecutionEnvironment)->asSequence()->first();
	title:String=executionEnvironment.name;
	subject:String=rfpModel.name;
}]
	[file ('../temp~/'+getProjectName()+'/meta.xml', false, 'UTF-8')][title.odtMasterMeta(subject)/]
	[/file]
[/template]
[template public odtNiemMasterContent(rfpModel : Model)]
	[file ('../temp~/'+getProjectName()+'/content.xml', false, 'UTF-8')]
[startOfficeDocument()/]
[rfpModel.odtBody()/]
</office:document-content>
	[/file]
[/template]
[template public odtBody(rfpModel : Model)]
	<office:body>
[rfpModel.odtText()/]
	</office:body>
[/template]
[comment]
[query public transforms(transformChapters:Sequence(Component)):Sequence(Module)=
	transformChapters.part.type->select(t|t.oclIsKindOf(Artifact) and (t.name='model')).oclAsType(Artifact).fileName
	->collect(name|name.getResourceObjects()).oclAsType(ecore::EObject)
		->select(o:ecore::EObject|o.oclIsKindOf(Module)).oclAsType(Module)
		->asSequence()
/]
[query public metamodels(metamodelChapters:Sequence(Component)):Sequence(ecore::EPackage)=
	metamodelChapters.part.type->select(t|t.oclIsKindOf(Artifact) and (t.name='model')).oclAsType(Artifact).fileName
	->collect(name|name.getResourceObjects()).oclAsType(ecore::EObject)
		->select(o:ecore::EObject|o.oclIsKindOf(ecore::EPackage)).oclAsType(ecore::EPackage)
		->asSequence()
/]
[query public profiles(profileChapters:Sequence(Component)):Sequence(Profile)=

	profileChapters.packageImport.importedPackage->select(t|t.oclIsKindOf(Profile))
		->asSequence()
/]
[query public profileURL(fileName:String):String=
	if(fileName.substringAfter('?')='') then (fileName) else (fileName.substringBefore('?')) endif
/]

[query public profileName(fileName:String):String=
	if(fileName.substringAfter('=')='') then '' else (fileName.substringAfter('=')) endif
/]
[/comment]


[template public odtText(rfpModel : Model){
	executionEnvironment:ExecutionEnvironment=rfpModel.packagedElement->select(e|e.oclIsKindOf(ExecutionEnvironment)).oclAsType(ExecutionEnvironment)->asSequence()->first();
	rfpComponent:Component=executionEnvironment.deployedElement->select(e|e.oclIsKindOf(Component)).oclAsType(Component)->asSequence()->first();
}]
	[file('debug',false)]
	rfpModel [rfpModel.qualifiedName/]
	rfpComponent [rfpComponent.qualifiedName/]
	[/file]
	[startOfficeText()/]
		[rfpModel.header()/]
		[rfpComponent.tableOfContents()/]
		[preface()/]
[rfpComponent.contents()/]
	</office:text>
[/template]
[query public getDocumentedTransforms(ot : Module):Sequence(Module)=
	Sequence(Module){ot}->union(ot.moduleImport.importedModule.getDocumentedTransforms())->asSet()->sortedBy(s|s.name)->asSequence()
/]

[template public header(rfpModel : Model){
	executionEnvironment:ExecutionEnvironment=rfpModel.packagedElement->select(e|e.oclIsKindOf(ExecutionEnvironment)).oclAsType(ExecutionEnvironment)->asSequence()->first();
	deployments:Set(Deployment)=executionEnvironment.deployment;
	deploymentSpecification:DeploymentSpecification=deployments.configuration->select(c|c.manifestation->notEmpty())->asSequence()->first();
	manifest:Manifestation=deploymentSpecification.manifestation->select(m|m.utilizedElement.oclIsKindOf(Component))->asSequence()->first();
	unmanifestedArtifacts:Set(DeploymentSpecification)=deployments.deployedArtifact
		->select(a|a.oclIsKindOf(DeploymentSpecification)).oclAsType(DeploymentSpecification)->select(a|a.manifestation->isEmpty())->asSet();	
	rfpComponent:Component=manifest.utilizedElement.oclAsType(Component);	
	copyrightCollaboration:Collaboration=rfpComponent.packagedElement->select(p|p.oclIsKindOf(Collaboration)).oclAsType(Collaboration)->asSequence()->first();
	copyrighters:Sequence(Type)=copyrightCollaboration.collaborationRole.type->asSequence();
	mpdVersionID:String=manifest.name;
	OMGDocumentNumber:String=deploymentSpecification.name;
	StandarddocumentURL:String=deploymentSpecification.deploymentLocation;
	AssociatedFiles:Sequence(String)=unmanifestedArtifacts.deploymentLocation->asSequence();
	copyrights:Sequence(String)=copyrighters.name;
}]
	[mpdVersionID.omgOdtCoverPage(OMGDocumentNumber,StandarddocumentURL,AssociatedFiles,copyrights)/]
[/template]
[template public tableOfContents(rfpComponent:Component){
	sections:Sequence(Class)=rfpComponent.getContainedSections()->select(t|not(t.oclAsType(Class).isActive));
	annexes:Sequence(Class)=rfpComponent.getContainedSections()->select(t|t.oclAsType(Class).isActive);
}]
	<text:p text:style-name="Title">Table of Contents</text:p>
	<text:p text:style-name="P13" />
	<text:table-of-content text:style-name="Sect1"
		text:name="toc1">

		[tableOfContentSource()/]
			<text:index-body>
			[for(section:Class|sections)]
				[section.sectionTOC(sections->indexOf(section)-1)/]
				[comment]check if subsections to be included[/comment]
			[/for]
			[for(annex:Class|annexes)]
				[annex.annexTOC(annexes->indexOf(annex).annexName())/]
			[/for]
		</text:index-body>
	</text:table-of-content>
[/template]
[query public annexName(index:Integer):String=Sequence{'A','B','C'}->at(index)/]	
[template public annexTOC(annex:Class,sectionNumber:String){
	subsections:Sequence(Class)=annex.getContainedSections();
}]
	[('Annex '+sectionNumber+': '+annex.name).tochAnnex(sectionNumber)/]
[/template]
[template public sectionTOC(section:Class,sectionNumber:Integer){
	subsections:Sequence(Class)=section.getContainedSections();
	importedSections:Sequence(Classifier)=section.getImportedSections();
	importedProfile:Package=section.getImportedProfile();
	subProfiles:Sequence(Profile)=if(importedProfile.oclIsUndefined())then Sequence{} else importedProfile.getNestedProfiles() endif;
	metamodelArtifacts:Sequence(Artifact)=section.getMetaModelArtifacts();
	metaclasses:Sequence(ecore::EClassifier)=metamodelArtifacts.getMetaClasses();	
	libraryArtifacts:Sequence(Artifact)=section.getLibraryArtifacts();
	libraryObjects:Sequence(ecore::EObject)=libraryArtifacts.getContentObjects();	
	sectionName:String=if(importedProfile.oclIsUndefined())then section.sectionName() else importedProfile.sectionName() endif;
}]
	[sectionName.toch1(sectionNumber)/]
	[for(subsection:Class|subsections)]
		[subsection.subsectionTOC(sectionNumber,subsections->indexOf(subsection))/]
	[/for]
	[for(subsection:Classifier|importedSections)]
		[subsection.subsectionTOC(sectionNumber,subsections->size()+importedSections->indexOf(subsection))/]
	[/for]
	[for(metaclass:ecore::EClassifier|metaclasses)]
		[metaclass.metasubsectionTOC(sectionNumber,subsections->size()+importedSections->size()+metaclasses->indexOf(metaclass))/]
	[/for]
	[for(libraryObject:ecore::EObject|libraryObjects)]
		[libraryObject.librarysubsectionTOC(sectionNumber,subsections->size()+importedSections->size()+metaclasses->size()+libraryObjects->indexOf(libraryObject))/]
	[/for]
	[if(not(importedProfile.oclIsUndefined()))]
		[importedProfile.profilesubsectionTOC(sectionNumber,
			subsections->size()+importedSections->size()+metaclasses->size()+libraryObjects->size())/]
	[/if]
	
[/template]
[template public metasubsectionTOC(section:ecore::EClassifier,sectionNumber:Integer,subsectionNumber:Integer)]
	[section.metasectionName().toch2(sectionNumber,subsectionNumber)/]
[/template]
[template public librarysubsectionTOC(section:ecore::EObject,sectionNumber:Integer,subsectionNumber:Integer)]
	[section.m1sectionName().toch2(sectionNumber,subsectionNumber)/]
[/template]
[template public profilesubsectionTOC(section:Package,sectionNumber:Integer,subsectionNumber:Integer){
	nestedProfiles:Sequence(Profile)=section.getNestedProfiles()->sortedBy(c|c.name);
}]
	[comment]abstract syntax plus nested profiles[/comment]
	['Overview'.toch2(sectionNumber,subsectionNumber)/]
	[for(nestedProfile:Profile|nestedProfiles)]
		[nestedProfile.nestedProfilesubsectionTOC(sectionNumber,subsectionNumber+nestedProfiles->indexOf(nestedProfile))/]
	[/for]
[/template]
[template public nestedProfilesubsectionTOC(section:Profile,sectionNumber:Integer,subsectionNumber:Integer){
	subsections:Sequence(Classifier)=section.ownedType
		->select(t|t.oclIsKindOf(Classifier) and not(t.oclIsKindOf(Association))).oclAsType(Classifier)
		->sortedBy(c|c.name);
}]
	[comment]abstract syntax plus nested profiles[/comment]
	[section.sectionName().toch2(sectionNumber,subsectionNumber)/]
	['Overview'.toch3(sectionNumber,subsectionNumber,1)/]
	[for(subsection:Classifier|subsections)]
		[subsection.sectionName().toch3(sectionNumber,subsectionNumber,1+subsections->indexOf(subsection))/]
	[/for]
[/template]

[template public subsectionTOC(section:Classifier,sectionNumber:Integer,subsectionNumber:Integer){
	subsections:Sequence(Class)=section.getContainedSections();
	importedSections:Sequence(Classifier)=section.getImportedSections();
	metamodelArtifacts:Sequence(Artifact)=if(section.oclIsKindOf(Class))then section.oclAsType(Class).getMetaModelArtifacts() else Sequence{} endif;
	metaclasses:Sequence(ecore::EClassifier)=metamodelArtifacts.getMetaClasses();	
	transformArtifacts:Sequence(Artifact)=section.getTransformArtifacts();
	documentedTransforms:Sequence(Module)=transformArtifacts.getTransforms()->sortedBy(c|c.name);	
	
	shadowUML:Sequence(Package)=transformArtifacts.packageImport.importedPackage;
	
}]
	[section.sectionName().toch2(sectionNumber,subsectionNumber)/]
	[for(subsection:Class|subsections)]
		[subsection.subsubsectionTOC(sectionNumber,subsectionNumber,subsections->indexOf(subsection))/]
	[/for]
	[for(subsection:Classifier|importedSections)]
		[subsection.subsubsectionTOC(sectionNumber,subsectionNumber,subsections->size()+importedSections->indexOf(subsection))/]
	[/for]
	[for(metaclass:ecore::EClassifier|metaclasses)]
		[metaclass.metasubsubsectionTOC(sectionNumber,subsectionNumber,subsections->size()+importedSections->size()+metaclasses->indexOf(metaclass))/]
	[/for]
[comment]	
	[for(transform:Module|documentedTransforms)]
		[transform.transformsubsubsectionTOC(sectionNumber,subsectionNumber,
			subsections->size()+importedSections->size()+metaclasses->size()+documentedTransforms->indexOf(transform),shadowUML)/]
	[/for]
[/comment]	
[/template]
[query public sourceUsageText():String='Source Model Element to QVT Operation Cross-Reference Table'/]
[query public targetUsageText():String='Source Model Element to QVT Operation Cross-Reference Table'/]

[template public metasubsubsectionTOC(section:ecore::EClassifier,sectionNumber:Integer,subsectionNumber:Integer,subsubsectionNumber:Integer)]
	[section.metasectionName().toch3(sectionNumber,subsectionNumber,subsubsectionNumber)/]
[/template]
[template public transformsubsubsectionTOC(section:Module,
		sectionNumber:Integer,subsectionNumber:Integer,subsubsectionNumber:Integer,shadowUML:Sequence(Package)){
	documentedOperations:Sequence(ImperativeOperation)=section.eOperations
		->select(o|o.oclIsKindOf(ImperativeOperation)).oclAsType(ImperativeOperation)->sortedBy(s|s.operationTitleSortName());
	shadowPackage:Package=shadowUML->select(p|p.name=section.name)->first();	
	examplePackages:Sequence(Package)=shadowPackage.nestedPackage->asSequence()->sortedBy(a|a.name);	
}]
[comment]
	[sourceUsageText().toch3(sectionNumber,subsectionNumber,subsubsectionNumber)/]
	[targetUsageText().toch3(sectionNumber,subsectionNumber,subsubsectionNumber+1)/]
	['Mapping Hierarchy'.toch3(sectionNumber,subsectionNumber,subsubsectionNumber+2)/]
	['Declarations'.toch3(sectionNumber,subsectionNumber,subsubsectionNumber+3)/]
[/comment]	
	['Examples'.toch3(sectionNumber,subsectionNumber,subsubsectionNumber)/]
		[for(examplePackage:Package|examplePackages)]
				[examplePackage.name.
					toch4(sectionNumber,subsectionNumber,subsubsectionNumber+2,
						examplePackages->indexOf(examplePackage)
					)/]
		[/for]			
	['Disjunctive Mapping Overview'.toch3(sectionNumber,subsectionNumber,subsubsectionNumber+1)/]
	['Descriptions'.toch3(sectionNumber,subsectionNumber,subsubsectionNumber+2)/]
			[for(imperativeOperation:ImperativeOperation|documentedOperations)]
				[imperativeOperation.operationTitleName().
					toch4(sectionNumber,subsectionNumber,subsubsectionNumber+1,
						documentedOperations->indexOf(imperativeOperation)	)/]
			[/for]			
	
[comment]
	['QVT'.toch3(sectionNumber,subsectionNumber,subsubsectionNumber+3)/]
	shadowPackage:Package=shadowUML->select(p|p.name=section.name)->first();	
	examplePackages:Sequence(Package)=shadowPackage.nestedPackage->asSequence()->sortedBy(a|a.name);	
		[for(examplePackage:Package|examplePackages)]
				[examplePackage.name.
					contenth4(sectionNumber,subsectionNumber,subsubsectionNumber+2,
						examplePackages->indexOf(examplePackage),
						examplePackage.elementAnchorBookmark()
					)/]

	[for(imperativeOperation:ImperativeOperation|documentedOperations)]
		[imperativeOperation.operationTitleName().toch3(sectionNumber,subsectionNumber,subsubsectionNumber+3+documentedOperations->indexOf(imperativeOperation))/]
	[/for]			
[/comment]	
	
[/template]

[template public subsubsectionTOC(section:Classifier,sectionNumber:Integer,subsectionNumber:Integer,subsubsectionNumber:Integer){
	subsections:Sequence(Class)=section.getContainedSections();
	importedSections:Sequence(Classifier)=section.getImportedSections();
}]
	[section.sectionName().toch3(sectionNumber,subsectionNumber,subsubsectionNumber)/]
	[for(subsection:Class|subsections)]
		[subsection.subsubsubsectionTOC(sectionNumber,subsectionNumber,subsubsectionNumber,subsections->indexOf(subsection))/]
	[/for]
	[for(subsection:Classifier|importedSections)]
		[subsection.subsubsubsectionTOC(sectionNumber,subsectionNumber,subsubsectionNumber,subsections->size()+importedSections->indexOf(subsection))/]
	[/for]
[/template]
[template public subsubsubsectionTOC(section:Classifier,sectionNumber:Integer,subsectionNumber:Integer,subsubsectionNumber:Integer,subsubsubsectionNumber:Integer)]
	[section.sectionName().toch4(sectionNumber,subsectionNumber,subsubsectionNumber,subsubsubsectionNumber)/]
[/template]

[query public getNestedProfiles(section:Package):Sequence(Profile)=
	section.nestedPackage->select(p|p.oclIsKindOf(Profile)).oclAsType(Profile)
/]	
[query public getImportedProfiles(section:Classifier):Sequence(Profile)=
	section.packageImport.importedPackage
	->select(p|p.oclIsKindOf(Profile) or 
			p.nestedPackage->select(pp|pp.oclIsKindOf(Profile))->notEmpty()
			)
/]	
[query public getImportedProfile(section:Classifier):Package=
	if(self.getImportedProfiles()->size()=1) then self.getImportedProfiles()->first() else null endif
/]	

[query public getImportedSections(section:Classifier):Sequence(Classifier)=
	section.packageImport.importedPackage.packagedElement
		->select(t|not(t.oclIsUndefined()) and t.oclIsKindOf(Classifier) and not(t.oclIsKindOf(Relationship)))
		.oclAsType(Classifier)->asSequence()->sortedBy(t|t.name)
/]	
[query public getContainedSections(section:Classifier):Sequence(Class)=
	if(section.oclIsKindOf(Class) and section.isReportStructureComponent()) then section.oclAsType(Class).ownedAttribute.type
		->select(t|not(t.oclIsUndefined()) and t.oclIsKindOf(Class)).oclAsType(Class)->asSequence()
		else Sequence{} endif
/]	
[query public isReportStructureComponent(classifier:NamedElement):Boolean=
	classifier.oclIsKindOf(Component)or classifier.oclIsKindOf(OpaqueBehavior)
/]	
[query public xmlText(text:String):String=text.replaceAll('<','&lt;')/]	
[query public sectionName(section:NamedElement):String=if(section.isReportStructureComponent()) then section.name.xmlText()
	else ('&lt;'+section.metaClassName()+'> '+section.name.xmlText()) endif
/]	
[query public metasectionName(section:ecore::EClassifier):String= ('&lt;'+section.eClass().name.metaClassNameOMG()+'> '+section.name.xmlText())
/]	
[query public m1sectionName(section:ecore::EObject):String= ('&lt;'+section.eClass().name+'> '+section.getM1Name().xmlText())
/]	


[query public operationName(operation:ImperativeOperation):String=
	if(operation._context.oclIsUndefined())then operation.name
	else (operation._context.eType.ePackage.metaPackageNameOMG()+'::'+operation._context.eType.name+'::'+operation.name)
	endif
/]	


[query public getMetamodelClassifiers(metamodel:ecore::EPackage):Sequence(ecore::EClassifier)=
	metamodel.eClassifiers->select(c|c.name<>'DocumentRoot')->sortedBy(s:ecore::EClassifier|s.name)->asSequence()/]


[template public specificationSubSection(subsection:OpaqueBehavior,subsections:Sequence(OpaqueBehavior),chapter:Integer,section:Integer){
	subsectionNumber:Integer=subsections->indexOf(subsection);
}]
	[subsection.name.contenth3(chapter,section,subsectionNumber,'')/]
	[subsection.images()/]
	[subsection.genUmlElementCommentsIndented()/]
[/template]
[comment]
[template public specificationSection(section:OpaqueBehavior,sections:Sequence(OpaqueBehavior),chapter:Integer){
	sectionNumber:Integer=sections->indexOf(section);
	specificationSubSections:Sequence(OpaqueBehavior)=section.ownedBehavior->select(b|b.oclIsKindOf(OpaqueBehavior)).oclAsType(OpaqueBehavior)->asSequence()->sortedBy(c|c.name);
	languages:OrderedSet(String)=section.language;
	bodies:Sequence(String)=section._body;
}]
	[section.name.contenth2(chapter,sectionNumber,'')/]
	[section.images()/]
	[section.genUmlElementCommentsIndented()/]
	[if(languages->notEmpty())]
			[section.name.indentTable()/]
				[for(language:String|languages)]
					[startTableRow()/]
						[language.tdBold()/]
						[if(bodies->size()>=languages->indexOf(language))]
							[bodies->at(languages->indexOf(language)).tdNormal()/]
						[else]
							['UNSPECIFIED'.tdNormal()/]
						[/if]
						
					[endTableRow()/]
				[/for]
			[indentTableEnd()/]
	[/if]
	[specificationSubSections.specificationSubSection(specificationSubSections,chapter,sectionNumber)/]
[/template]
[/comment]

[template public images(part:StructuredClassifier){
	artifacts:Sequence(Artifact)=part.part.type->select(p|
		p.oclIsKindOf(Artifact) and (p.name<>'model') and (p.name<>'metamodel') and (p.name<>'transform') and (p.name<>'library')
		).oclAsType(Artifact)->sortedBy(a|a.name);
}]
	[for(artifact:Artifact|artifacts)]
		[comment precede artifact with comments if any; picture needs to be moved into the odt assmebly area... /]
		[artifact.genUmlElementCommentsIndented()/]
		[comment]
		[artifact.name.paragraph()/]
		[pStart()/][artifact.copyImage()/][pEnd()/]
		[emptyP()/]
		[/comment]
		[pStart()/][artifact.copyImage()/][pEnd()/]
	[file('../temp~/'+getProjectName()+'/META-INF/manifest.xml',true, 'UTF-8')]
 <manifest:file-entry manifest:media-type="image/png" manifest:full-path="Pictures/[artifact.fileName/]"/>
	[/file]
	[/for]
	[self.diagrams()/]
[/template]
[template public diagrams(part:Namespace){
	diagrams:Sequence(Diagram)=part.ownedDiagram
		->union(part._directedRelationshipOfSource
			->select(d|d.oclIsKindOf(Usage)).target
			->select(t|t.oclIsKindOf(Diagram)).oclAsType(Diagram)
		)
		->asSequence()->sortedBy(a|a.name);
}]
	[diagrams.diagram()/]
[/template]
[template public diagram(diagram:Diagram)]
		[comment precede artifact with comments if any /]
		[diagram.genUmlElementCommentsIndented()/]
		[if (diagram.ownedComment->isEmpty())][emptyP()/][/if]
		[comment]
		[diagram.name.paragraph()/]
		[pStart()/][diagram.createDiagramImage()/][pEnd()/]
		[emptyP()/]
		[/comment]
		[pStart()/][diagram.createDiagramImage()/][pEnd()/]
			[file('../temp~/'+getProjectName()+'/META-INF/manifest.xml',true, 'UTF-8')]
		 <manifest:file-entry manifest:media-type="image/png" manifest:full-path="Pictures/[diagram.name/].png"/>
			[/file]
[/template]


[template public contents(rfpComponent : Component){
	sections:Sequence(Class)=rfpComponent.getContainedSections()->select(t|not(t.oclAsType(Class).isActive));
	annexes:Sequence(Class)=rfpComponent.getContainedSections()->select(t|t.oclAsType(Class).isActive);
	documentedPackages:Collection(Package)=rfpComponent.eAllContents(PackageImport).importedPackage;
	metamodelArtifacts:Sequence(Artifact)=sections.getMetaModelArtifacts()
		->union(sections.getContainedSections().getMetaModelArtifacts());
	metaclasses:Sequence(ecore::EClassifier)=metamodelArtifacts.getMetaClasses();	
	documentedEPackages:Sequence(EPackage)=metaclasses.ePackage->asSet()->asSequence();
}]
	<text:section text:style-name="Sect2" text:name="Section2">
	[for(section:Class|sections)]
[section.section((sections->indexOf(section)-1),documentedPackages,documentedEPackages)/]
	[/for]
	[for(annex:Class|annexes)]
		[annex.annex(annexes->indexOf(annex).annexName(),documentedPackages,documentedEPackages)/]
	[/for]
	</text:section>
[/template]
[query public classConstraints(classifier:Classifier):Sequence(Constraint)=
	classifier.ownedRule->select(c|c.constrainedElement->exists(e|e.oclIsKindOf(Classifier)))
/]	

[template public sectionContent(section:Classifier,documentedPackages:Collection(Package),documentedEPackages:Sequence(EPackage)){
	termsAndDefinitions:Sequence(OpaqueBehavior)=if(section.oclIsKindOf(Class)) then section.oclAsType(Class).ownedBehavior
		->select(b|b.oclIsKindOf(OpaqueBehavior) and section.oclAsType(Class).ownedAttribute.type->select(t|t=b)->isEmpty())
		.oclAsType(OpaqueBehavior)->asSequence()->sortedBy(b|b.name)
		else Sequence{} endif;
	isTable:Boolean=section.isAbstract;
	sectionIsAppendix:Boolean=section.oclIsKindOf(Class) and section.oclAsType(Class).isActive;
	acknowledgementCollaborations:Sequence(Collaboration)=section.collaborationUse.type->asSequence()->sortedBy(c|c.name);
	profiles:Sequence(Profile)=section.packageImport.importedPackage->select(p|p.oclIsKindOf(Profile)).oclAsType(Profile)->asSequence();
	profile:Profile=profiles->first();
	documentedEPackage:EPackage=documentedEPackages->first();
	constraints:Sequence(Constraint)=profiles.ownedStereotype.classConstraints()->sortedBy(s|s.name)->asSequence();
	hasProfileOwner:Boolean=section.owner.oclIsKindOf(Profile);	
		
}]
	[comment for profile content, establish an anchor /]
	[comment]
	[if(not(sectionIsAppendix) and not(profile.oclIsUndefined()))]
		[indentp()/]
		[profile.elementAnchorBookmark()/]		
		[comment]
		[bold()/]Profile:[spanEnd()/][profile.elementAnchor()/]
		[/comment]
		[indentpEnd()/]
	[/if]
	[/comment]
	[comment]
	[if(not(documentedEPackage.oclIsUndefined()))][indentp()/][bold()/]Package:[spanEnd()/][documentedEPackage.metaelementAnchor()/][indentpEnd()/][/if]
	[/comment]
	[comment leading images /]
	[if(section.oclIsKindOf(StructuredClassifier))][section.oclAsType(StructuredClassifier).images()/][/if]
	[comment documentation /]
	[if(not(hasProfileOwner))]
		[section.genUmlElementCommentsIndented()/]
	[/if]
	[if(isTable)]
			[section.name.indentTable()/]
				[for(reference:OpaqueBehavior|termsAndDefinitions)]
					[startTableRow()/]
						[reference.name.tdBold()/]
						[tdCellStart()/][reference.genUmlElementCommentsIndented()/][tdCellEnd()/]
					[endTableRow()/]
				[/for]
			[indentTableEnd()/]
	[else]
		[for(definition:OpaqueBehavior|termsAndDefinitions)]
			[comment][emptyP()/][/comment]
			[pStart()/][bold()/][definition.name/][spanEnd()/][pEnd()/]
			[definition.genUmlElementCommentsIndented()/]
		[/for]
	[/if]
	[for(collaboration:Collaboration|acknowledgementCollaborations)]
		[collaboration.genUmlElementCommentsIndented()/]
		[ul()/]
			[for(role:Type|collaboration.collaborationRole.type->sortedBy(c|c.name))]
				[role.name.li()/]
			[/for]
		[ulEnd()/]
	[/for]
	[comment]move to appendix?[/comment]
	[if(sectionIsAppendix and constraints->notEmpty())]
		['Rule Cross Reference'.paragraph()/]
		['Rule Cross Reference'.indentTable()/]
			[for(constraint:Constraint|constraints)]
				[constraint.constraintRowCrossReference()/]
			[/for]
		[indentTableEnd()/]
	[/if]
	
	[if(not(sectionIsAppendix) and hasProfileOwner)]
		[if(section.oclIsKindOf(Stereotype))]
			[section.oclAsType(Stereotype).stereotypeDetail(documentedPackages)/]
		[else]
			[section.typeDetail(documentedPackages)/]
		[/if]			
	[/if]
	
	[if(not(profile.oclIsUndefined()))][comment][emptyP()/][/comment][/if]
[/template]
[template public metasectionContent(section:ecore::EClassifier,documentedPackages:Sequence(EPackage),shadowUML:Package)]
	[section.metaDetail(documentedPackages,shadowUML)/]	
[/template]

[template public annex(annex:Class,sectionNumber:String,documentedPackages:Collection(Package),documentedEPackages:Sequence(EPackage)){
	subsections:Sequence(Class)=annex.ownedAttribute.type
		->select(t|not(t.oclIsUndefined()) and t.oclIsKindOf(Class)).oclAsType(Class)->asSequence();
}]
	[('Annex '+sectionNumber+': '+annex.name).contenthAnnex(sectionNumber,annex.sectionContentPreamble())/]
	[annex.sectionContent(documentedPackages,Sequence{})/]
[/template]
[query public getMetaModelArtifacts(section:Class):Sequence(Artifact)=
	if(section.oclIsKindOf(StructuredClassifier))
		then section.oclAsType(StructuredClassifier).part.type
			->select(t|t.oclIsKindOf(Artifact) and (t.name='metamodel')).oclAsType(Artifact)->asSequence()
		else Sequence{} endif
/]
[query public getTransformArtifacts(section:Classifier):Sequence(Artifact)=
	if(section.oclIsKindOf(StructuredClassifier))
		then section.oclAsType(StructuredClassifier).part.type
			->select(t|t.oclIsKindOf(Artifact) and (t.name='transform')).oclAsType(Artifact)->asSequence()
		else Sequence{} endif
/]
[query public getLibraryArtifacts(section:Class):Sequence(Artifact)=
	if(section.oclIsKindOf(StructuredClassifier))
		then section.oclAsType(StructuredClassifier).part.type
			->select(t|t.oclIsKindOf(Artifact) and (t.name='library')).oclAsType(Artifact)->asSequence()
		else Sequence{} endif
/]
[query public getMetaClasses(artifact:Artifact):Sequence(ecore::EClassifier)=artifact.getMetaModels().eClassifiers->asSequence()->sortedBy(c|c.name)
/]
[query public getTransforms(artifact:Artifact):Sequence(Module)=artifact.fileName
	->collect(name|name.getResourceObjects()).oclAsType(ecore::EObject)
		->select(o:ecore::EObject|o.oclIsKindOf(Module)).oclAsType(Module)
		->asSequence()
/]

[query public getMetaModels(artifact:Artifact):Sequence(ecore::EPackage)=artifact.fileName
	->collect(name|name.getResourceObjects()).oclAsType(ecore::EObject)
		->select(o:ecore::EObject|o.oclIsKindOf(ecore::EPackage)).oclAsType(ecore::EPackage)
		->asSequence()
/]
[query public getTopObjects(artifact:Artifact):Sequence(ecore::EObject)=artifact.fileName
	->collect(name|name.getResourceObjects()).oclAsType(ecore::EObject)
		->asSequence()
/]
[query public isM1Classifier(m1:ecore::EObject):Boolean=m1.oclIsKindOf(XSDTypeDefinition)
/]
[query public getM1Name(m1:ecore::EObject):String=if(m1.oclIsKindOf(XSDNamedComponent))then m1.oclAsType(XSDNamedComponent).name else '' endif
/]
[query public getContentObjects(artifact:Artifact):Sequence(ecore::EObject)=artifact.getTopObjects().eContents()
	->select(c|c.isM1Classifier())
	->sortedBy(c|c.getM1Name())
/]
[comment]
	metamodelArtifacts:Sequence(Artifact)=section.getMetaModelArtifacts();
	metaclasses:Sequence(ecore::EClassifier)=metamodelArtifacts.getMetaClasses();	
	documentedEPackages:Sequence(EPackage)=metaclasses.ePackage->asSet()->asSequence();
[/comment]
[template public section(section:Class,sectionNumber:Integer,documentedPackages:Collection(Package),documentedEPackages:Sequence(EPackage)){
	subsections:Sequence(Class)=section.getContainedSections();
	importedSections:Sequence(Classifier)=section.getImportedSections();
	isPageBreak:Boolean=section.oclIsKindOf(Component);	
	metamodelArtifacts:Sequence(Artifact)=section.getMetaModelArtifacts();
	metaclasses:Sequence(ecore::EClassifier)=metamodelArtifacts.getMetaClasses();	
	shadowUML:Package=metamodelArtifacts.packageImport.importedPackage->first();
	libraryArtifacts:Sequence(Artifact)=section.getLibraryArtifacts();
	libraryObjects:Sequence(ecore::EObject)=libraryArtifacts.getContentObjects();
	documentedSchemaPackages:Sequence(XSDSchema)=libraryObjects
		->select(o|o.oclIsKindOf(XSDConcreteComponent)).oclAsType(XSDConcreteComponent).schema
		->asSet()->asSequence();
	importedProfile:Package=section.getImportedProfile();
	sectionName:String=if(importedProfile.oclIsUndefined())then section.sectionName() else importedProfile.sectionName() endif;
}]
	[if(isPageBreak)]
		[sectionName.contenth1break(sectionNumber,section.sectionContentPreamble())/]
	[else]	
		[sectionName.contenth1(sectionNumber,section.sectionContentPreamble())/]
	[/if]
[comment]	
TEST library [libraryArtifacts->size()/],[libraryObjects->size()/]	
[for(test:ecore::EObject|libraryArtifacts.getTopObjects())]
	TOP [test/]
	[for(test2:ecore::EObject|test.eContents())]
		CONTENT [test2/]
	[/for]
[/for]
[/comment]	

	[section.sectionContent(documentedPackages,metaclasses.ePackage->asSet()->asSequence())/]
	[for(subsection:Class|subsections)]
[subsection.subsection(sectionNumber,subsections->indexOf(subsection),documentedPackages,documentedEPackages)/]
	[/for]
	[for(subsection:Classifier|importedSections)]
		[subsection.subsection(sectionNumber,subsections->size()+importedSections->indexOf(subsection),documentedPackages,documentedEPackages)/]
	[/for]
	[for(metaclass:ecore::EClassifier|metaclasses)]
		[metaclass.metasubsection(sectionNumber,subsections->size()+importedSections->size()+metaclasses->indexOf(metaclass),documentedEPackages,shadowUML)/]
	[/for]
	[for(libraryObject:ecore::EObject|libraryObjects)]
		[libraryObject.librarysubsection(sectionNumber,subsections->size()+importedSections->size()+metaclasses->size()+libraryObjects->indexOf(libraryObject),documentedSchemaPackages,shadowUML)/]
	[/for]

	[if(not(importedProfile.oclIsUndefined()))]
[importedProfile.profilesubsection(sectionNumber,
			subsections->size()+importedSections->size()+metaclasses->size()+libraryObjects->size(),documentedPackages)/]
	[/if]

[/template]
[template public profilesubsection(section:Package,sectionNumber:Integer,subsectionNumber:Integer,documentedPackages:Collection(Package)){
	nestedProfiles:Sequence(Profile)=section.getNestedProfiles()->sortedBy(c|c.name);
}]
	[comment]abstract syntax plus nested profiles[/comment]
	[comment]
	[section.genUmlElementCommentsIndented()/]
	[/comment]
	['Overview'.contenth2(sectionNumber,subsectionNumber,section.sectionContentPreamble())/]
	[section.genUmlElementCommentsIndented()/]
	[section.diagrams()/]
	
	[for(nestedProfile:Profile|nestedProfiles)]
[nestedProfile.nestedProfilesubsection(sectionNumber,subsectionNumber+nestedProfiles->indexOf(nestedProfile),documentedPackages)/]
	[/for]
[/template]
[template public nestedProfilesubsection(section:Profile,sectionNumber:Integer,subsectionNumber:Integer,documentedPackages:Collection(Package)){
	subsections:Sequence(Classifier)=section.ownedType
		->select(t|t.oclIsKindOf(Classifier) and not(t.oclIsKindOf(Association))).oclAsType(Classifier)
		->sortedBy(c|c.name);
}]
	[comment]abstract syntax plus nested profiles[/comment]
	[section.sectionName().contenth2(sectionNumber,subsectionNumber,section.sectionContentPreamble())/]
	[comment]
	[section.genUmlElementCommentsIndented()/]
	[/comment]
	['Overview'.contenth3(sectionNumber,subsectionNumber,1,section.sectionContentPreamble())/]
	[section.genUmlElementCommentsIndented()/]
	[section.diagrams()/]
	[for(subsection:Classifier|subsections)]
		[subsection.sectionName().contenth3(sectionNumber,subsectionNumber,1+subsections->indexOf(subsection),subsection.sectionContentPreamble())/]
		[if(subsection.oclIsKindOf(Stereotype))]
[subsection.oclAsType(Stereotype).stereotypeDetail(documentedPackages)/]
		[else]
[subsection.typeDetail(documentedPackages)/]
		[/if]			
	[/for]
[/template]

[template public sectionContentPreamble(section:NamedElement){
	hasProfileOwner:Boolean=section.owner.oclIsKindOf(Profile);		
	profiles:Sequence(Profile)=if(section.oclIsKindOf(Classifier)) then 
		section.oclAsType(Classifier).packageImport.importedPackage
			->select(p|p.oclIsKindOf(Profile)).oclAsType(Profile)
			->asSequence()
		else Sequence{}
		endif;
	profile:Profile=profiles->first();
	hasProfileOwner:Boolean=section.owner.oclIsKindOf(Profile);	
	sectionIsAppendix:Boolean=section.oclIsKindOf(Class) and section.oclAsType(Class).isActive;
}]
	[(section.elementAnchorBookmark())/]
	[if(not(sectionIsAppendix) and not(profile.oclIsUndefined()))]
		[profile.elementAnchorBookmark()/]		
	[/if]
[/template]
[template public metasectionContentPreamble(section:ecore::EObject)]
	[(section.metaElementAnchorBookmark())/]
[/template]
[template public metasubsection(section:ecore::EClassifier,sectionNumber:Integer,subsectionNumber:Integer,documentedPackages:Sequence(EPackage),shadowUML:Package)]
	[section.metasectionName().contenth2(sectionNumber,subsectionNumber,section.metasectionContentPreamble())/]
	[section.metasectionContent(documentedPackages,shadowUML)/]
[/template]
[template public librarysubsection(section:ecore::EObject,sectionNumber:Integer,subsectionNumber:Integer,documentedPackages:Sequence(XSDSchema),shadowUML:Package)]
	[section.m1sectionName().contenth2(sectionNumber,subsectionNumber,section.metasectionContentPreamble())/]
	[section.libraryDetail(documentedPackages,shadowUML)/]	
[/template]
[template public subsection(section:Classifier,sectionNumber:Integer,subsectionNumber:Integer,documentedPackages:Collection(Package),documentedEPackages:Sequence(EPackage)){
	subsections:Sequence(Class)=section.getContainedSections();
	importedSections:Sequence(Classifier)=section.getImportedSections();

	metamodelArtifacts:Sequence(Artifact)=if(section.oclIsKindOf(Class))then section.oclAsType(Class).getMetaModelArtifacts() else Sequence{} endif;
	metaclasses:Sequence(ecore::EClassifier)=metamodelArtifacts.getMetaClasses();	
	shadowMetaModelUML:Package=metamodelArtifacts.packageImport.importedPackage->first();

	transformArtifacts:Sequence(Artifact)=section.getTransformArtifacts();
	documentedTransforms:Sequence(Module)=transformArtifacts.getTransforms()->sortedBy(c|c.name);	
	shadowUML:Sequence(Package)=transformArtifacts.packageImport.importedPackage;
	
}]
	[section.sectionName().contenth2(sectionNumber,subsectionNumber,section.sectionContentPreamble())/]
	[section.sectionContent(documentedPackages,Sequence{})/]
	[for(subsection:Class|subsections)]
		[subsection.subsubsection(sectionNumber,subsectionNumber,subsections->indexOf(subsection),documentedPackages,documentedEPackages)/]
	[/for]
	[for(subsection:Classifier|importedSections)]
		[subsection.subsubsection(sectionNumber,subsectionNumber,subsections->size()+importedSections->indexOf(subsection),documentedPackages,documentedEPackages)/]
	[/for]
	[for(metaclass:ecore::EClassifier|metaclasses)]
		[metaclass.metasubsubsection(sectionNumber,subsectionNumber,subsections->size()+importedSections->size()+metaclasses->indexOf(metaclass),documentedEPackages,shadowMetaModelUML)/]
	[/for]
	
	[for(transform:Module|documentedTransforms)]
		[transform.transformsubsubsectionQVT(shadowUML)/]
	[comment]
		[transform.transformsubsubsection(sectionNumber,subsectionNumber,
			subsections->size()+importedSections->size()+metaclasses->size()+documentedTransforms->indexOf(transform),
			documentedEPackages,shadowUML)/]
	[/comment]
	[/for]
	
[/template]
[template public metasubsubsection(section:ecore::EClassifier,sectionNumber:Integer,subsectionNumber:Integer,subsubsectionNumber:Integer,documentedPackages:Sequence(EPackage),shadowUML:Package)]
	[section.metasectionName().contenth3(sectionNumber,subsectionNumber,subsubsectionNumber,section.metasectionContentPreamble())/]
	[section.metasectionContent(documentedPackages,shadowUML)/]
[/template]
[template public transformsubsubsection(section:Module,
		sectionNumber:Integer,subsectionNumber:Integer,subsubsectionNumber:Integer,documentedPackages:Collection(EPackage),
		shadowUML:Sequence(Package)){
	documentedOperations:Sequence(ImperativeOperation)=section.eOperations
		->select(o|o.oclIsKindOf(ImperativeOperation)).oclAsType(ImperativeOperation)->sortedBy(s|s.operationTitleSortName());
	allMappingOperations:Sequence(MappingOperation)=documentedOperations
		->select(m|m.oclIsKindOf(MappingOperation)).oclAsType(MappingOperation);
	topMappingOperations:Sequence(MappingOperation)=allMappingOperations
		->select(m|(m.disjunct->notEmpty())and(allMappingOperations.disjunct->flatten()->select(d|d=m)->isEmpty()));
	allSourceUsages:Sequence(ecore::ENamedElement)=documentedOperations.allOperationalSourceUsages(documentedPackages)
		->asSet()->asSequence()->sortedBy(s|s.sourceSortValue());	
	allTargetUsages:Sequence(ecore::EStructuralFeature)=documentedOperations.allOperationalTargetUsages(documentedPackages)
		->asSet()->asSequence()->sortedBy(s|s.sourceSortValue());
	documentedTransforms:Sequence(Module)=Sequence{section};	
	shadowPackage:Package=shadowUML->select(p|p.name=section.name)->first();	
	examplePackages:Sequence(Package)=shadowPackage.nestedPackage->asSequence()->sortedBy(a|a.name);	
}]
[comment]
	topMappingOperations:Sequence(MappingOperation)=allMappingOperations
		->select(m|m.inherited->isEmpty());
	[sourceUsageText().contenth3(sectionNumber,subsectionNumber,subsubsectionNumber,'')/]
		[sourceUsageText().indentTable()/]
			[for(eobject:ecore::ENamedElement|allSourceUsages)]
				[eobject.sourceUsageRow(documentedPackages,documentedOperations)/]
			[/for]
		[indentTableEnd()/]
	[targetUsageText().contenth3(sectionNumber,subsectionNumber,subsubsectionNumber+1,'')/]
		[targetUsageText().indentTable()/]
			[for(eobject:ecore::EStructuralFeature|allTargetUsages)]
				[eobject.targetUsageRow(documentedPackages,documentedOperations)/]
			[/for]
		[indentTableEnd()/]
	['Mapping Hierarchy'.contenth3(sectionNumber,subsectionNumber,subsubsectionNumber+2,'')/]
		[ul()/]
			[for(mappingOperation:MappingOperation|topMappingOperations)]
				[mappingOperation.mapHierarchy(allMappingOperations,documentedPackages)/]
			[/for]
		[ulEnd()/]	
	['Declarations'.contenth3(sectionNumber,subsectionNumber,subsubsectionNumber+3,'')/]
[/comment]
[comment]
	['Examples'.contenth3(sectionNumber,subsectionNumber,subsubsectionNumber,'')/]
		[for(examplePackage:Package|examplePackages)]
				[examplePackage.name.
					contenth4(sectionNumber,subsectionNumber,subsubsectionNumber+2,
						examplePackages->indexOf(examplePackage),
						examplePackage.elementAnchorBookmark()
					)/]
			[comment]add anchor, paragraph, and images with comments
		[for(example:Diagram|examples)]
	examples:Sequence(Diagram)=shadowPackage.ownedDiagram->asSequence()->sortedBy(a|a.name);	
			[indentp()/][bold()/][example.elementAnchor()/][spanEnd()/][indentpEnd()/]
			[/comment]
			[examplePackage.genUmlElementCommentsIndented()/]
			[examplePackage.diagrams()/]
		[/for]
	['Disjunctive Mapping Overview'.contenth3(sectionNumber,subsectionNumber,subsubsectionNumber+1,'')/]
		[for(mappingOperation:MappingOperation|topMappingOperations)]
			[mappingOperation.name.paragraph()/]
			[mappingOperation.shadowOperationDescription(documentedPackages,shadowUML)/]
			
			[mappingOperation.name.startTable3()/]
			[startTableRow()/]
					['Source Model Context'.tdBold()/]
					['Mapping Operation'.tdBold()/]
					['Target Model Result'.tdBold()/]
			[endTableRow()/]
			
			[for(disjunctiveOperation:MappingOperation|mappingOperation.disjunct)]
					[disjunctiveOperation.mappingRule(documentedPackages,documentedOperations,shadowUML)/]
			[/for]		
			[endTable()/]
			[emptyP()/]
		[/for]
	['Descriptions'.contenth3(sectionNumber,subsectionNumber,subsubsectionNumber+2,'')/]
				[for(module:Module|section.moduleImport.importedModule->select(m|m.name<>'UMLHL7ProfileHelper')->sortedBy(s|s.name))]
					[indentp()/]import [module.metaElementReference()/];[indentpEnd()/]
				[/for]
				[for(modelType:ModelType|section.usedModelType->sortedBy(s|s.name))]
					[indentp()/]modeltype [modelType.name/] [if(not(modelType.conformanceKind.oclIsUndefined()))]"[modelType.conformanceKind/]"[/if] uses '[metamodel.nsURI/]';[indentpEnd()/]
				[/for]
				[if(section.oclIsKindOf(OperationalTransformation))]
					[indentp()/]transformation [section.name/](
					[for(modelParameter:ModelParameter|section.oclAsType(OperationalTransformation).modelParameter)separator(',')]
						[modelParameter.kind/] [modelParameter.name/]:[modelParameter.eType.name/]
					[/for])
					;[indentpEnd()/]
				[/if]
			[for(imperativeOperation:ImperativeOperation|documentedOperations)]
				[imperativeOperation.operationTitleName().
					contenth4(sectionNumber,subsectionNumber,subsubsectionNumber+1,
						documentedOperations->indexOf(imperativeOperation),
						imperativeOperation.metaElementDescriptionAnchorBookmark()
					)/]
				[imperativeOperation.operationDescription(documentedPackages,shadowUML)/]
			[imperativeOperation.operationDetail(sectionNumber,subsectionNumber,subsubsectionNumber+3+documentedOperations->indexOf(imperativeOperation),documentedPackages,shadowUML)/]
			[/for]
						
		[comment]
		['OperationDescription'.indentTable()/]
			[for(imperativeOperation:ImperativeOperation|documentedOperations)]
				[imperativeOperation.operationDescriptionRow(documentedPackages,shadowUML)/]
			[/for]			
		[indentTableEnd()/]
		[/comment]
[/comment]
	[comment]
	[/comment]	
	['QVT'.contenth3(sectionNumber,subsectionNumber,subsubsectionNumber+3,'')/]
	[comment]
			[section.isBlackbox.isBlackbox()/]
			[comment][emptyP()/][/comment]
			[indentp()/][bold()/]Declarations:[spanEnd()/][indentpEnd()/] 
	[/comment]
				[for(module:Module|section.moduleImport.importedModule->select(m|m.name<>'UMLHL7ProfileHelper')->sortedBy(s|s.name))]
					[indentp()/]import [module.metaElementReference()/];[indentpEnd()/]
				[/for]
				[for(modelType:ModelType|section.usedModelType->sortedBy(s|s.name))]
					[indentp()/]modeltype [modelType.name/] [if(not(modelType.conformanceKind.oclIsUndefined()))]"[modelType.conformanceKind/]"[/if] uses '[metamodel.nsURI/]';[indentpEnd()/]
				[/for]
				[if(section.oclIsKindOf(OperationalTransformation))]
					[indentp()/]transformation [section.name/](
					[for(modelParameter:ModelParameter|section.oclAsType(OperationalTransformation).modelParameter)separator(',')]
						[modelParameter.kind/] [modelParameter.name/]:[modelParameter.eType.name/]
					[/for])
					;[indentpEnd()/]
				[/if]

		[for(imperativeOperation:ImperativeOperation|documentedOperations)]
			[imperativeOperation.operationDetail(sectionNumber,subsectionNumber,subsubsectionNumber+3+documentedOperations->indexOf(imperativeOperation),documentedPackages,shadowUML)/]
		[/for]
	[comment]
	[/comment]
[/template]

[query public elementReferenceQVT(element : ecore::ENamedElement):String=element.name()/]
[query public metaElementReferenceQVT(element : ecore::ENamedElement):String=element.elementReferenceQVT()/]


[template public transformsubsubsectionQVT(section:Module,shadowUMLs:Sequence(Package)){
	documentedOperations:Sequence(ImperativeOperation)=section.eOperations
		->select(o|o.oclIsKindOf(ImperativeOperation)).oclAsType(ImperativeOperation)->sortedBy(s|s.operationTitleSortName());
}]
[file(section.name+'.qvto',false, 'UTF-8')]
[for(module:Module|section.moduleImport.importedModule->select(m|m.name<>'UMLHL7ProfileHelper')->sortedBy(s|s.name))]
import [module.metaElementReferenceQVT()/];
[/for]
[for(modelType:ModelType|section.usedModelType->sortedBy(s|s.name))]
modeltype [modelType.name/] [if(not(modelType.conformanceKind.oclIsUndefined()))]"[modelType.conformanceKind/]"[/if] uses '[metamodel.nsURI.replace('http://www.eclipse.org/emf/2002/Ecore','http://schema.omg.org/spec/MOF/2.0/cmof.xml').replace('http://www.nomagic.com/magicdraw/UML/2.1.2','http://www.omg.org/spec/UML/20090901')/]';
[/for]
[if(section.oclIsKindOf(OperationalTransformation))]

transformation [section.name/]([for(modelParameter:ModelParameter|section.oclAsType(OperationalTransformation).modelParameter)separator(',')][modelParameter.kind/] [modelParameter.name/]:[modelParameter.eType.name/][/for]);

[/if]
[for(imperativeOperation:ImperativeOperation|documentedOperations)]
[imperativeOperation.operationDetailQVT(shadowUMLs)/]
[/for]
[/file]					
[/template]




[template public subsubsection(section:Classifier,
		sectionNumber:Integer,subsectionNumber:Integer,subsubsectionNumber:Integer,documentedPackages:Collection(Package),documentedEPackages:Sequence(EPackage)){
	subsections:Sequence(Class)=section.getContainedSections();
	importedSections:Sequence(Classifier)=section.getImportedSections();
}]
	[section.sectionName().contenth3(sectionNumber,subsectionNumber,subsubsectionNumber,section.sectionContentPreamble())/]
	[section.sectionContent(documentedPackages,Sequence{})/]
	[for(subsection:Class|subsections)]
		[subsection.subsubsubsection(sectionNumber,subsectionNumber,subsubsectionNumber,subsections->indexOf(subsection),documentedPackages,documentedEPackages)/]
	[/for]
	[for(subsection:Classifier|importedSections)]
		[subsection.subsubsubsection(sectionNumber,subsectionNumber,subsubsectionNumber,subsections->size()+importedSections->indexOf(subsection),documentedPackages,documentedEPackages)/]
	[/for]
[/template]
[template public subsubsubsection(section:Classifier,sectionNumber:Integer,subsectionNumber:Integer,
	subsubsectionNumber:Integer,subsubsubsectionNumber:Integer,documentedPackages:Collection(Package),documentedEPackages:Sequence(EPackage)){
	subsections:Sequence(Class)=section.getContainedSections();
	importedSections:Sequence(Classifier)=section.getImportedSections();
}]
	[section.sectionName().contenth4(sectionNumber,subsectionNumber,subsubsectionNumber,subsubsubsectionNumber,section.sectionContentPreamble())/]
	[section.sectionContent(documentedPackages,Sequence{})/]
	[for(subsection:Class|subsections)]
		[subsection.subsubsubsubsection(sectionNumber,subsectionNumber,subsubsectionNumber,subsubsubsectionNumber,subsections->indexOf(subsection),documentedPackages,documentedEPackages)/]
	[/for]
	[for(subsection:Classifier|importedSections)]
		[subsection.subsubsubsubsection(sectionNumber,subsectionNumber,subsubsectionNumber,subsubsubsectionNumber,subsections->size()+importedSections->indexOf(subsection),documentedPackages,documentedEPackages)/]
	[/for]
[/template]
[template public subsubsubsubsection(section:Classifier,sectionNumber:Integer,subsectionNumber:Integer,
	subsubsectionNumber:Integer,subsubsubsectionNumber:Integer,subsubsubsubsectionNumber:Integer,documentedPackages:Collection(Package),documentedEPackages:Sequence(EPackage))]
	[section.sectionName().contenth5(sectionNumber,subsectionNumber,subsubsectionNumber,subsubsubsectionNumber,subsubsubsubsectionNumber,section.sectionContentPreamble())/]
	[section.sectionContent(documentedPackages,Sequence{})/]
[/template]
[comment]
[template public contentTransform(documentedTransform:Module,
	transforms:Sequence(Module),transformationBaseChapter:Integer,
	documentedPackages:Collection(ecore::EPackage),transformChapters:Sequence(Component)){
	transformChapter:Component=transformChapters->select(c|c.name.startsWith(documentedTransform.name))->asSequence()->first();
	transformationChapter:Integer=transformationBaseChapter+transforms->indexOf(documentedTransform);
	operations:Sequence(ImperativeOperation)=documentedTransform.eOperations
		->select(o|o.oclIsKindOf(ImperativeOperation)).oclAsType(ImperativeOperation)->sortedBy(s|s.operationName());
	chapterName:String=if(transformChapter.oclIsUndefined())then ('Specification Transformation '+documentedTransform.name) else transformChapter.name endif;	
	partSections:Sequence(OpaqueBehavior)=if(transformChapter.oclIsUndefined())then Sequence{} else 
		transformChapter.ownedBehavior->select(b|b.oclIsKindOf(OpaqueBehavior)).oclAsType(OpaqueBehavior)->asSequence()->sortedBy(c|c.name)
		endif;
	declarationsSection:Integer=partSections->size()+1;	
	descriptionsSection:Integer=declarationsSection+1;	
}]
	[chapterName.contenth1(transformationChapter,'')/]
		[if(not(transformChapter.oclIsUndefined()))]
			[transformChapter.images()/]
			[transformChapter.genUmlElementCommentsIndented()/]
		[/if]
		[partSections.specificationSection(partSections,transformationChapter)/]
	['Declarations'.contenth2(transformationChapter,declarationsSection,'')/]
			[documentedTransform.name.contenth3(transformationChapter,declarationsSection,1,documentedTransform.metaElementAnchorBookmark())/]
			[documentedTransform.isBlackbox.isBlackbox()/]
			[comment][emptyP()/][/comment]
			[indentp()/][bold()/]Declarations:[spanEnd()/][indentpEnd()/] 
			
				[for(module:Module|documentedTransform.moduleImport.importedModule->select(m|m.name<>'UMLHL7ProfileHelper')->sortedBy(s|s.name))]
					[indentp()/]import [module.metaElementReference()/];[indentpEnd()/]
				[/for]
				[for(modelType:ModelType|documentedTransform.usedModelType->sortedBy(s|s.name))]
					[indentp()/]modeltype [modelType.name/] [if(not(modelType.conformanceKind.oclIsUndefined()))]"[modelType.conformanceKind/]"[/if] uses '[metamodel.nsURI/]';[indentpEnd()/]
				[/for]
				[if(documentedTransform.oclIsKindOf(OperationalTransformation))]
					[indentp()/]transformation [documentedTransform.name/](
					[for(modelParameter:ModelParameter|documentedTransform.oclAsType(OperationalTransformation).modelParameter)separator(',')]
						[modelParameter.kind/] [modelParameter.name/]:[modelParameter.eType.name/]
					[/for])
					;[indentpEnd()/]
				[/if]

	['Operation Descriptions'.contenth2(transformationChapter,descriptionsSection,'')/]
		[for(imperativeOperation:ImperativeOperation|operations)]
			[imperativeOperation.operationDetail(transformationChapter,descriptionsSection,operations->indexOf(imperativeOperation),documentedPackages)/]
		[/for]			
[/template]
[/comment]
[query public operationTitleName(operation:ImperativeOperation):String=
	'&lt;' + operation.eClass().name + '> ' + operation.operationName()
/]	
[query public operationTitleSortName(operation:ImperativeOperation):String=
	(if(operation.oclIsKindOf(MappingOperation))then 'a' else 'b' endif)
	+operation.eClass().name+':'+operation.name+'('+operation._context.eType.name+')'
/]	
[query public unwrapOperationBody(imperativeOperation : ImperativeOperation):Sequence(OCLExpression)=
	if(imperativeOperation._body.oclIsUndefined()) then Sequence{} else
		if(imperativeOperation.oclIsKindOf(MappingOperation)) then imperativeOperation._body.content.unwrapMappingExpression()
		else imperativeOperation._body.content endif
	endif
/]
[query public unwrapMappingExpression(expression: OCLExpression):Sequence(OCLExpression)=
	if(expression.oclIsKindOf(ObjectExp) 
		and not(expression.oclAsType(ObjectExp)._body.oclIsUndefined())
		and expression.oclAsType(ObjectExp).argument->isEmpty()
		) 
		then expression.oclAsType(ObjectExp)._body.content
		else Sequence{expression}
	endif
/]

[template public operationDetail(stereotype : ImperativeOperation,
	chapter:Integer,section:Integer,subsection:Integer,documentedPackages:Collection(ecore::EPackage),
	shadowUMLs:Sequence(Package)){
		shadowUML:Package=shadowUMLs->select(p|p.name=stereotype.eContainingClass.name)->asSequence()->first();
		shadowClass:Class=shadowUML.ownedType->select(p|p.oclIsKindOf(Class)).oclAsType(Class)->asSequence()->first();
		shadowOperation:Operation=shadowClass.ownedOperation->select(p|p.name=stereotype.name)->asSequence()->first();
		isDisjunct:Boolean=stereotype.oclIsKindOf(MappingOperation) and stereotype.oclAsType(MappingOperation).disjunct->notEmpty();
		unwrappedExpressions:Sequence(OCLExpression)=stereotype.unwrapOperationBody();
		hasBody:Boolean=unwrappedExpressions->notEmpty();
		assignExpressions:Sequence(AssignExp)=if(hasBody) then stereotype._body.allAssignExpressions() else Sequence{} endif; 
		isMappingOperation:Boolean=stereotype.oclIsKindOf(MappingOperation);
		initExpressions:Sequence(OCLExpression)=if(isMappingOperation) 
			then stereotype._body.oclAsType(MappingBody).initSection.unwrapMappingExpression() 
			else Sequence{} endif;
	}]
[comment]	
		when:Sequence(OCLExpression)=if(stereotype.oclIsKindOf(MappingOperation)) 
			then  stereotype.oclAsType(MappingOperation).when.oclAsType(OCLExpression) else Sequence{} endif;
	[stereotype.operationTitleName().contenth3(chapter,section,subsection,stereotype.metaElementAnchorBookmark())/]
	[stereotype.eContainingClass.oclAsType(Module).Module()/]
		[stereotype.overridden.Overridden()/]
	['Signature'.paragraph()/]
[/comment]	
		[indentpCode()/][stereotype.metaElementAnchorBookmark()/][stereotype.module_element(documentedPackages)/][indentpEnd()/]
	[comment] find description, if any, via shadowUML [/comment]
[comment]	
	[if(when->notEmpty())]
			['when'.paragraph()/]
				[indentp()/]
					{[1.startIndentedBlock()/]
							[for(expression:OCLExpression|when)separator(1.indentedEmptyP())]
								[expression.valueExpression(documentedPackages,1)/];
							[/for]
						[endIndentedBlock()/]
					}
				[indentpEnd()/]
	[/if]
[/comment]	
		[comment]
		[if(not(shadowOperation.oclIsUndefined()))]
			['Description'.paragraph()/]
			['/*'.paragraph()/]
			[shadowOperation.genUmlElementCommentsIndented()/]
			['*/'.paragraph()/]
		[/if]	
		[/comment]
	[if(not(isDisjunct))]
		[if(hasBody)]
		[comment]
			[if(assignExpressions->notEmpty())]
			['Target Abstract'.paragraph()/]
				['Target Abstract'.indentTable()/]
					[for(expression:AssignExp|assignExpressions)]
						[expression.expressionRow(documentedPackages)/]
					[/for]
					[if(stereotype.oclIsKindOf(Helper) 
						and stereotype.result->notEmpty()
						and not(stereotype._body.oclIsUndefined())
						)]
						[stereotype.returnImmediateExpressionRow(documentedPackages)/]
					[/if]
				[indentTableEnd()/]
				[comment][emptyP()/][/comment]
			[/if]	
		[/comment]
		[comment]
			['Body'.paragraph()/]
		[/comment]		
[comment]				
					[stereotype._body.expression_block(documentedPackages)/]
unwrappedExpressions					
[/comment]					
				[indentpCode()/]
					{[1.startIndentedBlock()/]
						[if(initExpressions->notEmpty())]
							init{[2.startIndentedBlock()/]
							[for(expression:OCLExpression|initExpressions)separator(2.indentedEmptyP())]
								[expression.valueExpression(documentedPackages,2)/];
							[/for]
							[2.indentedEmptyP()/]
							[endIndentedBlock()/]
						}[/if]
							[for(expression:OCLExpression|unwrappedExpressions)separator(1.indentedEmptyP())]
								[expression.valueExpression(documentedPackages,1)/];
								[comment][1.indentedEmptyP()/][/comment]
							[/for]
						[endIndentedBlock()/]
					}
				[indentpEnd()/]
				[comment][emptyP()/][/comment]
			[/if]
		[/if]
[/template]
[template public genUmlElementCommentsIndentedQVT(element:Element){
	umlComments:Collection(Comment)=element.ownedComment;
}]
[for(umlcomment:Comment | umlComments)][umlcomment._body.displayHtmlQVT()/][/for]
[/template]		
[comment]
	.convertAnchors()
[/comment]
[query public displayHtmlQVT(value:String):String=
	value
	.removeHtmlHead()
	.replaceAll(' style="[^"]*"','')
	.replaceAll('<dl[^>]*>','')
	.replaceAll('</dl>','')
	.replaceAll('<dd[^>]*>','')
	.replaceAll('</dd>','')
	.replaceAll('<em[^>]*>','')
	.replaceAll('</em>','')
	.replaceAll('<code[^>]*>','')
	.replaceAll('</code>','')
	.replaceAll('<!--[^>]*>','')
	.replaceAll('<td[^>]*>','')
	.replaceAll('</td>','')
	.replaceAll('<tr[^>]*>','')
	.replaceAll('</tr>','')
	.replaceAll('<table [^>]*>','')
	.replaceAll('</table>','')
	.replaceAll('<COL[^>]*>','')

	.replaceAll('<font[^>]* color="#ff0000"[^>]*>','')
	.replaceAll('<font[^>]* color="#0000ff"[^>]*>','')
	.replaceAll('<font[^>]*>','')
	.replaceAll('</font>','')
	.replaceAll('<span[^>]*>','')
	.replaceAll('</span>','')
	.replaceAll('<i>','')
	.replaceAll('</i>','')
	.replaceAll('<u>','')
	.replaceAll('</u>','')
	.replaceAll('<b>','')
	.replaceAll('</b>','')
	
	.replaceAll('</li>','')
	.replaceAll('<ul>','')
	.replaceAll('<ol[^>]*>','')
	.replaceAll('</ul>','')
	.replaceAll('</ol>','')
	.replaceAll('<br/>','')
	.replaceAll('<br>','')
	.replaceAll('<p[^>]*>','')
	.replaceAll('</p>','')
	.replaceAll('<a[^>]*>','')
	.replaceAll('</a>','')
	.replaceAll('<html>','')
	.replaceAll('</html>','')
	.replaceAll('<body>','')
	.replaceAll('</body>','')
		

	.replaceAll('&quot;','"')
	.replaceAll('&lt;','<')
	.replaceAll('&gt;','>')
	.replaceAll('\\n\\s*<li[^>]*>\\s*\\n','<li>')
	.replaceAll('<li[^>]*>\\s*','\n * ')
	.replaceAll('\\n\\s*\\n','')
/]	

[template public operationDetailQVT(stereotype : ImperativeOperation,shadowUMLs:Sequence(Package)){
	shadowUML:Package=shadowUMLs->select(p|p.name=stereotype.eContainingClass.name)->asSequence()->first();
	shadowClass:Class=shadowUML.ownedType->select(p|p.oclIsKindOf(Class)).oclAsType(Class)->asSequence()->first();
	shadowOperation:Operation=shadowClass.ownedOperation->select(p|p.name=stereotype.name)->asSequence()->first();
	isDisjunct:Boolean=stereotype.oclIsKindOf(MappingOperation) and stereotype.oclAsType(MappingOperation).disjunct->notEmpty();
	unwrappedExpressions:Sequence(OCLExpression)=stereotype.unwrapOperationBody();
	hasBody:Boolean=unwrappedExpressions->notEmpty();
	isMappingOperation:Boolean=stereotype.oclIsKindOf(MappingOperation);
	initExpressions:Sequence(OCLExpression)=if(isMappingOperation) 
		then stereotype._body.oclAsType(MappingBody).initSection.unwrapMappingExpression() 
		else Sequence{} endif;
}]
[if(not(shadowOperation.oclIsUndefined()))]
/* [shadowOperation.genUmlElementCommentsIndentedQVT()/]
*/
[/if]	
[stereotype.module_elementQVT()/]
 {
[if(not(isDisjunct))][if(hasBody)][if(initExpressions->notEmpty())]
	init{
[for(expression:OCLExpression|initExpressions)]
	 [expression.valueExpressionQVT()/];
[/for]
    }
[/if]
[for(expression:OCLExpression|unwrappedExpressions)]
	[expression.valueExpressionQVT()/];
[/for][/if][/if]
 }
 
 [/template]

[comment]				
[template public expression_block(operationBody:OperationBody,documentedPackages:Collection(ecore::EPackage))]
	{
		[1.startIndentedBlock()/]
			[for(expression:OCLExpression|operationBody.content)]
				[expression.valueExpression(documentedPackages,1)/];[comment][emptyP()/][/comment]
				[1.indentedEmptyP()/]
			[/for]
		[endIndentedBlock()/]
	}
		
[/template]
[/comment]					
[template public indentTabs(tabs:Integer)][for(index:Integer|Sequence{1..tabs})]<text:tab/>[/for][/template]
[query public indentedEmptyP(tabs:Integer):String=tabs.startIndentedBlock()/]
[query public startIndentedBlock(tabs:Integer):String=indentpEnd()+indentpCode()+tabs.indentTabs()/]
[query public endIndentedBlock():String=indentpEnd()+indentpCode()/]
[query public allExpressionObjects(expression:OCLExpression,documentedPackages:Collection(ecore::EPackage)):Set(ecore::EObject)=
	expression.allExpressions().expressionObjects(documentedPackages)
/]
[query public expressionObjects(expression:OCLExpression,documentedPackages:Collection(ecore::EPackage)):Set(ecore::EObject)=
	if(expression.oclIsKindOf(PropertyCallExp))then
		expression.oclAsType(PropertyCallExp).objectPropertyCallExps()
	else if(expression.oclIsKindOf(OperationCallExp))then
		expression.oclAsType(OperationCallExp).objectOperationCallExps()
	else if(expression.oclIsKindOf(VariableExp))then
		expression.oclAsType(VariableExp).objectVariableExps()
	else if(expression.oclIsKindOf(InstantiationExp))then
		expression.oclAsType(InstantiationExp).objectInstantiationExps()
	else if(expression.oclIsKindOf(IteratorExp))then
		expression.oclAsType(IteratorExp).objectIteratorExps()
	else Set(OCLExpression){}
	endif endif endif endif endif 
/]
[query public objectIteratorExps(expression:IteratorExp):Set(ecore::EObject)=
	Set(ecore::EObject){} 
/]

[query public objectInstantiationExps(expression:InstantiationExp):Set(ecore::EObject)=
	Set(ecore::EObject){expression.instantiatedClass} 
/]
[query public objectVariable(expression:ocl.ecore::Variable):Set(ecore::EObject)=
	if(expression.representedParameter.oclIsUndefined())then Set(ecore::EObject){} 
	else 
		if(expression.representedParameter.oclIsKindOf(VarParameter))then 
			expression.representedParameter.oclAsType(VarParameter).objectVarParameter() 
		else 
			Set(ecore::EObject){expression.representedParameter} 
		endif 
	endif 
/]
[query public objectVarParameter(expression:VarParameter):Set(ecore::EObject)=
	if(expression.representedParameter.oclIsUndefined())then Set(ecore::EObject){} 
	else 
		if(expression.representedParameter.oclIsKindOf(VarParameter) and not(expression.representedParameter.oclAsType(VarParameter).eType.oclIsUndefined()))then 
			Set(ecore::EObject){expression.representedParameter.oclAsType(VarParameter).eType} 
		else 
			Set(ecore::EObject){expression.representedParameter} 
		endif 
	endif 
/]

[query public objectVariableExps(expression:ocl.ecore::VariableExp):Set(ecore::EObject)=
	if(expression.referredVariable.oclIsUndefined())then Set(ecore::EObject){} 
	else expression.referredVariable.toOclVariable().objectVariable() endif 
/]
[query public toOclVariable(expression:OclAny):ocl.ecore::Variable=self/]

[query public objectOperationCallExps(expression:OperationCallExp):Set(ecore::EObject)=
	if(expression.referredOperation.oclIsUndefined() 
		or not(expression.referredOperation.oclIsKindOf(ecore::EOperation))
		or (expression.referredOperation.oclAsType(ecore::EOperation).eType.oclIsUndefined())
	)then Set(ecore::EObject){} 
	else Set(ecore::EObject){expression.referredOperation,expression.referredOperation.oclAsType(ecore::EOperation).eType} endif
	->union(
		if(expression.referredOperation.oclIsUndefined())then Set(ecore::EObject){} else Set(ecore::EObject){expression.referredOperation} endif 
	) 
	->union(
		if(expression.referredOperation.oclIsUndefined()
			or not(expression.referredOperation.oclIsKindOf(ecore::EOperation)))
		then Set(ecore::EObject){} 
		else expression.referredOperation.oclAsType(EOperation).eParameters.eType->asSet() endif 
	) 
/]

[query public objectPropertyCallExps(expression:PropertyCallExp):Set(ecore::EObject)=
	if(expression.navigationSource.oclIsUndefined())then Set(ecore::EObject){} else Set(ecore::EObject){expression.navigationSource} endif 
	->union(if(expression.referredProperty.oclIsUndefined())then Set(ecore::EObject){} else Set(ecore::EObject){expression.referredProperty} endif)
/]

[query public allExpressions(expression:OCLExpression):Set(OCLExpression)=
	Set(OCLExpression){expression}
	->union(expression.containedExpressions().allExpressions())
/]
[comment]
		and not(eobject.oclIsKindOf(ocl.ecore::Variable))
[/comment]
[query public isSummarized(eobject:ecore::EObject):Boolean=
	if(eobject.oclIsKindOf(ecore::EStructuralFeature)
		and (eobject.oclAsType(ecore::EStructuralFeature).eContainingClass.ePackage.name<>'oclstdlib')
		and (eobject.oclAsType(ecore::EStructuralFeature).eContainingClass.ePackage.name<>'Stdlib')
		and not(eobject.oclIsKindOf(Variable))
		and not(eobject.oclAsType(ecore::EStructuralFeature).eContainingClass.eContainer().oclIsUndefined())
	)then true
	else 
		if(eobject.oclIsKindOf(ecore::EClass)
		)then true
		else 
			false
		endif	
	endif	
/]

[template public expressionRow(expression:AssignExp,documentedPackages:Collection(ecore::EPackage)){
	summarizedObjects:Collection(ecore::EObject)=expression.value.allExpressionObjects(documentedPackages)->select(e|e.isSummarized());
}]
	[startTableRow()/]
		[expression.left.abstractLeftExpression(documentedPackages).tdNormal()/]
		[tdNormalStart()/]
			[if (summarizedObjects->notEmpty())]
				[italic()/]f([spanEnd()/]
			[for (eobject:ecore::EObject|summarizedObjects)separator(',')]
				[eobject.summarize(documentedPackages)/]
			[/for]
				[italic()/])[spanEnd()/]
			[/if]
		[tdEnd()/]
	[endTableRow()/]
[/template]

[template public operationDescriptionComment(umlcomment : Comment)]
	[if(not(umlcomment.oclIsUndefined()))][newP()/][umlcomment._body.displayHtmlUMLIndentedInline()/][/if][/template]
[template public operationDescription(operation : ImperativeOperation,documentedPackages:Collection(EPackage),shadowUMLs:Sequence(Package)){
	mappingOperation:MappingOperation=if(operation.oclIsKindOf(MappingOperation)) then operation.oclAsType(MappingOperation) else null endif;
	inherits:OrderedSet(MappingOperation)=mappingOperation.inherited;
	disjuncts:OrderedSet(MappingOperation)=mappingOperation.disjunct;
	overrides:ImperativeOperation=operation.overridden;
		shadowOperation:Operation=operation.shadowOperation(shadowUMLs);
		precondition:Constraint=shadowOperation.precondition->asSequence()->first();
		shadowContextParameter:Parameter=shadowOperation.ownedParameter->select(p|p.direction=ParameterDirectionKind::_in)
			->first();
		shadowReturnParameter:Parameter=shadowOperation.ownedParameter->select(p|p.direction=ParameterDirectionKind::return)->first();
		shadowContext:Stereotype=shadowContextParameter.clientDependency->select(d|d.oclIsKindOf(Realization)).supplier
			->select(s|s.oclIsKindOf(Stereotype)).oclAsType(Stereotype)->asSequence()->first();
		shadowReturn:Stereotype=shadowReturnParameter.clientDependency->select(d|d.oclIsKindOf(Realization)).supplier
			->select(s|s.oclIsKindOf(Stereotype)).oclAsType(Stereotype)->asSequence()->first();
	
}]
[comment]
	[operation.operationTitleName().paragraph()/]
[/comment]
[shadowOperation.elementAnchorPoint()/]
	[indentp()/]also see QVT [operation.metaElementReference()/][indentpEnd()/]
		['OperationDescription'.indentTable()/]
		[startTableRow()/]['description'.tdBold()/]
			[tdNormalStart()/][shadowOperation.genUmlElementCommentsIndentedInline()/][tdEnd()/]
		[endTableRow()/]
		[if(inherits->notEmpty())]
			[startTableRow()/]['inherits'.tdBold()/]
				[tdCellStart()/]
					[ul()/]
					[for(general:MappingOperation|inherits)]
						[general.elementDescriptionReference().li()/]
					[/for]
					[ulEnd()/]	
				[tdCellEnd()/]
			[endTableRow()/]
		[/if]	
		[if(disjuncts->notEmpty())]
			[startTableRow()/]['disjuncts'.tdBold()/]
				[tdCellStart()/]
					[ul()/]
					[for(general:MappingOperation|disjuncts)]
						[general.elementDescriptionReference().li()/]
					[/for]
					[ulEnd()/]	
				[tdCellEnd()/]
			[endTableRow()/]
		[/if]
[comment]			
		[if(not(overrides.oclIsUndefined()))]
		[startTableRow()/]['overrides'.tdBold()/]
			[tdNormalStart()/]
					[overrides.elementDescriptionReference()/]
			[tdEnd()/]
		[endTableRow()/]
		[/if]
[/comment]			
		[if(not(operation._context.eType.oclIsUndefined()))]
		[startTableRow()/]['context'.tdBold()/]
			[tdNormalStart()/][shadowContext.shadowStereotype()/][bold()/]&lt;[operation._context.eType.name/]>[spanEnd()/]
			[if(not(shadowContextParameter.oclIsUndefined()))]
			[shadowContextParameter.ownedComment.operationDescriptionComment()/][/if]
			[tdEnd()/]
		[endTableRow()/]
		[/if]
		[for(param:EParameter|operation.eParameters)]
			[startTableRow()/]['parameter'.tdBold()/]
				[tdNormalStart()/][bold()/][param.name/]:[param.eType.name/][spanEnd()/]
				[tdEnd()/]
			[endTableRow()/]
		[/for]

		[for(resultParam:EParameter|operation.result)]
		[startTableRow()/]['result'.tdBold()/]
			[tdNormalStart()/][shadowReturn.shadowStereotype()/][bold()/]&lt;[resultParam.eType.name/]>[spanEnd()/]
			[if(not(shadowReturnParameter.oclIsUndefined()))]
			[shadowReturnParameter.ownedComment.operationDescriptionComment()/][/if]
			[tdEnd()/]
		[endTableRow()/]
		[/for]

		[if(not(precondition.oclIsUndefined()))]
		[startTableRow()/]['when'.tdBold()/]
			[tdNormalStart()/][precondition.genUmlElementCommentsIndentedInline()/][tdEnd()/]
		[endTableRow()/]
		[/if]
	[indentTableEnd()/]
[/template]

[template public operationDescriptionRow(operation : ImperativeOperation,documentedPackages:Collection(EPackage),shadowUMLs:Sequence(Package))]
	[startTableRow()/]
		[tdNormalStart()/]
			[operation.metaElementReference()/]
		[tdEnd()/]
		[tdCellStart()/][operation.shadowOperationDescription(documentedPackages,shadowUMLs)/][tdCellEnd()/]
	[endTableRow()/]
[/template]
[query public shadowOperationPackage(operation : ImperativeOperation,shadowUMLs:Sequence(Package)):Package=
	shadowUMLs->select(p|p.name=operation.eContainingClass.name)->asSequence()->first()
/]
[query public shadowOperationClass(operation : ImperativeOperation,shadowUMLs:Sequence(Package)):Class=
	operation.shadowOperationPackage(shadowUMLs).ownedType->select(p|p.oclIsKindOf(Class)).oclAsType(Class)->asSequence()->first()
/]
[query public shadowOperation(operation : ImperativeOperation,shadowUMLs:Sequence(Package)):Operation=
	operation.shadowOperationClass(shadowUMLs).ownedOperation->select(p|p.name=operation.name)->asSequence()->first()
/]

[template public shadowOperationDescription(operation : ImperativeOperation,documentedPackages:Collection(EPackage),shadowUMLs:Sequence(Package)){
		shadowOperation:Operation=operation.shadowOperation(shadowUMLs);
}]
	[shadowOperation.genUmlElementCommentsIndented()/]
[/template]
[template public disjunctiveHighlight(isDisjunctive:Boolean)][if(isDisjunctive)][italic()/][/if][/template]
[template public disjunctiveHighlightEnd(isDisjunctive:Boolean)][if(isDisjunctive)][spanEnd()/][/if][/template]
[template public shadowStereotype(shadowStereotype:Stereotype)]
	[if(not(shadowStereotype.oclIsUndefined()))]&lt;&lt;[shadowStereotype.umlclassReference()/]>>[newP()/][/if][/template]

[template public mappingRule(mappingOperation : MappingOperation,
	documentedPackages:Collection(EPackage),
	operations:Collection(ImperativeOperation),shadowUMLs:Sequence(Package)){
		disjuncts:OrderedSet(MappingOperation)=mappingOperation.disjunct;
		isDisjuncts:Boolean=disjuncts->notEmpty();
}]
	[if(isDisjuncts)][disjuncts.mappingRule(documentedPackages,operations,shadowUMLs)/]
	[else][mappingOperation.mappingRuleRow(documentedPackages,operations,shadowUMLs)/]
	[/if]
[/template]

[template public mappingRuleRow(mappingOperation : MappingOperation,
	documentedPackages:Collection(EPackage),
	operations:Collection(ImperativeOperation),shadowUMLs:Sequence(Package)){
		when:Sequence(OCLExpression)=mappingOperation.when.oclAsType(OCLExpression);
		isDisjuncts:Boolean=mappingOperation.disjunct->notEmpty();
		shadowOperation:Operation=mappingOperation.shadowOperation(shadowUMLs);
		precondition:Constraint=shadowOperation.precondition->asSequence()->first();
		shadowContext:Stereotype=shadowOperation.ownedParameter->select(p|p.direction=ParameterDirectionKind::_in)
			->first()
			.clientDependency->select(d|d.oclIsKindOf(Realization)).supplier
			->select(s|s.oclIsKindOf(Stereotype)).oclAsType(Stereotype)->asSequence()->first();
		shadowReturn:Stereotype=shadowOperation.ownedParameter->select(p|p.direction=ParameterDirectionKind::return)
			.clientDependency->select(d|d.oclIsKindOf(Realization)).supplier
			->select(s|s.oclIsKindOf(Stereotype)).oclAsType(Stereotype)->asSequence()->first();
			
}]
[comment]hyperlink to code, doc; allow uml operation to add stereotype info, perhaps constraint for when text[/comment]
	[startTableRow()/]
		[tdNormalStart()/]
			[shadowContext.shadowStereotype()/]
			&lt;[mappingOperation._context.eType.name/]>
		[tdEnd()/]
		[tdNormalStart()/]
			[comment]
			
			[isDisjuncts.disjunctiveHighlight()/]
			[isDisjuncts.disjunctiveHighlightEnd()/]
				[for(expression:OCLExpression|when)separator(2.indentedEmptyP())]
					[expression.valueExpression(documentedPackages,2)/];
				[/for]
			[isDisjuncts.disjunctiveHighlightEnd()/]
			[mappingOperation.name/]
			[isDisjuncts.disjunctiveHighlight()/]
			[isDisjuncts.disjunctiveHighlightEnd()/]
			[/comment]
			[mappingOperation.elementDescriptionReference()/]
			[if(not(precondition.oclIsUndefined()))]
				[newP()/]
				[italic()/] when [spanEnd()/] [precondition.genUmlElementCommentsIndentedInline()/]
			[/if]
		[tdEnd()/]
		[tdNormalStart()/]
			[shadowReturn.shadowStereotype()/]
			&lt;[mappingOperation.result.eType.name/]>
		[tdEnd()/]
	[endTableRow()/]
[/template]
[template public targetUsageRow(sf : ecore::EStructuralFeature,documentedPackages:Collection(EPackage),operations:Collection(ImperativeOperation))]
	[startTableRow()/]
		[tdNormalStart()/]
		[sf.eContainingClass.ePackage.metaPackageNameOMG()/]::[sf.eContainingClass.name/]::[sf.name/]
		[tdEnd()/]
		[tdNormalStart()/]
		</text:p>[ul()/]
		[for (operation:ImperativeOperation|sf.allUsingTargetOperations(documentedPackages,operations))]
			[operation.operationReference(documentedPackages).li()/]
		[/for]
		[ulEnd()/]<text:p>	
		[tdEnd()/]
	[endTableRow()/]
[/template]
[template public sourceUsageRow(sf : ecore::ENamedElement,documentedPackages:Collection(EPackage),operations:Collection(ImperativeOperation))]
	[startTableRow()/]
		[tdNormalStart()/]
		[if(sf.oclIsKindOf(ecore::EClassifier))]
			[sf.oclAsType(ecore::EClassifier).classReference(documentedPackages)/]
		[elseif(sf.oclIsKindOf(ecore::EStructuralFeature))]
			[sf.oclAsType(ecore::EStructuralFeature).eContainingClass.classReference(documentedPackages)/]
			::[sf.oclAsType(ecore::EStructuralFeature).metaReference(documentedPackages)/]
		[else]
		[sf.metaReference(documentedPackages)/]
		[/if]
		[tdEnd()/]
		[tdNormalStart()/]
		</text:p>[ul()/]
		[for (operation:ImperativeOperation|sf.allUsingOperations(documentedPackages,operations))]
			[operation.operationReference(documentedPackages).li()/]
		[/for]
		[ulEnd()/]<text:p>	
		[tdEnd()/]
	[endTableRow()/]
[/template]

[template public summarize(eobject:ecore::EObject,documentedPackages:Collection(ecore::EPackage))]
	[if(eobject.oclIsKindOf(EStructuralFeature))]
	[eobject.oclAsType(ecore::EStructuralFeature).eContainingClass.classReference(documentedPackages)/]::
	[eobject.oclAsType(ecore::EStructuralFeature).name/]
	[elseif(eobject.oclIsKindOf(EClass))]
	[eobject.oclAsType(ecore::EClass).classReference(documentedPackages)/]
	[else]
		[if(eobject.oclIsKindOf(ecore::ENamedElement))][eobject.oclAsType(ecore::ENamedElement).name/]::[/if][eobject.eClass().name/]
	[/if]
[/template]

[template public abstractLeftExpression(expression:OCLExpression,documentedPackages:Collection(ecore::EPackage))]
	[if(expression.oclIsKindOf(PropertyCallExp))]
		[expression.oclAsType(PropertyCallExp).abstractPropertyCallExpression(documentedPackages)/]
	[else]
		[expression.eClass().name/]	
	[/if]
[/template]
[template public abstractPropertyCallExpression(expression:PropertyCallExp,documentedPackages:Collection(ecore::EPackage))]
	[expression.referredProperty.oclAsType(ecore::EStructuralFeature).eContainingClass.classReference(documentedPackages)/]::
	[expression.referredProperty.oclAsType(ecore::EStructuralFeature).name/]
[/template]

[template public returnImmediateExpressionRow(operation : ImperativeOperation,documentedPackages:Collection(ecore::EPackage)){
	summarizedObjects:Set(ecore::EObject)=operation._body.content.allExpressionObjects(documentedPackages)->select(e|e.isSummarized())->asSet();
}]
	[startTableRow()/]
		[tdNormalStart()/]
			[for (eobject:ecore::EObject|operation.result.eType)separator(',')]
				[eobject.summarize(documentedPackages)/]
			[/for]
		[tdEnd()/]
		[tdNormalStart()/]
			[if (summarizedObjects->notEmpty())]
				[italic()/]f([spanEnd()/]
					[for (eobject:ecore::EObject|summarizedObjects)separator(',')]
						[eobject.summarize(documentedPackages)/]
					[/for]
				[italic()/])[spanEnd()/]
			[comment]
			[expression.valueExpression(documentedPackages)/]
			[/comment]
			[/if]
		[tdEnd()/]
	[endTableRow()/]
[/template]

[query public allAssignExpressions(operationBody:OperationBody):Sequence(AssignExp)=
	operationBody.content.allExpressions()
	->union(
		if(operationBody.oclIsKindOf(MappingBody))
		then(operationBody.oclAsType(MappingBody).initSection.allExpressions()
			->union(operationBody.oclAsType(MappingBody).endSection.allExpressions())
			->flatten()
			)
		else(Sequence(OCLExpression){})
		endif
	)
	->select(e|
		e.oclIsKindOf(AssignExp) 
		and e.oclAsType(AssignExp).left.oclIsKindOf(PropertyCallExp)
		and e.oclAsType(AssignExp).left.oclAsType(PropertyCallExp).referredProperty.oclIsKindOf(ecore::EStructuralFeature)
		and not(e.oclAsType(AssignExp).left.oclAsType(PropertyCallExp).referredProperty.oclAsType(ecore::EStructuralFeature).eContainingClass.eContainer().oclIsUndefined())
	)
/]	
[template public module_elementQVT(element:ecore::EModelElement)
][if(element.oclIsKindOf(MappingOperation))][element.oclAsType(MappingOperation).mappingQVT()/]
[elseif(element.oclIsKindOf(Helper))][element.oclAsType(Helper).helperQVT()/]
[elseif(element.oclIsKindOf(Constructor))][element.oclAsType(Constructor).constructorQVT()/]
[elseif(element.oclIsKindOf(EntryOperation))][element.oclAsType(EntryOperation).entryOperationQVT()/]
[/if][/template]
[template public mappingQVT(element:MappingOperation)][element.mapping_full_headerQVT()/][/template]
[template public helperQVT(element:Helper)][element.helper_headerQVT()/][/template]
[template public mapping_full_headerQVT(element:MappingOperation)][element.mapping_headerQVT()/][/template]
[comment]
[query public mapping_headerQVT(element:MappingOperation):String=
	element.qualifiersQVT()+'mapping '+element.scoped_identifierQVT()+element.complete_signatureQVT()+element.mapping_extrasQVT()/]
[/comment]
[template public mapping_headerQVT(element:MappingOperation)]
[element.qualifiersQVT()/]mapping [element.scoped_identifierQVT()/][element.complete_signatureQVT()/]
 [element.mapping_extrasQVT()/][/template]	
[query public qualifiersQVT(element:ecore::EModelElement):String=
	if(element.oclIsKindOf(ImperativeOperation) and element.oclAsType(ImperativeOperation).isBlackbox) 
	then 'blackbox '
	else if(element.oclIsKindOf(Module) and element.oclAsType(Module).isBlackbox)
		then 'blackbox '
		else if(element.oclIsKindOf(ecore::EClass) and element.oclAsType(ecore::EClass).abstract)
			then 'abstract '
			else ''
			endif
		endif
	endif
/]		

[comment]	
[template public qualifiersQVT(element:ecore::EModelElement)
][if(element.oclIsKindOf(ImperativeOperation) and element.oclAsType(ImperativeOperation).isBlackbox)]blackbox [/if
][if(element.oclIsKindOf(Module) and element.oclAsType(Module).isBlackbox)]blackbox [/if
][if(element.oclIsKindOf(ecore::EClass) and element.oclAsType(ecore::EClass).abstract)]abstract [/if
][/template]
[/comment]	
[template public breakQVT()]

[/template]
[template public mapping_extrasQVT(element:MappingOperation){
		when:Sequence(OCLExpression)=element.when.oclAsType(OCLExpression);
}]
[if(element.disjunct->notEmpty())]
 disjunct [for (identifier:ecore::ENamedElement|element.disjunct)separator(','+breakQVT()+' ')][identifier.scoped_identifierQVT()/][/for][/if][if(element.inherited->notEmpty())]
 inherits [for (identifier:ecore::ENamedElement|element.inherited)separator(','+breakQVT()+' ')][identifier.scoped_identifierQVT()/][/for][/if][if(when->notEmpty())]
 
 when{[for(expression:OCLExpression|when)separator(breakQVT()+' ')][expression.valueExpressionQVT()/];[/for]}[/if][/template]

[template public declaratorQVT(element:VarParameter)][element.scoped_identifierQVT()/] : [element.typespecQVT()/] [element.init_partQVT()/][/template]
[template public typespecQVT(element:VarParameter)][element.eType.scoped_identifierQVT()/][/template]
[template public init_partQVT(element:VarParameter)][/template]

[template public constructorQVT(element:Constructor)][element.constructor_headerQVT()/][/template]
[template public constructor_headerQVT(element:Constructor)][element.qualifiersQVT()/] constructor [element.scoped_identifierQVT()/] [element.simple_signatureQVT()/][/template]
[template public entryOperationQVT(element:EntryOperation)][element.entry_headerQVT()/][/template]
[template public entry_headerQVT(element:EntryOperation)]main [element.simple_signatureQVT()/][/template]

[template public helper_headerQVT(element:Helper)][element.helper_infoQVT()/] [element.scoped_identifierQVT()/] [element.complete_signatureQVT()/][/template]
[template public complete_signatureQVT(element:ImperativeOperation)][element.simple_signatureQVT()/][if(element.result->notEmpty())] : [for(param:VarParameter|element.result)separator(',')][param.declaratorQVT()/][/for][/if][/template]
[template public helper_infoQVT(element:Helper)][element.qualifiersQVT()/] [element.helper_kindQVT()/][/template]
[template public helper_kindQVT(element:Helper)][if(element.isQuery)]query[else]helper[/if][/template]
[query public scoped_identifierQVT(element:ecore::ENamedElement):String=
	if(element.oclIsKindOf(ImperativeOperation) and not(element.oclAsType(ImperativeOperation)._context.oclIsUndefined())) 
	then (element.oclAsType(ImperativeOperation)._context.eType.scoped_identifierQVT()+'::'+element.metaElementReferenceQVT())
	else if(element.oclIsKindOf(ecore::EClassifier)) 
		then element.oclAsType(ecore::EClassifier).classReferenceQVT()
		else element.name
		endif
	endif	
/]
[template public simple_signatureQVT(element:ImperativeOperation)]([element.param_listQVT()/])[/template]
[template public param_listQVT(element:ImperativeOperation)][for(param:VarParameter|element.eParameters->select(p|p.oclIsKindOf(VarParameter)))separator(',')][param.paramQVT()/][/for][/template]
[template public paramQVT(element:VarParameter)][element.kind/] [element.declaratorQVT()/][/template]

[template public module_element(element:ecore::EModelElement,documentedPackages:Collection(ecore::EPackage))
][if(element.oclIsKindOf(MappingOperation))][element.oclAsType(MappingOperation).mapping(documentedPackages)/]
[elseif(element.oclIsKindOf(Helper))][element.oclAsType(Helper).helper(documentedPackages)/]
[elseif(element.oclIsKindOf(Constructor))][element.oclAsType(Constructor).constructor(documentedPackages)/]
[elseif(element.oclIsKindOf(EntryOperation))][element.oclAsType(EntryOperation).entryOperation(documentedPackages)/]
[/if][/template]
[query public allOperationalSourceUsages(operation : ImperativeOperation,documentedPackages:Collection(ecore::EPackage)):Sequence(ecore::ENamedElement)=
	if(operation._body.oclIsUndefined()) then Sequence(ecore::ENamedElement){} 
	else operation._body.content.allExpressionObjects(documentedPackages)->select(s|s.isSourceObject(documentedPackages)).oclAsType(ecore::ENamedElement)
	endif
/]
[query public isSourceObject(eobject : ecore::EObject,documentedPackages:Collection(ecore::EPackage)):Boolean=
	if(eobject.oclIsKindOf(ecore::EStructuralFeature)
		and (eobject.oclAsType(ecore::EStructuralFeature).eContainingClass.ePackage.isPackageMatch(documentedPackages))
	)then true
	else 
		if(eobject.oclIsKindOf(ecore::EClass) and (eobject.oclAsType(ecore::EClass).ePackage.isPackageMatch(documentedPackages))
		)then true
		else 
			false
		endif	
	endif	
/]
[query public isPackageMatch(eobject : ecore::EPackage,documentedPackages:Collection(ecore::EPackage)):Boolean=
	(eobject.name='xsd') or (eobject.name='mpdcat')
/]

[query public allOperationalTargetUsages(operation : ImperativeOperation,documentedPackages:Collection(ecore::EPackage)):Sequence(ecore::EStructuralFeature)=
	if(operation._body.oclIsUndefined()) then Sequence(ecore::EstructuralFeature){} 
	else operation._body.allAssignExpressions().left.allAssignTargetUsages(documentedPackages) endif
/]
[query public allAssignTargetUsages(expression : OCLExpression,documentedPackages:Collection(ecore::EPackage)):Sequence(ecore::EStructuralFeature)=
	if(expression.oclIsKindOf(PropertyCallExp)) then expression.oclAsType(PropertyCallExp).allPropertyCallExpTargetUsages(documentedPackages) 
	else Sequence(ecore::EstructuralFeature){} endif
/]
[query public sourceSortValue(eobject : ecore::ENamedElement):String=
	if(eobject.oclIsKindOf(ecore::EStructuralFeature)) then 
		(eobject.oclAsType(ecore::EStructuralFeature).eContainingClass.ePackage.metaPackageNameOMG()+'::'+eobject.oclAsType(ecore::EStructuralFeature).eContainingClass.name+'::'+eobject.oclAsType(ecore::EStructuralFeature).name) 
	else 
		if(eobject.oclIsKindOf(ecore::EClassifier)) then 
			(eobject.oclAsType(ecore::EClassifier).ePackage.metaPackageNameOMG()+'::'+eobject.oclAsType(ecore::EClassifier).name) 
			
		else 
			eobject.name 
		endif
	endif
/]
[query public allUsingTargetOperations(sf : ecore::ENamedElement,documentedPackages:Collection(EPackage),operations:Collection(ImperativeOperation)):Set(ImperativeOperation)=
	operations->select(o|o.allOperationalTargetUsages(documentedPackages)->includes(sf))
/]
[query public allPropertyCallExpTargetUsages(expression : PropertyCallExp,documentedPackages:Collection(ecore::EPackage)):Sequence(ecore::EStructuralFeature)=
	if(expression.referredProperty.oclIsUndefined()) then Sequence(ecore::EStructuralFeature){} 
	else Sequence(ecore::EstructuralFeature){expression.referredProperty} endif
/]
[query public allUsingOperations(sf : ecore::ENamedElement,documentedPackages:Collection(EPackage),operations:Collection(ImperativeOperation)):Set(ImperativeOperation)=
	operations->select(o|o.allOperationalSourceUsages(documentedPackages)->includes(sf))
/]
[comment]
[template public transformOverview(transformationSpecificationPart:Component,chapter:Integer,sectionOffset:Integer,
	documentedPackages:Sequence(ecore::EPackage),documentedTransforms:Sequence(Module)){
	documentedOperations:Sequence(ImperativeOperation)=documentedTransforms.eOperations
		->select(o|o.oclIsKindOf(ImperativeOperation)).oclAsType(ImperativeOperation)->sortedBy(s|s.operationName());
	allMappingOperations:Sequence(MappingOperation)=documentedOperations
		->select(m|m.oclIsKindOf(MappingOperation)).oclAsType(MappingOperation);
	topMappingOperations:Sequence(MappingOperation)=allMappingOperations
		->select(m|m.inherited->isEmpty());
	allSourceUsages:Sequence(ecore::ENamedElement)=documentedOperations.allOperationalSourceUsages(documentedPackages)
		->asSet()->asSequence()->sortedBy(s|s.sourceSortValue());	
	allTargetUsages:Sequence(ecore::EStructuralFeature)=documentedOperations.allOperationalTargetUsages(documentedPackages)
		->asSet()->asSequence()->sortedBy(s|s.sourceSortValue());	
	transformChapters:Sequence(Component)=	transformationSpecificationPart.part.type->select(c|c.oclIsKindOf(Component)).oclAsType(Component)->sortedBy(c|c.name);
}]
	['Source Usage'.contenth2(chapter,sectionOffset+1,'')/]
		['Source Usage'.indentTable()/]
			[for(eobject:ecore::ENamedElement|allSourceUsages)]
				[eobject.sourceUsageRow(documentedPackages,documentedOperations)/]
			[/for]
		[indentTableEnd()/]
	['Target Usage'.contenth2(chapter,sectionOffset+2,'')/]
		['Target Usage'.indentTable()/]
			[for(eobject:ecore::EStructuralFeature|allTargetUsages)]
				[eobject.targetUsageRow(documentedPackages,documentedOperations)/]
			[/for]
		[indentTableEnd()/]
	['Mapping Hierarchy'.contenth2(chapter,sectionOffset+3,'')/]
		[ul()/]
			[for(mappingOperation:MappingOperation|topMappingOperations)]
				[mappingOperation.mapHierarchy(allMappingOperations,documentedPackages)/]
			[/for]
		[ulEnd()/]	
		
	[documentedTransforms.contentTransform(documentedTransforms,chapter,documentedPackages,transformChapters)/]
[/template]
[/comment]
[template public mapHierarchy(mappingOperation:MappingOperation,allMappingOperations:Sequence(MappingOperation),   documentedPackages:Collection(EPackage))]
	[liStart()/]
		[mappingOperation.operationReference(documentedPackages)/]
		[if(allMappingOperations.inherited->includes(mappingOperation))]
			</text:p>[ul()/]
				[allMappingOperations->select(m|m.inherited->includes(mappingOperation)).mapHierarchy(allMappingOperations,documentedPackages)/]
			[ulEnd()/]<text:p>
		[/if]
	[liEnd()/]
[/template]
[template public operationReference(operation : ImperativeOperation,documentedPackages:Collection(EPackage))]
		[operation.scoped_identifier(documentedPackages)/] ([operation.eContainingClass.name/])
[/template]


[comment]
[template public profileCrossReference(chapter:Integer,documentedPackages:Collection(Profile)){
	constraints:Sequence(Constraint)=documentedPackages.ownedStereotype.ownedRule->sortedBy(s|s.name)->asSequence();
}]
	['Rule Cross Reference'.contenth2(chapter,1,'')/]
	['Rule Cross Reference'.indentTable()/]
		[for(constraint:Constraint|constraints)]
			[constraint.constraintRowCrossReference()/]
		[/for]
	[indentTableEnd()/]
[/template]
[/comment]
[template public constraintRowCrossReference(constraint:Constraint){
	constrainedElements:Sequence(NamedElement)=
		constraint.constrainedElement
		->select(e|e.oclIsKindOf(NamedElement))
		.oclAsType(NamedElement);
}]
	[startTableRow()/]
		[constraint.elementReference().tdNormal()/]
		[tdNormalStart()/]
		[if(constrainedElements->notEmpty())][italic()/](on 
			[for(element:NamedElement|constrainedElements)separator(',')]
				[element.elementReference()/]
			[/for])[spanEnd()/]
		[/if]
		[tdEnd()/]
	[endTableRow()/]
[/template]
[comment]
[template public appliesToRow(metatype : Class)]
	[startTableRow()/]
		[(metatype._package.name+'::'+metatype.name).tdNormal()/]
		[metatype.genUmlElementComments().tdNormal()/]
	[endTableRow()/]
[/template]
		[else][metatype.genUmlElementComments().tdNormal()/]
	[startTableRow()/]
		[(metatype._package.name+'::'+metatype.name).tdNormal()/]
		[if(extension.ownedComment->notEmpty())][extension.genUmlElementComments().tdNormal()/]
		[else]['(missing Extends Description)'.missing().tdNormal()/]
		[/if]
	[endTableRow()/]
[/comment]

[template public appliesToRow(extension : Extension,stereotype:Stereotype){
	metatype : Class=extension.getExtendedMetaclass(stereotype);
}]
	[liStart()/]
		[(metatype._package.name+'::'+metatype.name)/]
		[if(extension.ownedComment->notEmpty())][newP()/][extension.genUmlElementComments()/]
		[else][comment]['(missing Extends Description)'.missing()/][/comment]
		[/if]
	[liEnd()/]
[/template]
[template public metaStructuralFeatureRow(sf : ecore::EStructuralFeature,documentedPackages:Collection(EPackage),shadowUML:Package)]
	[startTableRow()/]
		[sf.metaStructuralFeatureAnchor(documentedPackages).tdNormal()/]
		[tdNormalStart()/]
			[sf.genMetaComments(shadowUML)/]
			[sf.genExtendedMetaCommentsList()/]
			[if(sf.oclIsKindOf(ecore::EAttribute)and sf.oclAsType(ecore::EAttribute).iD)]
				</text:p>[ul()/]
					[liStart()/][bold()/]identifier[spanEnd()/][liEnd()/]
				[ulEnd()/]<text:p>
			[/if]		
		[tdEnd()/]
	[endTableRow()/]
[/template]
[template public metaStructuralFeatureRowXSD(sf : XSDComponent,documentedPackages:Collection(XSDSchema),shadowUML:Package)/]
[template public metaStructuralFeatureRowXSD(sf : XSDAttributeUse,documentedPackages:Collection(XSDSchema),shadowUML:Package)]
	[sf.content.resolvedAttributeDeclaration.metaStructuralFeatureRowXSD(sf,documentedPackages,shadowUML)/]
[/template]
[template public metaStructuralFeatureRowXSD(sf : XSDAttributeDeclaration,attributeUse:XSDAttributeUse,documentedPackages:Collection(XSDSchema),shadowUML:Package)]
	[startTableRow()/]
		[sf.metaStructuralFeatureAnchorAttribute(attributeUse,documentedPackages).tdNormal()/]
		[tdNormalStart()/]
			[sf.genMetaCommentsXSD(shadowUML)/]
		[tdEnd()/]
	[endTableRow()/]
[/template]
[template public metaStructuralFeatureRowXSD(sf : XSDAttributeGroupDefinition,documentedPackages:Collection(XSDSchema),shadowUML:Package)]
	[sf.resolvedAttributeGroupDefinition.contents.metaStructuralFeatureRowXSD(documentedPackages,shadowUML)/]
[/template]
[template public metaStructuralFeatureRowXSD(sf : XSDAttributeGroupContent,documentedPackages:Collection(XSDSchema),shadowUML:Package)]
[/template]
[template public metaStructuralFeatureRowXSD(particle : XSDParticle,documentedPackages:Collection(XSDSchema),shadowUML:Package)]
	[particle.content.metaStructuralFeatureRowXSD(particle,documentedPackages,shadowUML)/]
[/template]
[template public metaStructuralFeatureRowXSD(sf:XSDParticleContent,particle : XSDParticle,documentedPackages:Collection(XSDSchema),shadowUML:Package)/]
[template public metaStructuralFeatureRowXSD(sf:XSDElementDeclaration,particle : XSDParticle,documentedPackages:Collection(XSDSchema),shadowUML:Package)]
	[startTableRow()/]
		[sf.resolvedElementDeclaration.metaStructuralFeatureAnchorElement(particle,documentedPackages,shadowUML).tdNormal()/]
		[tdNormalStart()/]
			[sf.resolvedElementDeclaration.genMetaCommentsXSD(shadowUML)/]
		[tdEnd()/]
	[endTableRow()/]
[/template]
[template public metaStructuralFeatureRowXSD(sf:XSDModelGroup,particle : XSDParticle,documentedPackages:Collection(XSDSchema),shadowUML:Package)]
	[sf.contents.metaStructuralFeatureRowXSD(documentedPackages,shadowUML)/]
[/template]
[template public metaStructuralFeatureRowXSD(sf:XSDModelGroupDefinition,particle : XSDParticle,documentedPackages:Collection(XSDSchema),shadowUML:Package)]
	[sf.resolvedModelGroupDefinition.modelGroup.metaStructuralFeatureRowXSD(particle,documentedPackages,shadowUML)/]
[/template]
[template public metaStructuralFeatureRowXSD(sf:XSDWildcard,particle : XSDParticle,documentedPackages:Collection(XSDSchema),shadowUML:Package)]
	
[/template]



[template public constraintRow(constraint:ecore::EStringToStringMapEntry,name:String)]
	[startTableRow()/]
		[name.tdNormal()/]
		[constraint.value.displayHtml().tdNormal()/]
	[endTableRow()/]
[/template]
[template public constraintRow(constraint:XSDConstrainingFacet)]
	[startTableRow()/]
		[constraint.eClass().metaElementReference().tdNormal()/]
		[constraint.lexicalValue.displayHtml().tdNormal()/]
	[endTableRow()/]
[/template]

[template public metaStructuralFeatureAnchorAttribute(sf : XSDAttributeDeclaration,attributeUse:XSDAttributeUse,documentedPackages:Collection(XSDSchema))]
	[sf.metaElementAnchor()/]:[sf.typeDefinition.classReferenceXSD(documentedPackages)/]['['/][if(attributeUse.required)]1[else]0[/if]..1]
[/template]
[template public metaStructuralFeatureAnchorElement(sf : XSDElementDeclaration,particle:XSDParticle,documentedPackages:Collection(XSDSchema),shadowUML:Package)]
	[sf.metaElementAnchor()/]:[sf.typeDefinition.classReferenceXSD(documentedPackages)/][particle.multiplicity()/]
[/template]
[template public multiplicity(sf : XSDParticle)]
	['['/][if((sf.minOccurs=0)and(sf.maxOccurs<0))]*[elseif(sf.minOccurs=sf.maxOccurs)][sf.minOccurs/][else][sf.minOccurs/]..[if(sf.maxOccurs<0)]*[else][sf.maxOccurs/][/if][/if]]
[/template]

[template public metaStructuralFeatureAnchor(sf : ecore::EStructuralFeature,documentedPackages:Collection(EPackage))]
	[if(sf.isEStructuralFeatureDerived())]/[/if][sf.metaElementAnchor()/]:[sf.eType.classReference(documentedPackages)/][sf.multiplicity()/][sf.propModifiers()/]
[/template]
[query public isEStructuralFeatureDerived(sf : ecore::EStructuralFeature):Boolean=sf.volatile or not(sf.changeable)/]
[template public propModifiers(sf : ecore::EStructuralFeature)]
{[if(sf.unique)]unique[else]nonunique[/if]
[if(sf.transient)] ,readOnly[/if]
[if(sf.ordered)] ,ordered[/if]
[if(sf.oclIsKindOf(ecore::EReference) and sf.oclAsType(ecore::EReference).containment)] ,composite[/if]
[comment][sf.subsets()/][/comment]
[sf.redefines()/]
}
[/template]
[template public redefines(sf : ecore::EStructuralFeature)]
	[for(subsetted:Property|sf.redefinedProperty())], redefines [subsetted.name/][/for]
[/template]
[query public redefinedProperty(sf : ecore::EStructuralFeature):Set(ecore::EStructuralFeature)=
sf.eContainingClass.eAllStructuralFeatures->select(f|(f<>sf) and (f.name=sf.name))->asSet()
/]

[template public multiplicity(sf : ecore::EStructuralFeature)]
	['['/][if((sf.lowerBound=0)and(sf.upperBound.oclAsType(Integer)<0))]*[elseif(sf.lowerBound=sf.upperBound)][sf.lowerBound/][else][sf.lowerBound/]..[if(sf.upperBound.oclAsType(Integer)<0)]*[else][sf.upperBound/][/if][/if]]
[/template]
[template public typeDetail(stereotype : Classifier,documentedPackages:Collection(Package)){
	subtypes:Sequence(Stereotype)=stereotype.getNearestPackage().ownedType
		->select(s|s.oclIsKindOf(Classifier) and s.oclAsType(Classifier).general->includes(stereotype))
		->sortedBy(s|s.name)->asSequence();
}]
		[stereotype.classifierDetail(documentedPackages)/]	
[/template]		

[template public stereotypeDetail(stereotype : Stereotype,documentedPackages:Collection(Package)){
	subtypes:Sequence(Stereotype)=stereotype.getProfile().ownedStereotype->select(s|s.general->includes(stereotype))
		->sortedBy(s|s.name)->asSequence();
}]
[stereotype.classifierDetail(documentedPackages)/]
[comment]	
	[if(stereotype.getExtensions()->notEmpty())]
		['Extends'.paragraph()/]
		[ul()/]
		[comment]
		['Extends'.indentTable()/]
			[for(metatype:Class|stereotype.getExtendedMetaclasses())]
				[metatype.appliesToRow()/]
			[/for]
		[indentTableEnd()/]
		[/comment]
		
			[for(extension:Extension|stereotype.getExtensions())]
				[extension.appliesToRow(stereotype)/]
			[/for]
		[ulEnd()/]
		[comment][emptyP()/][/comment]
	[/if]
[/comment]	
[/template]	

[template public classifierDetail(stereotype : Classifier,documentedPackages:Collection(Package)){
	subtypes:Sequence(Classifier)=stereotype.getNearestPackage().ownedType
		->select(s|s.oclIsKindOf(Classifier) and s.oclAsType(Classifier).general->includes(stereotype))
		.oclAsType(Classifier)
		->sortedBy(s|s.name)->asSequence();
}]
[comment]
	[stereotype._package.Package()/]
	[stereotype.isAbstract.isAbstract()/]
[/comment]
	[stereotype.general.GeneralizationUML()/]

[comment]
	[if(stereotype.allParents()->notEmpty())]
		['All Generalizations'.paragraph()/]

		[ul()/]
		[for(general:Classifier|stereotype.allParents())]
			[general.umlclassReference().li()/]
		[/for]
		[ulEnd()/]	

		[comment][emptyP()/][/comment]
	[/if]
	[if(stereotype.allSubtypes()->notEmpty())]
	['All Specializations'.paragraph()/]

		[ul()/]
		[for(subtype:Class|stereotype.allSubtypes())]
			[subtype.umlclassReference().li()/]
		[/for]
		[ulEnd()/]	

		[comment][emptyP()/][/comment]
	[/if]
[/comment]
	[if(stereotype.oclIsKindOf(Stereotype) and stereotype.oclAsType(Stereotype).getExtensions()->notEmpty())]
		['Extends'.paragraph()/]
		[ul()/]
		[comment]
		['Extends'.indentTable()/]
			[for(metatype:Class|stereotype.getExtendedMetaclasses())]
				[metatype.appliesToRow()/]
			[/for]
		[indentTableEnd()/]
		[/comment]
		
			[for(extension:Extension|stereotype.oclAsType(Stereotype).getExtensions())]
				[extension.appliesToRow(stereotype.oclAsType(Stereotype))/]
			[/for]
		[ulEnd()/]
		[comment][emptyP()/][/comment]
	[/if]

	['Description'.paragraph()/]
	[stereotype.genUmlElementCommentsIndented()/]
		[comment][emptyP()/][/comment]

		[if(stereotype.oclIsKindOf(Class))]
			[if(stereotype.attribute->select(a|not(a.type.oclIsUndefined()) and a.type.oclIsKindOf(DataType))->notEmpty())]
			['Attributes'.paragraph()/]
			[comment]
			['Attributes'.indentTable()/]
			['Attributes'.indentTable()/]
			['Associations'.indentTable()/]
			[indentTableEnd()/]
			['Constraints'.indentTable()/]
			[indentTableEnd()/]
			[/comment]
			
			[ul()/]
				[for(attribute:Property|stereotype.attribute->select(a|not(a.type.oclIsUndefined()) and a.type.oclIsKindOf(DataType))->sortedBy(s|s.name))]
					[attribute.structuralFeatureRow(documentedPackages)/]
				[/for]
			[ulEnd()/]
			[comment][emptyP()/][/comment]
			[/if]
			[if(stereotype.attribute->select(a|not(a.type.oclIsUndefined()) and a.type.oclIsKindOf(Class) and not(a.name.startsWith('base_')))->notEmpty())]
			['Associations'.paragraph()/]
			[ul()/]
				[for(attribute:Property|stereotype.attribute->select(a|not(a.type.oclIsUndefined()) and a.type.oclIsKindOf(Class) and not(a.name.startsWith('base_')))->sortedBy(s|s.name))]
					[attribute.structuralFeatureRow(documentedPackages)/]
				[/for]
			[ulEnd()/]
			[comment][emptyP()/][/comment]
			[/if]
		[/if]
		
		[if(stereotype.oclIsKindOf(Enumeration))]
			['Enumeration Literals'.paragraph()/]
			[ul()/]
				[for(attribute:EnumerationLiteral|stereotype.oclAsType(Enumeration).ownedLiteral->sortedBy(s|s.name))]
					[attribute.enumLiteralRow()/]
				[/for]
			[ulEnd()/]
			[comment]
			['Enumeration Literals'.indentTable()/]
				[for(attribute:EnumerationLiteral|stereotype.oclAsType(Enumeration).ownedLiteral->sortedBy(s|s.name))]
					[attribute.enumLiteralRow()/]
				[/for]
			[indentTableEnd()/]
			[/comment]
			[comment][emptyP()/][/comment]
		[/if]		

		[comment][emptyP()/][/comment]
		[if(stereotype.classConstraints()->notEmpty())]
		['Constraints'.paragraph()/]
			[ul()/]
				[for(constraint:Constraint|stereotype.classConstraints()->sortedBy(s|s.name))]
[constraint.constraintRow()/]
				[/for]
			[ulEnd()/]
		[/if]	
[/template]		

	
[template public GeneralizationUML(c:Classifier)]
	[indentp()/][bold()/]Generalization: [spanEnd()/][c.umlclassReference()/][indentpEnd()/]
[/template]
[template public umlclassReference(cf : Classifier)]
	[if(not(
		cf._package.name.startsWith('ndr')
		or cf._package.name.startsWith('mpd')
		or cf._package.name.startsWith('mpdcl')
		or cf._package.name.startsWith('xsd')
		or cf._package.name.endsWith(' Profile')
		))][cf._package.name/]::[cf.name/]
	[else][cf.elementReference()/][/if]
[/template]

[comment]
[template public metamodelSpec(metamodel:EPackage,metamodels:Sequence(EPackage),metamodelBaseChapter:Integer,metamodelChapters:Sequence(Component)){
	metamodelChapter:Integer=metamodelBaseChapter+metamodels->indexOf(metamodel);
	packageConstraints:Sequence(ecore::EStringToStringMapEntry)=metamodel.eAnnotations.details->select(d:ecore::EStringToStringMapEntry|d.key='appinfo');
	usedClassifiers:Sequence(ecore::EClassifier)=metamodel.getMetamodelClassifiers();
	
	metamodelChapterComponent:Component=metamodelChapters->select(c|c.name.startsWith(metamodel.name))->asSequence()->first();
	chapterName:String=if(metamodelChapterComponent.oclIsUndefined())then ('Specification Meta-model '+metamodel.name) else metamodelChapterComponent.name endif;	
	partSections:Sequence(OpaqueBehavior)=if(metamodelChapterComponent.oclIsUndefined())then Sequence{} else 
		metamodelChapterComponent.ownedBehavior->select(b|b.oclIsKindOf(OpaqueBehavior)).oclAsType(OpaqueBehavior)->asSequence()->sortedBy(c|c.name)
		endif;
	overviewSection:Integer=partSections->size()+1;	
	descriptionsSection:Integer=overviewSection+1;	
	
}]
	[chapterName.contenth1break(metamodelChapter,'')/]
	[metamodel.metaElementAnchorPoint()/]
		[if(not(metamodelChapterComponent.oclIsUndefined()))]
			[metamodelChapterComponent.images()/]
			[metamodelChapterComponent.genUmlElementCommentsIndented()/]
		[/if]
		[partSections.specificationSection(partSections,metamodelChapter)/]
	
	
	['Overview'.contenth2(metamodelChapter,overviewSection,'')/]
	[startP()/][metamodel.genMetaComments()/][endP()/]
	[indentp()/][metamodel.genExtendedMetaComments()/][indentpEnd()/]
	[comment][emptyP()/][/comment]
	[if(packageConstraints->notEmpty())]		
		['Extensions'.paragraph()/]
		['Extensions'.indentTable()/]
			[for(constraint:ecore::EStringToStringMapEntry|packageConstraints)]
				[constraint.constraintRow('')/]
			[/for]
		[indentTableEnd()/]
		[comment][emptyP()/][/comment]
	[/if]
	['Class Descriptions'.contenth2(metamodelChapter,descriptionsSection,'')/]
		[for(stereotype:ecore::EClassifier|usedClassifiers)]
			[pageBreak()/]
			[stereotype.metaDetail(metamodelChapter,descriptionsSection,usedClassifiers->indexOf(stereotype),metamodels)/]
		[/for]	
		
[/template]
[template public metaDetail(stereotype : ecore::EClassifier,
	chapter:Integer,section:Integer,subsection:Integer,
	documentedPackages:Sequence(EPackage)){
	classConstraints:Sequence(ecore::EStringToStringMapEntry)=stereotype.eAnnotations.details->select(d:ecore::EStringToStringMapEntry|d.key='appinfo');
	attributeConstraints:Sequence(ecore::EStringToStringMapEntry)=if(stereotype.oclIsKindOf(ecore::EClass))then 
		stereotype.oclAsType(ecore::EClass).eStructuralFeatures->sortedBy(s|s.name).eAnnotations.details->select(d:ecore::EStringToStringMapEntry|d.key='appinfo')
		else Sequence{}endif;
	}]
	[('&lt;'+stereotype.eClass().name+'> '+stereotype.name).contenth3(chapter,section,subsection,stereotype.metaElementAnchorBookmark())/]
[/comment]
[template public libraryDetail(stereotype : ecore::EObject,documentedPackages:Sequence(XSDSchema),shadowUML:Package)]
	[if(stereotype.oclIsKindOf(XSDTypeDefinition))]
		[stereotype.oclAsType(XSDTypeDefinition).xsdDetail(documentedPackages,shadowUML)/]
	[/if]
[/template]
[query public getParticle(complexType : XSDComplexTypeDefinition):OrderedSet(XSDParticle)=
	if(complexType.content.oclIsKindOf(XSDParticle))then OrderedSet{complexType.content.oclAsType(XSDParticle)} else OrderedSet{} endif
/]
[query public getAttributeContents(complexType : XSDComplexTypeDefinition):OrderedSet(XSDComponent)=
	complexType.attributeContents.oclAsType(Component)
	->union(complexType.getParticle().oclAsType(Component))
/]
[query public allSuperTypes(type : XSDTypeDefinition):Set(XSDTypeDefinition)=
	type.baseType()->union(type.baseType().allSuperTypes())
/]
[query public allSubTypes(type : XSDTypeDefinition):Set(XSDTypeDefinition)=type.allSubTypes(type.schema)/]
[query public allSubTypes(type : XSDTypeDefinition,schema:XSDSchema):Set(XSDTypeDefinition)=
	type.subTypes(schema)
/]
	[comment]
	type.subTypes(schema)->union(type.subTypes(schema).allSubTypes(schema)->asSet())->asSet()
	schema.typeDefinitions->select(t|(t.baseType<>null) and not(t.baseType.oclIsUndefined()) and (type=t.baseType) and (type<>t))->asSet()
	[/comment]
[query public subTypes(type : XSDTypeDefinition,schema:XSDSchema):Set(XSDTypeDefinition)=
	schema.typeDefinitions->select(t|t.baseType()->includes(type))->asSet()
/]
[comment]
[query public baseType(type : XSDTypeDefinition):Set(XSDTypeDefinition)=
	if(type.oclIsKindOf(XSDComplexTypeDefinition) 
		or (type.oclIsKindOf(XSDSimpleTypeDefinition) and type.oclAsType(XSDSimpleTypeDefinition).variety=XSDVariety::atomic)
	) then 
		if((type.baseType=null) or type.baseType.oclIsUndefined() or (type.baseType=type) ) then Set{} 
		else	Set{type.baseType}
		endif
	else Set{}
	endif
/]
[query public baseType(type : XSDTypeDefinition):Set(XSDTypeDefinition)=
	if((type.baseType=null) or type.baseType.oclIsUndefined() or (type.baseType=type) ) then Set{} 
	else	Set{type.baseType}
	endif
/]
[query public baseType(type : XSDTypeDefinition):Set(XSDTypeDefinition)=
	if(type.oclIsKindOf(XSDComplexTypeDefinition) 
		or (type.oclIsKindOf(XSDSimpleTypeDefinition) and type.oclAsType(XSDSimpleTypeDefinition).variety<>XSDVariety::list)
	) then 
		if((type.baseType=null) or type.baseType.oclIsUndefined() or (type.baseType=type) ) then Set{} 
		else	Set{type.baseType}
		endif
	else if(
		(type.baseType=null) or type.baseType.oclIsUndefined() or (type.baseType.baseType=null) or type.baseType.baseType.oclIsUndefined()
		) then Set{} else Set{type.baseType.baseType} endif
	endif
/]
[/comment]
[query public baseType(type : XSDTypeDefinition):Set(XSDTypeDefinition)=
	if((type.baseType=null) or type.baseType.oclIsUndefined() or (type.baseType=type) ) then Set{} 
	else	Set{type.baseType}
	endif
/]

[template public xsdDetail(stereotype : XSDTypeDefinition,
	documentedPackages:Sequence(XSDSchema),shadowUML:Package){
	attributes:OrderedSet(XSDComponent)=if(stereotype.oclIsKindOf(XSDComplexTypeDefinition))
		then stereotype.oclAsType(XSDComplexTypeDefinition).getAttributeContents() else OrderedSet{} endif;
	enumerationLiterals:OrderedSet(XSDEnumerationFacet)=if(stereotype.oclIsKindOf(XSDSimpleTypeDefinition))
		then stereotype.oclAsType(XSDSimpleTypeDefinition).enumerationFacets else OrderedSet{} endif;
	classConstraints:OrderedSet(XSDConstrainingFacet)=if(stereotype.oclIsKindOf(XSDSimpleTypeDefinition))
		then stereotype.oclAsType(XSDSimpleTypeDefinition).facets->select(f|not(f.oclIsKindOf(XSDEnumerationFacet))) 
		else OrderedSet{} endif;
	allSuperTypes:Set(XSDTypeDefinition)=stereotype.allSuperTypes();	
	allSubTypes:Set(XSDTypeDefinition)=stereotype.allSubTypes();	
	}]
		[stereotype.schema.Package()/]
			[if(stereotype.oclIsKindOf(XSDComplexTypeDefinition))]
				[stereotype.oclAsType(XSDComplexTypeDefinition).abstract.isAbstract()/]
			[else]	
				[indentp()/][bold()/]variety:[spanEnd()/][stereotype.oclAsType(XSDSimpleTypeDefinition).variety/][indentpEnd()/]
			[/if]
			

			[stereotype.baseType().GeneralizationXSD(documentedPackages)/]
[comment]
			[if(allSuperTypes->notEmpty())]
				['All Generalizations'.paragraph()/]
					
					[ul()/]
					[for(general:XSDTypeDefinition|allSuperTypes)]
						[general.classReferenceXSD(documentedPackages).li()/]
					[/for]
					[ulEnd()/]	
					
				[comment][emptyP()/][/comment]
			[/if]
			[if(allSubTypes->notEmpty())]
	[comment]
				['All Specializations'.paragraph()/]
	[/comment]
				['Specializations'.paragraph()/]
					
					[ul()/]
					[for(subtype:XSDTypeDefinition|allSubTypes)]
						[subtype.classReferenceXSD(documentedPackages).li()/]
					[/for]
					[ulEnd()/]	
					
				[comment][emptyP()/][/comment]
			[/if]
[/comment]



		['Description'.paragraph()/]
		[indentp()/][stereotype.genMetaCommentsXSD(shadowUML)/][indentpEnd()/]

		

		[indentp()/][stereotype.genExtendedMetaCommentsXSD()/][indentpEnd()/]


			[if(attributes->notEmpty())]
				['Content'.paragraph()/]
				['Content'.indentTable()/]
					[comment]we may need to have a recursive list here[/comment]
					[for(attribute:XSDComponent|attributes)]
						[attribute.metaStructuralFeatureRowXSD(documentedPackages,shadowUML)/]
					[/for]
				[indentTableEnd()/]
			[/if]
			[if(stereotype.oclIsKindOf(XSDSimpleTypeDefinition) and stereotype.oclAsType(XSDSimpleTypeDefinition).variety=XSDVariety::list)]
				[indentp()/][bold()/]list item:[spanEnd()/]
				[stereotype.oclAsType(XSDSimpleTypeDefinition).itemTypeDefinition.unionHierarchy(stereotype.oclAsType(XSDSimpleTypeDefinition),documentedPackages)/]
				[indentpEnd()/]
			[/if]
			[if(stereotype.oclIsKindOf(XSDSimpleTypeDefinition) and stereotype.oclAsType(XSDSimpleTypeDefinition).variety=XSDVariety::union)]
				['Union'.paragraph()/]
				[ul()/]
					[for(memberTypeDefinition:XSDSimpleTypeDefinition|stereotype.oclAsType(XSDSimpleTypeDefinition).memberTypeDefinitions)]
						[liStart()/][memberTypeDefinition.unionHierarchy(stereotype.oclAsType(XSDSimpleTypeDefinition),documentedPackages)/][liEnd()/]
					[/for]
				[ulEnd()/]
			[/if]
		
		[if(enumerationLiterals->notEmpty())]
			['Enumeration Literals'.paragraph()/]
			['Enumeration Literals'.indentTable()/]
				[for(attribute:XSDEnumerationFacet|enumerationLiterals)]
					[attribute.enumLiteralRowXSD(shadowUML)/]
				[/for]
			[indentTableEnd()/]
		[/if]
		[if(classConstraints->notEmpty())]		
			['Constraints'.paragraph()/]
			['Constraints'.indentTable()/]
				[for(constraint:XSDConstrainingFacet|classConstraints)]
					[constraint.constraintRow()/]
				[/for]
			[indentTableEnd()/]
		[/if]

		
	[comment]
	[/comment]
[/template]
[template public unionHierarchy(memberTypeDefinition:XSDSimpleTypeDefinition,parentTypeDefinition:XSDSimpleTypeDefinition,
	documentedPackages:Sequence(XSDSchema))]
	[if(parentTypeDefinition.contents->includes(memberTypeDefinition))]
		anonymous [memberTypeDefinition.variety/]
		[if(memberTypeDefinition.variety=XSDVariety::list)]
			</text:p>[ul()/][liStart()/]
				[memberTypeDefinition.itemTypeDefinition.unionHierarchy(memberTypeDefinition,documentedPackages)/]
			[liEnd()/][ulEnd()/]<text:p>
		[elseif(memberTypeDefinition.variety=XSDVariety::union)]
			</text:p>[ul()/]
				[for(childmemberTypeDefinition:XSDSimpleTypeDefinition|memberTypeDefinition.memberTypeDefinitions)]
					[liStart()/][bold()/][childmemberTypeDefinition.unionHierarchy(memberTypeDefinition,documentedPackages)/][spanEnd()/][liEnd()/]
				[/for]
			[ulEnd()/]<text:p>
		[else]
			[bold()/][memberTypeDefinition.baseType.classReferenceXSD(documentedPackages)/][spanEnd()/]
		[/if]
	[else]
		[bold()/][memberTypeDefinition.classReferenceXSD(documentedPackages)/][spanEnd()/]
	[/if]	
[/template]

[template public metaDetail(stereotype : ecore::EClassifier,
	documentedPackages:Sequence(EPackage),shadowUML:Package){
	classConstraints:Sequence(ecore::EStringToStringMapEntry)=stereotype.eAnnotations.details->select(d:ecore::EStringToStringMapEntry|d.key='appinfo');
	attributeConstraints:Sequence(ecore::EStringToStringMapEntry)=if(stereotype.oclIsKindOf(ecore::EClass))then 
		stereotype.oclAsType(ecore::EClass).eStructuralFeatures->sortedBy(s|s.name).eAnnotations.details->select(d:ecore::EStringToStringMapEntry|d.key='appinfo')
		else Sequence{}endif;
	}]
		[stereotype.ePackage.Package()/]
		[if(stereotype.oclIsKindOf(ecore::EClass))]
			[stereotype.oclAsType(EClass).abstract.isAbstract()/]
			[stereotype.oclAsType(EClass).eSuperTypes.Generalization(documentedPackages)/]
[comment]			
			[if(stereotype.oclAsType(ecore::EClass).eAllSuperTypes->notEmpty())]
				['All Generalizations'.paragraph()/]
					
					[ul()/]
					[for(general:EClass|stereotype.oclAsType(ecore::EClass).eAllSuperTypes)]
						[general.classReference(documentedPackages).li()/]
					[/for]
					[ulEnd()/]	
					
				[comment][emptyP()/][/comment]
			[/if]
			[if(stereotype.oclAsType(ecore::EClass).allSubtypes()->notEmpty())]
				['All Specializations'.paragraph()/]
					
					[ul()/]
					[for(subtype:ecore::EClass|stereotype.oclAsType(ecore::EClass).allSubtypes())]
						[subtype.classReference(documentedPackages).li()/]
					[/for]
					[ulEnd()/]	
					
				[comment][emptyP()/][/comment]
			[/if]
[/comment]			
		[elseif(stereotype.oclIsKindOf(ecore::EEnum))]	
		[elseif(stereotype.oclIsKindOf(ecore::EDataType))]
			[comment]
			[indentp()/]<B>instanceType:</B> [stereotype.oclAsType(EDataType).instanceTypeName/][indentpEnd()/]	
			[indentp()/]<B>instanceClass:</B> [stereotype.oclAsType(EDataType).instanceClassName/][indentpEnd()/]	
			[/comment]
		[/if]
		['Description'.paragraph()/]
		[indentp()/][stereotype.genMetaComments(shadowUML)/][indentpEnd()/]
		[indentp()/][stereotype.genExtendedMetaComments()/][indentpEnd()/]
		[if(stereotype.oclIsKindOf(ecore::EClass))]
			[if(stereotype.oclAsType(ecore::EClass).eAttributes->notEmpty())]
				['Attributes'.paragraph()/]
				['Attributes'.indentTable()/]
					[for(attribute:ecore::EStructuralFeature|stereotype.oclAsType(ecore::EClass).eAttributes->sortedBy(s|s.name))]
						[attribute.metaStructuralFeatureRow(documentedPackages,shadowUML)/]
					[/for]
				[indentTableEnd()/]
				[comment][emptyP()/][/comment]
			[/if]
			[if(stereotype.oclAsType(ecore::EClass).eReferences->notEmpty())]
				['Associations'.paragraph()/]
				['Associations'.indentTable()/]
					[for(attribute:ecore::EStructuralFeature|stereotype.oclAsType(ecore::EClass).eReferences->sortedBy(s|s.name))]
						[attribute.metaStructuralFeatureRow(documentedPackages,shadowUML)/]
					[/for]
				[indentTableEnd()/]
				[comment][emptyP()/][/comment]
			[/if]
		[/if]		
		[if(stereotype.oclIsKindOf(ecore::EEnum))]
			['Enumeration Literals'.paragraph()/]
			['Enumeration Literals'.indentTable()/]
				[for(attribute:ecore::EEnumLiteral|stereotype.oclAsType(ecore::EEnum).eLiterals->sortedBy(s|s.name))]
					[attribute.enumLiteralRowMOF(shadowUML)/]
				[/for]
			[indentTableEnd()/]
			[comment][emptyP()/][/comment]
		[/if]
		[if(classConstraints->notEmpty() or attributeConstraints->notEmpty())]		
			['Extensions'.paragraph()/]
			['Extensions'.indentTable()/]
				[for(constraint:ecore::EStringToStringMapEntry|classConstraints)]
					[constraint.constraintRow('')/]
				[/for]
				[if(stereotype.oclIsKindOf(ecore::EClass))]
					[for(attribute:ecore::EStructuralFeature|stereotype.oclAsType(ecore::EClass).eStructuralFeatures->sortedBy(s|s.name))]
						[for(constraint:ecore::EStringToStringMapEntry|attribute.eAnnotations.details->select(d:ecore::EStringToStringMapEntry|d.key='appinfo'))]
							[constraint.constraintRow(attribute.name)/]
						[/for]
					[/for]
						
				[/if]		
			[indentTableEnd()/]
			[comment][emptyP()/][/comment]
		[/if]
[/template]
[query public subtypes(c : ecore::EClass):Set(ecore::EClass)=
	c.ePackage.eClassifiers->select(s:ecore::EClassifier|s.oclIsKindOf(ecore::EClass)and s.oclAsType(ecore::EClass).eSuperTypes->includes(c))
/]
[query public allSubtypes(c : ecore::EClass):Set(ecore::EClass)=
	c.subtypes()->union(c.subtypes().allSubtypes())
/]
[query public expressionIsEmpty(expression:OCLExpression):Boolean=
	expression.oclIsKindOf(BlockExp) and expression.oclAsType(BlockExp)._body->isEmpty()
/]
[template public valueExpression(expression:OCLExpression,documentedPackages:Collection(ecore::EPackage),tabs:Integer)]
	[comment]([expression.eClass().name/])[/comment]
	[comment]***[expression/]***[/comment]
	[if(expression.oclIsKindOf(PropertyCallExp))]
		[expression.oclAsType(PropertyCallExp).propertyCallExpression(documentedPackages,tabs)/]
	[elseif(expression.oclIsKindOf(ObjectExp))]
		[expression.oclAsType(ObjectExp).objectExp(documentedPackages,tabs)/]
	[elseif(expression.oclIsKindOf(SwitchExp))]
		[expression.oclAsType(SwitchExp).switchExp(documentedPackages,tabs)/]
		
	[elseif(expression.oclIsKindOf(BlockExp))]
		[for (block:OCLExpression|expression.oclAsType(BlockExp)._body)separator(indentedEmptyP(tabs))][block.valueExpression(documentedPackages,tabs)/];[/for]
	[elseif(expression.oclIsKindOf(CollectionLiteralExp))]
		[expression.oclAsType(CollectionLiteralExp).collectionLiteralExp(documentedPackages,tabs)/]
	[elseif(expression.oclIsKindOf(AssignExp))]
		[expression.oclAsType(AssignExp).assignExpression(documentedPackages,tabs)/]
	[elseif(expression.oclIsKindOf(ReturnExp))]
		return [if(not(expression.oclAsType(ReturnExp).value.oclIsUndefined()))][expression.oclAsType(ReturnExp).value.valueExpression(documentedPackages,tabs)/][/if]
	[elseif(expression.oclIsKindOf(MappingCallExp))]
		[expression.oclAsType(MappingCallExp).mappingCallExpression(documentedPackages,tabs)/]
	[elseif(expression.oclIsKindOf(LogExp))]
		[expression.oclAsType(LogExp).logExpression(documentedPackages,tabs)/]
	[elseif(expression.oclIsKindOf(AssertExp))]
		[expression.oclAsType(AssertExp).assertExpression(documentedPackages,tabs)/]
	[elseif(expression.oclIsKindOf(OperationCallExp))]
		[expression.oclAsType(OperationCallExp).operationCallExpression(documentedPackages,tabs)/]
	[elseif(expression.oclIsKindOf(VariableExp))]
		[expression.oclAsType(VariableExp).variableExpression(documentedPackages)/]
	[elseif(expression.oclIsKindOf(InstantiationExp))]
		[expression.oclAsType(InstantiationExp).instantiationExpression(documentedPackages,tabs)/]
	[elseif(expression.oclIsKindOf(BooleanLiteralExp))]
		[expression.oclAsType(BooleanLiteralExp).booleanLiteralExpression(documentedPackages)/]
	[elseif(expression.oclIsKindOf(EnumLiteralExp))]
		[expression.oclAsType(EnumLiteralExp)/]
	[elseif(expression.oclIsKindOf(IntegerLiteralExp))]
		[expression.oclAsType(IntegerLiteralExp)/]
	[elseif(expression.oclIsKindOf(NullLiteralExp))]
		[expression.oclAsType(NullLiteralExp)/]
	[elseif(expression.oclIsKindOf(StringLiteralExp))]
		[expression.oclAsType(StringLiteralExp)/]
	[elseif(expression.oclIsKindOf(TupleLiteralExp))]
		[expression.oclAsType(TupleLiteralExp)/]
	[elseif(expression.oclIsKindOf(ContinueExp))]
		[expression.oclAsType(ContinueExp)/]
		
	[elseif(expression.oclIsKindOf(TypeExp))]
		[expression.oclAsType(TypeExp).referredType.oclAsType(ecore::ENamedElement).qvtReference(documentedPackages)/]
	[elseif(expression.oclIsKindOf(IteratorExp))]
		[startIndentedBlock(tabs)/]
			[if(not(expression.oclAsType(IteratorExp).source.oclIsUndefined()))]
				[expression.oclAsType(IteratorExp).source.oclAsType(OCLExpression).valueExpression(documentedPackages,tabs)/]->
			[/if]
			[expression.oclAsType(IteratorExp).name/](
				[for (variable:ocl.ecore::Variable|expression.oclAsType(IteratorExp).iterator)]
					[variable.variable(documentedPackages)/]
				[/for]
			[if(not(expression.oclAsType(IteratorExp)._body.oclIsUndefined()))]
				|[expression.oclAsType(IteratorExp)._body.oclAsType(OCLExpression).valueExpression(documentedPackages,tabs)/]
			[/if]
		)
		[indentedEmptyP(tabs)/]
	[elseif(expression.oclIsKindOf(ForExp))]
		[if(not(expression.oclAsType(ForExp).source.oclIsUndefined()))]
			[expression.oclAsType(ForExp).source.oclAsType(OCLExpression).valueExpression(documentedPackages,tabs)/]->
		[/if]
		[expression.oclAsType(ForExp).name/](
			[for (variable:ocl.ecore::Variable|expression.oclAsType(ForExp).iterator)]
				[variable.variable(documentedPackages)/]
			[/for]
		){[startIndentedBlock(tabs+1)/]
		[if(not(expression.oclAsType(ForExp)._body.oclIsUndefined()))]
			[expression.oclAsType(ForExp)._body.oclAsType(OCLExpression).valueExpression(documentedPackages,tabs+1)/]
		[/if][indentedEmptyP(tabs)/]
		}
	[elseif(expression.oclIsKindOf(IfExp))]if(
		[if(not(expression.oclAsType(IfExp).condition.oclIsUndefined()))]
			[expression.oclAsType(IfExp).condition.oclAsType(OCLExpression).valueExpression(documentedPackages,tabs)/]
		[/if]) then {
		[if(not(expression.oclAsType(IfExp).thenExpression.oclIsUndefined()) 
			and not(expression.oclAsType(IfExp).thenExpression.oclAsType(OCLExpression).expressionIsEmpty()))]
			[startIndentedBlock(tabs+1)/]
			[expression.oclAsType(IfExp).thenExpression.oclAsType(OCLExpression).valueExpression(documentedPackages,tabs+1)/]
			[indentedEmptyP(tabs)/]
		[/if] 
		[if(not(expression.oclAsType(IfExp).elseExpression.oclIsUndefined()) 
			and not(expression.oclAsType(IfExp).elseExpression.oclAsType(OCLExpression).expressionIsEmpty()))]
			} else {
			[startIndentedBlock(tabs+1)/]
			[expression.oclAsType(IfExp).elseExpression.oclAsType(OCLExpression).valueExpression(documentedPackages,tabs+1)/]
			[indentedEmptyP(tabs)/]
		[/if]
		} endif
	[elseif(expression.oclIsKindOf(VariableInitExp))]
		[expression.oclAsType(VariableInitExp).referredVariable.variableInitExp(documentedPackages,tabs)/]
	[else]
		<font color="red">[expression.eClass().name/]</font>	
	[/if]
[/template]
[template public variableQVT(variable: ecore::ETypedElement , documentedPackages:Collection(ecore::EPackage))][variable.name/][/template]

[template public propertyCallExpressionQVT(expression:PropertyCallExp)
][if(not(expression.source.oclIsUndefined()))][expression.source.oclAsType(OCLExpression).valueExpressionQVT()/].[/if][expression.referredProperty.oclAsType(ecore::EStructuralFeature).qvtReferenceQVT()/][/template]
[template public qvtReferenceQVT(element : ecore::ENamedElement)
][if(element.eClass().ePackage.name='')][element.name/][elseif(
	(element.oclIsKindOf(ecore::EOperation) and (element.oclAsType(ecore::EOperation).eContainingClass.ePackage.name='oclstdlib'))
	or (element.oclIsKindOf(ecore::EStructuralFeature) and (element.oclAsType(ecore::EStructuralFeature).eContainingClass.ePackage.name='oclstdlib'))
	)][element.name/][elseif(
	not(element.oclIsKindOf(ImperativeOperation) and (element.oclAsType(ImperativeOperation).eContainingClass.ePackage.name='NIEMpim2psm'))
	)][element.name/][elseif(element.oclIsKindOf(ecore::EOperation))][element.metaElementReferenceQVT()/][else][element.metaReferenceQVT()/][/if][/template]
[template public metaReferenceQVT(element : ecore::ENamedElement)][element.elementReferenceQVT()/][/template]
[template public objectExpQVT(expression:ObjectExp)
]new ([for (arg:OCLExpression|expression.argument)separator(',')][arg.valueExpressionQVT()/][/for])
[if(not(expression._body.oclIsUndefined()))]
 {
[for (block:OCLExpression|expression._body.content)]
  [block.valueExpressionQVT()/][if(not(block.oclIsKindOf(BlockExp)))];[/if]
[/for]
 }	
[/if][/template]
[template public switchExpQVT(expression:SwitchExp)]
switch{
[for (block:AltExp|expression.alternativePart)]
 [block.altExpressionQVT()/][if(not(block.oclIsKindOf(BlockExp)))];[/if]
[/for]
[if(not(expression.elsePart.oclIsUndefined()))]
 else 
  [expression.elsePart.valueExpressionQVT()/][if(not(expression.elsePart.oclIsKindOf(BlockExp)))];[/if]
[/if]
}[/template]
[template public altExpressionQVT(expression:AltExp)]
case([expression.condition.valueExpressionQVT()/])
 [expression._body.valueExpressionQVT()/][/template]

[template public booleanLiteralExpressionQVT(expression:BooleanLiteralExp)][expression.booleanSymbol/][/template]
[template public collectionLiteralExpQVT(expression:CollectionLiteralExp)
][if((expression.part->size()=0) and not(expression.eType.oclIsUndefined()))][expression.eType.collectionLiteralTypeQVT()/][else][expression.part.oclAsType(CollectionLiteralPart).collectionLiteralPartQVT()/][/if][/template]
[template public collectionLiteralPartQVT(expression:CollectionLiteralPart)
][if(expression.oclIsKindOf(CollectionItem))
][expression.oclAsType(CollectionItem).item.oclAsType(OCLExpression).valueExpressionQVT()/][else][expression.eClass().name/]/[expression/][/if][/template]

[template public collectionLiteralTypeQVT(classifier:ecore::EClassifier)
][if(classifier.oclIsKindOf(CollectionType))][classifier.oclAsType(CollectionType).kind/]{}[else][classifier.qvtReferenceQVT()/][/if][/template]
[template public assignExpressionQVT(expression:AssignExp)
][expression.left.valueExpressionQVT()/][if(expression.isReset)]:=[else]+=[/if][expression.value.valueExpressionQVT()/][/template]
[template public mappingCallExpressionQVT(expression:MappingCallExp){
	referredOperation:OclAny=expression.referredOperation;
	oclOperatorName:String=if (referredOperation.oclIsUndefined()) then '' 
		else referredOperation.oclAsType(ecore::ENamedElement).oclOperatorName()
		endif;
}][if(not(expression.source.oclIsUndefined()))][expression.source.oclAsType(OCLExpression).valueExpressionQVT()/].[/if]map [if(not(referredOperation.oclIsUndefined()))][referredOperation.oclAsType(ecore::ENamedElement).qvtReferenceQVT()/]([for(argument:OCLExpression|expression.argument)separator(',')][argument.valueExpressionQVT()/][/for])[/if][/template]
[template public variableQVT(variable: ecore::ETypedElement)][variable.name/][/template]
[template public instantiationExpressionQVT(expression:InstantiationExp)
]new [expression.instantiatedClass.classReferenceQVT()/]([for (arg:OCLExpression|expression.argument)separator(',')][arg.valueExpressionQVT()/][/for])[/template]
[query public classReferenceQVT(cf : ecore::EClassifier):String=
	cf.ePackage.metaPackageNameOMG()+'::'+
	(if(cf.ePackage.metaPackageNameOMG()='uml')then cf.name else cf.name.metaClassNameOMG() endif)
/]
[comment]
[template public classReferenceQVT(cf : ecore::EClassifier){
	metaPackageName:String=cf.ePackage.metaPackageNameOMG();	
	metaClassName:String=if(metaPackageName='uml')then cf.name else cf.name.metaClassNameOMG() endif;	
}][metaPackageName/]::[metaClassName/][/template]
[/comment]

[template public variableExpressionQVT(expression:ocl.ecore::VariableExp)][expression.referredVariable.oclAsType(ecore::ETypedElement).variableQVT()/][/template]
[template public operationCallExpressionQVT(expression:OperationCallExp){
	referredOperation:OclAny=expression.referredOperation;
	oclOperatorName:String=if (referredOperation.oclIsUndefined()) then '' 
		else referredOperation.oclAsType(ecore::ENamedElement).oclOperatorName()
		endif;
}][if(not(expression.source.oclIsUndefined()))][expression.source.oclAsType(OCLExpression).valueExpressionQVT()/][if(expression.source.oclAsType(OCLExpression).eType.isOclCollection())]->[elseif(oclOperatorName='=')][else].[/if][/if][if(not(referredOperation.oclIsUndefined()))][referredOperation.oclAsType(ecore::ENamedElement).qvtReferenceQVT()/]([for(argument:OCLExpression|expression.argument)separator(',')][argument.valueExpressionQVT()/][/for])[/if][/template]
[template public assertExpressionQVT(expression:AssertExp)]
	assert ...
	[comment]
		[for(argument:OCLExpression|expression.argument)separator(',')]
			[argument.valueExpression(documentedPackages,tabs)/]
		[/for]
	)
	[/comment]
[/template]

[template public valueExpressionQVT(expression:OCLExpression)
][if(expression.oclIsKindOf(PropertyCallExp))][expression.oclAsType(PropertyCallExp).propertyCallExpressionQVT()/][elseif(
	expression.oclIsKindOf(ObjectExp))][expression.oclAsType(ObjectExp).objectExpQVT()/][elseif(
	expression.oclIsKindOf(SwitchExp))][expression.oclAsType(SwitchExp).switchExpQVT()/][elseif(expression.oclIsKindOf(BlockExp))
	][for (block:OCLExpression|expression.oclAsType(BlockExp)._body)][block.valueExpressionQVT()/];[/for][elseif(
	expression.oclIsKindOf(CollectionLiteralExp))][expression.oclAsType(CollectionLiteralExp).collectionLiteralExpQVT()/][elseif(
	expression.oclIsKindOf(AssignExp))][expression.oclAsType(AssignExp).assignExpressionQVT()/][elseif(
	expression.oclIsKindOf(ReturnExp))]return [if(not(expression.oclAsType(ReturnExp).value.oclIsUndefined()))][expression.oclAsType(ReturnExp).value.valueExpressionQVT()/][/if][elseif(
	expression.oclIsKindOf(MappingCallExp))][expression.oclAsType(MappingCallExp).mappingCallExpressionQVT()/][elseif(
	expression.oclIsKindOf(LogExp))][expression.oclAsType(LogExp).logExpressionQVT()/][elseif(
	expression.oclIsKindOf(AssertExp))][expression.oclAsType(AssertExp).assertExpressionQVT()/][elseif(
	expression.oclIsKindOf(OperationCallExp))][expression.oclAsType(OperationCallExp).operationCallExpressionQVT()/][elseif(
	expression.oclIsKindOf(VariableExp))][expression.oclAsType(VariableExp).variableExpressionQVT()/][elseif(
	expression.oclIsKindOf(InstantiationExp))][expression.oclAsType(InstantiationExp).instantiationExpressionQVT()/][elseif(
	expression.oclIsKindOf(BooleanLiteralExp))][expression.oclAsType(BooleanLiteralExp).booleanLiteralExpressionQVT()/][elseif(
	expression.oclIsKindOf(EnumLiteralExp))][expression.oclAsType(EnumLiteralExp)/][elseif(
	expression.oclIsKindOf(IntegerLiteralExp))][expression.oclAsType(IntegerLiteralExp)/][elseif(
	expression.oclIsKindOf(NullLiteralExp))][expression.oclAsType(NullLiteralExp)/][elseif(
	expression.oclIsKindOf(StringLiteralExp))][expression.oclAsType(StringLiteralExp)/][elseif(
	expression.oclIsKindOf(TupleLiteralExp))][expression.oclAsType(TupleLiteralExp)/][elseif(
	expression.oclIsKindOf(ContinueExp))][expression.oclAsType(ContinueExp)/][elseif(
	expression.oclIsKindOf(TypeExp))][expression.oclAsType(TypeExp).referredType.oclAsType(ecore::ENamedElement).qvtReferenceQVT()/][elseif(
	expression.oclIsKindOf(IteratorExp))][if(not(expression.oclAsType(IteratorExp).source.oclIsUndefined()))][expression.oclAsType(IteratorExp).source.oclAsType(OCLExpression).valueExpressionQVT()/]
 ->[/if][expression.oclAsType(IteratorExp).name/]([for (variable:ocl.ecore::Variable|expression.oclAsType(IteratorExp).iterator)][variable.variableQVT()/][/for][if(not(expression.oclAsType(IteratorExp)._body.oclIsUndefined()))]|[expression.oclAsType(IteratorExp)._body.oclAsType(OCLExpression).valueExpressionQVT()/][/if])[elseif(
 expression.oclIsKindOf(ForExp))][if(not(expression.oclAsType(ForExp).source.oclIsUndefined()))][expression.oclAsType(ForExp).source.oclAsType(OCLExpression).valueExpressionQVT()/]
->[/if][expression.oclAsType(ForExp).name/]([for (variable:ocl.ecore::Variable|expression.oclAsType(ForExp).iterator)][variable.variableQVT()/][/for]){
[if(not(expression.oclAsType(ForExp)._body.oclIsUndefined()))]
 [expression.oclAsType(ForExp)._body.oclAsType(OCLExpression).valueExpressionQVT()/]
[/if]
}[elseif(expression.oclIsKindOf(IfExp))]if([if(not(expression.oclAsType(IfExp).condition.oclIsUndefined()))][expression.oclAsType(IfExp).condition.oclAsType(OCLExpression).valueExpressionQVT()/][/if]) 
then {
[if(not(expression.oclAsType(IfExp).thenExpression.oclIsUndefined()) 
	and not(expression.oclAsType(IfExp).thenExpression.oclAsType(OCLExpression).expressionIsEmpty()))]
 [expression.oclAsType(IfExp).thenExpression.oclAsType(OCLExpression).valueExpressionQVT()/]
[/if] 
[if(not(expression.oclAsType(IfExp).elseExpression.oclIsUndefined()) 
	and not(expression.oclAsType(IfExp).elseExpression.oclAsType(OCLExpression).expressionIsEmpty()))]
} else {
 [expression.oclAsType(IfExp).elseExpression.oclAsType(OCLExpression).valueExpressionQVT()/]
[/if]
} endif[elseif(expression.oclIsKindOf(VariableInitExp))][expression.oclAsType(VariableInitExp).referredVariable.variableInitExpQVT()/][else]
	ERROR:[expression.eClass().name/]	
[/if][/template]
[template public variableInitExpQVT(variable:ocl.ecore::Variable)]
var [if(not(variable.name.oclIsUndefined()))][variable.name/]:[/if][if(not(variable.eType.oclIsUndefined()))][variable.eType.qvtReferenceQVT()/][/if]=[if(not(variable.initExpression.oclIsUndefined()))][variable.initExpression.oclAsType(OCLExpression).valueExpressionQVT()/][/if]
[/template]
[template public logExpressionQVT(expression:LogExp)]
log([for(argument:OCLExpression|expression.argument)separator(',')][argument.valueExpressionQVT()/][/for])[/template]

[query public containedExpressions(expression:OCLExpression):Set(OCLExpression)=
	if(expression.oclIsKindOf(PropertyCallExp))then expression.oclAsType(PropertyCallExp).containedPropertyCallExps()
	else if(expression.oclIsKindOf(ObjectExp))then
		expression.oclAsType(ObjectExp).containedObjectExps()
	else if(expression.oclIsKindOf(BlockExp))then
		expression.oclAsType(BlockExp).containedBlockExps()
	else if(expression.oclIsKindOf(OperationCallExp))then
		expression.oclAsType(OperationCallExp).containedOperationCallExps()
	else if(expression.oclIsKindOf(VariableExp))then
		expression.oclAsType(VariableExp).containedVariableExps()
	else if(expression.oclIsKindOf(InstantiationExp))then
		expression.oclAsType(InstantiationExp).argument
	else if(expression.oclIsKindOf(IteratorExp))then
		expression.oclAsType(IteratorExp).containedIteratorExps()
	else if(expression.oclIsKindOf(IfExp))then
		expression.oclAsType(IfExp).containedIfExps()
	else if(expression.oclIsKindOf(CollectionLiteralExp))then
		expression.oclAsType(CollectionLiteralExp).containedCollectionLiteralExps()
	else if(expression.oclIsKindOf(AssignExp))then
		expression.oclAsType(AssignExp).containedAssignExps()
	else if(expression.oclIsKindOf(ReturnExp))then
		expression.oclAsType(ReturnExp).containedReturnExps()
	else if(expression.oclIsKindOf(ForExp))then
		expression.oclAsType(ForExp).containedForExps()
	else if(expression.oclIsKindOf(VariableInitExp))then
		expression.oclAsType(VariableInitExp).containedVariableInitExps()
	else Set(OCLExpression){}
	endif endif endif endif endif endif endif endif endif endif endif endif endif  
/]
[query public containedReturnExps(expression:ReturnExp):Set(OCLExpression)=
	if(expression.value.oclIsUndefined())then Set(OCLExpression){} else Set(OCLExpression){expression.value} endif 
/]
[query public containedForExps(expression:ForExp):Set(OCLExpression)=
	if(expression._body.oclIsUndefined())then Set(OCLExpression){} else Set(OCLExpression){expression._body} endif 
	->union(if(expression.condition.oclIsUndefined())then Set(OCLExpression){} else Set(OCLExpression){expression.condition} endif)
	->union(if(expression.source.oclIsUndefined())then Set(OCLExpression){} else Set(OCLExpression){expression.source} endif)
/]
[query public containedVariableInitExps(expression:VariableInitExp):Set(OCLExpression)=
	if(expression.referredVariable.initExpression.oclIsUndefined())then Set(OCLExpression){} else Set(OCLExpression){expression.referredVariable.initExpression} endif 
/]

[query public containedCollectionLiteralExps(expression:CollectionLiteralExp):Set(OCLExpression)=
	expression.part.oclAsType(CollectionLiteralPart).containedCollectionLiteralParts()
/]
[query public containedAssignExps(expression:AssignExp):Set(OCLExpression)=
	if(expression.defaultValue.oclIsUndefined())then Set(OCLExpression){} else Set(OCLExpression){expression.defaultValue} endif 
	->union(if(expression.left.oclIsUndefined())then Set(OCLExpression){} else Set(OCLExpression){expression.left} endif)
	->union(expression.value)
/]
[query public containedCollectionLiteralParts(expression:CollectionLiteralPart):Set(OCLExpression)=
	if(expression.oclIsKindOf(CollectionItem))then
		Set(OCLExpression){expression.oclAsType(CollectionItem).item.oclAsType(OCLExpression)}
	else Set(OCLExpression){}
	endif
/]

[query public containedIfExps(expression:IfExp):Set(OCLExpression)=
	if(expression.condition.oclIsUndefined())then Set(OCLExpression){} else Set(OCLExpression){expression.condition} endif 
	->union(if(expression.elseExpression.oclIsUndefined())then Set(OCLExpression){} else Set(OCLExpression){expression.elseExpression} endif)
	->union(if(expression.thenExpression.oclIsUndefined())then Set(OCLExpression){} else Set(OCLExpression){expression.thenExpression} endif)
/]
[query public containedOperationCallExps(expression:OperationCallExp):Set(OCLExpression)=
	if(expression.source.oclIsUndefined())then Set(OCLExpression){} else Set(OCLExpression){expression.source} endif 
	->union(expression.argument)
/]
[query public containedVariableExps(expression:VariableExp):Set(OCLExpression)=
	if(expression.referredVariable.oclIsUndefined())then Set(OCLExpression){} 
	else expression.referredVariable.toOclVariable().containedVariable() endif 
/]
[query public containedVariable(expression : ocl.ecore::Variable ):Set(OCLExpression)=
	if(expression.initExpression.oclIsUndefined())then Set(OCLExpression){} 
	else Set(OCLExpression){expression.initExpression} endif 
/]

[query public containedIteratorExps(expression:IteratorExp):Set(OCLExpression)=
	if(expression.source.oclIsUndefined())then Set(OCLExpression){} else Set(OCLExpression){expression.source} endif 
	->union(if(expression._body.oclIsUndefined())then Set(OCLExpression){} else Set(OCLExpression){expression._body} endif)
/]

[template public mapping(element:MappingOperation,documentedPackages:Collection(ecore::EPackage))]
	[element.mapping_full_header(documentedPackages)/]
[/template]
[template public helper(element:Helper,documentedPackages:Collection(ecore::EPackage))]
	[element.helper_header(documentedPackages)/]
[/template]
[template public helper_header(element:Helper,documentedPackages:Collection(ecore::EPackage))]
	[element.helper_info()/] [element.scoped_identifier(documentedPackages)/] [element.complete_signature(documentedPackages)/]
[/template]
[template public complete_signature(element:ImperativeOperation,documentedPackages:Collection(ecore::EPackage))]
	[element.simple_signature(documentedPackages)/]
	[if(element.result->notEmpty())] : 
		[for(param:VarParameter|element.result)separator(',')]
			[param.declarator(documentedPackages)/]
		[/for]
	[/if]
[/template]
[template public init_part(element:VarParameter)]
	[comment]
	TODO
	[/comment]		
[/template]

[template public declarator(element:VarParameter,documentedPackages:Collection(ecore::EPackage))]
	[element.scoped_identifier(documentedPackages)/] : [element.typespec(documentedPackages)/] [element.init_part()/]
[/template]
[template public typespec(element:VarParameter,documentedPackages:Collection(ecore::EPackage))]
	[element.eType.scoped_identifier(documentedPackages)/] 
	[comment]
	TODO
	[/comment]		
[/template]

[template public helper_info(element:Helper)]
	[element.qualifiers()/] [element.helper_kind()/] 
[/template]
[template public helper_kind(element:Helper)]
	[bold()/][if(element.isQuery)]query[else]helper[/if][spanEnd()/]
[/template]

[template public constructor(element:Constructor,documentedPackages:Collection(ecore::EPackage))]
	[element.constructor_header(documentedPackages)/]
[/template]
[template public constructor_header(element:Constructor,documentedPackages:Collection(ecore::EPackage))]
	[element.qualifiers()/] constructor [element.scoped_identifier(documentedPackages)/] [element.simple_signature(documentedPackages)/]
[/template]
[template public qualifiers(element:ecore::EModelElement)]
	[if(element.oclIsKindOf(ImperativeOperation) and element.oclAsType(ImperativeOperation).isBlackbox)]<b>blackbox</b> [/if]
	[if(element.oclIsKindOf(Module) and element.oclAsType(Module).isBlackbox)]<b>blackbox</b> [/if]
	[if(element.oclIsKindOf(ecore::EClass) and element.oclAsType(ecore::EClass).abstract)]<b>abstract</b> [/if]
[/template]

[template public entryOperation(element:EntryOperation,documentedPackages:Collection(ecore::EPackage))]
	[element.entry_header(documentedPackages)/]
[/template]
[template public entry_header(element:EntryOperation,documentedPackages:Collection(ecore::EPackage))]
	main [element.simple_signature(documentedPackages)/]
[/template]
[template public simple_signature(element:ImperativeOperation,documentedPackages:Collection(ecore::EPackage))]
	([element.param_list(documentedPackages)/])
[/template]
[template public param_list(element:ImperativeOperation,documentedPackages:Collection(ecore::EPackage))]
	[for(param:VarParameter|element.eParameters->select(p|p.oclIsKindOf(VarParameter)))separator(',')]
		[param.param(documentedPackages)/]
	[/for]
[/template]
[template public param(element:VarParameter,documentedPackages:Collection(ecore::EPackage))]
	[element.kind/] [element.declarator(documentedPackages)/]
[/template]

[template public scoped_identifier(element:ecore::ENamedElement,documentedPackages:Collection(ecore::EPackage))]
	[if(element.oclIsKindOf(ImperativeOperation) and not(element.oclAsType(ImperativeOperation)._context.oclIsUndefined()))]
		[element.oclAsType(ImperativeOperation)._context.eType.scoped_identifier(documentedPackages)/]::[element.metaElementReference()/]
	[elseif(element.oclIsKindOf(ecore::EClassifier))]
		[element.oclAsType(ecore::EClassifier).classReference(documentedPackages)/]
	[else]
		[element.name/]
	[/if]
[/template]
[template public propertyCallExpression(expression:PropertyCallExp,documentedPackages:Collection(ecore::EPackage),tabs:Integer)]
	[if(not(expression.source.oclIsUndefined()))][expression.source.oclAsType(OCLExpression).valueExpression(documentedPackages,tabs)/].[/if]
	[expression.referredProperty.oclAsType(ecore::EStructuralFeature).qvtReference(documentedPackages)/]
[/template]
[template public objectExp(expression:ObjectExp,documentedPackages:Collection(ecore::EPackage),tabs:Integer)]
	new 
	([for (arg:OCLExpression|expression.argument)separator(',')][arg.valueExpression(documentedPackages,tabs)/][/for])
	[if(not(expression._body.oclIsUndefined()))]
		{
		[for (block:OCLExpression|expression._body.content)]
			[block.valueExpression(documentedPackages,tabs+1)/]
			[if(not(block.oclIsKindOf(BlockExp)))];[indentedEmptyP(tabs+1)/][/if]
		[/for]
		[comment]
		[indentedEmptyP(tabs+1)/][expression._body.content.valueExpression(documentedPackages,tabs+1)/]
		[/comment]
		[indentedEmptyP(tabs)/]}
	[/if]	
[/template]
[comment]
<switch_exp> ::= 'switch' ('(' <iter_declarator> ')')? <switch_body>
<switch_body> ::= '{' <switch_alt>+ <switch_else>? '}'
<switch_alt> ::= 'case' '(' <expression> ')' <expression_statement>
<switch_else> ::= 'else' <expression_statement>
[/comment]

[template public switchExp(expression:SwitchExp,documentedPackages:Collection(ecore::EPackage),tabs:Integer)]
	switch{
		[indentedEmptyP(tabs+1)/]
		[for (block:AltExp|expression.alternativePart)]
			[block.altExpression(documentedPackages,tabs+1)/]
			[if(not(block.oclIsKindOf(BlockExp)))];[indentedEmptyP(tabs+1)/][/if]
		[/for]
		[if(not(expression.elsePart.oclIsUndefined()))]
			else 
			[expression.elsePart.valueExpression(documentedPackages,tabs+1)/]
			[if(not(expression.elsePart.oclIsKindOf(BlockExp)))];[indentedEmptyP(tabs+1)/][/if]
		[/if]
	[indentedEmptyP(tabs)/]}
[/template]
[template public altExpression(expression:AltExp,documentedPackages:Collection(ecore::EPackage),tabs:Integer)]
	case([expression.condition.valueExpression(documentedPackages,tabs+1)/])
	[indentedEmptyP(tabs+2)/]
	[expression._body.valueExpression(documentedPackages,tabs+2)/]
[/template]
[template public collectionLiteralExp(expression:CollectionLiteralExp,documentedPackages:Collection(ecore::EPackage),tabs:Integer)]
	[comment]{[expression.part->size()/],[expression.name/],[expression/],[expression.eType/]}[/comment]
	[if((expression.part->size()=0) and not(expression.eType.oclIsUndefined()))]
		[expression.eType.collectionLiteralType(documentedPackages)/]
	[else]
	[expression.part.oclAsType(CollectionLiteralPart).collectionLiteralPart(documentedPackages,tabs)/]
	[/if]
[/template]
[template public collectionLiteralPart(expression:CollectionLiteralPart,documentedPackages:Collection(ecore::EPackage),tabs:Integer)]
	[if(expression.oclIsKindOf(CollectionItem))]
		[expression.oclAsType(CollectionItem).item.oclAsType(OCLExpression).valueExpression(documentedPackages,tabs)/]
	[else]
		[expression.eClass().name/]/[expression/]
	[/if]
[/template]

[template public collectionLiteralType(classifier:ecore::EClassifier,documentedPackages:Collection(ecore::EPackage))]
	[if(classifier.oclIsKindOf(CollectionType))]
		[classifier.oclAsType(CollectionType).kind/]{}
	[else]	
		[classifier.qvtReference(documentedPackages)/]
	[/if]
[/template]

[template public assignExpression(expression:AssignExp,documentedPackages:Collection(ecore::EPackage),tabs:Integer)]
	[expression.left.valueExpression(documentedPackages,tabs)/][if(expression.isReset)]:=[else]+=[/if][expression.value.valueExpression(documentedPackages,tabs)/]
[/template]
[query public oclOperatorName(element:ecore::ENamedElement):String=
	element.name
/]
[template public operationCallExpression(expression:OperationCallExp,documentedPackages:Collection(ecore::EPackage),tabs:Integer){
	referredOperation:OclAny=expression.referredOperation;
	oclOperatorName:String=if (referredOperation.oclIsUndefined()) then '' 
		else referredOperation.oclAsType(ecore::ENamedElement).oclOperatorName()
		endif;
}]
	[if(not(expression.source.oclIsUndefined()))]
		[expression.source.oclAsType(OCLExpression).valueExpression(documentedPackages,tabs)/]
		[if(expression.source.oclAsType(OCLExpression).eType.isOclCollection())]->[elseif(oclOperatorName='=')][else].[/if]
	[/if]	
	[if(not(referredOperation.oclIsUndefined()))]
		[referredOperation.oclAsType(ecore::ENamedElement).qvtReference(documentedPackages)/](
			[for(argument:OCLExpression|expression.argument)separator(',')]
				[argument.valueExpression(documentedPackages,tabs)/]
			[/for]
		)
	[/if]
[/template]
[template public mappingCallExpression(expression:MappingCallExp,documentedPackages:Collection(ecore::EPackage),tabs:Integer){
	referredOperation:OclAny=expression.referredOperation;
	oclOperatorName:String=if (referredOperation.oclIsUndefined()) then '' 
		else referredOperation.oclAsType(ecore::ENamedElement).oclOperatorName()
		endif;
}]
	[if(not(expression.source.oclIsUndefined()))]
		[expression.source.oclAsType(OCLExpression).valueExpression(documentedPackages,tabs)/].
	[/if]
	map [if(not(referredOperation.oclIsUndefined()))]
		[referredOperation.oclAsType(ecore::ENamedElement).qvtReference(documentedPackages)/](
			[for(argument:OCLExpression|expression.argument)separator(',')]
				[argument.valueExpression(documentedPackages,tabs)/]
			[/for]
		)
	[/if]
[/template]
[template public logExpression(expression:LogExp,documentedPackages:Collection(ecore::EPackage),tabs:Integer)]
	log(...)
	[comment]
		[for(argument:OCLExpression|expression.argument)separator(',')]
			[argument.valueExpression(documentedPackages,tabs)/]
		[/for]
	)
	[/comment]
[/template]
[template public assertExpression(expression:AssertExp,documentedPackages:Collection(ecore::EPackage),tabs:Integer)]
	assert ...
	[comment]
		[for(argument:OCLExpression|expression.argument)separator(',')]
			[argument.valueExpression(documentedPackages,tabs)/]
		[/for]
	)
	[/comment]
[/template]
[query public isOclCollection(classifier:ecore::EClassifier):Boolean=
	(classifier.instanceClassName='java.util.List')
	or (classifier.instanceClassName='org.eclipse.ocl.util.Bag')
/]

[template public variableExpression(expression:ocl.ecore::VariableExp,documentedPackages:Collection(ecore::EPackage))]
	[comment]**variableExpression [expression.referredVariable/]**
	[expression.referredVariable.oclAsType(ocl.ecore::Variable).variable(documentedPackages)/]
	[/comment]
	[expression.referredVariable.oclAsType(ecore::ETypedElement).variable(documentedPackages)/]
[/template]
[template public instantiationExpression(expression:InstantiationExp,documentedPackages:Collection(ecore::EPackage),tabs:Integer)]
	new [expression.instantiatedClass.classReference(documentedPackages)/](
		[for (arg:OCLExpression|expression.argument)separator(',')][arg.valueExpression(documentedPackages,tabs)/][/for])
[/template]
[template public booleanLiteralExpression(expression:BooleanLiteralExp,documentedPackages:Collection(ecore::EPackage))]
	[expression.booleanSymbol/]
[/template]
[template public qvtReference(element : ecore::ENamedElement,documentedPackages:Collection(ecore::EPackage))]
	[if(element.eClass().ePackage.name='')]
		[element.name.displayHtml()/]
	[elseif(
		(element.oclIsKindOf(ecore::EOperation) and (element.oclAsType(ecore::EOperation).eContainingClass.ePackage.name='oclstdlib'))
		or (element.oclIsKindOf(ecore::EStructuralFeature) and (element.oclAsType(ecore::EStructuralFeature).eContainingClass.ePackage.name='oclstdlib'))
		)]
		[element.name.displayHtml()/]
	[elseif(
		not(element.oclIsKindOf(ImperativeOperation) and (element.oclAsType(ImperativeOperation).eContainingClass.ePackage.name='NIEMpim2psm'))
		)]
		[element.name.displayHtml()/]
	[elseif(element.oclIsKindOf(ecore::EOperation))]
		[element.metaElementReference()/]
	[else]
		[element.metaReference(documentedPackages)/]
	[/if]
[/template]
[template public variable(variable: ecore::ETypedElement , documentedPackages:Collection(ecore::EPackage))]
	[comment]
[template public variable(variable: ocl.ecore::Variable , documentedPackages:Collection(ecore::EPackage))]
	[/comment]
	[variable.name/]
[/template]
[template public variableInitExp(variable:ocl.ecore::Variable,documentedPackages:Collection(ecore::EPackage),tabs:Integer)]
	var [if(not(variable.name.oclIsUndefined()))][variable.name/]:[/if]
	[if(not(variable.eType.oclIsUndefined()))][variable.eType.qvtReference(documentedPackages)/][/if]
	=[if(not(variable.initExpression.oclIsUndefined()))][variable.initExpression.oclAsType(OCLExpression).valueExpression(documentedPackages,tabs)/][/if]
[/template]
[query public containedPropertyCallExps(expression:PropertyCallExp):Set(OCLExpression)=
	if(expression.source.oclIsUndefined())then Set(OCLExpression){} else Set(OCLExpression){expression.source} endif 
	->union(expression.qualifier)
/]
[query public containedObjectExps(expression:ObjectExp):Sequence(OCLExpression)=
	if(expression._body.oclIsUndefined()) then Sequence(OCLExpression){} else expression._body.content->asSequence() endif
	->union(expression.argument->asSequence())
	->union(expression.referredObject.containedVariables())
/]	
[query public containedVariables(expression:ocl.ecore::Variable):Sequence(OCLExpression)=
	if(expression.initExpression.oclIsUndefined()) then Sequence(OCLExpression){}
	else Sequence(OCLExpression){expression.initExpression.oclAsType(OCLExpression)} endif
/]	

[template public mapping_full_header(element:MappingOperation,documentedPackages:Collection(ecore::EPackage))]
	[element.mapping_header(documentedPackages)/]
[/template]
[query public containedBlockExps(expression:BlockExp):Set(OCLExpression)=
	expression._body
/]
[template public mapping_header(element:MappingOperation,documentedPackages:Collection(ecore::EPackage))]
[comment]
	[element.qualifiers()/] mapping [comment][element._context.kind/][/comment] [element.scoped_identifier(documentedPackages)/] 
		[newP()/][bold()/]     disjunct[spanEnd()/] [for (identifier:ecore::ENamedElement|element.disjunct)separator(',')][identifier.scoped_identifier(documentedPackages)/][/for] 
		[newP()/][bold()/]     inherits[spanEnd()/] [for (identifier:ecore::ENamedElement|element.inherited)separator(',')][identifier.scoped_identifier(documentedPackages)/][/for]
[/comment]
	[element.qualifiers()/][bold()/] mapping [spanEnd()/] [element.scoped_identifier(documentedPackages)/] 
	[element.complete_signature(documentedPackages)/] 
	[element.mapping_extras(documentedPackages)/]
[/template]
[template public mapping_extras(element:MappingOperation,documentedPackages:Collection(ecore::EPackage)){
		when:Sequence(OCLExpression)=element.when.oclAsType(OCLExpression);
}]
	[if(element.disjunct->notEmpty())]
		[newP()/]disjunct [for (identifier:ecore::ENamedElement|element.disjunct)separator(','+2.indentedEmptyP())][identifier.scoped_identifier(documentedPackages)/][/for] 
	[/if]	
	[if(element.inherited->notEmpty())]
		[newP()/]inherits [for (identifier:ecore::ENamedElement|element.inherited)separator(','+2.indentedEmptyP())][identifier.scoped_identifier(documentedPackages)/][/for]
	[/if]	
	[if(when->notEmpty())]
		[newP()/]when
		{
				[for(expression:OCLExpression|when)separator(2.indentedEmptyP())]
					[expression.valueExpression(documentedPackages,2)/];
				[/for]
		}
	[/if]
	
[/template]
