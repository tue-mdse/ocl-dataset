[comment]
  Copyright 2015
[/comment]
[module elemento('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import common/]

[template public generateClassElemento(c : Class)]
[c.packageBlock()/]

[_commentBodyBlock()/]

import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.IOException;

/**
 * 
 * Elemento base do jogo. Esta classe prove os principais atributos 
 * para os demais elementos especializados deste elemento.
 * 
 */
public abstract class Elemento implements Acoes {

	protected Rectangle2D.Double pos;
[for (i : InterfaceRealization | c.interfaceRealization)]
[for (interface : Interface | i.contract)]
[for (cl : Classifier | interface.general)]
[if (cl.name = 'Colisao')]
	private Elemento['[]'/] collidingEntities;
[/if]
[/for]
[/for]
[/for]
	protected int animates;
	protected int numFrames;
	protected int direction;
	protected boolean ativo;
	protected boolean visivel;
	protected int id;
	protected BufferedImage image;

	/**
	 * 
	 * Crie um novo Elemento.
	 * 
	 * @param x
	 *            posição x do elemento
	 * @param y
	 *            posição y do elemento
	 * @param width
	 *            largura do elemento
	 * @param height
	 *            altura do elemento
	 *            
	 */
	public Elemento(int x, int y, int width, int height) {
		this.pos = new Rectangle2D.Double(x, y, width, height);
[for (i : InterfaceRealization | c.interfaceRealization)]
[for (interface : Interface | i.contract)]
[for (cl : Classifier | interface.general)]
[if (cl.name = 'Colisao')]
		this.collidingEntities = new Elemento['[4]'/];
[/if]
[/for]
[/for]
[/for]
		this.ativo = true;
		this.visivel = true;
	}

	/**
	 * 
	 * metodo que carrega a imagem da sprite do personagem.
	 * 
	 * @param image
	 *            nome da imagem.
	 * 
	 */
	public void carregaImage(String image){
		try {
			this.image = ImageManager.getInstance().loadImage(image);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 
	 * metodo de atualização do elemento.
	 * 
	 * @param currentTick
	 *            numero de vezes que o jogo fez iterações.
	 * 
	 */
	public abstract void update(int currentTick);

	/**
	 * 
	 * retorna a posição atual do elemento.
	 * 
	 * @return Rectangle2D.Double
	 */
	public Rectangle2D.Double getPos() {
		return pos;
	}

[for (i : InterfaceRealization | c.interfaceRealization)]
[for (interface : Interface | i.contract)]
[for (cl : Classifier | interface.general)]
[if (cl.name = 'Colisao')]
	/**
	 * 
	 * retorna outros elementos com os quais este elemento esta colidindo.
	 * 
	 * @return Elemento['[]'/]
	 */
	public Elemento['[]'/] getCollidingEntities() {
		return collidingEntities;
	}
[/if]
[/for]
[/for]
[/for]

	/**
	 * 
	 * retorna o estado ativo do elemento.
	 * 
	 * @return boolean
	 */
	public boolean isAtivo() {
		return ativo;
	}

	/**
	 * 
	 * altera o estado ativo do elemento.
	 * 
	 * @param ativo
	 *            valor do novo estado ativo do elemento.
	 * 
	 */
	public void setAtivo(boolean ativo) {
		this.ativo = ativo;
	}

	/**
	 * 
	 * retorna o estado visivel do elemento.
	 * 
	 * @return boolean
	 */
	public boolean isVisivel() {
		return visivel;
	}

	/**
	 * 
	 * altera o estado visivel do elemento.
	 * 
	 * @param ativo
	 *            valor do novo estado visivel do elemento.
	 * 
	 */
	public void setVisivel(boolean visivel) {
		this.visivel = visivel;
	}

	public BufferedImage getImage() {
		return image;
	}

	public int getAnimates() {
		return animates;
	}

	public int getNumFrames() {
		return numFrames;
	}

	public int getDirection() {
		return direction;
	}

	
}
[/template]