[comment]Copyright (c) 2013 CEA LIST.

All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
 Obeo - Initial API and implementation
 CEA LIST - Modification to support Facade code generation[/comment]
[comment encoding = UTF-8 /]
[module RepresentingElementAdapter('http://www.eclipse.org/emf/2002/GenModel', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipse::emf::eef::codegen::ecore::services::common /]
[import org::eclipse::emf::eef::codegen::ecore::services::header /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenPackage /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClass /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClassifier /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenFeature /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenDataType /]
[import org::eclipse::emf::eef::codegen::ecore::services::StringUtil /]


[template public representingElementAdapterClass(genPackage : GenPackage) { genModel : GenModel = genPackage.genModel; packageName : String = genPackage.getUtilitiesPackageName(); className : String = 'RepresentingElementAdapter'} ]
[genModel.initializeImportManager(packageName, className)/]

[genModel.getImportedName('org.eclipse.emf.common.util.URI')/]

[file (genPackage.representingElementAdapterClassPath(className), false, 'UTF-8')]
[genModel.includeHeader()/]
package [packageName/];
[let content : String = genPackage. representingElementAdapterFileContent(genModel, className)]
[genModel.genSortedImports()/]
[content/]
[/let]
[/file]
[/template]

[template protected representingElementAdapterFileContent(genPackage : GenPackage, genModel : GenModel, className : String)]
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.impl.AdapterImpl;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.uml2.uml.Element;

public class RepresentingElementAdapter extends AdapterImpl {

	private EObject representingElement;

	/**
	 * Does nothing; clients may override so that it does something.
	 */
	public void notifyChanged(Notification msg) {

		//Wrap notif
		Object umlNotifier = msg.getNotifier();
		EObject specificNotifier = Wrapper.getInstance().findOrCreateSpecific((EObject)umlNotifier);

		Object umlFeature = msg.getFeature();
		EStructuralFeature specificFeature = Wrapper.getInstance().getFeatureMappingFromUML((EStructuralFeature)umlFeature);

		if(msg.getFeature() instanceof EReference) {
			Object umlOld = msg.getOldValue();
			EObject specificOld = null;
			if(umlOld != null) {
				specificOld = Wrapper.getInstance().findOrCreateSpecific((Element)umlOld);
			}

			Object umlNew = msg.getNewValue();
			EObject specificNew = null;
			if(umlNew != null) {
				specificNew = Wrapper.getInstance().findOrCreateSpecific((Element)umlNew);
			}

			Notification notification = new ENotificationImpl((InternalEObject)specificNotifier, msg.getEventType(), specificFeature, specificOld, specificNew, msg.getPosition(), msg.wasSet());

			specificNotifier.eNotify(notification);

		} else {
			Notification notification = new ENotificationImpl((InternalEObject)specificNotifier, msg.getEventType(), specificFeature, msg.getOldValue(), msg.getNewValue(), msg.getPosition(), msg.wasSet());

			specificNotifier.eNotify(notification);
		}
		//System.err.println("UML Notif -> " + msg);
	}


	public EObject get__Representing() {
		return representingElement;
	}

	public void set__Representing(EObject representing) {
		representingElement = representing;
	}
}


[/template]

[query public representingElementAdapterClassPath(genPackage : GenPackage, className : String) : String
	= genPackage.genModel.extractSourceDirectory(genPackage.genModel.modelDirectory) + '/'+ genPackage.getUtilitiesPackageName().toPath() + '/' +
		className+ '.java'/]
