[comment]Copyright (c) 2013 CEA LIST.

All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
 Obeo - Initial API and implementation
 CEA LIST - Modification to support Facade code generation[/comment]
[comment encoding = UTF-8 /]
[module WrapperClass('http://www.eclipse.org/emf/2002/GenModel','http://www.eclipse.org/papyrus/facademapping','http://www.eclipse.org/emf/2002/Ecore')]

[import org::eclipse::emf::eef::codegen::ecore::services::common /]
[import org::eclipse::emf::eef::codegen::ecore::services::header /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenPackage /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClass /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClassifier /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenFeature /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenDataType /]
[import org::eclipse::emf::eef::codegen::ecore::services::StringUtil /]
[import org::eclipse::papyrus::facade::codegen::utils::FacadeCodegenUtils /]


[template public wrapperClass(genPackage : GenPackage)  { genModel : GenModel = genPackage.genModel; packageName : String = genPackage.getUtilitiesPackageName(); className : String = 'Wrapper'}]

[genModel.initializeImportManager(packageName, className)/]

[genModel.getImportedName('org.eclipse.emf.common.util.URI')/]


[file (genPackage.wrapperClassPath(className), false, 'UTF-8')]
[genModel.includeHeader()/]
package [packageName/];
[let content : String = genPackage.wrapperFileContent(genModel, className)]
[genModel.genSortedImports()/]
[content/]
[/let]
[/file]

[/template]

[template protected wrapperFileContent(genPackage : GenPackage, genModel : GenModel, className : String)]
/**
 * <!-- begin-user-doc -->
 * The <b>Wrapper</b> associated with the package.
 * <!-- end-user-doc -->
 * @see [genPackage.getQualifiedResourceFactoryClassName()/]
 * @generated
 */
public class [className/] 
{
private static volatile Wrapper instance = null;

	private Wrapper() {
		super();
	}

	public final static Wrapper getInstance() {
		if(instance == null) {
			synchronized(Wrapper.class) {
				if(instance == null) {
					instance = new Wrapper();
				}
			}
		}
		return instance;
	}

	public [genModel.getImportedName('org.eclipse.emf.ecore.EClassifier')/] getMappingFromUML([genModel.getImportedName('org.eclipse.emf.ecore.EObject')/] umlElement) {
		
		[genModel.getAllMetaclassMappings().genMappingfromUML(genModel, genPackage)/]
			
		return null;
	}

	public <E extends [genModel.getImportedName('org.eclipse.papyrus.facade.utils.RepresentingElement')/]> void updateCache([genModel.getImportedName('org.eclipse.emf.common.util.EList')/]<E> update, [genModel.getImportedName('org.eclipse.emf.common.util.EList')/]<E> cache) {
		//Empty the cache
		while(!cache.isEmpty()) {
			((org.eclipse.papyrus.facade.utils.wrappinglist.WrappingList<E>)cache).silentRemove(0);
		}


		for(int i = 0; i < update.size(); i++) {
			E elementInUpdate = update.get(i);
			((org.eclipse.papyrus.facade.utils.wrappinglist.WrappingList<E>)cache).silentAdd(i, elementInUpdate);
		}
	}

	public <E extends [genModel.getImportedName('org.eclipse.papyrus.facade.utils.RepresentingElement')/]> [genModel.getImportedName('org.eclipse.emf.common.util.EList')/] toRepresentedList([genModel.getImportedName('java.util.List')/]<E> list) {
		[genModel.getImportedName('org.eclipse.emf.common.util.EList')/]<[genModel.getImportedName('org.eclipse.emf.ecore.EObject')/]> result = new [genModel.getImportedName('org.eclipse.emf.common.util.BasicEList')/]<[genModel.getImportedName('org.eclipse.emf.ecore.EObject')/]>();

		for(E representingElement : list) {
			result.add(representingElement.get__Represented());
		}

		return result;
	}

	public [genModel.getImportedName('org.eclipse.emf.ecore.EStructuralFeature')/] getFeatureMappingFromUML([genModel.getImportedName('org.eclipse.emf.ecore.EStructuralFeature')/] feature) {

		[genModel.getAllFeatureMappings().getFeatureMappingFromUML(genModel, genPackage)/]


		return null;
	}

	public Enum getEnumMappingFromUML(Enum value) {

		[genModel.getAllEnumLiteralMappings().genEnumMappingfromUML(genModel, genPackage)/]

		return null;
	}

	public Enum getEnumMappingFromSpecific(Enum value) {

		[genModel.getAllEnumLiteralMappings().genEnumMappingfromSpecific(genModel, genPackage)/]

		return null;
	}

	public [genModel.getImportedName('org.eclipse.emf.ecore.EObject')/] findOrCreateSpecific([genModel.getImportedName('org.eclipse.emf.ecore.EObject')/] umlElement) {
		[genModel.getImportedName('org.eclipse.emf.common.util.EList')/]<[genModel.getImportedName('org.eclipse.emf.common.notify.Adapter')/]> adapters = umlElement.eAdapters();
		for([genModel.getImportedName('org.eclipse.emf.common.notify.Adapter')/] adapter : adapters) {
			if(adapter instanceof [genModel.getImportedName(genPackage.getUtilitiesPackageName()+'.RepresentingElementAdapter')/]) {
				return (([genModel.getImportedName(genPackage.getUtilitiesPackageName()+'.RepresentingElementAdapter')/])adapter).get__Representing();
			}
		}

		[genModel.getImportedName('org.eclipse.emf.ecore.EClassifier')/] eClassifier = getMappingFromUML(umlElement);
		if(eClassifier != null) {
			if(eClassifier instanceof [genModel.getImportedName('org.eclipse.emf.ecore.EClass')/]) {
				[genModel.getImportedName('org.eclipse.emf.ecore.EObject')/] representingElement = [genPackage.getImportedFactoryInterfaceName()/].eINSTANCE.create(([genModel.getImportedName('org.eclipse.emf.ecore.EClass')/])eClassifier);
				if(representingElement instanceof [genModel.getImportedName('org.eclipse.papyrus.facade.utils.RepresentingElement')/]) {
					//Override represented

					(([genModel.getImportedName('org.eclipse.papyrus.facade.utils.RepresentingElement')/])representingElement).set__Represented(umlElement);
					[genModel.getImportedName(genPackage.getUtilitiesPackageName()+'.RepresentingElementAdapter')/] adapter = new [genModel.getImportedName(genPackage.getUtilitiesPackageName()+'.RepresentingElementAdapter')/]();
					adapter.set__Representing(representingElement);
					umlElement.eAdapters().add(adapter);
					return representingElement;
				}
			}
		}


		return null;
	}
}

[/template]

[template public genEnumMappingfromUML(mapping : Mapping , genModel:GenModel, genPackage: GenPackage)]

	if(value ==  [getPackagePathFromMapping(mapping)/].[getUMLEnumElementFromMapping(mapping)/]) {
		return [genModel.getImportedName(genPackage.getInterfacePackageName())/].[getFacadeEnumElementFromMapping(mapping)/];
	}

[/template]

[template public genEnumMappingfromSpecific(mapping : Mapping , genModel:GenModel, genPackage: GenPackage)]

	if(value ==  [genModel.getImportedName(genPackage.getInterfacePackageName())/].[getFacadeEnumElementFromMapping(mapping)/]) {
		return [getPackagePathFromMapping(mapping)/].[getUMLEnumElementFromMapping(mapping)/];
	}

[/template]

[template public genMappingfromUML(mapping : Mapping , genModel:GenModel, genPackage: GenPackage)]

	if(umlElement.eClass() == [genModel.getImportedName(getUMLPackageName(mapping))/].eINSTANCE.get[getUMLAccessorName(mapping,genModel)/]()) {
		[mapping.getCorrespondingStereotypeMapping(genModel,genPackage)/]

		return [genModel.getImportedName(genPackage.getImportedPackageInterfaceName())/].eINSTANCE.get[getClassifierAccessorName(genModel,mapping)/]();
	}

[/template]

[template public getFeatureMappingFromUML(mapping : Mapping , genModel:GenModel, genPackage: GenPackage)]
	if(feature == [genModel.getImportedName(getUMLPackageName(mapping))/].eINSTANCE.get[getUMLFeatureFromMapping(mapping,genModel)/]()) {
		return [genModel.getImportedName(genPackage.getImportedPackageInterfaceName())/].eINSTANCE.get[getFeatureAccessorName(genModel,mapping)/]();
	
	}
[/template]

[query public wrapperClassPath(genPackage : GenPackage, className : String) : String
	= genPackage.genModel.extractSourceDirectory(genPackage.genModel.modelDirectory) + '/'+ genPackage.getUtilitiesPackageName().toPath() + '/' +
		className+ '.java'/]
