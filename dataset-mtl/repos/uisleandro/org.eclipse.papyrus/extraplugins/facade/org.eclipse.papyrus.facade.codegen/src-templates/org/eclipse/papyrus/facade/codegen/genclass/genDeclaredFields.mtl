[comment]Copyright (c) 2013 CEA LIST.

All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
 Obeo - Initial API and implementation
 CEA LIST - Modification to support Facade code generation[/comment]
[comment encoding = UTF-8 /]
[module genDeclaredFields('http://www.eclipse.org/emf/2002/GenModel', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClass /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClassifier /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenFeature /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]

[template public genDeclaredFields(genFeature : GenFeature, genClass : GenClass, genModel : GenModel, isGWT : Boolean, isJDK50 : Boolean)]
    [if (genFeature.hasSettingDelegate())]
	/**
	 * The cached setting delegate for the '{@link #[genFeature.getGetAccessor()/]() <em>[genFeature.getFormattedName()/]</em>}' [genFeature.getFeatureKind()/].
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #[genFeature.getGetAccessor()/]()
	 * @generated
	 * @ordered
	 */
      [if (isGWT) ]
	@[genModel.getImportedName('com.google.gwt.user.client.rpc.GwtTransient')/]
      [/if]
	protected [genModel.getImportedName('org.eclipse.emf.ecore.EStructuralFeature')/].Internal.SettingDelegate [genFeature.getUpperName()/]__ESETTING_DELEGATE = (([genModel.getImportedName('org.eclipse.emf.ecore.EStructuralFeature')/].Internal)[genFeature.getQualifiedFeatureAccessor()/]).getSettingDelegate();

    [else][if (genFeature.isListType() or genFeature.isReferenceType())]
      [if (genClass.isField(genFeature)) ]
	/**
	 * The cached value of the '{@link #[genFeature.getGetAccessor()/]() <em>[genFeature.getFormattedName()/]</em>}' [genFeature.getFeatureKind()/].
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #[genFeature.getGetAccessor()/]()
	 * @generated
	 * @ordered
	 */
        [if (isGWT) ]
	@[genModel.getImportedName('com.google.gwt.user.client.rpc.GwtTransient')/]
        [/if]
	protected [genFeature.getImportedInternalType(genClass)/] [genFeature.getSafeName()/];

      [/if]
      [if (genModel.arrayAccessors and genFeature.isListType() and not genFeature.isFeatureMapType() and not genFeature.isMapType())]
        [let rawListItemType : String = genFeature.getRawListItemType()]
          [let index : Integer = rawListItemType.index('[')]
            [let head : String = if (index <> -1) then rawListItemType.substring(1, index) else rawListItemType endif]
              [let tail : String = if (index <> -1) then rawListItemType.substring(index + 1) else '' endif]
	/**
	 * The empty value for the '{@link #[genFeature.getGetArrayAccessor()/]() <em>[genFeature.getFormattedName()/]</em>}' array accessor.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #[genFeature.getGetArrayAccessor()/]()
	 * @generated
	 * @ordered
	 */
        [if (genFeature.getQualifiedListItemType(genClass).contains('<')) ]
	@SuppressWarnings("unchecked")
        [/if]
	protected static final [rawListItemType/]['[]'/] [genFeature.getUpperName()/]_EEMPTY_ARRAY = new [head/] ['[0]'/][tail/];
                
              [/let]
            [/let]
          [/let]
        [/let]
      [/if]
    [else]
      [if (genFeature.hasEDefault() and (not genFeature.isVolatile() or not genModel.reflectiveDelegation and (not genFeature.hasDelegateFeature() or not genFeature.isUnsettable())))]
        [let staticDefaultValue : String = genFeature.getStaticDefaultValue()]
	/**
	 * The default value of the '{@link #[genFeature.getGetAccessor()/]() <em>[genFeature.getFormattedName()/]</em>}' [genFeature.getFeatureKind()/].
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #[genFeature.getGetAccessor()/]()
	 * @generated
	 * @ordered
	 */
        [if (genModel.useGenerics() and genFeature.isListDataType() and genFeature.isSetDefaultValue()) ]
	@SuppressWarnings("unchecked")
        [/if]
	protected static final [genFeature.getImportedType(genClass)/] [genFeature.getEDefault()/][if (staticDefaultValue = '') ]; // TODO The default value literal "[genFeature.ecoreFeature.defaultValueLiteral/]" is not valid.[else] = [staticDefaultValue/];[genModel.getNonNLS(staticDefaultValue)/][/if]

        [/let]
      [/if]
      [if (genClass.isField(genFeature)) ]
        [if (genClass.isFlag(genFeature))]
          [let flagIndex : Integer = genClass.getFlagIndex(genFeature)]
            [if (flagIndex > 31 and flagIndex.mod(32) = 0)]
	/**
	 * An additional set of bit flags representing the values of boolean attributes and whether unsettable features have been set.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
              [if (isGWT)]
	@[genModel.getImportedName('com.google.gwt.user.client.rpc.GwtTransient')/]
              [/if]
	protected int [genClass.getFlagsField(genFeature)/] = 0;

            [/if]
            [if (genFeature.isEnumType())]
	/**
	 * The offset of the flags representing the value of the '{@link #[genFeature.getGetAccessor()/]() <em>[genFeature.getFormattedName()/]</em>}' [genFeature.getFeatureKind()/].
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	protected static final int [genFeature.getUpperName()/]_EFLAG_OFFSET = [flagIndex.mod(32)/];

	/**
	 * The flags representing the default value of the '{@link #[genFeature.getGetAccessor()/]() <em>[genFeature.getFormattedName()/]</em>}' [genFeature.getFeatureKind()/].
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	protected static final int [genFeature.getUpperName()/]_EFLAG_DEFAULT = [if (isJDK50) ][genFeature.getEDefault()/].ordinal()[else][genFeature.getImportedType(genClass)/].VALUES.indexOf([genFeature.getEDefault()/])[/if] << [genFeature.getUpperName()/]_EFLAG_OFFSET;

	/**
	 * The array of enumeration values for '{@link [genFeature.getImportedType(genClass)/] [genFeature.getTypeGenClassifier().getFormattedName()/]}'
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	private static final [genFeature.getImportedType(genClass)/]['[]'/] [genFeature.getUpperName()/]_EFLAG_VALUES = [if (isJDK50) ][genFeature.getImportedType(genClass)/].values()[else]([genFeature.getImportedType(genClass)/]['[]'/])[genFeature.getImportedType(genClass)/].VALUES.toArray(new [genFeature.getImportedType(genClass)/]['['/][genFeature.getImportedType(genClass)/].VALUES->size()])[/if];

            [/if]
	/**
	 * The flag[if genClass.getFlagSize(genFeature) > 1]s[/if] representing the value of the '{@link #[genFeature.getGetAccessor()/]() <em>[genFeature.getFormattedName()/]</em>}' [genFeature.getFeatureKind()/].
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #[genFeature.getGetAccessor()/]()
	 * @generated
	 * @ordered
	 */
	protected static final int [genFeature.getUpperName()/]_EFLAG = [genClass.getFlagMask(genFeature)/] << [if (genFeature.isEnumType()) ][genFeature.getUpperName()/]_EFLAG_OFFSET[else][flagIndex.mod(32)/][/if];

          [/let]
        [else]
	/**
	 * The cached value of the '{@link #[genFeature.getGetAccessor()/]() <em>[genFeature.getFormattedName()/]</em>}' [genFeature.getFeatureKind()/].
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #[genFeature.getGetAccessor()/]()
	 * @generated
	 * @ordered
	 */
          [if (isGWT) ]
	@[genModel.getImportedName('com.google.gwt.user.client.rpc.GwtTransient')/]
          [/if]
	protected [genFeature.getImportedType(genClass)/] [genFeature.getSafeName()/][if (genFeature.hasEDefault()) ] = [genFeature.getEDefault()/][/if];

        [/if]
      [/if]
    [/if][/if]
    [if (genClass.isESetField(genFeature)) ]
      [if (genClass.isESetFlag(genFeature))]
        [let flagIndex : Integer = genClass.getESetFlagIndex(genFeature)]
          [if (flagIndex > 31 and flagIndex.mod(32) = 0) ]
	/**
	 * An additional set of bit flags representing the values of boolean attributes and whether unsettable features have been set.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
            [if (isGWT) ]
	@[genModel.getImportedName('com.google.gwt.user.client.rpc.GwtTransient')/]
            [/if]
	protected int [genClass.getESetFlagsField(genFeature)/] = 0;

          [/if]
	/**
	 * The flag representing whether the [genFeature.getFormattedName()/] [genFeature.getFeatureKind()/] has been set.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	protected static final int [genFeature.getUpperName()/]_ESETFLAG = 1 << [flagIndex.mod(32) /];
        [/let]
      [else]
	/**
	 * This is true if the [genFeature.getFormattedName()/] [genFeature.getFeatureKind()/] has been set.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
        [if (isGWT) ]
	@[genModel.getImportedName('com.google.gwt.user.client.rpc.GwtTransient')/]
        [/if]
	protected boolean [genFeature.getUncapName()/]ESet;

      [/if]
    [/if]
[/template]
