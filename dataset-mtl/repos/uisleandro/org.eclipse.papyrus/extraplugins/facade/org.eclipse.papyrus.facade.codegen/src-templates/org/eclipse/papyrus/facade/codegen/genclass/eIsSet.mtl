[comment]Copyright (c) 2013 CEA LIST.

All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
 Obeo - Initial API and implementation
 CEA LIST - Modification to support Facade code generation[/comment]
[comment encoding = UTF-8 /]
[module eIsSet('http://www.eclipse.org/emf/2002/GenModel')/]

[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClass /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClassifier /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenFeature /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenEnum /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenPackage /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenDataType /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenOperation /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenParameter /]

[template public eIsSet(genClass : GenClass, genModel : GenModel, positiveOffsetCorrection : String, negativeOffsetCorrection : String)]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
  [if (genModel.useGenerics()) ]
    [if (genClass.getEIsSetGenFeatures()->filter(GenFeature)->select(genFeature : GenFeature | genFeature.isListType() and not genFeature.isUnsettable() and not genFeature.isWrappedFeatureMapType() and not genClass.isField(genFeature) and genFeature.isField() and genClass.getImplementingGenModel(genFeature).isVirtualDelegation()))->notEmpty()]
	@SuppressWarnings("unchecked")
    [/if]
  [/if]
  [if (genModel.useClassOverrideAnnotation()) ]
	@Override
  [/if]
	public boolean eIsSet(int featureID) {
		switch (featureID[negativeOffsetCorrection/]) {
[for (genFeature : GenFeature  | genClass.getEIsSetGenFeatures())]
  [let safeNameAccessor : String = if (genFeature.getSafeName() = 'featureID') then 'this.' + genFeature.getSafeName() else genFeature.getSafeName() endif]
			case [genClass.getQualifiedFeatureID(genFeature)/]:
  [if (genFeature.hasSettingDelegate()) ]
    [if (genFeature.isUnsettable()) ]
				return isSet[genFeature.getAccessorName()/]();
    [else]
				return [genFeature.getUpperName()/]__ESETTING_DELEGATE.dynamicIsSet(this, null, 0);
    [/if]
  [else][if (genFeature.isListType() and not genFeature.isUnsettable()) ]
    [if (genFeature.isWrappedFeatureMapType()) ]
      [if (genFeature.isVolatile()) ]
				return !(([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal.Wrapper)[genFeature.getGetAccessor()/]()).featureMap().isEmpty();
      [else]
				return [genFeature.getGetAccessor()/]() != null && ![genFeature.getGetAccessor()/]().featureMap().isEmpty();
      [/if]
    [else]
      [if (genClass.isField(genFeature)) ]
				return [genFeature.getGetAccessor()/]() != null && ![genFeature.getGetAccessor()/]().isEmpty();
      [else]
        [if (genFeature.isField() and genClass.getImplementingGenModel(genFeature).isVirtualDelegation()) ]
				[genFeature.getImportedType(genClass)/] [safeNameAccessor/] = ([genFeature.getImportedType(genClass)/])eVirtualGet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/]);
				return [safeNameAccessor/] != null && ![safeNameAccessor/].isEmpty();
        [else]
				return ![genFeature.getGetAccessor()/]().isEmpty();
        [/if]
      [/if]
    [/if]
  [else][if (genFeature.isUnsettable()) ]
				return isSet[genFeature.getAccessorName()/]();
  [else][if (genFeature.isResolveProxies()) ]
    [if (genClass.isField(genFeature)) ]
				return [genFeature.getGetAccessor()/]() != null;
    [else]
      [if (genFeature.isField() and genClass.getImplementingGenModel(genFeature).isVirtualDelegation()) ]
				return eVirtualGet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/]) != null;
      [else]
				return basicGet[genFeature.getAccessorName()/]() != null;
      [/if]
    [/if]
  [else][if (not genFeature.hasEDefault()) ]
    [if (genClass.isField(genFeature)) ]
				return [genFeature.getGetAccessor()/]() != null;
    [else]
      [if (genFeature.isField() and genClass.getImplementingGenModel(genFeature).isVirtualDelegation()) ]
				return eVirtualGet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/]) != null;
      [else]
				return [genFeature.getGetAccessor()/]() != null;
      [/if]
    [/if]
  [else][if (genFeature.isPrimitiveType() or genFeature.isEnumType()) ]
    [if (genClass.isField(genFeature)) ]
      [if (genClass.isFlag(genFeature)) ]
        [if (genFeature.isBooleanType()) ]
				return (([genClass.getFlagsField(genFeature)/] & [genFeature.getUpperName()/]_EFLAG) != 0) != [genFeature.getEDefault()/];
        [else]
				return ([genClass.getFlagsField(genFeature)/] & [genFeature.getUpperName()/]_EFLAG) != [genFeature.getUpperName()/]_EFLAG_DEFAULT;
        [/if]
      [else]
				return [genFeature.getGetAccessor()/]() != [genFeature.getEDefault()/];
      [/if]
    [else]
      [if (genFeature.isEnumType() and genFeature.isField() and genClass.getImplementingGenModel(genFeature).isVirtualDelegation()) ]
				return eVirtualGet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], [genFeature.getEDefault()/]) != [genFeature.getEDefault()/];
      [else]
				return [genFeature.getGetAccessor()/]() != [genFeature.getEDefault()/];
      [/if]
    [/if]
  [else]
    [if (genClass.isField(genFeature)) ]
				return [genFeature.getEDefault()/] == null ? [genFeature.getGetAccessor()/]() != null : ![genFeature.getEDefault()/].equals([genFeature.getGetAccessor()/]());
    [else]
      [if (genFeature.isField() and genClass.getImplementingGenModel(genFeature).isVirtualDelegation()) ]
				[genFeature.getImportedType(genClass)/] [safeNameAccessor/] = ([genFeature.getImportedType(genClass)/])eVirtualGet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], [genFeature.getEDefault()/]);
				return [genFeature.getEDefault()/] == null ? [safeNameAccessor/] != null : ![genFeature.getEDefault()/].equals([safeNameAccessor/]);
      [else]
				return [genFeature.getEDefault()/] == null ? [genFeature.getGetAccessor()/]() != null : ![genFeature.getEDefault()/].equals([genFeature.getGetAccessor()/]());
      [/if]
    [/if]
  [/if][/if][/if][/if][/if][/if]
  [/let]
[/for]
		}
[if (genModel.minimalReflectiveMethods) ]
		return super.eIsSet(featureID);
[else]
		return eDynamicIsSet(featureID);
[/if]
	}

[/template]
