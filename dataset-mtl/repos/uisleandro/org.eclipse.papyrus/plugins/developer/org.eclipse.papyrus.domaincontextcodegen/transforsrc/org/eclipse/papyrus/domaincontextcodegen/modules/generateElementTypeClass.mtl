[comment encoding = UTF-8 /]
[module generateElementTypeClass('http://www.eclipse.org/papyrus/2010/domaincontextcodegen','http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipse::papyrus::domaincontextcodegen::modules::ModelUtils /]

[template public generateElementTypeClass(domain : DomainContext)]

	[comment this template is used to generate an enumeration of all elementtypes/]
	
[file (domain.typeProjectName+'/'+domain.generatedSourceFolder+'/'+domain.typeProjectName.substituteAll('.', '/').concat('/element/'+domain.elementTypeNamePrefix.concat('ElementTypes.java')), false, 'UTF-8')]
package [ domain.typeProjectName.concat('.element')/];

import org.eclipse.gmf.runtime.emf.type.core.AbstractElementTypeEnumerator;
import org.eclipse.gmf.runtime.emf.type.core.IHintedType;

/** Convenient utility class listing IElementType declared in plugin.xml */
public class [domain.elementTypeNamePrefix/]ElementTypes extends AbstractElementTypeEnumerator {

[for (type : MetaClassType | domain.elementTypes.types->select(oclIsTypeOf(MetaClassType)))]
	/** IElementType for [domain.elementTypeNamePrefix/] [type.name/] */
	public static final IHintedType [type.name.formatUpperWithSep()/] = (IHintedType)getElementType("[type.getElementTypeID()/]"); //$NON-NLS-1$
	
[/for ]
[for (type : SpecializationType | domain.elementTypes.types->select(oclIsTypeOf(SpecializationType)))]
	/** IElementType for [domain.elementTypeNamePrefix/] [type.name/] */
	public static final IHintedType [type.name.formatUpperWithSep()/] = (IHintedType)getElementType("[type.getElementTypeID()/]"); //$NON-NLS-1$
	
[/for ]
}
[/file]


[comment generate Matcher and Helper if possible /]
[for (type : SpecializationType | domain.elementTypes.types->select(oclIsTypeOf(SpecializationType)))]

[comment generate Matcher /]
[if (not type.genMatcher.oclIsUndefined())]
[file (domain.typeProjectName+'/'+domain.generatedSourceFolder+'/'+domain.typeProjectName.substituteAll('.', '/').concat('/matcher/'+type.genMatcher.name.concat('.java')), false, 'UTF-8')]
[comment type.generateMatcher()/]
[/file]
[/if]

[comment generate Helper /]
[if (not type.genHelper.oclIsUndefined())]
[file (domain.typeProjectName+'/'+domain.generatedSourceFolder+'/'+domain.typeProjectName.substituteAll('.', '/').concat('/helper/'+type.genHelper.name.concat('.java')), false, 'UTF-8')]
[comment type.generateHelper()/]
[/file]
[/if]

[/for ]
[/template]

[template public generateMatcher(type : SpecializationType)]
/*****************************************************************************
 * Copyright (c) 2010 CEA LIST.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *****************************************************************************/
package [type.owner.domain.typeProjectName/].matcher;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.emf.type.core.IElementMatcher;
import [type.genMatcher.oclAsType(StereotypedElementMatcher).baseElementPackage/].[type.genMatcher.oclAsType(StereotypedElementMatcher).baseElementName/];
import [type.genMatcher.oclAsType(StereotypedElementMatcher).stereotypePackage/].[type.genMatcher.oclAsType(StereotypedElementMatcher).stereotypeName/];
import org.eclipse.papyrus.sysml.service.types.utils.ElementUtil;

/**
 * Test if current [type.genMatcher.oclAsType(StereotypedElementMatcher).baseElementName/] is a [type.name/]
 */
public class [type.genMatcher.name/] implements IElementMatcher {

	public boolean matches(EObject eObject) {

		boolean isMatch = false;
		if(eObject instanceof [type.genMatcher.oclAsType(StereotypedElementMatcher).baseElementName/]) {

			[type.genMatcher.oclAsType(StereotypedElementMatcher).baseElementName/] element = ([type.genMatcher.oclAsType(StereotypedElementMatcher).baseElementName/])eObject;
			if(ElementUtil.getStereotypeApplication(element, [type.genMatcher.oclAsType(StereotypedElementMatcher).stereotypeName/].class) != null) {
				isMatch = true;
			}
		}
		return isMatch;
	}

}
[/template]

[template public generateHelper(type : SpecializationType)]
/*****************************************************************************
 * Copyright (c) 2010 CEA LIST.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *****************************************************************************/
package [type.owner.domain.typeProjectName/].helper;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.gmf.runtime.common.core.command.CommandResult;
import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.emf.type.core.commands.ConfigureElementCommand;
import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;
import org.eclipse.papyrus.sysml.requirements.RequirementsPackage;
import org.eclipse.papyrus.sysml.service.types.utils.NamedElementHelper;
import org.eclipse.papyrus.sysml.util.SysmlResource;
import org.eclipse.uml2.uml.NamedElement;
import org.eclipse.uml2.uml.Stereotype;

/** [type.owner.domain.elementTypeNamePrefix/] [type.name/] edit helper advice */
public class [type.genHelper.name/] extends AbstractStereotypedElementEditHelperAdvice {

	/** Default constructor */
	public [type.genHelper.name/]() {
		requiredProfileIDs.add(SysmlResource.REQUIREMENTS_ID);
	}

	/** Complete creation process by applying the expected stereotype */
	@Override
	protected ICommand getAfterConfigureCommand(final ConfigureRequest request) {

		return new ConfigureElementCommand(request) {

			protected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info) throws ExecutionException {
				NamedElement element = (NamedElement)request.getElementToConfigure();
				if(element != null) {
					Stereotype stereotypeToApply = element.getApplicableStereotype(SysmlResource.DERIVE_REQT_ID);
					if(stereotypeToApply != null) {
						element.applyStereotype(stereotypeToApply);
					}

					// Set default name
					// Initialize the element name based on the created IElementType
					String initializedName = NamedElementHelper.EINSTANCE.getNewUMLElementName(element.getOwner(), RequirementsPackage.eINSTANCE.getDeriveReqt());
					element.setName(initializedName);
				}
				return CommandResult.newOKCommandResult();
			}
		};
	}
}
[/template]
