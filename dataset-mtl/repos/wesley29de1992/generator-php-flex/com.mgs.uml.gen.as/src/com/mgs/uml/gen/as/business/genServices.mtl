[comment encoding = UTF-8 /]
[module genServices('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import com::mgs::uml::common::umlUtils /]
[import com::mgs::uml::gen::as::common::asUtils /]
[import com::mgs::uml::common::services /]
[import com::mgs::uml::gen::as::business::genValueObject /]
[import com::mgs::uml::common::profileUtils /]
[import com::mgs::uml::gen::as::business::genBusiness /]

 
[template public genServiceName(c : Class) post (trim())]
	[c.name.toUpperFirst()/]Services
[/template]

[template public genServiceName(op : Operation) post (trim())]
	[op.name/]
[/template]

[template public genName(param : Parameter) post (trim())]
	[param.name/]
[/template]

[template public genArgument(param : Parameter) post (trim())]
[param.genName()/]:[param.genTypeVO()/]
[/template]

[template public genOperationArguments(op : Operation)]
[if (not op.isStatic)]instance:[op.class.genNameVO()/][if (not op.getInputParameters()->isEmpty())], [/if][/if][op.getInputParameters().genArgument()->sep(', ')/]
[/template]

[template public genServiceFolder(c : Class) post (trim())]
	services/[c.genFolder()/]/
[/template]

[template public genServiceFilename(c : Class) post (trim())]
	[c.genServiceName()/].as
[/template]

[template public genServices(m : Model)]
[comment @main/]

[for (c : Class | m.eAllContents(Class))]
	[c.genServices()/]
	[c.genEvent()/]
[/for]


[/template]

[template public serviceEventName(c : Class) post (trim())]
	[c.genName()/]ServiceEvent
[/template]
[template public serviceEventName(op : Operation) post (trim())]
	[op.class.genName()/][op.name.toUpperFirst()/]ServiceEvent
[/template]

[template public genEvent(c : Class) ? (profile_isEntity())]

[file (c.genServiceFolder() + c.serviceEventName() + '.as', false, 'UTF-8')]
package services.[c.genPackage()/]
{
	import [c.genEntityPackage()/].[c.interfaceName()/];
	
	import flash.events.Event;
	
	public class [c.serviceEventName()/] extends Event
	{
		public static const UPDATE:String = "[c.serviceEventName()/]_Update";
		private var _instance:[c.interfaceName()/];
		
		public function [c.serviceEventName()/](type:String, instance:[c.interfaceName()/])
		{
			super(type);
			this._instance = instance;
		}
		
		public function get instance():[c.interfaceName()/]{
			return _instance;
		}

	}
}
[/file]

[for (op : Operation | c.getAllOperations())]

[file (c.genServiceFolder() + op.serviceEventName() + '.as', false, 'UTF-8')]
package services.[c.genPackage()/]
{
[for (e : Class | c.getModel().profile_getAllEntities())]
	import [e.genEntityPackage()/].[e.interfaceName()/];
[/for]
	
	import flash.events.Event;
	
	public class [op.serviceEventName()/] extends Event
	{
		public static const UPDATE:String = "[op.serviceEventName()/]_Update";

[if (op.getReturnResult().oclIsUndefined())]
		public function [op.serviceEventName()/](type:String)
		{
			super(type);
		}
[else]
		private var _result:[op.returnResult().genType()/];
		
		public function get result():[op.returnResult().genType()/]{
			return _result;
		}

		public function [op.serviceEventName()/](type:String, result:[op.returnResult().genType()/])
		{
			super(type);
			this._result = result;
		}
[/if]
	}
}
[/file]
	
[/for]


[/template]

[template public genServices(c : Class) ? (hasServices() or profile_isEntity())]

[file (c.genServiceFolder() + c.genServiceFilename(), false, 'UTF-8')]
package services.[c.genPackage()/]
{
[for (e : Class | c.getModel().profile_getAllEntities())]
	import [e.genEntityPackage()/].[e.genName()/];
	import [e.genPackageVO()/].[e.genNameVO()/];
	import [e.genEntityPackage()/].[e.interfaceName()/];
[/for]
	import entity.EntityCache;
	import vo.AbstractVO;
	import services.InstanceCall;
	import mx.rpc.AbstractOperation;
	import mx.rpc.events.FaultEvent;
	import mx.rpc.events.ResultEvent;
	import mx.rpc.remoting.RemoteObject;
	import services.[c.genPackage()/].[c.serviceEventName()/];
[for (op : Operation | c.getAllOperations()->sortedBy(name))]
	import services.[c.genPackage()/].[op.serviceEventName()/];
[/for]
	import services.ServiceEvent;
	
	import services.AbstractServices;
	
	import flash.utils.ByteArray;

	public class [c.genServiceName()/] extends AbstractServices
	{
		public function [c.genServiceName()/](destination:String=null)
		{
			super(destination);
		}
		
		[c.genCrud()/]
		
[for (op : Operation | c.ownedOperation)]

		public function [op.genServiceName()/]([op.genOperationArguments()/]):void{
			ro.source = "[op.genRPCClassName()/]";
			var op:AbstractOperation = ro.getOperation("[genRPCMethodName()/]");
			var args:Array = new Array();
[if (not op.isStatic)]
			args.push(instance);
[/if]
[for (param : Parameter | op.getInputParameters())]
			args.push([param.genName()/]);
[/for]
			op.arguments = args;
[if (op.isStatic)]
			var call:InstanceCall = new InstanceCall(null, op);
[else]
			var call:InstanceCall = new InstanceCall(instance, op);
[/if]
			call.addEventListener(ServiceEvent.SERVICE_RESULT, [op.genServiceName()/]Result);
			call.addEventListener(FaultEvent.FAULT, fault);
			call.call();
		}
[/for]
[for (op : Operation | c.ownedOperation)]
		
		private function [op.genServiceName()/]Result(event:ServiceEvent):void{
[if (op.getReturnResult().oclIsUndefined())]
			dispatchEvent(new [op.serviceEventName()/]([op.serviceEventName()/].UPDATE));
[else]
[if (op.getReturnResult().upper = 1)]
			var result:[op.getReturnResult().genType()/] = EntityCache.getInstance().update[op.getReturnResult().type.oclAsType(Class).genName()/](event.result as [op.getReturnResult().type.oclAsType(Class).genNameVO()/]);
[else]
			var result:Array = new Array();
			for each(var object:[op.getReturnResult().type.oclAsType(Class).genNameVO()/] in event.result){
				result.push(EntityCache.getInstance().update[op.getReturnResult().type.oclAsType(Class).genName()/](object));
			}
[/if]
			dispatchEvent(new [op.serviceEventName()/]([op.serviceEventName()/].UPDATE, result));
[/if]
		}
[/for]
	}
}
[/file]
	
[/template]

[template public genCrud(c : Class)]
private function fault(event:FaultEvent):void{
	dispatchEvent(event);
}
[c.genCrudCreate()/]
[c.genCrudUpdate()/]
[c.genCrudRetrieve()/]
[c.genCrudDelete()/]
[/template]

[template public genCrudCreate(c : Class)]

public function create(instance:[c.genNameVO()/]):void{
	ro.source = "[c.name.toUpperFirst() + '_CRUD'/]";
	var op:AbstractOperation = ro.getOperation("create");
	var args:Array = new Array();
	args.push(instance);
	op.arguments = args;
	var call:InstanceCall = new InstanceCall(instance, op);
	call.addEventListener(ServiceEvent.SERVICE_RESULT, createResult);
	call.addEventListener(FaultEvent.FAULT, fault);
	call.call();
}

private function createResult(event:ServiceEvent):void{
	var object:[c.interfaceName()/] = EntityCache.getInstance().get[c.genName()/](event.instance.id);
	EntityCache.getInstance().changeId(object, (event.result as AbstractVO).id);
	EntityCache.getInstance().update[c.genName()/](event.result as [c.genNameVO()/]);
	dispatchEvent(new [c.serviceEventName()/]([c.serviceEventName()/].UPDATE, object));
}

[/template]

[template public genCrudUpdate(c : Class)]

public function update(instance:[c.genNameVO()/]):void{
	ro.source = "[c.name.toUpperFirst() + '_CRUD'/]";
	var op:AbstractOperation = ro.getOperation("update");
	var args:Array = new Array();
	args.push(instance);
	op.arguments = args;
	var call:InstanceCall = new InstanceCall(instance, op);
	call.addEventListener(ServiceEvent.SERVICE_RESULT, updateResult);
	call.addEventListener(FaultEvent.FAULT, fault);
	call.call();
}
private function updateResult(event:ServiceEvent):void{
	var object:[c.interfaceName()/] = EntityCache.getInstance().update[c.genName()/](event.result as [c.genNameVO()/]);
	dispatchEvent(new [c.serviceEventName()/]([c.serviceEventName()/].UPDATE, object));
}
	
[/template]

[template public genCrudDelete(c : Class)]

public function deleteObject(instance:[c.genNameVO()/]):void{
	ro.source = "[c.name.toUpperFirst() + '_CRUD'/]";
	var op:AbstractOperation = ro.getOperation("delete");
	var args:Array = new Array();
	args.push(instance);
	op.arguments = args;
	var call:InstanceCall = new InstanceCall(instance, op);
	call.addEventListener(ServiceEvent.SERVICE_RESULT, deleteResult);
	call.addEventListener(FaultEvent.FAULT, fault);
	call.call();
}
private function deleteResult(event:ServiceEvent):void{
	var object:[c.interfaceName()/] = EntityCache.getInstance().get[c.genName()/](event.instance.id);
	EntityCache.getInstance().deleteObject(object);
	dispatchEvent(new [c.serviceEventName()/]([c.serviceEventName()/].UPDATE, object));
}
	
[/template]

[template public genCrudRetrieve(c : Class)]

public function retrieveAll():void{
	ro.source = "[c.name.toUpperFirst() + '_CRUD'/]";
	var op:AbstractOperation = ro.getOperation("retrieveAll");
	var call:InstanceCall = new InstanceCall(null, op);
	call.addEventListener(ServiceEvent.SERVICE_RESULT, retrieveAllResult);
	call.addEventListener(FaultEvent.FAULT, fault);
	call.call();
}
private function retrieveAllResult(event:ServiceEvent):void{
	dispatchEvent(new ServiceEvent(null, event.result as Array));
}
	
public function retrieveById(id:String):void{
	ro.source = "[c.name.toUpperFirst() + '_CRUD'/]";
	var op:AbstractOperation = ro.getOperation("retrieveById");
	var args:Array = new Array();
	args.push(id);
	op.arguments = args;
	var call:InstanceCall = new InstanceCall(null, op);
	call.addEventListener(ServiceEvent.SERVICE_RESULT, retrieveByIdResult);
	call.addEventListener(FaultEvent.FAULT, fault);
	call.call();
}
private function retrieveByIdResult(event:ServiceEvent):void{
	var object:[c.interfaceName()/] = EntityCache.getInstance().update[c.genName()/](event.result as [c.genNameVO()/]);
	dispatchEvent(new [c.serviceEventName()/]([c.serviceEventName()/].UPDATE, object));
}
[for (p : Property | c.profile_propertiesEntity()) ? (isSimplePrimitive() and isUnique)]
public function retrieveBy[p.name.toUpperFirst()/](value:String):void{
	ro.source = "[c.name.toUpperFirst() + '_CRUD'/]";
	var op:AbstractOperation = ro.getOperation("retrieveBy[p.name.toUpperFirst()/]");
	var args:Array = new Array();
	args.push(value);
	op.arguments = args;
	var call:InstanceCall = new InstanceCall(null, op);
	call.addEventListener(ServiceEvent.SERVICE_RESULT, retrieveBy[p.name.toUpperFirst()/]Result);
	call.addEventListener(FaultEvent.FAULT, fault);
	call.call();
}
private function retrieveBy[p.name.toUpperFirst()/]Result(event:ServiceEvent):void{
	var object:[c.interfaceName()/] = EntityCache.getInstance().update[c.genName()/](event.result as [c.genNameVO()/]);
	dispatchEvent(new [c.serviceEventName()/]([c.serviceEventName()/].UPDATE, object));
}
[/for]
[/template]

