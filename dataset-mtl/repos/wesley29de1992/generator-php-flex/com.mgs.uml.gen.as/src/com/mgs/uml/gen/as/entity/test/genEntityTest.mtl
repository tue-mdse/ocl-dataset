[comment encoding = UTF-8 /]
[module genEntityTest('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import com::mgs::uml::common::profileUtils /]
[import com::mgs::uml::gen::as::common::asUtils /]
[import com::mgs::uml::common::umlUtils /]
[import com::mgs::uml::gen::as::entity::genEntityInterface /]
[import com::mgs::uml::gen::as::business::genBusiness /]
[import com::mgs::uml::common::services /]


[template public entityTestName(c : Class) post (trim())]
	Test[c.genName()/]
[/template]

[template public genEntityTest(m : Model)]
	
[comment @main /]

[for (c : Class | m.profile_getAllEntities())]
	[c.genEntityClassTest()/]
[/for]
	
[/template]

[template public genNonDefaultValue(p : Property) post (trim())]
[if (p.type.name = 'String')]
	'value'
[elseif (p.type.name = 'Integer')]
	1
[elseif (p.type.name = 'Boolean')]
	false
[elseif (p.type.name = 'Date')]
	new Date(2010, 3, 27, 12, 35, 20, 768)
[elseif (p.type.oclIsKindOf(PrimitiveType))]
	'value for unknown primitive type [p.type.name/]'
[else]
	new [p.type->filter(Class).genName()/]
[/if]
[/template]

[template public genEntityClassTest(c : Class)]
	
[file ('test/' + c.entityTestName() + '.as', false, 'UTF-8')]
package test
{
	import flexunit.framework.Test;
	
	import org.flexunit.Assert;
	import org.flexunit.async.Async;

	import entity.EntityCache;
	import entity.EntityEvent;
	[c.getModel().genEntityImports()/]
	
	[c.genImportVO()/]
	
	public class [c.entityTestName()/]
	{
		private function handleEvent(event:EntityEvent, passThru:Object):void{
		}
		
[for (p : Property | c.profile_propertiesEntity())]
		['[Test(async)]'/]
		public function testChangeSet[p.name.toUpperFirst()/]Listener():void{
			var e:[c.genName()/] = new [c.genName()/]();
			e.addEventListener(EntityEvent.UPDATED, Async.asyncHandler(this, handleEvent, 500));
[if (p.upper = 1)]
			e.[p.setterName()/]([p.genNonDefaultValue()/]);
[else]
			var lst:Array = new Array();
			lst.push([p.genNonDefaultValue()/]);
			e.[p.setterName()/](lst);
[/if]
		}
	
[/for]

		[comment @todo test adder, remover and contains /]

		['[Test]'/]
		public function testCreateVoFromEntity():void{
			var object:[c.genName()/] = new [c.genName()/]();
[for (p : Property | c.allProperties()) ? (isSimplePrimitive())]
			object.[p.setterName()/]([p.genNonDefaultValue()/]);
[/for]
			var vObject:[c.genNameVO()/] = EntityCache.getInstance().create[c.genName()/]VO(object);
[for (p : Property | c.allProperties()) ? (isSimplePrimitive())]
			Assert.assertEquals(object.[p.getterName()/](), vObject.[p.genName()/]);
[/for]
		}
	}
}
[/file]

[/template]
