[comment encoding = UTF-8 /]
[module asUtils('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import com::mgs::uml::common::umlUtils /]

[template public varName(p : Property) post (trim())]
	[p.name.toLowerFirst()/]
[/template]

[template public genArgument(p : Property) post (trim())]
	[p.varName()/]:[p.genType()/]
[/template]

[template public genSimpleArgument(p : Property) post (trim())]
	[p.varName()/]:[p.type.genType()/]
[/template]

[comment generate type name for a property (multiplicity aware) /]
[template public genType(p : Property) post (trim())]
[if (p.upper = 1)]
	[type.genTypeName()/]
[else]
	Array
[/if]
[/template]
[template public genType(p : Parameter) post (trim())]
[if (p.upper = 1)]
	[type.genTypeName()/]
[else]
	Array
[/if]
[/template]

[template public interfaceName(c : Class) post (trim())]
	I[c.name.toUpperFirst()/]
[/template]



[template public genType(p : Operation) post (trim())]
[if (p.upper = 1)]
	[type.genTypeName()/]
[else]
	Array
[/if]
[/template]

[template public genType(c : Type) post (trim())]
	[c.genTypeName()/]
[/template]

[template public genTypeName(c : Type) post (trim())]
[if (c.name = 'Integer')]
	int
[elseif (c.name = 'String')]
	String
[elseif (c.name = 'Boolean')]
	Boolean
[elseif (c.name = 'Date')]
	Date
[elseif (c.name = 'RawData')]
	ByteArray
[elseif (c.oclIsKindOf(PrimitiveType))]
	String
[else]
	[c->filter(Class).interfaceName()/]	
[/if]
[/template]

[template public genType(c : Class) post (trim())]
	[c.interfaceName()/]
[/template]

[comment generate the package name for a class /]
[template public genPackage(c : Class) post (trim())]
[for (s : String | c.getPackagesNames()) separator ('.')][s/][/for]
[/template]
[template public genEntityPackage(c : Class) post (trim())]
entity.[c.genPackage()/]
[/template]

[comment generate the folder chain for a class /]
[template public genFolder(c : Class) post (trim())]
[for (s : String | c.getPackagesNames()) separator ('/')][s/][/for]
[/template]

[comment generate the name for a class /]
[template public genName(c : Class) post (trim())]
	[c.name.toUpperFirst()/]
[/template]

[comment generate the filename for a class /]
[template public genFilename(c : Class) post (trim())]
	[c.genName()/].as
[/template]

[comment generate a property name /]
[template public genName(p : Property) post (trim())]
	[p.name.toLowerFirst()/]
[/template]

[comment generate the getter method name for a property /]
[template public genGetterName(p : Property) post (trim())]
	get[p.name.toUpperFirst()/]
[/template]

[comment generate the setter method name for a property /]
[template public genSetterName(p : Property) post (trim())]
	set[p.name.toUpperFirst()/]
[/template]

[comment generate the visibility keywork for a property /]
[template public genVisibility(p : Property) post (trim())]
	[p.visibility/]
[/template]

