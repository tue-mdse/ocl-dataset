[comment encoding = UTF-8 /]
[module genEntityInterface('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import com::mgs::uml::common::umlUtils /]
[import com::mgs::uml::gen::as::common::asUtils /]
[import com::mgs::uml::common::profileUtils /]

[template public genInterfaceImports(m : Model) post (trim())]
[for (c : Class | m.eAllContents(Class))]
import [c.interfaceFullName()/];
[/for]
[/template]
[template public genInterfaceImports(c : Class) post (trim())]
[if (c.hasBaseClass())]
import [c.baseClass().interfaceFullName()/];
[else]
import entity.IEntity;
[/if]
[/template]

[template public interfaceFullName(c : Class) post (trim())]
	entity.[c.getPackagesNames()->sep('.')/].[c.interfaceName()/]
[/template]

[template public genEntityPackage(c : Class) post (trim())]
	entity.[c.getPackagesNames()->sep('.')/]
[/template]

[template public interfaceFilePath(c : Class) post (trim())]
	entity/[c.getPackagesNames()->sep('/')/]/[c.interfaceName()/].as
[/template]

[template public getterName(p : Property) post (trim())]
	get[p.name.toUpperFirst()/]
[/template]
[template public setterName(p : Property) post (trim())]
	set[p.name.toUpperFirst()/]
[/template]
[template public adderName(p : Property) post (trim())]
	add[p.name.toUpperFirst()/]
[/template]
[template public removerName(p : Property) post (trim())]
	remove[p.name.toUpperFirst()/]
[/template]
[template public containsName(p : Property) post (trim())]
	contains[p.name.toUpperFirst()/]
[/template]

[template public genEntityInterface(c : Class)]
[comment @main /]

[file (c.interfaceFilePath(), false, 'UTF-8')]
package [c.genEntityPackage()/]
{
	[c.genInterfaceImports()/]

	public interface [c.interfaceName()/] extends [c.genExtends()/]
	{
		[c.genInterfaceBody()/]
	}
}
[/file]
	
[/template]

[template public genExtends(c : Class) post (trim())]
[if (c.hasBaseClass())]
	[c.baseClass().interfaceName()/]
[else]
	IEntity
[/if]
[/template]

[template public genInterfaceBody(c : Class) post (trim())]

[for (p : Property | c.properties())]
function [p.getterName()/]():[p.genType()/];
function [p.setterName()/]([p.genArgument()/]):void;
[if (p.upper <> 1)]
function [p.containsName()/]([p.genSimpleArgument()/]):Boolean;
function [p.adderName()/]([p.genSimpleArgument()/]):void;
function [p.removerName()/]([p.genSimpleArgument()/]):void;
[/if]
[/for]

[/template]