[comment encoding = UTF-8 /]
[module phpUtils('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import com::mgs::uml::common::umlUtils /]

[template public genPatternSingleton(className : String)]
/**
 * @var [className/] the unique instance.
 */
private static $_instance = null;

/**
 * return the unique [className/] instance.
 * @return [className/] the unique instance.
 */
public static function getInstance(){
	if(self::$_instance == null){
		self::$_instance = new [className/]();
	}
	return self::$_instance;
}

[/template]

[template public phpArray(s : String) post (trim())]
	['['/]'[s/]'[']'/]
[/template]

[template public varName(e : NamedElement) post (trim())]
$[e.name.toLowerFirst()/]
[/template]

[template public thisVarName(e : NamedElement) post (trim())]
	$this->[e.name.toLowerFirst()/]
[/template]

[template public getterName(e : NamedElement) post (trim())]
	get[e.name.toUpperFirst()/]
[/template]

[template public setterName(e : NamedElement) post (trim())]
	set[e.name.toUpperFirst()/]
[/template]

[template public adderName(e : NamedElement) post (trim())]
	add[e.name.toUpperFirst()/]
[/template]

[template public commonPath(e : Classifier) post (trim())]
	[e.getPackagesNames()->sep('/')/]
[/template]

[template public genTypeForComment(p : TypedElement) post(trim())]
	[p.type.name/]
[/template]

[template public php_genTestValue(p : Property) post (trim())]
[if (p.type.name = 'String')]
	'string'
[elseif (p.type.name = 'Integer')]
	-3
[elseif (p.type.name = 'Boolean')]
	true
[elseif (p.type.name = 'Date')]
	mktime(12, 30, 21, 3, 27, 2010)
[else]
	'???'
[/if]
[/template]

[template public php_genTestValue2(p : Property) post (trim())]
[if (p.type.name = 'String')]
	'toto'
[elseif (p.type.name = 'Integer')]
	7
[elseif (p.type.name = 'Boolean')]
	false
[elseif (p.type.name = 'Date')]
	mktime(13, 40, 32, 4, 23, 2009)
[else]
	'!!!'
[/if]
[/template]


[template public php_genTestCaseBody()]
public static function setUpBeforeClass(){
	// TODO before ALL tests.
}

public function setUp(){
	// TODO before EACH test.
}

public function tearDown(){
	// TODO after EACH test.
}

public static function tearDownAfterClass(){
	// TODO after ALL tests.
}

public function testSomething(){
	// TODO to test something (method name must begin by test)
}
[/template]