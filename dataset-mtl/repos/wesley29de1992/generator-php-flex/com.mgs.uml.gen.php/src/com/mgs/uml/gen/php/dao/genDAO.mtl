[comment encoding = UTF-8 /]
[module genDAO('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import com::mgs::uml::gen::php::dao::daoCommon /]
[import com::mgs::uml::gen::php::common::phpUtils /]
[import com::mgs::uml::gen::php::entity::entityCommon /]
[import com::mgs::uml::gen::php::sql::sqlUtils /]
[import com::mgs::uml::common::umlUtils /]
[import com::mgs::common::gen::common::files::commonUtils /]
[import com::mgs::uml::common::profileUtils /]
[import com::mgs::uml::gen::php::proxy::proxyCommon /]


[template private genCreate(c : Class) post (trim())]

/**
 * Create an entity.
 * @param $connection an opened database connection.
 * @param [c.varName()/] the entity to create (not null).
 * @param string $_type (optional) the real entity type.
 */
public function [daoCreate()/](Connection $connection, [c.varName()/], $_type = null){
	if($_type == null){
		$_type = '[c.entityName()/]';
	}
[if (c.hasBaseClass())]
	// create an entry in the base class table.
	$dao = new [c.baseClass().daoName()/]();
	$dao->[c.baseClass().daoCreate()/]($connection, [c.varName()/], $_type);
	[c.varName()/]->setUpToDate(false);
	$query = "INSERT INTO [c.sqlName()/] (__type, [c.sqlId()/], [c.simplePrimitiveAttributes()->collect(sqlName() + ', ')/]__version) VALUES (" .
		"'$_type', " .
		[c.varName()/]->getId() . ", " .
[for (p : Property | c.simplePrimitiveAttributes())]
		[sqlValue()/] . ", " .
[/for]
		"'1')";
	$connection->query($query);
[else]
	$query = "INSERT INTO [c.sqlName()/] (__type, [c.simplePrimitiveAttributes()->collect(sqlName() + ', ')/]__version) VALUES (" .
		"'$_type', " .
[for (p : Property | c.simplePrimitiveAttributes())]
		[sqlValue()/] . ", " .
[/for]
		"'1')";
	$connection->query($query);
	[c.varName()/]->setId(mysql_insert_id($connection->handle));
[/if]
	$this->updateRelations($connection, [c.varName()/]);
}

[/template]

[template private genObjectAccess(p : Property) post (trim())]
	[p.class.varName()/]->[p.getterName()/]()
[/template]

[template public sqlValue(p : Property) post (trim())]
	[p.sqlValueForAccessor(p.genObjectAccess())/]
[/template]

[template public sqlValueForVar(p : Property) post (trim())]
	[p.sqlValueForAccessor(p.varName())/]
[/template]

[template public sqlValueForAccessor(p : Property, phpAccessor : String) post (trim())]
[if (p.type.name = 'String')]
	"'" . addslashes([phpAccessor/]) . "'"
[elseif (p.type.name = 'Boolean')]
	([phpAccessor/] ? "'true'" : "'false'")
[elseif (p.type.name = 'Integer')]
	"'" . [phpAccessor/] . "'"
[elseif (p.type.name = 'Date')]
	"'" . date('Y-m-d H:i:s', [phpAccessor/]) . "'"
[else]
	"'" . [phpAccessor/] . "'"
[/if]
[/template]

[template private genUpdate(c : Class) post (trim())]

/**
 * Update an entity.
 * @param $connection an opened database connection.
 * @param [c.varName()/] the entity to update (not null).
 */
public function [daoUpdate()/](Connection $connection, [c.varName()/]){
	$query = "UPDATE [c.sqlName()/] SET " .
[for (p : Property | c.simplePrimitiveAttributes())]
		"[p.sqlName()/] = " . [p.sqlValue()/] . ", " .
[/for]
		"__version = '1' WHERE [c.sqlId()/] = '" . [c.varName()/]->getId() . "'";
	$connection->query($query);
[if (c.hasBaseClass())]
	// update the entry in the base class table.
	$dao = new [c.baseClass().daoName()/]();
	$dao->[c.baseClass().daoUpdate()/]($connection, [c.varName()/]);
	[c.varName()/]->setUpToDate(false);
[/if]
	$this->updateRelations($connection, [c.varName()/]);
}

[/template]

[template private genDelete(c : Class) post (trim())]
/**
 * Delete an entity.
 * @param $connection an opened database connection.
 * @param [c.varName()/] the entity to delete (not null).
 */
public function [c.daoDelete()/](Connection $connection, [c.varName()/]){
	$query = "DELETE FROM [c.sqlName()/] WHERE [c.sqlId()/] = '" . [c.varName()/]->getId() . "'";
	$result = $connection->query($query);
[if (c.hasBaseClass())]
	// delete the entry in the base class table.
	$dao = new [c.baseClass().daoName()/]();
	$dao->[c.baseClass().daoDelete()/]($connection, [c.varName()/]);
[/if]
	[c.varName()/]->setId(-2);
[for (p : Property | c.profile_propertiesEntity()) ? (not isSimplePrimitive() and upper = 1)]
	if([c.varName()/]->[p.getterName()/]() != null){
		[c.varName()/]->[p.getterName()/]()->setUptodate(false);
	}
[/for]
[for (p : Property | c.profile_propertiesEntity()) ? (not isSimplePrimitive() and upper <> 1)]
	if(is_array([c.varName()/]->[p.getterName()/]())){
		foreach([c.varName()/]->[p.getterName()/]() as $related){
			$related->setUptodate(false);
		}
	}
[/for]
}
[/template]

[template private genFindAll(c : Class) post (trim())]
/**
 * Find all entities.
 * @param $connection an opened database connection.
 * @return array [c.entityName()/] the objects found
 */
public function findAll(Connection $connection){
	$objects = array();
	$query = "SELECT * FROM [c.sqlName()/]";
	$result = $connection->query($query);
	while(null != ($assoc = mysql_fetch_assoc($result))){
		$object = $this->unserialize($assoc, $connection);
		array_push($objects, $object);
	}
	return $objects;
}
	
[/template]

[template private genFindById(c : Class) post (trim())]
/**
 * Find an entity by id.
 * @param $connection an opened database connection.
 * @param $id the id requested
 * @return [c.entityName()/] the objects found
 */
public function findById(Connection $connection, $id, $cacheObject = null){
	$query = "SELECT * FROM [c.sqlName()/] WHERE [c.sqlId()/] = '$id'";
	$result = $connection->query($query);
	$assoc = mysql_fetch_assoc($result);
	return $this->unserialize($assoc, $connection, $cacheObject);
}
	
[/template]

[template private genFindByProperties(c : Class) post (trim())]
[for (p : Property | c.simplePrimitiveAttributes()->select(e : Property | e.isUnique))]
/**
 * Find an entity by [p.name/].
 * @param $connection an opened database connection.
 * @param [p.varName()/] the value requested
 * @return [c.entityName()/] the objects found
 */
public function findBy[p.name.toUpperFirst()/](Connection $connection, [p.varName()/]){
	$query = "SELECT * FROM [c.sqlName()/] WHERE [p.sqlName()/] = " . [p.sqlValueForVar()/];
	$result = $connection->query($query);
	$assoc = mysql_fetch_assoc($result);
	return $this->unserialize($assoc, $connection);
}
	
[/for]
[/template]

[template private genUnserialize(c : Class) post (trim())]
/**
 * unserialize from sql to object.
 * @param $assoc array the mysql associative array.
 * @param $connection an opened database connection.
 * @param $object the object to unserialize in.
 * @return [c.entityName()/] the object unserialized
 */
public function unserialize($assoc, Connection $connection = null, $object = null){
	if($assoc){
		if($object == null){
			// instanciate the object.
[if (c.hasChildClass())]
			$_type = $assoc['__type'.phpArray()/];
			if($_type != '[c.entityName()/]'){
				// it's not the real type.
				// the search is delegate to the real dao.
				$daoClass = $_type . 'Dao';
				$dao = new $daoClass();
				return $dao->findById($connection, $assoc['['/]'[c.sqlId()/]'[']'/]);
			}
			// it's the real type.
			// we can instanciate it.
[/if]
			$object = EntityFactory::getInstance()->create[c.entityName()/]($assoc['['/]'[c.sqlId()/]'[']'/]);
		}
		// unserialize content.
[for (p : Property | c.primitiveAttributes())]
[if (p.type.name = 'Date')]
		$object->[p.setterName()/](strtotime($assoc['['/]'[p.sqlName()/]'[']'/]));
[elseif (p.type.name = 'Boolean')]
		$object->[p.setterName()/]($assoc['['/]'[p.sqlName()/]'[']'/] == 'true');
[else]
		$object->[p.setterName()/]($assoc['['/]'[p.sqlName()/]'[']'/]);
[/if]
[/for]
[if (c.hasBaseClass())]
		// recursively retrieve attributes from base class.
		$dao = new [c.baseClass().daoName()/]();
		$dao->findById($connection, $object->getId(), $object);
		$object->setUpToDate(true);
[/if]
	}
	return $object;
}
	
[/template]

[template private genLoadRelations(c : Class) post (trim())]

[for (p : Property | c.profile_propertiesEntity()) ? (not p.type.oclIsKindOf(PrimitiveType))]
public function [p.daoLoadName()/](Connection $connection, $object){
	$objects = array();
[if (p.isManyToManyRelation())]
	$query = "SELECT * FROM [p.type.sqlName()/] LEFT JOIN [p.association.sqlName()/] ON [p.type.sqlId()/]=[p.type.sqlForeignId()/]" .
		" WHERE [c.sqlForeignId()/] = '" . $object->getId() . "'";
[elseif (c.sqlOwningRelations()->includes(p))]
	$query = "SELECT * FROM [p.type.sqlName()/] WHERE [p.type.sqlId()/] = " . 
		"(SELECT [p.type.sqlForeignId()/] FROM [c.sqlName()/] WHERE [c.sqlId()/] = '" . $object->getId() . "')";
[else]
	$query = "SELECT * FROM [p.type.sqlName()/] WHERE [c.sqlForeignId()/] = '" . $object->getId() . "'";
[/if]
	$dao = new [p.type->filter(Class).daoName()/]();
	$result = $connection->query($query);
	while(null != ($assoc = mysql_fetch_assoc($result))){
		array_push($objects, $dao->unserialize($assoc, $connection));
	}
	return $objects;
}
	
[/for]
[/template]

[template private genUpdateRelations(c : Class) post (trim())]
public function updateRelations(Connection $connection, $object){

	if(!$object->isUpToDate()){
	
		// Prevent recursion.
		$object->setUpToDate(true);

[for (p : Property | c.profile_propertiesEntity()->select(p : Property | (not p.type.oclIsKindOf(PrimitiveType)) and p.upper = 1))]
		if($object->[p.isRelationLoaded()/]()){
			[p.varName()/] = $object->[p.getterName()/]();
			if(isset([p.varName()/])){
				if([p.varName()/]->getId() < -1){
					$object->[p.setterName()/](null);
				}else{
					$dao = new [p.type->filter(Class).daoName()/]();
					if([p.varName()/]->getId() == -1){
						$dao->[p.type.daoCreate()/]($connection, [p.varName()/]);
					}else{
						$dao->updateRelations($connection, [p.varName()/]);
					}
				}
			}
[if (c.sqlOwningRelations()->includes(p))]
			$query = "UPDATE [c.sqlName()/] SET " .
				"[p.type.sqlForeignId()/] = " . ($object->[p.getterName()/]() ? "'" . $object->[p.getterName()/]()->getId() . "'" : "NULL") .
				" WHERE [c.sqlId()/] = '" . $object->getId() . "'";
			$connection->query($query);
[/if]
		}
[/for]
[for (p : Property | c.profile_propertiesEntity()->select(p : Property | not (p.type.oclIsKindOf(PrimitiveType)) and p.upper <> 1))]
		if($object->[p.isRelationLoaded()/]()){
			[p.varName()/] = $object->[p.getterName()/]();
			if(isset([p.varName()/])){
				$array = array();
				foreach([p.varName()/] as $element){
					if($element->getId() < -1){
					}else{
						array_push($array, $element);
						$dao = new [p.type->filter(Class).daoName()/]();
						if($element->getId() == -1){
							$dao->[p.type.daoCreate()/]($connection, $element);
						}else{
							$dao->updateRelations($connection, $element);
						}
[if (p.hasOppositeProperty() and p.getOppositeProperty().upper <> 1)]
						// insert an entry in the n/n table if not exists.
						$query = "SELECT * FROM [p.association.sqlName()/] WHERE " .
							"[p.getOppositeProperty().type.sqlForeignId()/] = " . $object->getId() . " AND " .
							"[p.type.sqlForeignId()/] = " . $element->getId();
						$result = $connection->query($query);
						if(false === mysql_fetch_assoc($result)){
							$query = "INSERT INTO [p.association.sqlName()/] ([p.getOppositeProperty().type.sqlForeignId()/], [p.type.sqlForeignId()/]) VALUES (" .
							$object->getId() . ", " .
							$element->getId() . ")";
							$connection->query($query);
						}
[/if]
					}
				}
				$object->[p.setterName()/]($array);
			}
[if (c.sqlOwningRelations()->includes(p))]
			$query = "UPDATE [c.sqlName()/] SET " .
				"[p.type.sqlForeignId()/] = " . ($object->[p.getterName()/]() ? "'" . $object->[p.getterName()/]()->getId() . "'" : "NULL") .
				" WHERE [c.sqlId()/] = '" . $object->getId() . "'";
			$connection->query($query);
[/if]
		}
[/for]
	}
}

[/template]

[template public genDAO(c : Class) ? (profile_isDao())]
	
[comment @main /]

[file (c.daoFilePath(), false, 'UTF-8')]
<?php
[fileHeader('com.mgs.uml.gen.php.dao.genDAO')/]

/**
 * DAO implementation for entity [c.name/].
 */
class [c.daoName()/] {
	
	[c.genCreate()/]
	[c.genUpdate()/]
	[c.genDelete()/]
	[c.genFindAll()/]
	[c.genFindById()/]
	[c.genFindByProperties()/]
	[c.genUnserialize()/]
	[c.genLoadRelations()/]
	[c.genUpdateRelations()/]
	
	// [protected ('additions')]
		
	// [/protected]

}

?>
[/file]
	
[/template]
