[comment encoding = UTF-8 /]
[module genValueObjectFactory('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import com::mgs::uml::gen::php::common::phpUtils /]
[import com::mgs::uml::gen::php::entity::entityCommon /]
[import com::mgs::uml::gen::php::vo::genValueObject /]
[import com::mgs::uml::common::services /]
[import com::mgs::uml::common::umlUtils /]
[import com::mgs::uml::common::profileUtils /]


[template public valueObjectFacoryFilePath() post (trim())]
	vo/ValueObjectFactory.php
[/template]

[template private genCreate(c : Class)]
/**
 * Create a [c.entityName()/] value object from a [c.entityName()/] object.
 * @param [c.entityInterfaceName()/] $object the [c.entityName()/] object.
 * @return [c.genNameVO()/] the [c.entityName()/] value object.
 */
public function create[c.entityName()/]([c.entityInterfaceName()/] $object = null, $partial = false){
	if($object == null){
		return null;
	}
[for (childClass : Class | c.getChildClasses())]
	if($object instanceof [childClass.entityInterfaceName()/]){
		return $this->create[childClass.entityName()/]($object, $partial);
	}
[/for]
	$vo = new [c.genNameVO()/]();
	$vo->id = $object->getId();
	if($partial){
		$vo->partial = true;
	}else{
		$this->copy[c.entityName()/]Attributes($vo, $object);
	}
	return $vo;
}
	
[/template]

[template private genCreateRecursive(c : Class)]
/**
 * Create a [c.entityName()/] value object from a [c.entityName()/] object.
 * and recursively create attached objects.
 * @param [c.entityInterfaceName()/] $object the [c.entityName()/] object.
 * @return [c.genNameVO()/] the [c.entityName()/] value object.
 */
public function create[c.entityName()/]Recursive([c.entityInterfaceName()/] $object = null, $limit = -1){
	$objectExcludes = array();
	$voExcludes = array();
	return $this->_create[c.entityName()/]Recursive($object, $objectExcludes, $voExcludes, $limit);
}

private function _create[c.entityName()/]Recursive([c.entityInterfaceName()/] $object = null, array & $objectExcludes = null, array & $voExcludes = null, $limit = -1){
	if($object == null){
		return null;
	}
[for (childClass : Class | c.getChildClasses())]
	if($object instanceof [childClass.entityInterfaceName()/]){
		return $this->_create[childClass.entityName()/]Recursive($object, $objectExcludes, $voExcludes, $limit);
	}
[/for]
	if($objectExcludes == null){
		$objectExcludes = array();
		$voExcludes = array();
	}
	$index = array_search($object, $objectExcludes, true);
	if($index !== false){
		$vo = $voExcludes['[$index]'/];
	}else{
		array_push($objectExcludes, $object);
		$vo = $this->create[c.entityName()/]($object, $limit == 0);
		array_push($voExcludes, $vo);
		if($limit != 0){
			$this->copy[c.entityName()/]Relations($vo, $object, $objectExcludes , $voExcludes, $limit - 1);
		}
	}
	return $vo;
}

[/template]

[template private genCopyAttributes(c : Class)]
private function copy[c.entityName()/]Attributes([c.genNameVO()/] $vo, [c.entityInterfaceName()/] $object){
[for (p : Property | c.simplePrimitiveAttributes()) ? (profile_confidentiality_isNever())]
	// skip copy of property [p.name/] (confidential)
[/for]
[for (p : Property | c.simplePrimitiveAttributes()) ? (not profile_confidentiality_isNever())]
	$vo->[p.genName()/] = $object->[p.getterName()/]();
[/for]
[if (c.hasBaseClass())]
	$this->copy[c.baseClass().entityName()/]Attributes($vo, $object);
[/if]
}
	
[/template]

[template private genCopyRelations(c : Class)]
private function copy[c.entityName()/]Relations([c.genNameVO()/] $vo, [c.entityInterfaceName()/] $object, array & $objectExcludes, array & $voExcludes, $limit = -1){
[for (p : Property | c.profile_propertiesEntity()) ? (not p.isSimplePrimitive())]
[if (p.upper = 1)]
	$objectRelated = $object->[p.getterName()/]();
	[p.genCopySingleRelation()/]
[else]
	if($object->[p.getterName()/]() != null){
		$vo->[p.genName()/] = array();
		foreach($object->[p.getterName()/]() as $objectRelated){
			[p.genCopySingleRelation()/]
		}
	}
[/if]
[/for]
[if (c.hasBaseClass())]
	$this->copy[c.baseClass().entityName()/]Relations($vo, $object, $objectExcludes , $voExcludes, $limit);
[/if]
}

[/template]

[template private genCopySingleRelation(p : Property)]
$voRelated = $this->_create[p.type->filter(Class).entityName()/]Recursive($objectRelated, $objectExcludes, $voExcludes, $limit);
[if (p.upper = 1)]
$vo->[p.genName()/] = $voRelated;
[else]
if(false === array_search($voRelated, $vo->[p.genName()/], true)){
	array_push($vo->[p.genName()/], $voRelated);
}
[/if]
[if (p.hasOppositeProperty())]
[if (p.getOppositeProperty().upper = 1)]
$voRelated->[p.getOppositeProperty().genName()/] = $vo;
[else]
if(!isset($voRelated->[p.getOppositeProperty().genName()/])){
	$voRelated->[p.getOppositeProperty().genName()/] = array();
}
if(false === array_search($vo, $voRelated->[p.getOppositeProperty().genName()/], true)){
	array_push($voRelated->[p.getOppositeProperty().genName()/], $vo);
}
[/if]
[/if]
[/template]

[template public genValueObjectFactory(m : Model)]
	
[comment @main /]
[file (valueObjectFacoryFilePath(), false, 'UTF-8')]
<?php

class ValueObjectFactory {

	[genPatternSingleton('ValueObjectFactory')/]

[for (c : Class | m.eAllContents(Class)) ? (profile_isEntity())]
	[c.genCreate()/]
	[c.genCreateRecursive()/]
	[c.genCopyAttributes()/]
	[c.genCopyRelations()/]
[/for]

}

?>
[/file]
	
[/template]
