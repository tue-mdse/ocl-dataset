[comment encoding = UTF-8 /]
[module genDaoTests('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import com::mgs::uml::gen::php::entity::entityCommon /]
[import com::mgs::uml::gen::php::dao::daoCommon /]
[import com::mgs::uml::common::umlUtils /]
[import com::mgs::uml::gen::php::common::phpUtils /]
[import com::mgs::uml::gen::php::sql::sqlUtils /]
[import com::mgs::uml::common::profileUtils /]

[template public genDaoTests(c : Class) ? (profile_isDao())]
	
[comment @main /]
[file ('test/dao/' + c.daoName() + 'Test.php', false, 'UTF-8')]
<?php

class [c.daoName()/]Test extends DaoTestCase {

	public function test[c.daoName()/](){
		[c.genTestBody()/]
	}
	
	[c.genTestFindByProperties()/]
	[c.genTestHeritence()/]
	[c.genTestUpdate()/]
	[c.genTestRemoveUpdate()/]
	[c.genTestCreationWithAnExistingRelated()/]
	[c.genTestUpdateWithAnExistingRelated()/]
	
	// [protected ('additions')]
		
	// [/protected]
}

?>
[/file]
[/template]

[template private genTestRemoveUpdate(c : Class) post (trim())]
[for (p : Property | c.profile_propertiesEntity()) ? (not isSimplePrimitive())]
public function testRemoveUpdateFor[p.name.toUpperFirst()/](){
	$dao = new [c.daoName()/]();
	
	// create an entity with its related object.
	$entity = EntityFactory::getInstance()->create[c.entityName()/]();
	$relatedEntity = EntityFactory::getInstance()->create[p.type->filter(Class).entityName()/]();
[if (upper = 1)]
	$entity->[p.setterName()/]($relatedEntity);
[else]
	$entity->[p.adderName()/]($relatedEntity);
[/if]
	$dao->create[c.entityName()/]($this->connection, $entity);
	
	$relatedId = $relatedEntity->getId();
	
	// remove it.
	$daoRelated = new [p.type->filter(Class).daoName()/]();
	$daoRelated->delete[p.type->filter(Class).entityName()/]($this->connection, $relatedEntity);
	
	$this->assertFalse($entity->isUptodate());
	
	// update.
	$dao->update[c.entityName()/]($this->connection, $entity);
	
	// retrieve the entity and assert no related attached.
	$entity = $dao->findById($this->connection, $entity->getId());		
[if (upper = 1)]
	$this->assertNull($entity->[p.getterName()/](true, $this->connection));
[else]
	$array = $entity->[p.getterName()/](true, $this->connection);
	$this->assertEmpty($array);
[/if]
}
[/for]
[/template]

[template private genTestCreationWithAnExistingRelated(c : Class) post (trim())]
[for (p : Property | c.profile_propertiesEntity()) ? (not isSimplePrimitive())]
public function testCreationWithAnExisting[p.name.toUpperFirst()/](){
	// create the related.
	$relatedEntity = EntityFactory::getInstance()->create[p.type->filter(Class).entityName()/]();
	$daoRelated = new [p.type->filter(Class).daoName()/]();
	$daoRelated->create[p.type->filter(Class).entityName()/]($this->connection, $relatedEntity);
	
	// create the entity.
	$entity = EntityFactory::getInstance()->create[c.entityName()/]();
[if (upper = 1)]
	$entity->[p.setterName()/]($relatedEntity);
[else]
	$entity->[p.adderName()/]($relatedEntity);
[/if]
	
	$dao = new [c.daoName()/]();
	$dao->create[c.entityName()/]($this->connection, $entity);
	
	// retrieve the entity.
	$entity = $dao->findById($this->connection, $entity->getId());
[if (upper = 1)]
	$this->assertNotNull($entity->[p.getterName()/](true, $this->connection));
[else]
	$array = $entity->[p.getterName()/](true, $this->connection);
	$this->assertEquals(1, count($array));
[/if]
}
[/for]
[/template]

[template private genTestUpdateWithAnExistingRelated(c : Class) post (trim())]
[for (p : Property | c.profile_propertiesEntity()) ? (not isSimplePrimitive())]
public function testUpdateWithAnExisting[p.name.toUpperFirst()/](){
	
	// create an entity with a related object.

	$relatedEntity = EntityFactory::getInstance()->create[p.type->filter(Class).entityName()/]();
	$daoRelated = new [p.type->filter(Class).daoName()/]();
	$daoRelated->create[p.type->filter(Class).entityName()/]($this->connection, $relatedEntity);
	
	$entity = EntityFactory::getInstance()->create[c.entityName()/]();
[if (upper = 1)]
	$entity->[p.setterName()/]($relatedEntity);
[else]
	$entity->[p.adderName()/]($relatedEntity);
[/if]
	
	$dao = new [c.daoName()/]();
	$dao->create[c.entityName()/]($this->connection, $entity);
	
	// retrieve the entity (fresh).
	
	$entity = $dao->findById($this->connection, $entity->getId());
	
	// set not uptodate to force the object update.
	$entity->setUpToDate(false);
	
	$dao->update[c.entityName()/]($this->connection, $entity);
	
	// assert related always exists
[if (upper = 1)]
	$this->assertNotNull($entity->[p.getterName()/](true, $this->connection));
[else]
	$array = $entity->[p.getterName()/](true, $this->connection);
	$this->assertEquals(1, count($array));
[/if]
	
}
[/for]
[/template]

[template private genTestFindByProperties(c : Class) post (trim())]

[for (p : Property | c.profile_propertiesEntity()) ? (isSimplePrimitive() and isUnique)]
public function testFindBy[p.name.toUpperFirst()/](){
	$connection = $this->connection;
	
	// create one [c.name/].
	$entity = EntityFactory::getInstance()->create[c.entityName()/]();
	$testValue = [p.php_genTestValue()/];
	$entity->[p.setterName()/]($testValue);

	$dao = new [c.daoName()/]();
	$dao->[c.daoCreate()/]($connection, $entity);
	$entityId = $entity->getId(); 
	
	$entityFound = $dao->findBy[p.name.toUpperFirst()/]($connection, $testValue);
	
	$this->assertNotNull($entityFound);
	$this->assertEquals($entityId, $entityFound->getId());
}
[/for]

[/template]

[template public genTestHeritence(c : Class)]
[if (c.hasBaseClass())]
public function testBaseClassFindById(){
	$entity = EntityFactory::getInstance()->create[c.entityName()/]();
	$dao = new [c.daoName()/]();
	$dao->[c.daoCreate()/]($this->connection, $entity);
	$baseDao = new [c.baseClass().daoName()/]();
	$entityFound = $baseDao->findById($this->connection, $entity->getId());
	$this->assertNotNull($entityFound);
}
[/if]
[/template]

[template public genTestUpdate(c : Class)]
[for (p : Property | c.profile_propertiesEntity()) ? (isSimplePrimitive())]
public function testUpdate[p.name.toUpperFirst()/](){
	$entity = EntityFactory::getInstance()->create[c.entityName()/]();
	$dao = new [c.daoName()/]();
	
	$value = [p.php_genTestValue()/];
	$entity->[p.setterName()/]($value);
	$dao->[c.daoCreate()/]($this->connection, $entity);
	
	$testValue = [p.php_genTestValue2()/];
	$entity->[p.setterName()/]($testValue);
	$dao->[c.daoUpdate()/]($this->connection, $entity);
	
	$entityFound = $dao->findById($this->connection, $entity->getId());
	$this->assertNotNull($entityFound);
	$this->assertEquals($testValue, $entityFound->[p.getterName()/]());
}
[/for]
[/template]


[template public genTestBody(c : Class)]
$connection = $this->connection;

$entity = EntityFactory::getInstance()->create[c.entityName()/]();
$dao = new [c.daoName()/]();

// test creation.
$dao->[c.daoCreate()/]($connection, $entity);
$entityCreated = $dao->findById($connection, $entity->getId());
$this->assertTrue($entityCreated != null, "[c.entityName()/] creation failed.");
$this->assertTrue($entityCreated instanceof [c.entityInterfaceName()/], "[c.entityInterfaceName()/] expected, " . get_class($entityCreated) . " found.");

// test retrieve all.
$dao->[c.daoCreate()/]($connection, EntityFactory::getInstance()->create[c.entityName()/]());
$array = $dao->findAll($connection);
$this->assertEquals(2, count($array));

// test delete.
$dao->[c.daoDelete()/]($connection, $entity);
$entityDeleted = $dao->findById($connection, $entity->getId());
$this->assertTrue($entityDeleted == null, "[c.entityName()/] deletion failed.");

[for (p : Property | c.allProperties()) ? (not p.isSimplePrimitive() and type.profile_isEntity())]

[genTestRelation(c, p)/]
[/for]

[/template]

[template public genTestRelation(c : Class, p : Property)]
$connection = $this->connection;

// test relation [c.name/] / [p.name/] creation.
$entity = EntityFactory::getInstance()->create[c.entityName()/]();
$relatedEntity = EntityFactory::getInstance()->create[p.type->filter(Class).entityName()/]();
[if (p.upper = 1)]
$entity->[p.setterName()/]($relatedEntity);
[else]
$entity->[p.adderName()/]($relatedEntity);
[/if]
$dao->[c.daoCreate()/]($connection, $entity);
$entityCreated = $dao->findById($connection, $entity->getId());
[if (p.upper = 1)]
$relatedEntityCreated = $entityCreated->[p.getterName()/](true, $connection);
$this->assertTrue($relatedEntityCreated != null, "recursive creation failed relation [c.name/] / [p.name/].");
[else]
$relatedEntitiesCreated = $entityCreated->[p.getterName()/](true, $connection);
$this->assertEquals(1, count($relatedEntitiesCreated), "recursive creation failed relation [c.name/] / [p.name/].");
[/if]
[/template]

