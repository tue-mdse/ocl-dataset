[comment encoding = UTF-8 /]
[module genStructure('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import com::mgs::uml::gen::php::sql::sqlUtils /]
[import com::mgs::uml::common::umlUtils /]
[import com::mgs::common::gen::common::files::commonUtils /]
[import com::mgs::uml::common::profileUtils /]

[template public genTableOptions() post (trim())]
	[getDynamicProperty('sql', 'table_options')/]
[/template]

[template public sqlStructure(e : Classifier) post (trim())]
DROP TABLE IF EXISTS [e.sqlName()/];
CREATE TABLE [e.sqlName()/] (
	[e.sqlTableBody()/]
	__version INT NULL
)[genTableOptions()/];
[/template]

[template public sqlTableBody(e : Classifier) post (trim())]
	
[/template]

[template public sqlTableBody(c : Class) post (trim())]
[c.sqlId()/] INT PRIMARY KEY AUTO_INCREMENT,
[for (p : Property | c.primitiveAttributes())]
[p.sqlField()/],
[/for]
[for (p : Property | c.sqlOwningRelations())]
[p.type.sqlForeignId()/] INT [p.sqlFieldDefault()/] REFERENCES [p.type.sqlName()/] ([p.type.sqlId()/]),
[/for]
__type TEXT NOT NULL,
[/template]

[template public sqlTableBody(a : Association) post (trim())]
[for (p : Property | a.memberEnd)]
[p.type.sqlForeignId()/] INT NOT NULL,
[/for]
[/template]

[template public sqlField(p : Property) post (trim())]
[p.sqlName()/] [p.type.sqlType()/] [p.sqlFieldDefault()/]
[/template]

[template public sqlFieldDefault(p : Property) post (trim())]
[if (p.lower > 0)]
	NOT NULL
[else]
	NULL
[/if]
[/template]

[template public sqlType(t : Type) post (trim())]
	???
[/template]

[template public sqlType(type : PrimitiveType) post (trim())]
[if (type.name = 'Integer')]
	INT
[elseif (type.name = 'String')]
	TEXT
[elseif (type.name = 'Date')]
	DATETIME
[else]
	TEXT
[/if]
[/template]

[template public sqlType(c : Class) post (trim())]
INT
[/template]

[template public sqlValue(value : ValueSpecification) post (trim())]
'???'
[/template]

[template public sqlValue(value : LiteralInteger) post (trim())]
'[value.value/]'
[/template]

[template public sqlValue(value : LiteralBoolean) post (trim())]
'[value.value/]'
[/template]

[template public sqlValue(value : LiteralString) post (trim())]
'[value.value/]'
[/template]

[template public genStructure(m : Model)]
	
[comment @main /]

[file ('setup/structure.sql', false, 'UTF-8')]

-- all tables for classes.
[for (c : Class | m.eAllContents(Class)) ? (profile_isEntity())]

[c.sqlStructure()/]
[/for]

-- all tables for many to many associations.
[for (a : Association | m.getManyToManyAssociations()) ? (profile_isEntity())]

[a.sqlStructure()/]
[/for]

-- all insertions for instance specifications.
[for (e : InstanceSpecification | m.eAllContents(InstanceSpecification)) ? (e.classifier->one(profile_isEntity()))]

-- instance "[e.name/]". 
INSERT INTO [e.classifier.sqlName()/] ([e.slot->asOrderedSet()->sortedBy(definingFeature.name).definingFeature.sqlName()->sep(',')/]) VALUES ([e.slot->asOrderedSet()->sortedBy(definingFeature.name).value.sqlValue()->sep(', ')/]);
[/for]

[/file]

[/template]