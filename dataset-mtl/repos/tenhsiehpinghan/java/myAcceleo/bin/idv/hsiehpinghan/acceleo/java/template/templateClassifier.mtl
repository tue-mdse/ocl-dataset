[comment encoding = UTF-8 /]
[**
 * 負責產生templateClassJava、templateInterfaceJava、templateEnumJava共用的template
 */]
[module templateClassifier('http://www.eclipse.org/uml2/4.0.0/UML')]

[import idv::hsiehpinghan::acceleo::utility::propertyUtility /]

[import idv::hsiehpinghan::acceleo::java::template::query::queryClassifier /]

[comment]---------------------------public---------------------------[/comment]
[**
 * 取得資料夾+檔名+附檔名字串。
 * @param aClassifier
 */]
[template public templateClassifierFileNameWithFolderAndExtension(aClassifier : Classifier) post (self.trim())]
	[queryProperty('java', 'sourceFolderPath') /]/[aClassifier.templateClassifierFolderPath() /]/[aClassifier.queryName() /].java
[/template]


[comment]--------------------------protected-------------------------[/comment]
[**
 * 產生java檔javadoc中的commentSection。
 * @param aProperty
 */]
[template protected templateJavadocCommentsSection(anElement : Element) post (self.trim())]
[for (aComment : Comment | anElement.queryOwnedComments())]
	[for (aSubComment : Comment | aComment.queryOwnedComments())]
		[for (aString : String | aSubComment.queryCommentBody().tokenizeLine())]
* [aString /]
		[/for]
	[/for]
[/for]
[/template]

[comment][**
 * 產生property的javadocSection。
 * @param aProperty
 */]
[template protected templatePropertyJavadocSection(aProperty : Property)]
/**
[if (aProperty.queryOwnedComments()->isEmpty() = false)]
 [aProperty.templateJavadocCommentsSection() /]
[/if]
 *
 * @generated NOT
 */
[/template][/comment]

[comment][**
 * 產生operation的javadocSection。
 * @param anOperation
 */]
[template protected templateOperationJavadocSection(anOperation : Operation)]
/**
[if (anOperation.queryOwnedComments()->isEmpty() = false)]
 [anOperation.templateJavadocCommentsSection() /]
[/if]
 *
 * @generated NOT
 */
[/template][/comment]

[**
 * 產生property的modifiers section。
 * @param aProperty
 */]
[template protected templatePropertyModifiersSection(aProperty : Property)]
[aProperty.templateVisibilityName() /][aProperty.templateStaticName() /][aProperty.templateReadOnlyName() /]
[/template]

[**
 * 產生operation的modifiers section。
 * @param aOperation
 */]
[template protected templateOperationModifiersSection(aOperation : Operation)]
[aOperation.templateVisibilityName() /][aOperation.templateStaticName() /][aOperation.templateLeafName() /]
[/template]

[**
 * 產生沒有visibilityKind的property section。
 * @param aProperty
 */]
[template protected templatePropertySectionWithoutModifiers(aProperty : Property)]
[aProperty.queryTypeName() /] [aProperty.queryName() /][aProperty.templatePropertyDefault() /];
[/template]

[**
 * 產生某個operation中的parameter部份。
 * @param anInterface
 */]
[template protected templateParametersSection(anOperation : Operation)]
[for (aParameter : Parameter | anOperation.queryParameters()) separator (', ')][aParameter.queryTypeName() /] [aParameter.queryName() /][/for]
[/template]

[**
 * 產生Operation的visibilityKind字串
 * @param anOperation
 */]
[template protected templateVisibilityName(anOperation : Operation) {kind : VisibilityKind = anOperation.queryVisibilityKind();}]
[if (kind = VisibilityKind::public)]public [elseif (kind = VisibilityKind::protected)]protected [elseif (kind = VisibilityKind::_package)][elseif (kind = VisibilityKind::private)]private [else]UNKNOWN_VISIBILITYKIND [/if]
[/template]

[**
 * 產生沒有visibilityKind及typeName的operation section。
 * @param anOperation
 */]
[template protected templateOperationSectionWithoutModifiersAndTypeName(anOperation : Operation)]
[anOperation.queryName() /]([anOperation.templateParametersSection() /])
[/template]

[**
 * 產生沒有visibilityKind的operation section。
 * @param anOperation
 */]
[template protected templateOperationSectionWithoutModifiers(anOperation : Operation)]
[anOperation.templateReturnParameterSection() /] [anOperation.templateOperationSectionWithoutModifiersAndTypeName() /]
[/template]

[**
 * 產生沒有typeName的operation section。
 * @param anOperation
 */]
[template protected templateOperationSectionWithoutTypeName(anOperation : Operation)]
[anOperation.templateOperationModifiersSection() /][templateOperationSectionWithoutModifiersAndTypeName() /]
[/template]

[**
 * 產生java檔案中的package部份。
 * @param anInterface
 */]
[template protected templatePackageSection(aClassifier : Classifier)]
package [aClassifier.queryPackage() /];
[/template]

[**
 * 產生java檔案中的import部份。
 * @param aClassifier
 */]
[template protected templateImportSection(aClassifier : Classifier) post(self.trim())]
import [aClassifier.templateClassifierFullName() /];
[/template]

[**
 * 取得classifier的完整名稱。
 * @param aClassifier
 */]
[template protected templateClassifierFullName(aClassifier : Classifier)]
[aClassifier.queryPackage() /].[aClassifier.queryName() /]
[/template]

[**
 * 產生classifer的visibilityKind字串
 * @param aClassifier
 */]
[template protected templateVisibilityName(aClassifier : Classifier)]
[let kind : VisibilityKind = aClassifier.queryVisibilityKind()][if (kind = VisibilityKind::public)]public [elseif (kind = VisibilityKind::protected)]protected [elseif (kind = VisibilityKind::_package)][elseif (kind = VisibilityKind::private)]private [else]UNKNOWN_VISIBILITYKIND [/if][else]ERROR [/let]
[/template]

[**
 * 產生java檔案中的extends部份。
 * @param aClassifier
 */]
[template protected templateExtendsSection(aClassifier : Classifier)]
[for (aClassifier : Classifier | aClassifier.queryClassifierExtends()) before (' extends ') separator (', ')][aClassifier.queryName() /][/for]
[/template]

[**
 * 取得某個classifier的資料夾路徑。
 * @param anInterface
 */]
[template protected templateClassifierFolderPath(aClassifier : Classifier) post (self.trim())]
	[aClassifier.ancestors(Package)->reject(aPackage : Package | aPackage.oclIsTypeOf(Model))->reverse().queryName()->sep('/') /]
[/template]

[**
 * 取得package的完整名稱。
 * @param aPackage
 */]
[template protected templatePackageFullName(aPackage : Package)]
[aPackage.ancestors(Package)->reject(aPackage : Package | aPackage.oclIsTypeOf(Model))->reverse().queryName()->sep('.') /].[aPackage.queryName() /]
[/template]


[comment]---------------------------private--------------------------[/comment]
[**
 * 產生namedElement的visibilityKind字串
 * @param aNamedElement
 */]
[template private templateVisibilityName(aNamedElement : NamedElement)]
[let kind : VisibilityKind = aNamedElement.queryVisibilityKind()][if (kind = VisibilityKind::public)]public [elseif (kind = VisibilityKind::protected)]protected [elseif (kind = VisibilityKind::_package)][elseif (kind = VisibilityKind::private)]private [else]UNKNOWN_VISIBILITYKIND [/if][else]ERROR [/let]
[/template]

[**
 * 產生Property的static字串
 * @param aProperty
 */]
[template private templateStaticName(aFeature : Feature)]
[if (aFeature.queryIsStatic() = true)]static [else][/if]
[/template]

[**
 * 產生Property的readOnly字串
 * @param aProperty
 */]
[template private templateReadOnlyName(aStructuralFeature : StructuralFeature)]
[if (aStructuralFeature.queryIsReadOnly() = true)]final [else][/if]
[/template]

[**
 * 產生operation的leaf字串
 * @param aRedefinableElement
 */]
[template private templateLeafName(aRedefinableElement : RedefinableElement)]
[if (aRedefinableElement.queryIsLeft() = true)]final [else][/if]
[/template]

[**
 * 產生property的default值。
 * @param aProperty
 */]
[template private templatePropertyDefault(aProperty : Property) post (self.trim()) { aValueSpecification : ValueSpecification = aProperty.defaultValue; }]
[if (aValueSpecification.oclIsUndefined() = false)]
	[if (aValueSpecification.oclIsTypeOf(LiteralString) = true)]
		[if (aProperty.queryDefault().oclIsUndefined() = true)]
		[else]
			= "[aProperty.queryDefault() /]"
		[/if]
	[elseif (aValueSpecification.oclIsTypeOf(LiteralBoolean) = true)]
		= [aProperty.queryDefault() /]
	[elseif (aValueSpecification.oclIsTypeOf(LiteralInteger) = true)]
		= [aProperty.queryDefault() /]
	[elseif (aValueSpecification.oclIsTypeOf(LiteralNull) = true)]
		= [aProperty.queryDefault() /]
	[elseif (aValueSpecification.oclIsTypeOf(LiteralReal) = true)]
		= [aProperty.queryDefault() /]
	[else]
		= ERROR
	[/if]
[/if]
[/template]

[**
 * 產生returnParameterSection。
 * @param anOperation
 */]
[template private templateReturnParameterSection(anOperation : Operation) post(self.trim())]
[for (aParameter : Parameter | anOperation.queryReturnParameters())]
	[if (aParameter.getAppliedStereotypes()->isEmpty() = false)][aParameter.templateParameterGenericsOrAnnotationSection() /] [/if][anOperation.queryTypeName() /]
[/for]
[/template]

[**
 * 產生parameter的genericsOrAnnotationSection。
 * @param aParameter
 */]
[template private templateParameterGenericsOrAnnotationSection(aParameter : Parameter) post (self.trim())]
[for (aStereotype : Stereotype | aParameter.getAppliedStereotypes())]
	[if (aStereotype.queryQualifiedName() = 'idv::hsiehpinghan::Generics')]
[aParameter.templateParameterGenerics(aStereotype) /]
	[else]
ERROR
	[/if]
[/for]
[/template]

[**
 * 產生parameter的generics。
 * @param aParameter, aStereotype
 */]
[template private templateParameterGenerics(aParameter : Parameter, aStereotype : Stereotype)]
[for (aClassifier : Classifier | aParameter.getValue(aStereotype, 'extends')) before ('<') separator (', ') after ('>')][aClassifier.queryName() /]Extend extends [aClassifier.queryName() /][/for]
[/template]


