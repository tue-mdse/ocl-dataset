[comment encoding = UTF-8 /]
[module templateClassJava('http://www.eclipse.org/uml2/4.0.0/UML') extends idv::hsiehpinghan::acceleo::java::template::templateClassifier]

[import idv::hsiehpinghan::acceleo::java::template::query::queryClassJava /]

[comment]---------------------------public---------------------------[/comment]
[**
 * 產生class的template。
 * @param aClass
 */]
[template public templateClassJava(aClass : Class)]
[aClass.templatePackageSection() /]

[aClass.templateClassImportSection() /]

[aClass.templateClassSection() /]
[/template]

[comment]--------------------------protected-------------------------[/comment]


[comment]---------------------------private--------------------------[/comment]
[**
 * 產生property的javadocSection。
 * @param aProperty
 */]
[template private templatePropertyJavadocSection(aProperty : Property)]
/**
[if (aProperty.queryOwnedComments()->isEmpty() = false)]
 [aProperty.templateJavadocCommentsSection() /]
[/if]
 */
[/template]

[**
 * 產生property的annotationSection。
 * @param aProperty
 */]
[template private templatePropertyAnnotationSection(aProperty : Property) post (self.trim())]
[for (aStereotype : Stereotype | aProperty.getAppliedStereotypes())]
	[if (aStereotype.queryQualifiedName() = 'javax::annotation::Resource')]
[aProperty.templatePropertyResourceAnnotation(aStereotype) /]
	[elseif (aStereotype.queryQualifiedName() = 'org::springframework::beans::factory::annotation::Autowired')]
[aProperty.templatePropertyAutowiredAnnotation() /]
	[elseif (aStereotype.queryQualifiedName() = 'javax::persistence::Id')]
[aProperty.templatePropertyIdAnnotation() /]
	[else]
ERROR
	[/if]
[/for]
[/template]

[**
 * 產生class的javadocSection。
 * @param aClass
 */]
[template private templateClassJavadocSection(aClass : Class)]
/**
[if (aClass.queryOwnedComments()->isEmpty() = false)]
 [aClass.templateJavadocCommentsSection() /]
[/if]
 */
[/template]

[**
 * 產生java檔案中的class部份。
 * @param aClass
 */]
[template private templateClassSection(aClass : Class)]
[aClass.templateClassJavadocSection() /]
[if (aClass.getAppliedStereotypes()->isEmpty() = false)]
[aClass.templateClassAnnotationSection() /]
[/if]
[aClass.templateVisibilityName() /]class [aClass.queryName() /][aClass.templateExtendsSection() /][aClass.templateImplementsSection() /] {
[aClass.templatePropertiesSection() /]
[aClass.templateOperationsSection() /]
}
[/template]

[**
 * 產生java檔案中的implements部份。
 * @param aClass
 */]
[template protected templateImplementsSection(aClass : Class)]
[for (anInterface : Interface | aClass.queryClassImplements()->addAll(aClass.queryClassAdditionalImplements())) before (' implements ') separator (', ')][anInterface.queryName() /][/for]
[/template]

[**
 * 產生java檔案中的property部份。
 * @param aClass
 */]
[template private templatePropertiesSection(aClass : Class)]
[for (aProperty : Property | aClass.queryProperties())]
	[aProperty.templatePropertyJavadocSection() /]
	[if (aProperty.getAppliedStereotypes()->isEmpty() = false)]
	[aProperty.templatePropertyAnnotationSection() /]
	[/if]
	[if (aProperty.queryType().getAppliedStereotype('javax::persistence::Embeddable').oclIsUndefined() = false)]
	[aProperty.templatePropertyEmbeddableAnnotation() /]
	[/if]
	[aProperty.templatePropertyModifiersSection() /][aProperty.templatePropertySectionWithoutModifiers() /]
[/for]
[/template]

[**
 * 產生java檔案中的operations部份。
 * @param aClass
 */]
[template private templateOperationsSection(aClass : Class)]
	/**************
	 * operations *
	 **************/
[for (anOperation : Operation | aClass.queryOperations())]
	[anOperation.templateOperationJavadocSection() /]
	[if (anOperation.getAppliedStereotypes()->isEmpty() = false)]
	[anOperation.templateOperationAnnotationSection() /]
	[/if]
	[if (aClass.queryName() = anOperation.queryName())][anOperation.templateOperationSectionWithoutTypeName() /][else][anOperation.templateOperationSection() /][/if] [anOperation.templateOperationBodySection() /]
[/for]

	/**************************
	 * Implemented operations *
	 **************************/
[for (anOperation : Operation | aClass.queryClassImplementsOperations())]
	/**
	 * @generated NOT
	 */
	@Override
	[if (anOperation.getAppliedStereotypes()->isEmpty() = false)]
	[anOperation.templateOperationAnnotationSection() /]
	[/if]
	[comment]若是save或delete開頭的operation，則加上@Transational的annotation[/comment]
	[if (aClass.getAppliedStereotype('org::springframework::transaction::annotation::Transactional').oclIsUndefined() = false)]
		[if (anOperation.queryName().startsWith('save') or anOperation.queryName().startsWith('delete'))]
	@Transactional
		[/if]
	[/if]
	[anOperation.templateOperationSection() /] [anOperation.templateOperationBodySection() /]
[/for]

	/*****************************
	 * Auto generated operations *
	 *****************************/
[if (aClass.queryIsAutoGenerateGetterAndSetterElement() = true)]
	[for (aProperty : Property | aClass.queryProperties())]
	public [aProperty.queryTypeName() /] get[aProperty.queryName().toUpperFirst() /]() {
		return [aProperty.queryName() /];
	}

	public void set[aProperty.queryName().toUpperFirst() /]([aProperty.queryTypeName() /] [aProperty.queryName() /]) {
		this.[aProperty.queryName() /] = [aProperty.queryName() /];
	}

	[/for]
[/if]
[/template]

[**
 * 產生java檔案中的import部份。
 * @param aClass
 */]
[template private templateClassImportSection(aClass : Class) post(self.trim())]
[if (aClass.queryIsAutoGenerateGetterAndSetterElement() = true)]
[aClass.templateClassImportSectionWithoutProtected() /]
[else]
// [protected ('for import section')]
[aClass.templateClassImportSectionWithoutProtected() /]
// [/protected]	
[/if]
[/template]

[**
 * 產生java檔案中未加上protected的import部份。
 * @param aClass
 */]
[template private templateClassImportSectionWithoutProtected(aClass : Class) post(self.trim())]
[for (aClassifier : Classifier | aClass.queryClassImports()->addAll(aClass.queryClassAdditionalImports()))]
[aClassifier.templateImportSection() /]
[/for]
[/template]

[**
 * 產生class的annotationSection。
 * @param aClass
 */]
[template private templateClassAnnotationSection(aClass : Class) post (self.trim())]
[for (aStereotype : Stereotype | aClass.getAppliedStereotypes())]
	[if (aStereotype.queryQualifiedName() = 'org::springframework::stereotype::Service')]
[aClass.templateClassServiceAnnotation() /]
	[elseif (aStereotype.queryQualifiedName() = 'org::springframework::context::annotation::Configuration')]
[aClass.templateClassConfigurationAnnotation() /]
	[elseif (aStereotype.queryQualifiedName() = 'org::springframework::context::annotation::ComponentScan')]
[aClass.templateClassComponentScanAnnotation(aStereotype) /]
	[elseif (aStereotype.queryQualifiedName() = 'org::springframework::transaction::annotation::EnableTransactionManagement')]
[aClass.templateClassEnableTransactionManagementAnnotation(aStereotype) /]
	[elseif (aStereotype.queryQualifiedName() = 'org::springframework::context::annotation::PropertySource')]
[aClass.templateClassPropertySourceAnnotation() /]
	[elseif (aStereotype.queryQualifiedName() = 'org::springframework::context::annotation::Import')]
[aClass.templateClassImportAnnotation(aStereotype) /]
	[elseif (aStereotype.queryQualifiedName() = 'org::springframework::data::jpa::repository::config::EnableJpaRepositories')]
[aClass.templateClassEnableJpaRepositoriesAnnotation(aStereotype) /]
	[elseif (aStereotype.queryQualifiedName() = 'org::springframework::transaction::annotation::Transactional')]
[aClass.templateClassTransactionalAnnotation(aStereotype) /]
	[elseif (aStereotype.queryQualifiedName() = 'javax::persistence::Entity')]
[aClass.templateClassEntityAnnotation() /]
	[elseif (aStereotype.queryQualifiedName() = 'javax::persistence::Embeddable')]
[aClass.templateClassEmbeddableAnnotation() /]
	[else]
ERROR
	[/if]
[/for]
[/template]

[**
 * 產生class的serviceAnnotation。
 * @param aClass, aStereotype
 */]
[template private templateClassServiceAnnotation(aClass : Class)]
@Service("[aClass.templateClassifierFullName() /]")
[/template]

[**
 * 產生class的configurationAnnotation。
 * @param aClass, aStereotype
 */]
[template private templateClassConfigurationAnnotation(aClass : Class)]
@Configuration("[aClass.templateClassifierFullName() /]")
[/template]

[**
 * 產生class的componentAnnotation。
 * @param aClass, aStereotype
 */]
[template private templateClassComponentScanAnnotation(aClass : Class, aStereotype : Stereotype)]
@ComponentScan(basePackages = {
[for (aPackage : Package | aClass.getValue(aStereotype, 'basePackages')) separator (',')]
	"[aPackage.templatePackageFullName() /]"
[/for]
})
[/template]

[**
 * 產生class的configurationAnnotation。
 * @param aClass, aStereotype
 */]
[template private templateClassEnableTransactionManagementAnnotation(aClass : Class)]
@EnableTransactionManagement
[/template]

[**
 * 產生class的transactionalAnnotation。
 * @param aClass
 */]
[template private templateClassTransactionalAnnotation(aClass : Class)]
@Transactional(readOnly = true, propagation = Propagation.NOT_SUPPORTED)
[/template]

[**
 * 產生class的entityAnnotation。
 * @param aClass
 */]
[template private templateClassEntityAnnotation(aClass : Class)]
@Entity(name = "['[' /][aClass.queryName() /][']' /]")
[/template]

[**
 * 產生class的embeddableAnnotation。
 * @param aClass
 */]
[template private templateClassEmbeddableAnnotation(aClass : Class)]
@Embeddable
[/template]

[**
 * 產生class的propertySourceAnnotation。
 * @param aClass
 */]
[template private templateClassPropertySourceAnnotation(aClass : Class)]
@PropertySource({"[aClass.queryName().toLowerFirst() /].properties"})
[/template]

[**
 * 產生class的importtAnnotation。
 * @param aClass, aStereotype
 */]
[template private templateClassImportAnnotation(aClass : Class, aStereotype : Stereotype)]
@Import({
[for (aClass : Class | aClass.getValue(aStereotype, 'value')) separator (',')]
	[aClass.queryName() /].class
[/for]
})
[/template]

[**
 * 產生class的enableJpaRepositoriesAnnotation。
 * @param aClass, aStereotype
 */]
[template private templateClassEnableJpaRepositoriesAnnotation(aClass : Class, aStereotype : Stereotype)]
@EnableJpaRepositories(basePackages = {
[for (aPackage : Package | aClass.getValue(aStereotype, 'basePackages')) separator (',')]
	"[aPackage.templatePackageFullName() /]"
[/for]
})
[/template]

[**
 * 產生operation的javadocSection。
 * @param anOperation
 */]
[template private templateOperationJavadocSection(anOperation : Operation)]
/**
[if (anOperation.queryOwnedComments()->isEmpty() = false)]
 [anOperation.templateJavadocCommentsSection() /]
[/if]
 *
 * @generated NOT
 */
[/template]

[**
 * 產生java檔案中的operation部份。
 * @param anOperation
 */]
[template private templateOperationSection(anOperation : Operation) ]
[anOperation.templateOperationModifiersSection() /][anOperation.templateOperationSectionWithoutModifiers() /]
[/template]

[**
 * 產生java檔案中的operation body部份。
 * @param anOperation
 */]
[template private templateOperationBodySection(anOperation : Operation)] 
{
	// TODO : need be to implemented
	[anOperation.templateOperationBodyReturnSection() /]
}

[/template]

[**
 * 產生java檔案中的operation body的return部份。
 * @param anOperation
 */]
[template private templateOperationBodyReturnSection(anOperation : Operation) post(self.trim())]
	[if (anOperation.queryType().oclIsUndefined() = true)]
	[else]
		[let typeName : String = anOperation.queryTypeName()]
			[if (typeName = 'void')]
			[elseif (typeName = 'boolean')]
				return false;
			[elseif (typeName = 'byte')]
				return 0;
			[elseif (typeName = 'char')]
				return ' ';
			[elseif (typeName = 'double')]
				return 0;
			[elseif (typeName = 'float')]
				return 0;
			[elseif (typeName = 'int')]
				return 0;
			[elseif (typeName = 'long')]
				return 0;
			[elseif (typeName = 'short')]
				return 0;
			[else]
				return null;
			[/if]
		[/let]
	[/if]
[/template]

[**
 * 產生operation的annotationSection。
 * @param anOperation
 */]
[template private templateOperationAnnotationSection(anOperation : Operation) post (self.trim())]
[for (aStereotype : Stereotype | anOperation.getAppliedStereotypes())]
	[if (aStereotype.queryQualifiedName() = 'org::springframework::context::annotation::Bean')]
[anOperation.templateOperationBeanAnnotation() /]
	[else]
ERROR
	[/if]
[/for]
[/template]

[**
 * 產生property的resourceAnnotation。
 * @param aProperty, aStereotype
 */]
[template private templatePropertyResourceAnnotation(aProperty : Property, aStereotype : Stereotype)]
@Resource(name="[aProperty.templateOperationResourceAnnotationNameElement(aStereotype) /]")
[/template]

[**
 * 產生property的resourceAnnotation的name元素內容。
 * @param aProperty, aStereotype
 */]
[template private templateOperationResourceAnnotationNameElement(aProperty : Property, aStereotype : Stereotype) post (self.trim())]
[if (aProperty.getValue(aStereotype, 'name').oclIsUndefined() = true)]
	[aProperty.queryType().queryPackage()->append('.')->append('implement')->append('.')->append(aProperty.queryName().concat('Implement')) /]
[else]
	[let aClass : Class = aProperty.getValue(aStereotype, 'name').oclAsType(Class)]
		[aClass.queryPackage()->append('.') /][aClass.queryName() /]
	[/let]
[/if]
[/template]

[**
 * 產生operation的beanAnnotation。
 * @param anOperation
 */]
[template private templateOperationBeanAnnotation(anOperation : Operation)]
@Bean
[/template]

[**
 * 產生property的autowiredAnnotation。
 * @param aProperty
 */]
[template private templatePropertyAutowiredAnnotation(aProperty : Property)]
@Autowired
[/template]

[**
 * 產生property的idAnnotation。
 * @param aProperty
 */]
[template private templatePropertyIdAnnotation(aProperty : Property)]
@Id
[/template]

[**
 * 產生property的embeddableAnnotation。
 * @param aProperty
 */]
[template private templatePropertyEmbeddableAnnotation(aProperty : Property)]
@Embedded
[/template]
