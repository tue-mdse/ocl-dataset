[comment encoding = UTF-8 /]
[module generateClassifier('http://cs.mcgill.ca/sel/ram/3.0')]

[import ca::mcgill::sel::ram::generator::common::commonHelpers /]
[import ca::mcgill::sel::ram::generator::java::javaHelpers /]
[import ca::mcgill::sel::ram::generator::java::generateMessageView /]
[import ca::mcgill::sel::ram::generator::java::generateImports /]


[**
 * Generates a classifier of the structural view.
 * @param c The classifier
 */]
[template public generateClassifier(c : Classifier) /]


[**
 * Generates a class of the structural view.
 * @param c The class
 */]
[template public generateClassifier(c : Class)]

[file (c.getFileName(), false, 'UTF-8')]
package [c.getPackageName()/];

[generateImports(c)/]

/**
 * [c.getTypeName()/] class definition.
 * Generated by the TouchCORE code generator.
 */
public [if (c.abstract)]abstract [/if]class [c.getTypeName()/][generateSuperTypes(c)/] {
    [generateAttributes(c)/]
    [for (op : Operation | c.operations) separator('\n')]
    [generateOperation(op)/]
    [/for]
}
[/file]

[/template]


[**
 * Generates the super types of the class declaration.
 * @param c The class
 */]
[template private generateSuperTypes(c : Class)]
[if (not c.superTypes->isEmpty())] [generateSuperTypeKind(c.superTypes->first())/] [c.superTypes->first().getTypeName()/][/if]
[/template]

[template private generateSuperTypeKind(superType : Classifier)/]

[**
 * Generates the kind of super type (extends or implements) kind for a class.
 * @param superType The super type
 */]
[template private generateSuperTypeKind(superType : Class)]
extends
[/template]

[**
 * Generates the kind of super type (extends or implements) kind for a classifier.
 * @param superType The super type
 */]
[template private generateSuperTypeKind(superType : ImplementationClass)]
[if (not superType.interface)]extends[else]implements[/if]
[/template]


[**
 * Generates attributes of the given class.
 * @param c The class
 */]
[template private generateAttributes(c : Class)
        post(trim().surroundWithIfNotEmpty('\n'))]
[for (attribute : Attribute | c.attributes)]
[generateAttribute(attribute)/]
[/for]
[for (associationEnd : AssociationEnd | c.getNavigableAssociationEnds())]
[generateAttribute(associationEnd)/]
[/for]
[/template]


[**
 * Generates a class attribute.
 * @param at The class attribute
 */]
[template private generateAttribute(at : Attribute)]
private [if (at._static)]static [/if][at.type.getTypeName()/] [at.name/];
[/template]


[**
 * Generates a class attribute from an association end.
 * @param at The class association end
 */]
[template private generateAttribute(ae : AssociationEnd)]
private [if (ae._static)]static [/if][ae.getTypeNameOfTypedElement()/] [ae.name/];
[/template]


[**
 * Generates a class operation.
 * @param op The operation
 */]
[template private generateOperation(op : Operation) post(trim())]
[if (op.operationType = OperationType::Constructor)]
[generateConstructorOperationBeginning(op)/]([generateOperationParameters(op)/]) {
    [generateMessageView(op)/]
}
[else]
[generateOperationBeginning(op)/]([generateOperationParameters(op)/])[if (op.abstract)];[else] {
    [generateMessageView(op)/]
}[/if]
[/if]
[/template]


[**
 * Generates the beginning of a class operation (modifiers, return type, name).
 * @param op The class operation
 */]
[template private generateOperationBeginning(op : Operation)
        post(removeNewLines())]
[op.getVisibilityNameWithTrailingSpace()/]
[if (op.abstract)]abstract [/if]
[if (op._static)]static [/if]
[op.returnType.getTypeName()/] [op.name/]
[/template]


[**
 * Generates the beginning of a class constructor.
 * @param op The class operation
 */]
[template private generateConstructorOperationBeginning(op : Operation)]
[op.getVisibilityNameWithTrailingSpace()/][op.eContainer(Class).getTypeName()/]
[/template]


[**
 * Generates the parameters of a class operation.
 * @param op The class operation
 */]
[template private generateOperationParameters(op : Operation)
        post(trim().removeNewLines())]
[for (p : Parameter | op.parameters) separator(', ')]
[p.type.getTypeName()/] [p.name/]
[/for]
[/template]
