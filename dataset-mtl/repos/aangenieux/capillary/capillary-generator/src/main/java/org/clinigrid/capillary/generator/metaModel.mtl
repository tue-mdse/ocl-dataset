[comment encoding = UTF-8 /]
[module metaModel('http://www.eclipse.org/emf/2002/Ecore')/]

[template public metaModel(ePackage : EPackage)]
[comment @main /]
[let subPackages : OrderedSet(EPackage) = ePackage.eSubpackages]
[let classes : OrderedSet(EClass) = ePackage.eClassifiers->filter(EClass)]
[let dataTypes : OrderedSet(EDataType) = ePackage.eClassifiers->filter(EDataType)]
[file (javaPackageClassFileName(ePackage), false)]
package [javaPackage(ePackage)/];

import org.clinigrid.capillary.runtime.IMetaModel;

public class [javaPackageClassName(ePackage)/] extends IMetaModel.Package {

	public final static [javaPackageClassName(ePackage)/] INSTANCE = new [javaPackageClassName(ePackage)/]();

	static {
		INSTANCE.initializeSubPackages();
		INSTANCE.initializeSuperTypes();
	}

	private [javaPackageClassName(ePackage)/]() {
		super("[packageURI(ePackage)/]", "[ePackage.name/]");
		initializePackage();
	}

	[subPackages.subPackageElementsAccessor()/]
	[classes.metaModelElementsAccessor()/][dataTypes.metaModelElementsAccessor()/]

	[subPackages.subPackageElements()/]
	[classes.metaModelElements()/][dataTypes.metaModelElements()/]

	private void initializePackage() {
		[classes.metaModelElementsInitialization()/][dataTypes.metaModelElementsInitialization()/]
	}

	private void initializeSubPackages() {
		[subPackages.subPackageElementsInitialization()/]
	}

	private void initializeSuperTypes() {
		[classes.metaModelClassSuperTypesInitialization(ePackage)/]
	}

	[classes.metaModelElementsInitializationMethod()/][dataTypes.metaModelElementsInitializationMethod()/]

	[metaModelClassSwitch(classes)/]
}
[/file]
[/let]
[/let]
[/let]
[/template]

[template public packageURI(ePackage : EPackage)]
[if (ePackage.eSuperPackage.oclIsUndefined())][ePackage.nsURI/][else][packageURI(ePackage.eSuperPackage)/]/[ePackage.name/][/if]
[/template]

[template public subPackageElementsAccessor(ePackage : EPackage)]
public Package [ePackage.name/]() { return [ePackage.name/]; }

[/template]

[template public metaModelElementsAccessor(eClass : EClass)]
public Class [eClass.javaShortName()/]() { return [eClass.javaShortName()/]; }
[for (eClass.eStructuralFeatures)]
public Feature [self.javaShortName()/]() { return [self.javaShortName()/]; }
[/for]

[/template]

[template public metaModelElementsAccessor(eEnum : EEnum)]
public Enum [eEnum.javaShortName()/]() { return [eEnum.javaShortName()/]; }
[for (eEnum.eLiterals)]
public EnumLiteral [self.javaShortName()/]() { return [self.javaShortName()/]; }
[/for]

[/template]

[template public metaModelElementsAccessor(eDataType : EDataType)]
public DataType [eDataType.javaShortName()/]() { return [eDataType.javaShortName()/]; }

[/template]

[template public subPackageElements(ePackage : EPackage)]
private Package [ePackage.name/] = null;

[/template]

[template public metaModelElements(eClass : EClass)]
private Class [eClass.javaShortName()/] = null;
[for (eClass.eStructuralFeatures)]
private Feature [self.javaShortName()/] = null;
[/for]

[/template]

[template public metaModelElements(eEnum : EEnum)]
private Enum [eEnum.javaShortName()/] = null;
[for (eEnum.eLiterals)]
private EnumLiteral [self.javaShortName()/] = null;
[/for]

[/template]

[template public metaModelElements(eDataType : EDataType)]
private DataType [eDataType.javaShortName()/] = null;

[/template]

[template public subPackageElementsInitialization(ePackage : EPackage)]
[ePackage.name/] = registerSubPackage([ePackage.qualifiedPackageClassName()/].INSTANCE);

[/template]

[template public metaModelElementsInitialization(eClass : EClass)]
initialize[eClass.javaShortName()/]();

[/template]

[template public metaModelClassSuperTypesInitialization(eClass : EClass, ePackage : EPackage)]
setClassSuperTypes([eClass.javaShortName()/], new Class['['/][']'/] {
	[for (eClass.eSuperTypes)]
	[if (self.ePackage = ePackage)][self.javaShortName()/][else][self.qualifiedJavaName()/][/if](),
	[/for]
});

[/template]

[template public metaModelElementsInitialization(eEnum : EEnum)]
initialize[eEnum.javaShortName()/]();

[/template]

[template public metaModelElementsInitialization(eDataType : EDataType)]
initialize[eDataType.javaShortName()/]();

[/template]

[template public metaModelElementsInitializationMethod(eClass : EClass)]
private void initialize[eClass.javaShortName()/]() {
	[eClass.javaShortName()/] = registerClass(this, "[eClass.name/]", [eClass.instanceTypeName/].class);
	[for (eClass.eStructuralFeatures)]
	[self.javaShortName()/] = registerFeature([eClass.javaShortName()/], "[self.name/]", [let attribute : EAttribute = self]Feature.Kind.Attribute[elselet reference : EReference = self]Feature.Kind.Reference[/let], [self.many/], [self.eType.lazy()/]);
	[/for]
}


[/template]

[template public lazy(eClassifier : EClassifier)]
new ILazyType() { @Override public Type get() { return [eClassifier.qualifiedJavaName()/](); }}
[/template]

[template public metaModelElementsInitializationMethod(eEnum : EEnum)]
private void initialize[eEnum.javaShortName()/]() {
	[eEnum.javaShortName()/] = registerEnum(this, "[eEnum.name/]", [eEnum.instanceTypeName/].class);
	[for (eEnum.eLiterals)]
	[self.javaShortName()/] = registerLiteral([eEnum.javaShortName()/], "[self.name/]");
	[/for]
}


[/template]

[template public metaModelElementsInitializationMethod(eDataType : EDataType)]
private void initialize[eDataType.javaShortName()/]() {
	[eDataType.javaShortName()/] = registerDataType(this, "[eDataType.name/]", [eDataType.instanceTypeName/].class);
}


[/template]

[template public metaModelClassSwitch(classes : Collection(EClass))]
public static class ClassSwitch<T> extends IMetaModel.ClassSwitch<T> {
[if (not classes->isEmpty())]
	public T doSwitch(Class objectClass) {
		[classes.metaModelClassSwitchCall()/]return defaultCase(objectClass);
	}[classes.metaModelClassSwitchMethod()/]
[/if]
}
[/template]

[template public metaModelClassSwitchCall(eClass : EClass)]
if(objectClass == [javaPackageClassName(eClass.ePackage)/].INSTANCE.[eClass.javaShortName()/]) {
	return case_[eClass.javaName()/](objectClass);
}


[/template]

[template public metaModelClassSwitchMethod(eClass : EClass)]


public T case_[eClass.javaName()/](Class objectClass) {
[if (eClass.eSuperTypes->isEmpty())]
	return null;
[else]
[let superClass : EClass = eClass.eSuperTypes->first()]
	// return case_[superClass.javaName()/](objectClass);
	return null;
[/let]
[/if]
}
[/template]

[template public uri(classifier : EClassifier)]
/[classifier.name/]
[/template]

[template public uri(feature : EOperation)]
[feature.eContainingClass.uri()/]/[feature.name/]
[/template]

[template public uri(feature : EStructuralFeature)]
[feature.eContainingClass.uri()/]/[feature.name/]
[/template]

[query public javaMetaModelClassFileName(ePackage : EPackage) : String =
	qualifiedMetaModelClassName(ePackage).replaceAll('\\.', '/').concat('.java')
/]

[query public javaPackageClassFileName(ePackage : EPackage) : String =
	qualifiedPackageClassName(ePackage).replaceAll('\\.', '/').concat('.java')
/]

[query public javaPackage(ePackage : EPackage) : String =
	invoke('org.clinigrid.capillary.generator.services.MetaModelServices',
		'qualifiedMetaModelClassPackage(org.eclipse.emf.ecore.EPackage)',
		Sequence{ePackage})
/]

[query public javaMetaModelClassName(ePackage : EPackage) : String =
	metaModelClassName(ePackage)
/]

[query public javaPackageClassName(ePackage : EPackage) : String =
	packageClassName(ePackage)
/]

[query public javaShortName(ePackage : EPackage) : String =
	ePackage.name
/]

[query public javaShortName(classifier : EClassifier) : String =
	classifier.name
/]

[query public javaShortName(feature : EOperation) : String =
	feature.eContainingClass.javaShortName().concat('_').concat(feature.name)
/]

[query public javaShortName(feature : EStructuralFeature) : String =
	feature.eContainingClass.javaShortName().concat('_').concat(feature.name)
/]

[query public javaShortName(literal : EEnumLiteral) : String =
	literal.eEnum.javaShortName().concat('_').concat(literal.name)
/]

[query public javaName(ePackage : EPackage) : String =
	ePackage.name
/]

[query public javaName(classifier : EClassifier) : String =
	classifier.instanceTypeName.replaceAll('\\.', '_')
/]

[query public javaName(feature : EOperation) : String =
	feature.eContainingClass.javaName().concat('_').concat(feature.name)
/]

[query public javaName(feature : EStructuralFeature) : String =
	feature.eContainingClass.javaName().concat('_').concat(feature.name)
/]

[query public javaIdentifierName(classifier : EClassifier) : String =
	classifier.instanceTypeName.replaceAll('\\.', '.')
/]

[query public javaIdentifierName(feature : EOperation) : String =
	feature.eContainingClass.javaName().concat('_').concat(feature.name)
/]

[query public javaIdentifierName(feature : EStructuralFeature) : String =
	feature.eContainingClass.javaName().concat('_').concat(feature.name)
/]

[query public metaModelClassName(ePackage : EPackage) : String =
	invoke('org.clinigrid.capillary.generator.services.MetaModelServices',
		'metaModelClassName(org.eclipse.emf.ecore.EPackage)',
		Sequence{ePackage})
/]

[query public packageClassName(ePackage : EPackage) : String =
	invoke('org.clinigrid.capillary.generator.services.MetaModelServices',
		'packageClassName(org.eclipse.emf.ecore.EPackage)',
		Sequence{ePackage})
/]

[query public qualifiedMetaModelClassName(ePackage : EPackage) : String =
	invoke('org.clinigrid.capillary.generator.services.MetaModelServices',
		'qualifiedMetaModelClassName(org.eclipse.emf.ecore.EPackage)',
		Sequence{ePackage})
/]

[query public qualifiedPackageClassName(ePackage : EPackage) : String =
	invoke('org.clinigrid.capillary.generator.services.MetaModelServices',
		'qualifiedPackageClassName(org.eclipse.emf.ecore.EPackage)',
		Sequence{ePackage})
/]

[query public localJavaName(classifier : EClassifier) : String =
	qualifiedMetaModelClassName(classifier.ePackage).concat('.INSTANCE.').concat(classifier.javaIdentifierName())
/]

[query public localJavaName(feature : EOperation) : String =
	qualifiedMetaModelClassName(feature.eContainingClass.ePackage).concat('.INSTANCE.').concat(feature.javaIdentifierName())
/]

[query public localJavaName(feature : EStructuralFeature) : String =
	qualifiedMetaModelClassName(feature.eContainingClass.ePackage).concat('.INSTANCE.').concat(feature.javaIdentifierName())
/]

[query public qualifiedJavaName(classifier : EClassifier) : String =
	qualifiedMetaModelClassName(classifier.ePackage).concat('.INSTANCE.').concat(classifier.javaShortName())
/]

[query public qualifiedJavaName(feature : EOperation) : String =
	qualifiedMetaModelClassName(feature.eContainingClass.ePackage).concat('.INSTANCE.').concat(feature.javaShortName())
/]

[query public qualifiedJavaName(feature : EStructuralFeature) : String =
	qualifiedMetaModelClassName(feature.eContainingClass.ePackage).concat('.INSTANCE.').concat(feature.javaShortName())
/]

[query public qualifiedJavaName(literal : EEnumLiteral) : String =
	literal.eEnum.instanceTypeName.concat('.').concat(literal.name)
/]
