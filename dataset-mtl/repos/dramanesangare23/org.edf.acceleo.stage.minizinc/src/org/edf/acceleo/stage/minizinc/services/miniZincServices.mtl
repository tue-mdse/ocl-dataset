[comment encoding = Cp1252 /]
[**
 * Domentation of the module miniZincServices
 * Le module de services java
 * Grace a ce module nous pouvons utiliser les services (methodes) ecrits dans un fichier .java
 * Les services sont appeles via des requetes (query) en invoquant leurs noms, en specifiant le
 * nom du fichier java, le nom de la methode et les noms des differents arguments de la methode
*/]
[module miniZincServices('http://www.eclipse.org/uml2/5.0.0/UML') /]

[**
 * Documentation of the query contientSigneComparaison\n
 * Cette requete retourne true si une chaine de caracteres passee en argument (arg1) contient un
 * comparateur logique (<, >, <=, >=, <> ou =)
*/]
[query public contientSigneComparaison(arg0 : Class, arg1 : String) : Boolean
	= invoke(
		'org.edf.acceleo.stage.minizinc.services.MiniZincServices', 
		'contientSigneComparaison(org.eclipse.uml2.uml.Class, java.lang.String)', 
		Sequence{arg0, arg1}
	)
/]

[**
 * Documentation of the query contientSigneOperation
 * Cette requete retourne true si une chaine de caracteres passee en argument (arg1) contient un
 * operateur arithmetique (+, -, * ou /)
*/]
[query public contientSigneOperation(arg0 : Class, arg1 : String) : Boolean
	= invoke(
		'org.edf.acceleo.stage.minizinc.services.MiniZincServices',
		'contientSigneOperation(org.eclipse.uml2.uml.Class, java.lang.String)', 
		Sequence{arg0, arg1}
	)
/]

[**
 * Documentation of the query contientOperateurLogique
 * Cette requete retourne true si une chaine de caracteres passee en argument (arg1) contient un
 * operateur logique (and, or, xor ou implies)
*/]
[query public contientOperateurLogique(arg0 : Class, arg1 : String) : Boolean
	= invoke(
		'org.edf.acceleo.stage.minizinc.services.MiniZincServices', 
		'contientOperateurLogique(org.eclipse.uml2.uml.Class, java.lang.String)', 
		Sequence{arg0, arg1}
	)
/]

[**
 * Documentation of the query getSigneComparaison
 * Cette requete retourne le comparateur logique contenu dans une chaine de caracteres passee en 
 * argument (arg1) sinon "null".
*/]
[query public getSigneComparaison(arg0 : Class, arg1 : String) : String
	= invoke(
		'org.edf.acceleo.stage.minizinc.services.MiniZincServices', 
		'getSigneComparaison(org.eclipse.uml2.uml.Class, java.lang.String)', 
		Sequence{arg0, arg1}
	)
/]

[**
 * Documentation of the query getSigneOperation
 * Cette requete retourne l'operateur arithmetique contenu dans une chaine de caracteres passee en 
 * argument (arg1) sinon "null".
*/]
[query public getSigneOperation(arg0 : Class, arg1 : String) : String
	= invoke(
		'org.edf.acceleo.stage.minizinc.services.MiniZincServices', 
		'getSigneOperation(org.eclipse.uml2.uml.Class, java.lang.String)', 
		Sequence{arg0, arg1}
	)
/]

[**
 * Documentation of the query getSignesOperation
 * Cette requete retourne les operateurs arithmetiques contenus dans une chaine de caracteres passee
 * en argument (arg1) sinon "null".
*/]
[query public getSignesOperation(arg0 : Class, arg1 : String) : Sequence(OclAny)
	= invoke(
		'org.edf.acceleo.stage.minizinc.services.MiniZincServices', 
		'getSignesOperation(org.eclipse.uml2.uml.Class, java.lang.String)',
		Sequence{arg0, arg1}
	)
/]

[**
 * Documentation of the query nombreDeSignesOperation
 * Cette requete retourne le nombre de signes d'operateurs arithmetiques contenus dans une chaine de 
 * caracteres passee en argument (arg1).
*/]
[query public nombreDeSignesOperation(arg0 : Class, arg1 : String) : Integer 
	= invoke(
		'org.edf.acceleo.stage.minizinc.services.MiniZincServices', 
		'nombreDeSignesOperation(org.eclipse.uml2.uml.Class, java.lang.String)', 
		Sequence{arg0, arg1}
	)
/]

[**
 * Documentation of the query getOperateurLogique
 * Cette requete retourne l'operateur logique contenu dans une chaine de caracteres passee en 
 * argument (arg1) sinon "null".
*/]
[query public getOperateurLogique(arg0 : Class, arg1 : String) : String
	= invoke(
		'org.edf.acceleo.stage.minizinc.services.MiniZincServices', 
		'getOperateurLogique(org.eclipse.uml2.uml.Class, java.lang.String)', 
		Sequence{arg0, arg1}
	)
/]

[**
 * Documentation of the query getPartieInteressante
 * Cette requete retourne arg1 en lui enlevant "xor" s'il est diffï¿½rent de arg3, sinon arg2 en lui
 * enlevant "xor". 
*/]
[query public getPartieInteressante(arg0 : Class, arg1 : String, arg2 : String, arg3 : String) : String
	= invoke(
		'org.edf.acceleo.stage.minizinc.services.MiniZincServices', 
		'getPartieInteressante(org.eclipse.uml2.uml.Class, java.lang.String, java.lang.String, java.lang.String)',
		Sequence{arg0, arg1, arg2, arg3}
	)
/]
