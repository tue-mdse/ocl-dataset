[comment]
/*******************************************************************************
 * 
 * This is a MTL generator template
 * See: 
 * Language Reference: http://help.eclipse.org/juno/topic/org.eclipse.acceleo.doc/pages/reference/language.html?cp=5_3_0
 * Operations: http://help.eclipse.org/juno/topic/org.eclipse.acceleo.doc/pages/reference/operations.html?cp=5_3_2
 * Text production rules: http://help.eclipse.org/juno/topic/org.eclipse.acceleo.doc/pages/reference/textproductionrules.html?cp=5_3_5
 *
 *******************************************************************************
 
 * should beexecuted in the root JHipster project (with pom.xml, Gruntfile.js and bower.json)
 
[/comment]
[module auditumlp-m2t('http://www.eclipse.org/uml2/4.0.0/UML')/]

[template public generate(c : Package)]
[comment @main/]
[file (c.name.concat('.sh').trim(), false, 'UTF-8')]
Inventaire des diagrammes
[for (e : NamedElement|c.getOwnedMembers())]
[e.name.toLower()/]
[/for]
[/file]
[/template]


[template public generate(c : Class)]
[comment @main/]
[if (c.name.toLower() <> 'user')]
[file ('/jhipster/'.concat(c.name).concat('.json'), false, 'UTF-8')]
{
    [if (c.getAssociations()->size()>0)]
    [comment TODO reflexie relation/]
    "relationships": ['['/]
        [let navigableProperties : Sequence(Property) = c.getAssociations().navigableOwnedEnd->select(type <> c and opposite <> null)->asSequence()]
 [for (e : Property | navigableProperties)  separator (',') ]
        [if (e.isNavigable() and (e.opposite.upper < 2 and e.opposite.upper <>-1) and  (e.upper < 2 and e.upper <>-1))]
            [e.generateRef(navigableProperties->indexOf(e) ,'one-to-one')/]
        [/if]
        [if (e.isNavigable() and (e.opposite.upper > 1 or e.opposite.upper = -1) and  (e.upper < 2 and  e.upper <>-1) and e.isNavigable())]
            [e.generateRef(navigableProperties->indexOf(e) ,'many-to-one')/]
        [/if]
        [if (e.isNavigable() and (e.opposite.upper <2 and  e.opposite.upper <>-1) and ( e.upper > 1 or e.upper = -1) and e.isNavigable())]
            [e.generateRef(navigableProperties->indexOf(e) ,'one-to-many')/]
        [/if]
        [if (e.isNavigable() and (e.opposite.upper > 1 or e.opposite.upper = -1) and  (e.upper > 1 or e.upper = -1) and e.isNavigable())]
            [e.generateRef(navigableProperties->indexOf(e) ,'many-to-many')/]
        [/if]
    [/for]
    ],
     [/let]
    [/if]
    "fields": ['['/]
     [for (e : Property |c.attribute) separator('\t,\n')]
    [e.generate(c.attribute->asSequence()->indexOf(e))/]
    [/for]
    
    ['],'/]
    "fieldsContainOwnerManyToMany": true,
    "fieldsContainOneToMany": true,
    "fieldsContainLocalDate": true,
    "fieldsContainCustomTime": true,
    "fieldsContainBigDecimal": true,
    "fieldsContainDateTime": true,
    "fieldsContainDate": true,
    "changelogDate": "20150303155053",
    "pagination": "pagination"
}
[/file]
[/if]
[/template]



[template public generateRef(a : Property,id:Integer,qualifier:String)]
    {
            "relationshipId": [id/],
            "relationshipName": "[a.name.toLower()/]",
            "relationshipNameCapitalized": "[ a.name.toUpperFirst()/]",
            "relationshipFieldName": "[ a.name.toLower()/]",
            "otherEntityName": "[a.type.name.toLower()/]",
            "relationshipType": "[qualifier/]",
            "otherEntityNameCapitalized": "[a.type.name.toUpperFirst()/]",
            [if  (qualifier = 'one-to-many' and a.opposite <> null  and a.opposite.isNavigable())]
            "ownerSide": false
            [/if]
            [if( qualifier = 'one-to-many' and (a.opposite = null  or not a.opposite.isNavigable()))]
            "ownerSide": true
            [/if]
            [if  (qualifier = 'many-to-one')]
            "ownerSide": true
            [/if]
            [if  ((qualifier = 'many-to-many' or qualifier = 'one-to-one' )and (a.opposite <> null and a.opposite.isNavigable() and a.isNavigable() and not a.isComposite()  and not a.opposite.isComposite()))]
            "ownerSide": [a.opposite.name< a.name/]
            [/if]
            [if  ((qualifier = 'many-to-many' or qualifier = 'one-to-one' ) and (a.opposite = null ))]
            "ownerSide": true
            [/if]
            [if  ((qualifier = 'many-to-many' or qualifier = 'one-to-one' )and (a.opposite <> null and not a.opposite.isNavigable() ))]
            "ownerSide": true
            [/if]
            [if  ((qualifier = 'many-to-many' or qualifier = 'one-to-one' )and (a.opposite <> null and a.opposite.isNavigable() and a.isNavigable() and  (a.isComposite()  or a.opposite.isComposite())))]
            "ownerSide": [a.isComposite /]
            [/if]
            [if  (qualifier = 'many-to-one' or qualifier = 'one-to-one' )]
            , 
            "otherEntityField": "id"
            [/if]
        }
[/template]
 
[template public generate(a : Property,id:Integer)]
{
            "fieldId": [id/],
            "fieldName": "[a.name.toLower()/]",
            "fieldType": [toType(a.type.name).trim()/]
            "fieldNameCapitalized": "[a.name.toUpperFirst()/]",
            "fieldNameUnderscored": "[a.name.toLower()/]"
}
[/template]

[template public toType(s : String) ]
[if (s.equalsIgnoreCase('Integer'))]	"Integer",
	[elseif (s.equalsIgnoreCase('Boolean'))]	"Boolean",
	[elseif (s.equalsIgnoreCase('ByteArray'))]	"ByteArray",
	[elseif (s.equalsIgnoreCase('Date'))]	"DateTime",
	[elseif (s.equalsIgnoreCase('LocalDate'))]	"LocalDate",
	[elseif (s.equalsIgnoreCase('Real'))]	"Double",
	[elseif (s.equalsIgnoreCase('UnlimitedNatural'))]	"BigDecimal",
	[elseif (s.equalsIgnoreCase('Long') or s.equalsIgnoreCase('String') or s.equalsIgnoreCase('Char'))]	"[s/]",
[else] "[s/]",	
[/if]
[/template]



