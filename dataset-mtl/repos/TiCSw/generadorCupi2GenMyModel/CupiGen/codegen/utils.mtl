[comment encoding = UTF-8 /]
[module utils('http://www.eclipse.org/uml2/5.0.0/UML')]

[query public getClasses(m : Model) : OrderedSet(Class) = 
m.packagedElement->filter(Class)->sortedBy(name)
/]

[template public getAsociaciones(c : Class, esInterfaz : Boolean)]
[for (a : Association | c.getAssociations()->sortedBy(memberEnd->first().name))]
[for (v : Property | a.memberEnd->first())]
[if (v.isNavigable()=true and c.name <> v.type.name)]
[if (v.type.name.isPrincipalClass())]
[v.writePrincipalAssociation()/]
[elseif (v.type.name.isPrincipalClass()=false)]
[if (v.name.contains('[][]'))]
[v.writeMatrix()/]	
[else]
[v.writeAssociations(esInterfaz)/]
[/if]
[/if]	
[/if]
[/for]
[/for]
[/template]

[comment Este template se encarga de escribir las relaciones que representan una matriz /]
[template public writeMatrix(p : Property)]
/**
* [ p.ownedComment._body /]
*/
private [p.type.name/]['[][]'/] [p.name.tokenize('[][]')->at(1)/];
[/template]

[comment Este template escribe las relaciones de tipos que son de la clase principal /]
[template public writePrincipalAssociation(p : Property)]
[if (p.upper=1)]
/**
* [ p.ownedComment._body /]
*/
@Atributo(genGet=true, genSet=true)
private [p.type.name.getPrincipalClassName()/] [p.name/];
[elseif (p.upper=-1)]
/**
* [ p.ownedComment._body /]
*/
private ArrayList [p.name/];
[else]
/**
* [ p.ownedComment._body /]
*/
private [p.type.name.getPrincipalClassName()/]['[]'/] [p.name/];
[/if]
[/template]

[comment  Este template escribe las relaciones de tipos que no son de la clase principal/]
[template public writeAssociations(p : Property, esInterfaz : Boolean)]
[if (p.upper=1)]
/**
* [ p.ownedComment._body /]
*/
@Atributo(genGet=[if (esInterfaz)]false[else]true[/if], genSet=[if (esInterfaz)]false[else]true[/if])
private [p.type.name/] [p.name/];
[elseif (p.upper=-1)]
/**
* [ p.ownedComment._body /]
*/
private ArrayList [p.name/];
[else]
/**
* [ p.ownedComment._body /]
*/
private [p.type.name/]['[]'/] [p.name/];
[/if]	
[/template]

[template public getPrincipalClassName(s : String)]
[s.substring(7, s.size())/]
[/template]
[query public isPrincipalClass(s : String) : Boolean = s.startsWith('Mundo_') /]

[template public getConstantes(c : Class)]
[for (constante : Property | c.getAllAttributes()->sortedBy(name))]
[if (constante.isStatic and constante.isReadOnly )]
/**
* [ constante.ownedComment._body /]
*/
public final static [constante.type.name/] [constante.name.tokenize('=')->at(1)/] = [constante.name.tokenize('=')->at(2)/];
[/if]
[/for]	
[/template]

[template public getConstanteValue(s : String)]
	[s.tokenize('=').at(0)/]
[/template]

[template public getAtributos(c : Class)]
[for (atributo : Property | c.getAllAttributes()->select(p | p.isReadOnly <> true)->sortedBy(name))]
/**
* [ atributo.ownedComment._body /]
*/
@Atributo(genGet=true, genSet=true)
private [atributo.type.name/] [atributo.name/];
[/for]
[/template]

[template public getAtributosInterfaz(c : Class)]
[for (atributo : Property | c.getAllAttributes()->sortedBy(name))]
[if (atributo.name.startsWith('btn'))]
[procesarBoton(atributo)/]
[elseif (atributo.name.startsWith('lbl'))]
[procesarLabel(atributo)/]
[elseif (atributo.name.startsWith('txt'))]
[procesarTextField(atributo)/]
[elseif (atributo.name.startsWith('chk'))]
[procesarCheckBoxField(atributo)/]
[else]
[procesarAtributoInterfaz(atributo)/]
[/if]	
[/for]
[/template]

[template public getImportsInterfaz(c : Class)]
[for (atributo : String | c.getAllAttributes()->select(a | a.name.size() > 2)->collect(name.substring(1, 3))->asSet())]
[if (atributo = 'btn')]
import javax.swing.JButton;
[elseif (atributo = 'lbl')]
import javax.swing.JLabel;
[elseif (atributo = 'txt')]
import javax.swing.JTextField;
[elseif (atributo = 'chk')]
import javax.swing.JCheckBox;
[/if]	
[/for][for (claseMundo : String | c.getAllAttributes()->select(a | a.type.name.startsWith('Dialogo') = false and a.type.name.startsWith('Panel') = false and a.type.name.startsWith('Interfaz') = false and c.getModel().getClasses()->size() <> c.getModel().getClasses()->excluding(a.type)->size())->collect(type.name)->asSet())]
import uniandes.cupi2.[c.getModel().name.getProyectoName()/].mundo.[claseMundo/];
[/for][if (c.valueOf('layout') <> null and c.valueOf('layout').toLower() = 'border')]
import java.awt.BorderLayout;
[elseif (c.valueOf('layout') <> null and c.valueOf('layout').toLower() = 'flow')]
import java.awt.FlowLayout;
[elseif (c.name.startsWith('Interfaz') or (c.valueOf('layout') <> null and c.valueOf('layout').toLower() = 'grid'))]
import java.awt.GridLayout;
[/if]
[/template]

[template public procesarBoton(atributo : Property)]
/**
* [ atributo.ownedComment._body /]
*/
@UIBoton( comando = "[atributo.name.substring(4, atributo.name.size()).camelCaseToUnderscore('_').replaceAll(' ', '_').toUpper()/]", label = "[atributo.name.substring(4, atributo.name.size()).camelCaseToUnderscore(' ').toUpperFirst()/]", metodo = I.[if (atributo.valueOf('method') <> null)][atributo.getModel().getClasses()->select(c | c.name.startsWith('Interfaz'))->first().name/].Method.[atributo.valueOf('method')/][/if])
private [atributo.type.name/] [atributo.name/];

[/template]

[template public procesarLabel(atributo : Property)]
/**
* [ atributo.ownedComment._body /]
*/
@UILabel(nombre = " [atributo.name.substring(4, atributo.name.size())/] ")
private [atributo.type.name/] [atributo.name/];

[/template]

[template public procesarTextField(atributo : Property)]
/**
* [ atributo.ownedComment._body /]
*/
@UITextField(nombre = " [atributo.name.substring(4, atributo.name.size())/] ", enabled = true)
private [atributo.type.name/] [atributo.name/];

[/template]

[template public procesarCheckBoxField(atributo : Property)]
/**
* [ atributo.ownedComment._body /]
*/
@UICheckBox(enabled = true)
private [atributo.type.name/] [atributo.name/];

[/template]

[template public procesarAtributoInterfaz(atributo : Property)]
/**
* [ atributo.ownedComment._body /]
*/
@Atributo(genGet=false, genSet=false, initialize=false)
private [atributo.type.name/] [atributo.name/]; 	

[/template]


[template public getMetodos(c : Class)]
[for (o : Operation | c.getAllOperations())]
[if (o.getReturnResult().type.name.toString().equalsIgnoreCase('invalid')=false)]
/**
* [ o.ownedComment._body /]
*/
[o.visibility/] [o.returnResult().type.name/] [o.name/]([for (param : Parameter | o.ownedParameter->excluding(o.getReturnResult())) separator(', ')][param.type.name/] [param.name/][/for])
{
	// TODO: Implementar
	throw new java.lang.UnsupportedOperationException("No se ha implementado");
}
[/if]

[/for]
[/template]

[template public getInterfazBodyGridLayout(c : Class)]
[for (a : Association | c.getAssociations()->sortedBy(memberEnd->first().name))]
[for (v : Property | a.memberEnd->first())]
[if (v.isNavigable()=true and c.name <> v.type.name and not v.type.name.isPrincipalClass())]
add([v.name/]);
[/if]
[/for]
[/for]
[if (c.valueOf('rows') <> null and c.valueOf('columns') <> null)]
setLayout(new GridLayout([c.valueOf('rows')/], [c.valueOf('columns')/]));
[else]
setLayout(new GridLayout([c.getTotalPanels()/], 1));
[/if]
[/template]

[template public getInterfazBodyBorderLayout(c : Class)]
[for (a : Association | c.getAssociations()->sortedBy(memberEnd->first().name))]
[for (v : Property | a.memberEnd->first())]
[if (a.valueOf('position') <> null and v.isNavigable()=true and c.name <> v.type.name and not v.type.name.isPrincipalClass())]
add([v.name/], BorderLayout.[a.valueOf('position').toUpper()/]);
[/if]
[/for]
[/for]
setLayout(new BorderLayout());
[/template]

[template public getInterfazBodyFlowLayout(c : Class)]
[for (a : Association | c.getAssociations()->sortedBy(memberEnd->first().name))]
[for (v : Property | a.memberEnd->first())]
[if (v.isNavigable()=true and c.name <> v.type.name and not v.type.name.isPrincipalClass())]
add([v.name/]);
[/if]
[/for]
[/for]
setLayout(new FlowLayout());
[/template]

[template public getPanelBodyGridLayout(c : Class)]
[for (a : Property | c.getAllAttributes()->sortedBy(name))]
[if (a.name.startsWith('btn') or a.name.startsWith('lbl') or a.name.startsWith('txt') or a.name.startsWith('chk'))]
add([a.name/]);
[/if]
[/for]
[if (c.valueOf('rows') <> null and c.valueOf('columns') <> null)]
setLayout(new GridLayout([c.valueOf('rows')/], [c.valueOf('columns')/]));
[else]
setLayout(new GridLayout([c.getTotalPanelsAttributes()/], 1));
[/if]
[/template]

[template public getPanelBodyBorderLayout(c : Class)]
[for (a : Property | c.getAllAttributes()->sortedBy(name))]
[if (a.valueOf('position') <> null)]
add([a.name/], BorderLayout.[a.valueOf('position').toUpper()/]);
[/if]
[/for]
setLayout(new BorderLayout());
[/template]

[template public getPanelBodyFlowLayout(c : Class)]
[for (a : Property | c.getAllAttributes()->sortedBy(name))]
[if (a.name.startsWith('btn') or a.name.startsWith('lbl') or a.name.startsWith('txt') or a.name.startsWith('chk'))]
add([a.name/]);
[/if]
[/for]
setLayout(new FlowLayout());
[/template]

[template public getProyectoName(s : String)]
[if (s.contains('_'))][s.tokenize('_').at(1)/][else][s/][/if]
[/template]

[query public getNivel(m : Model) : Integer = 
	if (m.valueOf('nivel') <> null) then
		m.valueOf('nivel').toInteger()
	else
		0
	endif
/]

[query public getTotalPanels(c : Class) : Integer = 
	c.getAssociations()->collect(memberEnd->first())->select(v | v.isNavigable() and c.name <> v.type.name and not v.type.name.isPrincipalClass())->size()
/]

[query public getTotalPanelsAttributes(c : Class) : Integer = 
	c.getAllAttributes()->select(a | a.name.startsWith('btn') or a.name.startsWith('lbl') or a.name.startsWith('txt') or a.name.startsWith('chk'))->size()
/]

[query public valueOf(m : Element, p : String) : String = 
if (m.hasProperty(p)) then
m.getEAnnotation('genmymodel').details->any(key = p).value
else 
null
endif
/]

[query public hasProperty(m : Element, p : String) : Boolean = 
m.getEAnnotation('genmymodel').details->exists(key = p)
/]

[query public camelCaseToUnderscore(s : String, separator : String) : String = 
if (s.camelCaseToUnderscoreHelper(separator).startsWith(separator)) then
s.camelCaseToUnderscoreHelper(separator).substring(2)
else
s.camelCaseToUnderscoreHelper(separator)
endif
/]

[template public camelCaseToUnderscoreHelper(s : String, separator : String)]
[s.replaceAll('A', separator.concat('A')).replaceAll('B', separator.concat('B')).replaceAll('C', separator.concat('C')).replaceAll('D', separator.concat('D')).replaceAll('E', separator.concat('E')).replaceAll('F', separator.concat('F')).replaceAll('G', separator.concat('G')).replaceAll('H', separator.concat('H')).replaceAll('I', separator.concat('I')).replaceAll('J', separator.concat('J')).replaceAll('K', separator.concat('K')).replaceAll('L', separator.concat('L')).replaceAll('M', separator.concat('M')).replaceAll('N', separator.concat('N')).replaceAll('O', separator.concat('O')).replaceAll('P', separator.concat('P')).replaceAll('Q', separator.concat('Q')).replaceAll('R', separator.concat('R')).replaceAll('S', separator.concat('S')).replaceAll('T', separator.concat('T')).replaceAll('U', separator.concat('U')).replaceAll('V', separator.concat('V')).replaceAll('W', separator.concat('W')).replaceAll('X', separator.concat('X')).replaceAll('Y', separator.concat('Y')).replaceAll('Z', separator.concat('Z'))/]
[/template]