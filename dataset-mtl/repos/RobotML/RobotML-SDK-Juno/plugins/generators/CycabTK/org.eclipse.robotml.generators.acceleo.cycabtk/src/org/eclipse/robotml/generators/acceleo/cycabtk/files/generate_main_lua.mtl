[comment encoding = UTF-8 /]
[module generate_main_lua('http://www.eclipse.org/uml2/3.0.0/UML')]

[import org::eclipse::robotml::generators::acceleo::mmqueries::GeneralQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::ArchitectureQueries /]
[import org::eclipse::robotml::generators::acceleo::mmqueries::DeploymentQueries /]
[import org::eclipse::robotml::generators::acceleo::cycabtk::mmqueries::CycabTKQueries /]



[template public generateMainLua(model : Model)]
[file ('scripts/' + model.name + '.lua', false, 'UTF-8')]
------------------------
-- Model [model.name/] --
------------------------

--[protected (model.name + ' begin')]

--[/protected]

require "mgLuaCameraViewport"
require "mgLuaAccurateRenderer"
require "mgLuaPositionController"

require "LuaCycabTK"
require "LuaStdPhysicsEngine"

--[protected (model.name + ' requires')]

--[/protected]


-- Default Renderer --
renderer = mge.AccurateRenderer "renderer"

-- Camera --
Cam = mge.Camera "Cam"
Cam_viewport = mge.CameraViewport "Cam_viewport"
Cam:SetPosition(-1., -5, 2)
Cam:Rotate(89.262533, 0, 0)
Cam:Rotate(0, 359.999791, 0)
Cam:Rotate(0, 0, -21.463017)
Cam:SetPerspective(98.101503, 1.333333, 0.100000, 100.000000)
Cam_viewport:SetViewport(0, 0, 1024, 768)
Cam_viewport:SetRenderSize(1024, 768)
Cam_viewport.Camera = Cam
Cam_viewport:SetProperty("layers", 1)
Cam_viewport.Renderer = renderer

-- Camera controller --

cont = mge.PositionController "cont"
cont.Controlled = Cam
cont:SetXPosController	"x_trans"
cont:SetYPosController	"y_trans"
cont:SetZPosController	"z_trans"
cont:SetXRotController	"x_rot"
cont:SetYRotController	"y_rot"
cont:SetZRotController	"z_rot"
cont:SetMode "Walk"
cont.TranslationSpeed = 5.000000
cont.RotationSpeed = 1.000000

-- Physics Engine --
phyEng = cycabtk.StdPhysicsEngine "phyEng"

-- Simulation time
require "LuaTimeRosInterface"
timeRos = cycabtk.TimeRosInterface "timeRos"

--[protected (model.name + ' instances')]

--[/protected]

-- Model instances --

	[for( inst: InstanceSpecification | getInstanceSpecificationsForPlatform(model, 'cycabTK'))]
		[comment][inst.name/] : [inst.classifier.name/] [inst.clientDependency.name/][/comment]
		[let elt : Class =  findClassInModel(model, inst.classifier.name->asSequence()->first())]
		[if( getAttributeValue(elt, 'native', getStereotype(elt), 'false' ) = 'false')]
			[if(inheritsFrom(elt, 'Robot') or inheritsFrom(elt, 'RoboticSystem'))]
require "[model.name/]/[inst.classifier.name/]"
			[let cycabtk_name : String = computeCycabtkInstanceName(model, inst)]
[cycabtk_name/] = [inst.classifier.name/]( "[cycabtk_name/]" )
			[let parent : InstanceSpecification = getParentInstanceSpecification(model, inst)]
				[if( isAllocatedTo(parent, 'cycabTK') )]
				[let eltp : Class =  findClassInModel(model, parent.classifier.name->asSequence()->first())]
				[if( inheritsFrom(eltp, 'Robot') or inheritsFrom(eltp, 'RoboticSystem'))]
[cycabtk_name/]:MakeChildOf( "[computeCycabtkInstanceName(model,parent)/]" )
				[/if]
				[/let]
				[/if]
			[/let]
			[/let]
			[/if]
		[else]
			[let cycabtk_name : String = computeCycabtkInstanceName(model, inst)]
			[let libPath:String=getAttributeValue(elt, 'libraryPath', getStereotype(elt), null )]
require "[libPath/]"
			[/let]
			[let componentName:String=getAttributeValue(elt, 'libraryComponentName', getStereotype(elt), null )]
[cycabtk_name/] = [componentName/]( "[cycabtk_name/]" )
			[let parent : InstanceSpecification = getParentInstanceSpecification(model,inst)]
				[if( isAllocatedTo(parent, 'cycabTK') )]
				[let eltp : Class =  findClassInModel(model, parent.classifier.name->asSequence()->first())]
				[if( inheritsFrom(eltp, 'Robot') or inheritsFrom(eltp, 'RoboticSystem'))]
[cycabtk_name/]:MakeChildOf( "[computeCycabtkInstanceName(model, parent)/]" )
				[/if]
				[/let]
				[/if]
			[/let]
			[/let]
			[/let]
		[/if]
		[/let]

	[/for]

--[protected (model.name + ' end')]

--[/protected]

[/file]


[/template]
