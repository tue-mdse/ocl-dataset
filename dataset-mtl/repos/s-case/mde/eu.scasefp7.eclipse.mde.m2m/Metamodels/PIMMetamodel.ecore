<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="ServicePIM" nsURI="platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/PIMMetamodel.ecore"
    nsPrefix="Eu.fp7.scase">
  <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
    <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
    <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
    <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="AlgoResourceModel">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="existantSettersForAllProperties existantGettersForAllProperties uniqueLinklistProperty"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="existantSettersForAllProperties" value="self.algoModelHasProperty->forAll(rAlgoModelProperty | self.algoModelHasSetter->one(setsProperty.name = rAlgoModelProperty.name))"/>
      <details key="existantGettersForAllProperties" value="self.algoModelHasProperty->forAll(rAlgoModelProperty | self.algoModelHasGetter->one(getsProperty.name = rAlgoModelProperty.name))"/>
      <details key="uniqueLinklistProperty" value="self.algoModelHasProperty->one(name = 'linklist')"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="parentName" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="algoModelHasInputRepresentation"
        upperBound="-1" eType="#//ResourceInputRepresentation" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="algoModelHasOutputRepresentation"
        lowerBound="1" upperBound="-1" eType="#//ResourceOutputRepresentation" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="algoModelHasProperty" lowerBound="1"
        eType="#//PIMComponentProperty" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="algoModelHasSetter" lowerBound="1"
        eType="#//SetterFunction" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="algoModelHasGetter" lowerBound="1"
        eType="#//GetterFunction" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasRelatedAlgoModel" upperBound="-1"
        eType="#//AlgoResourceModel"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="isRelatedAlgoModel" upperBound="-1"
        eType="#//AlgoResourceModel"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="algoModelHasParseFunction"
        upperBound="-1" eType="#//RepresentationParseFunction" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="algoModelHasMarshallingFunction"
        lowerBound="1" upperBound="-1" eType="#//RepresentationMarshallingFunction"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AlgoResourceController">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="algoControllerNotAllowedCRUDVerbs algoControllerHasUniqueCRUDActivity algoControllerActivityAddsHypermediaLinkToSelf"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="algoControllerNotAllowedCRUDVerbs" value="self.algoControllerHasCRUDActivity->select(CRUDActivity| CRUDActivity.crudVerb =2 or CRUDActivity.crudVerb = 3)->isEmpty()"/>
      <details key="algoControllerHasUniqueCRUDActivity" value="self.algoControllerHasCRUDActivity->size() = 1"/>
      <details key="algoControllerActivityAddsHypermediaLinkToSelf" value="&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;self.algoControllerHasCRUDActivity->exists(crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;self.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Sibling' and hasTargetAlgoController = self)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;self.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Sibling' and hasTargetAlgoController = self)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;self.algoControllerHasCRUDActivity->exists(crudVerb = 0)&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;)&#xA;&#x9;&#x9;or&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;self.algoControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;self.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetAlgoController = self)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;self.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetAlgoController = self)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;self.algoControllerHasCRUDActivity->exists(crudVerb = 1)&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;)"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="parentName" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="controllerURI" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasAssociatedAlgoModel"
        lowerBound="1" eType="#//AlgoResourceModel"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="algoControllerHasCRUDActivity"
        lowerBound="1" eType="#//ResourceControllerCRUDActivity" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ResourceModelManager">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="existantSettersForAllProperties existantGettersForAllProperties uniqueLinklistProperty"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="existantSettersForAllProperties" value="self.hasRMManagerProperty->forAll(rMManagerProperty | self.rMManagerHasSetter->one(setsProperty.name = rMManagerProperty.name))"/>
      <details key="existantGettersForAllProperties" value="self.hasRMManagerProperty->forAll(rMManagerProperty | self.rMManagerHasGetter->one(getsProperty.name = rMManagerProperty.name))"/>
      <details key="uniqueLinklistProperty" value="self.hasRMManagerProperty->one(name = 'linklist')"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="parentName" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasRelatedModel" lowerBound="1"
        eType="#//ResourceModel"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rMManagerHasInputRepresentation"
        lowerBound="1" upperBound="-1" eType="#//ResourceInputRepresentation" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rMManagerHasOutputRepresentation"
        lowerBound="1" upperBound="-1" eType="#//ResourceOutputRepresentation" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasRMManagerProperty" lowerBound="1"
        eType="#//PIMComponentProperty" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rMManagerHasSetter" lowerBound="1"
        eType="#//SetterFunction" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rMManagerHasGetter" lowerBound="1"
        eType="#//GetterFunction" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rMManagerHasParseFunction"
        lowerBound="1" upperBound="-1" eType="#//RepresentationParseFunction" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rMManagerHasMarshallingFunction"
        lowerBound="1" upperBound="-1" eType="#//RepresentationMarshallingFunction"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ResourceModel">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="uniqueNamingProperty uniquePrimaryIdentifier existantSettersForAllProperties existantGettersForAllProperties uniqueLinklistProperty"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="uniqueNamingProperty" value="self.rModelHasProperty->one(isNamingProperty = true)"/>
      <details key="uniquePrimaryIdentifier" value="self.rModelHasProperty->one(isPrimaryIdentifier = true)"/>
      <details key="existantSettersForAllProperties" value="self.rModelHasProperty->forAll(rModelProperty | self.rModelHasSetter->one(setsProperty.name = rModelProperty.name))"/>
      <details key="existantGettersForAllProperties" value="self.rModelHasProperty->forAll(rModelProperty | self.rModelHasGetter->one(getsProperty.name = rModelProperty.name))"/>
      <details key="uniqueLinklistProperty" value="self.rModelHasProperty->one(name = 'linklist')"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="parentName" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rModelHasIRepresentation"
        lowerBound="1" upperBound="-1" eType="#//ResourceInputRepresentation" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rModelHasOutputRepresentation"
        lowerBound="1" upperBound="-1" eType="#//ResourceOutputRepresentation" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rModelHasProperty" lowerBound="1"
        upperBound="-1" eType="#//PIMComponentProperty" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasRelatedModelManager"
        upperBound="-1" eType="#//ResourceModelManager"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasRelatedAlgoModel" upperBound="-1"
        eType="#//AlgoResourceModel"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rModelHasSetter" lowerBound="1"
        upperBound="-1" eType="#//SetterFunction" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rModelHasGetter" lowerBound="1"
        upperBound="-1" eType="#//GetterFunction" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="isMappedToRDBMSTable" lowerBound="1"
        eType="#//RDBMSTable"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rModelHasParseFunction"
        lowerBound="1" upperBound="-1" eType="#//RepresentationParseFunction" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rModelMarshallingFunction"
        lowerBound="1" upperBound="-1" eType="#//RepresentationMarshallingFunction"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ResourceControllerManager">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="rCManagerHasUniqueCREATEActivity rCManagerHasUniqueREADActivity rCManagerNotAllowedCRUDActivityVerbs rCManagerCreateActivityAddsCreateHypermediaLinkToSelf rCManagerReadActivityAddsCreateHypermediaLinkToSelf rCManagerCreateActivityAddsReadHypermediaLinkToSelf rCManagerReadActivityAddsReadHypermediaLinkToSelf"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="rCManagerHasUniqueCREATEActivity" value="self.rCManagerHasCRUDActivity->one(crudVerb = 0)"/>
      <details key="rCManagerHasUniqueREADActivity" value="self.rCManagerHasCRUDActivity->one(crudVerb = 1)"/>
      <details key="rCManagerNotAllowedCRUDActivityVerbs" value="self.rCManagerHasCRUDActivity->select(crudVerb = 2 or crudVerb = 3)->isEmpty()"/>
      <details key="rCManagerCreateActivityAddsCreateHypermediaLinkToSelf" value="self.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and hasTargetRCManager = self and linkType = 'Sibling')"/>
      <details key="rCManagerReadActivityAddsCreateHypermediaLinkToSelf" value="self.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and hasTargetRCManager = self and linkType = 'Sibling')"/>
      <details key="rCManagerCreateActivityAddsReadHypermediaLinkToSelf" value="self.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and hasTargetRCManager = self and linkType = 'Sibling')"/>
      <details key="rCManagerReadActivityAddsReadHypermediaLinkToSelf" value="self.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and hasTargetRCManager = self and linkType = 'Sibling')"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="controllerURI" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasAssociatedRMManager"
        lowerBound="1" eType="#//ResourceModelManager"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rCManagerHasCRUDActivity"
        lowerBound="2" upperBound="-1" eType="#//ResourceControllerCRUDActivity" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="parentName" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ResourceController">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="rControllerHasUniqueCRUDActivities rControllerNotAllowedCRUDActivitiyVerbs rControllerReadActivityAddsReadHypermediaLinkToSelf rControllerUpdateActivityAddsUpdateHypermediaLinkToSelf rControllerReadActivityAddsUpdateHypermediaLinkToSelf rControllerReadActivityAddsDeleteHypermediaLinkToSelf rControllerUpdateActivityAddsReadHypermediaLinkToSelf rControllerUpdateActivityAddsDeleteHypermediaLinkToSelf"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="rControllerHasUniqueCRUDActivities" value="self.rControllerHasCRUDActivity->isUnique(crudVerb)"/>
      <details key="rControllerNotAllowedCRUDActivitiyVerbs" value="self.rControllerHasCRUDActivity->select(crudVerb = 0)->isEmpty()"/>
      <details key="rControllerReadActivityAddsReadHypermediaLinkToSelf" value="&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity.hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetRController = self)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity.hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetRController = self)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;)"/>
      <details key="rControllerUpdateActivityAddsUpdateHypermediaLinkToSelf" value="&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity.hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Sibling' and hasTargetRController = self)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity.hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Sibling' and hasTargetRController = self)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;)"/>
      <details key="rControllerReadActivityAddsUpdateHypermediaLinkToSelf" value="&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->exists(crudVerb = 2) and self.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Sibling' and hasTargetRController = self)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Sibling' and hasTargetRController = self)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->exists(crudVerb = 2) and self.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;)"/>
      <details key="rControllerReadActivityAddsDeleteHypermediaLinkToSelf" value="&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->exists(crudVerb = 3) and self.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Sibling' and hasTargetRController = self)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Sibling' and hasTargetRController = self)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->exists(crudVerb = 3) and self.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;)"/>
      <details key="rControllerUpdateActivityAddsReadHypermediaLinkToSelf" value="&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->exists(crudVerb = 1) and self.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetRController = self)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetRController = self)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->exists(crudVerb = 1) and self.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;)"/>
      <details key="rControllerUpdateActivityAddsDeleteHypermediaLinkToSelf" value="&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->exists(crudVerb = 3) and self.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Sibling' and hasTargetRController = self)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Sibling' and hasTargetRController = self)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;self.rControllerHasCRUDActivity->exists(crudVerb = 3) and self.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;)"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="controllerURI" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasAssociatedRModel" lowerBound="1"
        eType="#//ResourceModel"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="rControllerHasCRUDActivity"
        lowerBound="1" upperBound="-1" eType="#//ResourceControllerCRUDActivity" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="parentName" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PIMComponentProperty">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="primaryIdentifierMapsToPrimaryKey"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="primaryIdentifierMapsToPrimaryKey" value="(self.isPrimaryIdentifier = true) implies (self.isMappedToRDBMSColumn.isPrimaryKey = true)"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isNamingProperty" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isPrimaryIdentifier" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="isMappedToRDBMSColumn"
        eType="#//RDBMSTableColumn"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RepresentationParseFunction">
    <eStructuralFeatures xsi:type="ecore:EReference" name="parsesInputRepresentation"
        lowerBound="1" eType="#//ResourceInputRepresentation"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RepresentationMarshallingFunction">
    <eStructuralFeatures xsi:type="ecore:EReference" name="marshalsRepresentation"
        lowerBound="1" eType="#//ResourceOutputRepresentation"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ResourceInputRepresentation">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="inputType" lowerBound="1"
        eType="#//MediaType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ResourceOutputRepresentation">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="outputType" lowerBound="1"
        eType="#//MediaType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ResourceControllerCRUDActivity">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="activityURI" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="crudVerb" lowerBound="1"
        eType="#//CRUDVerb"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasCRUDActivityHandler"
        lowerBound="1" eType="#//CRUDActivityHandler" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="isMappedToRDBMSActivity"
        eType="#//RDBMSActivity"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SetterFunction" eSuperTypes="#//PIMComponentFunction">
    <eStructuralFeatures xsi:type="ecore:EReference" name="setsProperty" lowerBound="1"
        eType="#//PIMComponentProperty"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GetterFunction" eSuperTypes="#//PIMComponentFunction">
    <eStructuralFeatures xsi:type="ecore:EReference" name="getsProperty" lowerBound="1"
        eType="#//PIMComponentProperty"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FunctionParameter">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="bIsReturnParameter" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CRUDActivityHandler">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="crudVerb" lowerBound="1"
        eType="#//CRUDVerb"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasHypermediaFunction"
        lowerBound="1" eType="#//CreateHypermediaPIMFunction" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="usesDBController" lowerBound="1"
        eType="#//DatabaseController"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CreateHypermediaPIMFunction">
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasHypermediaLink" lowerBound="1"
        upperBound="-1" eType="#//HypermediaLink" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DatabaseController">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasRDBMSActivity" lowerBound="1"
        upperBound="-1" eType="#//RDBMSActivity" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RDBMSActivity">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="rdbmsVerb" lowerBound="1"
        eType="#//RDBMSVerb"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="altersRDBMSTable" lowerBound="1"
        eType="#//RDBMSTable"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RDBMSTable">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="uniquePrimaryKey"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="uniquePrimaryKey" value="self.hasRDBMSColumns->one(isPrimaryKey = true)"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasRDBMSColumns" lowerBound="2"
        upperBound="-1" eType="#//RDBMSTableColumn" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RDBMSTableColumn">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isForeignKey" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="isPrimaryKey" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="referencesRDBMSTable" upperBound="-1"
        eType="#//RDBMSTable"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="HypermediaLink">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="linkCRUDVerb" lowerBound="1"
        eType="#//CRUDVerb"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="linkType" lowerBound="1"
        eType="#//LinkType"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasTargetAlgoController"
        eType="#//AlgoResourceController"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasTargetRCManager" eType="#//ResourceControllerManager"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasTargetRController" eType="#//ResourceController"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="MediaType">
    <eLiterals name="JSON"/>
    <eLiterals name="XML" value="1"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="CRUDVerb">
    <eLiterals name="CREATE"/>
    <eLiterals name="READ" value="1"/>
    <eLiterals name="UPDATE" value="2"/>
    <eLiterals name="DELETE" value="3"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="RDBMSVerb">
    <eLiterals name="INSERT"/>
    <eLiterals name="SELECT" value="1"/>
    <eLiterals name="UPDATE" value="2"/>
    <eLiterals name="DELETE" value="3"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="LinkType">
    <eLiterals name="Parent"/>
    <eLiterals name="Sibling" value="1"/>
    <eLiterals name="Child" value="2"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PIMComponentFunction">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasFunctionParameter" upperBound="-1"
        eType="#//FunctionParameter" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RESTfulServicePIM">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="controllersHaveUniqueURIs uniqueResourceModels uniqueResourceModelManagers uniqueResourceAlgoModels uniqueResourceControllers uniqueResourceControllerManagers uniqueResourceAlgoControllers uniquePIMComponentNames uniqueRModelRDBMSTableMapping validDatabaseReferentialIntegrity correctlyMatchingRControllerCRUDActivitiesWithRDBMSActivities correctlyMatchingRCManagerCRUDActivitiesWithRDBMSActivities rCManagerCreateActivityAddsReadHypermediaLinkToRRController rCManagerCreateActivityAddsUpdateHypermediaLinkToRRController rCManagerCreateActivityAddsDeleteHypermediaLinkToRRController rCManagerReadActivityAddsReadHypermediaLinkToRRController rCManagerReadActivityAddsUpdateHypermediaLinkToRRController rCManagerReadActivityAddsDeleteHypermediaLinkToRRController rCManagerCreateActivityAddsReadHypermediaLinkToParentRController rCManagerCreateActivityAddsUpdateHypermediaLinkToParentRController rCManagerCreateActivityAddsDeleteHypermediaLinkToParentRController rCManagerReadActivityAddsReadHypermediaLinkToParentRController rCManagerReadActivityAddsUpdateHypermediaLinkToParentRController rCManagerReadActivityAddsDeleteHypermediaLinkToParentRController rControllerReadActivityAddsCreateHypermediaLinkToRCManager rControllerReadActivityAddsReadHypermediaLinkToRCManager rControllerUpdateActivityAddsCreateHypermediaLinkToRCManager rControllerUpdateActivityAddsReadHypermediaLinkToRCManager rControllerReadActivityAddsCreateHypermediaLinkToParentRCManager rControllerReadActivityAddsReadHypermediaLinkToParentRCManager rControllerUpdateActivityAddsCreateHypermediaLinkToParentRCManager rControllerUpdateActivityAddsReadHypermediaLinkToParentRCManager rControllerDeleteActivityAddsCreateHypermediaLinkToParentRCManager rControllerDeleteActivityAddsReadHypermediaLinkToParentRCManager algoControllerActivityAddsHypermediaLinkToRAlgoController algoControllerAddsHypermediaLinkToParentAlgoController rControllerReadAddsHypermediaLinkToRAlgoController rControllerUpdateAddsHypermediaLinkToRAlgoController algoControllerAddsReadHypermediaLinkToParentRController algoControllerAddsUpdateHypermediaLinkToParentRController algoControllerAddsDeleteHypermediaLinkToParentRController"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="controllersHaveUniqueURIs" value="self->isUnique(Bag{self.hasResourceController.controllerURI, self.hasResourceControllerManager.controllerURI, self.hasAlgoResourceController.controllerURI})"/>
      <details key="uniqueResourceModels" value="self.hasResourceModel->isUnique(name)"/>
      <details key="uniqueResourceModelManagers" value="self.hasResourceModelManager->isUnique(name)"/>
      <details key="uniqueResourceAlgoModels" value="self.hasAlgoResourceModel->isUnique(name)"/>
      <details key="uniqueResourceControllers" value="self.hasResourceController->isUnique(name)"/>
      <details key="uniqueResourceControllerManagers" value="self.hasResourceControllerManager->isUnique(name)"/>
      <details key="uniqueResourceAlgoControllers" value="self.hasAlgoResourceController->isUnique(name)"/>
      <details key="uniquePIMComponentNames" value="self->isUnique(Bag{self.hasResourceModel.name, self.hasResourceController.name, self.hasResourceModelManager.name, self.hasResourceControllerManager, self.hasAlgoResourceModel.name, self.hasAlgoResourceController.name})"/>
      <details key="uniqueRModelRDBMSTableMapping" value="self.hasResourceModel->forAll(rModel1, rModel2 | rModel1.name &lt;> rModel2.name implies rModel1.isMappedToRDBMSTable.name &lt;> rModel2.isMappedToRDBMSTable.name)"/>
      <details key="validDatabaseReferentialIntegrity" value="self.hasResourceModel->forAll(rModel1, rModel2 | (rModel1.hasRelatedModelManager.hasRelatedModel = rModel2) implies (self.hasRDBMSTable->forAll(rdbmsTableA, rdbmsTableB | (rModel1.isMappedToRDBMSTable = rdbmsTableA and rModel2.isMappedToRDBMSTable = rdbmsTableB) implies (rModel1.rModelHasProperty->forAll(rModelPropertyA | (rModelPropertyA.isPrimaryIdentifier = true) implies (rdbmsTableB.hasRDBMSColumns->one(isForeignKey = true and name = rModelPropertyA.name and referencesRDBMSTable = rdbmsTableA)))))))"/>
      <details key="correctlyMatchingRControllerCRUDActivitiesWithRDBMSActivities"
          value="self.hasResourceController.rControllerHasCRUDActivity->forAll(rControllerCRUDActivityA | self.hasDatabaseController.hasRDBMSActivity->forAll(rdbmsActivityA | (rControllerCRUDActivityA.isMappedToRDBMSActivity = rdbmsActivityA) implies (self.hasResourceController->one(rControllerHasCRUDActivity = rControllerCRUDActivityA and hasAssociatedRModel.isMappedToRDBMSTable = rControllerCRUDActivityA.isMappedToRDBMSActivity.altersRDBMSTable))))"/>
      <details key="correctlyMatchingRCManagerCRUDActivitiesWithRDBMSActivities" value="self.hasResourceControllerManager.rCManagerHasCRUDActivity->forAll(rCManagerCRUDActivityA | self.hasDatabaseController.hasRDBMSActivity->forAll(rdbmsActivityA | (rCManagerCRUDActivityA.isMappedToRDBMSActivity = rdbmsActivityA) implies (self.hasResourceControllerManager->one(rCManagerHasCRUDActivity = rCManagerCRUDActivityA and hasAssociatedRMManager.hasRelatedModel.isMappedToRDBMSTable = rCManagerCRUDActivityA.isMappedToRDBMSActivity.altersRDBMSTable))))"/>
      <details key="rCManagerCreateActivityAddsReadHypermediaLinkToRRController" value="&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll(rCManagerA | &#xA;&#x9;&#x9;self.hasResourceController->forAll( rControllerA | &#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;implies &#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;    and &#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rCManagerCreateActivityAddsUpdateHypermediaLinkToRRController"
          value="&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll(rCManagerA | &#xA;&#x9;&#x9;self.hasResourceController->forAll( rControllerA | &#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;&#x9;implies &#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;    and &#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rCManagerCreateActivityAddsDeleteHypermediaLinkToRRController"
          value="&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll(rCManagerA | &#xA;&#x9;&#x9;self.hasResourceController->forAll( rControllerA | &#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)&#xA;&#x9;&#x9;&#x9;&#x9;implies &#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;    and &#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rCManagerReadActivityAddsReadHypermediaLinkToRRController" value="&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll(rCManagerA | &#xA;&#x9;&#x9;self.hasResourceController->forAll( rControllerA | &#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;implies  &#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;    and &#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rCManagerReadActivityAddsUpdateHypermediaLinkToRRController" value="&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll(rCManagerA | &#xA;&#x9;&#x9;self.hasResourceController->forAll( rControllerA | &#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;&#x9;implies &#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;    and &#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rCManagerReadActivityAddsDeleteHypermediaLinkToRRController" value="&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll(rCManagerA | &#xA;&#x9;&#x9;self.hasResourceController->forAll( rControllerA | &#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)&#xA;&#x9;&#x9;&#x9;&#x9;implies &#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;    and &#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rCManagerCreateActivityAddsReadHypermediaLinkToParentRController"
          value="&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll(rCManagerA |&#xA;&#x9;&#x9;self.hasResourceController->forAll(rControllerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rCManagerCreateActivityAddsUpdateHypermediaLinkToParentRController"
          value="&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll(rCManagerA |&#xA;&#x9;&#x9;self.hasResourceController->forAll(rControllerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rCManagerCreateActivityAddsDeleteHypermediaLinkToParentRController"
          value="&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll(rCManagerA |&#xA;&#x9;&#x9;self.hasResourceController->forAll(rControllerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rCManagerReadActivityAddsReadHypermediaLinkToParentRController"
          value="&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll(rCManagerA |&#xA;&#x9;&#x9;self.hasResourceController->forAll(rControllerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rCManagerReadActivityAddsUpdateHypermediaLinkToParentRController"
          value="&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll(rCManagerA |&#xA;&#x9;&#x9;self.hasResourceController->forAll(rControllerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rCManagerReadActivityAddsDeleteHypermediaLinkToParentRController"
          value="&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll(rCManagerA |&#xA;&#x9;&#x9;self.hasResourceController->forAll(rControllerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rControllerReadActivityAddsCreateHypermediaLinkToRCManager" value="&#xA;&#x9;&#x9;self.hasResourceController->forAll( rControllerA |&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll( rCManagerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rControllerReadActivityAddsReadHypermediaLinkToRCManager" value="&#xA;&#x9;&#x9;self.hasResourceController->forAll( rControllerA |&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll( rCManagerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rControllerUpdateActivityAddsCreateHypermediaLinkToRCManager"
          value="&#xA;&#x9;&#x9;self.hasResourceController->forAll( rControllerA |&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll( rCManagerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rControllerUpdateActivityAddsReadHypermediaLinkToRCManager" value="&#xA;&#x9;&#x9;self.hasResourceController->forAll( rControllerA |&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll( rCManagerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rControllerReadActivityAddsCreateHypermediaLinkToParentRCManager"
          value="&#xA;&#x9;&#x9;self.hasResourceController->forAll( rControllerA |&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll( rCManagerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rControllerReadActivityAddsReadHypermediaLinkToParentRCManager"
          value="&#xA;&#x9;&#x9;self.hasResourceController->forAll( rControllerA |&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll( rCManagerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rControllerUpdateActivityAddsCreateHypermediaLinkToParentRCManager"
          value="&#xA;&#x9;&#x9;self.hasResourceController->forAll( rControllerA |&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll( rCManagerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rControllerUpdateActivityAddsReadHypermediaLinkToParentRCManager"
          value="&#xA;&#x9;&#x9;self.hasResourceController->forAll( rControllerA |&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll( rCManagerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rControllerDeleteActivityAddsCreateHypermediaLinkToParentRCManager"
          value="&#xA;&#x9;&#x9;self.hasResourceController->forAll( rControllerA |&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll( rCManagerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 3).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 3).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="rControllerDeleteActivityAddsReadHypermediaLinkToParentRCManager"
          value="&#xA;&#x9;&#x9;self.hasResourceController->forAll( rControllerA |&#xA;&#x9;&#x9;self.hasResourceControllerManager->forAll( rCManagerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 3).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 3).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)&#xA;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="algoControllerActivityAddsHypermediaLinkToRAlgoController" value="&#xA;&#x9;&#x9;self.hasAlgoResourceController->forAll(algoControllerA, algoControllerB |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;)"/>
      <details key="algoControllerAddsHypermediaLinkToParentAlgoController" value="&#xA;&#x9;&#x9;self.hasAlgoResourceController->forAll(algoControllerA, algoControllerB |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;)"/>
      <details key="rControllerReadAddsHypermediaLinkToRAlgoController" value="&#xA;&#x9;&#x9;self.hasAlgoResourceController->forAll(algoControllerA |&#xA;&#x9;&#x9;self.hasResourceController->forAll(rControllerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;))"/>
      <details key="rControllerUpdateAddsHypermediaLinkToRAlgoController" value="&#xA;&#x9;&#x9;self.hasAlgoResourceController->forAll(algoControllerA |&#xA;&#x9;&#x9;self.hasResourceController->forAll(rControllerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;))"/>
      <details key="algoControllerAddsReadHypermediaLinkToParentRController" value="&#xA;&#x9;&#x9;self.hasAlgoResourceController->forAll(algoControllerA |&#xA;&#x9;&#x9;self.hasResourceController->forAll(rControllerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="algoControllerAddsUpdateHypermediaLinkToParentRController" value="&#xA;&#x9;&#x9;self.hasAlgoResourceController->forAll(algoControllerA |&#xA;&#x9;&#x9;self.hasResourceController->forAll(rControllerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
      <details key="algoControllerAddsDeleteHypermediaLinkToParentRController" value="&#xA;&#x9;&#x9;self.hasAlgoResourceController->forAll(algoControllerA |&#xA;&#x9;&#x9;self.hasResourceController->forAll(rControllerA |&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;or&#xA;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;algoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;implies&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;rControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;))"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasResourceModel" upperBound="-1"
        eType="#//ResourceModel" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasResourceModelManager"
        upperBound="-1" eType="#//ResourceModelManager" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasResourceController"
        upperBound="-1" eType="#//ResourceController" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasResourceControllerManager"
        upperBound="-1" eType="#//ResourceControllerManager" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasAlgoResourceModel" upperBound="-1"
        eType="#//AlgoResourceModel" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasAlgoResourceController"
        upperBound="-1" eType="#//AlgoResourceController" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasRDBMSTable" upperBound="-1"
        eType="#//RDBMSTable" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="hasDatabaseController"
        lowerBound="1" eType="#//DatabaseController" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="serviceOutputPath" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="serviceDatabaseIP" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="serviceDatabasePort" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="serviceDatabaseUsername"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="serviceDatabasePassword"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="serviceDatabaseType" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
</ecore:EPackage>
