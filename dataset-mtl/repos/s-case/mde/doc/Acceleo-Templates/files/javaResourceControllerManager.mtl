[comment encoding = UTF-8 /]
[module javaResourceControllerManager('file:/Users/IMG/Desktop/Dropbox/S-CASE-Int/Work/WP2/Task_2.2-2.3/AnnotationLayerStack/AnnotationLayerStack.ecore', 'file:/Users/IMG/Desktop/Dropbox/S-CASE-Int/Work/WP2/Task_2.2-2.3/AuthenticationLayer/AuthenticationPSMMetamodel.ecore', 'file:/Users/IMG/Desktop/Dropbox/S-CASE-Int/Work/WP2/Task_2.2-2.3/EMF_ATL_MDE_Engine/CIM_Ecore_metamodel/PSMMetamodel.ecore')]


[template public javaResourceControllerManager(anAnnotationStack : AnnotationStack)]

[for (jRCManager : JavaResourceControllerManager | anAnnotationStack.hasCorePSM.hasJavaRCManager)]
[file (anAnnotationStack.hasCorePSM.name + '/src/main/java/eu/fp7/scase/' + anAnnotationStack.hasCorePSM.name.toLowerCase() + '/' + jRCManager.parentName + '/' + jRCManager.name + '.java', false, 'UTF-8')]
/*
 * ARISTOSTLE UNIVERSITY OF THESSALONIKI
 * Copyright (C) 2015
 * Aristotle University of Thessaloniki
 * Department of Electrical & Computer Engineering
 * Division of Electronics & Computer Engineering
 * Intelligent Systems & Software Engineering Lab
 *
 * Project             : [anAnnotationStack.hasCorePSM.name/]
 * WorkFile            : 
 * Compiler            : 
 * File Description    : 
 * Document Description: 
* Related Documents	   : 
* Note				   : 
* Programmer		   : RESTful MDE Engine created by Christoforos Zolotas
* Contact			   : christopherzolotas@issel.ee.auth.gr
*/


package eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLower()/].[jRCManager.parentName/];


import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
[if (jRCManager.JavaRCManagerHasHTTPActivity.hasHTTPActivityParameter->exists(httpParameter : HTTPActivityFunctionParameter | httpParameter.HTTPFunctionParameterHasJAXRSAnnotation.oclIsUndefined() = false ))]
import javax.ws.rs.PathParam;
[/if]
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.UriInfo;
[if (anAnnotationStack.bHasAuthenticationAnnotation)]
import javax.ws.rs.HeaderParam;
import javax.ws.rs.DefaultValue;
[/if]


/* This class defines the web API of the manager [jRCManager.parentName/] resource. It handles POST and GET HTTP requests, as it is prescribed by the meta-models.*/
[jRCManager.JavaRCManagerHasJAXRSAnnotation.JAXRSAnnotationText/]
public class [jRCManager.name/]{

    @Context
    private UriInfo oApplicationUri;

[for (httpActivity : HTTPActivity | jRCManager.JavaRCManagerHasHTTPActivity->select(activity : HTTPActivity | activity.ActivityHTTPVerb = HTTPVerb::POST)) separator('\n')] 
	/* This function handles POST requests that are sent with any media type stated in the @Consumes JAX-RS annotation below 
     and returns any response in any media type stated in the @Produces JAX-RS annotation below.*/
    [for (activityJAXRSAnnotation : JAXRSAnnotation | httpActivity.HTTPActivityHasJAXRSAnnotation)]
	[activityJAXRSAnnotation.JAXRSAnnotationText/]
	[/for]
    public [jRCManager.hasAssociatedRMManager.hasRelatedJavaRModel.name/] [httpActivity.name.toLowerFirst()/]([if (anAnnotationStack.bHasAuthenticationAnnotation)][if (httpActivity.hasBothModeAuthentication(anAnnotationStack))]@DefaultValue("guest") @HeaderParam("authorization") String authHeader, [elseif (httpActivity.hasAuthenticationOnlyMode(anAnnotationStack))]@HeaderParam("authorization") String authHeader, [/if][/if][for (httpActivityParam : HTTPActivityFunctionParameter | httpActivity.hasHTTPActivityParameter) separator(', ')][if (httpActivityParam.HTTPFunctionParameterHasJAXRSAnnotation.oclIsUndefined() =false)][httpActivityParam.HTTPFunctionParameterHasJAXRSAnnotation.JAXRSAnnotationText/][/if][httpActivityParam.type/] [httpActivityParam.name/][/for]){
        [httpActivity.hasHTTPActivityHandler.name/] o[httpActivity.hasHTTPActivityHandler.name/] = new [httpActivity.hasHTTPActivityHandler.name/]([if (anAnnotationStack.bHasAuthenticationAnnotation)][if(httpActivity.hasGuestMode(anAnnotationStack) = false)]authHeader, [/if][/if][if (anAnnotationStack.hasCorePSM.hasJavaRModel->select(parentRM : JavaResourceModel | parentRM.hasRelatedJavaRMManager.hasRelatedJavaRModel->includes(jRCManager.hasAssociatedRMManager.hasRelatedJavaRModel))->size() = 1)][anAnnotationStack.hasCorePSM.hasJavaRModel->select(javaPRM : JavaResourceModel | javaPRM.hasRelatedJavaRMManager.hasRelatedJavaRModel->includes(jRCManager.hasAssociatedRMManager.hasRelatedJavaRModel))->at(1).parentName/]Id, [elseif (anAnnotationStack.hasCorePSM.hasJavaRModel->select(jPRM : JavaResourceModel | jPRM.hasRelatedJavaRMManager.hasRelatedJavaRModel->includes(jRCManager.hasAssociatedRMManager.hasRelatedJavaRModel))->size() > 1)][anAnnotationStack.hasCorePSM.hasJavaRModel->select(jPRM : JavaResourceModel | jPRM.hasRelatedJavaRMManager.hasRelatedJavaRModel->includes(jRCManager.hasAssociatedRMManager.hasRelatedJavaRModel) and ('Post' + jPRM.parentName + jRCManager.parentName = httpActivity.name))->at(1).parentName/]Id, [/if]o[jRCManager.hasAssociatedRMManager.hasRelatedJavaRModel.name/], oApplicationUri);
        return o[httpActivity.hasHTTPActivityHandler.name/].post[jRCManager.hasAssociatedRMManager.hasRelatedJavaRModel.name/]();
    }
[/for]

[for (httpActivity : HTTPActivity | jRCManager.JavaRCManagerHasHTTPActivity->select(activity : HTTPActivity | activity.ActivityHTTPVerb = HTTPVerb::GET)) separator('\n')] 
    /* This function handles GET requests  
     and returns any response in any media type stated in the @Produces JAX-RS annotation below.*/
    [for (activityJAXRSAnnotation : JAXRSAnnotation | httpActivity.HTTPActivityHasJAXRSAnnotation)]
	[activityJAXRSAnnotation.JAXRSAnnotationText/]
	[/for]
    public [jRCManager.hasAssociatedRMManager.name/] [httpActivity.name.toLowerFirst()/]([if (anAnnotationStack.bHasAuthenticationAnnotation)][if (httpActivity.hasBothModeAuthentication(anAnnotationStack))]@DefaultValue("guest") @HeaderParam("authorization") String authHeader[if (httpActivity.hasHTTPActivityParameter->size() >0)], [/if][elseif (httpActivity.hasAuthenticationOnlyMode(anAnnotationStack))]@HeaderParam("authorization") String authHeader[if (httpActivity.hasHTTPActivityParameter->size() >0)], [/if][/if][/if][for (httpActivityParam : HTTPActivityFunctionParameter | httpActivity.hasHTTPActivityParameter) separator(', ')][if (httpActivityParam.HTTPFunctionParameterHasJAXRSAnnotation.oclIsUndefined() =false)][httpActivityParam.HTTPFunctionParameterHasJAXRSAnnotation.JAXRSAnnotationText/][/if][httpActivityParam.type/] [httpActivityParam.name/][/for]){
        [httpActivity.hasHTTPActivityHandler.name/] o[httpActivity.hasHTTPActivityHandler.name/] = new [httpActivity.hasHTTPActivityHandler.name/]([if (anAnnotationStack.bHasAuthenticationAnnotation)][if(httpActivity.hasGuestMode(anAnnotationStack) = false)]authHeader, [/if][/if][if (anAnnotationStack.hasCorePSM.hasJavaRModel->select(parentRM : JavaResourceModel | parentRM.hasRelatedJavaRMManager.hasRelatedJavaRModel->includes(jRCManager.hasAssociatedRMManager.hasRelatedJavaRModel))->size() = 1)][anAnnotationStack.hasCorePSM.hasJavaRModel->select(javaPRM : JavaResourceModel | javaPRM.hasRelatedJavaRMManager.hasRelatedJavaRModel->includes(jRCManager.hasAssociatedRMManager.hasRelatedJavaRModel))->at(1).parentName/]Id, [elseif (anAnnotationStack.hasCorePSM.hasJavaRModel->select(jPRM : JavaResourceModel | jPRM.hasRelatedJavaRMManager.hasRelatedJavaRModel->includes(jRCManager.hasAssociatedRMManager.hasRelatedJavaRModel))->size() > 1)][anAnnotationStack.hasCorePSM.hasJavaRModel->select(jPRM : JavaResourceModel | jPRM.hasRelatedJavaRMManager.hasRelatedJavaRModel->includes(jRCManager.hasAssociatedRMManager.hasRelatedJavaRModel) and ('Get' + jPRM.parentName + jRCManager.parentName + 'List' = httpActivity.name))->at(1).parentName/]Id, [/if]oApplicationUri);
        return o[httpActivity.hasHTTPActivityHandler.name/].get[jRCManager.hasAssociatedRMManager.name/]();
    }
[/for]

}
[/file]
[/for]
[/template]

[query private hasBothModeAuthentication(anHttpActivity : HTTPActivity, anAnnotationStack : AnnotationStack) : Boolean =
	getAuthenticationLayerBothModeAnnotations(anAnnotationStack)->exists(bothModeAnnotation | bothModeAnnotation.HTTPActivityHasAuthenticationMode->exists(annHTTPActivity | annHTTPActivity.annotatesHTTPActivity.name = anHttpActivity.name))
/]

[query private getAuthenticationLayerBothModeAnnotations(anAnnotationStack : AnnotationStack) : Sequence(BothMode) =
	anAnnotationStack.hasAuthenticationLayer.hasAnnotation->select( annotation | annotation.oclIsTypeOf(BothMode))->asSequence()
/]

[query private hasAuthenticationOnlyMode(anHttpActivity : HTTPActivity, anAnnotationStack : AnnotationStack) : Boolean =
	getAuthenticationLayerAuthenticationOnlyModeAnnotations(anAnnotationStack)->exists(authenticationOnlyMode | authenticationOnlyMode.HTTPActivityHasAuthenticationMode->exists(annHTTPActivity | annHTTPActivity.annotatesHTTPActivity.name = anHttpActivity.name))
/]

[query private getAuthenticationLayerAuthenticationOnlyModeAnnotations(anAnnotationStack : AnnotationStack) : Sequence(AuthenticationOnlyMode) =
	anAnnotationStack.hasAuthenticationLayer.hasAnnotation->select( annotation | annotation.oclIsTypeOf(AuthenticationOnlyMode))->asSequence()
/]

[query private hasGuestMode(anHttpActivity : HTTPActivity, anAnnotationStack : AnnotationStack) : Boolean =
	getAuthenticationLayerGuestModeAnnotations(anAnnotationStack)->exists(guestMode | guestMode.HTTPActivityHasAuthenticationMode->exists( annHTTPActivity | annHTTPActivity.annotatesHTTPActivity.name = anHttpActivity.name))
/]

[query private getAuthenticationLayerGuestModeAnnotations(anAnnotationStack : AnnotationStack) : Sequence(GuestMode) =
	anAnnotationStack.hasAuthenticationLayer.hasAnnotation->select( annotation | annotation.oclIsTypeOf(GuestMode))->asSequence()
/]
