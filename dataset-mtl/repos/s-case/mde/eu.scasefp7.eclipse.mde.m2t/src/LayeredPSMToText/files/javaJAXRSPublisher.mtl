[comment encoding = UTF-8 /]
[module javaJAXRSPublisher('platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/AnnotationLayerStack.ecore', 'platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/AuthenticationPSMMetamodel.ecore', 'platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/PSMMetamodel.ecore')]


[template public javaJAXRSPublisher(anAnnotationStack : AnnotationStack)]

[file (anAnnotationStack.hasCorePSM.name  + '/src/main/java/eu/fp7/scase/' + anAnnotationStack.hasCorePSM.name.toLowerCase() + '/utilities/JAXRSPublisher.java' , false, 'UTF-8')]
/*
 * ARISTOTLE UNIVERSITY OF THESSALONIKI
 * Copyright (C) 2015
 * Aristotle University of Thessaloniki
 * Department of Electrical & Computer Engineering
 * Division of Electronics & Computer Engineering
 * Intelligent Systems & Software Engineering Lab
 *
 * Project             : [anAnnotationStack.hasCorePSM.name/]
 * WorkFile            : 
 * Compiler            : 
 * File Description    : 
 * Document Description: 
* Related Documents	   : 
* Note				   : 
* Programmer		   : RESTful MDE Engine created by Christoforos Zolotas
* Contact			   : christopherzolotas@issel.ee.auth.gr
*/


package eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities;


import java.util.HashSet;
import java.util.Set;

import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

[for (jRController : JavaResourceController | anAnnotationStack.hasCorePSM.hasJavaRController)]
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLower()/].[jRController.parentName.toLowerCase()/].[jRController.name/];
[/for]
[for (jRCManager : JavaResourceControllerManager | anAnnotationStack.hasCorePSM.hasJavaRCManager)]
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLower()/].[jRCManager.parentName.toLowerCase()/].[jRCManager.name/];
[/for]
[for (jARController : JavaAlgoResourceController | anAnnotationStack.hasCorePSM.hasJavaAlgoController)]
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLower()/].[jARController.parentName.toLowerCase()/].[jARController.name/];
[/for]

/* This class is responsible to publish any resource controllers that can handle incoming HTTP requests
to the web service container (Jetty etc)*/

@ApplicationPath("/api/")
public class JAXRSPublisher extends Application{

    public JAXRSPublisher(){}

    /* This function returns to the container (Jetty, Tomcat etc) the classes that expose any web API*/
    @Override
    public Set<Class<?>> getClasses(){
        HashSet<Class<?>> SetOfClasses = new HashSet<Class<?>>();
[for (jRController : JavaResourceController | anAnnotationStack.hasCorePSM.hasJavaRController)]
		SetOfClasses.add([jRController.name/].class);
[/for]
[for (jRCManager : JavaResourceControllerManager | anAnnotationStack.hasCorePSM.hasJavaRCManager)]
		SetOfClasses.add([jRCManager.name/].class);
[/for]
[for (jARController : JavaAlgoResourceController | anAnnotationStack.hasCorePSM.hasJavaAlgoController)]
		SetOfClasses.add([jARController.name/].class);
[/for]

        return SetOfClasses;
    }

    @Override
    public Set<Object> getSingletons(){
        return new HashSet<Object>();
    }
}
[/file]
[/template]
