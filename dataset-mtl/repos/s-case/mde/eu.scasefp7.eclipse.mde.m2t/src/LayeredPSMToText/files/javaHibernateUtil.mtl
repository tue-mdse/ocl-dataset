[comment encoding = UTF-8 /]
[module javaHibernateUtil('platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/AnnotationLayerStack.ecore', 'platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/AuthenticationPSMMetamodel.ecore', 'platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/PSMMetamodel.ecore')]


[template public javaHibernateUtil(anAnnotationStack : AnnotationStack, strDBMigrator : String)]

[file (anAnnotationStack.hasCorePSM.name  + strDBMigrator + '/src/main/java/eu/fp7/scase/' + anAnnotationStack.hasCorePSM.name.toLowerCase() + '/utilities/HibernateUtil.java', false, 'UTF-8')]
/*
 * ARISTOTLE UNIVERSITY OF THESSALONIKI
 * Copyright (C) 2015
 * Aristotle University of Thessaloniki
 * Department of Electrical & Computer Engineering
 * Division of Electronics & Computer Engineering
 * Intelligent Systems & Software Engineering Lab
 *
 * Project             : [anAnnotationStack.hasCorePSM.name/]
 * WorkFile            : 
 * Compiler            : 
 * File Description    : 
 * Document Description: 
* Related Documents	   : 
* Note				   : 
* Programmer		   : RESTful MDE Engine created by Christoforos Zolotas
* Contact			   : christopherzolotas@issel.ee.auth.gr
*/


package eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities;


import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;
[for (jRModel : JavaResourceModel | anAnnotationStack.hasCorePSM.hasJavaRModel)]
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].[jRModel.parentName.toLowerCase()/].[jRModel.name/];
[/for]

[if (anAnnotationStack.hasCorePSM.serviceDatabaseType = 'PostgreSQL')]
import java.sql.*;
[/if]
[if (anAnnotationStack.bHasAuthorizationLayer)]
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.core.ResourceAccessAttribute;
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.core.ResourceAccessCondition;
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.core.ResourceAccessPolicy;
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.core.ResourceAccessPolicySet;
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.core.ResourceAccessRule;
[/if]

/* This class follows the singleton pattern in order to build once and provide a unique hibernate session instance*/

public class HibernateUtil{

    private static final SessionFactory sessionFactory = buildSessionFactory();

    private static SessionFactory buildSessionFactory(){
        try {
		[if (anAnnotationStack.hasCorePSM.serviceDatabaseType = 'PostgreSQL')]
        //Since Hibernate cannot create PostgreSQL databases, utilize jdbc code to check if the database exist
        createDBIfDoesNotExist();
		[/if]
        /* Create the unique hibernate session. All resource models should be added here.*/
            return new AnnotationConfiguration().configure()
[for (jRModel : JavaResourceModel | anAnnotationStack.hasCorePSM.hasJavaRModel)]
					.addAnnotatedClass([jRModel.name/].class)
[/for]
[if (anAnnotationStack.bHasAuthorizationLayer)]
					.addAnnotatedClass(ResourceAccessPolicySet.class)
					.addAnnotatedClass(ResourceAccessPolicy.class)
					.addAnnotatedClass(ResourceAccessRule.class)
					.addAnnotatedClass(ResourceAccessCondition.class)
					.addAnnotatedClass(ResourceAccessAttribute.class)
[/if]
                    .buildSessionFactory();
        }
        catch (Throwable ex){
            System.err.println("Initial SessionFactory creation failed." + ex);
            throw new ExceptionInInitializerError(ex);
        }
    }

    public static SessionFactory getSessionFactory(){
        return sessionFactory;
    }

	[if (anAnnotationStack.hasCorePSM.serviceDatabaseType = 'PostgreSQL')]
    private static void createDBIfDoesNotExist(){
        String strJDBCDRIVER = "org.postgresql.Driver";
        String strDatabaseURL = "jdbc:postgresql://[anAnnotationStack.hasCorePSM.serviceDatabaseIP/]:[anAnnotationStack.hasCorePSM.serviceDatabasePort/]/postgres";
        String strUserName  = "[anAnnotationStack.hasCorePSM.serviceDatabaseUsername/]";
        String strPassword  = "[anAnnotationStack.hasCorePSM.serviceDatabasePassword/]";
        
        Connection oConnection = null;
        Statement oStatement = null;
        
        try{
            //register the jdbc driver
            Class.forName(strJDBCDRIVER);
            
            //connect to database
            oConnection = DriverManager.getConnection(strDatabaseURL, strUserName, strPassword);
            
            //initializae the database creating statement
            oStatement = oConnection.createStatement();
            String strCheckIfDatabaseExistsQuery = String.format("select datname FROM pg_database WHERE datname = '%s';", "[anAnnotationStack.hasCorePSM.name.toLowerCase()/]");
            
            //execute query
            ResultSet oResultSet = oStatement.executeQuery(strCheckIfDatabaseExistsQuery);
            if(oResultSet.next() == false){
                System.out.println("The database does not exist!");
                String strCreateDatabaseQuery = String.format("create database %s;" , "[anAnnotationStack.hasCorePSM.name.toLowerCase()/]");
                oResultSet = oStatement.executeQuery(strCreateDatabaseQuery);
            }
            else{
                System.out.println("The database already exists!");
            }
        }
        catch(SQLException SQLe){
            SQLe.printStackTrace();
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
        finally{
            try{
                if(oStatement != null){
                    oConnection.close();
                }
            }
            catch(SQLException SQLe){
                SQLe.printStackTrace();
            }
        }
    }
	[/if]
}
[/file]
[/template]
