[comment encoding = UTF-8 /]
[module deleteResourceHandlerNoParents('platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/AnnotationLayerStack.ecore', 'platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/AuthorizationPSMMetamodel.ecore', 'platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/AuthenticationPSMMetamodel.ecore', 'platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/PSMMetamodel.ecore')]

[template public deleteResourceHandlerNoParents(anAnnotationStack : AnnotationStack, httpVerb : HTTPVerb, jRC : JavaResourceController)]
[file (anAnnotationStack.hasCorePSM.name + '/src/main/java/eu/fp7/scase/' + anAnnotationStack.hasCorePSM.name.toLowerCase() + '/' + jRC.parentName.toLowerCase() + '/' + 'Delete'  + jRC.parentName + 'Handler.java', false, 'UTF-8')]
/*
 * ARISTOTLE UNIVERSITY OF THESSALONIKI
 * Copyright (C) 2015
 * Aristotle University of Thessaloniki
 * Department of Electrical & Computer Engineering
 * Division of Electronics & Computer Engineering
 * Intelligent Systems & Software Engineering Lab
 *
 * Project             : [anAnnotationStack.hasCorePSM.name/]
 * WorkFile            : 
 * Compiler            : 
 * File Description    : 
 * Document Description: 
* Related Documents	   : 
* Note				   : 
* Programmer		   : RESTful MDE Engine created by Christoforos Zolotas
* Contact			   : christopherzolotas@issel.ee.auth.gr
*/


package eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].[jRC.parentName.toLowerCase()/];


import javax.ws.rs.core.UriInfo;
[if (anAnnotationStack.bHasAuthenticationAnnotation)]
[if (anAnnotationStack.hasGuestMode(jRC.parentName) = false)]
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;
import com.sun.jersey.core.util.Base64;
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName.toLowerCase()/].[anAnnotationStack.getAuthenticationPerformer().authenticationModelName/];
[/if]
[/if]

[if (anAnnotationStack.bHasAuthorizationLayer and anAnnotationStack.isParentAuhtorizableResource(jRC))]		
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.core.AzPDP;
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.core.AzRequest;
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.enums.Action;
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.enums.AuthorizationResultCode;
[/if]

import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.HypermediaLink;
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.HibernateController;


/* This class processes DELETE requests for [jRC.parentName/] resources and creates the hypermedia to be returned to the client*/
public class Delete[jRC.parentName/]Handler{

    private HibernateController oHibernateController;
    private UriInfo oApplicationUri; //Standard datatype that holds information on the URI info of this request
	private String strResourcePath; //relative path to the current resource
    private [jRC.hasAssociatedJavaRModel.name/] o[jRC.hasAssociatedJavaRModel.name/];
	[if (anAnnotationStack.bHasAuthenticationAnnotation)]
	[if (anAnnotationStack.hasGuestMode(jRC.parentName) = false)]
	private String authHeader;
	private [anAnnotationStack.getAuthenticationPerformer().authenticationModelName/] oAuthentication[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName.toUpperFirst()/];
	private Boolean bIsClientAuthenticated = false; 
	[/if]
	[/if]
	[if (anAnnotationStack.bHasAuthorizationLayer and anAnnotationStack.isParentAuhtorizableResource(jRC))]
	private AzPDP pdp;
	[/if]

    public Delete[jRC.parentName/]Handler([if (anAnnotationStack.bHasAuthenticationAnnotation)][if (anAnnotationStack.hasGuestMode(jRC.parentName) = false)]String authHeader, [/if][/if]int [jRC.parentName/]Id, UriInfo oApplicationUri){
        o[jRC.hasAssociatedJavaRModel.name/] = new [jRC.hasAssociatedJavaRModel.name/]();
        o[jRC.hasAssociatedJavaRModel.name/].set[jRC.parentName/]Id([jRC.parentName/]Id);
        this.oHibernateController = HibernateController.getHibernateControllerHandle();
        this.oApplicationUri = oApplicationUri;
		this.strResourcePath = calculateProperResourcePath();
		[if (anAnnotationStack.bHasAuthenticationAnnotation)]
		[if (anAnnotationStack.hasGuestMode( jRC.parentName) = false)]
		this.authHeader = authHeader;
		this.oAuthentication[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName.toUpperFirst()/] = new [anAnnotationStack.getAuthenticationPerformer().authenticationModelName/]();
		[/if] 
		[/if]
		[if (anAnnotationStack.bHasAuthorizationLayer and anAnnotationStack.isParentAuhtorizableResource(jRC))]
		this.pdp = new AzPDP();
		[/if]
    }

	public String calculateProperResourcePath(){
    	if(this.oApplicationUri.getPath().lastIndexOf('/') == this.oApplicationUri.getPath().length() - 1){
        	return this.oApplicationUri.getPath().substring(0, this.oApplicationUri.getPath().length() - 1);
    	}
    	else{
        	return this.oApplicationUri.getPath();
    	}
	}

    public [jRC.hasAssociatedJavaRModel.name/] delete[jRC.hasAssociatedJavaRModel.name/](){

		[if (anAnnotationStack.bHasAuthenticationAnnotation)]
		[if (anAnnotationStack.hasGuestMode(jRC.parentName) = false)]
    	//check if there is a non null authentication header
    	if(authHeader == null){
    		throw new WebApplicationException(Response.Status.FORBIDDEN);
    	}
		[if (anAnnotationStack.hasBothModeAuthentication(jRC.parentName))]
		else if(authHeader.equalsIgnoreCase("guest")){ //if guest and authentication mode are allowed, check if the request originates from a guest user
		[if (anAnnotationStack.bHasAuthorizationLayer and anAnnotationStack.isParentAuhtorizableResource(jRC))]
	    	if (pdp.getPermission("[jRC.hasAssociatedJavaRModel.parentName/]", Integer.toString(o[jRC.hasAssociatedJavaRModel.name/].get[jRC.parentName/]Id()), null, Action.[httpVerb/])
					.equals(AuthorizationResultCode.PERMIT)){
	        	return createHypermedia(oHibernateController.delete[jRC.parentName/](o[jRC.hasAssociatedJavaRModel.name/]));
	    	}else{
	    		throw new WebApplicationException(Response.Status.UNAUTHORIZED);
	    	}			
			[else]
			return createHypermedia(oHibernateController.delete[jRC.parentName/](o[jRC.hasAssociatedJavaRModel.name/]));
			[/if]
		}
		[/if]
		else{
	    	//decode the auth header
    		decodeAuthorizationHeader();

        	//authenticate the user against the database
        	oAuthentication[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName.toUpperFirst()/] = oHibernateController.authenticateUser(oAuthentication[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName.toUpperFirst()/]);

			//check if the authentication failed
			if(oAuthentication[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName.toUpperFirst()/] == null){
        		throw new WebApplicationException(Response.Status.UNAUTHORIZED);
        	}
			else{
				this.bIsClientAuthenticated = true;
			}
		}
		[/if] 
		[/if]

		[if (anAnnotationStack.bHasAuthorizationLayer and anAnnotationStack.isParentAuhtorizableResource(jRC))]
		[if (anAnnotationStack.hasGuestMode(jRC.parentName) = false)]	
		if (pdp.getPermission(oAuthentication[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName.toUpperFirst()/], "[jRC.hasAssociatedJavaRModel.parentName/]", Integer.toString(o[jRC.hasAssociatedJavaRModel.name/].get[jRC.parentName/]Id()), null, Action.[httpVerb/])
				.equals(AuthorizationResultCode.PERMIT)){
        	return createHypermedia(oHibernateController.delete[jRC.parentName/](o[jRC.hasAssociatedJavaRModel.name/]));
    	}else{
    		throw new WebApplicationException(Response.Status.UNAUTHORIZED);
    	}		
		[else]
		if (pdp.getPermission("[jRC.hasAssociatedJavaRModel.parentName/]", Integer.toString(o[jRC.hasAssociatedJavaRModel.name/].get[jRC.parentName/]Id()), null, Action.[httpVerb/])
				.equals(AuthorizationResultCode.PERMIT)){
        	return createHypermedia(oHibernateController.delete[jRC.parentName/](o[jRC.hasAssociatedJavaRModel.name/]));
    	}else{
    		throw new WebApplicationException(Response.Status.UNAUTHORIZED);
    	}	
		[/if]    	
		[else]
		return createHypermedia(oHibernateController.delete[jRC.parentName/](o[jRC.hasAssociatedJavaRModel.name/]));
		[/if]
    }

	[if (anAnnotationStack.bHasAuthenticationAnnotation)]
	[if (anAnnotationStack.hasGuestMode(jRC.parentName) = false)]
	/* This function performs the decoding of the authentication header */
    public void decodeAuthorizationHeader()
    {
    	//check if this request has basic authentication
    	if( !authHeader.contains("Basic "))
    	{
    		throw new WebApplicationException(Response.Status.BAD_REQUEST);
    	}
    	
        authHeader = authHeader.substring("Basic ".length());
        String['['/][']'/] decodedHeader;
        decodedHeader = Base64.base64Decode(authHeader).split(":");
        
        if( decodedHeader == null)
        {
        	throw new WebApplicationException(Response.Status.BAD_REQUEST);
        }
        
        oAuthentication[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName.toUpperFirst()/].set[anAnnotationStack.getUsernameToken().name/](decodedHeader['['/]0[']'/]);
        oAuthentication[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName.toUpperFirst()/].set[anAnnotationStack.getPasswordToken().name/](decodedHeader['['/]1[']'/]);
    }
	[/if]
	[/if]

    /* This function produces hypermedia links to be sent to the client so as it will be able to forward the application state in a valid way.*/
    public [jRC.hasAssociatedJavaRModel.name/] createHypermedia([jRC.hasAssociatedJavaRModel.name/] o[jRC.hasAssociatedJavaRModel.name/]){

	[if (anAnnotationStack.bHasAuthenticationAnnotation)]
		[if (anAnnotationStack.hasAuthenticationOnlyMode(jRC.parentName))]
			[if (anAnnotationStack.bHasAuthorizationLayer and anAnnotationStack.isParentAuhtorizableResource(jRC))]
		[anAnnotationStack.createHypermediaABACChecks(httpVerb, jRC)/]
			[else]
		[anAnnotationStack.createHypermediaNoChecks(httpVerb, jRC)/]
			[/if]
		[else]
			[if (anAnnotationStack.bHasAuthorizationLayer and anAnnotationStack.isParentAuhtorizableResource(jRC))]
		if (this.bIsClientAuthenticated == true){ //if the user is authenticated apply ABAC checks
		[anAnnotationStack.createHypermediaABACChecks(httpVerb, jRC)/]
		}
		else{ //otherwise apply first Basic Authentication checks and then ABAC
		[anAnnotationStack.createHypermediaBasicAuthThenABACChecks(httpVerb, jRC)/]
		}
			[else]
		if (this.bIsClientAuthenticated == true){ //if the user is authenticated provide all the hypermedia links
		[anAnnotationStack.createHypermediaNoChecks(httpVerb, jRC)/]
		}
		else{ //otherwise provide only hypermedia links accessible by guests
		[anAnnotationStack.createHypermediaBasicAuthChecks(httpVerb, jRC)/]
		}
			[/if]
		[/if]
	[else]
		[anAnnotationStack.createHypermediaNoChecks(httpVerb, jRC)/]
	[/if]

    	return o[jRC.hasAssociatedJavaRModel.name/];
	}
}
[/file]
[/template]

[template public createHypermediaNoChecks(anAnnotationStack : AnnotationStack, httpVerb : HTTPVerb, jRC : JavaResourceController)]
    /* Since both this resource and the related of it are deleted, there are created hypermedia links only towards the resources of which this one is related.*/
    	int iLastSlashIndex = String.format("%s%s", oApplicationUri.getBaseUri(), this.strResourcePath).lastIndexOf("/");
    	o[jRC.hasAssociatedJavaRModel.name/].getlinklist().add(new HypermediaLink(String.format("%s%s", oApplicationUri.getBaseUri(), String.format("%s", this.strResourcePath)).substring(0, iLastSlashIndex), "Create a new [jRC.parentName/]", "POST", "Parent"));
    	o[jRC.hasAssociatedJavaRModel.name/].getlinklist().add(new HypermediaLink(String.format("%s%s", oApplicationUri.getBaseUri(), String.format("%s", this.strResourcePath)).substring(0, iLastSlashIndex), "Get all [jRC.parentName/]", "GET", "Parent"));
[/template]

[template public createHypermediaBasicAuthChecks(anAnnotationStack : AnnotationStack, httpVerb : HTTPVerb, jRC : JavaResourceController)]
    /* Since both this resource and the related of it are deleted, there are created hypermedia links only towards the resources of which this one is related.*/
    	int iLastSlashIndex = String.format("%s%s", oApplicationUri.getBaseUri(), this.strResourcePath).lastIndexOf("/");
 		[if (anAnnotationStack.hasAuthenticationOnlyModeCRUDVerbActivity(jRC.parentName, 'Post') = false)]
	   	o[jRC.hasAssociatedJavaRModel.name/].getlinklist().add(new HypermediaLink(String.format("%s%s", oApplicationUri.getBaseUri(), String.format("%s", this.strResourcePath)).substring(0, iLastSlashIndex), "Create a new [jRC.parentName/]", "POST", "Parent"));
		[/if]
		[if (anAnnotationStack.hasAuthenticationOnlyModeCRUDVerbActivity(jRC.parentName, 'Get') = false)]
    	o[jRC.hasAssociatedJavaRModel.name/].getlinklist().add(new HypermediaLink(String.format("%s%s", oApplicationUri.getBaseUri(), String.format("%s", this.strResourcePath)).substring(0, iLastSlashIndex), "Get all [jRC.parentName/]", "GET", "Parent"));
		[/if]
[/template]

[template public createHypermediaABACChecks(anAnnotationStack : AnnotationStack, httpVerb : HTTPVerb, jRC : JavaResourceController)]
    /* Since both this resource and the related of it are deleted, there are created hypermedia links only towards the resources of which this one is related.*/
    	int iLastSlashIndex = String.format("%s%s", oApplicationUri.getBaseUri(), this.strResourcePath).lastIndexOf("/");
	   
		if (pdp.getPermission(oAuthentication[anAnnotationStack.getAuthenticationPerformer().authenticationModelParentName.toUpperFirst()/], "[jRC.hasAssociatedJavaRModel.parentName/]", "[jRC.parentName/]", null, null, Action.POST).equals(AuthorizationResultCode.PERMIT)){
    		o[jRC.hasAssociatedJavaRModel.name/].getlinklist().add(new HypermediaLink(String.format("%s%s", oApplicationUri.getBaseUri(), String.format("%s", this.strResourcePath)).substring(0, iLastSlashIndex), "Create a new [jRC.parentName/]", "POST", "Parent"));
		}
    	o[jRC.hasAssociatedJavaRModel.name/].getlinklist().add(new HypermediaLink(String.format("%s%s", oApplicationUri.getBaseUri(), String.format("%s", this.strResourcePath)).substring(0, iLastSlashIndex), "Get all [jRC.parentName/]", "GET", "Parent"));
[/template]

[template public createHypermediaBasicAuthThenABACChecks(anAnnotationStack : AnnotationStack, httpVerb : HTTPVerb, jRC : JavaResourceController)]
    /* Since both this resource and the related of it are deleted, there are created hypermedia links only towards the resources of which this one is related.*/
    	int iLastSlashIndex = String.format("%s%s", oApplicationUri.getBaseUri(), this.strResourcePath).lastIndexOf("/");

		[if (anAnnotationStack.hasAuthenticationOnlyModeCRUDVerbActivity(jRC.parentName, 'Post') = false)]
        if (pdp.getPermission("[jRC.hasAssociatedJavaRModel.parentName/]", null, null, Action.POST).equals(AuthorizationResultCode.PERMIT)){
    		o[jRC.hasAssociatedJavaRModel.name/].getlinklist().add(new HypermediaLink(String.format("%s%s", oApplicationUri.getBaseUri(), String.format("%s", this.strResourcePath)).substring(0, iLastSlashIndex), "Create a new [jRC.parentName/]", "POST", "Parent"));
		}
		[/if]
		[if (anAnnotationStack.hasAuthenticationOnlyModeCRUDVerbActivity(jRC.parentName, 'Get') = false)]
    	o[jRC.hasAssociatedJavaRModel.name/].getlinklist().add(new HypermediaLink(String.format("%s%s", oApplicationUri.getBaseUri(), String.format("%s", this.strResourcePath)).substring(0, iLastSlashIndex), "Get all [jRC.parentName/]", "GET", "Parent"));
		[/if]
[/template]

[query private hasBothModeAuthentication(anAnnotationStack : AnnotationStack, resourceName : String) : Boolean =
	getAuthenticationLayerBothModeAnnotations(anAnnotationStack)->exists(bothModeAnnotation | bothModeAnnotation.HTTPActivityHandlerHasAuthenticationMode->exists(annHTTPActivityHandler | annHTTPActivityHandler.annotatesHTTPActivityHandler.name = 'Delete' + resourceName + 'Handler'))
/]

[query private getAuthenticationLayerBothModeAnnotations(anAnnotationStack : AnnotationStack) : Sequence(BothMode) =
	anAnnotationStack.hasAuthenticationLayer.hasAnnotation->select( annotation | annotation.oclIsTypeOf(BothMode))->asSequence()
/]

[query private hasAuthenticationOnlyMode(anAnnotationStack : AnnotationStack, resourceName : String) : Boolean =
	getAuthenticationLayerAuthenticationOnlyModeAnnotations(anAnnotationStack)->exists(authenticationOnlyMode | authenticationOnlyMode.HTTPActivityHandlerHasAuthenticationMode->exists(annHTTPActivityHandler | annHTTPActivityHandler.annotatesHTTPActivityHandler.name = 'Delete' + resourceName + 'Handler'))
/]

[query private getAuthenticationLayerAuthenticationOnlyModeAnnotations(anAnnotationStack : AnnotationStack) : Sequence(AuthenticationOnlyMode) =
	anAnnotationStack.hasAuthenticationLayer.hasAnnotation->select( annotation | annotation.oclIsTypeOf(AuthenticationOnlyMode))->asSequence()
/]

[query private hasGuestMode(anAnnotationStack : AnnotationStack, resourceName : String) : Boolean =
	getAuthenticationLayerGuestModeAnnotations(anAnnotationStack)->exists(guestMode | guestMode.HTTPActivityHandlerHasAuthenticationMode->exists(annHTTPActivityHandler | annHTTPActivityHandler.annotatesHTTPActivityHandler.name = 'Delete' + resourceName + 'Handler'))
/]

[query private getAuthenticationLayerGuestModeAnnotations(anAnnotationStack : AnnotationStack) : Sequence(GuestMode) =
	anAnnotationStack.hasAuthenticationLayer.hasAnnotation->select( annotation | annotation.oclIsTypeOf(GuestMode))->asSequence()
/]

[query private getAuthenticationPerformer(anAnnotationStack : AnnotationStack) : AuthenticationPerformer =
	anAnnotationStack.hasAuthenticationLayer.hasAnnotation->select(annotation | annotation.oclIsTypeOf(AuthenticationPerformer))->at(1)
/]

[query private getPasswordToken(anAnnotationStack : AnnotationStack) : Password =
	anAnnotationStack.getAuthenticationPerformer().hasAuthenticationToken->select(authenticationToken | authenticationToken.oclIsTypeOf(Password))->at(1)
/]

[query private getUsernameToken(anAnnotationStack : AnnotationStack) : AuthenticationToken =
	anAnnotationStack.getAuthenticationPerformer().hasAuthenticationToken->select(authenticationToken | authenticationToken.oclIsTypeOf(Password) = false)->at(1)
/]

[query private isParentAuhtorizableResource(anAnnotationStack : AnnotationStack, jRC : JavaResourceController) : Boolean =
	anAnnotationStack.hasAuthorizationLayer.hasAnnotation->selectByType(AuthorizableResource)->select(authResource | not authResource.isAuthorizableResourceModel.oclIsUndefined())->one(authResource | authResource.isAuthorizableResourceModel.annotatesJavaResourceModel = jRC.hasAssociatedJavaRModel)
/]

[query private hasAuthenticationOnlyModeCRUDVerbActivity(anAnnotationStack : AnnotationStack, resourceName : String, httpVerb : String) : Boolean =
	getAuthenticationLayerAuthenticationOnlyModeAnnotations(anAnnotationStack)->exists(authenticationOnlyMode | authenticationOnlyMode.HTTPActivityHandlerHasAuthenticationMode->exists(annHTTPActivityHandler | annHTTPActivityHandler.annotatesHTTPActivityHandler.name = httpVerb + resourceName + 'Handler'))
/]
