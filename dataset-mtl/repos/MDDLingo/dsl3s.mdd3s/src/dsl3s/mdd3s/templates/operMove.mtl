[comment encoding = UTF-8 /]
[module operMove('http://www.eclipse.org/uml2/5.0.0/UML')]
[import dsl3s::mdd3s::templates::services/]

[comment
Date: 17-08-2012    Author: Lu√≠s de Sousa
Generates the Move function to be included in the Animat class.
/]

[template public operMove(c : Class) ? (c.hasStereotype('Animat'))]
	
 	protected Geometry createScopeGeometry(Double scope)
 	{
 		GeometricShapeFactory shapeFactory = new GeometricShapeFactory();
		shapeFactory.setCentre(this.location);
		shapeFactory.setWidth(2 * scope);
		shapeFactory.setHeight(2 * scope);
		return shapeFactory.createCircle();
 	}

 	protected HashMap<Geometry,Double> intersectFeaturesInScope(HashMap<Geometry,Double> nextMap)
 	{
 		HashMap<Geometry,Double> origMap = new HashMap<Geometry,Double>();
		HashMap<Geometry,Double> finalMap = new HashMap<Geometry,Double>();
		
		while(nextMap.size() > 0)
		{
			origMap = nextMap;
			nextMap = new HashMap<Geometry,Double>();	
			// 1. Pop a feature from the first hash map
			Geometry thisFeature = (Geometry) origMap.keySet().toArray()['['/]0[']'/];
			Double thisValue = (Double) origMap.remove(thisFeature);
			// 2. Loop over the remainder of the first hash map 
			while(origMap.size() > 0)
			{
				// 3. Pop another feature and intersect
				Geometry secondFeature = (Geometry) origMap.keySet().toArray()['['/]0[']'/];
				Double secondValue = (Double) origMap.remove(secondFeature);
				Geometry intersection = thisFeature.intersection(secondFeature);
				// 4. If intersection is void push second feature to second hash map and continue
				if ((intersection.isEmpty()) ||
				    (intersection.getArea() <= 0 && thisFeature.getArea() > 0 && secondFeature.getArea() > 0))
					nextMap.put(secondFeature, secondValue);
					
	 			else
				{
					// 5. Push differences with original values to second hash map and continue
					Geometry secondDiff = secondFeature.difference(thisFeature);
					if(! secondDiff.isEmpty()) nextMap.put(secondDiff, secondValue);
	 				Geometry thisDiff = thisFeature.difference(secondFeature);
 	 				if (thisDiff.getDimension() <= intersection.getDimension())
 	 				{
						if(! thisDiff.isEmpty()) nextMap.put(thisDiff, thisValue);
						
						// 6. Sum values to intersect and discard original feature
						thisValue += secondValue;
						thisFeature = intersection;
					}
				}
			}
			finalMap.put(thisFeature, thisValue);
		}
		return finalMap;
 	}

[comment Iterate through linked Moves /]
[for (assM:Association | c.getAssociations())]
 [for (m:Element | assM.relatedElement) ]
 [let mClass: Class = m.oclAsType(Class)] 
  [if (mClass.isNotNull())]
   [if (mClass.hasStereotype('Move'))]
    [comment Iterate through linked Spatial /]
	[for (assSE:Association | mClass.getAssociations())]
  	 [for (se:Element | assSE.relatedElement) ]
     [let seClass: Class = se.oclAsType(Class)]
      [if (seClass.isNotNull())]
       [if (seClass.hasStereotype('Spatial'))]
 	protected void add[seClass.name/]InScope(HashMap<Geometry,Double> map, Bag neighbours)
 	{
 		Geometry scope = createScopeGeometry(scope[mClass.name/]);
 		for (Object obj : neighbours) 
 		{	
 			Geometry full_geom = (([seClass.name/]) obj).geometry;
 			Geometry geom = full_geom.intersection(scope);
  			if(! geom.isEmpty()) 
  			{
	 			Double current = map.get(geom);
	 			if(current == null) current = 0.0;
	 			current += weight[mClass.name/] * (([seClass.name/]) obj).getValue();
	 			map.put(geom, current);
			}
 		}
 	}

	   [/if]
	  [/if]
     [/let]
     [/for]	 
    [/for] [comment Attributes & Environements /]
   [/if]
  [/if]
 [/let]
 [/for]	 
[/for] [comment Moves /]

 [comment Get Simulation name /]
  [for (assS:Association | c.getAssociations())]
   [for (e:Element | assS.relatedElement) ]
	[let sim: Class = e.oclAsType(Class)]
	 [if (sim.isNotNull())]
	  [if (sim.hasStereotype('Simulation'))]
	public void move([sim.name/] sim) 
	{
 		Coordinate nextLoc = this.location;
 		Double best = Double.NEGATIVE_INFINITY;
		HashMap<Geometry,Double> map = new HashMap<Geometry,Double>();

	  [/if]
	 [/if]
    [/let]
   [/for]
  [/for]
[comment Iterate through linked Moves /]
[for (assM:Association | c.getAssociations())]
 [for (m:Element | assM.relatedElement) ]
 [let mClass: Class = m.oclAsType(Class)] 
  [if (mClass.isNotNull())]
   [if (mClass.hasStereotype('Move'))]
    [comment Iterate through linked Attributes & Environements /]
	[for (assSE:Association | mClass.getAssociations())]
  	 [for (se:Element | assSE.relatedElement) ]
     [let seClass: Class = se.oclAsType(Class)]
      [if (seClass.isNotNull())]
	   [comment If it is linked to a Attribute /]
       [if (seClass.hasStereotype('Attribute'))]
        [comment Iterate through linked Animats /]
        [for (assA:Association | seClass.getAssociations())]
  	     [for (a:Element | assA.relatedElement) ]
         [let aClass: Class = a.oclAsType(Class)]
          [if (aClass.isNotNull())]
           [if (aClass.hasStereotype('Animat'))]
		// Iterate [aClass.name/] neighbourhood
		Geometry scopeGeom[aClass.name/] = createScopeGeometry(scope[mClass.name/]);
		Bag neigh[aClass.name/] = sim.space[aClass.name/].getObjectsWithinDistance(this, scope[mClass.name/]);
		for (Object obj : neigh[aClass.name/]) 
		{
			Geometry full_geom = (([aClass.name/]) obj).geometry;
			Geometry geom = full_geom.intersection(scopeGeom[aClass.name/]);
  			if(! geom.isEmpty()) 
  			{
				Double current = map.get(geom);
				if(current == null) current = 0.0;
				current += weight[mClass.name/] * (([aClass.name/]) obj).attribute[seClass.name/].getValue();
				map.put(geom, current);
			}
		}

	       [/if]
	      [/if]
         [/let]
	     [/for]	 
	    [/for] [comment Animats /]
       [/if]
       [comment If it is linked to an Spatial Variable /]
       [if (seClass.hasStereotype('Spatial'))]
		add[seClass.name/]InScope(map, sim.space[seClass.name/].getObjectsWithinDistance(this, scope[mClass.name/]));
	   [/if]
	  [/if]
     [/let]
     [/for]	 
    [/for] [comment Attributes & Environements /]
   [/if]
  [/if]
 [/let]
 [/for]	 
[/for] [comment Moves /]

		map = intersectFeaturesInScope(map); 

 		List<Geometry> candidates = new ArrayList<Geometry>();
  		for(Geometry geom : map.keySet())
  		{
  			if(map.get(geom) > best)
			{
 				best = map.get(geom);
 				candidates.clear();
 				candidates.add(geom);
			}
  			else if(map.get(geom).equals(best))
  				candidates.add(geom);
  		}
 		if(candidates.size() > 0)
  			nextLoc = candidates.get(sim.random.nextInt(candidates.size())).getCentroid().getCoordinate();
 
 [if c.getTaggedValue(c, 'Animat', 'stop').isNotNull()]
 		// Stop if goal achieved
		if(best >= stopGoal) return;
 [/if]
 [if (c.getTaggedValue(c, 'Animat', 'wanderer') = 'true')]
		// Wander if nothing interesting around
		if((nextLoc.x == location.x) && (nextLoc.y == location.y))
		{
			nextLoc = new Coordinate(
				randMove(location.x, sim.random, sim.gridInterval),
				randMove(location.y, sim.random, sim.gridInterval));
		}
 [/if]

		sim.space[c.name/].setGeometryLocation(this, new PointMoveTo(nextLoc));
		location = nextLoc;
	}

[/template]