[comment encoding = UTF-8 /]
[module operEmerge('http://www.eclipse.org/uml2/5.0.0/UML')]
[import dsl3s::mdd3s::templates::services/]

[comment
Date: 22-09-2012    Author: Lu√≠s de Sousa
Generates the Emerge class for an Animat.
/]

[template public operEmerge(c : Class) ? (c.hasStereotype('Animat'))]

[if (c.hasLinkedStereotype('Emerge'))]
[file (c.name.concat('Emerge.java'), false, 'UTF-8')]
import sim.engine.SimState;
import sim.engine.Steppable;
import sim.engine.Stoppable;
import sim.util.Bag;
import sim.field.geo.GeomVectorField;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.Coordinate;

public class [c.name/]Emerge implements Steppable, Stoppable {
		
	private static GeometryFactory geomFactory = new GeometryFactory();

[comment Iterate through linked Emerge /]
[for (assE:Association | c.getAssociations())]
 [for (e:Element | assE.relatedElement) ]
 [let eClass: Class = e.oclAsType(Class)] 
  [if (eClass.isNotNull())]
   [if (eClass.hasStereotype('Emerge'))]
    [if (eClass.getTaggedValue(eClass, 'Emerge', 'probability').isNotNull())]
	private static Double prob[eClass.name/] = new Double([eClass.getTaggedValue(eClass, 'Emerge', 'probability')/]);
    [/if]
	[if (eClass.getTaggedValue(eClass, 'Emerge', 'upperThreshold').isNotNull())]
	private static Double upperThresh[eClass.name/] = new Double([eClass.getTaggedValue(eClass, 'Emerge', 'upperThreshold')/]);
	[/if]
	[if (eClass.getTaggedValue(eClass, 'Emerge', 'lowerThreshold').isNotNull())]
	private static Double lowerThresh[eClass.name/] = new Double([eClass.getTaggedValue(eClass, 'Emerge', 'lowerThreshold')/]);
	[/if]
	[if (eClass.getTaggedValue(eClass, 'Emerge', 'scope').isNotNull())]
	private static Double scope[eClass.name/] = new Double([eClass.getTaggedValue(eClass, 'Emerge', 'scope')/]);
	[/if]
   [/if]
  [/if]
 [/let]
 [/for]	 
[/for] [comment Emerge /]

	public [c.name/]Emerge() {}
	
	private Stoppable stopper = null;
    public void setStopper(Stoppable stopper) {this.stopper = stopper;}

	//@Override
	public void stop() 
    {
		// TODO Auto-generated method stub
		stopper.stop();
	}

	//@Override
	public void step(SimState state) 
	{
[comment Iterate through linked Simulation /]
[for (assE:Association | c.getAssociations())]
 [for (e:Element | assE.relatedElement) ]
 [let sClass: Class = e.oclAsType(Class)] 
  [if (sClass.isNotNull())]
   [if (sClass.hasStereotype('Simulation'))]
		[sClass.name/] sim = ([sClass.name/]) state;
   [/if]
  [/if]
 [/let]
 [/for]	 
[/for] [comment Simulation /]
		Coordinate coord = new Coordinate(0.0, 0.0);

		[comment Assumes a discretisation of space /]
		for(double x = sim.globalMBR.getMinX() + sim.widthInterval / 2; x < sim.globalMBR.getMaxX(); x += sim.widthInterval)
		for(double y = sim.globalMBR.getMinY() + sim.heightInterval / 2; y < sim.globalMBR.getMaxY(); y += sim.heightInterval) 
		{
[comment Iterate through linked Emerge /]
[for (assE:Association | c.getAssociations())]
 [for (e:Element | assE.relatedElement) ]
 [let eClass: Class = e.oclAsType(Class)] 
  [if (eClass.isNotNull())]
   [if (eClass.hasStereotype('Emerge'))]
			double weight[eClass.name/] = 0;
   [/if]
  [/if]
 [/let]
 [/for]	 
[/for] [comment Emerge /]
			coord.x = x;
			coord.y = y;
			Geometry point = geomFactory.createPoint(coord);

			if (!isOccupied(sim.space[c.name/], point, sim.gridIntervalOpen / 2)) 
			{
[comment Iterate through linked Emerges /]
[for (assE:Association | c.getAssociations())]
 [for (e:Element | assE.relatedElement) ]
 [let eClass: Class = e.oclAsType(Class)] 
  [if (eClass.isNotNull())]
   [if (eClass.hasStereotype('Emerge'))]
	[comment Iterate through linked Attributes/]
    [for (assS:Association | eClass.getAssociations())]
     [for (s:Element | assS.relatedElement) ]
     [let sClass: Class = s.oclAsType(Class)]
      [if (sClass.isNotNull())]
	   [comment Linked Attributes /]
       [if (sClass.hasStereotype('Attribute'))]
		[comment Iterate through linked Animats /]
    	[for (assA:Association | sClass.getAssociations())]
     	 [for (a:Element | assA.relatedElement) ]
     	 [let aClass: Class = a.oclAsType(Class)]
      	  [if (aClass.isNotNull())]
           [if (aClass.hasStereotype('Animat'))]
				Bag neigh[aClass.name/] = sim.space[aClass.name/].getObjectsWithinDistance(point, scope[eClass.name/]);
				for (Object obj : neigh[aClass.name/]) 
				{
			[if (eClass.getTaggedValue(eClass, 'Emerge', 'probability').isNotNull())]
					weight[eClass.name/] += 
						(((([aClass.name/]) obj).attribute[sClass.name/].getValue() - [aClass.name/].attribute[sClass.name/]Min + 0.0) /
						 ([aClass.name/].attribute[sClass.name/]Max - [aClass.name/].attribute[sClass.name/]Min + 0.0)) *
						prob[eClass.name/];
			[/if]
			[if (eClass.getTaggedValue(eClass, 'Emerge', 'upperThreshold').isNotNull())]
					weight[eClass.name/] += (([aClass.name/]) obj).attribute[sClass.name/].getValue();
			[/if]
				}
           [/if]
	      [/if]
	     [/let]
	     [/for]	 
	    [/for] [comment Animats /]
	   [/if] [comment Attributes /]
	   [comment Iterate through linked Spatials/]
	   [if (sClass.hasStereotype('Spatial'))]
				Bag neigh[sClass.name/] = sim.space[sClass.name/].getObjectsWithinDistance(point, scope[eClass.name/]);
				for (Object obj : neigh[sClass.name/]) 
				{
			[if (eClass.getTaggedValue(eClass, 'Emerge', 'probability').isNotNull())]
					weight[eClass.name/] += 
						(((([sClass.name/]) obj).getValue() - [sClass.name/].valueMin + 0.0) /
						 ([sClass.name/].valueMax - [sClass.name/].valueMin + 0.0)) *
						 prob[eClass.name/];
			[/if]
			[if (eClass.getTaggedValue(eClass, 'Emerge', 'upperThreshold').isNotNull())]
					weight[eClass.name/] += (([sClass.name/]) obj).getValue();
			[/if]
				}
       [/if]
	   [comment Iterate through linked Globals/]
	   [if (sClass.hasStereotype('Global'))]
		[if (eClass.getTaggedValue(eClass, 'Emerge', 'probability').isNotNull())]
				weight[eClass.name/] += 
					(sim.global[sClass.name/].getValue() + sim.global[sClass.name/].getMin() + 0.0) /
					(sim.global[sClass.name/].getMax() - sim.global[sClass.name/].getMin() + 0.0) *
					prob[eClass.name/];
		[/if]
		[if (eClass.getTaggedValue(eClass, 'Emerge', 'upperThreshold').isNotNull())]
				weight[eClass.name/] += sim.global[sClass.name/].getValue();
		[/if]
       [/if]
	  [/if]
	 [/let]
	 [/for]	 
	[/for] [comment Attributes /]

	[if (eClass.getTaggedValue(eClass, 'Emerge', 'upperThreshold').isNotNull())]
	 [if (eClass.getTaggedValue(eClass, 'Emerge', 'lowerThreshold').isNotNull())]
				if((weight[eClass.name/] <= upperThresh[eClass.name/]) &&
				   (weight[eClass.name/] >= lowerThresh[eClass.name/]) )
					weight[eClass.name/] = 101;
				else weight[eClass.name/] = -1;
	 [/if]
	[/if]

   [/if]
  [/if]
 [/let]
 [/for]	 
[/for] [comment Emerges /]		
				if(
[comment Iterate through linked Emerge /]
[for (assE:Association | c.getAssociations())]
 [for (e:Element | assE.relatedElement) ]
 [let eClass: Class = e.oclAsType(Class)] 
  [if (eClass.isNotNull())]
   [if (eClass.hasStereotype('Emerge'))]
	[if (eClass.getTaggedValue(eClass, 'Emerge', 'required') = 'true')]
				   (weight[eClass.name/] > 0) && 
    [/if]
   [/if]
  [/if]
 [/let]
 [/for]	 
[/for] [comment Emerge /]	
				   ((
[comment Iterate through linked Emerge /]
[for (assE:Association | c.getAssociations())]
 [for (e:Element | assE.relatedElement) ]
 [let eClass: Class = e.oclAsType(Class)] 
  [if (eClass.isNotNull())]
   [if (eClass.hasStereotype('Emerge'))]
				  	 weight[eClass.name/] + 
   [/if]
  [/if]
 [/let]
 [/for]	 
[/for] [comment Emerge /]	
				  	 0) > sim.random.nextInt(101)))			
					sim.create[c.name/](x, y);
			}	
		}
	}

	protected Boolean isOccupied(GeomVectorField space, Geometry point, Double dist)  
	{
		Bag local = space.getObjectsWithinDistance(point, dist);
		if (local.numObjs > 0) return true;
		return false;
	}	
}
[/file]
[/if]
[/template]