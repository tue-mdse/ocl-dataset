[comment encoding = UTF-8 /]
[module simGUI('http://www.eclipse.org/uml2/5.0.0/UML')]
[import dsl3s::mdd3s::templates::services/]

[comment
Date: 09-09-2012    Author: Lu√≠s de Sousa  (luis.a.de.sousa@gmail.com)
Generates a GUI class for the simulation, inheriting from GUIState.
/]


[template public sim_gui(c : Class) ? (c.hasStereotype('Simulation'))]

[file (c.name.concat('GUI.java'), false, 'UTF-8')]
import java.awt.Color;

import javax.swing.JFrame;

import sim.display.Console;
import sim.display.Controller;
import sim.display.Display2D;
import sim.display.GUIState;
import sim.engine.SimState;
import sim.portrayal.Inspector;
import sim.portrayal.geo.GeomVectorFieldPortrayal;


public class [c.name /]GUI extends GUIState {

	public Display2D display;
	public JFrame displayFrame;

[for (assA:Association | c.getAssociations())]
 [for (a:Element | assA.relatedElement) ]
  [let aClass: Class = a.oclAsType(Class)] 
  [if (aClass.isNotNull())]
   [if (aClass.hasStereotype('Animat'))]
	GeomVectorFieldPortrayal portrayal[aClass.name/] = new GeomVectorFieldPortrayal();
   [/if]
   [if (aClass.hasStereotype('Spatial'))]
	GeomVectorFieldPortrayal portrayal[aClass.name/] = new GeomVectorFieldPortrayal();
   [/if]
  [/if]
  [/let]
 [/for]	 
[/for]
		
	protected [c.name/]GUI() { super(new [c.name/](System.currentTimeMillis()));}
	protected [c.name/]GUI(SimState state) {super(state);	}
	
	public static String getName() { return "[c.getTaggedValue(c, 'Simulation', 'simulName')/];"; }
	public Object getSimulationInspectedObject() { return state; }
	
	public Inspector getInspector()
	{
		Inspector i = super.getInspector();
		i.setVolatile(true);
		return i;
	}
	
	@SuppressWarnings("deprecation")
	public void start()
	{
		super.start();
		setupPortrayals();	
	}
	
	public void load(SimState state)
	{
		super.load(state);
		setupPortrayals();
	}
	
	public void setupPortrayals()
	{
		[c.name/] sim = ([c.name/]) state;
		
[comment Iterate through Animats and Spatials /]
[for (ass:Association | c.getAssociations())]
  [for (a:Element | ass.relatedElement) ]
   [let aClass: Class = a.oclAsType(Class)]
	[if (aClass.hasStereotype('Spatial'))]
		portrayal[aClass.name/].setField(sim.space[aClass.name/]);
		portrayal[aClass.name/].setPortrayalForAll(new [aClass.name/]Portrayal());

	[/if]
    [if (aClass.hasStereotype('Animat'))]
		portrayal[aClass.name/].setField(sim.space[aClass.name/]);
		portrayal[aClass.name/].setPortrayalForAll(new [aClass.name/]Portrayal(sim.getDisplayFactor()));

	[/if]
  [/let]
 [/for]	 
[/for]


		// reschedule the displayer
		display.reset();
		display.setBackdrop(new Color(128,128,128));
		
		// redraw the display
		display.repaint();
	}
	
	@SuppressWarnings("deprecation")
	public void init(Controller c)
	{
		super.init(c);

		[c.name/] sim = ([c.name/]) state;

		display = new Display2D(sim.getDisplayWidth(), sim.getDisplayHeight(), this, afterSize);
		display.setClipping(false);
		
		displayFrame = display.createFrame();
		displayFrame.setTitle("[c.name /]");
		c.registerFrame(displayFrame);
		
		// so the frame appears in the "Display" list
		displayFrame.setVisible(true);
[comment Iterate through Spatials /]
[for (ass:Association | c.getAssociations())]
  [for (a:Element | ass.relatedElement) ]
   [let aClass: Class = a.oclAsType(Class)]
	[if (aClass.hasStereotype('Spatial'))]
		display.attach(portrayal[aClass.name/], "[aClass.name/]");
	[/if]
  [/let]
 [/for]	 
[/for]	
[comment Iterate through Animats /]
[for (ass:Association | c.getAssociations())]
  [for (a:Element | ass.relatedElement) ]
   [let aClass: Class = a.oclAsType(Class)]
    [if (aClass.hasStereotype('Animat'))]
		display.attach(portrayal[aClass.name/], "[aClass.name/]");
	[/if]
  [/let]
 [/for]	 
[/for]	
	}
	
	public void quit()
	{
		super.quit();
		if (displayFrame!=null) displayFrame.dispose();
		displayFrame = null;
		display = null;
	}

	public static void main(String['[]'/] args)
    {
		[c.name/]GUI vid = new [c.name/]GUI();
		Console c = new Console(vid);
		c.setVisible(true);
	}

}
[/file]
[/template]

