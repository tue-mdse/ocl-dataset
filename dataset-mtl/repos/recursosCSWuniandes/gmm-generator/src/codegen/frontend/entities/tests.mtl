[comment encoding = UTF-8 /]
[module tests('http://www.eclipse.org/uml2/5.0.0/UML')]
[import ::utils /]

[template public mainE2E(m : Model, path : String)]
[m.genE2EConf(path)/]
[for (c : Class | m.getRootClasses())]
    [c.genE2ETests(path.concat('specs/'))/]
[/for]
[/template]

[template protected genE2EConf(m : Model, path : String)]
[file (path.concat('e2e.conf.js'), false, 'UTF-8')]
/*
[m.license()/]
*/
exports.config = {
    allScriptsTimeout: 11000,
    specs: ['['/]
        'e2e/specs/*.js'
    ],
    capabilities: {
        'browserName': 'firefox'
    },
    directConnect: true,
    baseUrl: 'http://localhost:9001/',
    framework: 'jasmine2',
    jasmineNodeOpts: {
        showColors: true,
        defaultTimeoutInterval: 30000
    },
    onPrepare: function(){
        browser.driver.manage().window().maximize();
    }
};
[/file]
[/template]

[template protected genE2ETests(c : Class, path : String)]
[file (path.concat(c.getName() + '.specs.js'), false, 'UTF-8')]
/*
[c.getModel().license()/]
*/
describe('[c.name/] E2E Testing', function () {

	[for (a : Property | c.getAllAttribs())]
	[if(a.type.name = 'String')]
	var [a.name.toLower()/]VarTest = 'Val' + Math.floor(Math.random() * 10000);
	[/if]
	[if(a.type.name = 'Long' or a.type.name = 'Integer')]
	var [a.name.toLower()/]VarTest = Math.floor(Math.random() * 10000).toString();
	[/if]
	[/for]

    beforeEach(function () {
        browser.addMockModule('ngCrudMock', function () {
            var mod = angular.module('ngCrudMock');

            mod.run(['['/]'ngCrudMock.mockRecords', function(records){
                records['['/]'[c.getURI()/]'] = ['[]'/];

                [for (a : Property | c.getReferences(false)) separator('\n')]
                records['['/]'[a.getClass().getURI()/]'] = ['[]'/];
                records['['/]'[a.getClass().getURI()/]'].push({id: Math.floor(Math.random() * 10000), name: '[a.name/]'});
                [/for]
            }]);
        });
    });

    it('should create one [c.getName()/]', function () {
        browser.get('#/[c.getName()/]');
        element(by.id('create-[c.getName()/]')).click();
        [for (a : Property | c.getAllAttribs())]
		[if(a.type.name = 'String')]
        element(by.id('[a.name/]')).sendKeys([a.name.toLower()/]VarTest);
		[/if]
		[if(a.isDate())]
		[/if]
		[if (a.type.name = 'Boolean')]
		element(by.id('[a.name/]')).click();
		[/if]
		[if (a.type.name = 'Integer' or a.type.name = 'Long')]
		element(by.id('[a.name/]')).sendKeys([a.name.toLower()/]VarTest);
		[/if]
        [/for]
        [for (a : Property | c.getReferences(false))]
        element(by.id('[a.name/]')).all(by.css('option')).last().click();
        [/for]
        element(by.id('save-[c.getName()/]')).click();
        expect(element.all(by.repeater('record in records')).count()).toEqual(1);
    });

    it('should read one [c.getName()/]', function () {
        [for (a : Property | c.getAllAttribs())]
		[if(a.type.name = 'String')]
        expect(element(by.id('0-[a.name/]')).getText()).toBe([a.name.toLower()/]VarTest);
		[/if]
		[if(a.isDate())]
		[/if]
		[if (a.type.name = 'Boolean')]
		expect(element(by.id('0-[a.name/]')).element(by.tagName('span')).getAttribute('class')).toBe('glyphicon ng-scope glyphicon-check');
		[/if]
		[if (a.type.name = 'Integer' or a.type.name = 'Long')]
		expect(element(by.id('0-[a.name/]')).getText()).toBe([a.name.toLower()/]VarTest);
		[/if]
        [/for]
    });

    it('should edit one [c.getName()/]', function () {
        element(by.id('0-edit-btn')).click();

        [for (a : Property | c.getAllAttribs())]
		[if(a.type.name = 'String')]
        element(by.id('[a.name/]')).clear().sendKeys('New' + [a.name.toLower()/]VarTest);
		[/if]
		[if(a.isDate())]
		[/if]
		[if (a.type.name = 'Boolean')]
		element(by.id('[a.name/]')).click();
		[/if]
		[if (a.type.name = 'Integer' or a.type.name = 'Long')]
		element(by.id('[a.name/]')).clear().sendKeys([a.name.toLower()/]VarTest + 1);
		[/if]
        [/for]

        element(by.id('save-[c.getName()/]')).click();

        [for (a : Property | c.getAllAttribs())]
        [if(a.type.name = 'String')]
        expect(element(by.id('0-[a.name/]')).getText()).toBe('New' + [a.name.toLower()/]VarTest);
		[/if]
		[if(a.isDate())]
		[/if]
		[if (a.type.name = 'Boolean')]
		expect(element(by.id('0-[a.name/]')).element(by.tagName('span')).getAttribute('class')).toBe('glyphicon ng-scope glyphicon-unchecked');
		[/if]
		[if (a.type.name = 'Integer' or a.type.name = 'Long')]
		expect(element(by.id('0-[a.name/]')).getText()).toBe([a.name.toLower()/]VarTest + 1);
		[/if]
        [/for]
    });

    it('should delete the [c.getName()/]', function () {
        element(by.id('0-delete-btn')).click();
        [for (a : Property | c.getAllAttribs())]
        expect(element.all(by.id('0-[a.name/]')).count()).toEqual(0);
        [/for]
    });
});
[/file]
[/template]