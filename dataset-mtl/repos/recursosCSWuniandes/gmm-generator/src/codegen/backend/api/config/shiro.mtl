[comment encoding = UTF-8 /]
[**
 * Handles all generation for Apache Shiro configuration.
 */]
[module shiro('http://www.eclipse.org/uml2/5.0.0/UML')]
[import ::utils /]

[**
 * The documentation of the template genShiroIni.
 * @param aModel
 */]
[template public genShiroIni(m : Model, path : String)]
[file (path.concat('shiro.ini'), false, 'UTF-8')]
['['/]main]
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager
authc.loginUrl = /#/login
restFilter = co.edu.uniandes.csw.auth.filter.RestFilter
jwt = co.edu.uniandes.csw.auth.filter.JWTFilter
# cors = co.edu.uniandes.csw.auth.filter.CORSFilter

#Integrate with Stormpath:
stormpathClient = com.stormpath.shiro.client.ClientFactory
stormpathClient.cacheManager = $cacheManager
apiKeyProps = co.edu.uniandes.csw.auth.stormpath.ApiKeyProperties
stormpathClient.apiKeyProperties = $apiKeyProps
stormpathRealm = com.stormpath.shiro.realm.ApplicationRealm
stormpathRealm.client = $stormpathClient

# Find this URL in your Stormpath console for an application you create:
# Applications -> (choose application name) --> Details: REST URL

# ------------ WARNING ------------
# Set Stormpath's application URL. Without this application won't run.
stormpathRealm.applicationRestUrl = https://api.stormpath.com/v1/applications/7Aq0vnw9Ss4r7L1E0nasoo

stormpathRealm.authenticationCachingEnabled = true
securityManager.realm = $stormpathRealm

#Roles
stormpathRealm.groupRoleResolver.modeNames = name
securityManager.realm = $stormpathRealm

# Adding Authentication Listeners
# authListener = co.edu.uniandes.csw.bookbasico.shiro.AuthenticationEventListener
# securityManager.authenticator.authenticationListeners = $authListener

# PERMISOS:
# Según la aplicación se deben establecer los permisos necesarios por cada recurso.
# Ejemplo:

# /api/users/login = noSessionCreation, anon
# /api/users/logout = noSessionCreation, jwt
# /api/users/me = noSessionCreation, jwt['['/]permissive]
[for (c : Class | m.getClasses())]
# /api/[c.getURI()/]/** = noSessionCreation, jwt, restFilter['['.concat(c.getName()).concat(']')/]
[/for]

['['/]urls]
/api/users/login = noSessionCreation, anon
/api/users/logout = noSessionCreation, jwt
/api/users/me = noSessionCreation, jwt['['/]permissive]
[for (c : Class | m.getClasses())]
/api/[c.getURI()/]/** = noSessionCreation, anon
[/for]
/** = noSessionCreation
[/file]
[/template]

[template public genWebXMLShiroFilter(m : Model)]
    <listener>
        <listener-class>org.apache.shiro.web.env.EnvironmentLoaderListener</listener-class>
    </listener>
    <filter>
        <filter-name>ShiroFilter</filter-name>
        <filter-class>org.apache.shiro.web.servlet.ShiroFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>ShiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
        <dispatcher>ERROR</dispatcher>
    </filter-mapping>
[/template]