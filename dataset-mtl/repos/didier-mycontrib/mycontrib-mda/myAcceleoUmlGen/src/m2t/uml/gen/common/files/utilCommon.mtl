[comment encoding = UTF-8 /]
[module utilCommon('http://www.eclipse.org/uml2/3.0.0/UML')/]

[query public queryAsAtLeastOneOperation(c : Classifier) : Boolean =
   c.getAllOperations()->size() > 0 /]

[query public queryAsAtLeastOneProperty(c : Classifier) : Boolean =
   c.getAllAttributes()->size() > 0 /]

[query public queryAsNoStereotype(e : Element) : Boolean = 
   e.getAppliedStereotypes()->size() < 1 /]

[query public queryBasicAttributes(c : Classifier) : Set(Property) = 
   c.getAllAttributes()->select(aggregation <> AggregationKind::composite and aggregation <> AggregationKind::shared and association = null) /]

[query public isNotWithGeneric(c : Classifier) : Boolean = c.name.contains('<')._not() /]

[query public isNotInPrivatePackage(e : Element) : Boolean =   e.ancestors(Package)->first().visibility <> VisibilityKind::private /]

[query public queryRootPackage(e : Element) : Package = 
   e.ancestors(Package)->last()/]
   
[query public queryFirstInstanceSpec(p : Package) : InstanceSpecification = 
   p.eAllContents(InstanceSpecification)->select(getAppliedStereotypes()->exists( s | s.qualifiedName = 'n-tiers::config' ))->first()/]
      
[query public queryInstanceProperty(cfg : InstanceSpecification , prop : String) : String = 
   cfg.eAllContents(Slot)->select(definingFeature.name=prop)->first().value.oclAsType(LiteralString).value/]
   
[query public queryRetreiveCfgProperty(e : Element , prop : String) : String = 
   e.queryRootPackage().queryFirstInstanceSpec().queryInstanceProperty(prop)/]


[query public queryAsStereotype(e : Element, sName : String) : Boolean = 
   e.getAppliedStereotypes()->exists( s | s.qualifiedName = sName )/]
   
[query public queryWithEnumProperty(c : Classifier) : Boolean =
   c.getAllAttributes()->exists(a | a.type.oclIsTypeOf(Enumeration)) /]
   
[query public queryClassifierOperationWithEnumParam(c : Classifier) : Boolean =
   c.getAllOperations()->exists(o | o.queryOperationWithEnumParam()) /]
   
[query public queryOperationWithEnumParam(o : Operation) : Boolean =
   o.ownedParameter->exists(p | p.type.oclIsTypeOf(Enumeration)) /]
   

[query public queryGetOppositeAssociationEnd(a : Association, c : Class) : Property = 
   a.memberEnd->select(type.name <> c.name)->asOrderedSet()->first()/]
   
[query public queryGetThisSideAssociationEnd(a : Association, c : Class) : Property = 
   a.memberEnd->select(type.name = c.name)->asOrderedSet()->first()/]


[query public queryGetOperations(c : Classifier) : Set(Operation) = 
   c.oclAsType(Class).ownedOperation /]
   
[query public queryGetFirstPkProperty( c : Class) : Property = 
   c.attribute->select(getAppliedStereotypes()->exists( s | s.qualifiedName = 'n-tiers::id' ))
                     ->asOrderedSet()->first()/]  
                     
[template public default(s : String,defaultValue :String) post(trim())]
[if (s <> null and s <> '')][s/][else][defaultValue/][/if]
[/template]                     
                      

[template public recursiveQualifiedName(n : Namespace) post(trim())]
	[if (n.namespace <>null) and (n.namespace.name <> null) and (n.namespace.name <> 'LogicalView') and (n.namespace.name <> 'Model') and (n.namespace.visibility <> VisibilityKind::private)][n.namespace.recursiveQualifiedName()/].[/if][n.name/]
[/template]


[template public packagePrefixFromUml(c : Classifier) post(trim())]
[c.queryRetreiveCfgProperty('domainName').default('org.xxx')/].[c.queryRetreiveCfgProperty('appName').default('myapp')/]
[/template]


[template public packageNameFromUml(c : Classifier) post(trim())]
[c.packagePrefixFromUml()/].[c.namespace.recursiveQualifiedName()/]
[/template]

[template public fullNameFromUml(c : Classifier) post(trim())]
[c.packageNameFromUml()/].[c.name/]
[/template]

[template public fileNameFromUml(c : Classifier) post(trim())]
[c.fullNameFromUml().replaceAll('\\.','/')/]
[/template]

[template public tempDebug(c : Classifier) post(trim())]
[(c.queryRootPackage()).queryFirstInstanceSpec()/]
[/template]


