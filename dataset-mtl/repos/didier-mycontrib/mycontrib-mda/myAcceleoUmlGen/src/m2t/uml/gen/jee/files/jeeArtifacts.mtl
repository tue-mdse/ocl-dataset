[comment encoding = UTF-8 /]
[module jeeArtifacts('http://www.eclipse.org/uml2/3.0.0/UML')/]

[import m2t::uml::gen::common::files::utilCommon/]
[import m2t::uml::gen::java::files::utilJava /]
[import m2t::uml::gen::jee::files::utilJee /]

[template public generateServiceInterfaceFile(c: Classifier) ? ( c.oclIsTypeOf(Class) and c.queryIsService() ) 
{cl:Class = c.oclAsType(Class);}]
[file (c.jeeFileNameFromUml('itf.domain.service').concat('.java'), false)]

[c.genJeePackage('itf.domain.service')/]
[c.genJeeImports('service')/]
@WebService
public interface [c.name.toUpperFirst()/] {  
[ comment may be throws ....generic.exception.ServiceException; /]     
[for (o: Operation | cl.ownedOperation) ? (o.queryAsStereotype('n-tiers::CRUD'))]
	//CRUD methods for entity "[o.type.name/]"
	public [o.type.name/] get[o.type.name/]ByPk(@WebParam(name="pk") [o.type.oclAsType(Class).typeNameOfPk()/] pk) throws RuntimeException;
	public java.io.Serializable createNew[o.type.name/](@WebParam(name="obj")[o.type.name/] e) throws RuntimeException;
	public void update[o.type.name/](@WebParam(name="obj")[o.type.name/] e) throws RuntimeException;
	public void delete[o.type.name/](@WebParam(name="pk") [o.type.oclAsType(Class).typeNameOfPk()/] pk) throws RuntimeException;
[/for]  
	//Other specific methods:
[for (o: Operation | cl.ownedOperation) ? (not o.queryAsStereotype('n-tiers::CRUD'))]
	[o.genJavaMethodSignatureWithWebParam()/] throws RuntimeException;
[/for]     
}
[/file]
[/template]


[template public generateServiceImplClassFile(c: Classifier) ? ( c.oclIsTypeOf(Class) and c.queryIsService() ) 
{cl:Class = c.oclAsType(Class);}]
[file (c.jeeFileNameFromUml('impl.domain.service').concat('Impl.java'), false)]

[c.genJeePackage('impl.domain.service')/]
[c.genJeeImports('serviceImpl')/]
[c.genSpringAnotForService()/]
@WebService (endpointInterface="[c.jeePackageName('itf.domain.service')/].[c.name/]")
public  class [c.name.toUpperFirst()/]Impl implements [c.name.toUpperFirst()/] {
[for (p: Property | c.attribute)]
[p.genJavaPrivateProperty()/]
[/for]
	private static org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger([c.name.toUpperFirst()/]Impl.class);

	@Inject
	private GenericBeanConverter beanConverter;
[for (o: Operation | cl.ownedOperation) ? (o.queryAsStereotype('n-tiers::CRUD'))]
	
	@Inject
	private Dao[o.type.name/] dao[o.type.name/];
	
[/for]
//[protected ('specific attributes')]
	
//[/protected]
[cl.genJeeDefaultConstructor('service')/]      
       
[for (o: Operation | cl.ownedOperation) ? (o.queryAsStereotype('n-tiers::CRUD'))]
[comment o.type.oclAsType(Classifier).generateDaoInterfaceFile()/] [comment o.type.oclAsType(Classifier).generateDaoImplFile()/]  
    //CRUD methods for entity "[o.type.name/]" :
    @Transactional(readOnly=true)
	public [o.type.name/] get[o.type.name/]ByPk([o.type.oclAsType(Class).typeNameOfPk()/] pk) throws RuntimeException {
		try{
			 _[o.type.name/] entity =  dao[o.type.name/].getEntityById(pk);
			 [o.type.name/] dto = null;
			 if(entity!=null)
			     dto=beanConverter.convert(entity, [o.type.name/].class);
			 return dto;
		 }catch(Exception ex){
		    logger.error("echec get[o.type.name/]ByPk",ex);
		    throw new RuntimeException("echec get[o.type.name/]ByPk",ex);
		}
	}
	@Transactional(rollbackFor=Exception.class)
	public java.io.Serializable createNew[o.type.name/]([o.type.name/] dto) throws RuntimeException {
		try{
			_[o.type.name/] entity = beanConverter.convert(dto, _[o.type.name/].class);
			dao[o.type.name/].persistNewEntity(entity);
			return entity.getPk();
		}catch(Exception ex){
		    logger.error("echec createNew[o.type.name/]",ex);
		    throw new RuntimeException("echec createNew[o.type.name/]",ex);
		}
	}
	@Transactional(rollbackFor=Exception.class)
	public void update[o.type.name/]([o.type.name/] dto) throws RuntimeException {
		try{
			_[o.type.name/] entity = beanConverter.convert(dto, _[o.type.name/].class);
			dao[o.type.name/].updateEntity(entity);
		}catch(Exception ex){
		    logger.error("echec update[o.type.name/]",ex);
		    throw new RuntimeException("echec update[o.type.name/]",ex);
		}
	}
	@Transactional(rollbackFor=Exception.class)
	public void delete[o.type.name/]([o.type.oclAsType(Class).typeNameOfPk()/] pk) throws RuntimeException {
		try{
			dao[o.type.name/].deleteEntity(pk);
		}catch(Exception ex){
		    logger.error("echec delete[o.type.name/]",ex);
		    throw new RuntimeException("echec delete[o.type.name/]",ex);
		}
	}
[/for]

//other specific methods :         
[for (o: Operation | cl.ownedOperation) ? (not o.queryAsStereotype('n-tiers::CRUD'))]
[o.genJeeServiceMethod()/]
[/for]
}
[/file]
[/template]

[template public generateDaoInterfaceFile(c: Classifier)  ? (  c.queryIsForEntity()  and c.queryAsStereotype('n-tiers::embeddable')._not())
{cl:Class = c.oclAsType(Class);}]
[file (c.jeeFileNameFromUml('dao').concat('.java'), false)]

[c.genJeePackage('impl.persistence.dao')/]
[c.genJeeImports('dao')/]
public interface Dao[c.name/] extends GenericDao<_[c.name/],[cl.typeNameOfPk().convertPrimitiveToWrapper()/]> {
	//[protected ('specific_dao_methods')]
	    //public List<_[c.name/]> find[c.name/]ByXyz(...);
	//[/protected]
}
[/file]
[/template]

[template public generateDaoImplFile(c: Classifier) ? (  c.queryIsForEntity() and c.queryAsStereotype('n-tiers::embeddable')._not())  
{cl:Class = c.oclAsType(Class);}]
[file (c.jeeFileNameFromUml('daoImpl').concat('.java'), false)]

[c.genJeePackage('impl.persistence.dao.jpa')/]
[c.genJeeImports('daoImpl')/]
@Named
public class Dao[c.name/]Jpa extends GenericDaoJpaSpring<_[c.name/],[cl.typeNameOfPk().convertPrimitiveToWrapper()/]> implements Dao[c.name/] {
	//[protected ('specific_dao_methods')]
	    //public List<_[c.name/]> find[c.name/]ByXyz(...){ .... }
	//[/protected]
}
[/file]
[/template]


[template public generateEntityClassFile(c: Classifier) ? ( c.oclIsTypeOf(Class) and c.queryIsForEntity() ) ]
[file (c.jeeFileNameFromUml('entity').concat('.java'), false)]

[c.genJeePackage('impl.persistence.entity')/]
[c.genJeeImports('entity')/]
[c.genJpaAnotForEntityOrEmbeddable()/]
[c.oclAsType(Class).genJeeEntityOrDtoClass('entity')/] 
[/file]
[/template]

[template public generateDtoClassFile(c: Classifier) ? ( c.oclIsTypeOf(Class) and c.queryIsForDto() ) ]
[file (c.jeeFileNameFromUml('itf.domain.dto').concat('.java'), false)]

[c.genJeePackage('itf.domain.dto')/]
[c.genJeeImports('dto')/]
[c.oclAsType(Class).genJeeEntityOrDtoClass('dto')/]   
[/file]
[/template]

[template public generateEnumFile(c: Classifier) ? ( c.oclIsTypeOf(Enumeration) ) ]
[file (c.jeeFileNameFromUml('itf.domain.enumeration').concat('.java'), false)]
[c.genJeePackage('itf.domain.enumeration')/]
[c.oclAsType(Enumeration).genJavaEnumeration()/]   
[/file]
[/template]

