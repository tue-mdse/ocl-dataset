[comment encoding = UTF-8 /]
[module generateJeeTest('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import m2t::uml::gen::common::files::utilCommon/]
[import m2t::uml::gen::java::files::utilJava /]
[import m2t::uml::gen::jee::files::utilJee /]
[import m2t::uml::gen::jee::files::jeeArtifacts /]

[template public generateJeeTestFile(c: Classifier) ? ( c.oclIsTypeOf(Class) or c.oclIsTypeOf(Interface)) ]
[comment @main /]
[c.generateServiceTestFile()/]
[c.generateDaoTestFile()/]
[/template]

[template public generateServiceTestFile(c: Classifier) ? ( c.oclIsTypeOf(Class) 
and c.queryIsService() ) ]
[file (c.jeeFileNameFromUml('testService').concat('.java'), false)]

[c.genJeePackage('impl.domain.service.test')/]
[c.genJeeImports('testService')/]
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations={"/serviceSpringConf.xml","/dataSourceForTestSpringConf.xml"})
public class TestService[c.name/] { 

    @Inject
	private [c.name/] service = null; // service metier a tester
	
	@Test
   public void test_[c.name/]() {
   //[protected ('test_'+c.name+'_implementation')]
     try{
        System.out.println("test_[c.name/]");
        //...
        }catch(Exception /*ServiceException*/ ex){
      	    System.err.println(ex.getMessage());
      	    Assert.fail(ex.getMessage());
      	}
   //[/protected]
   }   
	       

	[for (o: Operation | c.oclAsType(Class).ownedOperation) ? (not o.queryAsStereotype('n-tiers::CRUD'))]
	@Test
   public void test_[o.name/]() {
   //[protected ('test_'+o.name+'_implementation')]
     try{
        System.out.println("test_[o.name/]");
        //...
        }catch(Exception /*ServiceException*/ ex){
      	    System.err.println(ex.getMessage());
      	    Assert.fail(ex.getMessage());
      	}
   //[/protected]
   }
	[/for]
      
}
[/file]
[/template]

[template public generateDaoTestFile(c: Classifier) ? ( c.oclIsTypeOf(Class) and c.queryIsForEntity() and c.queryAsStereotype('n-tiers::embeddable')._not())
{cl:Class = c.oclAsType(Class);}]

[file (c.jeeFileNameFromUml('testDao').concat('.java'), false)]

[c.genJeePackage('impl.persistence.dao.test')/]
[c.genJeeImports('testDao')/]
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations={"/serviceSpringConf.xml","/dataSourceForTestSpringConf.xml"})
@TransactionConfiguration(transactionManager="txManager",defaultRollback=false)
public class TestDao[c.name/]WithGenericAndDbUnit extends GenericDaoTestWithDbUnitSpring<_[c.name/],[cl.typeNameOfPk().convertPrimitiveToWrapper()/]>{ 

	private Dao[c.name/] dao = null; // dao Ã  tester
	
	@Override
	public [cl.typeNameOfPk().convertPrimitiveToWrapper()/] getPkOfEntity(_[c.name/] entity){
		return entity.get[cl.queryGetFirstPkProperty().name.toUpperFirst()/]();
	}
	
	@Inject
	public void setDao(Dao[c.name/] dao) {
		this.dao = dao;
		this.setGenericDao(dao);
	} 
	
	public Dao[c.name/] getDao() {
		return dao;
	} 
	
	@Inject
	 public void setDataSource(DataSource dataSource){
		 super.setDataSource(dataSource);
	 }    
	 
	 

	//[protected ('test_Dao'+c.name+'_specific_methods')]
	@Test
    public void test_Dao[c.name/]_specific_methods() {
 
     try{
        System.out.println("test_Dao[c.name/]_specific_methods");
        //...
        }catch(RuntimeException ex){
      	    System.err.println(ex.getMessage());
      	    Assert.fail(ex.getMessage());
      	}
    }
    //[/protected]
      
}
[/file]
[/template]

