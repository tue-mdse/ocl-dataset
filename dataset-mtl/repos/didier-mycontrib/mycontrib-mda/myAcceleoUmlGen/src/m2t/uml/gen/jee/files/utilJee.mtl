[comment encoding = UTF-8 /]
[module utilJee('http://www.eclipse.org/uml2/3.0.0/UML')/]

[import m2t::uml::gen::common::files::utilCommon/]
[import m2t::uml::gen::java::files::utilJava /]

[query public queryIsData(c : Classifier) : Boolean = 
   (c.queryAsStereotype('n-tiers::entity') or  c.queryAsStereotype('n-tiers::embeddable') 
   or c.queryAsStereotype('n-tiers::data') or c.queryAsStereotype('n-tiers::value')
   or ( c.queryAsAtLeastOneProperty() and c.queryAsAtLeastOneOperation()._not() and c.queryAsNoStereotype() ))
   and c.isNotInPrivatePackage() /]

[query public queryIsService(c : Classifier) : Boolean = 
   c.queryAsStereotype('n-tiers::service') or c.queryAsAtLeastOneOperation() /]

[query public queryIsForEntity(c : Classifier) : Boolean = 
   c.queryIsData() and  c.queryAsStereotype('n-tiers::value')._not() /]

[query public queryIsForDto(c : Classifier) : Boolean = 
   c.queryIsData() and  c.queryAsStereotype('n-tiers::entity')._not() /]

[template public jeeTypeName(p : Property , jeeType : String) post(trim())]
[if(jeeType='entity')]_[/if][p.javaType()/]
[/template]
   

[template public jeePackageName(c : Classifier,jeeSuffix : String) post(trim())]
[c.packageNameFromUml()/].[jeeSuffix/]
[/template]

[template public genJeePackage(c : Classifier,jeeSuffix : String)]
package [c.packageNameFromUml()/].[jeeSuffix/];
[/template]

[template public convertPrimitiveToWrapper(javaType : String)]
[if(javaType='long')]Long[elseif(javaType='int')]Integer[elseif(javaType='float')]Float[elseif(javaType='double')]Double[elseif(javaType='boolean')]Boolean[else][javaType/][/if]
[/template]


[template public jeeTypeNameFromPropertyUpper(p : Property) post(trim())]
[if (p.upper = -1 or p.upper > 1)]List<[p.javaType().convertPrimitiveToWrapper()/]>[else][p.javaType().convertPrimitiveToWrapper()/][/if]
[/template]

[template public genJeeGetter(p : Property )]
	public [p.jeeTypeNameFromPropertyUpper()/] get[p.name.toUpperFirst()/]() {
		return this.[p.name/]; 
	}
[/template]

[template public genJeeSetter(p : Property )]
	public void set[p.name.toUpperFirst()/]([p.jeeTypeNameFromPropertyUpper()/] [p.name/]){
		this.[p.name/]=[p.name/];
	}
[/template]

[template public jeeFullNameFromUml(c : Classifier,jeeType : String) post(trim())]
[if (jeeType='entity') ]
	[c.packageNameFromUml()/].impl.persistence.entity._[c.name/]
[elseif(jeeType='dao') ]
	[c.packageNameFromUml()/].impl.persistence.dao.Dao[c.name/]
[elseif(jeeType='daoImpl') ]
	[c.packageNameFromUml()/].impl.persistence.dao.jpa.Dao[c.name/]Jpa
[elseif(jeeType='testService') ]
	[c.packageNameFromUml()/].impl.domain.service.test.TestService[c.name/]
[elseif(jeeType='testDao') ]
	[c.packageNameFromUml()/].impl.persistence.dao.test.TestDao[c.name/]WithGenericAndDbUnit			
[else]
	[c.packageNameFromUml()/].[jeeType/].[c.name/]
[/if]
[/template]

[template public jeeFileNameFromUml(c : Classifier,jeeType : String) post(trim())]
[c.jeeFullNameFromUml(jeeType).replaceAll('\\.','/')/]
[/template]

[template public genJeeDefaultConstructor(c : Class, jeeType : String)]
	public [if (jeeType='entity')]_[/if][c.name.toUpperFirst()/][if (jeeType='service')]Impl[/if](){
		super(); 
	}
[/template]

[template public genJavaInterfaceFromUmlClass(c : Class)]
public interface [c.name.toUpperFirst()/] {        
[for (o: Operation | c.ownedOperation)]
	[o.genJavaMethodSignature()/];
[/for]       
}
[/template]

[template public genJeeEntityOrDtoClass(c : Class, jeeType: String)]
public  class [if (jeeType='entity')]_[/if][c.name.toUpperFirst()/] [c.javaExtendsfromUml()/][if (jeeType='dto')] implements java.io.Serializable[/if] {
[if (jeeType='dto')] private static final long serialVersionUID = 1L;[/if]
//[protected ('java_internal')]

//[/protected]
[for (p: Property | c.attribute)]
[if (p.aggregation <> AggregationKind::shared and p.aggregation <> AggregationKind::composite and p.association = null)][p.genJeePrivateProperty(jeeType)/][/if]
[/for]
[c.genJeeInstanceVarFromUmlAssRole(jeeType)/]
[c.genJeeDefaultConstructor(jeeType)/]      
[c.genJavaToString()/] 
[if (jeeType='entity' and c.queryAsStereotype('n-tiers::embeddable')._not())] 
	public java.io.Serializable getPk(){
	    //[protected('pk')]
 		return [c.queryGetFirstPkProperty().name/];
 		//[/protected]
 	}
[/if]          
[for (p: Property | c.attribute)]
  [if (p.aggregation <> AggregationKind::shared and p.aggregation <> AggregationKind::composite and p.association = null)]
[p.genJeeGetter()/]
[p.genJeeSetter()/]
  [/if]
[/for]
[c.genJeeGetterSetterFromUmlAssRole(jeeType)/]
        
[for (o: Operation | c.ownedOperation)]
[o.genJavaMethod()/]
[/for]
}
[/template]


[template public genJeeImportsFromPackageDependencies(c : Classifier,jeeSuffix : String)]
[for (d : Dependency  | c._package.clientDependency)]
  [let n : Namespace = d.supplier->asOrderedSet()->first().namespace ]
import [c.packagePrefixFromUml()/].[if (n <> null) and (n.name <> 'LogicalView') and (n.name <> 'Model') and (n.visibility <> VisibilityKind::private)][n.recursiveQualifiedName()/].[/if][d.supplier.name/].[jeeSuffix/].*;
 [/let]
[/for]
[/template]

[template public genJeeImports(c : Classifier,jeeType : String)]
//[protected ('java_imports')]
	import java.util.Collection;
	import java.util.List;
	import java.util.Date;
  [if(c.queryWithEnumProperty()) or c.queryClassifierOperationWithEnumParam()]
    import [c.jeePackageName('itf.domain.enumeration')/].*;
  [/if]	
  [if (jeeType = 'dto')]   
    [c.genJeeImportsFromPackageDependencies('itf.domain.dto')/]	
  [elseif (jeeType = 'entity')]   
	import javax.persistence.*;
    [c.genJeeImportsFromPackageDependencies('impl.persistence.entity')/]
  [elseif (jeeType = 'service')]
	import [c.jeePackageName('itf.domain.dto')/].*;
	import javax.jws.WebService;
	import javax.jws.WebParam;
	[ comment may be import ....generic.exception.ServiceException; /]
  [elseif (jeeType = 'serviceImpl')]
	import javax.inject.Inject;
	import javax.jws.WebService;
	import org.mycontrib.generic.converter.GenericBeanConverter;
	import [c.jeePackageName('itf.domain.dto')/].*;
	import [c.jeePackageName('itf.domain.service')/].*;
	import [c.jeePackageName('impl.persistence.entity')/].*;
	import [c.jeePackageName('impl.persistence.dao')/].*;
	[ comment may be import ....generic.exception.ServiceException; /]
	import org.springframework.stereotype.Service;
	import org.springframework.transaction.annotation.Transactional;
 [elseif (jeeType = 'dao')]
    import org.mycontrib.generic.persistence.GenericDao;
    import [c.jeePackageName('impl.persistence.entity')/].*;
 [elseif (jeeType = 'daoImpl')]
    import org.mycontrib.generic.persistence.spring.GenericDaoJpaSpring;
    import [c.jeePackageName('impl.persistence.dao')/].*;
    import [c.jeePackageName('impl.persistence.entity')/].*;
	import javax.inject.Named;
 [elseif (jeeType = 'testService')]
 	import [c.jeePackageName('itf.domain.dto')/].*;
 	import [c.jeePackageName('itf.domain.service')/].*; 
 [elseif (jeeType = 'testDao')]
 	import [c.jeePackageName('impl.persistence.dao')/].*;
 	import [c.jeePackageName('impl.persistence.entity')/].*; 
 	import javax.sql.DataSource;
 	import org.mycontrib.generic.test.spring.GenericDaoTestWithDbUnitSpring;
 	import org.springframework.transaction.annotation.Transactional;
 	import org.springframework.test.context.transaction.TransactionConfiguration; 		
  [/if]  
  [if (jeeType = 'testDao' or (jeeType = 'testService'))]
    import java.io.Serializable;
    import org.junit.Assert;
	import javax.inject.Inject;
 	import org.junit.Test;
	import org.junit.runner.RunWith;
	import org.springframework.test.context.ContextConfiguration;
	import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
	
  [/if]
//[/protected]
[/template]

[template public genSpringAnotForService(c : Classifier) ]
 @Service
[/template]


[template public genJpaAnotForEntity(c : Classifier)  ]
 @Entity
 @Table(name="[c.name/]")
[/template]

[template public genJpaAnotForEmbeddable(c : Classifier)  ]
 @Embeddable
[/template]

[template public genJpaAnotForEntityOrEmbeddable(c : Classifier) post(trim()) ]
 [if (c.queryAsStereotype('n-tiers::embeddable')) ][c.genJpaAnotForEmbeddable()/][else][c.genJpaAnotForEntity()/][/if]
[/template]

[template public genJeeInstanceVarFromUmlAssRole(c : Class , jeeType : String)]
[for (a : Association | c.getAssociations() ) ? ( jeeType='entity' or a.queryAsStereotype('n-tiers::dto-link')) ]
  [let op : Property = a.queryGetOppositeAssociationEnd(c)]
  [let tsp : Property = a.queryGetThisSideAssociationEnd(c)]     
       [if (op.isNavigable() ) ]
    [if (jeeType='entity')][op.relationshipAnnotFromUmlAssociationEnds(tsp)/][/if] 
	private [op.jeeAssRoleTypeNameFromPropertyUpper(jeeType)/] [op.name/];
       [/if]
  [/let]
  [/let] 
 [/for]
[/template]


[template public oneToOneAnnotFromUmlAssociationEnds(oppositeProp:Property, thisSideProp:Property) post(trim())]
[if( oppositeProp.aggregation <> AggregationKind::composite)]
[if (thisSideProp.isNavigable())]
@OneToOne(mappedBy="[thisSideProp.name/]") //1-1 bidirectionnel (comme inverse du 1-1 symetrique)
[else]
@OneToOne //1-1 unidirectionnel
@JoinColumn(name="ref_[oppositeProp.name/]")
[/if]
[elseif( oppositeProp.aggregation = AggregationKind::composite)]
@Embedded
[/if]
[/template]

[template public oneToManyAnnotFromUmlAssociationEnds(oppositeProp:Property, thisSideProp:Property) post(trim())]
[if( oppositeProp.aggregation <> AggregationKind::composite)]
[if (thisSideProp.isNavigable())]
@OneToMany(mappedBy="[thisSideProp.name/]") //1-n bidirectionnel (comme inverse du n-1)
[else]
@OneToMany //1-n undirectionnel
@JoinColumn(name="ref_[oppositeProp.name/]")
[/if]
[elseif( oppositeProp.aggregation = AggregationKind::composite)]
@ElementCollection
@CollectionTable(name="[oppositeProp.type.name/]", joinColumns={@JoinColumn(name="[thisSideProp.type.oclAsType(Class).queryGetFirstPkProperty().name/]")})
[/if]
[/template]

[template public manyToOneLikeNnAnnotFromUmlAssociationEnds(oppositeProp:Property, thisSideProp:Property) post(trim())]
@ManyToOne() //n-1 (like n-n , by JoinTable , evolutif vers n-n)
@JoinTable(name="[thisSideProp.type.name/][oppositeProp.type.name/]",
           joinColumns = {@JoinColumn(name = "ref_[thisSideProp.name/]")},
           inverseJoinColumns = {@JoinColumn(name = "ref_[oppositeProp.name/]")})
[/template]


[template public oneToManyLikeNnAnnotFromUmlAssociationEnds(oppositeProp:Property, thisSideProp:Property) post(trim())]
[if (thisSideProp.isNavigable())]
@OneToMany(mappedBy="[thisSideProp.name/]") //1-n bidirectionnel (like n-n , comme inverse du n-1 by JoinTable )
[else]
@OneToMany() //1-n (like n-n , by JoinTable) pour l'instant unidirectionnel 
@JoinTable(name="[thisSideProp.type.name/][oppositeProp.type.name/]",
           joinColumns = {@JoinColumn(name = "ref_[thisSideProp.name/]")},
           inverseJoinColumns = {@JoinColumn(name = "ref_[oppositeProp.name/]")})
[/if]
[/template]


[template public manyToOneAnnotFromUmlAssociationEnds(oppositeProp:Property, thisSideProp:Property) post(trim())]
@ManyToOne
@JoinColumn(name="ref_[oppositeProp.name/]")
[/template]

[template public manyToManyAnnotFromUmlAssociationEnds(oppositeProp:Property, thisSideProp:Property) post(trim())]
[if (thisSideProp.isNavigable())]
//@ManyToMany(mappedBy="[thisSideProp.name/]") //n-n bidirectionnel (du coté secondaire exprimé comme symétrique du lien inverse et sans JoinTable)
     //ou bien [comment idee a debattre: si role public alors coté principal , sinon coté secondaire/]
//@ManyToMany() //n-n bidirectionnel (du coté principal sans mappedBy et avec JoinTable)
//@JoinTable(name="[thisSideProp.type.name/][oppositeProp.type.name/]",
//           joinColumns = {@JoinColumn(name = "ref_[thisSideProp.name/]")},
//           inverseJoinColumns = {@JoinColumn(name = "ref_[oppositeProp.name/]")})
[else]
@ManyToMany //n-n unidirectionnel
@JoinTable(name="[thisSideProp.type.name/][oppositeProp.type.name/]",
           joinColumns = {@JoinColumn(name = "ref_[thisSideProp.name/]")},
           inverseJoinColumns = {@JoinColumn(name = "ref_[oppositeProp.name/]")})
[/if]
[/template]

[template public relationshipAnnotFromUmlAssociationEnds(oppositeProp:Property, thisSideProp:Property)]
//[protected ('relationship_'+thisSideProp.name+'_'+oppositeProp.name) ]
[comment //thisSide: role=thisSideProp.name , type=thisSideProp.type.name /]
[comment //opposite: role=oppositeProp.name , type=oppositeProp.type.name /]
[if(oppositeProp.getUpper()=1 and thisSideProp.getUpper()=1)]
[oppositeProp.oneToOneAnnotFromUmlAssociationEnds(thisSideProp)/]
[elseif(oppositeProp.getUpper()=1 and thisSideProp.getUpper()<0)][comment -1 signifie "*" /]
 [if(thisSideProp.association.queryAsStereotype('n-tiers::like-n-n') or thisSideProp.association.queryAsStereotype('n-tiers::byTable'))]
 [oppositeProp.manyToOneLikeNnAnnotFromUmlAssociationEnds(thisSideProp)/]
 [else]
 [oppositeProp.manyToOneAnnotFromUmlAssociationEnds(thisSideProp)/]
 [/if]
[elseif(oppositeProp.getUpper()<0 and thisSideProp.getUpper()=1)]
 [if(thisSideProp.association.queryAsStereotype('n-tiers::like-n-n') or thisSideProp.association.queryAsStereotype('n-tiers::byTable'))]  
 [oppositeProp.oneToManyLikeNnAnnotFromUmlAssociationEnds(thisSideProp)/]
 [else]
 [oppositeProp.oneToManyAnnotFromUmlAssociationEnds(thisSideProp)/]
 [/if]
[elseif(oppositeProp.getUpper()<0 and thisSideProp.getUpper()<0)]
[oppositeProp.manyToManyAnnotFromUmlAssociationEnds(thisSideProp)/]
[else]
//@UnknownRelationship: tsp_upper=[thisSideProp.getUpper()/] , op_upper=[oppositeProp.getUpper()/]
[/if]
//[/protected]

[/template]

[template public genJeeGetterSetterFromUmlAssRole(c: Class , jeeType : String)]
[for (a : Association | c.getAssociations() )? ( jeeType='entity' or a.queryAsStereotype('n-tiers::dto-link'))]
     [let p : Property = a.queryGetOppositeAssociationEnd(c)]              
       [if (p.isNavigable() ) ]		
[p.genJeeAssRoleGetter(jeeType)/]
[p.genJeeAssRoleSetter(jeeType)/]
       [/if]
     [/let] 
    [/for]
[/template]



[template public jeeAssRoleTypeNameFromPropertyUpper(p : Property, jeeType : String) post(trim())]
[if (p.upper = -1 or p.upper > 1)]
   [if(p.association.queryAsStereotype('n-tiers::mapIndexBy'))]Map<Long,[p.jeeTypeName(jeeType)/]>[else]List<[p.jeeTypeName(jeeType)/]>[/if]
[else][p.jeeTypeName(jeeType)/]
[/if]
[/template]




[template public genJeeAssRoleGetter(p : Property , jeeType : String)]
	public [p.jeeAssRoleTypeNameFromPropertyUpper(jeeType)/] get[p.name.toUpperFirst()/]() {
		return this.[p.name/];
	}
[/template]

[template public genJeeAssRoleSetter(p : Property , jeeType : String)]
	public void set[p.name.toUpperFirst()/]([p.jeeAssRoleTypeNameFromPropertyUpper(jeeType)/] [p.name/]){
		this.[p.name/]=[p.name/];
	}
[/template]

[template public inputParametersForOpWithWebParam(o: Operation) post(trim())] 
[for (p : Parameter | o.ownedParameter) separator(',') ? (p.direction <> ParameterDirectionKind::return)]@WebParam(name="[p.name/]")[p.type.name/] [p.name/][/for]
[/template]

[template public genJavaMethodSignatureWithWebParam(o: Operation) post(trim())]
 [o.visibility/] [if (o.type.oclIsUndefined()) ]void[else][o.type.name/][/if] [o.name/]([o.inputParametersForOpWithWebParam()/])
[/template]

[template public genJeePrivateProperty(p : Property,jeeType: String)]
    [if (p.queryAsStereotype('n-tiers::id') and jeeType='entity')]@Id
    [if(p.type.name='int' or p.type.name='long' or p.type.name='Long' or p.type.name='Integer'  ) ]@GeneratedValue(strategy=GenerationType.AUTO)[/if]
    [/if][if (p.type.oclIsTypeOf(Enumeration) and jeeType='entity')]@Enumerated(EnumType.STRING)[/if]
	private [p.jeeTypeNameFromPropertyUpper()/] [p.name/];
[/template]

[template public genJeeServiceMethod(o: Operation)]
	@Transactional(rollbackFor=Exception.class)
	[o.genJavaMethodSignature()/] throws RuntimeException {
		//[protected (o.name)]
		try{
			[defaultJavaCodeStringFromUmlOperation()/]			
		}catch(Exception ex){
		    logger.error("echec [o.name/]",ex);
		    throw new RuntimeException("echec [o.name/]",ex);
		}	   
		//[/protected]               
	}
[/template]

[template public typeNameOfPk(c: Class) post(trim())]
[c.queryGetFirstPkProperty().type.name /]
[/template]

