[comment encoding = UTF-8 /]
[module utilXmlXsd('http://www.eclipse.org/uml2/5.0.0/UML')/]
[import m2t::uml::gen::common::files::utilCommon/]

[query public queryIsData(c : Classifier) : Boolean = 
   (c.queryAsStereotype('n-tiers::entity') or  c.queryAsStereotype('n-tiers::embeddable') 
   or c.queryAsStereotype('n-tiers::data') or c.queryAsStereotype('n-tiers::value')
   or ( c.queryAsAtLeastOneProperty() and c.queryAsAtLeastOneOperation()._not() and c.queryAsNoStereotype() ))
   and c.isNotInPrivatePackage() /]

[query public queryHasBasicReturnType(op : Operation) : Boolean =
  ( op.type.name = 'int'  or op.type.name = 'long' or op.type.name = 'Integer'  or op.type.name = 'Long' 
  or op.type.name = 'double' or op.type.name = 'Double'  or op.type.name = 'float'  or op.type.name = 'Float' or  op.type.name = 'Real'
  or op.type.name = 'boolean'  or  op.type.name = 'Boolean'
  or op.type.name = 'String'  or  op.type.name = 'string' )  /]

[template public umlNamespaceFromUml(c : Classifier) post(trim())]
[c.namespace.recursiveQualifiedName().replaceAll('\\.','/').concat('/')/]
[/template]

[template public xmlFileNameFromUml(c : Classifier) post(trim())]
[c.umlNamespaceFromUml()/][c.name.toLowerFirst()/]
[/template]

[template public XmlNamespaceNeedForExension(c: Class) post(trim())]
   [if (not c.superClass->isEmpty()) ]
     xmlns:nex="http://[c.superClass->asOrderedSet()->first().umlNamespaceFromUml()/]"
   [/if]
[/template]

[template public XsdTypeStringFromUmlType(p: Property) post(trim()){
umlType : String = p.type.name;
}]
[umlType.XsdTypeStringFromStringUmlType()/]
[/template]

[template public XsdTypeStringFromUmlType(p: Parameter) post(trim()){
umlType : String = p.type.name;
}]
[umlType.XsdTypeStringFromStringUmlType()/] 
[/template]

[template public XsdTypeStringFromStringUmlType(umlType : String) post(trim())]
   [if (umlType= 'int' or umlType = 'long' or umlType= 'float' or umlType = 'double' or umlType='boolean'  ) ]
     xsd:[umlType/]
   [elseif (umlType= 'String' or umlType='Boolean' or umlType='Integer' or umlType='Float' or umlType='Double') ]
     xsd:[umlType.toLowerFirst()/]
   [elseif (umlType= 'Real' )]
     xsd:double
    [else]
     tns:[umlType/]
   [/if]
[/template]



[template public genXsdComplexType(c: Class) ]
<xsd:complexType name="[c.name/]">
 [if (not c.superClass->isEmpty()) ]
    [let superC : Class = c.superClass->asOrderedSet()->first() ] 
  <xsd:complexContent>
     <xsd:extension base="nex:[superC.name/]">   
   [/let]
  [/if]  
		<xsd:sequence>
		[for (p : Property | c.attribute->asSequence()->sortedBy(name))]
			<xsd:element name="[p.name/]" type="[p.XsdTypeStringFromUmlType()/]"/>
		[/for]			
		</xsd:sequence>
  [if (not c.superClass->isEmpty()) ]
     </xsd:extension>
  </xsd:complexContent>
  [/if]
</xsd:complexType>
[/template]

[template public xmlExempleValueFromUmlType(p: Property) post(trim())]
[if (p.type.name = 'int' or p.type.name = 'long' or p.type.name = 'Integer' or p.type.name = 'Long')]
	0
[elseif (p.type.name = 'float' or p.type.name = 'double' or p.type.name = 'Float' or p.type.name = 'Double' or p.type.name = 'Real')]
	0.0
[elseif (p.type.name = 'boolean' or p.type.name = 'Boolean')]
	false
[else]
    abc
[/if]
[/template]
