[module logica('http://www.eclipse.org/uml2/4.0.0/UML')/]

[template public generate(c : Class)]
[comment @main/]
[file ('/src/main/java/' + c._package.qualifiedName.replaceAll('::', '/') +'/logica/'+ c.name + 'Logica.java', false, 'UTF-8')]
package [c._package.qualifiedName.replaceAll('::', '.')/].logica;

import [c._package.qualifiedName.replaceAll('::', '.')/].dto.*;
import [c._package.qualifiedName.replaceAll('::', '.')/].persistencia.*;
import [c._package.qualifiedName.replaceAll('::', '.')/].persistencia.entity.*;
import java.util.List;
import java.util.ArrayList;
import javax.persistence.*;
import javax.ejb.EJB;
import javax.ejb.Stateless;
[if (c.attribute->exists(a : Property | a.type.name.equalsIgnoreCase('Date')))]
import java.text.ParseException;
import java.text.SimpleDateFormat;
[/if]

/**
  *  @generated
  */
[c.classHeader()/] {
	@EJB
    private [c.name/]DAO persistencia;

[if (c.attribute->exists(a : Property | a.type.name.equalsIgnoreCase('Date')))]
	private final SimpleDateFormat fecha = new SimpleDateFormat("dd/MM/yyyy");
[/if]

	[c.getAll()/]
	[c.getID()/]
	[c.insert()/]
	[c.delete()/]
	[c.update()/]
	[c.converterDTO2Entity()/]
	[c.converterDTO2EntityList()/]
	[c.converterEntity2DTO()/]
	[c.converterEntity2DTOList()/]
	
}
[/file]
[/template]

[template public classHeader(c : Class)]
@Stateless
[c.visibility/] class [c.name/]Logica[c.extendsHeader()/][c.implementsHeader()/]
[/template]

[template public extendsHeader(c : Class) ? (c.superClass->notEmpty())]
 extends [c.superClass.name/]
[/template]

[template public implementsHeader(c : Class) ? (c.interfaceRealization->notEmpty())]
 implements [c.interfaceRealization.supplier.name->sep(', ')/]
[/template]

[template public getAll(a : Class)]

/**
* @generated
*/
public List<[a.name/]DTO> obtenerTodos(){
	return convertirEntidad(persistencia.obtenerTodos());
}
[/template]

[template public getID(a : Class)]

/**
* @generated
*/
public [a.name/]DTO obtener(Long id){
	return convertirEntidad(persistencia.obtener(id));
}

[/template]

[template public insert(a : Class)]

/**
* @generated
*/
public [a.name/]DTO guardar([a.name/]DTO dto){
	return convertirEntidad(persistencia.guardar(convertirDTO(dto)));
}

[/template]

[template public update(a : Class)]

/**
* @generated
*/
public void actualizar([a.name/]DTO dto){
	persistencia.actualizar(convertirDTO(dto));
}

[/template]

[template public delete(a : Class)]

/**
* @generated
*/
public void borrar(Long id){
	persistencia.borrar(id);
}

[/template]

[template public converterDTO2Entity(c : Class)]

/**
* @generated
*/
private [c.name/] convertirDTO([c.name/]DTO dto){
	if(dto==null)return null;
	[c.name/] entidad=new [c.name/]();
	entidad.setId(dto.getId());
	[c.attribute.converterDTOAttribute()/]
	[c.getAssociations().navigableOwnedEnd->select(type <> c).converterDTOAttribute() /]
	return entidad;
}

[/template]

[template public converterDTOAttribute(a : Property) ? (not a.isMany())]
[if(a.isAttribute())]
[if(a.type.name='Date')]
	if(dto.get[a.name.toUpperFirst()/]()!=null){
		try {
			entidad.set[a.name.toUpperFirst()/](fecha.parse(dto.get[a.name.toUpperFirst()/]()));
		} catch (ParseException ex) {
            throw new RuntimeException("Error al convertir la fecha [a.name.toUpperFirst()/] " + dto.get[a.name.toUpperFirst()/]());
        }
	}
[else]
	entidad.set[a.name.toUpperFirst()/](dto.get[a.name.toUpperFirst()/]());
[/if]
[else]
	if(dto.get[a.name.toUpperFirst()/]()!=null){
		entidad.set[a.name.toUpperFirst()/](new [a.type.name/]());
		entidad.get[a.name.toUpperFirst()/]().setId(dto.get[a.name.toUpperFirst()/]().getId());
	}
[/if]
[/template]

[template public converterEntity2DTO(c : Class)]

/**
* @generated
*/
private [c.name/]DTO convertirEntidad([c.name/] entidad){
	[c.name/]DTO dto=new [c.name/]DTO();
	dto.setId(entidad.getId());
	[c.attribute.converterEntityAttribute()/]
	[c.getAssociations().navigableOwnedEnd->select(type <> c).converterEntityAttribute() /]
	return dto;
}

[/template]

[template public converterEntityAttribute(a : Property) ? (not a.isMany())]
[if(a.isAttribute())]
[if(a.type.name='Date')]
	if(entidad.get[a.name.toUpperFirst()/]()!=null){
		dto.set[a.name.toUpperFirst()/](fecha.format(entidad.get[a.name.toUpperFirst()/]()));
	}
[else]
	dto.set[a.name.toUpperFirst()/](entidad.get[a.name.toUpperFirst()/]());
[/if]
[else]
	if(entidad.get[a.name.toUpperFirst()/]()!=null){
		dto.set[a.name.toUpperFirst()/](
			new BaseDTO(
				entidad.get[a.name.toUpperFirst()/]().getId(),
				entidad.get[a.name.toUpperFirst()/]().getNombre()));
	}
[/if]
[/template]

[template public converterDTO2EntityList(c : Class)]

/**
* @generated
*/
private List<[c.name/]> convertirDTO(List<[c.name/]DTO> dtos){
	List<[c.name/]> entidades=new ArrayList<[c.name/]>();
	for([c.name/]DTO dto:dtos){
		entidades.add(convertirDTO(dto));
	}
	return entidades;
}

[/template]

[template public converterEntity2DTOList(c : Class)]

/**
* @generated
*/
private List<[c.name/]DTO> convertirEntidad(List<[c.name/]> entidades){
	List<[c.name/]DTO> dtos=new ArrayList<[c.name/]DTO>();
	for([c.name/] entidad:entidades){
		dtos.add(convertirEntidad(entidad));
	}
	return dtos;
}

[/template]

[query public isMany(s : MultiplicityElement) : Boolean =
	s.lower > 1 or s.upper = -1 or s.upper > 1 
/]