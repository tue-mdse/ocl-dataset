[comment encoding = UTF-8
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module checkboxFormImpl('http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore') extends org::eclipse::emf::eef::codegen::widgets::api::widgetFormImpl/]

[import org::eclipse::emf::eef::codegen::services::common /]
[import org::eclipse::emf::eef::codegen::services::naming /]
[import org::eclipse::emf::eef::codegen::services::viewCommon /]
[import org::eclipse::emf::eef::codegen::services::imports /]

[comment ===== Case Widget = Checkbox ===== /]

[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) overrides manageImports ? (widget.name = 'Checkbox')]
[pec.addImports(Sequence{
	'org.eclipse.ui.forms.widgets.FormToolkit',
	'org.eclipse.swt.widgets.Composite',
	'org.eclipse.swt.SWT',
	'org.eclipse.emf.eef.runtime.ui.utils.EditingUtils',
	'org.eclipse.emf.eef.runtime.impl.notify.PropertiesEditionEvent',
	'org.eclipse.emf.eef.runtime.ui.widgets.FormUtils',
	'org.eclipse.swt.events.SelectionAdapter',
	'org.eclipse.swt.events.SelectionEvent',
	'org.eclipse.swt.layout.GridData'})/]
[/template]

[template public widgetDeclaration(editor : ElementEditor) overrides widgetDeclaration ? (editor.representation.name = 'Checkbox')]
	protected [include('org.eclipse.swt.widgets.Button')/] [editor.elementEditorName()/];
[/template]

[template public implementation(editor : ElementEditor) overrides implementation ? (editor.representation.name = 'Checkbox')]
return create[editor.name.toJavaClassifier()/]Checkbox(widgetFactory, parent);
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) overrides additionalImplementation ? (editor.representation.name = 'Checkbox')]
	[editor.owningViewsRepository().associatedGenModel().generationComment()/]
	protected Composite create[editor.name.toJavaClassifier()/]Checkbox(FormToolkit widgetFactory, Composite parent) {
		[editor.elementEditorName()/] = widgetFactory.createButton(parent, getDescription([editor.editorID()/], [include(editor.owningViewsRepository().qualifiedMessagesProvider())/].[editor.editorKey(editor.owningView())/]), SWT.CHECK);
		[editor.elementEditorName()/].addSelectionListener(new SelectionAdapter() {

			/**
			 * {@inheritDoc}
			 *
			 * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
			 * 	[editor.owningViewsRepository().associatedGenModel().generationMark()/]
			 */
			public void widgetSelected(SelectionEvent e) {
				if (propertiesEditionComponent != null)
					propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/], PropertiesEditionEvent.COMMIT, PropertiesEditionEvent.SET, null, new Boolean([editor.elementEditorName()/].getSelection())));
			}

		});
		GridData [editor.elementEditorName()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		[editor.elementEditorName()/]Data.horizontalSpan = 2;
		[editor.elementEditorName()/].setLayoutData([editor.elementEditorName()/]Data);
		EditingUtils.setID([editor.elementEditorName()/], [editor.editorID()/]);
		EditingUtils.setEEFtype([editor.elementEditorName()/], "eef::[editor.representation.name/]"); //$NON-NLS-1$
		FormUtils.createHelpButton(widgetFactory, parent, propertiesEditionComponent.getHelpContent([editor.editorID()/], [editor.owningViewsRepository().vrClass()/].FORM_KIND), null); //$NON-NLS-1$
		// [protected ('for create'.concat(editor.name.toJavaClassifier()).concat('Checkbox'))]

		// [/protected]
		return parent;
	}
[/template]
