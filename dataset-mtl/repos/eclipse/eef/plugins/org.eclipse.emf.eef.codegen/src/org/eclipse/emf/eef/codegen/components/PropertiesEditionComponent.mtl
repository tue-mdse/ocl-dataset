[comment encoding = UTF-8
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module PropertiesEditionComponent('http://www.eclipse.org/emf/eef/components/1.0.0','http://www.eclipse.org/emf/eef/mapping/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/generation/1.0.0')/]

[import org::eclipse::emf::eef::codegen::services::naming /]
[import org::eclipse::emf::eef::codegen::services::common /]
[import org::eclipse::emf::eef::codegen::services::imports/]

[template public PropertiesEditionComponent(peContext : PropertiesEditionContext, basePackage : String)]
[for (pec : PropertiesEditionComponent | peContext.eAllContents(PropertiesEditionComponent))]
[if (pec.needComposedEditionComponent())]
[peContext.initializeImportManager(pec.componentsPackage(), pec.pecClass())/]
[file (pec.fullFilePath(), false)]
[peContext.associatedGenModel().licenceText().trim()/]
package [pec.componentsPackage()/];[addImports(Sequence{
	'org.eclipse.emf.ecore.EObject',
	'org.eclipse.emf.eef.runtime.impl.components.ComposedPropertiesEditionComponent',
	'org.eclipse.emf.eef.runtime.providers.PropertiesEditingProvider',
	'org.eclipse.emf.eef.runtime.context.PropertiesEditingContext',
	'org.eclipse.emf.eef.runtime.api.parts.IPropertiesEditionPart',
	'org.eclipse.emf.ecore.resource.ResourceSet'})/]

[let content : String = peContext.fileContent(pec, basePackage)]
[if (peContext.associatedGenModel().useJMergeForUserCode)]
[peContext.genSortedImports()/]
[peContext.additionalImports(pec, basePackage)/]
[else]
// [protected ('for imports')]

[peContext.genSortedImports()/]
[peContext.additionalImports(pec, basePackage)/]
// [/protected]
[/if]

[content/]
[/let]
[/file]
[/if]
[/for]
[/template]

[template private fileContent(peContext : PropertiesEditionContext, pec : PropertiesEditionComponent, basePackage : String) ]
/**
 * [peContext.associatedGenModel().authorText().trim()/]
 * [peContext.associatedGenModel().generationMark()/]
 */
public class [pec.pecClass()/] extends ComposedPropertiesEditionComponent {

[for (view : View | pec.views) ? (view.explicit)]
	/**
	 * The [view.viewKey(pec)/] part
	 * [peContext.associatedGenModel().generationMark()/]
	 */
	private [include(view.pepQualifiedInterface())/] [view.viewIdentifier(pec)/];

	/**
	 * The [pec.subPECClass(view)/] sub component
	 * [peContext.associatedGenModel().generationMark()/]
	 */
	protected [include(pec.subPECQualifiedClass(view))/] [pec.subPECClass(view).toLowerFirst()/];

[/for]
[for (subPec : PropertiesEditionComponent | pec.referencedBinding.binding->filter(PropertiesEditionComponent))]
[for (view : View | subPec.views) ? (view.explicit and view.ancestors()->filter(View)->excludesAll(pec.views->asSequence()))]
		[if (view.isA1stLevelReferencedView(pec))]
	/**
	 * The [subPec.pecClass()/] sub component
	 * [peContext.associatedGenModel().generationMark()/]
	 */
	protected [include(subPec.pecQualifiedClass())/] [subPec.pecClass().toLowerFirst()/];

		[else]
	/**
	 * The [subPec.subPECClass(view)/] sub component
	 * [peContext.associatedGenModel().generationMark()/]
	 */
	protected [include(subPec.subPECQualifiedClass(view))/] [subPec.subPECClass(view).toLowerFirst()/];

		[/if]
[/for]
[/for]
	/**
	 * Parameterized constructor
	 * 
	 * @param [pec.pecModelClass().toJavaIdentifier()/] the EObject to edit
	 * [peContext.associatedGenModel().generationMark()/]
	 */
	public [pec.pecClass()/](PropertiesEditingContext editingContext, EObject [pec.pecModelClass().toJavaIdentifier()/], String editing_mode) {
		super(editingContext, editing_mode);
		if ([pec.pecModelClass().toJavaIdentifier()/] instanceof [include(pec.pecModelQualifiedClass())/]) {
			PropertiesEditingProvider provider = null;
[for (view : View | pec.views) ? (view.explicit)]
			provider = (PropertiesEditingProvider)editingContext.getAdapterFactory().adapt([pec.pecModelClass().toJavaIdentifier()/], PropertiesEditingProvider.class);
			[pec.subPECClass(view).toLowerFirst()/] = ([pec.subPECClass(view)/])provider.getPropertiesEditingComponent(editingContext, editing_mode, [pec.subPECClass(view)/].[view.viewPartConstant(pec)/], [pec.subPECClass(view)/].class);
			addSubComponent([pec.subPECClass(view).toLowerFirst()/]);
[/for]
[for (subPec : PropertiesEditionComponent | pec.referencedBinding.binding->filter(PropertiesEditionComponent))]
	[for (view : View | subPec.views) ? (view.explicit and view.ancestors()->filter(View)->excludesAll(pec.views->asSequence()))]
			provider = (PropertiesEditingProvider)editingContext.getAdapterFactory().adapt([pec.pecModelClass().toJavaIdentifier()/], PropertiesEditingProvider.class);
		[if (view.isA1stLevelReferencedView(pec))]
			[subPec.pecClass().toLowerFirst()/] = ([subPec.pecClass()/])provider.getPropertiesEditingComponent(editingContext, editing_mode, [subPec.subPECClass(view)/].[view.viewPartConstant(subPec)/], [subPec.pecClass()/].class);
			addSubComponent([subPec.pecClass().toLowerFirst()/]);
		[else]
			[subPec.pecClass().toLowerFirst()/] = ([subPec.pecClass()/])provider.getPropertiesEditingComponent(editingContext, editing_mode, [subPec.subPECClass(view)/].[view.viewPartConstant(subPec)/], [subPec.pecClass()/].class);
			addSubComponent([subPec.subPECClass(view).toLowerFirst()/]);
		[/if]
	[/for]
[/for]
		}
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.impl.components.ComposedPropertiesEditionComponent#
	 *      getPropertiesEditionPart(int, java.lang.String)
	 * [peContext.associatedGenModel().generationMark()/]
	 */
	public IPropertiesEditionPart getPropertiesEditionPart(int kind, String key) {
[for (view : View | pec.views) ? (view.explicit)]
		if ([pec.subPECClass(view)/].[view.viewPartConstant(pec)/].equals(key)) {
			[view.viewIdentifier(pec)/] = ([view.pepInterface()/])[pec.subPECClass(view).toLowerFirst()/].getPropertiesEditionPart(kind, key);
			return (IPropertiesEditionPart)[view.viewIdentifier(pec)/];
		}
[/for]
		return super.getPropertiesEditionPart(kind, key);
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.impl.components.ComposedPropertiesEditionComponent#
	 *      setPropertiesEditionPart(java.lang.Object, int,
	 *      org.eclipse.emf.eef.runtime.api.parts.IPropertiesEditionPart)
	 * [peContext.associatedGenModel().generationMark()/]
	 */
	public void setPropertiesEditionPart(java.lang.Object key, int kind, IPropertiesEditionPart propertiesEditionPart) {
[for (view : View | pec.views) ? (view.explicit)]
		if ([view.editorID()/].class == key) {
			super.setPropertiesEditionPart(key, kind, propertiesEditionPart);
			[view.viewIdentifier(pec)/] = ([view.pepInterface()/])propertiesEditionPart;
		}
[/for]
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.impl.components.ComposedPropertiesEditionComponent#
	 *      initPart(java.lang.Object, int, org.eclipse.emf.ecore.EObject,
	 *      org.eclipse.emf.ecore.resource.ResourceSet)
	 * [peContext.associatedGenModel().generationMark()/]
	 */
	public void initPart(java.lang.Object key, int kind, EObject element, ResourceSet allResource) {
[for (view : View | pec.views)]
		if (key == [view.editorID()/].class) {
			super.initPart(key, kind, element, allResource);
	[for (subPec : PropertiesEditionComponent | pec.referencedBinding.binding.oclAsType(PropertiesEditionComponent))]
		[for (refView : View | subPec.views->select(explicit))]
			[if (view.eAllContents(ViewReference).view->filter(View)->includes(refView))]
			[subPec.pecClass().toLowerFirst()/].setPropertiesEditionPart([refView.editorID()/].class, kind, [view.viewIdentifier(pec)/].get[refView.name.toJavaClassifier()/]ReferencedView());
			[subPec.pecClass().toLowerFirst()/].initPart([refView.editorID()/].class, kind, element, allResource);
			[/if]
		[/for]
	[/for]
		}
[/for]
[for (subPec : PropertiesEditionComponent | pec.referencedBinding.binding.oclAsType(PropertiesEditionComponent))]
	[for (refView : View | subPec.views->select(explicit))]
		if (key == [refView.editorID()/].class) {
			super.initPart(key, kind, element, allResource);
		[comment what about referenced view resolution in this case ? /]
	[/for]
		}
[/for]
	}
}
[/template]

[template public fullFilePath(pec : PropertiesEditionComponent)]
[pec.pecQualifiedClass().toPath()/].java
[/template]

[comment overrides this template if additional imports are needed/]
[template public additionalImports (peContext : PropertiesEditionContext, pec : PropertiesEditionComponent, basePackage : String)/]
