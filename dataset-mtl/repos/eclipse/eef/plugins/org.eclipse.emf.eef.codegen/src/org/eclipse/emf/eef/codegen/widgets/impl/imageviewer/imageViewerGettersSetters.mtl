[comment encoding = UTF-8
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module imageViewerGettersSetters('http://www.eclipse.org/emf/eef/views/1.0.0') extends org::eclipse::emf::eef::codegen::widgets::api::widgetGettersSetters/]

[import org::eclipse::emf::eef::codegen::services::common /]
[import org::eclipse::emf::eef::codegen::services::naming /]
[import org::eclipse::emf::eef::codegen::widgets::api::widgetGettersSetters /]
[import org::eclipse::emf::eef::codegen::services::imports /]

[comment ================== Getter generation ================== /]
[template public getterSignatureImplementation(elementEditor : ElementEditor) overrides getterSignatureImplementation ? (elementEditor.representationName('ImageViewer'))]
[elementEditor.getterSignature()/] {
		[include('org.eclipse.jface.viewers.ISelection')/] selection = [elementEditor.elementEditorName()/].getSelection();
		if (selection instanceof [include('org.eclipse.jface.viewers.StructuredSelection')/] && ((StructuredSelection)selection).getFirstElement() instanceof String) {
			return (String)((StructuredSelection)selection).getFirstElement();
		}
		return null;
	}
[/template]

[comment ================== Setter generation ================== /]
[template public setterDeclaration(elementEditor : ElementEditor) overrides setterDeclaration ? (elementEditor.representationName('ImageViewer'))]
[elementEditor.initSignatureDocumentation()/]
[elementEditor.initSignature()/];

[elementEditor.setterSignatureDocumentation()/]
[elementEditor.setterSignature()/];
[/template]

[template public initSignatureDocumentation(elementEditor : ElementEditor) overrides initSignatureDocumentation ? (elementEditor.representationName('ImageViewer'))]
	/**
	 * Init the [elementEditor.name/]
	 * @param key the key of the editor 
	 * @param current the new path of the pics
	 */
[/template]

[template public initSignature(elementEditor : ElementEditor) overrides initSignature ? (elementEditor.representationName('ImageViewer'))]
	public void init[elementEditor.viewPackageSignature()/](String key, String newValue)
[/template]

[template public setterImplementation(elementEditor : ElementEditor, fullInterfacePath : String) overrides setterImplementation ? (elementEditor.representationName('ImageViewer'))] 
[initSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.initSignatureImplementation()/]

[setterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.setterSignatureImplementation()/]
[/template]

[template public setterSignatureImplementation(elementEditor : ElementEditor) overrides setterSignatureImplementation ? (elementEditor.representationName('ImageViewer'))]
[elementEditor.setterSignature()/] {
		if (newValue != null) {
			[elementEditor.elementEditorName()/].setSelection(new [include('org.eclipse.jface.viewers.StructuredSelection')/](newValue));
		} else {
			[elementEditor.elementEditorName()/].setSelection(new StructuredSelection("")); //$NON-NLS-1$
		}
		[elementEditor.readOnly()/]
	}
[/template]

[template public initSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String) overrides initSignatureDocumentationImplementation ? (elementEditor.representationName('ImageViewer'))]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#init[elementEditor.viewPackageSignature()/](String key, String newValue)
	 */
[/template]

[template public initSignatureImplementation(elementEditor : ElementEditor) overrides initSignatureImplementation ? (elementEditor.representationName('ImageViewer'))]
[elementEditor.initSignature()/] {
		if (newValue != null) {
			[elementEditor.elementEditorName()/].initViewer(key, newValue);
		} else {
			[elementEditor.elementEditorName()/].initViewer(key, ""); //$NON-NLS-1$
		}
		[elementEditor.readOnly()/]
	}
[/template]
