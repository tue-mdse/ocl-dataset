[comment encoding = UTF-8
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module PackagePropertiesEditionProvider('http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/eef/generation/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/2002/GenModel')/]

[import org::eclipse::emf::eef::codegen::services::common /]
[import org::eclipse::emf::eef::codegen::services::naming /]
[import org::eclipse::emf::eef::codegen::services::imports/]
[import org::eclipse::emf::eef::codegen::services::emfCodeGen /]

[template public PackagePropertiesEditionProvider(peContext : PropertiesEditionContext, ePackage : EPackage)]
[peContext.initializeImportManager(peContext.providersPackage(), ePackage.pecPackageProviderClass())/]
	[file (peContext.fullFilePath(ePackage), false)]
[peContext.associatedGenModel().licenceText().trim()/]
package [peContext.providersPackage()/];

[let content : String = peContext.fileContent(peContext, ePackage)]
[peContext.genSortedImports()/]
[peContext.additionalImports(ePackage)/]
[content/]
[/let]
[/file]
[/template]

[template public includeAdapterFactoryImport(peContext : PropertiesEditionContext, ePackage : EPackage) post(trim())]
[let base : String = 
	if (not peContext.associatedEMFGenModel(ePackage).basePackage.oclIsUndefined()) and (peContext.associatedEMFGenModel(ePackage).basePackage.size() > 0)
	then peContext.associatedEMFGenModel(ePackage).basePackage + '.'
	else '' endif]
[include(base + ePackage.name.replaceKeywords() + '.util.' + peContext.associatedEMFGenModel(ePackage).prefix + 'AdapterFactory')/]
[/let]
[/template]

[template private fileContent(peContext : PropertiesEditionContext, ePackage : EPackage) ]
/**
 * [peContext.associatedGenModel().authorText().trim()/]
 * [peContext.associatedGenModel().generationMark()/]
 */
public class [ePackage.pecPackageProviderClass()/] extends [includeAdapterFactoryImport(ePackage)/] {

[for (eclass : EClass | ePackage.significantClass()->asOrderedSet())]
	[let pec : PropertiesEditionComponent = eclass.associatedPEC(peContext)]
		[if (not pec.oclIsUndefined() and pec.mustBeGenerated())]
	/**
	 * {@inheritDoc}
	 * @see [peContext.associatedEMFGenModel(ePackage).basePackage/].[ePackage.name/].util.[peContext.associatedEMFGenModel(ePackage).prefix/]AdapterFactory#create[eclass.name.toJavaIdentifierDelegate().toUpperFirst()/]Adapter()
	 * [peContext.associatedGenModel().generationMark()/]
	 */
	public [include('org.eclipse.emf.common.notify.Adapter')/] create[eclass.name.toJavaIdentifierDelegate().toUpperFirst()/]Adapter() {
		[if (pec.referencedBinding->size() > 0)]
		[include('java.util.List')/]<[include('org.eclipse.emf.eef.runtime.providers.PropertiesEditingProvider')/]> providers = new [include('java.util.ArrayList')/]<PropertiesEditingProvider>([pec.referencedBinding->size()/]);
		[for (binding : PropertiesEditionComponent | pec.referencedBinding.binding.oclAsType(PropertiesEditionComponent))]
		providers.add((PropertiesEditingProvider)create[binding.pecModelClass().toJavaIdentifierDelegate().toUpperFirst()/]Adapter());
		[/for]
		return new [include(pec.pecProviderQualifiedClass())/](providers);
		[else]
		return new [include(pec.pecProviderQualifiedClass())/]();
		[/if]
	}
		[/if]
	[/let]
[/for]

}
[/template]

[template private genAdapterFactoryName(peContext : PropertiesEditionContext, ePackage : EPackage)]
[if ((not peContext.associatedEMFGenModel(ePackage).basePackage.oclIsUndefined()) and (peContext.associatedEMFGenModel(ePackage).basePackage.size() > 0))][peContext.associatedEMFGenModel(ePackage).basePackage/].[/if][ePackage.name.toJavaIdentifier()/].util.[peContext.associatedEMFGenModel(ePackage).prefix/]AdapterFactory
[/template]

[template public fullFilePath(peContext : PropertiesEditionContext, ePackage : EPackage)]
[peContext.pecPackageProviderQualifiedClass(ePackage).toPath()/].java
[/template]

[comment overrides this template if additional imports are needed/]
[template public additionalImports (peContext : PropertiesEditionContext, ePackage : EPackage)/]
