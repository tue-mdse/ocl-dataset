[comment encoding = UTF-8
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module textSWTImpl('http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/eef/generation/1.0.0') extends org::eclipse::emf::eef::codegen::widgets::api::widgetSWTImpl/]

[import org::eclipse::emf::eef::codegen::services::common /]
[import org::eclipse::emf::eef::codegen::services::naming /]
[import org::eclipse::emf::eef::codegen::services::viewCommon /]
[import org::eclipse::emf::eef::codegen::services::imports /]

[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) overrides manageImports ? (widget.name = 'Text')]
[pec.addImports(Sequence{
	'org.eclipse.emf.eef.runtime.ui.widgets.SWTUtils',
	'org.eclipse.emf.eef.runtime.ui.utils.EditingUtils',
	'org.eclipse.swt.SWT',
	'org.eclipse.emf.eef.runtime.impl.notify.PropertiesEditionEvent',
	'org.eclipse.swt.widgets.Composite',
	'org.eclipse.swt.events.FocusAdapter',
	'org.eclipse.swt.events.FocusEvent',
	'org.eclipse.swt.events.KeyAdapter',
	'org.eclipse.swt.events.KeyEvent',
	'org.eclipse.swt.layout.GridData'})/]
[/template]

[template public widgetDeclaration(editor : ElementEditor) overrides widgetDeclaration ? (editor.representationName('Text'))]
	protected [include('org.eclipse.swt.widgets.Text')/] [editor.elementEditorName()/];
[/template]

[template public implementation(editor : ElementEditor) overrides implementation ? (editor.representationName('Text'))]
return create[editor.name.toJavaClassifier()/]Text(parent);
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) overrides additionalImplementation ? (editor.representationName('Text'))]
	[editor.owningViewsRepository().associatedGenModel().generationComment()/]
	protected Composite create[editor.name.toJavaClassifier()/]Text(Composite parent) {
		[if (editor.nameAsLabel)]
		SWTUtils.createPartLabel(parent, [include(editor.owningViewsRepository().qualifiedMessagesProvider())/].[editor.editorKey(editor.owningView())/], propertiesEditionComponent.isRequired([editor.editorID()/], [editor.owningViewsRepository().vrClass()/].SWT_KIND));
		[else]
		createDescription(parent, [editor.editorID()/], [editor.owningViewsRepository().messagesProvider()/].[editor.editorKey(editor.owningView())/]);
		[/if]
		[editor.elementEditorName()/] = SWTUtils.createScrollableText(parent, SWT.BORDER);
		GridData [editor.elementEditorName()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		[editor.elementEditorName()/].setLayoutData([editor.elementEditorName()/]Data);
		[editor.elementEditorName()/].addFocusListener(new FocusAdapter() {

			/**
			 * {@inheritDoc}
			 * 
			 * @see org.eclipse.swt.events.FocusAdapter#focusLost(org.eclipse.swt.events.FocusEvent)
			 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
			 */
			@Override
			@SuppressWarnings("synthetic-access")
			public void focusLost(FocusEvent e) {
				if (propertiesEditionComponent != null)
					propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/], PropertiesEditionEvent.COMMIT, PropertiesEditionEvent.SET, null, [editor.elementEditorName()/].getText()));
			}

		});
		[editor.elementEditorName()/].addKeyListener(new KeyAdapter() {

			/**
			 * {@inheritDoc}
			 * 
			 * @see org.eclipse.swt.events.KeyAdapter#keyPressed(org.eclipse.swt.events.KeyEvent)
			 * [editor.owningViewsRepository().associatedGenModel().generationMark()/]
			 */
			@Override
			@SuppressWarnings("synthetic-access")
			public void keyPressed(KeyEvent e) {
				if (e.character == SWT.CR) {
					if (propertiesEditionComponent != null)
						propertiesEditionComponent.firePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editor.editorID()/], PropertiesEditionEvent.COMMIT, PropertiesEditionEvent.SET, null, [editor.elementEditorName()/].getText()));
				}
			}

		});
		EditingUtils.setID([editor.elementEditorName()/], [editor.editorID()/]);
		EditingUtils.setEEFtype([editor.elementEditorName()/], "eef::[editor.representation.name/]"); //$NON-NLS-1$
		SWTUtils.createHelpButton(parent, propertiesEditionComponent.getHelpContent([editor.editorID()/], [editor.owningViewsRepository().vrClass()/].SWT_KIND), null); //$NON-NLS-1$
		// [protected ('for create'.concat(editor.name.toJavaClassifier()).concat('Text'))]

		// [/protected]
		return parent;
	}
[/template]
