[comment encoding = UTF-8
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module multivaluededitorControl('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/mapping/1.0.0') extends org::eclipse::emf::eef::codegen::widgets::api::widgetControl/]

[import org::eclipse::emf::eef::codegen::services::naming /]
[import org::eclipse::emf::eef::codegen::services::common /]
[import org::eclipse::emf::eef::codegen::services::typeUtils /]
[import org::eclipse::emf::eef::codegen::services::imports /]

[comment ===== Case : model = Attribute(*) - view = MultiValuedEditor ===== /]
[template public declareEObjectUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides declareEObjectUpdater ? (editionElement.model.isAttributeMany() and editionElement.representationName('MultiValuedEditor') and not editionElement.canGeneratemodelNavigation())]if (event.getKind() == [include('org.eclipse.emf.eef.runtime.impl.notify.PropertiesEditionEvent')/].SET) {
	[pec.pecModelClass().toJavaIdentifier().disambiguation('event')/].get[editionElement.model.name.toMany().toUpperFirst()/]().clear();
	[pec.pecModelClass().toJavaIdentifier().disambiguation('event')/].get[editionElement.model.name.toMany().toUpperFirst()/]().addAll((([include('org.eclipse.emf.common.util.EList')/]) event.getNewValue()));
}
[/template]

[template public liveUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides liveUpdater ? (editionElement.model.isAttributeMany() and editionElement.representationName('MultiValuedEditor'))]
[if (editionElement.model.oclAsType(EAttribute).many)]
if ([editionElement.liveUpdaterNavigationCondition(pec)/] && [view.viewIdentifier(pec)/] != null && isAccessible([editionElement.views->first().editorID()/])) {
	if (msg.getNewValue() instanceof EList<?>) {
		[view.viewIdentifier(pec)/].set[editionElement.views->first().name.toJavaClassifier()/]((EList<?>)msg.getNewValue());
	} else if (msg.getNewValue() == null) {
		[view.viewIdentifier(pec)/].set[editionElement.views->first().name.toJavaClassifier()/](new [include('org.eclipse.emf.common.util.BasicEList')/]<Object>());
	} else {
		BasicEList<Object> newValueAsList = new BasicEList<Object>();
		newValueAsList.add(msg.getNewValue());
		[view.viewIdentifier(pec)/].set[editionElement.views->first().name.toJavaClassifier()/](newValueAsList);
	}
}
[else]
//FIXME invalid case in liveUpdater(), Case : model = Attribute(*) : [editionElement.model.name/] - view = MultiValuedEditor
[/if]
[/template]

[template public updater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides updater ? (editionElement.model.isAttributeMany() and editionElement.representationName('MultiValuedEditor') and not editionElement.canGeneratemodelNavigation())]
[if (editionElement.model.many)]
if (isAccessible([editionElement.views->first().editorID()/]))
	[view.viewIdentifier(pec)/].[editionElement.views->first().viewPackageSetter()/]([pec.pecModelClass().toJavaIdentifier()/].get[editionElement.model.name.toMany().toUpperFirst()/]());
[else]
if (isAccessible([editionElement.views->first().editorID()/]))
	[view.viewIdentifier(pec)/].[editionElement.views->first().viewPackageSetter()/]([pec.pecModelClass().toJavaIdentifier()/].get[editionElement.model.name.toUpperFirst()/]());
[/if]
[/template]

[template public filterUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides filterUpdater ? (editionElement.model.isAttributeMany() and editionElement.representationName('MultiValuedEditor'))]
[comment no filters for multiValuedEditor /]
[/template]

[comment ===== Case : model = Attribute(*) - view = MultiValuedEditor - ModelNavigation ===== /]
[template public declareEObjectUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides declareEObjectUpdater ? (editionElement.model.isAttributeMany() and editionElement.representationName('MultiValuedEditor') and editionElement.canGeneratemodelNavigation())]
[editionElement.name.toJavaIdentifier()/]Settings.setValue((List<?>)event.getNewValue());
[/template]

[template public updater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides updater ? (editionElement.model.isAttributeMany() and editionElement.representationName('MultiValuedEditor') and editionElement.canGeneratemodelNavigation())]
if ([editionElement.name.toJavaIdentifier()/]Settings.getSignificantObject() != null && isAccessible([editionElement.views->first().editorID()/])) {
	[view.viewIdentifier(pec)/].set[editionElement.views->first().viewPackageSignature()/]((EList<?>)[editionElement.name.toJavaIdentifier()/]Settings.getValue());
}
[/template]