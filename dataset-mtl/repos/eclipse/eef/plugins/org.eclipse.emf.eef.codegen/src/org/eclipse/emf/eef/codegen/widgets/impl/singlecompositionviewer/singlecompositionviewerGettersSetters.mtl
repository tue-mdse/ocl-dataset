[comment encoding = UTF-8
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module singlecompositionviewerGettersSetters('http://www.eclipse.org/emf/eef/views/1.0.0') extends org::eclipse::emf::eef::codegen::widgets::api::widgetGettersSetters /]

[import org::eclipse::emf::eef::codegen::services::common /]
[import org::eclipse::emf::eef::codegen::services::naming /]
[import org::eclipse::emf::eef::codegen::widgets::api::widgetGettersSetters /]
[import org::eclipse::emf::eef::codegen::services::imports /]

[template public setterDeclaration(elementEditor : ElementEditor) overrides setterDeclaration ? (elementEditor.representationName('SingleCompositionViewer'))]
[elementEditor.initSignatureDocumentation()/]
[elementEditor.initSignature()/];

[elementEditor.setterSignatureDocumentation()/]
[elementEditor.setterSignature()/];

[elementEditor.addControlListenerSignatureDocumentation()/]
[elementEditor.addControlListenerSignature()/];
[/template]

[template public initSignature(elementEditor : ElementEditor) overrides initSignature ? (elementEditor.representationName('SingleCompositionViewer'))]
	public void init[elementEditor.viewPackageSignature()/]([include('org.eclipse.emf.ecore.EObject')/] current, [include('org.eclipse.emf.ecore.EReference')/] containingFeature, EReference feature, [include('org.eclipse.emf.edit.domain.EditingDomain')/] editingDomain)
[/template]

[template public initSignatureDocumentation(elementEditor : ElementEditor) overrides initSignatureDocumentation ? (elementEditor.representationName('SingleCompositionViewer'))]
	/**
	 * Init the [elementEditor.name/]
	 * @param current the current value
	 * @param containingFeature the feature where to navigate if necessary
	 * @param feature the feature to manage
	 * @param editingDomain
	 */
[/template]

[template public getterSignatureImplementation(elementEditor : ElementEditor) overrides getterSignatureImplementation ? (elementEditor.representationName('SingleCompositionViewer'))]
[elementEditor.getterSignature()/] {
		return [elementEditor.elementEditorName()/].getElement();
	}
[/template]

[template public setterImplementation(elementEditor : ElementEditor, fullInterfacePath : String) overrides setterImplementation ? (elementEditor.representationName('SingleCompositionViewer'))]
[initSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.initSignatureImplementation()/]

[setterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.setterSignatureImplementation()/]

[addControlListenerSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.addControlListenerSignatureImplementation()/]
[/template]

[template public setterImplementationDelegate(elementEditor : ElementEditor, fullInterfacePath : String, referencedView : View) overrides setterImplementationDelegate ? (elementEditor.representationName('SingleCompositionViewer'))]
[initSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.initSignature()/] {
		[referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.init[elementEditor.viewPackageSignature()/](current, containingFeature, feature, editingDomain);
	}

[setterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.setterSignature()/] {
		[referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.[elementEditor.viewPackageSetter()/](newValue);
	}
[/template]

[template public initSignatureImplementation(elementEditor : ElementEditor) overrides initSignatureImplementation ? (elementEditor.representationName('SingleCompositionViewer'))]
[elementEditor.initSignature()/] {
		this.[elementEditor.elementEditorName()/].setInput(current, feature, resourceSet);
		this.[elementEditor.elementEditorName()/].init(editingDomain);
		if (current != null) {
			this.[elementEditor.elementEditorName()/].setSelection(new [include('org.eclipse.jface.viewers.StructuredSelection')/](current), feature);
		}
		[elementEditor.elementEditorName()/].refresh();

	}
[/template]

[template public setterSignatureImplementation(elementEditor : ElementEditor) overrides setterSignatureImplementation ? (elementEditor.representationName('SingleCompositionViewer'))]
[elementEditor.setterSignature()/] {
		[elementEditor.elementEditorName()/].update(newValue);
		[elementEditor.readOnly()/]
	}
[/template]

[template public initSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String) overrides initSignatureDocumentationImplementation ? (elementEditor.representationName('SingleCompositionViewer'))]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#init[elementEditor.viewPackageSignature()/](EObject current, EReference containingFeature, EReference feature, EditingDomain editingDomain)
	 */
[/template]

[template public addControlListenerSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * Add a listener on [elementEditor.name/] widget control.
	 * @param listener the Control Listener
	 */
[/template]

[template public addControlListenerSignature(elementEditor : ElementEditor)]
	public void add[elementEditor.name.toJavaClassifier() /]ControlListener([include('org.eclipse.swt.events.ControlListener')/] listener)
[/template]

[template public addControlListenerSignatureImplementation(elementEditor : ElementEditor)]
[elementEditor.addControlListenerSignature() /] {
		[elementEditor.elementEditorName()/].addControlListener(listener);
	}
[/template]

[template public addControlListenerSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#init[elementEditor.viewPackageSignature()/](ControlListener listener)
	 */
[/template]

