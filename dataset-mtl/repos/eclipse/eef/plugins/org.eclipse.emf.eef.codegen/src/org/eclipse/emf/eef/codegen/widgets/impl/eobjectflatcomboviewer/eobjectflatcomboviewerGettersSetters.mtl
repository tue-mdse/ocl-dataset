[comment encoding = UTF-8
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module eobjectflatcomboviewerGettersSetters('http://www.eclipse.org/emf/eef/views/1.0.0') extends org::eclipse::emf::eef::codegen::widgets::api::widgetGettersSetters/]

[import org::eclipse::emf::eef::codegen::services::common /]
[import org::eclipse::emf::eef::codegen::services::naming /]
[import org::eclipse::emf::eef::codegen::widgets::api::widgetGettersSetters /]
[import org::eclipse::emf::eef::codegen::services::imports /]

[template public setterDeclaration(elementEditor : ElementEditor) overrides setterDeclaration ? (elementEditor.representationName('EObjectFlatComboViewer') or elementEditor.representationName('AdvancedEObjectFlatComboViewer'))]
[elementEditor.initSignatureDocumentation()/]
[elementEditor.initSignature()/];

[elementEditor.setterSignatureDocumentation()/]
[elementEditor.setterSignature()/];

[elementEditor.setterButtonModeSignatureDocumentation()/]
[elementEditor.setterButtonModeSignature()/];

[elementEditor.addFilterSignatureDocumentation()/]
[elementEditor.addFilterSignature()/];

[elementEditor.addBusinessFilterSignatureDocumentation()/]
[elementEditor.addBusinessFilterSignature()/];
[/template]

[template public initSignatureDocumentation(elementEditor : ElementEditor) overrides initSignatureDocumentation ? (elementEditor.representationName('EObjectFlatComboViewer') or elementEditor.representationName('AdvancedEObjectFlatComboViewer'))]
	/**
	 * Init the [elementEditor.name/]
	 * @param settings the combo setting
	 */
[/template]

[template public initSignature(elementEditor : ElementEditor) overrides initSignature ? (elementEditor.representationName('EObjectFlatComboViewer') or elementEditor.representationName('AdvancedEObjectFlatComboViewer'))]
	public void init[elementEditor.viewPackageSignature()/]([include('org.eclipse.emf.eef.runtime.ui.widgets.eobjflatcombo.EObjectFlatComboSettings')/] settings)
[/template]

[template public getterSignatureImplementation(elementEditor : ElementEditor) overrides getterSignatureImplementation ? (elementEditor.representationName('EObjectFlatComboViewer'))]
[elementEditor.getterSignature()/] {
		if ([elementEditor.elementEditorName()/].getSelection() instanceof [include('org.eclipse.jface.viewers.StructuredSelection')/]) {
			Object firstElement = ((StructuredSelection) [elementEditor.elementEditorName()/].getSelection()).getFirstElement();
			if (firstElement instanceof EObject)
				return (EObject) firstElement;
		}
		return null;
	}
[/template]

[template public getterSignatureImplementation(elementEditor : ElementEditor) overrides getterSignatureImplementation ? (elementEditor.representationName('AdvancedEObjectFlatComboViewer'))]
[elementEditor.getterSignature()/] {
		return [elementEditor.elementEditorName()/].getSelection();
	}
[/template]

[template public setterImplementation(elementEditor : ElementEditor, fullInterfacePath : String) overrides setterImplementation ? (elementEditor.representationName('EObjectFlatComboViewer') or elementEditor.representationName('AdvancedEObjectFlatComboViewer'))]
[initSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.initSignatureImplementation()/]

[setterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.setterSignatureImplementation()/]

[setterButtonModeSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.setterButtonModeSignatureImplementation()/]

[addFilterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.addFilterSignatureImplementation()/]

[addBusinessFilterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.addBusinessFilterSignatureImplementation()/]
[/template]

[template public setterImplementationDelegate(elementEditor : ElementEditor, fullInterfacePath : String, referencedView : View) overrides setterImplementationDelegate ? (elementEditor.representationName('EObjectFlatComboViewer') or elementEditor.representationName('AdvancedEObjectFlatComboViewer'))]
[initSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.initSignature()/] {
		[referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.init[elementEditor.viewPackageSignature()/](settings);
	}

[setterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.setterSignature()/] {
		[referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.[elementEditor.viewPackageSetter()/](newValue);
	}

[setterButtonModeSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.setterButtonModeSignature()/] {
		[referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.[elementEditor.viewPackageSetter()/]ButtonMode(newValue);
	}

[addFilterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.addFilterSignature()/] {
		[referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.addFilterTo[elementEditor.viewPackageSignature()/](filter);
	}

[addBusinessFilterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.addBusinessFilterSignature()/] {
		[referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.addBusinessFilterTo[elementEditor.viewPackageSignature()/](filter);
	}

[/template]

[template public setterSignatureImplementation(elementEditor : ElementEditor) overrides setterSignatureImplementation ? (elementEditor.representationName('EObjectFlatComboViewer'))]
[elementEditor.setterSignature()/] {
		if (newValue != null) {
			[elementEditor.elementEditorName()/].setSelection(new [include('org.eclipse.jface.viewers.StructuredSelection')/](newValue));
		} else {
			[elementEditor.elementEditorName()/].setSelection(new StructuredSelection()); //$NON-NLS-1$
		}
		[elementEditor.readOnly()/]
	}
[/template]

[template public setterSignatureImplementation(elementEditor : ElementEditor) overrides setterSignatureImplementation ? (elementEditor.representationName('AdvancedEObjectFlatComboViewer'))]
[elementEditor.setterSignature()/] {
		if (newValue != null) {
			[elementEditor.elementEditorName()/].setSelection(new [include('org.eclipse.jface.viewers.StructuredSelection')/](newValue));
		} else {
			[elementEditor.elementEditorName()/].setSelection(new StructuredSelection()); //$NON-NLS-1$
		}
		[elementEditor.readOnly()/]
	}
[/template]

[template public setterButtonModeSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String) ? (elementEditor.representationName('EObjectFlatComboViewer') or elementEditor.representationName('AdvancedEObjectFlatComboViewer'))]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#[elementEditor.viewPackageSetter()/]ButtonMode(ButtonsModeEnum newValue)
	 */
[/template]

[template public initSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String) ? (elementEditor.representationName('EObjectFlatComboViewer') or elementEditor.representationName('AdvancedEObjectFlatComboViewer'))]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#init[elementEditor.viewPackageSignature()/](EObjectFlatComboSettings)
	 */
[/template]

[template public initSignatureImplementation(elementEditor : ElementEditor) overrides initSignatureImplementation ? (elementEditor.representationName('EObjectFlatComboViewer'))]
[elementEditor.initSignature()/] {
		[elementEditor.elementEditorName()/].setInput(settings);
		if (current != null) {
			[elementEditor.elementEditorName()/].setSelection(new [include('org.eclipse.jface.viewers.StructuredSelection')/](settings.getValue()));
		}
		[elementEditor.readOnly()/]
	}
[/template]

[template public initSignatureImplementation(elementEditor : ElementEditor) overrides initSignatureImplementation ? (elementEditor.representationName('AdvancedEObjectFlatComboViewer'))]
[elementEditor.initSignature()/] {
		[elementEditor.elementEditorName()/].setInput(settings);
		if (current != null) {
			[elementEditor.elementEditorName()/].setSelection(new [include('org.eclipse.jface.viewers.StructuredSelection')/](settings.getValue()));
		}
		[elementEditor.readOnly()/]
	}
[/template]

[template public addBusinessFilterSignatureImplementation(elementEditor : ElementEditor) ? (elementEditor.representationName('EObjectFlatComboViewer') or elementEditor.representationName('AdvancedEObjectFlatComboViewer'))]
[elementEditor.addBusinessFilterSignature()/] {
		[elementEditor.elementEditorName()/].addBusinessRuleFilter(filter);
	}
[/template]

