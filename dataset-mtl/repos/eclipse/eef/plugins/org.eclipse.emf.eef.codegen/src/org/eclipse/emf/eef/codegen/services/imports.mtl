[comment encoding=UTF-8 
 *******************************************************************************
 * Copyright (c) 2011 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module imports('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/2002/GenModel')/]

[comment ************ IMPORT MANAGER ****************************************** /]

[**
 * Initializes an import manager for the given class.
 * 
 * WARNING: Using a template is mandatory to avoid queries cache side effects
 * 
 * @param caller any EObject from the components model
 * @param packageName the package of the generated class
 * @param className the generated class name
 */]
[template public initializeImportManager(caller : EObject, packageName : String, className : String) post (trim())]
[invoke(
	'org.eclipse.emf.eef.codegen.services.ImportService',
	'initializeImportManager(org.eclipse.emf.ecore.EObject,java.lang.String,java.lang.String)', 
	Sequence{caller, packageName, className}) /]
[/template]

[**
 * Adds an import sequence.
 * 
 * WARNING: Using a template is mandatory to avoid queries cache side effects
 * 
 * @param caller any EObject from the components model 
 * @param qualifiedNames the imports qualified names
 */]
[template public addImports(caller : EObject, qualifiedNames : Collection(String)) post (trim())]
[for (qualifiedName : String | qualifiedNames)]
[invoke(
	'org.eclipse.emf.eef.codegen.services.ImportService', 
	'addImport(org.eclipse.emf.ecore.EObject, java.lang.String)', 
	Sequence{caller, qualifiedName}) /]
[/for]
[/template]

[**
 * Adds an import.
 * 
 * WARNING: Using a template is mandatory to avoid queries cache side effects
 * 
 * @param caller any EObject from the components model 
 * @param qualifiedNames the imports qualified names
 */]
[template public addImport(caller : EObject, qualifiedName : String) post (trim())]
[invoke(
	'org.eclipse.emf.eef.codegen.services.ImportService', 
	'addImport(org.eclipse.emf.ecore.EObject, java.lang.String)', 
	Sequence{caller, qualifiedName}) /]
[/template]

[**
 * Includes an import, i.e. add it to the import manager and returns the class name.
 * 
 * WARNING: Using a template is mandatory to avoid queries cache side effects
 * 
 * @param caller any EObject from the components model
 * @param qualifiedName the import qualified name
 */]
[template public include(caller : EObject, qualifiedName : String) post (trim())]
[invoke(
	'org.eclipse.emf.eef.codegen.services.ImportService', 
	'addImport(org.eclipse.emf.ecore.EObject, java.lang.String)', 
	Sequence{caller, qualifiedName}) /][qualifiedName.substring(qualifiedName.lastIndex('.') + 1)/]
[/template]

[**
 * Generates the list of sorted imports
 *  
 * WARNING: Using a template is mandatory to avoid queries cache side effects
 * 
 * @param caller any EObject from the components model
 */]
[template public genSortedImports(caller : EObject) post (trim())]
[invoke(
	'org.eclipse.emf.eef.codegen.services.ImportService',
	'genSortedImports(org.eclipse.emf.ecore.EObject)',
	Sequence{caller}) /]
[/template]

[template public getImportGenModel(caller : EObject) post (trim())]
[invoke(
	'org.eclipse.emf.eef.codegen.services.ImportService',
	'getGenModel(org.eclipse.emf.ecore.EObject)',
	Sequence{caller}) /]
[/template]

[comment To fix call of import manager in a genmodel which is not the genmodel used by the default import manager /]
[template public initializeImportManagerForGenmodel(caller : EObject, model : GenModel, packageName : String, className : String) post (trim())]
[invoke(
	'org.eclipse.emf.eef.codegen.services.ImportService',
	'initializeImportManagerForGenmodel(org.eclipse.emf.ecore.EObject, org.eclipse.emf.codegen.ecore.genmodel.GenModel,java.lang.String,java.lang.String)', 
	Sequence{caller, model, packageName, className}) /]
[/template]