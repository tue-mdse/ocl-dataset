[comment encoding = UTF-8 /]
[module Plugin('http://www.eclipse.org/emf/2002/GenModel')/]

[comment
/**
 * <copyright>
 *
 * Copyright (c) 2002-2004 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   IBM - Initial API and implementation
 *
 * </copyright>
 */
/]

[import org::eclipse::emf::eef::codegen::ecore::services::common /]
[import org::eclipse::emf::eef::codegen::ecore::services::header /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::StringUtil /]

[template public plugin(genModel : GenModel) ? (genModel.hasModelPluginClass()) { packageName : String = genModel.getModelPluginPackageName(); className : String = genModel.getModelPluginClassName(); }]
[genModel.initializeImportManager(packageName, className)/]
[file (genModel.pluginFilePath(), false, 'UTF-8')]
[genModel.includeHeader()/]
package [genModel.getModelPluginPackageName()/];
[comment]<%genModel.markImportLocation(stringBuffer, genPackage);%>[/comment]
[let content : String = genModel.pluginFileContent()]
[genModel.genSortedImports()/]
[content/]
[/let]
[/file]
[/template]

[template protected pluginFileContent(genModel : GenModel)]
[genModel.addImport('org.eclipse.emf.common.EMFPlugin')/]
[genModel.addImport('org.eclipse.emf.common.util.ResourceLocator')/]

/**
 * This is the central singleton for the [genModel.modelName/] model plugin.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public final class [genModel.getModelPluginClassName()/] extends EMFPlugin
{
[if (genModel.hasCopyrightField())]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final [genModel.getImportedName('java.lang.String')/] copyright = [genModel.getCopyrightFieldLiteral()/];[genModel.getNonNLS()/]

[/if]
	/**
	 * Keep track of the singleton.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final [genModel.getModelPluginClassName()/] INSTANCE = new [genModel.getModelPluginClassName()/]();

[if (genModel.runtimePlatform <> GenRuntimePlatform::GWT)]
	/**
	 * Keep track of the singleton.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static Implementation plugin;

[/if]
	/**
	 * Create the instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public [genModel.getModelPluginClassName()/]()
	{
		super(new ResourceLocator ['[]'/] {});
	}

	/**
	 * Returns the singleton instance of the Eclipse plugin.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the singleton instance.
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public ResourceLocator getPluginResourceLocator()
	{
[if (genModel.runtimePlatform = GenRuntimePlatform::GWT)]
		return null;
[else]
		return plugin;
[/if]
	}

[if (genModel.runtimePlatform <> GenRuntimePlatform::GWT)]
	/**
	 * Returns the singleton instance of the Eclipse plugin.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the singleton instance.
	 * @generated
	 */
	public static Implementation getPlugin()
	{
		return plugin;
	}

	/**
	 * The actual implementation of the Eclipse <b>Plugin</b>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class Implementation extends EclipsePlugin
	{
		/**
		 * Creates an instance.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
[if (genModel.needsRuntimeCompatibility())]
		 * @param descriptor the description of the plugin.
[/if]
		 * @generated
		 */
		public Implementation([if (genModel.needsRuntimeCompatibility())][genModel.getImportedName('org.eclipse.core.runtime.IPluginDescriptor')/] descriptor[/if])
		{
			super([if (genModel.needsRuntimeCompatibility())]descriptor[/if]);

			// Remember the static instance.
			//
			plugin = this;
		}
	}

[/if]
}

[/template]

[query public pluginFilePath(genModel : GenModel) : String
	= genModel.extractSourceDirectory(genModel.modelDirectory) + '/'
		+ genModel.getQualifiedModelPluginClassName().toPath() + '.java' /]
