[comment encoding = UTF-8 
/**
 * <copyright>
 *
 * Copyright (c) 2002-2011 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   IBM - Initial API and implementation
 *   Obeo - Migrate to Acceleo
 *
 * </copyright>
 */
/]
[module Plugin('http://www.eclipse.org/emf/2002/GenModel')/]

[import org::eclipse::emf::eef::codegen::ecore::services::header /]
[import org::eclipse::emf::eef::codegen::ecore::services::common /]
[import org::eclipse::emf::eef::codegen::ecore::services::StringUtil /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClass /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenFeature /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenEnum /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenEnumLiteral /]

[template public Plugin(genModel : GenModel) { packageName : String = genModel.getEditPluginPackageName() ; className : String = genModel.getEditPluginClassName() }]
[initializeImportManager(packageName, className)/]
[genModel.addImport('org.eclipse.emf.common.EMFPlugin')/]
[genModel.addImport('org.eclipse.emf.common.util.ResourceLocator')/]

[file (genModel.editPath(packageName, className), false, 'UTF-8')]
[includeHeader()/]
package [packageName/];
[let content : String = pluginFileContent(packageName, className)]
[genModel.genSortedImports()/]

[content/]
[/let]
[/file]
[/template]

[template public pluginFileContent(genModel : GenModel, packageName : String, className : String)]
/**
 * This is the central singleton for the [genModel.modelName/] edit plugin.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public final class [className/] extends EMFPlugin
{
[if (genModel.hasCopyrightField())]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final [genModel.getImportedName('java.lang.String')/] copyright = [genModel.getCopyrightFieldLiteral()/];[genModel.getNonNLS()/]

[/if]
	/**
	 * Keep track of the singleton.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final [className/] INSTANCE = new [className/]();

[if (genModel.runtimePlatform <> GenRuntimePlatform::GWT)]
	/**
	 * Keep track of the singleton.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static Implementation plugin;

[/if]
	/**
	 * Create the instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public [className/]()
	{
		super
		  (new ResourceLocator [genModel.genSquareBrackets('')/] 
		   {
[for (pluginClassName : String | genModel.getEditResourceDelegateImportedPluginClassNames(packageName, className))]
		     [pluginClassName/].INSTANCE,
[/for]
		   });
	}

	/**
	 * Returns the singleton instance of the Eclipse plugin.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the singleton instance.
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public ResourceLocator getPluginResourceLocator()
	{
[if (genModel.runtimePlatform = GenRuntimePlatform::GWT)]
		return null;
[else]
		return plugin;
[/if]
	}

[if (genModel.runtimePlatform <> GenRuntimePlatform::GWT)]
	/**
	 * Returns the singleton instance of the Eclipse plugin.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the singleton instance.
	 * @generated
	 */
	public static Implementation getPlugin()
	{
		return plugin;
	}

	/**
	 * The actual implementation of the Eclipse <b>Plugin</b>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class Implementation extends EclipsePlugin
	{
		/**
		 * Creates an instance.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
[if (genModel.needsRuntimeCompatibility())]
		 * @param descriptor the description of the plugin.
[/if]
		 * @generated
		 */
		public Implementation([if (genModel.needsRuntimeCompatibility())][genModel.getImportedName('org.eclipse.core.runtime.IPluginDescriptor')/] descriptor[/if])
		{
			super([if (genModel.needsRuntimeCompatibility())]descriptor[/if]);

			// Remember the static instance.
			//
			plugin = this;
		}
	}

[else]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static final [genModel.getQualifiedEditPluginClassName().concat('Properties')/] PROPERTIES = com.google.gwt.core.client.GWT.create([genModel.getQualifiedEditPluginClassName().concat('Properties')/].class);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getString(String key, boolean translate)
	{
[for (genPackage : GenPackage | genModel.getAllGenAndUsedGenPackagesWithClassifiers()) separator ('else ')]
  [if (genPackage.genModel = genModel or not genPackage.genModel.hasEditSupport())]
    [for (genClass : GenClass | genPackage.genClasses)]
		if ("_UI_[genClass.getName()/]_type".equals(key)) return PROPERTIES.[genClass.getUncapName()/]Type();
    [/for]
  [/if]
[/for]
		[if (not genModel.getAllGenAndUsedGenPackagesWithClassifiers()->isEmpty() and (genModel.getAllGenAndUsedGenPackagesWithClassifiers()->first().genModel = genModel or not genModel.getAllGenAndUsedGenPackagesWithClassifiers()->first().genModel.hasEditSupport()))] else [/if] if ("_UI_Unknown_type".equals(key)) return PROPERTIES.unknownType();
		else if ("_UI_Unknown_datatype".equals(key)) return PROPERTIES.unknownDatatype();
[for (genFeature : GenFeature | genModel.getFilteredAllGenFeatures())]
		else if ("_UI_[genFeature.genClass.getName()/]_[genFeature.getName()/]_feature".equals(key)) return PROPERTIES.[genFeature.genClass.getUncapName()/]_[genFeature.getCapName()/]Feature();
  [if (not genFeature.propertyDescription.oclIsUndefined() and genFeature.propertyDescription->size() > 0)]
		else if ("_UI_[genFeature.genClass.getName()/]_[genFeature.getName()/]_description".equals(key)) return PROPERTIES.[genFeature.genClass.getUncapName()/]_[genFeature.getCapName()/]Description();
  [/if]
[/for]
		else if ("_UI_Unknown_feature".equals(key)) return PROPERTIES.unknownFeature();
[for (genPackage : GenPackage | genModel.getAllGenAndUsedGenPackagesWithClassifiers())]
  [if (genPackage.genModel = genModel or not genPackage.genModel.hasEditSupport())]
    [for (genEnum : GenEnum | genPackage.genEnums)]
      [for (genEnumLiteral : GenEnumLiteral | genEnum.genEnumLiterals)]
		else if ("_UI_[genEnum.getName()/]_[genEnumLiteral.getName()/]_literal".equals(key)) return PROPERTIES.[genEnum.getSafeUncapName()/]_[genEnumLiteral.getName()/]Literal();
      [/for]
    [/for]
  [/if]
[/for]
[for (category : String | genModel.getPropertyCategories())]
[genModel.getPropertyCategoryKey(category)/] = [category/]
		else if ("[genModel.getPropertyCategoryKey(category)/]".equals(key)) return PROPERTIES.[genModel.getPropertyCategoryKey(category)/]();
[/for]
		else return key;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getString(String key, Object [genModel.genSquareBrackets('')/] substitutions, boolean translate)
	{
[if (genModel.creationCommands)]
		if ("_UI_CreateChild_text".equals(key)) return PROPERTIES.createChildText(substitutions[genModel.genSquareBrackets('0')/]);
		else if ("_UI_CreateChild_text2".equals(key)) return PROPERTIES.createChildText2(substitutions[genModel.genSquareBrackets('0')/], substitutions[genModel.genSquareBrackets('1')/]);
		else if ("_UI_CreateChild_text3".equals(key)) return PROPERTIES.createChildText3(substitutions[genModel.genSquareBrackets('1')/]);
		else if ("_UI_CreateChild_tooltip".equals(key)) return PROPERTIES.createChildTooltip(substitutions[genModel.genSquareBrackets('0')/], substitutions[genModel.genSquareBrackets('1')/]);
		else if ("_UI_CreateChild_description".equals(key)) return PROPERTIES.createChildDescripition(substitutions[genModel.genSquareBrackets('0')/], substitutions[genModel.genSquareBrackets('1')/], substitutions[genModel.genSquareBrackets('2')/]);
		else if ("_UI_CreateSibling_description".equals(key)) return PROPERTIES.createSiblingDescription(substitutions[genModel.genSquareBrackets('0')/], substitutions[genModel.genSquareBrackets('1')/], substitutions[genModel.genSquareBrackets('2')/]);
[/if]
		[if (not genModel.creationCommands)]else [/if]if ("_UI_PropertyDescriptor_description".equals(key)) return PROPERTIES.propertyDescriptorDescription(substitutions[genModel.genSquareBrackets('0')/], substitutions[genModel.genSquareBrackets('1')/]);
		else return key;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static final [genModel.getQualifiedEditPluginClassName().concat('Images')/] IMAGES = com.google.gwt.core.client.GWT.create([genModel.getQualifiedEditPluginClassName().concat('Images')/].class);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object getImage(String key)
	{
[for (genPackage : GenPackage | genModel.getAllGenAndUsedGenPackagesWithClassifiers()) separator ('else ')]
  [for (genClass : GenClass | genPackage.genClasses)]
    [if (genClass.image)]
		if ("[image/]".equals(key)) return IMAGES.[genClass.getSafeUncapName()/]();
    [/if]
  [/for]
[/for]
		[if (not genModel.getAllGenAndUsedGenPackagesWithClassifiers()->isEmpty())]else [/if] return key;
	}

[/if]
}
[/template]

[query public image(genClass : GenClass) : String = genClass.getItemIconFileName().substring(genClass.getItemIconFileName().lastIndex('/icons/') + 7, genClass.getItemIconFileName()->size() - 4) /]
