[comment encoding = UTF-8 /]
[module ResourceFactoryClass('http://www.eclipse.org/emf/2002/GenModel', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipse::emf::eef::codegen::ecore::services::common /]
[import org::eclipse::emf::eef::codegen::ecore::services::header /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenPackage /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClass /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClassifier /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenFeature /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenDataType /]
[import org::eclipse::emf::eef::codegen::ecore::services::StringUtil /]

[comment]
/**
 * <copyright>
 *
 * Copyright (c) 2002-2006 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   IBM - Initial API and implementation
 *
 * </copyright>
 */
[/comment]

[template public resourceFactoryClass(genPackage : GenPackage) { genModel : GenModel = genPackage.genModel; packageName : String = genPackage.getUtilitiesPackageName(); className : String = genPackage.getResourceFactoryClassName();} ]
[genModel.initializeImportManager(packageName, className)/]

[genModel.getImportedName('org.eclipse.emf.common.util.URI')/]
[genModel.getImportedName('org.eclipse.emf.ecore.resource.Resource')/]

[file (genPackage.resourceFactoryClassPath(), false, 'UTF-8')]
[genModel.includeHeader()/]
package [packageName/];
[let content : String = genPackage.resourceFactoryFileContent(genModel)]
[genModel.genSortedImports()/]

[content/]
[/let]
[/file]
[/template]

[template protected resourceFactoryFileContent(genPackage : GenPackage, genModel : GenModel)]
/**
 * <!-- begin-user-doc -->
 * The <b>Resource Factory</b> associated with the package.
 * <!-- end-user-doc -->
 * @see [genPackage.getQualifiedResourceClassName()/]
 * @generated
 */
public class [genPackage.getResourceFactoryClassName()/] extends [genPackage.getImportedResourceFactoryBaseClassName()/] {
[if (genModel.hasCopyrightField())]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final [genModel.getImportedName('java.lang.String')/] copyright = [genModel.getCopyrightFieldLiteral()/];[genModel.getNonNLS()/]

[/if]
[if (genPackage.hasExtendedMetaData() and not genPackage.hasTargetNamespace())]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genModel.getImportedName('org.eclipse.emf.ecore.util.ExtendedMetaData')/] extendedMetaData;

[else][if (genPackage.hasXMLMap())]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genModel.getImportedName('org.eclipse.emf.ecore.xmi.XMLResource$XMLMap')/] xmlMap = new [genModel.getImportedName('org.eclipse.emf.ecore.xmi.impl.XMLMapImpl')/]();

[/if][/if]
	/**
	 * Creates an instance of the resource factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public [genPackage.getResourceFactoryClassName()/]()
	{
		super();
[if (genPackage.hasExtendedMetaData() and not genPackage.hasTargetNamespace())]
		extendedMetaData = new [genModel.getImportedName('org.eclipse.emf.ecore.util.BasicExtendedMetaData')/](new [genModel.getImportedName('org.eclipse.emf.ecore.impl.EPackageRegistryImpl')/]([genModel.getImportedName('org.eclipse.emf.ecore.EPackage')/].Registry.INSTANCE));
		extendedMetaData.putPackage(null, [genPackage.getImportedPackageInterfaceName()/].eINSTANCE);
[else][if (genPackage.hasXMLMap() and not genPackage.hasTargetNamespace())]
		xmlMap.setNoNamespacePackage([genPackage.getImportedPackageInterfaceName()/].eINSTANCE);
[/if][/if]
	}

	/**
	 * Creates an instance of the resource.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
  [if (genModel.useClassOverrideAnnotation())]
	@Override
  [/if]
	public Resource createResource(URI uri)
	{
[if (genPackage.hasExtendedMetaData())]
		[genModel.getImportedName('org.eclipse.emf.ecore.xmi.XMLResource')/] result = new [genPackage.getResourceClassName()/](uri);
		result.getDefaultSaveOptions().put([genModel.getImportedName('org.eclipse.emf.ecore.xmi.XMLResource')/].OPTION_EXTENDED_META_DATA, [if (genPackage.hasTargetNamespace())]Boolean.TRUE[else]extendedMetaData[/if]);
		result.getDefaultLoadOptions().put([genModel.getImportedName('org.eclipse.emf.ecore.xmi.XMLResource')/].OPTION_EXTENDED_META_DATA, [if (genPackage.hasTargetNamespace())]Boolean.TRUE[else]extendedMetaData[/if]);

		result.getDefaultSaveOptions().put([genModel.getImportedName('org.eclipse.emf.ecore.xmi.XMLResource')/].OPTION_SCHEMA_LOCATION, Boolean.TRUE);

		result.getDefaultLoadOptions().put([genModel.getImportedName('org.eclipse.emf.ecore.xmi.XMLResource')/].OPTION_USE_ENCODED_ATTRIBUTE_STYLE, Boolean.TRUE);
		result.getDefaultSaveOptions().put([genModel.getImportedName('org.eclipse.emf.ecore.xmi.XMLResource')/].OPTION_USE_ENCODED_ATTRIBUTE_STYLE, Boolean.TRUE);

		result.getDefaultLoadOptions().put([genModel.getImportedName('org.eclipse.emf.ecore.xmi.XMLResource')/].OPTION_USE_LEXICAL_HANDLER, Boolean.TRUE);
	[if (genPackage.dataTypeConverters and genPackage.hasDocumentRoot())]
		result.getDefaultLoadOptions().put([genPackage.getResourceClassName()/].OPTION_USE_DATA_CONVERTER, Boolean.TRUE);
	[/if]
[else][if (genPackage.hasXMLMap())]
		[genModel.getImportedName('org.eclipse.emf.ecore.xmi.XMLResource')/] result = new [genPackage.getResourceClassName()/](uri);
		result.getDefaultSaveOptions().put([genModel.getImportedName('org.eclipse.emf.ecore.xmi.XMLResource')/].OPTION_XML_MAP, xmlMap);
		result.getDefaultLoadOptions().put([genModel.getImportedName('org.eclipse.emf.ecore.xmi.XMLResource')/].OPTION_XML_MAP, xmlMap);
[else]
		Resource result = new [genPackage.getResourceClassName()/](uri);
[/if][/if]
		return result;
	}

} //[genPackage.getResourceFactoryClassName()/]
[/template]

[query public resourceFactoryClassPath(genPackage : GenPackage) : String
	= genPackage.genModel.extractSourceDirectory(genPackage.genModel.modelDirectory) + '/'
		+ genPackage.getQualifiedResourceFactoryClassName().toPath() + '.java'/]
