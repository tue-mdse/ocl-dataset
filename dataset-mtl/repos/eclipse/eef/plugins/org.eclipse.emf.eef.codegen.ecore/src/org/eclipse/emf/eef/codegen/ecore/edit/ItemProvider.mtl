[comment encoding = UTF-8
/**
 * <copyright>
 *
 * Copyright (c) 2002-2011 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   IBM - Initial API and implementation
 *   Obeo - Migrate to Acceleo
 *
 * </copyright>
 */
/]
[module ItemProvider('http://www.eclipse.org/emf/2002/GenModel', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipse::emf::eef::codegen::ecore::services::common /]
[import org::eclipse::emf::eef::codegen::ecore::services::header /]
[import org::eclipse::emf::eef::codegen::ecore::services::StringUtil /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClass /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenPackage /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenFeature /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenEnum /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenDataType /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenTypedElement /]

[template public ItemProvider(genClass : GenClass) { genPackage : GenPackage = genClass.genPackage ; genModel : GenModel = genPackage.genModel ; packageName : String = genPackage.getProviderPackageName() ; className : String = genClass.getProviderClassName() }]
[genModel.initializeImportManager(packageName, className)/]
[file (genModel.editPath(packageName, className), false, 'UTF-8')]
[includeHeader()/]
package [packageName/];

[genModel.addImports()/]
[let content : String = genModel.fileContent(genPackage, genClass, className)]
[genModel.genSortedImports()/]

[content/]
[/let]
[/file]
[/template]

[template public addImports (genModel : GenModel) post (trim())]
[genModel.addImport('org.eclipse.emf.common.notify.AdapterFactory')/]
[genModel.addImport('org.eclipse.emf.common.notify.Notification')/]
[genModel.addImport('org.eclipse.emf.edit.provider.IEditingDomainItemProvider')/]
[genModel.addImport('org.eclipse.emf.edit.provider.IItemLabelProvider')/]
[genModel.addImport('org.eclipse.emf.edit.provider.IItemPropertySource')/]
[genModel.addImport('org.eclipse.emf.edit.provider.IStructuredItemContentProvider')/]
[genModel.addImport('org.eclipse.emf.edit.provider.ITreeItemContentProvider')/]
[/template]

[template public fileContent(genModel : GenModel, genPackage : GenPackage, genClass : GenClass, className : String)]
/**
 * This is the item provider adapter for a {@link [genClass.getQualifiedInterfaceName()/]} object.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class [className/]
	extends [if (not genClass.getProviderBaseClassName().oclIsUndefined())][genClass.getProviderBaseClassName()/][else][genModel.getImportedName('org.eclipse.emf.edit.provider.ItemProviderAdapter')/][/if]
	implements [for (string : String | genPackage.getProviderSupportedTypes()) separator (', ')][genModel.getImportedName(string)/][/for]
{
[if (genModel.hasCopyrightField())]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final [genModel.getImportedName('java.lang.String')/] copyright = [genModel.getCopyrightFieldLiteral()/];[genModel.getNonNLS()/]

[/if]
	/**
	 * This constructs an instance from a factory and a notifier.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public [genClass.getProviderClassName()/](AdapterFactory adapterFactory)
	{
		super(adapterFactory);
	}

	/**
	 * This returns the property descriptors for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public [genModel._List()/] getPropertyDescriptors(Object object)
	{
		if (itemPropertyDescriptors == null)
		{
			super.getPropertyDescriptors(object);

[for (genFeature : GenFeature | genClass.getPropertyFeatures())]
			add[genFeature.getCapName()/]PropertyDescriptor(object);
[/for]
		}
		return itemPropertyDescriptors;
	}

[for (genFeature : GenFeature | genClass.getPropertyFeatures())]
	/**
	 * This adds a property descriptor for the [genFeature.getFormattedName()/] feature.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void add[genFeature.getCapName()/]PropertyDescriptor(Object object)
	{
[comment]<%@ include file="ItemProvider/addPropertyDescriptor.override.javajetinc" fail="alternative" %>
<%@ start %>[/comment]
		itemPropertyDescriptors.add
			(createItemPropertyDescriptor
				((([genModel.getImportedName('org.eclipse.emf.edit.provider.ComposeableAdapterFactory')/])adapterFactory).getRootAdapterFactory(),
				 getResourceLocator(),
				 getString("_UI_[genFeature.genClass.getName()/]_[genFeature.getName()/]_feature"),[genModel.getNonNLS()/]
  [if (genFeature.propertyDescription.oclIsUndefined() or genFeature.propertyDescription.size() = 0)]
				 getString("_UI_PropertyDescriptor_description", "_UI_[genFeature.genClass.getName()/]_[genFeature.getName()/]_feature", "_UI_[genFeature.genClass.getName()/]_type"),[genModel.getNonNLS()/][genModel.getNonNLS(2)/][genModel.getNonNLS(3)/]
  [else]
				 getString("_UI_[genFeature.genClass.getName()/]_[genFeature.getName()/]_description"),[genModel.getNonNLS()/]
  [/if]
				 [genFeature.getQualifiedFeatureAccessor()/],
				 [if (genFeature.property = genmodel::GenPropertyKind::Editable)]true[else]false[/if],
				 [if (genFeature.propertyMultiLine)]true[else]false[/if],
				 [if (genFeature.propertySortChoices)]true[else]false[/if],
  [if (genFeature.isReferenceType())]
				 null,
  [else]
				 [genModel.getImportedName('org.eclipse.emf.edit.provider.ItemPropertyDescriptor')/].[genFeature.getPropertyImageName()/],
  [/if]
  [if (genFeature.propertyCategory.oclIsUndefined() or genFeature.propertyCategory.size() = 0)]
				 null,
  [else]
				 getString("[genModel.getPropertyCategoryKey(genFeature.propertyCategory)/]"),[genModel.getNonNLS()/]
  [/if]
  [if (genFeature.propertyFilterFlags->isEmpty())]
				 null));
  [else]
				 new String[genModel.genSquareBrackets('')/]  {
    	[genFeature.propertyFilterFlags.declareFilterFlag()->sep(',' + genModel.getLineDelimiter() + genModel.getNonNLS())/]
				 }));
  [/if]
[comment]<%@ end %><%//ItemProvider/addPropertyDescriptor.override.javajetinc%>[/comment]
	}

[/for]
[if (genClass.getChildrenFeatures()->notEmpty())]
	/**
	 * This specifies how to implement {@link #getChildren} and is used to deduce an appropriate feature for an
	 * {@link org.eclipse.emf.edit.command.AddCommand}, {@link org.eclipse.emf.edit.command.RemoveCommand} or
	 * {@link org.eclipse.emf.edit.command.MoveCommand} in {@link #createCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public [genModel.getImportedName('java.util.Collection')/][if (genModel.useGenerics())]<? extends [genModel.getImportedName('org.eclipse.emf.ecore.EStructuralFeature')/]>[/if] getChildrenFeatures(Object object)
	{
		if (childrenFeatures == null)
		{
			super.getChildrenFeatures(object);
[for (genFeature : GenFeature | genClass.getChildrenFeatures())]
			childrenFeatures.add([genFeature.getQualifiedFeatureAccessor()/]);
[/for]
		}
		return childrenFeatures;
	}

[if (genClass.getChildrenFeatures()->notEmpty())]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	protected [genModel.getImportedName('org.eclipse.emf.ecore.EStructuralFeature')/] getChildFeature(Object object, Object child)
	{
		// Check the type of the specified child object and return the proper feature to use for
		// adding (see {@link AddCommand}) it as a child.

		return super.getChildFeature(object, child);
	}

[/if]
[/if]
[if (genClass.needsHasChildrenMethodOverride())]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public boolean hasChildren(Object object)
	{
		return hasChildren(object, [genModel.optimizedHasChildren/]);
	}

[/if]
[if (genClass.image)]
	/**
	 * This returns [genClass.getName()/].gif.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public Object getImage(Object object)
	{
		return overlayImage(object, getResourceLocator().getImage("full/obj16/[genClass.getName()/]"));[genModel.getNonNLS()/]
	}

[/if]
[comment <%if (genModel.getRuntimeVersion().getValue() >= GenRuntimeVersion.EMF26_VALUE && !genModel.isCreationIcons()) {%>/]
[if (not genModel.creationIcons)]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	protected boolean shouldComposeCreationImage() 
	{
		return true;
	}

[/if]
	/**
	 * This returns the label text for the adapted class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public String getText(Object object)
	{
[comment]<%@ include file="ItemProvider/getText.override.javajetinc" fail="alternative" %>
<%@ start %>[/comment]
[if (genClass.isMapEntry())]
		[genClass.getImportedInterfaceName()/][if (genModel.useGenerics())]<?, ?>[/if] [genClass.getSafeUncapName()/] = ([genClass.getImportedInterfaceName()/][if (genModel.useGenerics())]<?, ?>[/if])object;
  [if (not genClass.getMapEntryKeyFeature().propertyMultiLine and not genClass.getMapEntryValueFeature().propertyMultiLine)]
		return "" + [genClass.getSafeUncapName()/].getKey() + " -> " + [genClass.getSafeUncapName()/].getValue();[genModel.getNonNLS()/][genModel.getNonNLS(2)/]
  [else]
    [if (genClass.getMapEntryKeyFeature().propertyMultiLine)]
		String key = crop("" + [genClass.getSafeUncapName()/].getKey());[genModel.getNonNLS()/]
    [else]
		String key = "" + [genClass.getSafeUncapName()/].getKey();[genModel.getNonNLS()/]
    [/if]
    [if (genClass.getMapEntryValueFeature().propertyMultiLine)]
		String value = crop("" + [genClass.getSafeUncapName()/].getValue());[genModel.getNonNLS()/]
    [else]
		String value = "" + [genClass.getSafeUncapName()/].getValue();[genModel.getNonNLS()/]
    [/if]
		return key + " -> " + value;[genModel.getNonNLS()/]
  [/if]
[elseif (not genClass.labelFeature.oclIsUndefined())][let labelFeature : GenFeature  = genClass.labelFeature]
  [if (labelFeature.isPrimitiveType() and not labelFeature.genClass.dynamic and not labelFeature.isSuppressedGetVisibility())]
		[genClass.getImportedInterfaceName()/][genClass.getInterfaceWildTypeArguments()/] [genClass.getSafeUncapName()/] = ([genClass.getImportedInterfaceName()/][genClass.getInterfaceWildTypeArguments()/])object;
		return getString("_UI_[genClass.getName()/]_type") + " " + [genClass.getSafeUncapName()/].[genClass.labelFeature.getGetAccessor()/]();[genModel.getNonNLS()/][genModel.getNonNLS(2)/]
  [else]
    [if (labelFeature.isStringType() and not labelFeature.genClass.dynamic and not labelFeature.isSuppressedGetVisibility())]
      [if (labelFeature.propertyMultiLine)]
		String label = crop((([genClass.getImportedInterfaceName()/][genClass.getInterfaceWildTypeArguments()/])object).[labelFeature.getGetAccessor()/]());
      [else]
		String label = (([genClass.getImportedInterfaceName()/][genClass.getInterfaceWildTypeArguments()/])object).[labelFeature.getGetAccessor()/]();
      [/if]
    [else]
      [if (labelFeature.isSuppressedGetVisibility() or labelFeature.genClass.dynamic)]
		Object labelValue = ((EObject)object).eGet([labelFeature.getQualifiedFeatureAccessor()/]);
      [else]
		[labelFeature.getRawImportedType()/] labelValue = (([genClass.getImportedInterfaceName()/][genClass.getInterfaceWildTypeArguments()/])object).[labelFeature.getGetAccessor()/]();
      [/if]
		String label = labelValue == null ? null : labelValue.toString();
    [/if]
		return label == null || label.length() == 0 ?
			getString("_UI_[genClass.getName()/]_type") :[genModel.getNonNLS()/]
			getString("_UI_[genClass.getName()/]_type") + " " + label;[genModel.getNonNLS()/][genModel.getNonNLS(2)/]
  [/if]
  [/let]
[else]
		return getString("_UI_[genClass.getName()/]_type");[genModel.getNonNLS()/]
[/if]
[comment]<%@ end %><%//ItemProvider/getText.override.javajetinc%>[/comment]
	}

	/**
	 * This handles model notifications by calling {@link #updateChildren} to update any cached
	 * children and by creating a viewer notification, which it passes to {@link #fireNotifyChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public void notifyChanged(Notification notification)
	{
		updateChildren(notification);
[if (genClass.getLabelNotifyFeatures()->notEmpty() or genClass.getContentNotifyFeatures()->notEmpty() or genClass.getLabelAndContentNotifyFeatures()->notEmpty())]

		switch (notification.getFeatureID([genClass.getRawImportedInterfaceName()/].class))
		{
  [if (genClass.getLabelNotifyFeatures()->notEmpty())]
    [for (genFeature : GenFeature | genClass.getLabelNotifyFeatures())]
			case [genClass.getQualifiedFeatureID(genFeature)/]:
    [/for]
				fireNotifyChanged(new [genModel.getImportedName('org.eclipse.emf.edit.provider.ViewerNotification')/](notification, notification.getNotifier(), false, true));
				return;
  [/if]
  [if (genClass.getContentNotifyFeatures()->notEmpty())]
    [for (genFeature : GenFeature | genClass.getContentNotifyFeatures())]
			case [genClass.getQualifiedFeatureID(genFeature)/]:
    [/for]
				fireNotifyChanged(new [genModel.getImportedName('org.eclipse.emf.edit.provider.ViewerNotification')/](notification, notification.getNotifier(), true, false));
				return;
  [/if]
  [if (genClass.getLabelAndContentNotifyFeatures()->notEmpty())]
    [for (genFeature : GenFeature | genClass.getLabelAndContentNotifyFeatures())]
			case [genClass.getQualifiedFeatureID(genFeature)/]:
    [/for]
				fireNotifyChanged(new [genModel.getImportedName('org.eclipse.emf.edit.provider.ViewerNotification')/](notification, notification.getNotifier(), true, true));
				return;
  [/if]
		}
[/if]
		super.notifyChanged(notification);
	}

[if (genModel.creationCommands)]
	/**
	 * This adds {@link org.eclipse.emf.edit.command.CommandParameter}s describing the children
	 * that can be created under this object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	protected void collectNewChildDescriptors([genModel.getImportedName('java.util.Collection')/][if (genModel.useGenerics())]<[genModel.getImportedName('java.lang.Object')/]>[/if] newChildDescriptors, Object object)
	{
		super.collectNewChildDescriptors(newChildDescriptors, object);
    [for (genClass.getChildCreationData())]
      [if (getChildCreationDataCreateFeature().isFeatureMapType())]
        [if (getChildCreationDataDelegatedFeature().isReferenceType())]
[comment]<%@ include file="ItemProvider/newChildDescriptorsReferenceDelegatedFeature.override.javajetinc" fail="alternative"%>
<%@ start %>[/comment]

		newChildDescriptors.add
			(createChildParameter
				([getChildCreationDataCreateFeature().getQualifiedFeatureAccessor()/],
				 [genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMapUtil')/].createEntry
					([getChildCreationDataDelegatedFeature().getQualifiedFeatureAccessor()/],
          [if (getChildCreationDataCreateClassifier().oclAsType(GenClass).isMapEntry())]
					 [getChildCreationDataCreateClassifier().oclAsType(GenClass).genPackage.getQualifiedEFactoryInstanceAccessor()/].create([getChildCreationDataCreateClassifier().oclAsType(GenClass).getQualifiedClassifierAccessor()/]))));
          [else]
					 [getChildCreationDataCreateClassifier().oclAsType(GenClass).genPackage.getQualifiedFactoryInstanceAccessor()/].create[getChildCreationDataCreateClassifier().oclAsType(GenClass).getName()/]())));
          [/if]
[comment]<%@ include file="ItemProvider/newChildDescriptorsReferenceDelegatedFeature.insert.javajetinc" fail="silent"%>
<%@ end %><%//ItemProvider/newChildDescriptorsReferenceDelegatedFeature.override.javajetinc%>[/comment]
        [else]
[comment]<%@ include file="ItemProvider/newChildDescriptorsAttributeDelegatedFeature.override.javajetinc" fail="alternative"%>
<%@ start %>[/comment]

		newChildDescriptors.add
			(createChildParameter
				([getChildCreationDataCreateFeature().getQualifiedFeatureAccessor()/],
				 [genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMapUtil')/].createEntry
					([getChildCreationDataDelegatedFeature().getQualifiedFeatureAccessor()/],
          [if (getChildCreationDataDelegatedFeature().isEnumBasedType())]
					 [getChildCreationDataDelegatedFeature().getTypeGenEnum().getStaticValue(getChildCreationDataDelegatedFeature().ecoreFeature.defaultValueLiteral)/])));
          [elseif (getChildCreationDataDelegatedFeature().isStringBasedType())]
					 [getChildCreationDataDelegatedFeature().getCreateChildValueLiteral()/])));[genModel.getNonNLS()/]
          [else]
					 [getChildCreationDataCreateClassifier().oclAsType(GenDataType).genPackage.getQualifiedEFactoryInstanceAccessor()/].createFromString([getChildCreationDataCreateClassifier().oclAsType(GenDataType).getQualifiedClassifierAccessor()/], [getChildCreationDataDelegatedFeature().getCreateChildValueLiteral()/]))));[if (not getChildCreationDataDelegatedFeature().getCreateChildValueLiteral().oclIsUndefined())][genModel.getNonNLS()/][else] // TODO: ensure this is a valid literal value[/if]
          [/if]
[comment]<%@ include file="ItemProvider/newChildDescriptorsAttributeDelegatedFeature.insert.javajetinc" fail="silent"%>
<%@ end %><%//ItemProvider/newChildDescriptorsAttributeDelegatedFeature.override.javajetinc%>[/comment]
        [/if]
      [elseif (getChildCreationDataCreateFeature().isReferenceType())]
[comment]<%@ include file="ItemProvider/newChildDescriptorsReferenceFeature.override.javajetinc" fail="alternative"%>
<%@ start %>[/comment]

		newChildDescriptors.add
			(createChildParameter
				([getChildCreationDataCreateFeature().getQualifiedFeatureAccessor()/],
        [if (getChildCreationDataCreateClassifier().oclAsType(GenClass).isMapEntry())]
				 [getChildCreationDataCreateClassifier().oclAsType(GenClass).genPackage.getQualifiedEFactoryInstanceAccessor()/].create([getChildCreationDataCreateClassifier().oclAsType(GenClass).getQualifiedClassifierAccessor()/])));
        [else]
				 [getChildCreationDataCreateClassifier().oclAsType(GenClass).genPackage.getQualifiedFactoryInstanceAccessor()/].create[getChildCreationDataCreateClassifier().oclAsType(GenClass).getName()/]()));
        [/if]
[comment]<%@ include file="ItemProvider/newChildDescriptorsReferenceFeature.insert.javajetinc" fail="silent"%>
<%@ end %><%//ItemProvider/newChildDescriptorsReferenceFeature.override.javajetinc %>[/comment]
      [else]
[comment]<%@ include file="ItemProvider/newChildDescriptorsAttributeFeature.override.javajetinc" fail="alternative"%>
<%@ start %>[/comment]

		newChildDescriptors.add
			(createChildParameter
				([getChildCreationDataCreateFeature().getQualifiedFeatureAccessor()/],
        [if (getChildCreationDataCreateFeature().isEnumBasedType())]
				 [getChildCreationDataCreateFeature().getTypeGenEnum().getStaticValue(getChildCreationDataCreateFeature().ecoreFeature.defaultValueLiteral)/]));
        [elseif (getChildCreationDataCreateFeature().isStringBasedType())]
				 [getChildCreationDataCreateFeature().getCreateChildValueLiteral()/]));[genModel.getNonNLS()/]
        [else]
				 [getChildCreationDataCreateClassifier().oclAsType(GenDataType).genPackage.getQualifiedEFactoryInstanceAccessor()/].createFromString([getChildCreationDataCreateClassifier().oclAsType(GenDataType).getQualifiedClassifierAccessor()/], [getChildCreationDataCreateFeature().getCreateChildValueLiteral()/])));[if (not getChildCreationDataCreateFeature().getCreateChildValueLiteral().oclIsUndefined())][genModel.getNonNLS()/][else] // TODO: ensure this is a valid literal value[/if]
        [/if]
[comment]<%@ include file="ItemProvider/newChildDescriptorsAttributeFeature.insert.javajetinc" fail="silent"%>
<%@ end %><%//ItemProvider/newChildDescriptorsAttributeFeature.override.javajetinc%>[/comment]
      [/if]
    [/for]
	}

[if (genClass.getSharedClassCreateChildFeatures()->notEmpty())]
	/**
	 * This returns the label text for {@link org.eclipse.emf.edit.command.CreateChildCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public String getCreateChildText(Object owner, Object feature, Object child, [genModel.getImportedName('java.util.Collection')/][if genModel.useGenerics()]<?>[/if] selection)
	{
		Object childFeature = feature;
		Object childObject = child;

    [if (genClass.hasFeatureMapCreateChildFeatures())]
		if (childFeature instanceof [genModel.getImportedName('org.eclipse.emf.ecore.EStructuralFeature')/] && [genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMapUtil')/].isFeatureMap((EStructuralFeature)childFeature))
		{
			[genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Entry entry = (FeatureMap.Entry)childObject;
			childFeature = entry.getEStructuralFeature();
			childObject = entry.getValue();
		}

    [/if]
		boolean qualify = 
    [for (createFeature : GenFeature | genClass.getSharedClassCreateChildFeatures()) separator (' ||' + genModel.getLineDelimiter())]
			childFeature == [createFeature.getQualifiedFeatureAccessor()/][/for];

		if (qualify)
		{
			return getString
				("_UI_CreateChild_text2",[genModel.getNonNLS()/]
				 new Object[genModel.genSquareBrackets('')/] { getTypeText(childObject), getFeatureText(childFeature), getTypeText(owner) });
		}
		return super.getCreateChildText(owner, feature, child, selection);
	}

[/if]
[/if]
[if (genClass.getProviderExtendsGenClass().oclIsUndefined() or genClass.getProviderExtendsGenClass().genPackage <> genPackage and ( not genPackage.extensibleProviderFactory or genClass.getProviderExtendsGenClass().genPackage.extensibleProviderFactory <> genPackage.extensibleProviderFactory))]
	/**
	 * Return the resource locator for this item provider's resources.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public [genModel.getImportedName('org.eclipse.emf.common.util.ResourceLocator')/] getResourceLocator()
	{
[if (genPackage.extensibleProviderFactory)]
		return (([genModel.getImportedName('org.eclipse.emf.edit.provider.IChildCreationExtender')/])adapterFactory).getResourceLocator();
[else]
		return [genPackage.getImportedEditPluginClassName()/].INSTANCE;
[/if]
	}

[/if]
[comment]<%@ include file="ItemProvider/insert.javajetinc" fail="silent" %>[/comment]
}

[/template]

[template protected _List (genModel : GenModel)]
[genModel.getImportedName('java.util.List')/][if genModel.useGenerics()]<[genModel.getImportedName('org.eclipse.emf.edit.provider.IItemPropertyDescriptor')/]>[/if]
[/template]

[template private declareFilterFlag(filterFlag : EString)]
      [if (not filterFlag.oclIsUndefined() and filterFlag.size() > 0)]
					"[filterFlag/]"
      [/if]
[/template]
