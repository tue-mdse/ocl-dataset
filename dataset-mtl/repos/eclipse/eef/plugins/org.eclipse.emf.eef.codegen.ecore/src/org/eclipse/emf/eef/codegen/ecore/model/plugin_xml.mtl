[comment encoding = UTF-8 /]
[module plugin_xml('http://www.eclipse.org/emf/2002/GenModel')/]

[comment
/**
 * <copyright>
 *
 * Copyright (c) 2002-2005 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *   IBM - Initial API and implementation
 *
 * </copyright>
 */
/]

[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenPackage /]
[import org::eclipse::emf::eef::codegen::ecore::services::header /]

[template public pluginXml(genModel : GenModel)]
[file (genModel.pluginXmlFilePath(), false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.0"?>

[genModel.includeHeaderXml()/]

[if (genModel.bundleManifest)]
<plugin>
[else]
<plugin
      name="%pluginName"
      id="[genModel.modelPluginID/]"
      version="1.0.0"
  [if (genModel.hasModelPluginClass())]
      provider-name="%providerName"
      class="[genModel.getQualifiedModelPluginClassName()/]$Implementation">
  [else]
      provider-name="%providerName">
  [/if]

   <requires>
  [for (pluginID : String | genModel.getModelRequiredPlugins())]
      <import plugin="[pluginID/]"[if (not pluginID.startsWith('org.eclipse.core.runtime'))] export="true"[/if]/>
  [/for]
   </requires>

   <runtime>
  [if (genModel.runtimeJar)]
      <library name="[genModel.modelPluginID/].jar">
  [else]
      <library name=".">
  [/if]
         <export name="*"/>
      </library>
   </runtime>
[/if]
[for (genPackage : GenPackage | genModel.getAllGenPackagesWithClassifiers())]

   <extension point="org.eclipse.emf.ecore.generated_package">
      <package
            uri="[genPackage.getNSURI()/]"
  [if (genModel.hasLocalGenModel())]
            class="[genPackage.getQualifiedPackageInterfaceName()/]"
            genModel="[genModel.getRelativeGenModelLocation()/]"/>
  [else]
            class="[genPackage.getQualifiedPackageInterfaceName()/]"/>
  [/if]
   </extension>
  [if (genPackage.isContentType())]

   <extension point="org.eclipse.emf.ecore.content_parser">
      <parser
            contentTypeIdentifier="[genPackage.contentTypeIdentifier/]"
            class="[genPackage.getQualifiedEffectiveResourceFactoryClassName()/]"/>
   </extension>

   <extension point="org.eclipse.core.contenttype.contentTypes">
      <content-type
            base-type="[if (genPackage.isXMIResource())]org.eclipse.emf.ecore.xmi[else]org.eclipse.core.runtime.xml[/if]"
            file-extensions="[genPackage.fileExtensions/]"
            id="[genPackage.contentTypeIdentifier/]"
            name="%_UI_[genPackage.prefix/]_content_type"
            priority="normal">
         <describer class="org.eclipse.emf.ecore.xmi.impl.RootXMLContentHandlerImpl$Describer">
    [if (genPackage.hasTargetNamespace())]
            <parameter name="namespace" value="[genPackage.getNSURI()/]"/>
    [/if]
    [if (genPackage.isXMIResource())]
            <parameter name="kind" value="xmi"/>
    [/if]
         </describer>
      </content-type>
   </extension>
  [else][if (genPackage.resource <> GenResourceKind::None)]

   <extension point="org.eclipse.emf.ecore.extension_parser">
      <parser
            type="[genPackage.getFileExtension()/]"
            class="[genPackage.getQualifiedResourceFactoryClassName()/]"/>
   </extension>
  [/if][/if]
[/for]

</plugin>
[/file]
[/template]

[query public pluginXmlFilePath(genModel : GenModel) : String = 'plugin.xml' /]
