[comment 
 *******************************************************************************
 * Copyright (c) 2008-2010 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module referencesTableTest('http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore') extends widgetTest/]

[import common /]
[import naming /]
[import typeUtils /]

[template public canGenerateTest(pec : PropertiesEditionComponent, peElement : PropertiesEditionElement) overrides canGenerateTest ? (peElement.isReferencesTableReference())]true[/template]

[template public updateExpectedModel(pec : PropertiesEditionComponent, peElement : PropertiesEditionElement) overrides updateExpectedModel ? (peElement.isReferencesTableReference())]
CompoundCommand cc = new CompoundCommand();
[comment  TODO: Reuse the commandUpdater template but the last parameter of the command creation method must be ... parameterized /]
allInstancesOf = EEFTestsModelsUtils.getAllInstancesOf(expectedModel, [peElement.model.eType.name.toLowerFirst()/]MetaClass);
referenceValueFor[peElement.model.name.toUpperFirst()/] = bot.changeReferenceValue(allInstancesOf, (([pec.model.name.toUpperFirst()/])[pec.model.name.toLowerFirst()/]).get[peElement.model.name.toUpperFirst()/]());
cc.append(AddCommand.create(editingDomain, [pec.model.name.toLowerFirst()/], [peElement.metamodelGetter()/], referenceValueFor[peElement.model.name.toUpperFirst()/]));
[/template]

[template public removeExpectedModel(pec : PropertiesEditionComponent, peElement : PropertiesEditionElement) overrides removeExpectedModel ? (peElement.isReferencesTableReference())]
CompoundCommand cc = new CompoundCommand();
List<EObject> allReferencedInstances = (List<EObject>)[pec.model.name.toLowerFirst()/].eGet([peElement.metamodelGetter()/]);
if (allReferencedInstances.size() > 0) {
	cc.append(RemoveCommand.create(editingDomain, [pec.model.name.toLowerFirst()/], [peElement.metamodelGetter()/], allReferencedInstances.get(0)));
}
else {
	throw new InputModelInvalidException();
}
[/template]

[template public editFeature(pec : PropertiesEditionComponent, peElement : PropertiesEditionElement) overrides editFeature ? (peElement.isReferencesTableReference())]
// Change value of the [peElement.name/] feature of the [pec.model.name/] element 
		bot.editReferencesTableFeature(wizardShell, [peElement.views->first().editorID()/], 0);
[/template]

[template public editFeature(f : EStructuralFeature, peElement : PropertiesEditionElement) overrides editFeature ? (peElement.isReferencesTableReference())]
// Change value of the [peElement.name/] feature of the [peElement.model.name/] element 
		bot.editReferencesTable([peElement.views->first().owningViewsRepository().messagesProvider()/].[peElement.views->first().editorKey(peElement.views->first().owningView())/], [peElement.element->select(oclIsTypeOf(components::PropertiesEditionComponent)).oclAsType(components::PropertiesEditionComponent).model.name.toLowerFirst()/].get[peElement.model.name.toUpperFirst()/]());
[/template]

[template public editPropertyFeature(pec : PropertiesEditionComponent, peElement : PropertiesEditionElement) overrides editPropertyFeature ? (peElement.isReferencesTableReference())]
// Change value of the [peElement.name/] feature of the [pec.model.name/] element 
		bot.editPropertyReferencesTableFeature(propertiesView, [peElement.views->first().editorID()/], 0, bot.selectNode(modelEditor, firstInstanceOf));
[/template]

[template public removeFeature(pec : PropertiesEditionComponent, peElement : PropertiesEditionElement) overrides removeFeature ? (peElement.isReferencesTableReference())]
// Change value of the [peElement.name/] feature of the [pec.model.name/] element 
		bot.removeReferencesTableFeature(wizardShell, [peElement.views->first().editorID()/], 0);
[/template]

[template public removeFeature(f : EStructuralFeature, peElement : PropertiesEditionElement) overrides removeFeature ? (peElement.isReferencesTableReference())]
// Change value of the [peElement.name/] feature of the [peElement.model.name/] element 
		bot.removeReferencesTable([peElement.views->first().owningViewsRepository().messagesProvider()/].[peElement.views->first().editorKey(peElement.views->first().owningView())/], [peElement.element->select(oclIsTypeOf(components::PropertiesEditionComponent)).oclAsType(components::PropertiesEditionComponent).model.name.toLowerFirst()/].get[peElement.model.name.toUpperFirst()/]());
[/template]

[template public removePropertyFeature(pec : PropertiesEditionComponent, peElement : PropertiesEditionElement) overrides removePropertyFeature ? (peElement.isReferencesTableReference())]
// Change value of the [peElement.name/] feature of the [pec.model.name/] element 
		bot.removePropertyReferencesTableFeature(propertiesView, [peElement.views->first().editorID()/], 0, bot.selectNode(modelEditor, firstInstanceOf));
[/template]

[template public additionnalMethodsForWidgets(pec : PropertiesEditionComponent, peElement : PropertiesEditionElement)]
[/template]

[query public isReferencesTableReference(peElement : PropertiesEditionElement) : Boolean = 
	if (not peElement.model.oclIsTypeOf(ecore::EReference))
	then false
	else peElement.representationName('ReferencesTable') and peElement.model.oclAsType(ecore::EReference).isReferenceMany()
	endif/]