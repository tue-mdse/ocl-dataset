[comment encoding = UTF-8 /]
[module org::eclipse::ocl::examples::build::acceleo::generateVisitors('http://www.eclipse.org/emf/2002/Ecore')/]

[query public firstSuperClass(eClass : EClass, nullClass : EClass) : EClass =
if eClass.eSuperTypes->isEmpty()
then nullClass
else let eSuperClass : EClass = eClass.eSuperTypes->at(1)
  in if eSuperClass.interface then firstSuperClass(eSuperClass, nullClass) else eSuperClass endif
endif
/]

[query private processCopyright(copyright : String) : String =
let endLine : String = if copyright.strstr('\r\n') then '\r\n' /* Windows line end*/
		else if copyright.strstr('\n') then '\n' /* Unix line end */
		else '\r' endif endif  /* Mac line end */
in '* ' + copyright.trim().replaceAll(endLine, '\n' + ' * ')
 /]
[comment
***********************************************************************************************************
AbstractDelegatingVisitor
***********************************************************************************************************
/]
[template public generateAbstractDelegatingVisitor(pkg : EPackage, modelPackage : String,
	visitorPackage : String, visitorClass : String, 
	superVisitorPackage : String, superVisitorClass : String,
	visitablePackage : String, visitableClass : String, 
	sourceFile : String, copyright : String)]
	extends [superVisitorPackage/].AbstractDelegating[superVisitorClass/]<R, C, D>
[let isDerived : Boolean = superVisitorPackage.size() > 0]
[file ('AbstractDelegating' + visitorClass + '.java', false, 'UTF-8')]
[pkg.generateHeader(visitorPackage, sourceFile, copyright)/]

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

/**
 * An AbstractDelegating[visitorClass/] delegates all visits.
 */
public abstract class AbstractDelegating[visitorClass/]<R, C, D extends [visitorClass/]<R>>
	extends [if (isDerived)][superVisitorPackage/].AbstractDelegating[superVisitorClass/]<R, C, D>[else][superVisitorClass/]<R, C>[/if]
	implements [visitorClass/]<R>
{
[if (isDerived)]
    protected AbstractDelegating[visitorClass/](@NonNull D delegate, @NonNull C context) {
        super(delegate, context);
    }
[else]
    protected final D delegate;
    
    protected AbstractDelegating[visitorClass/](@NonNull D delegate, @NonNull C context) {
    	super(context);
//        assert delegate != null : "cannot decorate a null visitor"; //$NON-NLS-1$        
        this.delegate = delegate;        
//        delegate.setUndecoratedVisitor(this);
    }

    /**
     * Delegates to my decorated visitor.
     */
//	public @NonNull Decorable[visitorClass/]<R> createNestedVisitor() {
//        return delegate.createNestedVisitor();
//	}
  
    /**
     * Obtains the visitor that I decorate.
     * 
     * @return my decorated visitor
     */
    @SuppressWarnings("null")
    protected final @NonNull D getDelegate() {
        return delegate;
    }
[/if]

[if (isDerived)]
	@Override
[/if]
	public @Nullable R visiting(@NonNull [visitablePackage/].[visitableClass/] visitable) {
		return delegate.visiting(visitable);
	}
[for (eClass : EClass | pkg.eClassifiers->filter(EClass)->select(not interface)->sortedBy(name))]

	public @Nullable R visit[eClass.name/](@NonNull [modelPackage/].[eClass.name/] object) {
		return delegate.visit[eClass.name/](object);
	}
[/for]
}
[/file]
[/let]
[/template]

[comment
***********************************************************************************************************
AbstractDelegatingVisitor
***********************************************************************************************************
/]
[template public generateAbstractExtendingDelegatingVisitor(pkg : EPackage, modelPackage : String,
	visitorPackage : String, visitorClass : String, 
	superVisitorPackage : String, superVisitorClass : String,
	visitablePackage : String, visitableClass : String, 
	sourceFile : String, copyright : String)]
	extends [superVisitorPackage/].AbstractExtendingDelegating[superVisitorClass/]<R, C, D>
[file ('AbstractExtendingDelegating' + visitorClass + '.java', false, 'UTF-8')]
[pkg.generateHeader(visitorPackage, sourceFile, copyright)/]

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;
import [superVisitorPackage/].AbstractDelegating[superVisitorClass/];
import [superVisitorPackage/].[superVisitorClass/];

/**
 * An AbstractExtendingDelegating[visitorClass/] delegates all visits.
 */
public abstract class AbstractExtendingDelegating[visitorClass/]<R, C, D extends [superVisitorClass/]<R>>
	extends AbstractDelegating[superVisitorClass/]<R, C, D>
	implements [visitorClass/]<R>
{
[if (true)]
    protected AbstractExtendingDelegating[visitorClass/](@NonNull D delegate, @NonNull C context) {
        super(delegate, context);
    }
[else]
    protected final D delegate;
    
    protected AbstractExtendingDelegating[visitorClass/](@NonNull D delegate, @NonNull C context) {
    	super(context);
//        assert delegate != null : "cannot decorate a null visitor"; //$NON-NLS-1$        
        this.delegate = delegate;        
//        delegate.setUndecoratedVisitor(this);
    }

    /**
     * Delegates to my decorated visitor.
     */
//	public Decorable[visitorClass/]<R> createNestedVisitor() {
//        return delegate.createNestedVisitor();
//	}
  
    /**
     * Obtains the visitor that I decorate.
     * 
     * @return my decorated visitor
     */
    protected final D getDelegate() {
        return delegate;
    }
[/if]

	@Override
	public @Nullable R visiting(@NonNull [visitablePackage/].[visitableClass/] visitable) {
		return delegate.visiting(visitable);
	}
[for (eClass : EClass | pkg.eClassifiers->filter(EClass)->select(not interface)->sortedBy(name))]
[let firstSuperClass : EClass = eClass.firstSuperClass(eClass)]

	public @Nullable R visit[eClass.name/](@NonNull [modelPackage/].[eClass.name/] object) {
[if (firstSuperClass = eClass)]
		return visiting(object);
[elseif (firstSuperClass.ePackage = eClass.ePackage)]
		return visit[firstSuperClass.name/](object);
[else]
		return delegate.visit[firstSuperClass.name/](object);
[/if]
	}
[/let]
[/for]
}
[/file]
[/template]

[comment
***********************************************************************************************************
AbstractExtendingVisitor
***********************************************************************************************************
/]
[template public generateAbstractExtendingVisitor(pkg : EPackage, modelPackage : String, 
	visitorPackage : String, visitorClass : String, 
	superVisitorClassPath : String, 
	sourceFile : String, copyright : String)]
[file ('AbstractExtending' + visitorClass + '.java', false, 'UTF-8')]
[pkg.generateHeader(visitorPackage, sourceFile, copyright)/]

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

/**
 * An AbstractExtending[visitorClass/] provides a default implementation for each
 * visitXxx method that delegates to the visitYyy method of the first
 * super class, (or transitively its first super class first super class
 * until a non-interface super-class is found). In the absence of any
 * suitable first super class, the method delegates to visiting().
 */
public abstract class AbstractExtending[visitorClass/]<R, C>
	extends [superVisitorClassPath/]<R, C>
	implements [visitorClass/]<R>
{
	/**
	 * Initializes me with an initial value for my result.
	 * 
	 * @param context my initial result value
	 */
	protected AbstractExtending[visitorClass/](@NonNull C context) {
	    super(context);
	}	
[for (eClass : EClass | pkg.eClassifiers->filter(EClass)->select(not interface)->sortedBy(name))]
[let firstSuperClass : EClass = eClass.firstSuperClass(eClass)]

	public @Nullable R visit[eClass.name/](@NonNull [modelPackage/].[eClass.name/] object) {
[if (firstSuperClass = eClass)]
		return visiting(object);
[else]
		return visit[firstSuperClass.name/](object);
[/if]
	}
[/let]
[/for]
}
[/file]
[/template]

[template public generateAbstractMonitorVisitor(pkg : EPackage, modelPackage : String,
	visitorPackage : String,
	extendsVisitorClass : String, 
	superVisitorClassPath : String, 
	sourceFile : String, copyright : String)]
[file (extendsVisitorClass + '.java', false, 'UTF-8')]
[pkg.generateHeader(visitorPackage, sourceFile, copyright)/]

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

/**
 * An [extendsVisitorClass/] provides a default implementation for each
 * visitXxx method that delegates to the visitYyy method of the first
 * super class, (or transitively its first super class first super class
 * until a non-interface super-class is found). In the absence of any
 * suitable first super class, the merthod delegates to visiting().
 */
public abstract class [extendsVisitorClass/] extends [superVisitorClassPath/]
{
	/**
	 * Initializes me with an initial value for my result.
	 * 
	 * @param context my initial result value
	 */
	protected [extendsVisitorClass/](@NonNull org.eclipse.ocl.examples.xtext.base.utilities.CS2Moniker cs2Moniker) {
	    super(cs2Moniker);
	}	
[for (eClass : EClass | pkg.eClassifiers->filter(EClass)->select(not interface)->sortedBy(name))]
[let firstSuperClass : EClass = eClass.firstSuperClass(eClass)]

	public Object visit[eClass.name/](@NonNull [modelPackage/].[eClass.name/] object) {
[if (firstSuperClass = eClass)]
		return visiting(object);
[else]
		return visit[firstSuperClass.name/](object);
[/if]
	}
[/let]
[/for]
}
[/file]
[/template]

[comment
***********************************************************************************************************
AbstractNullVisitor
***********************************************************************************************************
***********************************************************************************************************
/]
[template public generateAbstractNullVisitor(pkg : EPackage, modelPackage : String,
	visitorPackage : String, visitorClass : String, 
	superVisitorPackage : String, superVisitorClass : String,
	sourceFile : String, copyright : String)]
[file ('AbstractNull' + visitorClass + '.java', false, 'UTF-8')]
[pkg.generateHeader(visitorPackage, sourceFile, copyright)/]

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

/**
 * An AbstractNull[visitorClass/] provides a default implementation for each
 * visitXxx method that returns null.
 */
public abstract class AbstractNull[visitorClass/]<R, C>
[if (superVisitorClass.size() <= 0)]
	extends Abstract[visitorClass/]<R, C>
[else]
	extends [superVisitorPackage/].AbstractNull[superVisitorClass/]<R, C> implements [visitorClass/]<R>
[/if]
{
	/**
	 * Initializes me with an initial value for my result.
	 * 
	 * @param context my initial result value
	 */
	protected AbstractNull[visitorClass/](@NonNull C context) {
	    super(context);
	}	
[for (eClass : EClass | pkg.eClassifiers->filter(EClass)->select(not interface)->sortedBy(name))]

	public @Nullable R visit[eClass.name/](@NonNull [modelPackage/].[eClass.name/] object) {
		return null;
	}
[/for]
}
[/file]
[/template]

[comment
***********************************************************************************************************
AbstractVisitor
***********************************************************************************************************
/]
[template public generateAbstractVisitor(pkg : EPackage, 
	visitorPackage : String, visitorClass : String, 
	superVisitorPackage : String, superVisitorClass : String, 
	visitablePackage : String, visitableClass : String, 
	sourceFile : String, copyright : String)]
[file ('Abstract' + visitorClass + '.java', false, 'UTF-8')]
[pkg.generateHeader(visitorPackage, sourceFile, copyright)/]

import org.eclipse.jdt.annotation.NonNull;
[if (superVisitorClass.size() <= 0)]
import org.eclipse.jdt.annotation.Nullable;
[/if]

/**
 */
public abstract class Abstract[visitorClass/]<R, C>[if (superVisitorClass.size() > 0)]

 extends [superVisitorPackage/].Abstract[superVisitorClass/]<R, C>
	implements [visitorClass/]<R>
[else] implements [visitorClass/]<R>
[/if]
{
[if (superVisitorClass.size() <= 0)]
    /**
     * Context for the AST visitation.
     */
    protected final @NonNull C context;

[/if]	
	/**
	 * Initializes me with an initial value for my result.
	 * 
	 * @param context my initial result value
	 */
	protected Abstract[visitorClass/](@NonNull C context) {
[if (superVisitorClass.size() <= 0)]
	    this.context = context;
[else]
	    super(context);
[/if]
	}
[if (superVisitorClass.size() <= 0)]

	@SuppressWarnings("unchecked")
	public <A> A getAdapter(@NonNull Class<A> adapter) {
		if (adapter.isAssignableFrom(getClass())) {
			return (A) this;
		}
		else {
			return null;
		}
	}
	
	/**
	 * A null-safe visitation of the specified visitable.
	 * 
	 * @param v a visitable, or <code>null</code>
	 * @return <code>null</code> if the visitable is <code>null</code>;
	 *     otherwise, the result of visiting it
	 */
	public @Nullable R safeVisit(@Nullable [visitablePackage/].[visitableClass/] v) {
		return (v == null) ? null : v.accept(this);
	}
	
	/**
	 * Perform a visit to the specified visitable.
	 * 
	 * @param v a visitable, or <code>null</code>
	 * @return <code>null</code> if the visitable is <code>null</code>;
	 *     otherwise, the result of visiting it
	 */
	public @Nullable R visit(@NonNull [visitablePackage/].[visitableClass/] v) {
		return v.accept(this);
	}

//	public @Nullable R visiting(@NonNull [visitablePackage/].[visitableClass/] visitable) {
//		return null;
//	}
[/if]
}
[/file]
[/template]

[comment
***********************************************************************************************************
DecorableVisitorInterface
***********************************************************************************************************
/]
[template public generateDecorableVisitorInterface(pkg : EPackage, 
	visitorPackage : String, visitorClass : String,
	superVisitorPackage : String, superVisitorClass : String,
	visitorRootClass : String,
	sourceFile : String, copyright : String)]
[file ('Decorable' + visitorClass + '.java', false, 'UTF-8')]
[pkg.generateHeader(visitorPackage, sourceFile, copyright)/]

import org.eclipse.jdt.annotation.NonNull;

/**
 */
public interface Decorable[visitorClass/]<R> extends [visitorClass/]<R>[if (superVisitorClass.size() > 0)], [superVisitorPackage/].Decorable[superVisitorClass/]<R>[/if]
{
	void setUndecoratedVisitor(@NonNull [visitorRootClass/]<R> visitor);
}
[/file]
[/template]

[template public generateHeader(pkg : EPackage, javaPackage : String, sourceFile : String, copyright : String)]
/**
 [processCopyright(copyright)/]
 *
 * This code is auto-generated
 * from: [sourceFile/]
 * by: org.eclipse.ocl.examples.build.acceleo.GenerateVisitor
 * defined by: org.eclipse.ocl.examples.build.acceleo.generateVisitors.mtl
 * invoked by: org.eclipse.ocl.examples.build.utilities.*
 * from: org.eclipse.ocl.examples.build.*.mwe2
 *
 * Do not edit it.
 *
 * ['$' + 'I' + 'd' + '$'/]
 */
package	[javaPackage/];
[/template]



[template public generateVisitableInterface(pkg : EPackage,
	visitorPackage : String, visitorClass : String,
	visitablePackage : String, visitableClass : String,
	sourceFile : String, copyright : String)]
[file (visitableClass + '.java', false, 'UTF-8')]
[pkg.generateHeader(visitablePackage, sourceFile, copyright)/]

import org.eclipse.emf.ecore.EClass;
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

public interface [visitableClass/]
{
	/**
	 * Returns the result of accepting a visit from a visitor.
	 * Implementations typically invoke a derived-class-specific
	 * variant of visitXXX() to facilitate derived-class-specific
	 * processing or just visit() when no such method is available.
	 * <p>
	 * Implementations of visit() may use the EcoreSwitch to perform
	 * derived-class-specific processing.
	 * <p>
	 * Derived implementations of accept() may use getAdapter() to obtain
	 * richer visitor interfaces.
	 * @param <R, C>
	 * @param visitor
	 * @return the result of the visit.
	 */
	@Nullable <R> R accept(@NonNull [visitorPackage/].[visitorClass/]<R> visitor);
	
	EClass eClass();
}
[/file]
[/template]

[template public generateVisitorInterface(pkg : EPackage, modelPackage : String, 
	visitorPackage : String, visitorClass : String,
	superVisitorPackage : String, superVisitorClass : String,
	visitablePackage : String, visitableClass : String,
	sourceFile : String, copyright : String)]
[file (visitorClass + '.java', false, 'UTF-8')]
[pkg.generateHeader(visitorPackage, sourceFile, copyright)/]

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

/**
 */
public interface [visitorClass/]<R>[if (superVisitorClass.size() > 0)] extends [superVisitorPackage/].[superVisitorClass/]<R>[/if]
{
[if (superVisitorClass.size() <= 0)]
	/**
	 * Returns an object which is an instance of the given class
	 * associated with this object. Returns <code>null</code> if
	 * no such object can be found.
	 *
	 * @param adapter the adapter class to look up
	 * @return an object of the given class, 
	 *    or <code>null</code> if this object does not
	 *    have an adapter for the given class
	 */
	@Nullable <A> A getAdapter(@NonNull Class<A> adapter);

	/**
     * Return the result of visiting a visitable for which no more specific pivot type method
     * is available.
     */
	@Nullable R visiting(@NonNull [visitablePackage/].[visitableClass/] visitable);

[/if]
[for (eClass : EClass | pkg.eClassifiers->filter(EClass)->select(not interface)->sortedBy(name))]
	@Nullable R visit[eClass.name/](@NonNull [modelPackage/].[eClass.name/] object);
[/for]
}
[/file]
[/template]
