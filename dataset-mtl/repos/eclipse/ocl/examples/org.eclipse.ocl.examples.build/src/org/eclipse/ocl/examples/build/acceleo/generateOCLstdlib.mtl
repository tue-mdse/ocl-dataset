[comment encoding = UTF-8 /]
[module org::eclipse::ocl::examples::build::acceleo::generateOCLstdlib('http://www.eclipse.org/ocl/3.1.0/Pivot','http://www.eclipse.org/emf/2002/Ecore')/]
[import org::eclipse::ocl::examples::build::acceleo::generateOCLCommon/]

[template public generate(root : Root, javaPackage : String, javaClass : String, sourceFile : String, uri : String)]
[comment @main /]
[let lib : Library = root.nestedPackage->filter(Library)->any(true)]
[let allEnumerations : Sequence(Enumeration) = root.eAllContents(Enumeration)]
[file (javaClass + '.java', false, 'UTF-8')]
/**
 * <copyright>
 *
 * Copyright (c) 2010,2012 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * This code is auto-generated
 * from: [sourceFile/]
 * by: org.eclipse.ocl.examples.build.acceleo.GenerateOCLstdlib
 * defined by: org.eclipse.ocl.examples.build.acceleo.generateOCLstdlib.mtl
 * invoked by: org.eclipse.ocl.examples.build.utilities.OCLstdlibCodeGenerator
 * from: org.eclipse.ocl.examples.build.GenerateOCLstdlibModel.mwe2
 *
 * Do not edit it.
 */
package	[javaPackage/];

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.impl.BasicEObjectImpl;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.ocl.examples.pivot.*;
import org.eclipse.ocl.examples.pivot.Class;
import org.eclipse.ocl.examples.pivot.Package;
import org.eclipse.ocl.examples.pivot.library.StandardLibraryContribution;
import org.eclipse.ocl.examples.pivot.manager.MetaModelManager;

/**
 * This is the [uri/] Standard Library
 * auto-generated from [sourceFile/].
 * It facilitates efficient library loading without the overheads of model reading.
 * <p>
 * This Standard Library may be registered as the definition of a Standard Library for
 * the OCL evaluation framework by invoking {@link #install}.
 * <p>
 * The Standard Library is normally activated when the MetaModelManager attempts
 * to locate a library type when its default Standard Library URI is the same
 * as this Standard Library.
 */
@SuppressWarnings({"nls", "unused"})
public class [javaClass/] extends XMIResourceImpl
{
	/**
	 *	The static package-of-types pivot model of the Standard Library.
	 */
	private static [javaClass/] INSTANCE = null;
	
	/**
	 *	The URI of this Standard Library.
	 */
	public static final @NonNull String STDLIB_URI = "[uri/]";

	/**
	 * Return the default OCL standard Library. 
	 *  This static definition auto-generated from [sourceFile/]
	 *  is used as the default when no overriding copy is registered. 
	 */
	public static @NonNull OCLstdlib getDefault() {
		OCLstdlib oclstdlib = INSTANCE;
		if (oclstdlib == null) {
			Contents contents = new Contents();
			Root libraryModel = contents.create("[lib.nsURI/]", "[lib.name/]", "[lib.nsPrefix/]", "[lib.nsURI/]");
			oclstdlib = INSTANCE = new OCLstdlib(STDLIB_URI, libraryModel);
		}
		return oclstdlib;
	}

	/**
	 * Return true if the default OCL standard Library has been created. 
	 */
	public static boolean hasDefault() {
		return INSTANCE != null;
	}

	/**
	 * Install this library in the {@link StandardLibraryContribution#REGISTRY}.
	 * This method may be invoked by standalone applications to replicate
	 * the registration that should appear as a standard_library plugin
	 * extension when running within Eclipse. 
	 */
	public static void install() {
		StandardLibraryContribution.REGISTRY.put(STDLIB_URI, new Loader());
	}

	/**
	 * Unnstall this library from the {@link StandardLibraryContribution#REGISTRY}.
	 * This method may be invoked by standalone applications to release the library
	 * resources for garbage collection and memory leakage detection. 
	 */
	public static void uninstall() {
		StandardLibraryContribution.REGISTRY.remove(STDLIB_URI);
		INSTANCE = null;
	}
	
	/**
	 * The Loader shares the Standard Library instance whenever this default library
	 * is loaded from the registry of Standard Libraries populated by the standard_library 
	 * extension point.
	 */
	public static class Loader implements StandardLibraryContribution
	{
		public StandardLibraryContribution getContribution() {
			return this;
		}
		
		public @NonNull Resource getResource() {
			return getDefault();
		}
	}
	
	/**
	 *	Construct a copy of the OCL Standard Library with specified resource URI,
	 *  and package name, prefix and namespace URI.
	 */
	public static @NonNull [javaClass/] create(@NonNull String uri, @NonNull String name, @NonNull String nsPrefix, @NonNull String nsURI) {
		Contents contents = new Contents();
		Root libraryModel = contents.create(uri, name, nsPrefix, nsURI);
		return new [javaClass/](uri, libraryModel);
	}
	
	/**
	 *	Construct an OCL Standard Library with specified resource URI and library content.
	 */
	public [javaClass/](@NonNull String uri, @NonNull Root libraryModel) {
		super(URI.createURI(uri));
		getContents().add(libraryModel);
//		System.out.println(Thread.currentThread().getName() + " Create " + debugSimpleName(this));		
//		liveOCLstdlibs.put(this, null);
	}

	protected static class Contents extends AbstractContents
	{
		protected Root [root.getPrefixedSymbolName('root')/];
		protected Library [lib.getPrefixedSymbolName('library')/];
		// protected Package [root.getOrphanPackage().getPrefixedSymbolName('orphans')/];

		protected @NonNull Root create(@NonNull String uri, @NonNull String name, @NonNull String nsPrefix, @NonNull String nsURI)
		{
			Root theRoot = [root.getSymbolName()/] = createRoot("[root.name/]", uri);
			[lib.getSymbolName()/] = createLibrary(name, nsPrefix, nsURI);
			installPackages();
			installOclTypes();
			installPrimitiveTypes();
[if (allEnumerations->notEmpty())]
			installEnumerations();
[/if]
			installParameterTypes();
			installCollectionTypes();
			installMetaclasses();
			installLambdaTypes();
			installTupleTypes();
			installOperations();
			installIterations();
			installProperties();
			installTemplateSignatures();
			installTemplateBindings();
			installPrecedences();
			installComments();
			return theRoot;
		}
	
		[lib.definePackages()/]
		[lib.declareOclTypes()/]
		[lib.declarePrimitiveTypes()/]
[if (allEnumerations->notEmpty())]
		[lib.declareEnumerations()/]
[/if]
		[lib.declareParameterTypes()/]
		[lib.declareCollectionTypes()/]
		[lib.declareMetaclasses()/]
		[lib.declareTupleTypes()/]
		[lib.defineOclTypes()/]
		[lib.definePrimitiveTypes()/]
[if (allEnumerations->notEmpty())]
		[lib.defineEnumerations()/]
[/if]
		[lib.defineParameterTypes()/]
		[lib.defineCollectionTypes()/]
		[lib.defineMetaclasses()/]
		[lib.defineTupleTypes()/]
		[lib.defineLambdaTypes()/]	
		[lib.defineOperations()/]	
		[lib.defineIterations()/]	
		[lib.declareProperties()/]
		[lib.defineProperties()/]
		[lib.defineTemplateSignatures()/]
		[lib.defineTemplateBindings()/]
		[lib.definePrecedences()/]
		[lib.defineComments()/]
	}
	
/*	private static WeakHashMap<OCLstdlib,Object> liveOCLstdlibs = new WeakHashMap<OCLstdlib,Object>();
	
	public static String debugSimpleName(Object object) {
		if (object == null) {
			return "null";
		}
		else {
			return object.getClass().getSimpleName() + "@" + Integer.toHexString(object.hashCode());
		}
	}

	@Override
	protected void finalize() throws Throwable {
		System.out.println("Finalize " + debugSimpleName(this));		
		super.finalize();
		Set<OCLstdlib> keySet = liveOCLstdlibs.keySet();
		if (!keySet.isEmpty()) {
			StringBuilder s = new StringBuilder();
			s.append(" live");
			for (OCLstdlib stdlib : keySet) {
				s.append(" @" + Integer.toHexString(stdlib.hashCode()));		
			}
			System.out.println(s);		
		}
	} */

/*	public static void decontain() {
		Map<EObject, Object> allContents = new WeakHashMap<EObject,Object>(1000);
		for (OCLstdlib oclstdlib : liveOCLstdlibs.keySet()) {
			for (TreeIterator<EObject> tit = oclstdlib.getAllContents(); tit.hasNext(); ) {
				allContents.put(tit.next(), null);
			}
		}
		for (EObject eObject : allContents.keySet()) {
			for (EReference eReference : eObject.eClass().getEAllReferences()) {
				boolean isUnsettable = eReference.isUnsettable();
				boolean isChangeable = eReference.isChangeable();
				if (isChangeable) {
//					System.out.println("unset : " + debugSimpleName(eObject) + " " + eReference.getName());
					try {
						eObject.eUnset(eReference);
					}
					catch (Exception e) {}
				}
			}
		}
		System.gc();
		System.runFinalization();
		for (EObject eObject : allContents.keySet()) {
			System.out.println("   still live : " + debugSimpleName(eObject));
		}
	} */
}
[/file]
[/let]
[/let]
[/template]

[template public defineConstantType(type : DataType)]
[if (type.name = 'Boolean')]
protected final PrimitiveType [type.getPrefixedSymbolName('_'+type.partialName())/] = OCLstdlib._Boolean;[elseif (type.name = 'Classifier')]
protected final PrimitiveType [type.getPrefixedSymbolName('_'+type.partialName())/] = OCLstdlib._Classifier;[elseif (type.name = 'Integer')]
protected final PrimitiveType [type.getPrefixedSymbolName('_'+type.partialName())/] = OCLstdlib._Integer;[elseif (type.name = 'Real')]
protected final PrimitiveType [type.getPrefixedSymbolName('_'+type.partialName())/] = OCLstdlib._Real;[elseif (type.name = 'String')]
protected final PrimitiveType [type.getPrefixedSymbolName('_'+type.partialName())/] = OCLstdlib._String;[elseif (type.name = 'UnlimitedNatural')]
protected final PrimitiveType [type.getPrefixedSymbolName('_'+type.partialName())/] = OCLstdlib._UnlimitedNatural;[else]
protected final DataType [type.getPrefixedSymbolName('_'+type.partialName())/] = createDataType("[type.name/]");[/if]
[/template]
