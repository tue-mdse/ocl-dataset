[comment]
  Copyright 2010 Obeo
  All rights reserved.  This program and the accompanying materials
  are made available under the terms of the Eclipse Public License 1.0
  
  Any license can be applied to the files generated with this template.
  
  author <a href="mailto:laurent.goubet@obeo.fr">Laurent Goubet</a>
[/comment]
[module factoryTest('http://www.eclipse.org/emf/2002/GenModel', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipse::acceleo::module::example::ecore2unittests::common::common/]
[import org::eclipse::acceleo::module::example::ecore2unittests::services::stringService /]

[template public factoryTest(pack : GenPackage)]
[file ('src-gen/'.concat(pack.testPackage().substituteAll('.', '/').concat('/unit/')).concat(pack.prefix.toUpperFirst()).concat('FactoryTest.java'), false)]
package [pack.testPackage().concat('.unit')/];

import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertNotNull;
import static junit.framework.Assert.assertSame;
import static junit.framework.Assert.assertTrue;
import static junit.framework.Assert.fail;

import org.junit.Test;

import org.eclipse.emf.ecore.EcoreFactory;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.impl.EClassifierImpl;

import [pack.modelPackage()/].[pack.modelFactoryClassName()/];
import [pack.modelPackage()/].[pack.modelPackageClassName()/];
[for (eClass : EClass | pack.genClasses.ecoreClass->select(not abstract))]
import [pack.modelPackage()/].[eClass.name/];
[/for]
[for (eEnum : EEnum | pack.genEnums.ecoreEnum)]
import [pack.modelPackage()/].[eEnum.name/];
[/for]

/**
 * Tests the behavior of the {@link [pack.modelFactoryClassName()/] generated factory} for package [pack.ecorePackage.name/].
 *
 * @generated
 */
@SuppressWarnings("nls")
public class [pack.modelFactoryClassName()/]Test {
	[for (genClass : GenClass | pack.genClasses->select(not ecoreClass.abstract)) separator('\n')]
	/**
	 * Ensures that creating {@link [genClass.ecoreClass.name.toUpperFirst()/]} can be done through the factory.
	 *
	 * @generated
	 */
	@Test
	public void testCreate[genClass.ecoreClass.name.toUpperFirst()/]() {
		Object result = [pack.modelFactoryClassName()/].eINSTANCE.create[genClass.ecoreClass.name.toUpperFirst()/]();
		assertNotNull(result);
		assertTrue(result instanceof [genClass.ecoreClass.name/]);

		result = [pack.modelFactoryClassName()/].eINSTANCE.create([pack.modelPackageClassName()/].Literals.[genClass.ecoreClass.name.toUpperFirst().convertToPackageString()/]);
		assertNotNull(result);
		assertTrue(result instanceof [genClass.ecoreClass.name/]);
	}
	[/for]

	/**
	 * Ensures that trying to create an {@link EClass} from another package yields the expected exception.
	 *
	 * @generated
	 */
	@Test
	public void testCreateUnknownEClass() {
		try {
			EClass eClass = EcoreFactory.eINSTANCE.createEClass();
			((EClassifierImpl)eClass).setClassifierID(-1);
			[pack.modelFactoryClassName()/].eINSTANCE.create(eClass);
			fail("Expected IllegalArgumentException hasn't been thrown");
		} catch (IllegalArgumentException e) {
			// Expected behavior
		}
	}

	[for (genEnum : GenEnum | pack.genEnums) separator('\n')]
	/**
	 * Ensures that converting {@link [genEnum.ecoreEnum.name.toUpperFirst()/]} to String can be done through the factory. 
	 *
	 * @generated
	 */
	@Test
	public void testConvert[genEnum.ecoreEnum.name.toUpperFirst()/]ToString() {
		for ([genEnum.ecoreEnum.name.toUpperFirst()/] value : [genEnum.ecoreEnum.name.toUpperFirst()/].VALUES) {
			Object result = [pack.modelFactoryClassName()/].eINSTANCE.convertToString([pack.modelPackageClassName()/].Literals.[genEnum.ecoreEnum.name.toUpperFirst().convertToPackageString()/], value);
			assertNotNull(result);
			assertEquals(value.toString(), result);
		}
	}
	[/for]

	/**
	 * Ensures that trying to convert an {@link EEnum} from another package to String yields the expected
	 * exception.
	 *
	 * @generated
	 */
	@Test
	public void testConvertUnknownEEnumToString() {
		try {
			EEnum eEnum = EcoreFactory.eINSTANCE.createEEnum();
			((EClassifierImpl)eEnum).setClassifierID(-1);
			[pack.modelFactoryClassName()/].eINSTANCE.convertToString(eEnum, eEnum);
			fail("Expected IllegalArgumentException hasn't been thrown");
		} catch (IllegalArgumentException e) {
			// Expected behavior
		}
	}

	[for (genEnum : GenEnum | pack.genEnums) separator('\n')]
	/**
	 * Ensures that creating {@link [genEnum.ecoreEnum.name.toUpperFirst()/]} from String can be done through the factory. 
	 *
	 * @generated
	 */
	@Test
	public void testCreate[genEnum.ecoreEnum.name.toUpperFirst()/]FromString() {
		for ([genEnum.ecoreEnum.name.toUpperFirst()/] value : [genEnum.ecoreEnum.name.toUpperFirst()/].VALUES) {
			Object result = [pack.modelFactoryClassName()/].eINSTANCE.createFromString([pack.modelPackageClassName()/].Literals.[genEnum.ecoreEnum.name.toUpperFirst().convertToPackageString()/], value.getLiteral());
			assertNotNull(result);
			assertSame(value, result);

			try {
				[pack.modelFactoryClassName()/].eINSTANCE.createFromString([pack.modelPackageClassName()/].Literals.[genEnum.ecoreEnum.name.toUpperFirst().convertToPackageString()/], "ThisShouldntBeAKnownEEnumLiteral");
				fail("Expected IllegalArgumentException hasn't been thrown");
			} catch (IllegalArgumentException e) {
				// Expected behavior
			}
		}
	}
	[/for]

	/**
	 * Ensures that trying to create an {@link EEnum} from another package from String yields the expected
	 * exception.
	 *
	 * @generated
	 */
	@Test
	public void testCreateUnknownEEnumFromString() {
		try {
			EEnum eEnum = EcoreFactory.eINSTANCE.createEEnum();
			((EClassifierImpl)eEnum).setClassifierID(-1);
			[pack.modelFactoryClassName()/].eINSTANCE.createFromString(eEnum, "ThisShouldntBeAKnownEEnumLiteral");
			fail("Expected IllegalArgumentException hasn't been thrown");
		} catch (IllegalArgumentException e) {
			// Expected behavior
		}
	}
}
[/file]
[/template]
