[module nonstdlib('http://www.eclipse.org/emf/2002/Ecore')/]

[template public test_nonstdlib(p : EPackage)]
	[file ('test_string_replace', false)]
		[if ('test'.replace('(t)(?x) e s (?-x)(t)', '$1se$2') = 'tset')]constant output[/if]
	[/file]
	[file ('test_string_replaceAll', false)]
		[if ('aardvark'.replaceAll('[aeiou]', 'x') = 'xxrdvxrk')]constant output[/if]
	[/file]
	[file ('test_string_substituteAll', false)]
		[if ('\\$1...*$?'.substituteAll('$', 'x') = '\\x1...*x?')]constant output[/if]
	[/file]
	[file ('test_string_startsWith', false)]
		[if ('test'.startsWith('te') and not 'test'.startsWith('es'))]constant output[/if]
	[/file]
	[file ('test_string_endsWith', false)]
		[if ('test'.endsWith('st') and not 'test'.endsWith('es'))]constant output[/if]
	[/file]
	[file ('test_string_trim', false)]
		[if ('          t   e s       t       '.trim() = 't   e s       t')]constant output[/if]
	[/file]
	[file ('test_string_tokenize', false)]
		[if ('this is a test sentence'.tokenize(' ')->includesAll(Sequence{'this', 'is', 'a', 'test', 'sentence'}))]constant output[/if]
	[/file]
	[file ('test_string_contains', false)]
		[if ('test'.contains('es') and not 'test'.contains('ests'))]constant output[/if]
	[/file]
	[file ('test_string_index', false)]
		[if ('babar'.index('a', 3) = 4)]constant output[/if]
	[/file]
	[file ('test_string_last_index', false)]
		[if ('babababar'.lastIndex('a', 3) = 4)]constant output[/if]
	[/file]
	[file ('test_string_tokenize_2', false)]
		[if ('my\ngreat\rtest').tokenize()->size() = 3]constant output[/if]
	[/file]
	[file ('test_string_tokenize_line', false)]
		[if ('this is a test sentence'.tokenizeLine()->size() = 1) and ('this\nis a\ntest sentence'.tokenizeLine()->size() = 3)]constant output[/if]
	[/file]
	[file ('test_string_prefix', false)]
		[if ('yopyop'.prefix('yop') = 'yopyopyop')]constant output[/if]
	[/file]
	[file ('test_oclany_eAllContents', false)]
		[if (not p.eAllContents()->isEmpty() and p.eAllContents()->select(oclIsKindOf(EClass)).oclAsType(EClass).name->includesAll(Sequence{'ClasseA', 'ClasseB', 'AbstractClass'}))]constant output[/if]
	[/file]
	[file ('test_oclany_typed_eAllContents', false)]
		[if (p.eAllContents(EClass).name->includesAll(Sequence{'ClasseA', 'ClasseB', 'AbstractClass'}))]constant output[/if]
	[/file]
	[file ('test_oclany_ancestors', false)]
		[if (p.eAllContents()->first().ancestors()->includes(p))]constant output[/if]
	[/file]
	[file ('test_oclany_typed_ancestors', false)]
		[if (p.eAllContents()->first().ancestors(EClass)->isEmpty() and p.eAllContents()->first().ancestors(EPackage)->includes(p))]constant output[/if]
	[/file]
	[file ('test_oclany_siblings', false)]
		[if (p.eAllContents()->first().siblings().oclAsType(EClass).name->includesAll(Sequence{'ClasseB', 'AbstractClass'}))]constant output[/if]
	[/file]
	[file ('test_oclany_typed_siblings', false)]
		[if (p.eAllContents()->first().siblings(EPackage)->isEmpty() and p.eAllContents()->first().siblings(EClass).name->includesAll(Sequence{'ClasseB', 'AbstractClass'}))]constant output[/if]
	[/file]
	[file ('test_oclany_eInverse', false)]
		[if (p.eAllContents()->first().eInverse()->includes(p.eAllContents()->first().siblings()->select(oclIsKindOf(EClass)).oclAsType(EClass)->first().eReferences->first()))]constant output[/if]
	[/file]
	[file ('test_oclany_typed_eInverse', false)]
		[if (p.eAllContents()->first().eInverse(EReference)->includes(p.eAllContents()->first().siblings(EClass)->first().eReferences->first()))]constant output[/if]
	[/file]
	[file ('test_oclany_toString', false)]
		[if (p.toString().contains(p.name))]constant output[/if]
	[/file]
	[file ('test_oclany_invoke', false)]
		[if (invoke('this.is.an.unknown.Object', 'method()', Sequence{p}).oclIsInvalid() and invoke('java.lang.Object', 'unknownMethod()', Sequence{p}).oclIsInvalid() and invoke('java.lang.Object', 'toString', Sequence{p}).oclAsType(String).contains('arge'))]constant output[/if]
	[/file]
	[file ('test_oclany_line_separator', false)]
		[if (not p.lineSeparator().oclIsUndefined())]constant output[/if]
	[/file]
	[file ('test_collection_sep_3', false)]
		[if (Sequence{'a', 'b', 'c'}->sep('prefix', 'separator', 'suffix') = Sequence{'prefix', 'a', 'separator', 'b', 'separator', 'c', 'suffix'})]constant output[/if]
	[/file]
	[file ('test_collection_add_all_sequence_1', false)]
		[if (Sequence{'a', 'b', 'c'}->addAll(OrderedSet{'a', 'b', 'c'})->size() = 6)]constant output[/if]
	[/file]
	[file ('test_collection_add_all_sequence_2', false)]
		[if (Sequence{'a', 'b', 'c'}->addAll(Bag{'a', 'b', 'c'})->size() = 6)]constant output[/if]
	[/file]
	[file ('test_collection_add_all_sequence_3', false)]
		[if (Sequence{'a', 'b', 'c'}->addAll(Set{'a', 'b', 'c'})->size() = 6)]constant output[/if]
	[/file]
	[file ('test_collection_add_all_sequence_4', false)]
		[if (Sequence{'a', 'b', 'c'}->addAll(Sequence{'a', 'b', 'c'})->size() = 6)]constant output[/if]
	[/file]
	[file ('test_collection_add_all_ordered_set_1', false)]
		[if (OrderedSet{'a', 'b', 'c'}->addAll(Sequence{'a', 'b', 'c', 'd'})->size() = 4)]constant output[/if]
	[/file]
	[file ('test_collection_add_all_ordered_set_2', false)]
		[if (OrderedSet{'a', 'b', 'c'}->addAll(Bag{'a', 'b', 'c', 'd'})->size() = 4)]constant output[/if]
	[/file]
	[file ('test_collection_add_all_ordered_set_3', false)]
		[if (OrderedSet{'a', 'b', 'c'}->addAll(OrderedSet{'a', 'b', 'c', 'd'})->size() = 4)]constant output[/if]
	[/file]
	[file ('test_collection_add_all_ordered_set_4', false)]
		[if (OrderedSet{'a', 'b', 'c'}->addAll(Set{'a', 'b', 'c', 'd'})->size() = 4)]constant output[/if]
	[/file]
	[file ('test_collection_add_all_bag_1', false)]
		[if (Bag{'a', 'b', 'c'}->addAll(Sequence{'a', 'b', 'c'})->size() = 6)]constant output[/if]
	[/file]
	[file ('test_collection_add_all_bag_2', false)]
		[if (Bag{'a', 'b', 'c'}->addAll(Bag{'a', 'b', 'c'})->size() = 6)]constant output[/if]
	[/file]
	[file ('test_collection_add_all_bag_3', false)]
		[if (Bag{'a', 'b', 'c'}->addAll(OrderedSet{'a', 'b', 'c'})->size() = 6)]constant output[/if]
	[/file]
	[file ('test_collection_add_all_bag_4', false)]
		[if (Bag{'a', 'b', 'c'}->addAll(Set{'a', 'b', 'c'})->size() = 6)]constant output[/if]
	[/file]
	[file ('test_collection_add_all_set_1', false)]
		[if (Set{'a', 'b', 'c'}->addAll(Sequence{'a', 'b', 'c', 'd'})->size() = 4)]constant output[/if]
	[/file]
	[file ('test_collection_add_all_set_2', false)]
		[if (Set{'a', 'b', 'c'}->addAll(Bag{'a', 'b', 'c', 'd'})->size() = 4)]constant output[/if]
	[/file]
	[file ('test_collection_add_all_set_3', false)]
		[if (Set{'a', 'b', 'c'}->addAll(Set{'a', 'b', 'c', 'd'})->size() = 4)]constant output[/if]
	[/file]
	[file ('test_collection_add_all_set_4', false)]
		[if (Set{'a', 'b', 'c'}->addAll(OrderedSet{'a', 'b', 'c', 'd'})->size() = 4)]constant output[/if]
	[/file]
	[file ('test_collection_remove_all_sequence_1', false)]
		[if (Sequence{'a', 'b', 'c'}->removeAll(OrderedSet{'a', 'b', 'c'})->size() = 0)]constant output[/if]
	[/file]
	[file ('test_collection_remove_all_sequence_2', false)]
		[if (Sequence{'a', 'b', 'c'}->removeAll(Set{'a', 'b', 'c'})->size() = 0)]constant output[/if]
	[/file]
	[file ('test_collection_remove_all_sequence_3', false)]
		[if (Sequence{'a', 'b', 'c'}->removeAll(Bag{'a', 'b', 'c'})->size() = 0)]constant output[/if]
	[/file]
	[file ('test_collection_remove_all_sequence_4', false)]
		[if (Sequence{'a', 'b', 'c'}->removeAll(Sequence{'a', 'b', 'c'})->size() = 0)]constant output[/if]
	[/file]
	[file ('test_collection_remove_all_ordered_set_1', false)]
		[if (OrderedSet{'a', 'b', 'c'}->removeAll(OrderedSet{'a', 'b', 'c'})->size() = 0)]constant output[/if]
	[/file]
	[file ('test_collection_remove_all_ordered_set_2', false)]
		[if (OrderedSet{'a', 'b', 'c'}->removeAll(Sequence{'a', 'b', 'c'})->size() = 0)]constant output[/if]
	[/file]
	[file ('test_collection_remove_all_ordered_set_3', false)]
		[if (OrderedSet{'a', 'b', 'c'}->removeAll(Bag{'a', 'b', 'c'})->size() = 0)]constant output[/if]
	[/file]
	[file ('test_collection_remove_all_ordered_set_4', false)]
		[if (OrderedSet{'a', 'b', 'c'}->removeAll(Set{'a', 'b', 'c'})->size() = 0)]constant output[/if]
	[/file]
	[file ('test_collection_remove_all_set_1', false)]
		[if (Set{'a', 'b', 'c'}->removeAll(Set{'a', 'b', 'c'})->size() = 0)]constant output[/if]
	[/file]
	[file ('test_collection_remove_all_set_2', false)]
		[if (Set{'a', 'b', 'c'}->removeAll(OrderedSet{'a', 'b', 'c'})->size() = 0)]constant output[/if]
	[/file]
	[file ('test_collection_remove_all_set_3', false)]
		[if (Set{'a', 'b', 'c'}->removeAll(Sequence{'a', 'b', 'c'})->size() = 0)]constant output[/if]
	[/file]
	[file ('test_collection_remove_all_set_4', false)]
		[if (Set{'a', 'b', 'c'}->removeAll(Bag{'a', 'b', 'c'})->size() = 0)]constant output[/if]
	[/file]
	[file ('test_collection_remove_all_bag_1', false)]
		[if (Bag{'a', 'b', 'c'}->removeAll(Set{'a', 'b', 'c'})->size() = 0)]constant output[/if]
	[/file]
	[file ('test_collection_remove_all_bag_2', false)]
		[if (Bag{'a', 'b', 'c'}->removeAll(OrderedSet{'a', 'b', 'c'})->size() = 0)]constant output[/if]
	[/file]
	[file ('test_collection_remove_all_bag_3', false)]
		[if (Bag{'a', 'b', 'c'}->removeAll(Sequence{'a', 'b', 'c'})->size() = 0)]constant output[/if]
	[/file]
	[file ('test_collection_remove_all_bag_4', false)]
		[if (Bag{'a', 'b', 'c'}->removeAll(Bag{'a', 'b', 'c'})->size() = 0)]constant output[/if]
	[/file]
	[file ('test_collection_drop', false)]
		[if (Sequence{'a', 'b', 'c'}->drop(2) = Sequence{'c'})]constant output[/if]
	[/file]
	[file ('test_collection_drop_right', false)]
		[if (Sequence{'a', 'b', 'c'}->dropRight(2) = Sequence{'a'})]constant output[/if]
	[/file]
	[file ('test_collection_starts_with', false)]
		[if (Sequence{'a', 'b', 'c'}->startsWith(OrderedSet{'a', 'b'}))]constant output[/if]
	[/file]
	[file ('test_collection_ends_with', false)]
		[if (Sequence{'a', 'b', 'c'}->endsWith(OrderedSet{'b', 'c'}))]constant output[/if]
	[/file]
	[file ('test_collection_index_of_slice', false)]
		[if (Sequence{'a', 'b', 'c', 'b', 'c'}->indexOfSlice(OrderedSet{'b', 'c'}) = 2)]constant output[/if]
	[/file]
	[file ('test_collection_last_index_of_slice', false)]
		[if (Sequence{'a', 'b', 'c', 'b', 'c'}->lastIndexOfSlice(OrderedSet{'b', 'c'}) = 4)]constant output[/if]
	[/file]
[/template]