[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module generate('http://www.eclipse.org/emf/2002/Ecore')]


[**
 * The documentation of the template generateRacket.
 * @param anOclAny
 */]
[template public generateRacket(anEPackage : EPackage)]
[comment @main/]
[file (anEPackage.name+'.rkt', false, 'UTF-8')]
#lang racket/base

; (module [anEPackage.name/] racket/base

  (require racket/class racket/contract)

  ;; Support functions
  (require "../src/ecore-support.rkt")
  (provide (all-from-out "../src/ecore-support.rkt"))

  ;; The package
  (provide [pkg_var_name(anEPackage)/])
  [generate_provides(anEPackage)/]

(define [pkg_var_name(anEPackage)/] null)
(with-epackage
 [pkg_var_name(anEPackage)/] "[anEPackage.name/]" "[anEPackage.nsURI/]" [anEPackage.nsPrefix/]
[for (klass : EClass | anEPackage.eClassifiers->filter(EClass))]
[generate_EClass(klass)/]

[/for]

[for (dt : EDataType | anEPackage.eClassifiers->filter(EDataType))]
[generate_datatype(dt)/]

[/for]
)

;) ; end module [anEPackage.name/]
[/file]
[/template]

[template private generate_datatype (aEDataType : EDataType) ]
(edatatype [aEDataType.name/] [t_f(aEDataType.serializable)/] 0 [comment TODO/])
 
[/template]

[query private pkg_var_name(p : EPackage) : String = p.name + '-package' /]

[query private datatype_to_racket (dt : EDataType) : String =
 dt.ePackage.nsPrefix + ':' + dt.name/]

[template private generate_provides (anEPackage : EPackage) ]
(provide
	[for (klass : EClass | anEPackage.eClassifiers->filter(EClass))]
		[eclass_to_racket_class_name(klass)/]
	[/for]
	)
[/template]

[template private generate_EClass(klass: EClass)]
[generate_interface(klass)/]
[generate_EClass_proper(klass)/]
[/template]

[template private generate_interface (aEClass : EClass) ]
(define [eclass_to_racket_interface_name(aEClass)/] 
  (interface ([superiface_spec(aEClass)/])  
[for (sf: EStructuralFeature | aEClass.eStructuralFeatures)]
	[sf.name/]
[if sf.changeable]
	[sf.name/]-set!
[/if]
[if (sf.upperBound <> 1)]
    [sf.name/]-append!
[/if]

[/for]
))
[/template]


[template private generate_EClass_proper(klass: EClass)]
[let cname:String = eclass_to_racket_class_name(klass)] 
;; Class [klass.name/]
(eclass 
  [cname/] [superclass_spec(klass)/] [comment (eclass_to_racket_interface_name(klass))/]

    ;; fields (features)
	[generate_fields(klass)/]

  )
[/let]
[/template]

[template private generate_fields(klass : EClass)]
[gen_structural_features(klass)/]
[/template]

[template private gen_structural_features(klass : EClass)]
[gen_attributes(klass)/]
[gen_references(klass)/]
[/template]


[query private default_value_for_type (sf : EStructuralFeature) : String =
  if sf.oclIsKindOf(EAttribute) then
    default_value_for_type(sf.oclAsType(EAttribute))
  else
    default_value_for_type(sf.oclAsType(EReference))
  endif/]


[query private default_value_for_type (sf : EAttribute) : String =
    let att: EAttribute = sf.oclAsType(EAttribute) in
        if (att.eType = EString) then
        '""'
        else if (att.eType = EBoolean) then
        '#f'
        else -- numbers usually
        '0'
        endif 
        endif/]


[query private default_value_for_type (sf : EReference) : String =
 'null' /]


[template private gen_references(klass : EClass)]
[for (ref: EReference | klass.eStructuralFeatures->filter(EReference))]
; reference [ref.name/]
(reference [ref.name/] [eclass_to_racket_class_fqn(ref.eType)/] [t_f(ref.containment)/] [ref.lowerBound/] [ref.upperBound/])

[/for]
[/template]

[template private gen_attributes(klass : EClass)]
[for (att: EAttribute | klass.eStructuralFeatures->filter(EAttribute))]
; attribute [att.name/]
(attribute [att.name/] [datatype_to_racket(att.eAttributeType)/] [att.lowerBound/] [att.upperBound/])

[/for]
[/template]


[query private t_f (value : EBoolean) : String =
  if value then '#t' else '#f' endif/]

[query private eclass_to_racket_class_name(klass: EClassifier) : String =
  klass.name/]

[query private eclass_to_racket_interface_name(klass: EClassifier) : String =
 klass.name + '<%>' /]

[query private superclass_spec(klass : EClass) : String = 
  let superclasses : OrderedSet(EClass) = klass.eSuperTypes in
    if (superclasses->size() = 0) then
      'ecore:EObject'
    else
      eclass_to_racket_class_name(superclasses->first())
    endif /]

[query private superiface_spec(klass : EClass) : String = 
  let superclasses : OrderedSet(EClass) = klass.eSuperTypes in
    if (superclasses->size() = 0) then
      'ecore:EObject<%>'
    else
      eclass_to_racket_interface_name(superclasses->first())
    endif /]

[query private eclass_to_racket_class_fqn (c : EClassifier) : String =
  c.ePackage.nsPrefix + ':' + c.name /]