[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module generate2('http://www.eclipse.org/emf/2002/Ecore')]


[**
 * The documentation of the template generateRacket.
 * @param anOclAny
 */]
[template public generateRacket(anEPackage : EPackage)]
[comment @main/]
[file (decamel(anEPackage.name)+'.rkt', false, 'UTF-8')]
#lang racket/base

; (module [decamel(anEPackage.name)/] racket/base

  (require racket/class racket/contract)

  ;; Support functions
  (require "../src/ecore-support.rkt")

  [generate_provides(anEPackage)/]

[for (klass : EClass | anEPackage.eClassifiers->filter(EClass))]
[generate_EClass(klass)/]

[/for]

;; Contracts
[for (klass : EClass | anEPackage.eClassifiers->filter(EClass))]
[generate_contract(klass)/]

[/for]
;) ; end module [decamel(anEPackage.name)/]
[/file]
[/template]

[template private generate_contract (aEClass : EClass)]
[let cname:String = eclass_to_racket_class_name(aEClass)]
[let iname:String = eclass_to_racket_interface_name(aEClass)]
(define/contract [cname/] 
	(class/c 
        [gen_feature_contracts(aEClass)/]
    ) [cname/]/b)
[/let]
[/let]
[/template]

[template private gen_feature_contracts (aEClass : EClass)]
[for (sf : EStructuralFeature | aEClass.eStructuralFeatures) ]
    [gen_contract(sf)/]
[/for]
[/template]

[template public gen_contract (sf : EStructuralFeature) ? (sf.oclIsKindOf(EAttribute)) ]
[let dec : String = decamel(sf.name)]
[if (sf.upperBound = 1)]
[comment Easy version of the accessors/]
([dec/] (->m [datatype_to_racket(sf)/]))
[if sf.changeable]
([dec/]-set! (->m [datatype_to_racket(sf)/] void?))
[/if]
[else]
([dec/] (case->m (-> (and/c (vectorof [datatype_to_racket(sf)/]) (not/c immutable?)))
                 (-> natural-number/c [datatype_to_racket(sf)/])))
[if sf.changeable]
([dec/]-set! (case->m (-> (and/c (vectorof [datatype_to_racket(sf)/]) (not/c immutable?)) void?)
                      (-> [datatype_to_racket(sf)/] natural-number/c void?)))
[/if]
[/if]
[/let]
[/template]

[template public gen_contract (sf : EStructuralFeature) ? (sf.oclIsKindOf(EReference)) ]
[let dec : String = decamel(sf.name)]
[if (sf.upperBound = 1)]
[comment Easy version of the accessors/]
([dec/] (->m (or/c null? (is-a?/c [reference_to_racket(sf)/]/b))))
[if sf.changeable]
([dec/]-set! (->m (or/c null? (is-a?/c [reference_to_racket(sf)/]/b)) void?))
[/if]
[else]
([dec/] (case->m (-> (and/c (vectorof (or/c null?
                                            (is-a?/c [reference_to_racket(sf)/]/b))) (not/c immutable?)))
                 (-> natural-number/c (or/c null? (is-a?/c [reference_to_racket(sf)/]/b)))))
[if sf.changeable]
([dec/]-set! (case->m (-> (and/c (vectorof 
                                  (or/c null?
                                        (is-a?/c [reference_to_racket(sf)/]/b))) (not/c immutable?)) void?)
                      (-> (or/c null? (is-a?/c [reference_to_racket(sf)/]/b)) natural-number/c void?)))
[/if]
[/if]
[/let]
[/template]

[template private reference_to_racket (sf : EStructuralFeature) ]
[eclass_to_racket_class_name(sf.eType.oclAsType(EClass))/]
[/template]

[template private datatype_to_racket (sf : EStructuralFeature) ]
[if (sf.eType = EString)]
string?
[elseif (sf.eType = EBoolean)]
boolean?
[else][comment Integers, mainly TODOTODOTODO/]
number?
[/if]
[/template]

[template private generate_provides (anEPackage : EPackage) ]
(provide
	[for (klass : EClass | anEPackage.eClassifiers->filter(EClass))]
		[eclass_to_racket_class_name(klass)/]
	[/for]
	)
[/template]

[template private generate_EClass(klass: EClass)]
[generate_interface(klass)/]
[generate_EClass_proper(klass)/]
[/template]

[template private generate_interface (aEClass : EClass) ]
(define [eclass_to_racket_interface_name(aEClass)/] 
  (interface ([superiface_spec(aEClass)/])  
[for (sf: EStructuralFeature | aEClass.eStructuralFeatures)]
[let dec : String = decamel(sf.name)]
	[dec/]
[if sf.changeable]
	[dec/]-set!
[/if]
[/let]
[/for]
))
[/template]


[template private generate_EClass_proper(klass: EClass)]
[let cname:String = eclass_to_racket_class_name(klass)] 
;; Class [klass.name + ' (' + cname + ')'/]
(define [cname/]/b
  (class* [superclass_spec(klass)/] (classifier<%> [eclass_to_racket_interface_name(klass)/])
	[comment See if generating some init method /]
    (super-new)

	;; Make it available for introspection (TODO: see a more general method)
	(inspect #f)

	;; classifier& interface methods
    (define/override (e-name)
		"[klass.name/]")
	(define/override (e-attributes)
		[attributes_list(klass)/]	
	)
	(define/override (e-references)
		[references_list(klass)/]
	)

    (define/override (e-all-attributes)
		[all_attributes_list(klass)/]	
	)
	(define/override (e-all-references)
		[all_references_list(klass)/]
	)


    ;; fields (features)
	[generate_fields(klass)/]

  ))
[/let]
[/template]

[template private generate_fields(klass : EClass)]
[gen_structural_features(klass, klass.eAttributes)/]
[gen_structural_features(klass, klass.eReferences)/]
[/template]

[template private gen_structural_features(klass : EClass, set: OrderedSet(EStructuralFeature))]
[for (sf: EStructuralFeature | set)]
[let dec : String = decamel(sf.name)]
; Structural Feature [dec/]
(define -[dec/] 
  [default_value(sf)/]
)
[if (sf.upperBound = 1)]
[comment Easy version of the accessors/]
(define/public ([dec/])
    -[dec/])
[if sf.changeable]
(define/public ([dec/]-set! val)
    (set! -[dec/] val))
[/if]
[else]
(define [dec/]
  (case-lambda
   (() -[dec/])
   ((pos)
     (when (<= (vector-length -[dec/]) pos)
      (let ((new-vector (make-vector (+ 1 pos) [default_value_for_type(sf)/])))
        ;; grow the vector
        (vector-copy! new-vector 0 -[dec/])
        (set! -[dec/] new-vector)))
     (vector-ref -[dec/] pos))))
(public [dec/])
[if sf.changeable]
(define [dec/]-set!
 (case-lambda
  ((val) (set! -[dec/] val))
  ((val pos)
    (when (<= (vector-length -[dec/]) pos)
     (let ((new-vector (make-vector (+ 1 pos) [default_value_for_type(sf)/])))
       ;; grow the vector
       (vector-copy! new-vector 0 -[dec/])
       (set! -[dec/] new-vector)))
    (vector-set! -[dec/] pos val))))
(public [dec/]-set!)
[/if]
[/if]
[/let]
[/for]
[/template]

[template private default_value (sf : EStructuralFeature) ]
[comment TODO: distinguish types/]
[let upper :Integer = sf.upperBound]
[if (upper < 0)]
(make-vector 0)
[elseif (upper <> 1)] 
(make-vector [upper/])
[else]
[default_value_for_type(sf)/]
[/if]
[/let]
[/template]

[template private default_value_for_type (sf : EStructuralFeature) ? (sf.oclIsKindOf(EAttribute)) ]
[let att: EAttribute = sf.oclAsType(EAttribute)]
[if (att.eType = EString)]
""
[elseif (att.eType = EBoolean)]
#f
[else][comment Integers, mainly/]
0
[/if]
[/let]
[/template]

[template private default_value_for_type (sf : EStructuralFeature) ? (sf.oclIsKindOf(EReference)) ]
[let ref: EReference = sf.oclAsType(EReference)]
null
[/let]
[/template]


[template private gen_references(klass : EClass)]
[for (ref: EReference | klass.eStructuralFeatures->filter(EReference))]
[let dec : String = decamel(ref.name)]
; reference [dec/]
(define -[dec/] null)
(define/public ([dec/])
	-[dec/])
[if ref.changeable]
(define/public ([dec/]-set! val)
	(set! -[dec/] val))
[/if]

[/let]
[/for]
[/template]


[template private eclass_to_racket_class_name(klass: EClass)]
[decamel(klass.name)/]%
[/template]

[template private eclass_to_racket_interface_name(klass: EClass)]
[decamel(klass.name)/]<%>
[/template]

[template private superclass_spec(klass : EClass)]
[let superclasses : OrderedSet(EClass) = klass.eSuperTypes]
[if (superclasses->size() = 0)]
eobject%
[else]
[eclass_to_racket_class_name(superclasses->first())/]/b
[/if]
[/let]	
[/template]

[template private superiface_spec(klass : EClass)]
[let superclasses : OrderedSet(EClass) = klass.eSuperTypes]
[if (superclasses->size() <> 0)]
[eclass_to_racket_interface_name(superclasses->first())/]
[/if]
[/let]	
[/template]

[template private decamel(name : EString)]
[name.replaceAll('([a-z])([A-Z][a-z])', '$1-$2').toLowerCase()/]
[/template]

[template private attributes_list (klass : EClass) ]
'( 
[for (att: EAttribute | klass.eStructuralFeatures->filter(EAttribute))]
[decamel(att.name)/]
[/for]
)
[/template]

[template private references_list (klass : EClass) ]
'( 
[for (ref: EReference | klass.eStructuralFeatures->filter(EReference))]
[decamel(ref.name)/]
[/for]
)
[/template]

[template private all_attributes_list (klass : EClass) ]
'( 
[for (att: EAttribute | klass.eAllStructuralFeatures->filter(EAttribute))]
[decamel(att.name)/]
[/for]
)
[/template]

[template private all_references_list (klass : EClass) ]
'( 
[for (ref: EReference | klass.eAllStructuralFeatures->filter(EReference))]
[decamel(ref.name)/]
[/for]
)
[/template]