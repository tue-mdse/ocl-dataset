[comment encoding = UTF-8 /]
[module wordCommon('http://www.eclipse.org/uml2/4.0.0/UML',
	'http://www.eclipse.org/qvt/1.0/ImperativeOCL',
	'http://www.eclipse.org/qvt/1.0.0/Operational/Expressions',
	'http://www.eclipse.org/xsd/2002/XSD',
	'http://www.eclipse.org/ocl/1.1.0/Ecore')/]
[import commonQuery/]
[comment]
[query public enableConstraintComments():Boolean=false/]	

[template public textStart(styleName:String)]<text:p text:style-name="[styleName/]">[/template]	
[template public textEnd()]</text:p>[/template]	
[template public headerTitleContent()]<text:title>Title</text:title>[/template]
[template public headerTitle()]['P4'.textStart()/][headerTitleContent()/][textEnd()/][/template]
[template public headerSubject()]['P4'.textStart()/]<text:subject>Subject</text:subject>[textEnd()/][/template]
[template public headerTextSpan(text:String,styleName:String,spanStyle:String)]
	<text:p text:style-name="[styleName/]"><text:span text:style-name="[spanStyle/]">[text/]</text:span></text:p>
[/template]	
	
[template public isBlackbox(isAbstract:Boolean)][indentp()/][bold()/]isBlackbox:[spanEnd()/] [isAbstract/][indentpEnd()/][/template]
[template public Module(p:Module)][indentp()/][bold()/]Module:[spanEnd()/][p.metaElementReference()/][indentpEnd()/][/template]
[template public Overridden(c:ecore::EOperation)]
	[if(not(c.oclIsUndefined()))]
	[indentp()/][bold()/]Overridden: [spanEnd()/][c.metaElementReference()/][indentpEnd()/]
	[/if]
[/template]

[template public tableOfContentEntryBody()]
	<text:index-entry-link-start />
	<text:index-entry-chapter />
	<text:index-entry-span>
	</text:index-entry-span>
	<text:index-entry-text />
	<text:index-entry-tab-stop style:type="right"
		style:leader-char="." />
	<text:index-entry-page-number />
	<text:index-entry-link-end />
[/template]	
[template public tableOfContentEntry(styleName:String)]
	<text:table-of-content-entry-template text:outline-level="1" text:style-name="[styleName/]">
		[tableOfContentEntryBody()/]
	</text:table-of-content-entry-template>
[/template]	
[template public tableOfContentEntry2(styleName:String)]
	<text:table-of-content-entry-template text:outline-level="1" text:style-name="[styleName/]">
		[tableOfContentEntryBody()/]
		<text:index-entry-tab-stop style:type="left" style:position="7.5146in" style:leader-char="." style:with-tab="false" />
	</text:table-of-content-entry-template>
[/template]	
[query public refName(name:String):String='a'+name.replaceAll('\\.','').replaceAll(' ','').replaceAll('_','').replaceAll('-','')/]

[template public tochBase(title:String,chapter:String,styleName:String,chapterDisplay:String)]
	<text:p text:style-name="[styleName/]">
		<text:a xlink:type="simple" xlink:href="#[('__RefHeading__'+chapter).refName()/]">
			[chapterDisplay/] [title/]
			<text:tab />
			<text:bookmark-ref text:reference-format="page"
				text:ref-name="[('__RefHeading__'+chapter).refName()/]"></text:bookmark-ref>
		</text:a>
	</text:p>
[/template]
[template public toch(title:String,chapter:String,styleName:String)][title.tochBase(chapter,styleName,chapter)/][/template]
[template public toch1(title:String,chapter:Integer)][title.toch(chapter.toString(),'P65')/][/template]
[template public toch2(title:String,chapter:Integer,section:Integer)][title.toch((chapter.toString()+'.'+section.toString()),'P64')/][/template]
[template public toch3(title:String,chapter:Integer,section:Integer,subsection:Integer)]
	[title.toch((chapter.toString()+'.'+section.toString()+'.'+subsection.toString()),'P66')/]
[/template]
[template public toch4(title:String,chapter:Integer,section:Integer,subsection:Integer,subsubsection:Integer)]
	[title.toch((chapter.toString()+'.'+section.toString()+'.'+subsection.toString()+'.'+subsubsection.toString()),'P66a')/]
[/template]
[template public toch5(title:String,chapter:Integer,section:Integer,subsection:Integer,subsubsection:Integer,subsubsubsection:Integer)]
	[title.toch((chapter.toString()+'.'+section.toString()+'.'+subsection.toString()+'.'+subsubsection.toString()+'.'+subsubsubsection.toString()),'P66a')/]
[/template]
[template public tochAnnex(title:String,annex:String)]
	[title.tochBase(annex,'P65','')/]
[/template]

[template public bookmarkedTitle(title:String,chapter:String)]
	<text:bookmark-start text:name="[('__RefHeading__'+chapter).refName()/]" />[chapter/] [title/]<text:bookmark-end text:name="[('__RefHeading__'+chapter).refName()/]" />
[/template]

[template public contenthAnnex(title:String,annex:String,anchor:String)]
	[pageBreak()/]
	<text:p text:style-name="annexTitle">
		<text:s/>[title.bookmarkedTitle(annex)/][anchor/]
	</text:p>
	<text:p text:style-name="P17"/>
	<text:p text:style-name="Annex2">(informative)</text:p>
	
[/template]
[template public contenth1base(title:String,chapter:Integer,style:String,anchor:String)]
	<text:h text:style-name="[style/]" text:outline-level="1" >[title.bookmarkedTitle(chapter.toString())/][anchor/]</text:h>
[/template]
[template public contenth1(title:String,chapter:Integer,anchor:String)][title.contenth1base(chapter,'P56',anchor)/][/template]
[template public contenth1break(title:String,chapter:Integer,anchor:String)][title.contenth1base(chapter,'h1break',anchor)/][/template]
[template public contenth2(title:String,chapter:Integer,section:Integer,anchor:String)]
	[emptyP()/]
	<text:h text:style-name="P61" text:outline-level="2">
		[title.bookmarkedTitle(chapter.toString()+'.'+section.toString())/][anchor/]
	</text:h>
[/template]
[template public contenth3(title:String,chapter:Integer,section:Integer,subsection:Integer,anchor:String)]
	<text:h text:style-name="Heading_20_3" text:outline-level="3">
		[title.bookmarkedTitle(chapter.toString()+'.'+section.toString()+'.'+subsection.toString())/][anchor/]
	</text:h>
[/template]
[template public contenth4(title:String,chapter:Integer,section:Integer,subsection:Integer,subsubsection:Integer,anchor:String)]
	<text:h text:style-name="Heading_20_4" text:outline-level="4">
		[title.bookmarkedTitle(chapter.toString()+'.'+section.toString()+'.'+subsection.toString()+'.'+subsubsection.toString())/][anchor/]
	</text:h>
[/template]
[template public contenth5(title:String,chapter:Integer,section:Integer,subsection:Integer,subsubsection:Integer,subsubsubsection:Integer,anchor:String)]
	<text:h text:style-name="Heading_20_5" text:outline-level="5">
		[title.bookmarkedTitle(chapter.toString()+'.'+section.toString()+'.'+subsection.toString()+'.'+subsubsection.toString()+'.'+subsubsubsection.toString())/][anchor/]
	</text:h>
[/template]

[template public startTable(tableName:String)]
	<table:table table:name="[tableName/]" table:style-name="Table1">
		<table:table-column table:style-name="Table1.A" />
		<table:table-column table:style-name="Table1.B" />
		<text:soft-page-break />
[/template]
[template public startTable3(tableName:String)]
	<table:table table:name="[tableName/]" table:style-name="Table3X">
		<table:table-column table:style-name="Table3X.A" />
		<table:table-column table:style-name="Table3X.B" />
		<table:table-column table:style-name="Table3X.C" />
		<text:soft-page-break />
[/template]
[template public endTable()]</table:table>[/template]
[template public indentTable(tableName:String)][tableName.startTable()/][/template]
[template public indentTableEnd()][endTable()/][/template]

[template public startTableRow()]<table:table-row table:style-name="Table1.1">[/template]
[template public endTableRow()]</table:table-row>[/template]
[template public tdBoldB(text:String)]
	<table:table-cell table:style-name="Table1.B1"
		office:value-type="string">
		<text:p text:style-name="P28">[text/]</text:p>
	</table:table-cell>
[/template]
[template public tdCellStart()]<table:table-cell table:style-name="Table1.A2" office:value-type="string">[/template]
[template public tdCellEnd()]</table:table-cell>[/template]
[template public tdNormalStart()][tdCellStart()/][pStart()/][/template]
[template public tdNormal(text:String)][tdNormalStart()/][text/][tdEnd()/][/template]
[template public tdNormalBStartHead()]<table:table-cell table:style-name="Table1.B2" office:value-type="string">[/template]
[template public tdNormalBStart()][tdNormalBStartHead()/][pStart()/][/template]
[template public tdEnd()][pEnd()/][tdCellEnd()/][/template]
[template public tdNormalB(text:String)][tdNormalBStart()/][text/][tdEnd()/][/template]
[template public tdBold(text:String)][tdNormalStart()/][bold()/][text/][spanEnd()/][tdEnd()/][/template]
[template public elementAnchor(element : NamedElement)][element.elementAnchorBookmark()/][bold()/][element.name().replaceAll('&','&amp;').replaceAll('<','&lt;')/][spanEnd()/][/template]
[template public metaelementAnchor(element : ecore::ENamedElement)][element.metaElementAnchorBookmark()/][element.name()/][/template]
[template public structuralFeatureRow(sf : Property,documentedPackages:Collection(Package))]
	[liStart()/]
		[sf.structuralFeatureAnchor(documentedPackages)/][newP()/]
			[sf.genUmlElementComments()/]
	[liEnd()/]
[/template]
[template public redefinitionRow(target:Property,documentedPackages:Collection(Package))]
	[startTableRow()/]
	[target.redefinedStructuralFeature(documentedPackages).tdNormal()/]
	[tdNormalBStart()/][target.redefinedProperty.structuralFeatureRedefinition(target,documentedPackages)/][tdEnd()/]
	[endTableRow()/]
[/template]
[template public metaReference(cf : ecore::ENamedElement,documentedPackages:Collection(ecore::EPackage))]
	[if(cf.oclIsKindOf(ecore::EClassifier))][cf.oclAsType(ecore::EClassifier).classReference(documentedPackages)/]
	[elseif(cf.oclIsKindOf(ecore::EStructuralFeature))][cf.oclAsType(ecore::EStructuralFeature).structuralFeatureReference(documentedPackages)/]
	[else]
		[cf.name/]
	[/if]
[/template]
[template public structuralFeatureReference(cf : ecore::EStructuralFeature,documentedPackages:Collection(ecore::EPackage)){
	metaReference:ecore::EStructuralFeature=if(documentedPackages->includes(cf.eContainer().eContainer()))then cf 
		else documentedPackages
			->select(p|p.name='mif2' and (cf.eContainingClass.ePackage.name<>'uml')).eClassifiers
			->select(c|c.oclIsKindOf(ecore::EClass) and (c.name=cf.eContainingClass.name)).oclAsType(ecore::EClass).eStructuralFeatures
			->select(c|c.name=cf.name)
			->asSequence()->first()
		endif; 
}]
	[if(not(metaReference.oclIsUndefined()))]
		[metaReference.metaElementReference()/]
	[else]
		[cf.name/]
	[/if]
[/template]

[template public notRedefinitionRow(target:Property,documentedPackages:Collection(Package))]
	[startTableRow()/]
	[target.redefinedStructuralFeature(documentedPackages).tdNormal()/]
	[tdNormalBStart()/]
		[redFont()/]Property with NIEM name [target.getPropertyNIEMName()/] undefined in reference model[spanEnd()/]
	[tdEnd()/]
	[endTableRow()/]
[/template]
[template public enumerationAddedRow(target:EnumerationLiteral,subsets:Classifier){
	matches:Sequence(EnumerationLiteral)=subsets
		->select(s:Classifier|s.oclIsKindOf(Enumeration)).oclAsType(Enumeration).ownedLiteral
		->select(s:EnumerationLiteral|s.name=target.name)->asSequence();
}]
	[if(matches->size()<>1)]
		[startTableRow()/]
			[target.name.oclAsType(String).tdNormal()/]
			[tdNormalBStart()/]
				[if(matches->isEmpty())]
					[redFont()/]undefined in reference model[spanEnd()/]
				[else]
					[redFont()/]ambiguous - multiple definitions in reference model[spanEnd()/]
				[/if]	
			[tdEnd()/]
		[endTableRow()/]
	[/if]
[/template]
[template public enumerationRemovedRow(target:EnumerationLiteral,enumeration:Enumeration){
	matches:Sequence(EnumerationLiteral)=enumeration.ownedLiteral
		->select(s:EnumerationLiteral|s.name=target.name)->asSequence();
}]
	[if(matches->size()<>1)]
		[startTableRow()/]
			[tdNormalStart()/]
				[if(matches->isEmpty())]
					[redFont()/]undefined in extension model[spanEnd()/]
				[else]
					[redFont()/]ambiguous - multiple definitions in extension model[spanEnd()/]
				[/if]	
			[tdEnd()/]
			[target.name.oclAsType(String).tdNormalB()/]
		[endTableRow()/]
	[/if]
[/template]

[template public traceabilityRow(target:Usage,documentedPackages:Collection(Package))]
	[startTableRow()/]
	[tdNormalStart()/][target.client->select(c|c.oclIsKindOf(Property)).oclAsType(Property).structuralFeature(documentedPackages)/][tdEnd()/]
	[tdNormalBStart()/][target.supplier->select(s|s.oclIsKindOf(Package)).oclAsType(Package).elementReference()/][tdEnd()/]
	[endTableRow()/]
[/template]
[template public constraintContent(constraint:Constraint)]
	[if(enableConstraintComments())]
	[constraint.genUmlElementCommentsBulleted()/]
[/if]
		[if((constraint.specification=null))]
		[elseif(constraint.specification.oclIsKindOf(OpaqueExpression))]
[constraintSpecification(constraint.specification.oclAsType(OpaqueExpression).language->first(), constraint.specification.oclAsType(OpaqueExpression)._body->first(),constraint.oclAsType(ecore::EObject))/]
		[else]
			[constraint.specification.stringValue()/]
		[/if]
[/template]

[query public codeText():String='<text:p text:style-name="ArabicTypesetting">'/]
[query public indentpCode():String=codeText()/]
[query public codeTextBulleted():String='<text:p text:style-name="ArabicTypesettingBulleted">'/]

[template public constraintSpecification(language:String,bodyx:String,_context:ecore::EObject)]
[if(not(bodyx.oclIsUndefined()))]
	</text:p>[pStart()/][bold()/]['['/][language/]][spanEnd()/]
	[if(language.startsWith('OCL'))]
		[pEnd()/]
[codeText()/]
[bodyx.replaceAll(' ','&#160;').replaceAll('<','&lt;').replaceAll('\n',pEnd()+codeText())/]
	[else]
		[bodyx.displayHtml(_context)/]
	[/if]	 
[/if]
[/template]
[template public constraintRow(constraint:Constraint){
	constrainedElements:Sequence(NamedElement)=
		constraint.constrainedElement
		->select(e|e.oclIsKindOf(NamedElement))
		.oclAsType(NamedElement);
}]
	[liStart()/]
		[constraint.elementAnchor()/]
[constraint.constraintContent()/]
	[liEnd()/]
[/template]
[template public enumLiteralRow(sf : EnumerationLiteral)]
	[liStart()/]
	[sf.displayAppliedStereotype()/][bold()/][sf.elementAnchor()/][spanEnd()/]
	</text:p>[ul()/][sf.displayTagValueItems()/]
	[for(umlcomment:Comment | sf.ownedComment)][liStart()/][umlcomment._body.displayHtml(umlcomment.oclAsType(ecore::EObject))/][liEnd()/][/for]
	[ulEnd()/]
	[listItemEnd()/]
[/template]

[template public enumLiteralRowMOF(sf : ecore::EEnumLiteral,shadowUML:Package)]
	[startTableRow()/]
		[sf.metaElementAnchor().tdNormal()/]
		[tdNormalBStart()/]
			[sf.genMetaComments(shadowUML)/]
			[sf.genExtendedMetaCommentsList()/]
			[if(sf.name<>sf.literal)]
				</text:p>
				[ul()/][liStart()/][bold()/]literal[spanEnd()/] [sf.literal/][liEnd()/][ulEnd()/]
				<text:p>
			[/if]
		[tdEnd()/]
	[endTableRow()/]
[/template]
[template public enumLiteralRowXSD(sf : XSDEnumerationFacet,shadowUML:Package)]
	[startTableRow()/]
		[sf.lexicalValue.tdNormal()/]
		[tdNormalBStart()/]
			[sf.genMetaCommentsXSD(shadowUML)/]
		[tdEnd()/]
	[endTableRow()/]
[/template]
[template public genExtendedMetaCommentsList(element:ecore::EModelElement){
	extendedMetaData:Sequence(ecore::EStringToStringMapEntry)=element.eAnnotations->select(a:ecore::EAnnotation|a.source='http:///org/eclipse/emf/ecore/util/ExtendedMetaData')
		->collect(a:ecore::EAnnotation|a.details);
}]
	[if(extendedMetaData->notEmpty())]
		</text:p>
		<text:p>[italic()/]Serialization:[spanEnd()/]</text:p>
		[ul()/]
			[for(entry:ecore::EStringToStringMapEntry |extendedMetaData)]
				[liStart()/][bold()/][entry.key/][spanEnd()/] [entry.value.displayHtml(element.oclAsType(ecore::EObject))/][liEnd()/]
			[/for]
		[ulEnd()/]
		<text:p>
	[/if]
[/template]

[template public structuralFeatureAnchor(sf : Property,documentedPackages:Collection(Package))]
	[if(sf.isDerived.oclAsType(Boolean))]/[/if][sf.elementAnchor()/][sf.structuralFeatureBase(documentedPackages)/]
[/template]
[template public multiplicity(sf : MultiplicityElement)]
	['['/][if((sf.lower=0)and(sf.upper<0))]*[elseif(sf.lower=sf.upper)][sf.lower/][else][sf.lower/]..[if(sf.upper<0)]*[else][sf.upper/][/if][/if]]
[/template]
[template public propModifiers(sf : Property)]
	{[if(sf.isUnique.oclAsType(Boolean))]unique[else]nonunique[/if]
			[if(sf.isReadOnly.oclAsType(Boolean))] ,readOnly[/if]
			[if(sf.isDerivedUnion.oclAsType(Boolean))] ,union[/if]
			[if(sf.isOrdered.oclAsType(Boolean))] ,ordered[/if]
			[if(sf.isComposite.oclAsType(Boolean))] ,composite[/if]
			[sf.subsets()/]
			[sf.redefines()/]
	}
[/template]
[template public structuralFeatureBase(sf : Property,documentedPackages:Collection(Package))]
	:[if((sf.type<>null) and not(sf.type.oclIsUndefined()) and sf.type.oclIsKindOf(Classifier))][sf.type.oclAsType(Classifier).umlTypeReference(documentedPackages)/][/if][sf.multiplicity()/][sf.propModifiers()/]
[/template]
[template public structuralFeature(sf : Property,documentedPackages:Collection(Package))]
	[sf.displayAppliedStereotype()/] [if(sf.isDerived.oclAsType(Boolean))]/[/if][sf.name()/][sf.structuralFeatureBase(documentedPackages)/]
[/template]
[template public structuralFeatureRedefinition(sf : Property,target:Property,documentedPackages:Collection(Package))]
	[sf.structuralFeature(documentedPackages)/]
	[pEnd()/][sf.displayTagValues()/][pStart()/]
	[sf.genUmlElementComments()/]
	
	[if((sf.aggregation=AggregationKind::none)<>(target.aggregation=AggregationKind::none))]
		['(Aggregation in Subset Model conflicts with Reference model)'.missing()/]
	[/if]
	[if((target.lower<sf.lower) 
		or ((sf.upper<>-1) and (target.upper>sf.upper))
		or ((target.upper=-1) and (sf.upper<>-1))
		)]
		['(Multiplicity in Subset Model conflicts with Reference model)'.missing()/]
	[/if]
[/template]

[template public displayTagValue(object:OclAny)]
[if(object.oclIsKindOf(ecore::EObject))][object.oclAsType(ecore::EObject).displayTagEObjectValue()/]
[else][object.toString()/][/if][/template]

[template public displayTagEObjectValue(instance:ecore::EObject){
	eclass:ecore::EClass=instance.eClass();
	features:Sequence(ecore::EStructuralFeature)=eclass.eAllStructuralFeatures->select(f|not(f.name.startsWith('base_')))->asSequence();
}][eclass.name/]{
[for(feature:ecore::EStructuralFeature|features)separator (',')]
		[bold()/][feature.name/] = [spanEnd()/] 
		[if(feature.many)]
			[for(object:OclAny|instance.eGetMany(feature))]
				[object.displayTagValue()/]
			[/for]
		[else]
			[if(not(instance.eGet(feature).oclIsUndefined()))][instance.eGet(feature).displayTagValue()/][/if]
		[/if]
[/for]}
[/template]

[template public displayTagValueItems(element:Element){
	instance:InstanceSpecification=element.getApplication();
	slots:Sequence(Slot)=if(instance.oclIsUndefined())then Sequence{} else 
		instance.slot->select(s|s.definingFeature.getNearestPackage().oclAsType(Profile).isNiemProfile())->asSequence()  
	endif;
}]
	[for(slot:Slot|slots)]
		[liStart()/]
			[bold()/][slot.definingFeature.name/] = [spanEnd()/]
			[for(value:ValueSpecification|slot.value)]
				[value.displayValueSpecification()/]
			[/for]
			
		[liEnd()/]
	[/for]
[/template]

[template public displayTagValues(element:Element)]
[ul()/][element.displayTagValueItems()/][ulEnd()/]
[/template]
[query public displayValueSpecification(value:ValueSpecification):String=
	if(value.oclIsKindOf(LiteralString))then value.oclAsType(LiteralString).value
		else if(value.oclIsKindOf(LiteralBoolean))then value.oclAsType(LiteralBoolean).value.toString()
			else if(value.oclIsKindOf(LiteralInteger))then value.oclAsType(LiteralInteger).value.toString()
				else if(value.oclIsKindOf(InstanceValue))then 
						if(value.oclAsType(InstanceValue).instance.oclIsKindOf(EnumerationLiteral))then value.oclAsType(InstanceValue).instance.oclAsType(EnumerationLiteral).name
						else value.oclAsType(InstanceValue).instance.qualifiedName
						endif
						
					else 'UNEXPECTED ValueSpecification Type '+value.toString()
					endif
				endif	
			endif	
		endif	
/]	

[template public redefinedStructuralFeature(sf : Property,documentedPackages:Collection(Package))]
	[if(sf.upper=0)]
		[italic()/](not implemented)[spanEnd()/]
	[else]
		[sf.elementReference()/][sf.structuralFeatureBase(documentedPackages)/]
	[/if]
[/template]

[template public associationRow(sf : Association,documentedPackages:Collection(Package))]
	[startTableRow()/]
		[sf.umlTypeReference(documentedPackages).tdNormal()/]
		[sf.genUmlElementComments().tdNormalB()/]
	[endTableRow()/]
[/template]

[template public comments(element : Element)]
	[startP()/]
	[for(commentX:Comment|element.ownedComment)]
		[commentX._body.oclAsType(String).displayHtml(commentX.oclAsType(ecore::EObject))/]
	[/for]
	[endP()/]
[/template]
[query public getShadow(eNamedElement : ecore::ENamedElement,umlContainer:NamedElement):Sequence(NamedElement)=
	umlContainer.ownedElement
		->select(e|e.oclIsKindOf(NamedElement) and (e.oclAsType(NamedElement).name=eNamedElement.name)).oclAsType(NamedElement)
/]

[template public genMetaComments(element:ecore::EModelElement,shadowUML:Package){
	mapEntries:Sequence(ecore::EStringToStringMapEntry)=element.eAnnotations->select(a:ecore::EAnnotation|a.source='http://www.eclipse.org/emf/2002/GenModel')
		->collect(a:ecore::EAnnotation|a.details)
		->select(d:ecore::EStringToStringMapEntry|d.key='documentation');
}]
[for(entry:ecore::EStringToStringMapEntry |mapEntries)]
[entry.value.displayHtml(element.oclAsType(ecore::EObject))/][/for]
[if(element.oclIsKindOf(ecore::ENamedElement) and not(shadowUML.oclIsUndefined()))]
	[if(element.eContainer().oclIsKindOf(ecore::EPackage))]
		[for( umlelement:NamedElement|element.oclAsType(ENamedElement).getShadow(shadowUML))]
			[umlelement.ownedComment._body.displayHtml(umlelement.oclAsType(ecore::EObject))/]
		[/for]
	[else]
		[if(element.eContainer().oclIsKindOf(ecore::EClassifier))]
			[for(umlclassifier:NamedElement|element.eContainer().oclAsType(ENamedElement).getShadow(shadowUML))]
				[for(umlelement:NamedElement|element.oclAsType(ENamedElement).getShadow(umlclassifier))]
					[umlelement.ownedComment._body.displayHtml(umlelement.oclAsType(ecore::EObject))/]
				[/for]
			[/for]
		[else]
		[/if]
	[/if]
[/if]
[/template]
[template public genMetaCommentsXSD(element:XSDElementDeclaration,shadowUML:Package)]
	[element.annotation.genMetaCommentsXSD(shadowUML)/]
[/template]
[template public genMetaCommentsXSD(element:XSDAttributeDeclaration,shadowUML:Package)]
	[element.annotation.genMetaCommentsXSD(shadowUML)/]
[/template]
[template public genMetaCommentsXSD(element:XSDFacet,shadowUML:Package)]
	[element.annotation.genMetaCommentsXSD(shadowUML)/]
[/template]
[template public genMetaCommentsXSD(element:XSDTypeDefinition,shadowUML:Package)]
	[element.annotations.genMetaCommentsXSD(shadowUML)/]
[/template]
[template public genMetaCommentsXSD(element:XSDAnnotation,shadowUML:Package)]
	[element.userInformation.getTextContent().oclAsType(String).displayHtml(element.oclAsType(ecore::EObject))/]
	[for(source:String|element.getUserInformationSources())]
		[if(source.startsWith('http:'))]
		(see 
			<text:a xlink:type="simple" xlink:href="[source/]">
				[source.substringAfter('#')/]
			</text:a>
		)
		[/if]

	[/for]
[/template]


[template public genUmlElementCommentsIndentedInline(element:Element){
	umlComments:Collection(Comment)=element.ownedComment->select(c|not(c._body.oclIsUndefined() or (c._body='')));
}]
[for(umlcomment:Comment | umlComments)separator(pEnd()+pStart())][umlcomment._body.oclAsType(String).displayHtmlUMLIndentedInline(umlcomment.oclAsType(ecore::EObject))/][/for]
[/template]		
[query public displayHtmlUMLIndentedInline(value:String,_context:ecore::EObject):String=value.displayHtml(_context)/]	


[template public genUmlElementCommentsIndented(element:Element){
	umlComments:Collection(Comment)=element.ownedComment;
}]
[for(umlcomment:Comment | umlComments)][umlcomment._body.oclAsType(String).displayHtmlUMLIndented(umlcomment.oclAsType(ecore::EObject))/][/for] 
[/template]		
[query public displayHtmlUMLIndented(value:String,_context:ecore::EObject):String=indentp()+value.displayHtml(_context)+indentpEnd()/]	

[template public genExtendedMetaComments(element:ecore::EModelElement){
	extendedMetaData:Sequence(ecore::EStringToStringMapEntry)=element.eAnnotations->select(a:ecore::EAnnotation|a.source='http:///org/eclipse/emf/ecore/util/ExtendedMetaData')
		->collect(a:ecore::EAnnotation|a.details);
}]
	[if(extendedMetaData->notEmpty())]
		[italic()/]Serialization:[spanEnd()/]
		[indentpEnd()/]
		[for(entry:ecore::EStringToStringMapEntry |extendedMetaData)]
			[indentp2()/][bold()/][entry.key/][spanEnd()/] [entry.value.displayHtml(element.oclAsType(ecore::EObject))/][indentpEnd()/]
		[/for]
		[indentp()/]
	[/if]
[/template]
[template public genExtendedMetaCommentsXSD(element:XSDTypeDefinition)]
	[element.annotations.genExtendedMetaCommentsXSDAnnotation()/]
[/template]
[template public genExtendedMetaCommentsXSDAnnotation(annotation:XSDAnnotation){
	elements:Sequence(String)=annotation.getApplicationInformation()->asSequence();
}]
	[if(elements->notEmpty())]
		</text:p>
		<text:p>[italic()/]Application Information:[spanEnd()/]
		</text:p>
		[ul()/]
			[for(index:Integer|Sequence{1..(elements->size())})]
				[liStart()/][bold()/][elements->at(index)/][spanEnd()/]
					</text:p>[ul()/]
						[for(attribute:String |annotation.getAttributes(index))]
							[liStart()/][bold()/][attribute.substringBefore('=')/][spanEnd()/]
								 [attribute.substringAfter('=').displayHtmlBulleted(attribute.oclAsType(ecore::EObject))/]
							[liEnd()/]
						[/for]
					[ulEnd()/]<text:p>
				[liEnd()/]
			[/for]
		[ulEnd()/]
		<text:p>
	[/if]
[/template]

[template public elementAnchorBookmark(element : NamedElement)]
	<text:bookmark-start text:name="[element.ID().refName()/]" />  <text:bookmark-end text:name="[element.ID().refName()/]" />
[/template]
[template public elementAnchorPoint(element : NamedElement)]
	<text:p text:style-name="P5">[element.elementAnchorBookmark()/]</text:p>
[/template]
[template public metaElementDescriptionAnchorBookmark(element : ecore::EObject)]
	<text:bookmark-start text:name="[element.eobjectURI().refName()/]Description" />  <text:bookmark-end text:name="[element.eobjectURI().refName()/]Description" />
[/template]
[template public metaElementAnchorBookmark(element : ecore::EObject)]
	<text:bookmark-start text:name="[element.eobjectURI().refName()/]" />  <text:bookmark-end text:name="[element.eobjectURI().refName()/]" />
[/template]
[template public metaElementAnchorPoint(element : ecore::EObject)]
	<text:p text:style-name="P5">[element.metaElementAnchorBookmark()/]</text:p>
[/template]

[query public startP():String='<text:p text:style-name="Standard"><text:span text:style-name="T5">'/]
[query public endP():String='</text:span></text:p>'/]
[query public emptyP6():String='<text:p text:style-name="P6" />'/]	
[query public pStart():String='<text:p text:style-name="PT10TIMES">'/]	
[query public pStartBulleted():String='<text:p text:style-name="PT10TIMESBULLETED">'/]	
[query public pEnd():String='</text:p>'/]
[query public newP():String=pEnd()+pStart()/]
[query public emptyP():String='<text:p text:style-name="P7" />'/]	
[query public pageBreak():String='<text:p text:style-name="pageBreak" />'/]
[query public indentp2():String='<text:p text:style-name="Contents_20_8">'/]
[query public indentp():String=pStart()/]
[query public indentpEnd():String=pEnd()/]
[query public paragraphh5():String='<text:h text:style-name="Heading_20_5" text:outline-level="5">'/]
[query public paragraphh5End():String='</text:h>'/]

[query public bold():String='<text:span text:style-name="T1">'/]
[query public small():String='<text:span text:style-name="TSMALL">'/]
[query public tiny():String='<text:span text:style-name="TTINY">'/]

[query public ProgrammingLanguage():String='<text:span text:style-name="ProgrammingLanguage">'/]
[query public underline():String='<text:span text:style-name="T8under">'/]

[query public spanEnd():String='</text:span>'/]
[query public italic():String='<text:span text:style-name="italicFont">'/]
[query public redFont():String='<text:span text:style-name="redFont">'/]
[query public blueFont():String='<text:span text:style-name="blueFont">'/]
[query public normalFont():String='<text:span text:style-name="T8">'/]

[query public ul():String='<text:list text:style-name="ULBULLETS">'/]
[query public ulEnd():String='</text:list>'/]
[query public liStart():String='<text:list-item text:start-value="1">'+pStartBulleted()/]
[query public listItemEnd():String='</text:list-item>'/]
[query public liEnd():String=pEnd()+listItemEnd()/]
[query public li(text:String):String=liStart()+text+liEnd()/]
[query public newLiP():String=pEnd()+pStartBulleted()/]


[template public Package(p:Package)][bold()/][p.eClass().name/]:[spanEnd()/] [p.elementReference()/][/template]
[template public isAbstract(isAbstract:Boolean)][bold()/]isAbstract:[spanEnd()/][isAbstract/][/template]
[template public niemGeneralization(c:Classifier,generalizationType:String,documentedPackages:Collection(Package),includeComments:Boolean)]
	[liStart()/][bold()/][generalizationType/]: [spanEnd()/][c.umlTypeReference(documentedPackages)/]
		[if(includeComments)]
		[c.referencedComments(documentedPackages)/]
		[/if]
	[liEnd()/]
[/template]
[template public niemAllGeneralizations(generalizationType:String,allGeneralizations:Sequence(Classifier),documentedPackages:Collection(Package))]
	[if(allGeneralizations->notEmpty())]
		[generalizationType.paragraph()/]
			
			[ul()/]
			[for(general:Classifier|allGeneralizations)]
				[liStart()/][general.umlTypeReference(documentedPackages)/][liEnd()/]
			[/for]
			[ulEnd()/]
			
		[emptyP()/]
	[/if]
[/template]

[template public paragraph(name:String)][pStart()/][bold()/][name/][spanEnd()/][pEnd()/][/template]

[template public referencedComments(c:Type,documentedPackages:Collection(Package))]
	[if(not(documentedPackages->includes(c._package)))][c.genUmlElementComments()/][/if]
[/template]
[template public elementReference(element : NamedElement)]
	<text:a xlink:type="simple" xlink:href="#[element.ID().refName()/]">
		[element.name().replaceAll('<','&lt;')/]
	</text:a>
[/template]
[template public missing(missing :String)]
[redFont()/][missing/][spanEnd()/]
[/template]
[template public genUmlElementComments(element:Element){
	umlComments:Collection(Comment)=element.ownedComment;
}]
	[if(umlComments->isEmpty() 
		and not(element.getNearestPackage().isInformationModelSubset())
		and not(element.isPropertyHolder())
		and element.getNearestPackage().isInformationModel()
		)]
		['(missing description)'.missing()/]
	[else][for(umlcomment:Comment | umlComments)][umlcomment._body.oclAsType(String).displayHtml(umlcomment.oclAsType(ecore::EObject))/][/for][/if]
[/template]		
[template public genUmlElementCommentsBulleted(element:Element){
	umlComments:Collection(Comment)=element.ownedComment;
}]
	[if(umlComments->isEmpty() and element.oclIsKindOf(Property)  and not(element.getNearestPackage().isInformationModelSubset()))]
	['(Property missing description)'.missing()/]
	[else][for(umlcomment:Comment | umlComments)][umlcomment._body.oclAsType(String).displayHtml(umlcomment.oclAsType(ecore::EObject))/][/for][/if]
[/template]		
[template public removeHtmlHead(value:String){
	head:Integer=value.index('/head>');
	result:String=if(head<0) then value else value.substring(head+6) endif;
	html:Integer=result.index('/html>');
	result2:String=if(html<0) then result else result.substring(1,html+5) endif;
}][result2/][/template]
[query public displayHtml(value:String,_context:ecore::EObject):String=value.displayHtmlParagraphs(pStart(),_context)/]
[query public displayHtmlBulleted(value:String,_context:ecore::EObject):String=value.displayHtmlParagraphs(pStartBulleted(),_context)/]
	
[query public displayHtmlParagraphs(value:String,paragraph:String,_context:ecore::EObject):String=
	if(value.oclIsUndefined()) then '' else 
	value
	.removeHtmlHead()
	.replaceAll(' style="[^"]*"','')
	.replaceAll('&','&amp;')
	.replaceAll('&amp;lt;','&lt;')
	.replaceAll('&amp;quot;','&quot;')
	.replaceAll('<','&lt;')
	.convertAnchors(_context)
	.replaceAll('&lt;dl[^>]*>','')
	.replaceAll('&lt;/dl>','')
	.replaceAll('&lt;dd[^>]*>','')
	.replaceAll('&lt;/dd>','')
	.replaceAll('&lt;em[^>]*>','')
	.replaceAll('&lt;/em>','')
	.replaceAll('&lt;code[^>]*>','')
	.replaceAll('&lt;/code>','')
	.replaceAll('&lt;!--[^>]*>','')
	.replaceAll('&lt;td[^>]*>',tdNormalBStart())
	.replaceAll('&lt;/td>',tdEnd())
	.replaceAll('&lt;tr[^>]*>',startTableRow())
	.replaceAll('&lt;/tr>',endTableRow())
	.replaceAll('&lt;table [^>]*>',indentpEnd()+'<table:table table:name="tableName" table:style-name="Table1">')
	.replaceAll('&lt;/table>',endTable()+paragraph)
	.replaceAll('&lt;COL[^>]*>','<table:table-column table:style-name="Table1.A"/>')

	.replaceAll('&lt;font[^>]* color="#ff0000"[^>]*>',redFont())
	.replaceAll('&lt;font[^>]* color="#0000ff"[^>]*>',blueFont())
	.replaceAll('&lt;font[^>]*>',normalFont())
	.replaceAll('&lt;/font>',spanEnd())
	.replaceAll('&lt;span[^>]*>','')
	.replaceAll('&lt;/span>','')
	.replaceAll('&lt;i>',italic())
	.replaceAll('&lt;/i>',spanEnd())
	.replaceAll('&lt;u>',underline())
	.replaceAll('&lt;/u>',spanEnd())
	.replaceAll('&lt;b>',bold())
	.replaceAll('&lt;/b>',spanEnd())
		
	.replaceAll('&lt;li>[^>]*&lt;p[^>]*>',liStart())
	.replaceAll('&lt;/p>[^>]*&lt;/li>',liEnd())

	
	.replaceAll('&lt;li[^>]*>',liStart())
	.replaceAll('&lt;/li>',liEnd())
	.replaceAll('&lt;ul[^>]*>',indentpEnd()+ul())
	.replaceAll('&lt;ol[^>]*>',indentpEnd()+ul())
	.replaceAll('&lt;/ul>',ulEnd()+paragraph)
	.replaceAll('&lt;/ol>',ulEnd()+paragraph)
	.replaceAll('&lt;br/>',indentpEnd()+paragraph)
	.replaceAll('&lt;br>',indentpEnd()+paragraph)
	.replaceAll('&lt;p[^>]*>\\s*&lt;/p>',indentpEnd()+paragraph)
	.replaceAll('&lt;/p[^>]*>\\s*&lt;p>',indentpEnd()+paragraph)
	.replaceAll('&lt;p[^>]*>','')
	.replaceAll('&lt;/p>','')
	.replaceAll('&lt;html>','')
	.replaceAll('&lt;/html>','')
	.replaceAll('&lt;body>','')
	.replaceAll('&lt;/body>','')
	.replaceAll('&lt;div[^>]*>','')
	.replaceAll('&lt;/div>','')
	.replaceAll('&lt;a [^>]*>','')
	.replaceAll('&lt;/a>','')
	.replaceAll('&lt;h2[^>]*>','')
	.replaceAll('&lt;/h2>','')
	.replaceAll('&lt;pre[^>]*>','')
	.replaceAll('&lt;/pre>','')
 
	.replaceAll(tdNormalBStart()+'\\s*'+indentpEnd(),tdNormalBStartHead())
	.replaceAll(pStart()+'\\s*'+tdEnd(),tdCellEnd())

	.replaceAll('&amp;#','&#')
	.replaceAll('&amp;gt;','&gt;')
	endif
/]	
	

[template public odtMasterMeta(title:String,subject:String)]
<?xml version="1.0" encoding="UTF-8"?>
<office:document-meta xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0"
	xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:ooo="http://openoffice.org/2004/office"
	office:version="1.2">
	<office:meta>
		<dc:title>[title/]</dc:title>
		<meta:initial-creator>dp102</meta:initial-creator>
		<meta:creation-date>2010-08-16T16:54:00</meta:creation-date>
		<dc:creator>Tom Digre</dc:creator>
		<dc:date>2011-08-29T12:34:33.32</dc:date>
		<meta:print-date>2009-07-07T11:07:00</meta:print-date>
		<meta:editing-cycles>7</meta:editing-cycles>
		<meta:editing-duration>PT00H52M00S</meta:editing-duration>
		<meta:generator>OpenOffice.org/3.1$Win32
			OpenOffice.org_project/310m11$Build-9399</meta:generator>
		<dc:subject>[subject/]</dc:subject>
		<meta:document-statistic meta:table-count="53"
			meta:image-count="1" meta:object-count="0" meta:page-count="39"
			meta:paragraph-count="1037" meta:word-count="4090"
			meta:character-count="59433" />
	</office:meta>
</office:document-meta>
[/template]
[query public metaElementName(element : ecore::ENamedElement):String=element.name/]
[query public metaPackageNameOMG(ePackage : ecore::EPackage):String=
	if(ePackage.nsURI='http://www.eclipse.org/emf/2003/XMLType')then 'XMLType'
		else if (ePackage.name.startsWith('md')) then 'uml'
			else if (ePackage.name='ecore') then 'cmof'
				else ePackage.name endif
			endif
	endif		
/]
[query public metaClassName(element:Element):String=
	element.eClass().name
/]	
[query public metaClassNameOMG(name:String):String=
	if(name.startsWith('E') and (name<>'Element')) then 
		if(name='EInt')then 'Integer' else name.substringAfter('E').metaClassNameOMGUML() endif 
	else name endif
/]	
[query public metaClassNameOMGUML(name:String):String=
	if(name='Enum') then 'Enumeration' else name endif
/]	

[template public metaElementAnchor(element : ecore::ENamedElement)][element.metaElementAnchorPoint()/][bold()/][element.metaElementName()/][spanEnd()/][/template]
[template public metaElementAnchor(element : XSDNamedComponent)][element.metaElementAnchorPoint()/][element.name/][/template]
[template public classReference(cf : ecore::EClassifier,documentedPackages:Collection(ecore::EPackage)){
	metaReference:ecore::EClassifier=if(documentedPackages->includes(cf.eContainer()))then cf 
		else documentedPackages
			->select(p|((p.name='xsd')or(p.name='mpdcat')) and (cf.ePackage.name<>'uml')).eClassifiers
			->select(c|c.name=cf.name)->asSequence()
			->first()
		endif; 
	metaPackageName:String=cf.ePackage.metaPackageNameOMG();	
	metaClassName:String=if(metaPackageName='uml')then cf.name else cf.name.metaClassNameOMG() endif;	
}]
	[if(not(metaReference.oclIsUndefined()))]
		[metaReference.eContainer().oclAsType(ecore::ENamedElement).metaElementReference()/]::[metaReference.metaElementReference()/]
	[else]
		[metaPackageName/]::[metaClassName/]
	[/if]
[/template]
[template public classReferenceXSD(cf : XSDTypeDefinition,documentedPackages:Collection(XSDSchema)){
	metaReference:XSDTypeDefinition=cf;
}]
	[if(not(metaReference.oclIsUndefined()))]
		[metaReference.schema.metaElementReferenceXSDSchema()/]::[metaReference.metaElementReferenceXSDNamedComponent()/]
		[if((metaReference.name=null)or metaReference.oclIsUndefined() or (metaReference.name=''))](anonymous)[/if]
	[else]
		[cf.schema.targetNamespace/]::[cf.name/]
	[/if]
[/template]
[template public Generalization(c:ecore::EClass,documentedPackages:Collection(ecore::EPackage))]
	[indentp()/][bold()/]Generalization: [spanEnd()/][c.classReference(documentedPackages)/][indentpEnd()/]
[/template]
[template public GeneralizationXSD(c:XSDTypeDefinition,documentedPackages:Collection(XSDSchema))]
	[indentp()/][bold()/]Generalization: [spanEnd()/][c.classReferenceXSD(documentedPackages)/][indentpEnd()/]
[/template]
[template public metaElementReference(element : ecore::ENamedElement)]
	[element.elementReference()/]
[/template]
[template public elementReference(element : ecore::ENamedElement)]
	<text:a xlink:type="simple" xlink:href="#[element.oclAsType(ecore::EObject).eobjectURI().refName()/]">
		[element.name()/]
	</text:a>
[/template]
[template public elementDescriptionReference(element : ecore::ENamedElement)]
	<text:a xlink:type="simple" xlink:href="#[element.oclAsType(ecore::EObject).eobjectURI().refName()/]Description">
		[element.name()/]
	</text:a>
[/template]
[template public Package(p:ecore::EPackage)][indentp()/][bold()/]Package:[spanEnd()/][p.metaElementReference()/][indentpEnd()/][/template]
[template public Package(p:XSDSchema)][indentp()/][bold()/]Schema:[spanEnd()/][p.metaElementReferenceXSDSchema()/][indentpEnd()/][/template]
[template public metaElementReferenceXSDSchema(element : XSDSchema)]
	<text:a xlink:type="simple" xlink:href="#[element.oclAsType(ecore::EObject).eobjectURI().refName()/]">
		[element.targetNamespace/]
	</text:a>
[/template]
[template public metaElementReferenceXSDNamedComponent(element : XSDNamedComponent)]
	<text:a xlink:type="simple" xlink:href="#[element.oclAsType(ecore::EObject).eobjectURI().refName()/]">
		[element.name/]
	</text:a>
[/template]
[/comment]	

[template public getPoliciesAndContracts(serviceLevelAgreements:Collaboration,ServiceLevelAgreementsStereotype:Stereotype)]
Policy: [serviceLevelAgreements.policyText(ServiceLevelAgreementsStereotype)/]
[for(contract:String|serviceLevelAgreements.contractAgreementDescriptionText(ServiceLevelAgreementsStereotype))]
Contract: [contract/]
[/for]
[for(agreement:String|serviceLevelAgreements.agreementAgreementDescriptionText(ServiceLevelAgreementsStereotype))]
Agreement: [agreement/]
[/for]
[for(agreement:String|serviceLevelAgreements.umbrellaAgreementAgreementDescriptionText(ServiceLevelAgreementsStereotype))]
Umbrella Agreement: [agreement/]
[/for]
Licensing Agreement: [serviceLevelAgreements.licensingAgreementDescriptionText(ServiceLevelAgreementsStereotype)/]
[/template]

[template public paragraph(text:String)]
		<w:p w:rsidR="0081553A" w:rsidRPr="00B82025" w:rsidRDefault="0081553A"
			w:rsidP="007740D5">
			<w:pPr>
				<w:pStyle w:val="JRANormalText" />
				<w:tabs>
					<w:tab w:val="clear" w:pos="1584" />
				</w:tabs>
				<w:spacing w:before="0" w:after="0" w:line="240"
					w:lineRule="auto" />
				<w:rPr>
					<w:rFonts w:cs="Times New Roman" />
					<w:sz w:val="24" />
					<w:szCs w:val="24" />
				</w:rPr>
			</w:pPr>
			<w:r w:rsidRPr="0081553A">
				<w:rPr>
					<w:rFonts w:cs="Times New Roman" />
					<w:sz w:val="24" />
					<w:szCs w:val="24" />
				</w:rPr>
				<w:t xml:space="preserve">[text/]</w:t>
			</w:r>
		</w:p>
[/template]
[template public boldParagraph(text:String)]
		<w:p w:rsidR="0081553A" w:rsidRPr="00B82025" w:rsidRDefault="0081553A"
			w:rsidP="007740D5">
			<w:pPr>
				<w:pStyle w:val="JRANormalText" />
				<w:tabs>
					<w:tab w:val="clear" w:pos="1584" />
				</w:tabs>
				<w:spacing w:before="0" w:after="0" w:line="240"
					w:lineRule="auto" />
				<w:rPr>
					<w:rFonts w:cs="Times New Roman" />
					<w:b />
					<w:sz w:val="24" />
					<w:szCs w:val="24" />
				</w:rPr>
			</w:pPr>
			<w:r w:rsidRPr="0081553A">
				<w:rPr>
					<w:rFonts w:cs="Times New Roman" />
					<w:b />
					<w:sz w:val="24" />
					<w:szCs w:val="24" />
				</w:rPr>
				<w:t xml:space="preserve">[text/]</w:t>
			</w:r>
		</w:p>
[/template]
[template public bold(ignore:OclAny)]
				</w:t>
			</w:r>
			<w:r w:rsidRPr="0081553A">
				<w:rPr>
					<w:rFonts w:cs="Times New Roman" />
					<w:b />
					<w:sz w:val="24" />
					<w:szCs w:val="24" />
				</w:rPr>
				<w:t>
[/template]
[template public spanEnd(ignore:OclAny)]
				</w:t>
			</w:r>
			<w:r w:rsidRPr="0081553A">
				<w:rPr>
					<w:rFonts w:cs="Times New Roman" />
					<w:sz w:val="24" />
					<w:szCs w:val="24" />
				</w:rPr>
				<w:t>
[/template]
[template public br(ignore:OclAny)]
				</w:t>
			</w:r>
			<w:r w:rsidRPr="0081553A">
				<w:rPr>
					<w:rFonts w:cs="Times New Roman" />
					<w:sz w:val="24" />
					<w:szCs w:val="24" />
				</w:rPr>
				<w:br/>	
			</w:r>
			<w:r w:rsidRPr="0081553A">
				<w:rPr>
					<w:rFonts w:cs="Times New Roman" />
					<w:sz w:val="24" />
					<w:szCs w:val="24" />
				</w:rPr>
				<w:t>
[/template]
[template public bullet(text:String)]
		<w:p w:rsidR="0081553A" w:rsidRPr="00E7267C" w:rsidRDefault="0081553A"
			w:rsidP="00E7267C">
			<w:pPr>
				<w:pStyle w:val="JRABullets" />
				<w:numPr>
					<w:ilvl w:val="0" />
					<w:numId w:val="5" />
				</w:numPr>
				<w:tabs>
					<w:tab w:val="clear" w:pos="576" />
					<w:tab w:val="clear" w:pos="1584" />
					<w:tab w:val="left" w:pos="1080" />
				</w:tabs>
				<w:ind w:left="1080" w:hanging="378" />
				<w:rPr>
					<w:rFonts w:cs="Times New Roman" />
[comment]
					<w:i />
					<w:color w:val="1F497D" />
[/comment]
					<w:sz w:val="24" />
					<w:szCs w:val="24" />
				</w:rPr>
			</w:pPr>
			<w:r w:rsidRPr="00E7267C">
				<w:rPr>
					<w:rFonts w:cs="Times New Roman" />
[comment]
					<w:i />
					<w:color w:val="1F497D" />
[/comment]
					<w:sz w:val="24" />
					<w:szCs w:val="24" />
				</w:rPr>
				<w:t>[text/]</w:t>
			</w:r>
		</w:p>
[/template]
[template public structuralFeatureAnchor(sf : Property)]
[if(sf.isDerived.oclAsType(Boolean))]/[/if][sf.elementAnchor()/][sf.structuralFeatureBase()/]
[/template]
[template public elementAnchor(element : NamedElement)][bold()/][(element.name().replaceAll('&','&amp;').replaceAll('<','&lt;'))/][spanEnd()/][/template]
[template public structuralFeatureBase(sf : Property)]
:[if((sf.type<>null) and not(sf.type.oclIsUndefined()) and sf.type.oclIsKindOf(Classifier))][sf.type.oclAsType(Classifier).umlTypeReference()/][/if][sf.multiplicity()/][sf.propModifiers()/]
[/template]
[template public multiplicity(sf : MultiplicityElement)]
['['/][if((sf.lower=0)and(sf.upper<0))]*[elseif(sf.lower=sf.upper)][sf.lower/][else][sf.lower/]..[if(sf.upper<0)]*[else][sf.upper/][/if][/if]]
[/template]
[template public propModifiers(sf : Property)]
{[if(sf.isUnique.oclAsType(Boolean))]unique[else]nonunique[/if][if(sf.isReadOnly.oclAsType(Boolean))],readOnly[/if][if(sf.isDerivedUnion.oclAsType(Boolean))],union[/if][if(sf.isOrdered.oclAsType(Boolean))],ordered[/if][if(sf.isComposite.oclAsType(Boolean))],composite[/if][sf.subsets()/][sf.redefines()/]}
[/template]
[template public subsets(sf : Property)][for(subsetted:Property|sf.subsettedProperty)], subsets [subsetted.name/][/for][/template]
[template public redefines(sf : Property)][for(subsetted:Property|sf.redefinedProperty)], redefines [subsetted.name/][/for][/template]
[template public umlTypeReference(cf : Type)]
[if ((cf=null) or cf.oclIsUndefined())]
[else][cf.getNearestPackage().name()/]::[cf.name()/][/if]
[/template]

