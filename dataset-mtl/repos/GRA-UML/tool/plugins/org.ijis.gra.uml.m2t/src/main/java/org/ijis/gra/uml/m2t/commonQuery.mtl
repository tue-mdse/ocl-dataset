[comment encoding = UTF-8 /]
[module  commonQuery('http://www.eclipse.org/uml2/4.0.0/UML',
	'http://www.eclipse.org/xsd/2002/XSD',
	'http://www.eclipse.org/ocl/1.1.0/Ecore')/]
	
	
	
[comment]
[/comment]	
	
[query public helperName():String='org.ijis.gra.uml.m2t.GraM2tLibrary'/]
[query public getManyValues(e:Element, s:Stereotype, tagName:String):Sequence(OclAny)=invoke(helperName(),'getManyValues(org.eclipse.uml2.uml.Element,org.eclipse.uml2.uml.Stereotype,java.lang.String)',Sequence{e,s,tagName})/]
[query public IsStereotypeApplied(element:Element, s : Stereotype):Boolean=invoke(helperName(),'IsStereotypeApplied(org.eclipse.uml2.uml.Element,org.eclipse.uml2.uml.Stereotype)',Sequence{element,s})/]
[query public log(text:String):String=invoke(helperName(),'log(java.lang.String)',Sequence{if((text=null)or text.oclIsUndefined())then '' else text.toString() endif})/]
[query public getArtifactPaths():Sequence(String)=invoke(helperName(),'getArtifactPaths()',Sequence{})/]
[query public getDevelopmentArtifactPathsUnsorted(mpdx : Model):Sequence(String)=invoke(helperName(),'getDevelopmentArtifactPaths(org.eclipse.uml2.uml.Model)',Sequence{mpdx})/]
[query public getDevelopmentArtifactPaths(mpdx : Model):Sequence(String)=
	mpdx.getDevelopmentArtifactPathsUnsorted()->sortedBy(s|s)/]

[query public ServicesArchitectureStereotypeName():String='ServicesArchitecture'/]
[query public SchemaForSchemaNamespace():String='http://www.w3.org/2001/XMLSchema'/]
[query public SchemaForStructuresNamespace():String='http://niem.gov/niem/structures/2.0'/]
[query public SchemaForAppinfoNamespace():String='http://niem.gov/niem/appinfo/2.0'/]
[query public SchemaForProxyNamespace():String='http://niem.gov/niem/proxy/xsd/2.0'/]
[query public SchemaForNamespaceNamespace():String='http://www.w3.org/XML/1998/namespace'/]
[query public XsdSchemaStereotypeName():String='xsd::XSDSchema'/]
[query public NdrSchemaStereotypeName():String='niem::ndr::ndrSchema'/]
[query public NdrTypeDefinitionStereotypeName():String='niem::ndr::ndrTypeDefinition'/]

[query public baseNiemNamespace():String='http://niem.gov/niem/'/]
[query public purposeURI():String=baseNiemNamespace()+'resources/purposes/1#'/]
[query public purposeExchangeSchemaURI():String=purposeURI()+'exchange-schema'/]
[query public purposeExtensionSchemaURI():String=purposeURI()+'extension-schema'/]
[query public purposeSubsetSchemaURI():String=purposeURI()+'subset-schema'/]
[query public purposeReferenceSchemaURI():String=purposeURI()+'reference-schema'/]
[query public purposeExchangeSchemaSetURI():String=purposeURI()+'exchange-schema-set'/]
[query public purposeExtensionSchemaSetURI():String=purposeURI()+'extension-schema-set'/]
[query public purposeSubsetSchemaSetURI():String=purposeURI()+'subset-schema-set'/]
[query public purposeReferenceSchemaSetURI():String=purposeURI()+'reference-schema-set'/]
[query public purposeMasterDocumentURI():String=purposeURI()+'master-document'/]
[query public purposeChangelogURI():String=purposeURI()+'changelog'/]
[query public purposeCatalogURI():String=purposeURI()+'catalog'/]
[query public purposeTransformationURI():String=purposeURI()+'transformation'/]
[query public purposeDisplayURI():String=purposeURI()+'display'/]
[query public purposeConstraintSchemaURI():String=purposeURI()+'constraint-schema'/]
[query public purposeSchemaURI():String=purposeURI()+'schema'/]

[comment] Set(OclAny) does not work well, try changing to OclAny or something else [/comment]
[query public getQNamePrefixToNamespaceMap(schema:XSDSchema):OclAny=invoke(helperName(),'getQNamePrefixToNamespaceMap(org.eclipse.xsd.XSDSchema)',Sequence{schema})/]
[query public xmlnsAttribues(map:OclAny,slot:Slot):String=invoke(helperName(),'xmlnsAttribues(java.lang.Object,org.eclipse.uml2.uml.Slot)',Sequence{map,slot})/]
[query public nextID(map:OclAny):String=invoke(helperName(),'nextID(java.lang.Object)',Sequence{map})/]

[query public getValidationResults():Sequence(String)=invoke(helperName(),'getValidationResults()',Sequence{})/]
[query public getValidationElement(annotation:String):String=invoke(helperName(),'getValidationElement(java.lang.String)',Sequence{annotation})/]
[query public getValidationSeverity(annotation:String):String=invoke(helperName(),'getValidationSeverity(java.lang.String)',Sequence{annotation})/]
[query public getValidationAbbreviation(annotation:String):String=invoke(helperName(),'getValidationAbbreviation(java.lang.String)',Sequence{annotation})/]
[query public getValidationMessage(annotation:String):String=invoke(helperName(),'getValidationMessage(java.lang.String)',Sequence{annotation})/]

[query public getCommentBody(comment:Comment):String=invoke(helperName(),'getCommentBody(org.eclipse.uml2.uml.Comment)',Sequence{comment})/]
[query public convertAnchors(html:String,_context:ecore::EObject):String=invoke(helperName(),'convertAnchors(java.lang.String,org.eclipse.emf.ecore.EObject)',Sequence{html,_context})/]
[query public getElementByID(id:String):Element=invoke(helperName(),'getElementByID(java.lang.String)',Sequence{id})/]
[query public ID(element:Element):String=invoke(helperName(),'getID(org.eclipse.uml2.uml.Element)',Sequence{element})/]
[query public isEditable(element:Element):Boolean=invoke(helperName(),'isEditable(org.eclipse.uml2.uml.Element)',Sequence{element})/]

[query public getResourceObjects(uri:String):Sequence(ecore::EObject)=invoke(helperName(),'getResourceObjects(java.lang.String)',Sequence{uri})/]

[comment]
[query public createDiagramImage(diagram:Diagram):String=invoke(helperName(),'createDiagramImage(org.eclipse.uml2.uml.Diagram)',Sequence{diagram})/]
[query public createDiagramImage(diagram:String):String=invoke(helperName(),'createDiagramImage(java.lang.String)',Sequence{diagram})/]
[query public getDiagramNames(element:NamedElement):Sequence(String)=invoke(helperName(),'getDiagramNames(org.eclipse.uml2.uml.NamedElement)',Sequence{element})/]
[/comment]
[query public createRfpDiagramImage(diagram:String,element:Element):String=invoke(helperName(),'createRfpDiagramImage(java.lang.String,org.eclipse.uml2.uml.Element)',Sequence{diagram,element})/]
[query public copyImage(imageFile:Artifact):String=invoke(helperName(),'copyImage(org.eclipse.uml2.uml.Artifact)',Sequence{imageFile})/]
[query public year(m:String):String=m+invoke(helperName(),'year()',Sequence{})/]
[query public month(m:String):String=m+invoke(helperName(),'month()',Sequence{})/]
[query public date(m:String):String=m+invoke(helperName(),'date()',Sequence{})/]
[query public getApplicationInformation(annotation:XSDAnnotation):Sequence(String)=invoke(helperName(),'getApplicationInformation(org.eclipse.xsd.XSDAnnotation)',Sequence{annotation})/]

[comment]	
[query public getMpdCatalog(m : Element , catalog : String):mpdcat::CatalogType=
	invoke(helperName(),'getMpdCatalog(org.eclipse.uml2.uml.Element,java.lang.String)',Sequence{m,catalog})/]
[query public getApplication(m : Element):Sequence(ecore::EObject)=invoke(helperName(),'getApplication(org.eclipse.uml2.uml.Element)',Sequence{m})/]
[query public getApplication(m : Element):InstanceSpecification=m.appliedStereotypeInstance/]
[/comment]
[query public stereotypedBy(m : Element,stereotypeName:String):Boolean=invoke(helperName(),'hasAppliedStereotype(org.eclipse.uml2.uml.Element,java.lang.String)',Sequence{m,stereotypeName.toString()})/]
[query public getStereotype(m : Element,stereotypeName:String):Stereotype=invoke(helperName(),'getStereotype(org.eclipse.uml2.uml.Element,java.lang.String)',Sequence{m,stereotypeName.toString()})/]
[query public getValues(m : Element,tagName:String):Sequence(ValueSpecification)=invoke(helperName(),'getValues(org.eclipse.uml2.uml.Element,java.lang.String)',Sequence{m,tagName})/]
[query public eobjectURI(m : ecore::EObject):String=invoke(helperName(),'getUriFragment(org.eclipse.emf.ecore.EObject)',Sequence{m})/]
[query public eGetMany(m : ecore::EObject,f:ecore::EStructuralFeature):Sequence(OclAny)=invoke(helperName(),'eGetMany(org.eclipse.emf.ecore.EObject,org.eclipse.emf.ecore.EStructuralFeature)',Sequence{m,f})/]
[query public eGetManyEObject(m : ecore::EObject,f:ecore::EStructuralFeature):Sequence(ecore::EObject)=invoke(helperName(),'eGetManyEObject(org.eclipse.emf.ecore.EObject,org.eclipse.emf.ecore.EStructuralFeature)',Sequence{m,f})/]
[comment]
[query public getProjectName():String=invoke(helperName(),'getProjectName()',Sequence{})/]
[/comment]
[query public getProjectName(element : Element):String=invoke(helperName(),'getProjectName(org.eclipse.uml2.uml.Element)',Sequence{element})/]
[query public getUserInformationSources(m : XSDAnnotation):Set(String)=invoke(helperName(),'getUserInformationSources(org.eclipse.xsd.XSDAnnotation)',Sequence{m})/]
[query public getTextContent(m : OclAny):String=invoke(helperName(),'getTextContent(java.lang.Object)',Sequence{m})/]
[query public getAttributes(annotation:XSDAnnotation,elementIndex:Integer):Sequence(String)=invoke(helperName(),'getAttributes(org.eclipse.xsd.XSDAnnotation,java.lang.Integer)',Sequence{annotation,elementIndex})/]
[comment]
[query public getNIEMName(p:Classifier):String=invoke(helperName(),'getNIEMName(org.eclipse.uml2.uml.Classifier)',Sequence{p})/]
[/comment]
[query public getNIEMName(p:Classifier):String=p.name/]
[query public getPropertyNIEMName(p:Property):String=invoke(helperName(),'getPropertyNIEMName(org.eclipse.uml2.uml.Property)',Sequence{p})/] 
[query public getXmlDate():String=invoke(helperName(),'getXmlDate()',Sequence{})/] 
[query public getXmlDateTime():String=invoke(helperName(),'getXmlDateTime()',Sequence{})/] 
[query public getXmlTime():String=invoke(helperName(),'getXmlTime()',Sequence{})/] 
[query public getXmlGYearMonth():String=invoke(helperName(),'getXmlGYearMonth()',Sequence{})/] 
[query public getXmlGYear():String=invoke(helperName(),'getXmlGYear()',Sequence{})/] 
[query public getXmlGMonthDay():String=invoke(helperName(),'getXmlGMonthDay()',Sequence{})/] 
[query public getXmlGDay():String=invoke(helperName(),'getXmlGDay()',Sequence{})/] 
[query public getXmlGMonth():String=invoke(helperName(),'getXmlGMonth()',Sequence{})/] 
[query public getPrefix(element : XSDNamedComponent,namespaceMap:OclAny):String=invoke(helperName(),'getPrefix(org.eclipse.xsd.XSDNamedComponent,java.lang.Object)',Sequence{element,namespaceMap})/] 
[comment]
[query public isRelationshipMeaning(m : Property):Boolean=m.stereotypedBy('RelationshipMeaning')/]
[query public isClassMeaning(m : Classifier):Boolean=m.stereotypedBy('ClassMeaning')/]
[query public isResolvedValueSet(m : Classifier):Boolean=m.stereotypedBy('ResolvedValueSet')/]
[query public isValueSetMember(m : EnumerationLiteral):Boolean=m.stereotypedBy('ValueSetMember')/]
[query public getAppliedStereotypes(element : Element):Set(Stereotype)=
	element.appliedStereotypeInstance.classifier->select(s|s.oclIsKindOf(Stereotype))/]
[/comment]

[query public getInstanceValues(m : Element,tagName:String):Sequence(InstanceSpecification)=
	m.getValues(tagName)->select(v:ValueSpecification|v.oclIsKindOf(InstanceValue))
		.oclAsType(InstanceValue).instance
/]		
[query public getStringValues(m : Element,tagName:String):Sequence(String)=
	m.getValues(tagName)->select(v:ValueSpecification|v.oclIsKindOf(LiteralString))
		.oclAsType(LiteralString).value
		->asSequence()/]
[query public getStringValue(m : Element,tagName:String):String=
	if(m.getStringValues(tagName)->isEmpty())then '' else m.getStringValues(tagName)->first() endif /] 
[query public getEnumerationValue(m : Element,tagName:String):String=
	m.getInstanceValues(tagName)->select(instance:InstanceSpecification|instance.oclIsKindOf(EnumerationLiteral))
		.oclAsType(EnumerationLiteral).name
		->asSequence()->first()
/]		
[query public getValue(s:Stereotype, m : Element,  tagName:String):OclAny=
	m.getValue(s,tagName)/]
[query public getTagValue(m : Element, stereotypeName:String, tagName:String):OclAny=
	m.getAppliedStereotypes()->select(s|s.name=stereotypeName).getValue(m,tagName)/]
[query public getTopLevelPackage(elementcontext:Package):Package=
	if(elementcontext.nestingPackage.oclIsUndefined())then elementcontext else elementcontext.nestingPackage.getTopLevelPackage() endif/]
[query public getEmfMetaclassPackage(elementcontext:NamedElement):Package=
	elementcontext.getNearestPackage().getTopLevelPackage().nestedPackage->select(e|e.name='UML')->asSequence()->first()/]
[query public getEmfMetaclass(name:String,elementcontext:NamedElement):Class=
	elementcontext.getEmfMetaclassPackage().packagedElement->select(e|e.name=name).oclAsType(Class)->asSequence()->first()/]
[query public getExtendedMetaclass(extension:Extension,m:Stereotype):Class=
	extension.metaclass.name.oclAsType(String).getEmfMetaclass(m)/]
[query public getExtensions(m:Stereotype):Set(Extension)=
	m.extension/]

[query public getProfile(m:Stereotype):Profile=m.profile/]
[query public indexOf(m:String,after:String):Integer=m.index(after)/]
[query public substringAfter(m:String,after:String):String=
	if(m.indexOf(after)>0)
		then m.substring(m.indexOf(after)+after.size(),m.size())
		else ''
		endif
	/]
[query public substringBefore(m:String,after:String):String=
	if(m.indexOf(after)>1)
		then m.substring(1,m.indexOf(after)-1)
		else ''
		endif
	/]

[query public displayAppliedStereotype(element : Element):Sequence(String)=
	if(element.getAppliedStereotypes()->isEmpty())then Sequence{''} else
	element.getAppliedStereotypes().displayStereotype()
	endif
	/]
[query public displayMetaClass(element : Element):String=
	'&lt;'+element.eClass().name+'>'
	/]

[query public displayStereotype(stereotype:Stereotype):String=
	if(stereotype.isNiemStereotype())then ('&lt;&lt;'+stereotype.name+'>>') else '' endif
/]
[query public isNiemStereotype(stereotype:Stereotype):Boolean=
	stereotype.profile.isNiemProfile()
/]
[query public isNiemProfile(profile:Profile):Boolean=
	profile.name.startsWith('SoaML')
	 or profile.name.startsWith('GRA')
	 or profile.name.startsWith('NIEM')
/]
[query public getMasterDocumentArtifacts(umlPackage : Package):Set(Artifact)=
	umlPackage.allOwnedElements()
	->select(e|e.oclIsKindOf(Artifact) 
		and e.oclAsType(Artifact).isMasterDocumentArtifact()
		).oclAsType(Artifact)
		->asSet()
/]
[query public isMasterDocumentArtifact(artifact : Artifact):Boolean=
	'master-document'=artifact.name
/]
[query public allOwnedElements(element : Element):Set(Element)=
	element.ownedElement->union(element.ownedElement.allOwnedElements())->asSet()
/]
[query public allClassifierConstraints(element : Element):Set(Element)=
	element.allOwnedElements()
	->select(c|
			c.isEditable() 
			and c.oclIsKindOf(Constraint) 
			and c.owner.oclIsKindOf(Classifier)
			and not(c.owner.oclIsKindOf(Collaboration))
			)
	->asSet()
/]

[query public getNearestPackage(s : Element):Package=if(s.oclIsKindOf(Package)) then self.oclAsType(Package) 
	else s.owner.getNearestPackage() endif/] 
[query public stringValue(s : ValueSpecification):String=''/] 
[query public stringValue(s : LiteralString):String=self.value/] 

[query public pathRelativeTo(namedElement : NamedElement,rootPackage :Package):String=
	namedElement.qualifiedName.substringAfter(rootPackage.qualifiedName).replace('::','/')/] 

[query public getPimSchemas(pimPackage:Package):Sequence(Package)=
	pimPackage.nestingPackage.eAllContents(Package)->asSet()
	->select(p:Package|p.isPimSchema())
	->asSet()->asSequence()
/]
[comment]
	self.isEditable() and 
[/comment]
[query public isPimSchema(pimPackage:Package):Boolean=
	self.isInformationModel()
			and not(self.qualifiedName.toLower().contains('cloud resource'))
			and not(self.qualifiedName.toLower().contains('e2 community architecture'))
	and self.ownedType->notEmpty()
	and self.isDomainSystem()

/]
[query public isDomainSystem(element:Package):Boolean=
	element.ownedType->select(t|t.isDomainSystemContent())->notEmpty()
/]
[query public isDomainSystemContent(element:Type):Boolean=
	element.isValueDomain() or element.ownedElement->select(e|e.isDomainSystemSubContent())->notEmpty()
/]
[query public isDomainSystemSubContent(element:Element):Boolean=
	element.isDataElement() or element.isPermissibleValue()
/]
[query public isDataElement(element:Element):Boolean=
	self.stereotypedBy('DataElement')
/]
[query public isCamelContext(element:Element):Boolean=
	element.stereotypedBy('CamelContext')
/]
[query public isCloud(element:Element):Boolean=
	element.stereotypedBy('Cloud')
/]
[query public isCloudResourceDeploymentSpecification(element:Element):Boolean=
	element.stereotypedBy('CloudResourceDeploymentSpecification')
/]

[query public isPermissibleValue(element:Element):Boolean=
	element.stereotypedBy('PermissibleValue')
/]
[query public isValueDomain(element:Element):Boolean=
	element.isDescribedValueDomain() or element.isEnumeratedValueDomain()
/]
[query public isDescribedValueDomain(element:Element):Boolean=
	element.stereotypedBy('DescribedValueDomain')
/]
[query public isEnumeratedValueDomain(element:Element):Boolean=
	element.stereotypedBy('EnumeratedValueDomain')
/]
[query public isFabric(element:Element):Boolean=
	element.stereotypedBy('Fabric')
/]
[query public isFabricContainer(element:Element):Boolean=
	element.stereotypedBy('FabricContainer')
/]
[query public isCloudResource(element:Element):Boolean=
	element.stereotypedBy('CloudResource')
/]
[query public isFabricProfile(element:Element):Boolean=
	element.stereotypedBy('FabricProfile')
/]
[query public isOSGiBundle(element:Element):Boolean=
	element.stereotypedBy('OSGiBundle')
/]
[query public isCamelRoute(element:Element):Boolean=
	element.stereotypedBy('CamelRoute')
/]

[comment]
[query public isInformationModel(element:Element):Boolean=
	element.stereotypedBy('InformationModel')
/]
[query public getSchemaComponentElementImport(pimPackage:Package):ElementImport=
	self._directedRelationshipOfTarget
	->select(r|
		r.oclIsKindOf(ElementImport) 
		and r.oclAsType(ElementImport).importingNamespace.oclIsKindOf(Component)
		and (r.oclAsType(ElementImport).importingNamespace.oclAsType(Component).name='schemas')
		and (r.oclAsType(ElementImport).alias<>null)
		and (r.oclAsType(ElementImport).alias<>'')
	).oclAsType(ElementImport)->asSequence()->first()
/]
[query public isImportedBySchemaComponent(pimPackage:Package):Boolean=
	not(self.getSchemaComponentElementImport().oclIsUndefined())
/]
[/comment]
[query public isInformationModel(element:Package):Boolean=
	not((element.URI=null)or element.URI.oclIsUndefined() or (element.URI=''))
/]
[query public getTargetNamespace(pimPackage:Package):String=
	self.URI
/]
[comment]
	self.getStringValue('targetNamespace')
[/comment]
[query public getPimClassifiers(schema:Package):Sequence(Classifier)=schema.ownedType
		->select(t|t.oclIsKindOf(Class) or t.oclIsKindOf(DataType) )
		.oclAsType(Classifier)->sortedBy(c|c.umlName())
/]
[comment]
[query public getRelatedClassMeaningConcept(domain:Classifier):Set(Classifier)=
	domain.getApplication()
		->select(a|(a.eClass().name='ClassMeaning'))
		.getClassMeaningObject()->asSet()
/]
[query public getRelatedRelationshipMeaningConcept(domain:Property):Set(Classifier)=
	domain.getApplication()
		->select(a|(a.eClass().name='RelationshipMeaning'))
		.getRelationshipMeaningRelationship()->asSet()
/]
[query public getConcept(concept:Classifier):ecore::EObject=
	concept.getApplication()
		->select(a|(a.eClass().name='Concept'))->asSequence()->first()
/]
[query public getClassMeaningObject(instance:ecore::EObject):Sequence(Classifier)=
	instance.eGetManyNamedEObject('object').eGet('base_Class').oclAsType(Classifier)
/]
[query public getRelationshipMeaningRelationship(instance:ecore::EObject):Sequence(Classifier)=
	instance.eGetManyNamedEObject('relationship').eGet('base_Class').oclAsType(Classifier)
/]
[/comment]
[query public getValueDomainMeaning(domain:Classifier):Sequence(Classifier)=
	domain.clientDependency
		->select(d|d.isValueDomainMeaning()).supplier
		->select(s|s.oclIsKindOf(Classifier)).oclAsType(Classifier)
		->asSet()
		->asSequence()
/]

[query public getDataElementMeaning(domain:Property):Sequence(Property)=
	domain.clientDependency
		->select(d|d.isDataElementMeaning()).supplier
		->select(s|s.oclIsKindOf(Property)).oclAsType(Property)
		->asSet()
		->asSequence()
/]
[query public getPermissibleValueMeaning(domain:EnumerationLiteral):Sequence(EnumerationLiteral)=
	domain.clientDependency
		->select(d|d.isPermissibleValueMeaning()).supplier
		->select(s|s.oclIsKindOf(EnumerationLiteral)).oclAsType(EnumerationLiteral)
		->asSet()
		->asSequence()
/]
[query public isValueDomainMeaning(classifier:Dependency):Boolean=
	classifier.stereotypedBy('ValueDomainMeaning')
/]
[query public isDataElementMeaning(classifier:Dependency):Boolean=
	classifier.stereotypedBy('DataElementMeaning')
/]
[query public isPermissibleValueMeaning(classifier:Dependency):Boolean=
	classifier.stereotypedBy('PermissibleValueMeaning')
/]

[query public eGetManyNamedEObject(instance:ecore::EObject, name:String):Sequence(ecore::EObject)=
	if(instance.eClass().eAllStructuralFeatures->select(f|f.name=name)->isEmpty())then Sequence{} else
	instance.eGetManyEObject(
		instance.eClass().eAllStructuralFeatures->select(f|f.name=name)->asSequence()->first()
	)endif
/]
[comment]
[query public isPropertyRedefinition(p:Property):Boolean=not(p.redefinedProperty().oclIsUndefined())/]
[query public redefinedProperty(p:Property):Property=invoke(helperName(),'redefinedProperty(org.eclipse.uml2.uml.Property)',Sequence{p})/] 
[query public getRedefinitionContext(c:Property):Classifier=
	c.owner.oclAsType(Classifier).getSubsets()
/]
[/comment]

[query public getAllAttributes(c:Classifier):Set(Property)=
	c.attribute->union(c.allParents().getAllAttributes())->asSet()
/]

[query public getGeneralizations(c:Classifier):Set(Generalization)=
	c.generalization
		->select(g:Generalization|
			(g.general<>null)
			and not(g.general.oclIsUndefined()) 
			and (g.general.name<>null) 
			and not(g.general.name.oclIsUndefined())
		)->asSet()
/]
[comment]
[query public getRealizations(c:NamedElement):Set(Realization)=
	c._directedRelationshipOfSource
		->select(g:DirectedRelationship|
			g.oclIsKindOf(Realization)
		).oclAsType(Realization)->asSet()
/]
[query public getSubsetsPackage(classifier:Package):Sequence(Package)=
	classifier.getRealizations()->select(g:Realization|g.isSubsetsPackage()).supplier.oclAsType(Package)
	->asSequence()
/]
[query public getSubsetsClassifier(classifier:Classifier):Sequence(Classifier)=
	classifier.getRealizations()->select(g:Realization|g.isSubsets()).supplier.oclAsType(Classifier)
	->asSequence()
/]
[query public getSubsets(classifier:Classifier):Classifier=
	if(classifier.getSubsetsClassifier()->isEmpty()) then
		if(classifier.getNearestPackage().getSubsetsPackage()->isEmpty()) then
			null
		else
			classifier.getNearestPackage().getSubsetsPackage().ownedType
			->select(t:Type|t.oclIsKindOf(Classifier) 
				and (t.oclAsType(Classifier).getNIEMName()=classifier.getNIEMName())
				).oclAsType(Classifier)->asSequence()->first()
		endif
	else
		classifier.getSubsetsClassifier()->first()
	endif
/]
[/comment]
[query public getBases(c:Classifier):Sequence(Classifier)=
	c.getGeneralizations()->select(g:Generalization|g.isExtends()).general
	->union(c.clientDependency->select(d|d.stereotypedBy('Restriction')).supplier.oclAsType(Classifier))
		->sortedBy(s:Classifier|s.umlName())
		->asSequence()
/]
[query public isExtends(generalization:Generalization):Boolean=
	not(generalization.stereotypedBy('Augments'))
	and not(generalization.stereotypedBy('RolePlayedBy'))
	and not(not(generalization.specific.isAugmentationType()) and generalization.general.isAugmentationType())
	
/]

[query public isSubsetsPackage(realization:Realization):Boolean=
	realization.isSubsets() 
	and realization.client->forAll(c|c.oclIsKindOf(Package) and c.oclAsType(Package).isInformationModel())
	and realization.supplier->forAll(c|c.oclIsKindOf(Package) and c.oclAsType(Package).isInformationModel())
/]
[comment]
[query public isInformationModelSubset(element:Element):Boolean=
	element.oclIsKindOf(Package) and element.oclAsType(Package).isInformationModel() 
	and (element.getEnumerationValue('defaultPurpose')='subset')
/]
[query public isInformationModelReference(element:Element):Boolean=
	element.oclIsKindOf(Package) and element.oclAsType(Package).isInformationModel()  
	and (element.getEnumerationValue('defaultPurpose')='reference')
/]
[/comment]
[query public isInformationModelSubset(element:Element):Boolean=
	element.oclIsKindOf(Package) and element.oclAsType(Package).isInformationModel() 
	and element.oclAsType(Package).isSubsetInformationModel()
/]
[query public isInformationModelReference(element:Element):Boolean=
	element.oclIsKindOf(Package) and element.oclAsType(Package).isInformationModel()  
	and not(element.oclAsType(Package).isSubsetInformationModel())
/]
[query public isSubsetInformationModel(p:Package):Boolean=
	p.elementImport.importedElement->select(ie|ie.oclIsKindOf(Package))->notEmpty()
/]
[query public isSubsets(classifier:Realization):Boolean=
	'References'=classifier.name
/]
[comment]
[query public isSubsets(classifier:Realization):Boolean=
	classifier.stereotypedBy('References')
/]
[/comment]
[query public isRoleOf(classifier:Generalization):Boolean=
	classifier.stereotypedBy('RoleOf')
/]
[query public isAugments(classifier:Generalization):Boolean=
	classifier.stereotypedBy('Augments')
/]
[query public isAugmentationType(classifier:Classifier):Boolean=
	classifier.stereotypedBy('AugmentationType')
	or classifier.generalization->select(g:Generalization|g.isAugments())->notEmpty()
/]
[query public isMetadataType(classifier:Classifier):Boolean=
	classifier.stereotypedBy('MetadataType')
/]
[query public isPropertyHolder(classifier:Element):Boolean=
	classifier.stereotypedBy('PropertyHolder')
/]
[query public getAllParentClassifiers(c : Classifier):Set(Classifier)=
	if((c=null)or c.oclIsUndefined()) then Set(Classifier){}
	else c.allParents()->select(g:Classifier|(g<>null)and not(g.oclIsUndefined()) and (g.name<>null) and not(g.name.oclIsUndefined()))->flatten()->asSet()
	endif
/]
[comment]TODO Text SUPPRESS
[query public allParents(c : Classifier):Set(Classifier)=
	c.general->union(c.general.allParents())->asSet()
/]
	c.general->union(c.general)->asSet()
[/comment]
[query public allParents(c : Classifier):Set(Classifier)=
	c.allParentsBase(Set{})
/]
[query public allParentsBase(c : Classifier , s : Set(Classifier)):Set(Classifier)=
	if(s->includes(c))then s else s->addAll(Set{c}) endif
/]
	
[query public getAllBases(c : Classifier):Sequence(Classifier)=
	if((c=null)or c.oclIsUndefined()) then Set(Classifier){}
	else c.getBases()->union(c.getBases().getAllBases())
	endif
/]
[comment]
[query public allSubtypes(c : Classifier):Set(Classifier)=
	c._directedRelationshipOfTarget
		->select(r|r.oclIsKindOf(Generalization)).oclAsType(Generalization).specific
		->collect(c|c->union(c.allSubtypes()))->asSet()
/]
[query public getAssociations(c:Classifier):Set(Association)=
	c.getAssociations()
/]
[/comment]


[query public getAllOwnedProperties(c:Classifier):Set(Property)=
	c.attribute
	->union(c.getAssociations().ownedEnd->select(ae|ae.getOtherEnd().type=c))
	->asSet()
/]
[query public getOtherEnd(p:Property):Property=p.opposite/]
[query public umlName(namedElement:NamedElement):String=
	if((namedElement.name=null) or namedElement.name.oclIsUndefined()) then '(unnamed)' else namedElement.name.xmlCleanup() endif
/]	
[query public name(namedElement:NamedElement):String=
	if((namedElement.name=null) or namedElement.name.oclIsUndefined()) then '(unnamed)' else namedElement.name.xmlCleanup() endif
/]	
[query public name(namedElement:ecore::ENamedElement):String=
	if((namedElement.name=null) or namedElement.name.oclIsUndefined()) then '(unnamed)' else namedElement.name.xmlCleanup() endif
/]	

[query public getOwnedProperty(c:Classifier):Sequence(Property)=
	if(c.oclIsKindOf(Class))then c.oclAsType(Class).ownedAttribute
		else if(c.oclIsKindOf(DataType))then c.oclAsType(DataType).ownedAttribute
			else if(c.oclIsKindOf(Artifact))then c.oclAsType(Artifact).ownedAttribute
					else Sequence{} endif
			endif		
		endif		
/]
[query public qualifiedName(type:NamedElement):String=
	if(type<>null)
		then if((type.qualifiedName<>'') and (type.qualifiedName<>null) and not(type.qualifiedName.oclIsUndefined()))
			then type.qualifiedName.oclAsType(String).replace('<','&lt;').replace('>','&gt;')
			else (type.owner.oclAsType(NamedElement).qualifiedName()+'::(unnamed)')
			endif
		else ''
		endif
/]
[query public xmlCleanup(text:String):String=text.replace('&','&amp;').replace('<','&lt;').replace('>','&gt;')/]
[query public getPrimaryCollaborationRoles(serviceArchitecture:Collaboration):Sequence(Component)=
	serviceArchitecture.collaborationRole
		->select(r|r.isPrimaryCollaborationRole()  )
		.type->select(t|t.oclIsKindOf(Component)).oclAsType(Component)->asSequence()->sortedBy(r|r.name)
/]
[query public isPrimaryCollaborationRole(r:ConnectableElement):Boolean=
	r.oclIsKindOf(Property) and (r.oclAsType(Property).aggregation<>AggregationKind::shared)
/]

[template public getPurposeDescription(purposeURI:String){
	purpose:String=purposeURI.substringAfter('#');
}]
	[if(purpose='administrative')]Serves the purpose of documentation that relates to business operations, decisions, organizing people and resources, agreements, testimonials, etc. about a model package description.
	[elseif(purpose='business-rules')]Serves the purpose of a statement or set of statements (formal or informal) that define and/or constrain some aspect of business data or information.
	[elseif(purpose='catalog')]Serves the purpose of identifying, locating, and describing all artifacts in a model package description.
	[elseif(purpose='changelog')]Serves the purpose of recording all changes (additions, deletions, modifications) to a model package description relative to a previous version.
	[elseif(purpose='conformance-report')]Serves the purpose of a report that evaluates NIEM conformance.
	[elseif(purpose='constraint-schema')]Serves the purpose of an XML schema that defines additional constraints on XML instances beyond those that NIEM Naming and Design Rules are capable of enforcing.
	[elseif(purpose='constraint-schema-set')]Serves the purpose of a collection of XML schemas which impose additional constraints on the XML instance documents (IEPs) of an IEPD.
	[elseif(purpose='data-dictionary')]Serves the purpose of a record of information about data (i.e. metadata) such as names, meaning, relationships to other data, origin, usage, and format.
	[elseif(purpose='data-model')]Serves the purpose of a formal representation (e.g., UML) of business data requirements that indicates data semantics, structure, and relationships.
	[elseif(purpose='display')]Serves the purpose of formatting information for viewing on a computer monitor.
	[elseif(purpose='documentation')]Serves the purpose of describing or explaining any aspect of design, usage, testing, processing, etc. of a model package description and/or its contents.
	[elseif(purpose='endorsement')]Serves the purpose of documentation that supports, approves, sanctions, or recommends a model package description.
	[elseif(purpose='exchange-schema')]Serves the purpose of an XML schema that is a root schema (and declares a root element) for an IEPD.
	[elseif(purpose='exchange-schema-set')]Serves the purpose of a collection of XML schemas which declare root elements for XML instance documents (IEPs) of an IEPD.
	[elseif(purpose='extension-schema')]Serves the purpose of an XML schema that extends a NIEM release in accordance with the NIEM Naming and Design Rules.
	[elseif(purpose='extension-schema-set')]Serves the purpose of a collection of XML schemas which contain new or extend existing NIEM data components and conform to the NIEM Naming and Design Rules.
	[elseif(purpose='file')]Serves the purpose of a block of arbitrary information, or resource for storing information, which is available to a computer program and is usually based on some kind of durable storage.
	[elseif(purpose='file-set')]Serves the purpose of a collection of files managed together for a specific purpose or reason.
	[elseif(purpose='incremental-schema')]Serves the purpose of an XML schema within a Domain Update that represents incremental changes to an existing NIEM domain.
	[elseif(purpose='mapping')]Serves the purpose of describing how one data model or set of data components corresponds to another by identifying semantic equivalence or similarity.
	[elseif(purpose='master-document')]Serves the purpose of a primary source of documentation; a readme file; a first documentation source to consult and one that may reference other supplemental documentation.
	[elseif(purpose='memorandum')]Serves the purpose of documentation that records events, observations, agreements, or other business related aspects pertaining to a model package description.
	[elseif(purpose='metadata-extended')]Serves the purpose of an XML artifact that provides additional metadata beyond that contained in a model package description catalog.
	[elseif(purpose='non-normative-reference')]Serves the purpose of technical documentation that provides informal guidance or recommends methods that relate to technical aspects of a model package description.
	[elseif(purpose='normative-reference')]Serves the purpose of technical documentation that provides formal specifications, instructions, or rules for techniques and methods that relate to a model package description.
	[elseif(purpose='ontology')]Serves the purpose of a standardized representation of knowledge as a set of concepts within a domain, and the relationships between those concepts. It can be used to reason about the entities within that domain, and may be used to describe the domain.
	[elseif(purpose='quality-assurance-report')]Serves the purpose of a report that evaluates or measures degree of excellence against some prescribed criteria.
	[elseif(purpose='reference-schema')]Serves the purpose of an XML schema that defines and declares NIEM data components that are authoritative.
	[elseif(purpose='reference-schema-set')]Serves the purpose of a collection of XML schemas that contain data components that are authoritive for NIEM.
	[elseif(purpose='replacement-schema')]Serves the purpose of an XML schema within a domain update that represents a complete replacement of an existing NIEM domain schema.
	[elseif(purpose='report')]Serves the purpose of a document that records evaluation results produced through review, testing, or analysis that was executed by automatic processing, manual (human) means, or a combination of both.
	[elseif(purpose='sample-instance')]Serves the purpose of an XML instance document that exemplifies a typical instance that validates against an XML schema or schema set.
	[elseif(purpose='schema')]Serves the purpose of an XML schema in general.
	[elseif(purpose='schema-set')]Serves the purpose of a collection of XML schemas that are maintained together for a logical reason or purpose (usually because of inter dependencies).
	[elseif(purpose='subset-schema')]Serves the purpose of an XML schema that has been derived from a NIEM reference schema and represents a subset of the reference schema.
	[elseif(purpose='subset-schema-set')]Serves the purpose of a collection of XML schemas which have been derived from and represent a subset of a particular NIEM reference schema set (release).
	[elseif(purpose='technical-reference')]Serves the purpose of technical documentation that defines, describes, or explains technical aspects of a model package description.
	[elseif(purpose='test-report')]Serves the purpose of a document that records the results of testing.
	[elseif(purpose='tool-specific-file')]Serves the purpose of an artifact that is an input to or output from some software tool used to develop contents of or implement a model package description. Such artifacts may be in either a standard open format or proprietary format.
	[elseif(purpose='transformation')]Serves the purpose of translating an artifact into another format or representation.
	[elseif(purpose='wantlist')]Serves the purpose of an XML instance document that represents a NIEM schema subset and is an input to or output from the NIEM Schema Subset Generation Tool.
	[elseif(purpose='web-service')]Serves the purpose of establishing a method for communication between two electronic devices over a network.
	[else](unknown)
	[/if]
[/template]

[comment]GRA SDD queries [/comment]
[query public getGraProfile(profiles : Sequence(Profile)):Profile=profiles->select(p|p.name='GRA')->first()/]
[query public getMpdProfile(profiles : Sequence(Profile)):Profile=profiles->select(p|p.name='Model_Package_Description_Profile')->first()/]
[query public getPimProfile(profiles : Sequence(Profile)):Profile=profiles->select(p|p.name='NIEM_PIM_Profile')->first()/]

[query public getWsdlProfile(profiles : Sequence(Profile)):Profile=profiles->select(p|p.name='NIEM_SoaML_WSDL_Profile')->first()/]
[query public stereotype(profile : Profile, name : String):Stereotype=profile.ownedType->select(t|t.name=name).oclAsType(Stereotype)->asSequence()->first()/]
[query public sspStereotype(profile : Profile):Stereotype=profile.stereotype('SPP')/]
[query public businessContextStereotype(profile : Profile):Stereotype=profile.stereotype('BusinessContext')/]

[query public mpdStereotype(profile : Profile):Stereotype=profile.stereotype('ModelPackageDescription')/]
[query public serviceIdentificationStereotype(profile : Profile):Stereotype=profile.stereotype('ServiceIdentification')/]
[query public organizationStereotype(profile : Profile):Stereotype=profile.stereotype('Organization')/]
[query public serviceCapabilityStereotype(profile : Profile):Stereotype=profile.stereotype('ServiceCapability')/]
[query public ServiceInterfaceSpecificationStereotype(profile : Profile):Stereotype=profile.stereotype('ServiceInterfaceSpecification')/]
[query public ServiceLevelAgreementsStereotype(profile : Profile):Stereotype=profile.stereotype('ServiceLevelAgreements')/]
[query public WsdlDefinitionsStereotype(profile : Profile):Stereotype=profile.stereotype('WsdlDefinitions')/]
[query public InformationModelStereotype(profile : Profile):Stereotype=profile.stereotype('InformationModel')/]
	

[comment]
[query public getActualStereotype(s : Stereotype, element:Element):Stereotype=element.getAppliedStereotypes()->select(as|as.name=s.name)->asSequence()->first()/]
[query public GetValue(element:Element, s : Stereotype, name:String):OclAny=element.getValue(s.getActualStereotype(element),name)/]
[query public IsStereotypeAppliedSUPPRESS(element:Element, s : Stereotype):Boolean=element.getAppliedStereotypes()->select(as|as.name=s.name)->notEmpty()/]
[query public IsStereotypeAppliedSUPPRESS2(element:Element, s : Stereotype):Boolean=element.getStereotypeApplications().eClass()->select(e|e.name=s.name)->notEmpty()/]
[query public getSspSUPPRESS2(model:Model, sspStereotype : Stereotype):Collaboration=model.packagedElement->select(t|t.oclIsKindOf(Collaboration)).oclAsType(Collaboration)->asSequence()->first()/]
[query public sspSUPPRESS(model:Model, sspStereotype : Stereotype):Collaboration=model.packagedElement->select(t|t.oclIsKindOf(Collaboration) and t.IsStereotypeApplied(sspStereotype)).oclAsType(Collaboration)->asSequence()->first()/]
[query public sspTEST(model:Model, sspStereotype : Stereotype):Collaboration=model.packagedElement->select(t|t.oclIsKindOf(Collaboration)).oclAsType(Collaboration)->asSequence()->first()/]
[query public relatedOrganization(m : Collaboration):UseCase=m.useCase/]
[query public getDataInputs(m : NamedElement):String='getDataInputs TODO'/]
[query public getDataOutputs(m : NamedElement):String='getDataOutputs TODO'/]
[/comment]
[query public getSsp(model:Model, sspStereotype : Stereotype):Collaboration=model.packagedElement->select(t|t.isStereotypeApplied(sspStereotype)).oclAsType(Collaboration)->asSequence()->first()/]
[query public serviceIdentification(ssp:Collaboration, serviceIdentificationStereotype:Stereotype):Component=
	ssp.role->select(r|r.isPrimaryService()).type
	->select(t|t.isStereotypeApplied(serviceIdentificationStereotype)).oclAsType(Component)->asSequence()->first()/]
[query public businessContext(ssp:Collaboration, businessContextStereotype:Stereotype):Component=
	ssp.role.type
	->select(t|t.isStereotypeApplied(businessContextStereotype)).oclAsType(Component)
	->asSequence()->first()/]
[query public dependentServiceIdentifications(ssp:Collaboration, serviceIdentificationStereotype:Stereotype):Sequence(Component)=
	ssp.role->select(r|not(r.isPrimaryService())).type
	->select(t|t.isStereotypeApplied(serviceIdentificationStereotype)).oclAsType(Component)
	->asSequence()/]
[query public isPrimaryService(role:ConnectableElement):Boolean=
	role.oclIsKindOf(Property) and not(role.oclIsKindOf(Port)) 
	and role.oclAsType(Property).aggregation=AggregationKind::composite/]

[query public mpdComponents(ssp:Collaboration, mpdStereotype:Stereotype):Sequence(Component)=
	ssp.clientDependency->select(d|d.oclIsKindOf(Usage)).supplier->select(t|t.isStereotypeApplied(mpdStereotype)).oclAsType(Component)->asSequence()/]
[query public wsdlDefinitions(ssp:Collaboration, WsdlDefinitionsStereotype:Stereotype):Sequence(Artifact)=
	ssp.clientDependency->select(d|d.oclIsKindOf(Usage)).supplier
	->select(t|t.isStereotypeApplied(WsdlDefinitionsStereotype)).oclAsType(Artifact)->asSequence()/]

[query public serviceLevelAgreements(ssp:Collaboration, ServiceLevelAgreementsStereotype:Stereotype):Collaboration=
	ssp.collaborationUse.type
	->select(t|t.isStereotypeApplied(ServiceLevelAgreementsStereotype)).oclAsType(Collaboration)->asSequence()->first()/]

[query public serviceInterfaceSpecifications(serviceIdentification:Component, ServiceInterfaceSpecificationStereotype:Stereotype):Sequence(Interface)=
	serviceIdentification.ownedPort.provided->union(serviceIdentification.ownedPort.required)->asSet()->asSequence()/]
[query public incomingParameter(operation:Operation):Sequence(Parameter)=
	operation.ownedParameter
		->select(p|(p.direction=(ParameterDirectionKind::_in))
			or(p.direction=(ParameterDirectionKind::inout))
	)->asSequence()/]
[query public outgoingParameter(operation:Operation):Sequence(Parameter)=
	operation.ownedParameter
		->select(p|p.direction<>(ParameterDirectionKind::_in))->asSequence()/]

[query public exchangePartnerTypeDescriptionText(businessContext : Component, businessContextStereotype :Stereotype):String
	=businessContext.getValue(businessContextStereotype,'exchangePartnerTypeDescriptionText')/]

[query public businessScenarioUseCase(ssp : Collaboration):Sequence(UseCase)=ssp.useCase->asSequence()/]
[query public sIPName(m : Element, s :Stereotype):String=m.getValue(s,'sIPName')/]
[query public uRIDescription(m : Element, s :Stereotype):String=m.getValue(s,'uRIDescription')/]
[query public mpdURI(mpd : Component, mpdStereotype :Stereotype):String=mpd.mpdBaseURI(mpdStereotype)+mpd.mpdVersionID(mpdStereotype)/]
[query public mpdBaseURI(mpd : Component, mpdStereotype :Stereotype):String=mpd.getValue(mpdStereotype,'mpdBaseURI')/]
[query public mpdVersionID(mpd : Component, mpdStereotype :Stereotype):String=mpd.getValue(mpdStereotype,'mpdVersionID')/]

[query public getServiceVersion(m : Element, s :Stereotype):String=m.majorVersion(s)+'.'+m.minorVersion(s)+'.'+m.revisionVersion(s)/]
[query public majorVersion(m : Element, s :Stereotype):String=m.getValue(s,'majorVersion')/]
[query public minorVersion(m : Element, s :Stereotype):String=m.getValue(s,'minorVersion')/]
[query public revisionVersion(m : Element, s :Stereotype):String=m.getValue(s,'revisionVersion')/]

[query public getServiceName(m : Element, s :Stereotype):String=m.getValue(s,'serviceFullNameText')/]
[query public getServiceAbbreviation(m : Element, s :Stereotype):String=m.getValue(s,'serviceNameAbbreviationText')/]
[query public getServiceURI(m : Element, s :Stereotype):String=m.getValue(s,'serviceURI')/]


[query public getOrganizations(m : Collaboration, organizationStereotype:Stereotype):Sequence(Actor)=m.useCase.getAssociations().memberEnd.type->select(s|s.isStereotypeApplied(organizationStereotype)).oclAsType(Actor)->asSet()->asSequence()/]

[query public getNameOfOrganization(m : Actor):String=m.name/]
[query public getMonthYear(m : Collaboration, s :Stereotype):String=m.getValue(s,'activationDate')/]

[query public policyText(m : Collaboration, s :Stereotype):String=m.getValue(s,'policyText')/]
[query public contractAgreementDescriptionText(m : Collaboration, s :Stereotype):Sequence(String)=m.getManyValues(s,'contractAgreementDescriptionText')/]
[query public agreementAgreementDescriptionText(m : Collaboration, s :Stereotype):Sequence(String)=m.getManyValues(s,'agreementAgreementDescriptionText')/]
[query public umbrellaAgreementAgreementDescriptionText(m : Collaboration, s :Stereotype):Sequence(String)=m.getManyValues(s,'umbrellaAgreementAgreementDescriptionText')/]
[query public licensingAgreementDescriptionText(m : Collaboration, s :Stereotype):Sequence(String)=m.getValue(s,'licensingAgreementDescriptionText')/]

[query public getServiceOverview(m : Collaboration):String=m.commentBody()/]
[query public getPurpose(m : Collaboration, s :Stereotype):String=m.getValue(s,'servicePurposeText')/]
[query public getCreationDate(m : Collaboration, s :Stereotype):String=m.getValue(s,'creationDate')/]
[query public getLifecycleStatus(m : Collaboration, s :Stereotype):String=m.getValue(s,'lifecycleStatus')/]
[query public getScope(m : NamedElement, s :Stereotype):String=m.getValue(s,'serviceScopeDescriptionText')/]
[query public getRealWorldEffects(m : NamedElement, s :Stereotype):Sequence(String)=m.getManyValues(s,'realWorldEffectDescriptionText')/]
[query public getCapabilityDescriptionText(serviceCapability : Class, serviceCapabilityStereotype :Stereotype):Sequence(String)=serviceCapability.getValue(serviceCapabilityStereotype,'capabilityDescriptionText')/]
[query public getServiceCapability(participant : Component, serviceCapabilityStereotype :Stereotype):Sequence(Class)=participant.realization.realizingClassifier->select(t|t.isStereotypeApplied(serviceCapabilityStereotype)).oclAsType(Class)->asSequence()/]

[query public primaryServiceParticipant(ssp : Collaboration):Component=ssp.part->select(r|r.aggregation=AggregationKind::composite).type->select(t|t.oclIsKindOf(Component)).oclAsType(Component)->asSequence()->first()/]

[query public getSummary(m : NamedElement, s :Stereotype):String=m.getValue(s,'serviceDescriptionSummaryText')/]
[query public getDescription(m : NamedElement, s :Stereotype):String=m.getValue(s,'serviceDescriptionText')/]
[query public getSecurityClassification(m : NamedElement, s :Stereotype):String=m.getValue(s,'securityClassificationText')/]
[query public securityDescriptionText(m : NamedElement, s :Stereotype):String=m.getValue(s,'securityDescriptionText')/]
[comment]
[query public getServiceSpecificationPackageVersion(m : NamedElement):String='getServiceSpecificationPackageVersion TODO'/]
[query public primaryServiceInterface(participant : Component, serviceCapabilityStereotype : Stereotype):Class=participant.ownedPort->select(r|r.aggregation=AggregationKind::composite).type->select(t|t.oclIsKindOf(Class)and t.isStereotypeApplied(serviceCapabilityStereotype)).oclAsType(Class)->asSequence()->first()/]
[query public getPoliciesAndContracts(m : NamedElement):String='getPoliciesAndContracts TODO'/]
[query public getServiceDependencies(m : NamedElement):String='getServiceDependencies TODO'/]
[query public getIEPDReference(m : NamedElement):String='getIEPDReference TODO'/]
[query public getActions(m : NamedElement):Sequence(Behavior)=Sequence{}/]
[query public getBusiness_Scenarios(m : NamedElement):String='getBusiness_Scenarios TODO'/]
[query public getBusiness_Scenario(m : NamedElement):String='getBusiness_Scenario TODO'/]
[query public getPrimaryFlow(m : NamedElement):String='getPrimaryFlow TODO'/]
[query public getUmbrellaAgreements(m : NamedElement):String='getUmbrellaAgreements TODO'/]
[query public getInterface_Description_Requirements(m : NamedElement):String='getInterface_Description_Requirements TODO'/]
[query public getInformationModel(m : NamedElement):String='getInformationModel TODO'/]
[query public getService_Interaction_Requirements(m : NamedElement):String='getService_Interaction_Requirements TODO'/]
[query public getMessage_Exchange_Patterns(m : NamedElement):String='getMessage_Exchange_Patterns TODO'/]
[query public getServiceActions(m : NamedElement):Sequence(Behavior)=Sequence{}/]
[query public getService_Action(m : NamedElement):String='getService_Action TODO'/]
[query public getMessage_Definition_Mechanism(m : NamedElement):String='getMessage_Definition_Mechanism TODO'/]
[/comment]

[query public contactPersonName(m : NamedElement, s :Stereotype):String=m.getValue(s,'contactPersonName')/]
[query public contactPersonPhoneNumberID(m : NamedElement, s :Stereotype):String=m.getValue(s,'contactPersonPhoneNumberID')/]
[query public contactPersonEmailID(m : NamedElement, s :Stereotype):String=m.getValue(s,'contactPersonEmailID')/]
[query public targetNamespace(m : Package, InformationModel :Stereotype):String=m.getValue(InformationModel,'targetNamespace')/]

[query public getAction_Name(m : Operation):String=m.name/]
[query public getAction_Purpose(m : Operation):String=m.commentBody()/]
[query public getAction_Inputs(m : Operation):Sequence(String)=m.getAction_DataInputs().name/]
[query public getAction_Outputs(m : Operation):Sequence(String)=m.getAction_DataOutputs().name/]
[query public getAction_Provenance(m : Operation):String='getAction_Provenance TODO'/]

[query public getAction_Message(m : Parameter):Class=m.type
	->select(t|t.oclIsKindOf(Class)).oclAsType(Class)->asSequence()->first()/]
[query public getMessagePartUsedElement(part : Property):Sequence(Property)=
	part.clientDependency
		->select(d|d.oclIsKindOf(Usage)).supplier
		->select(s|s.oclIsKindOf(Property)).oclAsType(Property)
		->asSequence()/]
[query public getAction_MessageParts(m : Parameter):Sequence(Property)=
	m.getAction_Message().ownedAttribute.getMessagePartUsedElement()/]
[query public getAction_DataInputs(m : Operation):Sequence(Property)=
	m.incomingParameter().getAction_MessageParts()/]
[query public getAction_DataOutputs(m : Operation):Sequence(Property)=
	m.outgoingParameter().getAction_MessageParts()/]

[query public policyClauses(constraint:Constraint):Sequence(Expression)=
	constraint.specification->select(s|s.oclIsKindOf(Expression)).oclAsType(Expression)/]


[query public getAlternativeFlows(m : NamedElement):String='getAlternativeFlows TODO'/]
[query public getServiceInteroperabilityRequirements(m : NamedElement):String='getServiceInteroperabilityRequirements TODO'/]
[query public getServiceInteractionRequirements(m : NamedElement):String='getServiceInteractionRequirements TODO'/]

[query public toYesNo(m : Boolean):String=if(m)then 'Yes' else 'No' endif/]
[query public isServiceConsumerAuthentication(wsdlPolicy:Expression):Boolean=wsdlPolicy.symbol='unkown'/]
[query public serviceConsumerAuthentication(wsdlPolicies:Sequence(Expression)):Sequence(Expression)=wsdlPolicies->select(p|p.isServiceConsumerAuthentication())/]
[query public isServiceConsumerAuthorization(wsdlPolicy:Expression):Boolean=wsdlPolicy.symbol='unkown'/]
[query public ServiceConsumerAuthorization(wsdlPolicies:Sequence(Expression)):Sequence(Expression)=wsdlPolicies->select(p|p.isServiceConsumerAuthorization())/]
[query public isIdentityAndAttributeAssertionTransmission(wsdlPolicy:Expression):Boolean=wsdlPolicy.symbol='unkown'/]
[query public IdentityAndAttributeAssertionTransmission(wsdlPolicies:Sequence(Expression)):Sequence(Expression)=wsdlPolicies->select(p|p.isIdentityAndAttributeAssertionTransmission())/]
[query public isServiceAuthentication(wsdlPolicy:Expression):Boolean=wsdlPolicy.symbol='unkown'/]
[query public ServiceAuthentication(wsdlPolicies:Sequence(Expression)):Sequence(Expression)=wsdlPolicies->select(p|p.isServiceAuthentication())/]
[query public isServiceConsumerAuthentication(wsdlPolicy:Expression):Boolean=wsdlPolicy.symbol='unkown'/]
[query public serviceConsumerAuthentication(wsdlPolicies:Sequence(Expression)):Sequence(Expression)=wsdlPolicies->select(p|p.isServiceConsumerAuthentication())/]
[query public isMessageNonrepudiation(wsdlPolicy:Expression):Boolean=wsdlPolicy.symbol='unkown'/]
[query public MessageNonrepudiation(wsdlPolicies:Sequence(Expression)):Sequence(Expression)=wsdlPolicies->select(p|p.isMessageNonrepudiation())/]
[query public isMessageIntegrity(wsdlPolicy:Expression):Boolean=wsdlPolicy.symbol='unkown'/]
[query public MessageIntegrity(wsdlPolicies:Sequence(Expression)):Sequence(Expression)=wsdlPolicies->select(p|p.isMessageIntegrity())/]
[query public isMessageConfidentiality(wsdlPolicy:Expression):Boolean=wsdlPolicy.symbol='unkown'/]
[query public MessageConfidentiality(wsdlPolicies:Sequence(Expression)):Sequence(Expression)=wsdlPolicies->select(p|p.isMessageConfidentiality())/]
[query public isMessageAddressing(wsdlPolicy:Expression):Boolean=wsdlPolicy.symbol='unkown'/]
[query public MessageAddressing(wsdlPolicies:Sequence(Expression)):Sequence(Expression)=wsdlPolicies->select(p|p.isMessageAddressing())/]
[query public isReliability(wsdlPolicy:Expression):Boolean=wsdlPolicy.symbol='unkown'/]
[query public Reliability(wsdlPolicies:Sequence(Expression)):Sequence(Expression)=wsdlPolicies->select(p|p.isReliability())/]
[query public isTransactionSupport(wsdlPolicy:Expression):Boolean=wsdlPolicy.symbol='unkown'/]
[query public TransactionSupport(wsdlPolicies:Sequence(Expression)):Sequence(Expression)=wsdlPolicies->select(p|p.isTransactionSupport())/]
[query public isServiceMetadataAvailability(wsdlPolicy:Expression):Boolean=wsdlPolicy.symbol='unkown'/]
[query public ServiceMetadataAvailability(wsdlPolicies:Sequence(Expression)):Sequence(Expression)=wsdlPolicies->select(p|p.isServiceMetadataAvailability())/]
[query public isInterfaceDescriptionRequirements(wsdlPolicy:Expression):Boolean=wsdlPolicy.symbol='unkown'/]
[query public InterfaceDescriptionRequirements(wsdlPolicies:Sequence(Expression)):Sequence(Expression)=wsdlPolicies->select(p|p.isInterfaceDescriptionRequirements())/]
[query public isServiceResponsiveness(wsdlPolicy:Expression):Boolean=wsdlPolicy.symbol='unkown'/]
[query public ServiceResponsiveness(wsdlPolicies:Sequence(Expression)):Sequence(Expression)=wsdlPolicies->select(p|p.isServiceResponsiveness())/]



[query public getServiceConsumerAuthenticationMandatory(wsdlPolicies:Sequence(Expression)):String=serviceConsumerAuthentication(wsdlPolicies)->notEmpty().toYesNo()/]
[query public getServiceConsumerAuthenticationNotes(wsdlPolicies:Sequence(Expression)):Sequence(String)=serviceConsumerAuthentication(wsdlPolicies).commentBody()/]
[query public getServiceConsumerAuthorizationMandatory(wsdlPolicies:Sequence(Expression)):String=ServiceConsumerAuthorization(wsdlPolicies)->notEmpty().toYesNo()/]
[query public getServiceConsumerAuthorizationNotes(wsdlPolicies:Sequence(Expression)):String=ServiceConsumerAuthorization(wsdlPolicies).commentBody()/]

[query public getIdentityAndAttributeAssertionTransmissionMandatory(wsdlPolicies:Sequence(Expression)):String=IdentityAndAttributeAssertionTransmission(wsdlPolicies)->notEmpty().toYesNo()/]
[query public getIdentityAndAttributeAssertionTransmissionNotes(wsdlPolicies:Sequence(Expression)):String=IdentityAndAttributeAssertionTransmission(wsdlPolicies).commentBody()/]
[query public getServiceAuthenticationMandatory(wsdlPolicies:Sequence(Expression)):String=ServiceAuthentication(wsdlPolicies)->notEmpty().toYesNo()/]
[query public getServiceAuthenticationNotes(wsdlPolicies:Sequence(Expression)):String=ServiceAuthentication(wsdlPolicies).commentBody()/]
[query public getMessageNonrepudiationMandatory(wsdlPolicies:Sequence(Expression)):String=MessageNonrepudiation(wsdlPolicies)->notEmpty().toYesNo()/]
[query public getMessageNonrepudiationNotes(wsdlPolicies:Sequence(Expression)):String=MessageNonrepudiation(wsdlPolicies).commentBody()/]
[query public getMessageIntegrityMandatory(wsdlPolicies:Sequence(Expression)):String=MessageIntegrity(wsdlPolicies)->notEmpty().toYesNo()/]
[query public getMessageIntegrityNotes(wsdlPolicies:Sequence(Expression)):String=MessageIntegrity(wsdlPolicies).commentBody()/]
[query public getMessageConfidentialityMandatory(wsdlPolicies:Sequence(Expression)):String=MessageConfidentiality(wsdlPolicies)->notEmpty().toYesNo()/]
[query public getMessageConfidentialityNotes(wsdlPolicies:Sequence(Expression)):String=MessageConfidentiality(wsdlPolicies).commentBody()/]
[query public getMessageAddressingMandatory(wsdlPolicies:Sequence(Expression)):String=MessageAddressing(wsdlPolicies)->notEmpty().toYesNo()/]
[query public getMessageAddressingNotes(wsdlPolicies:Sequence(Expression)):String=MessageAddressing(wsdlPolicies).commentBody()/]
[query public getReliabilityMandatory(wsdlPolicies:Sequence(Expression)):String=Reliability(wsdlPolicies)->notEmpty().toYesNo()/]
[query public getReliabilityNotes(wsdlPolicies:Sequence(Expression)):String=Reliability(wsdlPolicies).commentBody()/]
[query public getTransactionSupportMandatory(wsdlPolicies:Sequence(Expression)):String=TransactionSupport(wsdlPolicies)->notEmpty().toYesNo()/]
[query public getTransactionSupportNotes(wsdlPolicies:Sequence(Expression)):String=TransactionSupport(wsdlPolicies).commentBody()/]
[query public getServiceMetadataAvailabilityMandatory(wsdlPolicies:Sequence(Expression)):String=ServiceMetadata(wsdlPolicies)->notEmpty().toYesNo()/]
[query public getServiceMetadataAvailabilityNotes(wsdlPolicies:Sequence(Expression)):String=ServiceMetadata(wsdlPolicies).commentBody()/]
[query public getInterfaceDescriptionRequirementsMandatory(wsdlPolicies:Sequence(Expression)):String=InterfaceDescriptionRequirements(wsdlPolicies)->notEmpty().toYesNo()/]
[query public getInterfaceDescriptionRequirementsNotes(wsdlPolicies:Sequence(Expression)):String=InterfaceDescriptionRequirements(wsdlPolicies).commentBody()/]
[query public getServiceResponsivenessMandatory(wsdlPolicies:Sequence(Expression)):String=ServiceResponsiveness(wsdlPolicies)->notEmpty().toYesNo()/]
[query public getServiceResponsivenessNotes(wsdlPolicies:Sequence(Expression)):String=ServiceResponsiveness(wsdlPolicies).commentBody()/]

[query public getServiceAssumptions(m : NamedElement):String='getServiceAssumptions TODO'/]
[query public getExecutionContext(m : NamedElement):String='getExecutionContext TODO'/]
[query public getSecurity(m : NamedElement):String='getSecurity TODO'/]
[query public getPrivacy(m : NamedElement):String='getPrivacy TODO'/]
[query public getOtherRequirements(m : NamedElement):String='getOtherRequirements TODO'/]
[query public getAdditionalInformation(m : NamedElement):String='getAdditionalInformation TODO'/]
[query public getServiceModel(m : NamedElement):String='getServiceModel TODO'/]
[query public getDataProvenance(m : NamedElement):String='getDataProvenance TODO'/]
[query public getBehaviorModel(m : NamedElement):String='getBehaviorModel TODO'/]
[query public getProcessModel(m : NamedElement):String='getProcessModel TODO'/]
[query public getReferences(m : NamedElement):Sequence(Dependency)=m.clientDependency->asSequence()/]
[query public getGlossaryTerms(m : NamedElement):Sequence(Comment)=m.ownedComment->asSequence()/]
[query public getDocumentHistories(m : NamedElement):Sequence(Comment)=m.ownedComment->asSequence()/]

[query public getDate(m : Comment):String='getDate TODO'/]
[query public getVersion(m : Comment):String='getVersion TODO'/]
[query public getChange(m : Comment):String='getChange TODO'/]
[query public getEditor(m : Comment):String='getChange TODO'/]
[query public getGlossary_term_or_acronym(m : Comment):String=m._body/]
[query public getGlossaryDefinition(m : Comment):String=m._body/]
[query public getReference_name_and_description(m : NamedElement):String='getReference_name_and_description TODO'/]
[query public getPath_to_the_reference_information(m : NamedElement):String='getPath_to_the_reference_information TODO'/]

[query public getPrimitive_message_exchange_pattern(operation : Operation):String=
if(operation.ownedParameter->select(p|p.direction<>ParameterDirectionKind::_in)->notEmpty())
then 'request-reply' else 'fire-and-forget' endif
/]
[query public getPhysical_Model(m : NamedElement):String='getPhysical_Model TODO'/]
[query public getAutomatedServiceContracts(m : NamedElement):String='getAutomatedServiceContracts TODO'/]
[query public getAutomatedServicePolicies(m : NamedElement):String='getAutomatedServicePolicies TODO'/]
[query public getNonautomatedServicePoliciesAndConstraints(m : NamedElement):String='getNonautomatedServicePoliciesAndConstraints TODO'/]
[query public getServiceTesting(m : NamedElement):String='getServiceTesting TODO'/]

[template public commentBody(m:Element){
	comments:Sequence(Comment)=m.ownedComment->asSequence();
}]
[for(commentX:Comment|comments)]
[commentX.getCommentBody()/]
[/for]
[/template]


[comment]queries for speculative templates[/common]
[query public wsdlDefinitionInstances(artifact : Artifact):Sequence(InstanceSpecification)=Sequence{}/]
[query public instanceValues(instance : InstanceSpecification, feature: String):Sequence(ValueSpecification)=
	instance.slot->select(s|s.definingFeature.name=feature).value/]
[query public instanceStringValues(instance : InstanceSpecification, feature: String):Sequence(String)=
	instance.instanceValues()->select(s|s.oclIsKindOf(StringLiteral)).oclAsType(StringLiteral).value/]
[query public instanceStringValue(instance : InstanceSpecification, feature: String):String=
	instance.instanceStringValues()->first()/]
[query public instanceInstanceValues(instance : InstanceSpecification, feature: String):Sequence(InstanceSpecification)=
	instance.instanceValues()->select(s|s.oclIsKindOf(InstanceValue)).oclAsType(InstanceValue).instance/]
[query public instanceInstanceValue(instance : InstanceSpecification, feature: String):InstanceSpecification=
	instance.instanceInstanceValues()->first()/]
