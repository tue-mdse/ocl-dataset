[comment encoding = UTF-8 /]
[module classHelper('http://www.eclipse.org/uml2/5.0.0/UML') /]

[import moreco::service::uml2service /]
[import moreco::generate::common::dataTypes /]

[template public generateImports(aClass : Class)]
package [aClass.namespace.name/];

[comment]import via name > use real java types instead of our custom string types[/comment]
[for (classifier:Classifier|aClass.operationsParametersTypes())]
import [classifier.getCompleteName()/];
[/for]
[/template]

[template public generateProperties(aClass : Class)]
[comment]use own primitive types and act like they are basic java types![/comment]
[for (p: Property | aClass.attribute) separator('\n')]
  [p.visibility/] [if p.isStatic]static [/if][p.type.name/] [p.name/];
[/for]

[for (p: Property | aClass.attribute) separator('\n')]
  public [if p.isStatic]static [/if][p.type.name/] get[p.name.toUpperFirst()/]() {
    return this.[p.name/];
  }

  public void set[p.name.toUpperFirst()/]([p.type.name/] [p.name/]) {
    this.[p.name/] = [p.name/];
  }
[/for]
[/template]

[template public generateOperations(aClass : Class)]
[for (o: Operation | aClass.ownedOperation) separator('\n')]
[if (o.hasStereotype('WebMethod'))]
  @Path("[o.getValue(o.getAppliedStereotype('profile::WebMethod'), 'RestPath')/]")
  @[o.getValue(o.getAppliedStereotype('profile::WebMethod'), 'RestMethod')/]
  @Produces("[o.getValue(o.getAppliedStereotype('profile::WebMethod'), 'RestOutput')/]")
[/if]
  [o.visibility/] [if o.isStatic]static [/if][o.generateReturn()/] [o.name/]([o.generateRawParameters()/])[if (o.hasStereotype('ThrowException'))] throws [o.getValue(o.getAppliedStereotype('profile::ThrowException'), 'ExceptionName')/][/if] {
    // [protected (o.name)]        
    // TODO implement [o.name/]
    throw new UnsupportedOperationException("Method not yet implemented");
    // [/protected] 
  }
[/for]
[/template]

[template public generateSingleton(aClass : Class)]
[comment]use own primitive types and act like they are basic java types![/comment]
  private static [aClass.name.toUpperFirst()/] _instance;

  // [protected ('variables')]
  // [/protected] 

  private [aClass.name.toUpperFirst()/]() {    
    // [protected (aClass.name.toUpperFirst())]
    // [/protected] 
  }

  public static [aClass.name.toUpperFirst()/] getInstance() {
    if (_instance == null) {
      _instance = new [aClass.name.toUpperFirst()/]();
    }

    return _instance;
  }
[/template]
