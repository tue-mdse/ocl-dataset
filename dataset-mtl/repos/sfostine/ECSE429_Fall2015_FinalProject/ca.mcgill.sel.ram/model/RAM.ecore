<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="ram" nsURI="http://cs.mcgill.ca/sel/ram/3.0" nsPrefix="ram">
  <eAnnotations source="http://www.eclipse.org/OCL/Import">
    <details key="core" value="../../ca.mcgill.sel.core/model/CORE.ecore#/"/>
    <details key="ecore" value="http://www.eclipse.org/emf/2002/Ecore"/>
  </eAnnotations>
  <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
    <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
    <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
    <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="Aspect" eSuperTypes="#//NamedElement ../../ca.mcgill.sel.core/model/CORE.ecore#//COREModel">
    <eStructuralFeatures xsi:type="ecore:EReference" name="structuralView" lowerBound="1"
        eType="#//StructuralView" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="messageViews" ordered="false"
        upperBound="-1" eType="#//AbstractMessageView" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="instantiations" upperBound="-1"
        eType="#//Instantiation" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="layout" eType="#//Layout"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="stateViews" upperBound="-1"
        eType="#//StateView" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="wovenAspects" upperBound="-1"
        eType="#//WovenAspect" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MappableElement" abstract="true" eSuperTypes="#//NamedElement ../../ca.mcgill.sel.core/model/CORE.ecore#//COREModelElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="StructuralView">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="uniqueTypes noTwoClassesWithSameName"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="uniqueTypes" value="Tuple {&#xA;&#x9;message : String = 'There may be only one type of the same type',&#xA;&#x9;status : Boolean = self.types->isUnique(name)&#xA;}.status"/>
      <details key="noTwoClassesWithSameName" value="Tuple {&#xA;&#x9;message : String = 'Name of a class has to be unique',&#xA;&#x9;status : Boolean = self.classes->isUnique(name)&#xA;}.status"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="classes" upperBound="-1"
        eType="#//Classifier" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="associations" upperBound="-1"
        eType="#//Association" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="types" ordered="false"
        upperBound="-1" eType="#//Type" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Class" eSuperTypes="#//Classifier">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="notSelfSuperType"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="notSelfSuperType" value="Tuple {&#xA;&#x9;message : String = 'A class may not be it\'s own supertype',&#xA;&#x9;status : Boolean = not self.superTypes->includes(self)&#xA;}.status"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attributes" upperBound="-1"
        eType="#//Attribute" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="abstract" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AssociationEnd" eSuperTypes="#//Property">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="uniqueName"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="uniqueName" value="Tuple {&#xA;&#x9;message : String = 'AssociationEnds of a class must be unique',&#xA;&#x9;status : Boolean = self.classifier.associationEnds->select(associationEnd : AssociationEnd | associationEnd.name &lt;> null and associationEnd.name &lt;> '')->isUnique(name)&#xA;}.status"/>
    </eAnnotations>
    <eOperations name="getType" lowerBound="1" eType="#//Type">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="self.getOppositeEnd().classifier"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getOppositeEnd" lowerBound="1" eType="#//AssociationEnd">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="self.assoc.ends->select(end : AssociationEnd | end &lt;> self)->at(1)"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="navigable" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="assoc" lowerBound="1" eType="#//Association"
        eOpposite="#//Association/ends"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="classifier" lowerBound="1"
        eType="#//Classifier" eOpposite="#//Classifier/associationEnds"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="featureSelection" eType="ecore:EClass ../../ca.mcgill.sel.core/model/CORE.ecore#//COREModelReuse"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Association" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="ends" lowerBound="2" upperBound="2"
        eType="#//AssociationEnd" eOpposite="#//AssociationEnd/assoc"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true" eSuperTypes="../../ca.mcgill.sel.core/model/CORE.ecore#//CORENamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="validName"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="validName" value="Tuple {&#xA;&#x9;message : String = 'Name of RAM elements may not be empty',&#xA;&#x9;status : Boolean = if self.oclIsTypeOf(AssociationEnd) and self.oclAsType(AssociationEnd).navigable = false then true else self.name &lt;> '' endif&#xA;}.status"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Instantiation">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="aspectCannotMapSelf"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="aspectCannotMapSelf" value="Tuple {&#xA;&#x9;message : String = 'Aspect may not depend on itself',&#xA;&#x9;status : Boolean = not (self.source = self.Aspect)&#xA;}.status"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" lowerBound="1" eType="#//InstantiationType"
        changeable="false" defaultValueLiteral="Depends" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="derivation" value="if (self.oclContainer().oclIsTypeOf(ram::Aspect)) then InstantiationType::Extends else InstantiationType::Depends endif"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eGenericSuperTypes eClassifier="ecore:EClass ../../ca.mcgill.sel.core/model/CORE.ecore#//COREBinding">
      <eTypeArguments eClassifier="#//Aspect"/>
      <eTypeArguments eClassifier="#//ClassifierMapping"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Operation" eSuperTypes="#//NamedElement #//MappableElement #//Traceable">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="messageViewDefined correctVisibility"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="messageViewDefined" value="Tuple {&#xA;&#x9;message : String = 'MessageView missing for public operation',&#xA;&#x9;status : Boolean = if extendedVisibility = RAMVisibilityType::public and self.Classifier.oclIsTypeOf(Class) and self.partiality = core::COREPartialityType::none then self.Classifier.oclContainer().oclAsType(StructuralView).Aspect.messageViews->select(messageView : AbstractMessageView | messageView.oclIsTypeOf(MessageView))->one(messageView : AbstractMessageView | messageView.oclAsType(MessageView).specifies = self) else true endif&#xA;}.status"/>
      <details key="correctVisibility" value="Tuple {&#xA;&#x9;message : String = 'COREVisibility and RAMVisibility attributes are not in sync',&#xA;&#x9;status : Boolean = if visibility = core::COREVisibilityType::public then extendedVisibility = RAMVisibilityType::public else extendedVisibility &lt;> RAMVisibilityType::public endif&#xA;}.status"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="abstract" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="false"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="extendedVisibility" eType="#//RAMVisibilityType"
        defaultValueLiteral="public"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="returnType" lowerBound="1"
        eType="#//Type"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" upperBound="-1"
        eType="#//Parameter" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="static" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="false"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="operationType" lowerBound="1"
        eType="#//OperationType" defaultValueLiteral="Normal"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Attribute" eSuperTypes="#//StructuralFeature #//TemporaryProperty #//MappableElement #//Traceable">
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="#//PrimitiveType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Type" abstract="true" eSuperTypes="#//NamedElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Parameter" eSuperTypes="#//TypedElement #//MappableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="notVoid"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="notVoid" value="Tuple {&#xA;&#x9;message : String = 'The type of the parameter may not be void',&#xA;&#x9;status : Boolean = not self.type.oclIsTypeOf(RVoid)&#xA;}.status"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="#//Type"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="RAMVisibilityType">
    <eLiterals name="public" value="1"/>
    <eLiterals name="protected" value="2"/>
    <eLiterals name="private" value="3"/>
    <eLiterals name="package" value="4"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" abstract="true" eSuperTypes="#//ObjectType #//ImplementationClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="ObjectType" abstract="true" eSuperTypes="#//Type #//MappableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="RVoid" eSuperTypes="#//Type">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'void'"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RBoolean" eSuperTypes="#//PrimitiveType">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'boolean'"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getInstanceClassName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'java.lang.Boolean'"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="ReferenceType">
    <eLiterals name="Composition"/>
    <eLiterals name="Aggregation" value="1"/>
    <eLiterals name="Regular" value="2"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RInt" eSuperTypes="#//PrimitiveType">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'int'"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getInstanceClassName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'java.lang.Integer'"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RChar" eSuperTypes="#//PrimitiveType">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'char'"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getInstanceClassName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'java.lang.Character'"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RString" eSuperTypes="#//PrimitiveType">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'String'"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getInstanceClassName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'java.lang.String'"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RAny" eSuperTypes="#//Type">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'*'"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="REnum" eSuperTypes="#//PrimitiveType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="literals" lowerBound="1"
        upperBound="-1" eType="#//REnumLiteral" containment="true" eOpposite="#//REnumLiteral/enum"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="REnumLiteral" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="enum" lowerBound="1" eType="#//REnum"
        eOpposite="#//REnum/literals"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AbstractMessageView" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EReference" name="affectedBy" upperBound="-1"
        eType="#//AspectMessageView"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MessageView" eSuperTypes="#//AbstractMessageView">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="specifiesIsFirstMessage specificationDefined isAffectedBy"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="specifiesIsFirstMessage" value="Tuple {&#xA;&#x9;message : String = 'The first message in the MessageView must match specifies of the MessageView',&#xA;&#x9;status : Boolean = if not self.specification.oclIsUndefined() and self.specification.messages->size() > 0 then self.specifies = self.specification.messages->select(message : Message | not message.sendEvent.oclIsTypeOf(MessageOccurrenceSpecification))->asOrderedSet()->at(1).signature else true endif&#xA;}.status"/>
      <details key="specificationDefined" value="Tuple {&#xA;&#x9;message : String = 'A MessageView for a non-partial operation must have a specification',&#xA;&#x9;status : Boolean = if not self.specifies.oclIsUndefined() then if self.specifies.partiality = core::COREPartialityType::none then not self.specification.oclIsUndefined() else true endif else true endif&#xA;}.status"/>
      <details key="isAffectedBy" value="Tuple {&#xA;&#x9;message : String = 'An empty MessageView must have at least one affectedBy',&#xA;&#x9;status : Boolean = if self.specification.oclIsUndefined() and self.specifies.partiality &lt;> core::COREPartialityType::none then self.affectedBy->notEmpty() else true endif&#xA;}.status"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="specifies" lowerBound="1"
        eType="#//Operation"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="specification" eType="#//Interaction"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MessageViewReference" eSuperTypes="#//AbstractMessageView">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="isAffectedBy"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="isAffectedBy" value="Tuple {&#xA;&#x9;message : String = 'The MessageViewReference must have at least one affectedBy',&#xA;&#x9;status : Boolean = self.affectedBy->size() > 0&#xA;}.status"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="references" lowerBound="1"
        eType="#//MessageView"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Interaction" eSuperTypes="#//FragmentContainer">
    <eStructuralFeatures xsi:type="ecore:EReference" name="lifelines" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//Lifeline" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="messages" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//Message" containment="true" eOpposite="#//Message/interaction"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="properties" upperBound="-1"
        eType="#//Reference" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="formalGates" upperBound="-1"
        eType="#//Gate" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AspectMessageView" eSuperTypes="#//AbstractMessageView #//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="notAffectedBySelf"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="notAffectedBySelf" value="Tuple {&#xA;&#x9;message : String = 'Message View may not be affected by itself',&#xA;&#x9;status : Boolean = not self.affectedBy->includes(self)&#xA;}.status"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="pointcut" lowerBound="1"
        eType="#//Operation"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="advice" lowerBound="1"
        eType="#//Interaction" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Lifeline">
    <eStructuralFeatures xsi:type="ecore:EReference" name="represents" lowerBound="1"
        eType="#//TypedElement"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="coveredBy" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//InteractionFragment" eOpposite="#//InteractionFragment/covered"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Message">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="validSelfMessage argumentsSpecified createMessageIsFirst returnsSpecified boundariesNotCrossed validReturns deleteMessageIsLast assignToAllowed noCrossingMessages"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="validSelfMessage" value="Tuple {&#xA;&#x9;message : String = 'receiveEvent of a self message may not come before the sendEvent',&#xA;&#x9;status : Boolean = if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then let sendEvent : InteractionFragment = self.sendEvent.oclAsType(InteractionFragment) in let receiveEvent : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in if sendEvent.covered->asOrderedSet()->at(1) = receiveEvent.covered->asOrderedSet()->at(1) then sendEvent.container.fragments->indexOf(self.sendEvent) &lt; receiveEvent.container.fragments->indexOf(self.receiveEvent) else true endif else true endif&#xA;}.status"/>
      <details key="argumentsSpecified" value="Tuple {&#xA;&#x9;message : String = 'All arguments of the operation must be specified',&#xA;&#x9;status : Boolean = if self.messageSort &lt;> MessageSort::reply and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.signature.oclIsUndefined() then let container : FragmentContainer = self.sendEvent.oclAsType(MessageOccurrenceSpecification).container in if container.fragments->includes(self.sendEvent) then self.signature.parameters->size() = self.arguments->size() and self.signature.parameters->forAll(currentParameter : Parameter | self.arguments->one(argument : ParameterValueMapping | argument.parameter = currentParameter)) else true endif else true endif&#xA;}.status"/>
      <details key="createMessageIsFirst" value="Tuple {&#xA;&#x9;message : String = 'The create message occurrence may not come after any other occurrence on this lifeline',&#xA;&#x9;status : Boolean = if self.messageSort = MessageSort::createMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) >= event.container.fragments->indexOf(event) else true endif) else true endif else true endif&#xA;}.status"/>
      <details key="returnsSpecified" value="Tuple {&#xA;&#x9;message : String = 'Reply message must have returns specified if return type is not void',&#xA;&#x9;status : Boolean = if self.messageSort = MessageSort::reply then if not self.signature.returnType.oclIsTypeOf(RVoid) and self.signature.operationType = OperationType::Normal then not self.returns.oclIsUndefined() else self.returns.oclIsUndefined() endif else true endif&#xA;}.status"/>
      <details key="boundariesNotCrossed" value="Tuple {&#xA;&#x9;message : String = 'Messages may not cross boundaries of CombinedFragments or their operands',&#xA;&#x9;status : Boolean = let send : MessageOccurrenceSpecification = self.sendEvent in let receive : MessageOccurrenceSpecification = self.receiveEvent in if send.container.oclIsTypeOf(InteractionOperand) and receive.container.oclIsTypeOf(InteractionOperand) then send.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(send.covered->asOrderedSet()->at(1)) and receive.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(receive.covered->asOrderedSet()->at(1)) else true endif&#xA;}.status"/>
      <details key="validReturns" value="Tuple {&#xA;&#x9;message : String = 'Returns may only be specified if message sort is reply message',&#xA;&#x9;status : Boolean = if not self.returns.oclIsUndefined() then self.messageSort = MessageSort::reply else true endif&#xA;}.status"/>
      <details key="deleteMessageIsLast" value="Tuple {&#xA;&#x9;message : String = 'The destruction occurrence may not come before any other occurrence on this lifeline',&#xA;&#x9;status : Boolean = if self.messageSort = MessageSort::deleteMessage then if not self.receiveEvent.oclIsUndefined() and not self.receiveEvent.oclAsType(InteractionFragment).covered->isEmpty() then let event : InteractionFragment = self.receiveEvent.oclAsType(InteractionFragment) in event.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if event.container.fragments->includes(fragment) then event.container.fragments->indexOf(fragment) &lt;= event.container.fragments->indexOf(event) else true endif) else true endif else true endif&#xA;}.status"/>
      <details key="assignToAllowed" value="Tuple {&#xA;&#x9;message : String = 'assignTo may not be specified for operations whose return type is void',&#xA;&#x9;status : Boolean = if self.signature.returnType.oclIsTypeOf(RVoid) then self.assignTo = null else true endif&#xA;}.status"/>
      <details key="noCrossingMessages" value="Tuple {&#xA;&#x9;message : String = 'Messages may not cross each other, MessageEnds of one message must come one after the other (also, send must come before receive)',&#xA;&#x9;status : Boolean = if not self.receiveEvent.oclIsUndefined() and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) and not self.sendEvent.oclIsUndefined() and self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) then let container : FragmentContainer = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).container in let indexDifference : Integer = container.fragments->indexOf(self.receiveEvent) - container.fragments->indexOf(self.sendEvent) in indexDifference = 1 else true endif&#xA;}.status"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sendEvent" lowerBound="1"
        eType="#//MessageEnd"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="receiveEvent" lowerBound="1"
        eType="#//MessageEnd"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="signature" lowerBound="1"
        eType="#//Operation"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="assignTo" eType="#//StructuralFeature"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="messageSort" lowerBound="1"
        eType="#//MessageSort"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="arguments" upperBound="-1"
        eType="#//ParameterValueMapping" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="interaction" lowerBound="1"
        eType="#//Interaction" eOpposite="#//Interaction/messages"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="returns" eType="#//ValueSpecification"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="selfMessage" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean" changeable="false"
        volatile="true" transient="true" defaultValueLiteral="false" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="derivation" value="if self.sendEvent.oclIsKindOf(MessageOccurrenceSpecification) and self.receiveEvent.oclIsKindOf(MessageOccurrenceSpecification) then self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) else false endif"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="localProperties" ordered="false"
        upperBound="-1" eType="#//TemporaryProperty" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="MessageSort">
    <eLiterals name="synchCall"/>
    <eLiterals name="createMessage" value="1"/>
    <eLiterals name="deleteMessage" value="2"/>
    <eLiterals name="reply" value="3"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MessageEnd" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EReference" name="message" lowerBound="1"
        eType="#//Message"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MessageOccurrenceSpecification" eSuperTypes="#//OccurrenceSpecification #//MessageEnd"/>
  <eClassifiers xsi:type="ecore:EClass" name="OccurrenceSpecification" eSuperTypes="#//InteractionFragment"/>
  <eClassifiers xsi:type="ecore:EClass" name="DestructionOccurrenceSpecification"
      eSuperTypes="#//MessageOccurrenceSpecification"/>
  <eClassifiers xsi:type="ecore:EClass" name="InteractionFragment" abstract="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="validCoveredMultiplicity"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="validCoveredMultiplicity" value="Tuple {&#xA;&#x9;message : String = 'InteractionFragment may only have one Lifeline it covers (except CombinedFragment)',&#xA;&#x9;status : Boolean = if not self.oclIsTypeOf(CombinedFragment) and covered->notEmpty() then covered->size() = 1 else true endif&#xA;}.status"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="covered" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//Lifeline" eOpposite="#//Lifeline/coveredBy"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="container" lowerBound="1"
        eType="#//FragmentContainer" eOpposite="#//FragmentContainer/fragments"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="InteractionOperatorKind">
    <eLiterals name="alt"/>
    <eLiterals name="opt" value="1"/>
    <eLiterals name="loop" value="2"/>
    <eLiterals name="disruptable" value="3"/>
    <eLiterals name="critical" value="4"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CombinedFragment" eSuperTypes="#//InteractionFragment">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="validOperands"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="validOperands" value="Tuple {&#xA;&#x9;message : String = 'opt and loop fragments may only have one operand',&#xA;&#x9;status : Boolean = if self.interactionOperator = InteractionOperatorKind::opt or self.interactionOperator = InteractionOperatorKind::loop or self.interactionOperator = InteractionOperatorKind::critical then self.operands->size() = 1 else true endif&#xA;}.status"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="interactionOperator" lowerBound="1"
        eType="#//InteractionOperatorKind"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="operands" lowerBound="1"
        upperBound="-1" eType="#//InteractionOperand" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OriginalBehaviorExecution" eSuperTypes="#//InteractionFragment"/>
  <eClassifiers xsi:type="ecore:EClass" name="ExecutionStatement" eSuperTypes="#//InteractionFragment">
    <eStructuralFeatures xsi:type="ecore:EReference" name="specification" lowerBound="1"
        eType="#//ValueSpecification" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InteractionOperand" eSuperTypes="#//FragmentContainer">
    <eStructuralFeatures xsi:type="ecore:EReference" name="interactionConstraint"
        eType="#//ValueSpecification" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ValueSpecification" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="StructuralFeatureValue" eSuperTypes="#//ValueSpecification">
    <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1" eType="#//StructuralFeature"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ParameterValueMapping">
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" lowerBound="1"
        eType="#//Parameter"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1" eType="#//ValueSpecification"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ParameterValue" eSuperTypes="#//ValueSpecification">
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" lowerBound="1"
        eType="#//Parameter"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OpaqueExpression" eSuperTypes="#//ValueSpecification">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="body" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="language" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralSpecification" abstract="true"
      eSuperTypes="#//ValueSpecification"/>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralString" eSuperTypes="#//LiteralSpecification">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralInteger" eSuperTypes="#//LiteralSpecification">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FragmentContainer" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EReference" name="fragments" lowerBound="1"
        upperBound="-1" eType="#//InteractionFragment" containment="true" eOpposite="#//InteractionFragment/container"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RCollection" abstract="true" eSuperTypes="#//Type #//ImplementationClass">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="let partial : String = if type.oclIsTypeOf(Class) or type.oclIsTypeOf(Operation) and type.oclAsType(core::COREModelElement).partiality = core::COREPartialityType::public then '|' else if type.oclIsTypeOf(Class) or type.oclIsTypeOf(Operation) and type.oclAsType(core::COREModelElement).partiality = core::COREPartialityType::concern then '\u00A6' else '' endif endif in let typeName : String = self.oclType().toString() in let name : String = typeName.substring(typeName.lastIndexOf(':') + 2, typeName.size()) in if type.name.oclIsUndefined() then name else name + '&lt;' + partial + type.name + '>' endif"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="#//ObjectType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RSet" eSuperTypes="#//RCollection"/>
  <eClassifiers xsi:type="ecore:EClass" name="RSequence" eSuperTypes="#//RCollection"/>
  <eClassifiers xsi:type="ecore:EClass" name="Layout">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containers" lowerBound="1"
        upperBound="-1" eType="#//ContainerMap" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ContainerMap" instanceClassName="java.util.Map$Entry">
    <eStructuralFeatures xsi:type="ecore:EReference" name="key" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EObject"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1" upperBound="-1"
        eType="#//ElementMap" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ElementMap" instanceClassName="java.util.Map$Entry">
    <eStructuralFeatures xsi:type="ecore:EReference" name="key" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EObject"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1" eType="#//LayoutElement"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LayoutElement">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="x" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EFloat"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="y" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EFloat"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="InstantiationType">
    <eLiterals name="Depends"/>
    <eLiterals name="Extends" value="1"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Classifier" abstract="true" eSuperTypes="#//ObjectType #//Traceable">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operations" upperBound="-1"
        eType="#//Operation" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="associationEnds" upperBound="-1"
        eType="#//AssociationEnd" containment="true" eOpposite="#//AssociationEnd/classifier"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="typeParameters" upperBound="-1"
        eType="#//TypeParameter" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="superTypes" upperBound="-1"
        eType="#//Classifier"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ImplementationClass" eSuperTypes="#//Classifier">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="instanceClassName" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="interface" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TemporaryProperty" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="StructuralFeature" abstract="true" eSuperTypes="#//TypedElement">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="static" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean" defaultValueLiteral="false"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Reference" eSuperTypes="#//Property #//TemporaryProperty">
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="#//ObjectType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Property" abstract="true" eSuperTypes="#//StructuralFeature">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="validUpperBound validLowerBound validMultiplicity"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="validUpperBound" value="Tuple {&#xA;&#x9;message : String = 'The upperbound must be greater than zero or -1 representing *',&#xA;&#x9;status : Boolean = self.upperBound > 0 or self.upperBound = -1&#xA;}.status"/>
      <details key="validLowerBound" value="Tuple {&#xA;&#x9;message : String = 'The lowerbound must be greater than or equal to zero',&#xA;&#x9;status : Boolean = self.lowerBound >= 0&#xA;}.status"/>
      <details key="validMultiplicity" value="Tuple {&#xA;&#x9;message : String = 'The lowerBound must be less than or equal to the upperBound',&#xA;&#x9;status : Boolean = self.lowerBound &lt;= self.upperBound or self.upperBound = -1&#xA;}.status"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="lowerBound" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"
        defaultValueLiteral="0"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="upperBound" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"
        defaultValueLiteral="1"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="referenceType" eType="#//ReferenceType"
        defaultValueLiteral="Regular"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TypedElement" abstract="true" eSuperTypes="#//NamedElement">
    <eOperations name="getType" lowerBound="1" eType="#//Type"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Gate" eSuperTypes="#//MessageEnd #//NamedElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralBoolean" eSuperTypes="#//LiteralSpecification">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ClassifierMapping">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operationMappings" upperBound="-1"
        eType="#//OperationMapping" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attributeMappings" upperBound="-1"
        eType="#//AttributeMapping" containment="true"/>
    <eGenericSuperTypes eClassifier="ecore:EClass ../../ca.mcgill.sel.core/model/CORE.ecore#//COREMapping">
      <eTypeArguments eClassifier="#//Classifier"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AttributeMapping">
    <eGenericSuperTypes eClassifier="ecore:EClass ../../ca.mcgill.sel.core/model/CORE.ecore#//COREMapping">
      <eTypeArguments eClassifier="#//Attribute"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OperationMapping">
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameterMappings" upperBound="-1"
        eType="#//ParameterMapping" containment="true"/>
    <eGenericSuperTypes eClassifier="ecore:EClass ../../ca.mcgill.sel.core/model/CORE.ecore#//COREMapping">
      <eTypeArguments eClassifier="#//Operation"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ParameterMapping">
    <eGenericSuperTypes eClassifier="ecore:EClass ../../ca.mcgill.sel.core/model/CORE.ecore#//COREMapping">
      <eTypeArguments eClassifier="#//Parameter"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StateView" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="stateMachines" lowerBound="1"
        upperBound="-1" eType="#//StateMachine" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="specifies" lowerBound="1"
        eType="#//Classifier"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StateMachine">
    <eStructuralFeatures xsi:type="ecore:EReference" name="start" lowerBound="1" eType="#//State"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="states" upperBound="-1"
        eType="#//State" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="transitions" upperBound="-1"
        eType="#//Transition" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="substitutions" upperBound="-1"
        eType="#//Substitution" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Transition" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="endState" lowerBound="1"
        eType="#//State" eOpposite="#//State/incomings"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="startState" lowerBound="1"
        eType="#//State" eOpposite="#//State/outgoings"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="signature" eType="#//Operation"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="guard" eType="#//Constraint"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="State" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="incomings" upperBound="-1"
        eType="#//Transition" eOpposite="#//Transition/endState"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="outgoings" upperBound="-1"
        eType="#//Transition" eOpposite="#//Transition/startState"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RDouble" eSuperTypes="#//PrimitiveType">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'double'"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getInstanceClassName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'java.lang.Double'"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RFloat" eSuperTypes="#//PrimitiveType">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'float'"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getInstanceClassName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'java.lang.Float'"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Constraint">
    <eStructuralFeatures xsi:type="ecore:EReference" name="Specification" lowerBound="1"
        eType="#//ValueSpecification" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Substitution"/>
  <eClassifiers xsi:type="ecore:EClass" name="TransitionSubstitution" eSuperTypes="#//Substitution">
    <eStructuralFeatures xsi:type="ecore:EReference" name="from" lowerBound="1" eType="#//Transition"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="to" lowerBound="1" upperBound="-1"
        eType="#//Transition"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TypeParameter" eSuperTypes="#//Type">
    <eStructuralFeatures xsi:type="ecore:EReference" name="genericType" eType="#//ObjectType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RLong" eSuperTypes="#//PrimitiveType">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'long'"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getInstanceClassName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'java.lang.Long'"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RArray" eSuperTypes="#//PrimitiveType">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="if (self.type &lt;> null and self.type.name &lt;> null) then self.type.name + '[' + if (self.size >= 0) then self.size.toString() else '' endif + ']' else null endif"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getInstanceClassName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'java.lang.reflect.Array'"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="size" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"
        defaultValueLiteral="-1"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="#//ObjectType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="OperationType">
    <eLiterals name="Normal"/>
    <eLiterals name="Constructor" value="1"/>
    <eLiterals name="Destructor" value="2"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Traceable" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="WovenAspect" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="comesFrom" lowerBound="1"
        eType="#//Aspect"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="wovenElements" upperBound="-1"
        eType="#//Traceable"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="children" upperBound="-1"
        eType="#//WovenAspect" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralNull" eSuperTypes="#//LiteralSpecification"/>
  <eClassifiers xsi:type="ecore:EClass" name="EnumLiteralValue" eSuperTypes="#//ValueSpecification">
    <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1" eType="#//REnumLiteral"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AssignmentStatement" eSuperTypes="#//InteractionFragment">
    <eStructuralFeatures xsi:type="ecore:EReference" name="assignTo" lowerBound="1"
        eType="#//StructuralFeature"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1" eType="#//ValueSpecification"
        containment="true"/>
  </eClassifiers>
</ecore:EPackage>
