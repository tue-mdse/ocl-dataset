[comment encoding = UTF-8 /]
[module toLTL('http://simplepdl')]

[template public toLTL(aProcess : Process)]
[comment @main/]
[file (aProcess.name.concat('.scn'), false, 'UTF-8')]
op finished = [places(getWDs(aProcess.processElements))/];
['[]'/] (finished => dead);
['[]'/] <> dead;
['[]'/] (dead => finished);
- <> finished;
[oneToken(getWDs(aProcess.processElements))/]
[notStartedToken(getWDs(aProcess.processElements))/]
[startedToken(getWDs(aProcess.processElements))/]
[/file]
[/template]

[query public getWDs(elements : OrderedSet(ProcessElement)) : OrderedSet(WorkDefinition) = 
	elements->select( e | e.oclIsTypeOf(WorkDefinition) )
		->collect( e | e.oclAsType(WorkDefinition) )
		->asOrderedSet()
/]

[template private places(wds: OrderedSet(WorkDefinition))]
[for (wd : WorkDefinition | wds) separator(' /\\ ')][wd.name/]_ready /\ [wd.name/]_running /\ [wd.name/]_started /\ [wd.name/]_finished[/for]
[/template]

[template private oneToken(wds: OrderedSet(WorkDefinition))]
[for (wd : WorkDefinition | wds)]['[]'/] [wd.name/]_ready + [wd.name/]_running + [wd.name/]_finished = 1;
[/for]
[/template]

[template private startedToken(wds: OrderedSet(WorkDefinition))]
[for (wd : WorkDefinition | wds)]['[]'/] [wd.name/]_ready = 0 => [wd.name/]_running + [wd.name/]_started + [wd.name/]_finished = 2;
[/for]
[/template]

[template private notStartedToken(wds: OrderedSet(WorkDefinition))]
[for (wd : WorkDefinition | wds)]['[]'/] [wd.name/]_ready = 1 => [wd.name/]_running + [wd.name/]_started + [wd.name/]_finished = 0;
[/for]
[/template]