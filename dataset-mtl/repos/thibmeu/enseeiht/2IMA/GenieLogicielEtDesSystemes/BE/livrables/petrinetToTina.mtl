[comment encoding = UTF-8 /]
[module toTina('http://petrinet')]


[template public toTina(aPetriNet : PetriNet)]
[comment @main/]
[file (aPetriNet.name.concat('.net'), false, 'UTF-8')]
net [aPetriNet.name/]
[for (pl : Place | aPetriNet.node->getPLs())]
pl [pl.name/] ([pl.nbJetons/])
[/for]
[for (tr : Transition | aPetriNet.node->getTRs())]
tr [tr.name/] [transitionIncidents(tr, aPetriNet.arc)/]->[transitionSortants(tr, aPetriNet.arc)/]
[/for]
[/file]
[/template]
	
[template private transitionIncidents(tr: Transition, arcs: OrderedSet(Arc))]
[for (arc : Arc | getArcsIncidents(tr, arcs))][arc.source.name/][if arc.readArc]?[arc.poids/][else][if arc.poids > 1]*[arc.poids/][/if][/if] [/for]
[/template]

[template private transitionSortants(tr: Transition, arcs: OrderedSet(Arc))]
[for (arc : Arc | getArcsSortants(tr, arcs))] [arc.target.name/][if arc.poids > 1]*[arc.poids/][/if][/for]
[/template]

[query public getPLs(elements : OrderedSet(Node)) : OrderedSet(Place) = 
	elements->select( e | e.oclIsTypeOf(Place) )
		->collect( e | e.oclAsType(Place) )
		->asOrderedSet()
/]

[query public getTRs(elements : OrderedSet(Node)) : OrderedSet(Transition) = 
	elements->select( e | e.oclIsTypeOf(Transition) )
		->collect( e | e.oclAsType(Transition) )
		->asOrderedSet()
/]

[query public getArcsIncidents(tr: Transition, arcs: OrderedSet(Arc)) : OrderedSet(Arc) = 
	arcs->select( e | e.oclAsType(Arc).target = tr)

/]

[query public getArcsSortants(tr: Transition, arcs: OrderedSet(Arc)) : OrderedSet(Arc) = 
	arcs->select( e | e.oclAsType(Arc).source = tr)
/]