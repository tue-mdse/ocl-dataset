[comment encoding = UTF-8 /]
[module toJava('http://www.enseeiht.fr/gls/Game')]


[template public toJava(jeu : Jeu)]
[comment @main/]
[file (jeu.name.concat('.java'), false, 'UTF-8')]
import modele.*;
import afficheurs.*;
import controleurs.*;

public class [jeu.name.toUpperFirst()/] {

	/**
	  * AUTOGENERATED CLASS
	  * Do not modify the code
	  * Please use toJava.mtl inside an Acceleo Project
	  */

	public static void main(String['[]'/] args) {
		/**
		 * Init all elements
		 */
		[jeu.initJeu()/]
		[jeu.composants->initComposants()/]
		[jeu.initDependencies()/]
		
		/**
		 * Fill all elements
		 */
		[jeu.fillJeu()/]
		[jeu.fillDependencies()/]
		[jeu.fillComposants()/]

		/**
		 * Launch the game
		 */
		Controleur controleur = new ControleurTexte(new AfficheurTexte(), [jeu.name.toLowerFirst()/]);
		controleur.jouer();
	}

}
[/file]
[/template]

[template private initJeu(jeu : Jeu)]
// Init Jeu
[jeu.eClass().name/] [jeu.name.toLowerFirst()/] = new [jeu.eClass().name/]("[jeu.name/]");
[/template]

[template private initComposants(composants : OrderedSet(Composant))]
// Init Composants
[for (c : Composant | composants)]
[c.eClass().name/] [c.name.toLowerFirst()/] = new [c.eClass().name/]("[c.name/]");
[/for]
[/template]

[template private initDependencies(jeu : Jeu)]
// Init Dependencies
[jeu.getObjets()->initObjets()/]
[jeu.getPossessions()->initPossessions()/]
[jeu.getPossessionsConditionnees()->initPossessionsConditionnees()/]
[jeu.getTransformations()->initTransformations()/]
[jeu.getChoixConditionnes()->initChoixConditionnes()/]
[jeu.getActionsConditionnees()->initActionsConditionnees()/]
[jeu.getComparaisons()->initComparaisons()/]
[/template]

[template private initObjets(objets : OrderedSet(Objet))]
// Init Objets
[for (o : Objet | objets)]
[o.eClass().name/] [o.name().toLowerFirst()/] = new [o.eClass().name/]();
[/for]
[/template]

[template private initPossessions(possessions : OrderedSet(Possession))]
// Init Possessions
[for (p : Possession | possessions)]
[p.eClass().name/] [p.name().toLowerFirst()/] = [if p.connaissance <> null][p.connaissance.name.toLowerFirst()/][else][p.oclAsType(Objet).name().toLowerFirst()/][/if];
[/for]
[/template]


[template private initPossessionsConditionnees(possessionsConditionnees : OrderedSet(PossessionConditionnee))]
// Init PossessionsConditionnees
[for (pc : PossessionConditionnee | possessionsConditionnees)]
[pc.eClass().name/] [pc.name().toLowerFirst()/] = new [pc.eClass().name/]();
[/for]
[/template]

[template private initTransformations(transformations : OrderedSet(Transformation))]
// Init Transformations
[for (t : Transformation | transformations)]
[t.eClass().name/] [t.name().toLowerFirst()/] = new [t.eClass().name/]();
[/for]
[/template]

[template private initChoixConditionnes(choixConditionnes : OrderedSet(ChoixConditionne))]
// Init ChoixConditionnes
[for (cc : ChoixConditionne | choixConditionnes)]
[cc.eClass().name/] [cc.name().toLowerFirst()/] = new [cc.eClass().name/]();
[/for]
[/template]

[template private initActionsConditionnees(actionsConditionnees : OrderedSet(ActionConditionnee))]
// Init ActionsConditionnees
[for (ac : ActionConditionnee | actionsConditionnees)]
[ac.eClass().name/] [ac.name().toLowerFirst()/] = new [ac.eClass().name/]();
[/for]
[/template]

[template private initComparaisons(comparaisons : OrderedSet(Comparaison))]
// Init Comparaisons
[for (c : Comparaison | comparaisons)]
[c.eClass().name/] [c.name().toLowerFirst()/] = new [c.eClass().name/]();
[/for]
[/template]

[template private fillJeu(jeu : Jeu)]
// Fill Jeu
[let name : String = jeu.name.toLowerFirst()]
[name/].setTerritoire([jeu.territoire.name.toLowerFirst()/]);
[name/].setExplorateur([jeu.explorateur.name.toLowerFirst()/]);
[name/].setDifficulte(Difficulte.[jeu.difficulte/]);
[/let]
[/template]

[template private fillComposants(jeu : Jeu)]
// Fill Composants
[jeu.getTerritoires()->fillTerritoires()/]
[jeu.getLieux()->fillLieux()/]
[jeu.getChemins()->fillChemins()/]
[jeu.getPersonnes()->fillPersonnes()/]
[jeu.getExplorateurs()->fillExplorateurs()/]
[jeu.getConnaissances()->fillConnaissances()/]
[jeu.getObjetsElementaires()->fillObjetsElementaires()/]
[jeu.getConditions()->fillConditions()/]
[jeu.getChoix()->fillChoix()/]
[jeu.getActions()->fillActions()/]
[/template]

[template private fillTerritoires(territoires : OrderedSet(Territoire))]
// Fill Territoires
[for (t : Territoire | territoires)]
[let name : String = t.name.toLowerFirst()]
[for (ct : ComposantTerritoire | t.composants)]
[name/].addComposants([ct.name.toLowerFirst()/]);
[/for]
[/let][/for]
[/template]

[template private fillLieux(lieux : OrderedSet(Lieu))]
// Fill Lieux
[for (l : Lieu | lieux)]
[let name : String = l.name.toLowerFirst()]
[for (pc : PossessionConditionnee | l.possessions)]
[name/].addPossessionConditionnee([pc.name().toLowerFirst()/]);
[/for][for (p : Personne | l.personnes)]
[name/].addPersonnes([p.name.toLowerFirst()/]);
[/for][name/].setPosition(Emplacement.[l.position/]);
[for (c : Condition | l.conditions)]
[name/].addCondition([c.name.toLowerFirst()/]);
[/for][for (dc : DescriptionConditionnee | l.descriptions)]
[name/].addDescription([dc.name().toLowerFirst()/]);
[/for]
[/let][/for]
[/template]

[template private fillChemins(chemins : OrderedSet(Chemin))]
// Fill Chemins
[for (c : Chemin | chemins)]
[let name : String = c.name.toLowerFirst()]
[name/].setDepart([c.depart.name.toLowerFirst()/]);
[name/].setFin([c.fin.name.toLowerFirst()/]);
[name/].setOuverture(Ouverture.[c.ouverture/]);
[for (c : Condition | c.conditionsOuverture)]
[name/].addConditionOuverture([c.name.toLowerFirst()/]);
[/for][name/].setObligation(Obligation.[c.obligation/]);
[name/].setVisibilite(Visibilite.[c.visibilite/]);
[for (c : Condition | c.conditionsVisibilite)]
[name/].addConditionVisibilite([c.name.toLowerFirst()/]);
[/for][for (pc : PossessionConditionnee | c.possessions)]
[name/].addPossessionConditionnee([pc.name().toLowerFirst()/]);
[/for]
[/let][/for]
[/template]

[template private fillPersonnes(personnes : OrderedSet(Personne))]
// Fill Personnes
[for (p : Personne | personnes)]
[let name : String = p.name.toLowerFirst()]
[name/].setObligation(Obligation.[p.obligation/]);
[for (pc : PossessionConditionnee | p.possessions)]
[name/].addPossession([pc.name().toLowerFirst()/]);
[/for][for (c : Choix | p.choix)]
[name/].addChoix([c.name.toLowerFirst()/]);
[/for]
[/let][/for]
[/template]

[template private fillExplorateurs(explorateurs : OrderedSet(Explorateur))]
// Fill Explorateurs
[for (e : Explorateur | explorateurs)]
[let name : String = e.name.toLowerFirst()]
[for (pc : PossessionConditionnee | e.possessions)]
[name/].addPossessionConditionnee([pc.name().toLowerFirst()/]);
[/for][name/].setPoidsMax([e.poidsMax/]);
[/let][/for]
[/template]

[template private fillConnaissances(connaissances : OrderedSet(Connaissance))]
// Fill Connaissances
[for (c : Connaissance | connaissances)]
[let name : String = c.name.toLowerFirst()]
[name/].setVisibilite(Visibilite.[c.visibilite/]);
[for (cv : Condition | c.conditionsVisibilite)]
[name/].addConditionVisibilite([cv.name.toLowerFirst()/]);
[/for]
[/let][/for]
[/template]

[template private fillObjetsElementaires(objetsElementaires : OrderedSet(ObjetElementaire))]
// Fill ObjetsElementaires
[for (oe : ObjetElementaire | objetsElementaires)]
[let name : String = oe.name.toLowerFirst()]
[name/].setVisibilite(Visibilite.[oe.visibilite/]);
[for (c : Condition | oe.conditionsVisibilite)]
[name/].addConditionVisibilite([c.name.toLowerFirst()/]);
[/for][name/].setTransformabilite(Transformabilite.[oe.transformabilite/]);
[for (t : Transformation | oe.conditionsTransformabilite)]
[name/].addConditionTransformabilite([t.name().toLowerFirst()/]);
[/for]
[/let][/for]
[/template]

[template private fillConditions(conditions : OrderedSet(Condition))]
// Fill Conditions
[for (c : Condition | conditions)]
[let name : String = c.name.toLowerFirst()]
[for (co : Comparaison | c.possessions)]
[name/].addComparaison([co.name().toLowerFirst()/]);
[/for][for (co : Condition | c.conditions)]
[name/].addCondition([co.name.toLowerFirst()/]);
[/for][name/].setOperateur(Operateur.[c.operateur/]);
[for (d : Difficulte | c.difficulte)]
[name/].setDifficulte(Difficulte.[d/]);
[/for][if (c.probabilite <> 0)][name/].setProbabilite([c.probabilite/]);[/if]
[/let][/for]
[/template]

[template private fillChoix(choix : OrderedSet(Choix))]
// Fill Choix
[for (c : Choix | choix)]
[let name : String = c.name.toLowerFirst()]
[for (ac : ActionConditionnee | c.actions)]
[name/].addAction([ac.name().toLowerFirst()/]);
[/for][name/].setPosition(Emplacement.[c.position/]);
[for (co : Condition | c.conditions)]
[name/].addCondition([co.name.toLowerFirst()/]);
[/for]
[/let][/for]
[/template]

[template private fillActions(actions : OrderedSet(Action))]
// Fill Actions
[for (a : Action | actions)]
[let name : String = a.name.toLowerFirst()]
[for (pc : PossessionConditionnee | a.possessions)]
[name/].addPossessionConditionnee([pc.name().toLowerFirst()/]);
[/for][for (o : Objet | a.objetsConsommes)]
[name/].addObjetConsomme([o.name().toLowerFirst()/]);
[/for]
[/let][/for]
[/template]

[template private fillDependencies(jeu : Jeu)]
// Fill Dependencies
[jeu.getObjets()->collect(o | o.oclAsType(Objet))->asOrderedSet()->fillObjets()/]
[jeu.getPossessionsConditionnees()->fillPossessionsConditionnees()/]
[jeu.getTransformations()->fillTransformations()/]
[jeu.getChoixConditionnes()->fillChoixConditionnes()/]
[jeu.getActionsConditionnees()->fillActionsConditionnees()/]
[jeu.getComparaisons()->fillComparaisons()/]
[/template]

[template private fillObjets(objets : OrderedSet(Objet))]
// Fill Objets
[for (o : Objet | objets)]
[let name : String = o.name().toLowerFirst()]
[name/].setQuantite([o.quantite/]);
[name/].setObjet([o.objet.name.toLowerFirst()/]);
[/let][/for]
[/template]

[template private fillPossessionsConditionnees(possessionsConditionnees : OrderedSet(PossessionConditionnee))]
// Fill PossessionsConditionnees
[for (pc : PossessionConditionnee | possessionsConditionnees)]
[let name : String = pc.name().toLowerFirst()]
[name/].setPossession([pc.possession.name().toLowerFirst()/]);
[for (c : Condition | pc.conditions)]
[name/].addCondition([c.name.toLowerFirst()/]);
[/for]
[/let][/for]
[/template]

[template private fillTransformations(transformations : OrderedSet(Transformation))]
// Fill Transformations
[for (t : Transformation | transformations)]
[let name : String = t.name().toLowerFirst()]
[for (o : Objet | t.objets)]
[name/].addObjet([o.name().toLowerFirst()/]);
[/for][for (c : Condition | t.conditions)]
[name/].addCondition([c.name.toLowerFirst()/]);
[/for]
[/let][/for]
[/template]

[template private fillComparaisons(comparaisons : OrderedSet(Comparaison))]
// Fill Comparaisons
[for (c : Comparaison | comparaisons)]
[let name : String = c.name().toLowerFirst()]
[if (c.connaissance <> null)]
[name/].setConnaissance([c.connaissance.name.toLowerFirst()/]);
[else]
[name/].setComparateur(Comparateur.[c.comparateur/]);
[name/].setObjet([c.objet.name().toLowerFirst()/]);
[/if]
[/let][/for]
[/template]

[template private fillChoixConditionnes(choixConditionnes : OrderedSet(ChoixConditionne))]
// Fill ChoixConditionnes
[for (cc : ChoixConditionne | choixConditionnes)]
[let name : String = cc.name().toLowerFirst()]
[name/].setChoix([cc.choix.name.toLowerFirst()/]);
[for (c : Condition | cc.conditions)]
[name/].addCondition([c.name.toLowerFirst()/]);
[/for][for (d : Decision | cc.decisionsPrecedentes)]
[name/].addDecision([d.name.toLowerFirst()/]);
[/for]
[/let][/for]
[/template]

[template private fillActionsConditionnees(actionsConditionnees : OrderedSet(ActionConditionnee))]
// Fill ActionsConditionnees
[for (ac : ActionConditionnee | actionsConditionnees)]
[let name : String = ac.name().toLowerFirst()]
[name/].setAction([ac.action.name.toLowerFirst()/]);
[for (c : Condition | ac.conditions)]
[name/].addCondition([c.name.toLowerFirst()/]);
[/for][for (d : Decision | ac.decisionsPrecedentes)]
[name/].addDecision([d.name.toLowerFirst()/]);
[/for][for (cc : ChoixConditionne | ac.choixOfferts)]
[name/].addChoixOffert([cc.name().toLowerFirst()/]);
[/for]
[/let][/for]
[/template]

[query private getTerritoires(jeu : Jeu) : OrderedSet(Territoire) = 
    Territoire::allInstances()-> collect(t | t.name)
						 -> collect(name | Territoire::allInstances()->any(t | t.name = name))
						 -> asOrderedSet()
/]

[query private getLieux(jeu : Jeu) : OrderedSet(Lieu) = 
    Lieu::allInstances()-> collect(l | l.name)
						 -> collect(name | Lieu::allInstances()->any(l | l.name = name))
						 -> asOrderedSet()
/]

[query private getChemins(jeu : Jeu) : OrderedSet(Chemin) = 
    Chemin::allInstances()-> collect(c | c.name)
						 -> collect(name | Chemin::allInstances()->any(c | c.name = name))
						 -> asOrderedSet()
/]

[query private getPersonnes(jeu : Jeu) : OrderedSet(Personne) = 
    Personne::allInstances()-> collect(p | p.name)
						 -> collect(name | Personne::allInstances()->any(p | p.name = name))
						 -> asOrderedSet()
/]

[query private getExplorateurs(jeu : Jeu) : OrderedSet(Explorateur) = 
    Explorateur::allInstances()-> collect(e | e.name)
						 -> collect(name | Explorateur::allInstances()->any(e | e.name = name))
						 -> asOrderedSet()
/]

[query private getConnaissances(jeu : Jeu) : OrderedSet(Connaissance) = 
    Connaissance::allInstances()-> collect(c | c.name)
						 -> collect(name | Connaissance::allInstances()->any(c | c.name = name))
						 -> asOrderedSet()
/]

[query private getObjetsElementaires(jeu : Jeu) : OrderedSet(ObjetElementaire) = 
    ObjetElementaire::allInstances()-> collect(oe | oe.name)
						 -> collect(name | ObjetElementaire::allInstances()->any(oe | oe.name = name))
						 -> asOrderedSet()
/]

[query private getConditions(jeu : Jeu) : OrderedSet(Condition) = 
    Condition::allInstances()-> collect(c | c.name)
						 -> collect(name | Condition::allInstances()->any(c | c.name = name))
						 -> asOrderedSet()
/]

[query private getChoix(jeu : Jeu) : OrderedSet(Choix) = 
    Choix::allInstances()-> collect(c | c.name)
						 -> collect(name | Choix::allInstances()->any(c | c.name = name))
						 -> asOrderedSet()
/]

[query private getActions(jeu : Jeu) : OrderedSet(Action) = 
    Action::allInstances()-> collect(a | a.name)
						 -> collect(name | Action::allInstances()->any(a | a.name = name))
						 -> asOrderedSet()
/]

[query private getDescriptionsConditionnees(jeu : Jeu) : OrderedSet(DescriptionConditionnee) = 
    DescriptionConditionnee::allInstances()-> collect(dc | dc.name())
						 -> collect(name | DescriptionConditionnee::allInstances()->any(dc | dc.name() = name))
						 -> asOrderedSet()
/]

[query private getObjets(jeu : Jeu) : OrderedSet(Objet) = 
    Objet::allInstances()-> collect(o | o.name())
						 -> collect(name | Objet::allInstances()->any(o | o.name() = name))
						 -> asOrderedSet()
/]

[query private getPossessions(jeu : Jeu) : OrderedSet(Possession) = 
    Possession::allInstances()-> collect(p | p.name())
						 -> collect(name | Possession::allInstances()->any(p | p.name() = name))
						 -> asOrderedSet()
/]

[query private getPossessionsConditionnees(jeu : Jeu) : OrderedSet(PossessionConditionnee) = 
    PossessionConditionnee::allInstances()-> collect(pc | pc.name())
						 -> collect(name | PossessionConditionnee::allInstances()->any(pc | pc.name() = name))
						 -> asOrderedSet()
/]

[query private getTransformations(jeu : Jeu) : OrderedSet(Transformation) = 
    Transformation::allInstances()-> collect(t | t.name())
						 -> collect(name | Transformation::allInstances()->any(t | t.name() = name))
						 -> asOrderedSet()
/]

[query private getChoixConditionnes(jeu : Jeu) : OrderedSet(ChoixConditionne) = 
    ChoixConditionne::allInstances()-> collect(cc | cc.name())
						 -> collect(name | ChoixConditionne::allInstances()->any(cc | cc.name() = name))
						 -> asOrderedSet()
/]

[query private getActionsConditionnees(jeu : Jeu) : OrderedSet(ActionConditionnee) = 
    ActionConditionnee::allInstances()-> collect(ac | ac.name())
						 -> collect(name | ActionConditionnee::allInstances()->any(ac | ac.name() = name))
						 -> asOrderedSet()
/]

[query private getComparaisons(jeu : Jeu) : OrderedSet(Comparaison) = 
    Comparaison::allInstances()-> collect(c | c.name())
						 -> collect(name | Comparaison::allInstances()->any(c | c.name() = name))
						 -> asOrderedSet()
/]

[query private name(d : DescriptionConditionnee) : String = 
d.description.concat(d.conditions->name()).concat(d.eClass().name)
/]


[query private name(o : Objet) : String = 
    o.objet.name.concat(o.quantite.toString())
/]

[template private name(p : Possession)]
[if p.connaissance <> null][p.connaissance.name/][else][p.oclAsType(Objet).name()/][/if][p.eClass().name/]
[/template]

[query private name(pc : PossessionConditionnee) : String = 
pc.possession.name().concat(pc.conditions->name()).concat(pc.eClass().name)
/]

[query private name(t : Transformation) : String = 
t.objets->name().concat(t.conditions->name()).concat(t.eClass().name)
/]

[template private name(cc : ChoixConditionne)]
[cc.choix.name/][if cc.conditions <> null][cc.conditions->name()/][/if][if cc.decisionsPrecedentes <> null][cc.decisionsPrecedentes->name()/][/if][cc.eClass().name/]
[/template]

[template private name(ac : ActionConditionnee)]
[ac.action.name/][if ac.conditions <> null][ac.conditions->name()/][/if][if ac.decisionsPrecedentes <> null][ac.decisionsPrecedentes->name()/][/if][ac.choixOfferts->name()/][ac.eClass().name/]
[/template]

[query private name(d : Decision) : String = 
d.choix.name.concat(d.action.name).concat(d.eClass().name)
/]

[template private name(c : Comparaison)]
[if c.connaissance <> null][c.connaissance.name/][else][c.comparateur.toString().toUpperFirst().concat(objet.name())/][/if][c.eClass().name/]
[/template]

[template private name(objets : OrderedSet(Objet))]
[for (o : Objet | objets)]
[o.name().toUpperFirst()/][/for]
[/template]

[template private name(condition : Sequence(Condition))]
[for (c : Condition | condition)]
[c.name.toUpperFirst()/][/for]
[/template]

[template private name(choixConditionnes : OrderedSet(ChoixConditionne))]
[for (cc : ChoixConditionne | choixConditionnes)]
[cc.name().toUpperFirst()/][/for]
[/template]

[template private name(decisions : OrderedSet(Decision))]
[for (d : Decision | decisions)]
[d.name().toUpperFirst()/][/for]
[/template]