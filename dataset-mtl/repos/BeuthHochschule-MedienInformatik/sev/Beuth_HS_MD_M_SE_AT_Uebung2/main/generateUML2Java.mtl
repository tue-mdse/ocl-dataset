[comment encoding = UTF-8 /]
[module generateUML2Java('http://www.eclipse.org/uml2/2.1.0/UML')]


[template public generateMainClass (model : Model) ]
	[comment @main /]
	[file (('Main.java'), false, 'UTF-8')]
	class Main {
		public static void main(String args) {
			// Initialize everything once
			[for (e : NamedElement | model.member -> select(oclIsTypeOf(Class)))]
				[e.oclAsType(Class).name /] [e.oclAsType(Class).name.toLowerCase() /] = new [e.oclAsType(Class).name /]();
				[for (operation : Operation | e.oclAsType(Class).getAllOperations())]
					[e.oclAsType(Class).name.toLowerCase()/].[operation.name/](
					[for (param : Parameter | inputParamter(operation))]
					
						[if (param.type.name <> 'int')]
						10
						[elseif (param.type.name <> 'String')]
						new String('test')
						[elseif (param.type.name <> 'boolean')]
						true
						[elseif (param.type.name <> 'double')]
						1.0

						[/if]
						[if (param <> inputParamter(operation)->last())]
						,
						[/if]
					[/for]
					);
				[/for]
			[/for]
		}
	}
	[/file]
[/template]


[**
 * Generates the classifiers file and it's content
 */]
[template public generateClassifier(aClassifier : Classifier)]

[if (aClassifier.oclIsKindOf(Interface) or (aClassifier.oclIsKindOf(Class)))]

[comment @main/]
[file ((aClassifier.name).concat('.java'), false, 'UTF-8')]
[generateImports(aClassifier)/]
//[protected ('importRegion')]
	//please define your imports
//[/protected]


	[comment ----------------------------------------------------------------- /]
	[comment 
		Constructs the Classifier Signature.

		#ToDo: only (abstract) Class and Interfaces are currently handled.
	 /]
	[comment ----------------------------------------------------------------- /]
	
	[comment: visibilty /]
	[aClassifier.visibility/]
	
	[comment: type /]
	[if (aClassifier.oclIsKindOf(Interface))]
		interface
	[elseif (aClassifier.oclIsKindOf(Class))]
		[if (aClassifier.isAbstract)] abstract [/if] class
	[else]
	[/if]

	[comment: name /]
	[aClassifier.name/]

	[comment: inheritance /]
	[if (hasClassParent(aClassifier))]
		extends [classParent(aClassifier).name/]
	[/if]

	[comment: interface implementation /]
	[if (hasInterfaceParents(aClassifier))]
		implements 
		[for (parent : Interface | interfaceParents(aClassifier))]
			[parent.name/]

			[if (parent <> interfaceParents(aClassifier) -> last())]
				,
			[/if]
		[/for]
	[/if]
	{
	[comment ----------------------------------------------------------------- /]
	
	[comment Default Constrctor /]
	[if not (aClassifier.oclIsKindOf(Interface))]
	public [aClassifier.name /]() {
		[if (hasClassParent(aClassifier))]
		super();
		[/if]
	}
	[/if]

	[comment ----------------------------------------------------------------- /]
	[comment 
		Defines the member attributes.
	 /]
	[comment ----------------------------------------------------------------- /]
	[if (aClassifier.getAllAttributes() -> notEmpty())]
		//---------------------- Attributes -------------------------------------
	[/if]
	[for (property : Property | aClassifier.getAllAttributes())]

		/** #ToDo: describe attribute **/
		[property.visibility/]

		[if (property.isStatic)]
			static 
		[/if]

		[property.type.name/] [property.name/];
	[/for]
	[comment ----------------------------------------------------------------- /]
	
	[for (ass : Association | aClassifier.getAssociations())]
		[for (myType : Type | ass.endType -> select(name <> aClassifier.name))]
			[ass.visibility/] [myType.name/] [ass.memberEnd -> select(type = myType).name/];
		[/for]
	[/for]

	[comment ----------------------------------------------------------------- /]
	[comment 
		Defines the classifiers operations
	 /]
	[comment ----------------------------------------------------------------- /]
	
	[if (aClassifier.getAllOperations() -> notEmpty())]
		//---------------------- Operations  -------------------------------------
	[/if]
	[for (operation : Operation | aClassifier.getAllOperations())]
		[createOperation(operation)/]
	[/for]

	[comment ----------------------------------------------------------------- /]
	[comment 
		Defines the members get/set functions
	 /]
	[comment ----------------------------------------------------------------- /]

	[if (aClassifier.getAllAttributes() -> notEmpty())]
		//---------------------- Get / Set  -------------------------------------
	[/if]
	[for (property : Property | aClassifier.getAllAttributes())]
		[createGetAndSetMethods(property)/]
	[/for]

	[comment ----------------------------------------------------------------- /]

	}
	[/file]
[/if]
[/template]

[**
 * Generates the properties get and set functions
 */]
[template public createOperation(operation : Operation)]
[operationJavaDoc(operation)/]


[operation.visibility/] [getOperationReturnTypeName(operation)/] [operation.name/]
	(
		[for (parameter : Parameter | inputParamter(operation))]
			[parameter.type.name/] [parameter.name/]
			[if (parameter <> inputParamter(operation) -> last())]
				,
			[/if]
		[/for]
	)
	
	[if (operation.interface -> size() > 0) or (operation.class -> size() > 0 and operation.class.isAbstract)]
		;
	[else]
		{
			// #ToDo: fill operation
			[if (not operation.type -> oclIsUndefined())]
				return [defaultValue(operation.type)/];
			[/if]
		}
	[/if]
[/template]


[**
 * Generates the properties get and set functions
 */]
[template public operationJavaDoc(operation : Operation)]
/**
 * #ToDo: brief function description
 *
[for (parameter : Parameter | inputParamter(operation)) ]
 * @param [parameter.name /]
 *		#ToDo: brief paramter description
[/for]
[if (operation.type.toString() <> 'void')]
 * @return
 * 		#ToDo: brief paramter description
[/if]
 **/
[/template]

[**
 * Generates the properties get and set functions
 */]
[template public createGetAndSetMethods(property : Property)]

/**
 * #ToDo: describe if special functionallity is implemented
 **/
public [if (property.isStatic)] static [/if][property.type.name/] get[property.name.toUpperFirst()/]() {
	return this.[property.name/];
}

/**
 * #ToDo: describe if special functionallity is implemented
 **/
public [if (property.isStatic)] static [/if] void set[property.name.toUpperFirst()/]([property.type.name/] [property.name/]) {
    this.[property.name/] = [property.name/];
}
[/template]

[template public generateImports(aClassifier : Classifier)]
	
	//----------------- imports -----------------------------
	[if containsDate(aClassifier)]
		import java.util.Date;
	[/if]
[/template]

[**
 * Checks if a given classifier has interface parents.
 */]
[query public hasInterfaceParents(aClassifier : Classifier) : Boolean = aClassifier.allParents() -> exists(oclIsKindOf(Interface)) /]

[**
 * Checks if a given classifier has interface parents.
 */]
[query public hasClassParent(aClassifier : Classifier) : Boolean = aClassifier.allParents() -> exists(not oclIsKindOf(Interface)) /]

[**
 * Selects all interface parents of a given classifier 
 */]
[query public interfaceParents(aClassifier : Classifier) : OrderedSet(Interface) = aClassifier.allParents() -> selectByKind(Interface) /]

[**
 * Selects all non interface parents of a given classifier 
 */]
[query public classParent(aClassifier : Classifier) : Classifier = aClassifier.allParents() -> selectByKind(Class) /]

[**
 * Selects all input Paramter for a given operation 
 */]
[query public inputParamter(aOperation : Operation) : OrderedSet(Parameter) = aOperation.ownedParameter->select(direction.toString() = 'in')/]

[**
 * Selects the first return paramter.
 * The first one is selected because a java function should only have one return value. 
 */]
[query public returnParamter(aOperation : Operation) : Parameter = (aOperation.ownedParameter->select(direction.toString() = 'return'))->first() /]

[**
 * Dump way to create datatype default values. 
 */]
[query public defaultValue(type :  Type) : String = 
	if type.name = 'int' or type.name = 'Integer' or type.name = 'UnlimitedNatural' then '0'
	else if type.name = 'double' or type.name = 'Double' or type.name = 'Real' then '0.0'
	else if type.name = 'float' or type.name = 'Float' then '0.0f'
	else if type.name = 'boolean' or type.name = 'Boolean' then 'false'
	else 'null'
	endif endif endif endif
/]

[**
 * First simple version to check if the Date-Class has to be imported
*/]
[query public containsDate(aClassifier : Classifier) : Boolean = 
	if (aClassifier.attribute ->select(type.name = 'Date') -> notEmpty())
       or (aClassifier.getAllOperations() -> select(type.name = 'Date') -> notEmpty())
	   then true
	else false
	endif
/]

[**
 * Generates the java style return type
 */]
[query public getOperationReturnTypeName(aOperation : Operation) : String = 
	if (not aOperation.returnResult() -> isEmpty()) then aOperation.type.name
	else 'void'
	endif
/]
