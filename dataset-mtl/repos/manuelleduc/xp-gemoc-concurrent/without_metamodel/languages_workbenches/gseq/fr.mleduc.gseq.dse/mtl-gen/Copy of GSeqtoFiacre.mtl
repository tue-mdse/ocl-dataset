[comment encoding = UTF-8 /]

[module generate('http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation', 
	'http://www.eclipse.org/emf/2002/Ecore', 
	'http://org.gemoc.moccml/1.0', 
	'http://fr.inria.aoste.timemodel',
	'http://org.gemoc.moccml.fsmmodel/1.0',
	'http://www.eclipse.org/xtend', 
	'http://www.eclipse.org/xtend/RichString', 
	'http://www.eclipse.org/xtext/xbase/Xbase',
	'http://mleduc.fr/gseq') ]
[template public generate(aProgram : Program)]
[comment @main/]
[file (aProgram.name+'_FiacreProcess.fcr', false, 'UTF-8')]
// *********************** Type Declaration ******************************/
const NUMBER_Programs : int is [aProgram.eAllContents(Program)->size()/]
const NUMBER_Methods : int is [aProgram.eAllContents(Method)->size()/]
const NUMBER_Operations : int is [aProgram.eAllContents(Operation)->size()/]
const NUMBER_Prints : int is [aProgram.eAllContents(Print)->size()/]
const NUMBER_MethodCalls : int is [aProgram.eAllContents(MethodCall)->size()/]

type Method_methodsArray is array [Program.eContents(Method)->size()/] of int
type Operation_operationsArray is array [Method.eContents(Operation)->size()/] of int
type MethodCall_calledByArray is array [Method.eContents(MethodCall)->size()/] of int


/*********************************************************************
Defining the Functions for : Program
**********************************************************************/
/*********************************************************************
Defining the Functions for : Method
**********************************************************************/
/*********************************************************************
Defining the Functions for : Operation
**********************************************************************/
/************************* Program Process Instances***************************/
[for (element : Program| aProgram.eAllContents(Program))]
process p[element.name/] ['['/][element.name/]_start:in none[']'/](&global : SystemDataRoot, id : read int) is
	states s0
	var _self:Program
    from s0  [element.name/]_start; global:=Program_init( global , global.refToElement_id) ;  to s0
[/for]
/************************* Method Process Instances***************************/
[for (element : Method| aProgram.eAllContents(Method))]
process p[element.name/] ['['/][element.name/]_callIt:in none[']'/](&global : SystemDataRoot, id : read int) is
	states s0
	var _self:Method
    from s0  [element.name/]_callIt; global:=Method_call( global , global.refToElement_id) ;  to s0
[/for]
/************************* Operation Process Instances***************************/
[for (element : Operation| aProgram.eAllContents(Operation))]
process p[element.name/] ['['/][element.name/]_execute:in none[']'/](&global : SystemDataRoot, id : read int) is
	states s0
	var _self:Operation
    from s0  [element.name/]_execute; global:=Operation_execute( global , global.refToElement_id) ;  to s0
[/for]
process pUnConstrainedSemantics['['/][for (element : Program| aProgram.eAllContents(Program))]
[element.name/]_start:out none,[/for][for (element : Method| aProgram.eAllContents(Method))]
[element.name/]_callIt:out none,[/for][for (element : Operation| aProgram.eAllContents(Operation))]
[element.name/]_execute:out none,[/for][']'/] is
	states s0
[for (element : Program| aProgram.eAllContents(Program))]
    from s0  [element.name/]_start;  to s0

[/for]
[for (element : Method| aProgram.eAllContents(Method))]
    from s0  [element.name/]_callIt;  to s0

[/for]
[for (element : Operation| aProgram.eAllContents(Operation))]
    from s0  [element.name/]_execute;  to s0

[/for]

[file ('pUnConstrainedSemantics.fcr', false, 'UTF-8')]
process pUnConstrainedSemantics['['/][for (element : Program| aProgram.eAllContents(Program))]
[element.name/]_start:out none,[/for][for (element : Method| aProgram.eAllContents(Method))]
[element.name/]_callIt:out none,[/for][for (element : Operation| aProgram.eAllContents(Operation))]
[element.name/]_execute:out none,[/for][']'/] is
	
	states s0
[for (element : Program| aProgram.eAllContents(Program))]
    from s0  [element.name/]_start;  to s0

[/for]
[for (element : Method| aProgram.eAllContents(Method))]
    from s0  [element.name/]_callIt;  to s0

[/for]
[for (element : Operation| aProgram.eAllContents(Operation))]
    from s0  [element.name/]_execute;  to s0

[/for]
[/file]
/******************** Process Parallelization for Program******************/
component sys is

var 
	global : SystemDataRoot,
    ID: int := 0
	//global : SystemDataRoot := INITIAL_Configuration

port
[for (element : Program| aProgram.eAllContents(Program))]
[element.name/]_start: none,

[/for][for (element : Method| aProgram.eAllContents(Method))]
[element.name/]_callIt: none,

[/for][for (element : Operation| aProgram.eAllContents(Operation))]
[element.name/]_execute: none,
[/for]

par

pUnConstrainedSemantics['['/][for (element : Program| aProgram.eAllContents(Program))]
[element.name/]_start,[/for][for (element : Method| aProgram.eAllContents(Method))]
[element.name/]_callIt,[/for][for (element : Operation| aProgram.eAllContents(Operation))]
[element.name/]_execute,[/for][']'/]
[for (element : Program| aProgram.eAllContents(Program))]
|| p[element.name/] ['['/][element.name/]_start[']'/] (&global, ID)
[/for]
[for (element : Method| aProgram.eAllContents(Method))]
|| p[element.name/] ['['/][element.name/]_callIt[']'/] (&global, ID)
[/for]
[for (element : Operation| aProgram.eAllContents(Operation))]
|| p[element.name/] ['['/][element.name/]_execute[']'/] (&global, ID)
[/for]
end par
sys 
[/file]
[/template]
