[comment encoding = UTF-8 /]

[module generate('http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation', 
	'http://www.eclipse.org/emf/2002/Ecore', 
	'http://org.gemoc.moccml/1.0', 
	'http://fr.inria.aoste.timemodel',
	'http://org.gemoc.moccml.fsmmodel/1.0',
	'http://www.eclipse.org/xtend', 
	'http://www.eclipse.org/xtend/RichString', 
	'http://www.eclipse.org/xtext/xbase/Xbase',
	'http://mleduc.fr/gx10') ]
[template public generate(aProgram : Program)]
[comment @main/]
[file (aProgram.name+'_FiacreProcess.fcr', false, 'UTF-8')]
// *********************** Type Declaration ******************************/
const NUMBER_Programs : int is [aProgram.eAllContents(Program)->size()/]
const NUMBER_Methods : int is [aProgram.eAllContents(Method)->size()/]
const NUMBER_Blocks : int is [aProgram.eAllContents(Block)->size()/]
const NUMBER_Statements : int is [aProgram.eAllContents(Statement)->size()/]
const NUMBER_ControlStructures : int is [aProgram.eAllContents(ControlStructure)->size()/]
const NUMBER_IntExpressions : int is [aProgram.eAllContents(IntExpression)->size()/]
const NUMBER_BoolExpressions : int is [aProgram.eAllContents(BoolExpression)->size()/]
const NUMBER_Ifs : int is [aProgram.eAllContents(If)->size()/]
const NUMBER_Whiles : int is [aProgram.eAllContents(While)->size()/]
const NUMBER_Trues : int is [aProgram.eAllContents(True)->size()/]
const NUMBER_Falses : int is [aProgram.eAllContents(False)->size()/]
const NUMBER_Nots : int is [aProgram.eAllContents(Not)->size()/]
const NUMBER_Ands : int is [aProgram.eAllContents(And)->size()/]
const NUMBER_IntConsts : int is [aProgram.eAllContents(IntConst)->size()/]
const NUMBER_IntBinaryOperations : int is [aProgram.eAllContents(IntBinaryOperation)->size()/]
const NUMBER_Asyncs : int is [aProgram.eAllContents(Async)->size()/]
const NUMBER_MethodCalls : int is [aProgram.eAllContents(MethodCall)->size()/]
const NUMBER_Expressions : int is [aProgram.eAllContents(Expression)->size()/]
const NUMBER_Finishs : int is [aProgram.eAllContents(Finish)->size()/]
const NUMBER_Prints : int is [aProgram.eAllContents(Print)->size()/]
const NUMBER_BoolVars : int is [aProgram.eAllContents(BoolVar)->size()/]
const NUMBER_IntVars : int is [aProgram.eAllContents(IntVar)->size()/]
const NUMBER_IntVarAccesss : int is [aProgram.eAllContents(IntVarAccess)->size()/]
const NUMBER_BoolVarAccesss : int is [aProgram.eAllContents(BoolVarAccess)->size()/]
const NUMBER_Equals : int is [aProgram.eAllContents(Equal)->size()/]
const NUMBER_MethodCallParameters : int is [aProgram.eAllContents(MethodCallParameter)->size()/]
const NUMBER_Referentiables : int is [aProgram.eAllContents(Referentiable)->size()/]
const NUMBER_Pluss : int is [aProgram.eAllContents(Plus)->size()/]
const NUMBER_Times : int is [aProgram.eAllContents(Time)->size()/]

type Method_methodsArray is array [Program.eContents(Method)->size()/] of int
type MethodCall_calledByArray is array [Method.eContents(MethodCall)->size()/] of int
type Referentiable_methodParametersArray is array [Method.eContents(Referentiable)->size()/] of int
type Statement_blockStatementsArray is array [Block.eContents(Statement)->size()/] of int
type MethodCallParameter_methodCallParametersArray is array [MethodCall.eContents(MethodCallParameter)->size()/] of int


/*********************************************************************
Defining the Functions for : Program
**********************************************************************/
/*********************************************************************
Defining the Functions for : Method
**********************************************************************/
/*********************************************************************
Defining the Functions for : Statement
**********************************************************************/
/*********************************************************************
Defining the Functions for : Print
**********************************************************************/
/*********************************************************************
Defining the Functions for : Block
**********************************************************************/
/*********************************************************************
Defining the Functions for : IntVar
**********************************************************************/
/*********************************************************************
Defining the Functions for : BoolVar
**********************************************************************/
/*********************************************************************
Defining the Functions for : IntBinaryOperation
**********************************************************************/
/*********************************************************************
Defining the Functions for : Equal
**********************************************************************/
/*********************************************************************
Defining the Functions for : MethodCall
**********************************************************************/
/*********************************************************************
Defining the Functions for : ControlStructure
**********************************************************************/
/*********************************************************************
Defining the Functions for : If
**********************************************************************/
/*********************************************************************
Defining the Functions for : While
**********************************************************************/
/*********************************************************************
Defining the Functions for : IntExpression
**********************************************************************/
/*********************************************************************
Defining the Functions for : Not
**********************************************************************/
/************************* Print Process Instances***************************/
[for (element : Print| aProgram.eAllContents(Print))]
process p[element.name/] ['['/][element.name/]_print:in none[']'/](&global : SystemDataRoot, id : read int) is
	states s0
	var _self:Print
    from s0  [element.name/]_print; global:=Print_print( global , global.refToElement_id) ;  to s0
[/for]
/************************* Block Process Instances***************************/
[for (element : Block| aProgram.eAllContents(Block))]
process p[element.name/] ['['/][element.name/]_initBlock:in none[']'/](&global : SystemDataRoot, id : read int) is
	states s0
	var _self:Block
    from s0  [element.name/]_initBlock; global:=Block_initBlock( global , global.refToElement_id) ;  to s0
[/for]
/************************* IntVar Process Instances***************************/
[for (element : IntVar| aProgram.eAllContents(IntVar))]
process p[element.name/] ['['/][element.name/]_evaluate:in none[']'/](&global : SystemDataRoot, id : read int) is
	states s0
	var _self:IntVar
    from s0  [element.name/]_evaluate; global:=IntVar_evaluate( global , global.refToElement_id) ;  to s0
[/for]
/************************* BoolVar Process Instances***************************/
[for (element : BoolVar| aProgram.eAllContents(BoolVar))]
process p[element.name/] ['['/][element.name/]_evaluate:in none[']'/](&global : SystemDataRoot, id : read int) is
	states s0
	var _self:BoolVar
    from s0  [element.name/]_evaluate; global:=BoolVar_evaluate( global , global.refToElement_id) ;  to s0
[/for]
/************************* IntBinaryOperation Process Instances***************************/
[for (element : IntBinaryOperation| aProgram.eAllContents(IntBinaryOperation))]
process p[element.name/] ['['/][element.name/]_evaluate:in none[']'/](&global : SystemDataRoot, id : read int) is
	states s0
	var _self:IntBinaryOperation
    from s0  [element.name/]_evaluate; global:=IntBinaryOperation_evaluate( global , global.refToElement_id) ;  to s0
[/for]
/************************* Equal Process Instances***************************/
[for (element : Equal| aProgram.eAllContents(Equal))]
process p[element.name/] ['['/][element.name/]_evaluate:in none[']'/](&global : SystemDataRoot, id : read int) is
	states s0
	var _self:Equal
    from s0  [element.name/]_evaluate; global:=Equal_evaluate( global , global.refToElement_id) ;  to s0
[/for]
/************************* MethodCall Process Instances***************************/
[for (element : MethodCall| aProgram.eAllContents(MethodCall))]
process p[element.name/] ['['/][element.name/]_callPreparation:in none[']'/](&global : SystemDataRoot, id : read int) is
	states s0
	var _self:MethodCall
    from s0  [element.name/]_callPreparation; global:=MethodCall_call( global , global.refToElement_id) ;  to s0
[/for]
process pUnConstrainedSemantics['['/][for (element : Program| aProgram.eAllContents(Program))]
[element.name/]_start:out none,[/for][for (element : Method| aProgram.eAllContents(Method))]
[element.name/]_startMethodEvt:out none,[element.name/]_endMethodEvt:out none,[/for][for (element : Statement| aProgram.eAllContents(Statement))]
[element.name/]_startStatement:out none,[element.name/]_endStatement:out none,[/for][for (element : Print| aProgram.eAllContents(Print))]
[element.name/]_print:out none,[/for][for (element : Block| aProgram.eAllContents(Block))]
[element.name/]_initBlock:out none,[/for][for (element : IntVar| aProgram.eAllContents(IntVar))]
[element.name/]_evaluate:out none,[/for][for (element : BoolVar| aProgram.eAllContents(BoolVar))]
[element.name/]_evaluate:out none,[/for][for (element : IntBinaryOperation| aProgram.eAllContents(IntBinaryOperation))]
[element.name/]_evaluate:out none,[/for][for (element : Equal| aProgram.eAllContents(Equal))]
[element.name/]_evaluate:out none,[/for][for (element : MethodCall| aProgram.eAllContents(MethodCall))]
[element.name/]_callPreparation:out none,[/for][for (element : ControlStructure| aProgram.eAllContents(ControlStructure))]
[element.name/]_doEvaluateIf:out none,[element.name/]_evaluateTrue:out none,[element.name/]_evaluateFalse:out none,[/for][for (element : If| aProgram.eAllContents(If))]
[/for][for (element : While| aProgram.eAllContents(While))]
[/for][for (element : IntExpression| aProgram.eAllContents(IntExpression))]
[/for][for (element : Not| aProgram.eAllContents(Not))]
[/for][']'/] is
	states s0
[for (element : Program| aProgram.eAllContents(Program))]
    from s0  [element.name/]_start;  to s0

[/for]
[for (element : Method| aProgram.eAllContents(Method))]
    from s0  [element.name/]_startMethodEvt;  to s0
    from s0  [element.name/]_endMethodEvt;  to s0

[/for]
[for (element : Statement| aProgram.eAllContents(Statement))]
    from s0  [element.name/]_startStatement;  to s0
    from s0  [element.name/]_endStatement;  to s0

[/for]
[for (element : Print| aProgram.eAllContents(Print))]
    from s0  [element.name/]_print;  to s0

[/for]
[for (element : Block| aProgram.eAllContents(Block))]
    from s0  [element.name/]_initBlock;  to s0

[/for]
[for (element : IntVar| aProgram.eAllContents(IntVar))]
    from s0  [element.name/]_evaluate;  to s0

[/for]
[for (element : BoolVar| aProgram.eAllContents(BoolVar))]
    from s0  [element.name/]_evaluate;  to s0

[/for]
[for (element : IntBinaryOperation| aProgram.eAllContents(IntBinaryOperation))]
    from s0  [element.name/]_evaluate;  to s0

[/for]
[for (element : Equal| aProgram.eAllContents(Equal))]
    from s0  [element.name/]_evaluate;  to s0

[/for]
[for (element : MethodCall| aProgram.eAllContents(MethodCall))]
    from s0  [element.name/]_callPreparation;  to s0

[/for]
[for (element : ControlStructure| aProgram.eAllContents(ControlStructure))]
    from s0  [element.name/]_doEvaluateIf;  to s0
    from s0  [element.name/]_evaluateTrue;  to s0
    from s0  [element.name/]_evaluateFalse;  to s0

[/for]
[for (element : If| aProgram.eAllContents(If))]

[/for]
[for (element : While| aProgram.eAllContents(While))]

[/for]
[for (element : IntExpression| aProgram.eAllContents(IntExpression))]

[/for]
[for (element : Not| aProgram.eAllContents(Not))]

[/for]

[file ('pUnConstrainedSemantics.fcr', false, 'UTF-8')]
process pUnConstrainedSemantics['['/][for (element : Program| aProgram.eAllContents(Program))]
[element.name/]_start:out none,[/for][for (element : Method| aProgram.eAllContents(Method))]
[element.name/]_startMethodEvt:out none,[element.name/]_endMethodEvt:out none,[/for][for (element : Statement| aProgram.eAllContents(Statement))]
[element.name/]_startStatement:out none,[element.name/]_endStatement:out none,[/for][for (element : Print| aProgram.eAllContents(Print))]
[element.name/]_print:out none,[/for][for (element : Block| aProgram.eAllContents(Block))]
[element.name/]_initBlock:out none,[/for][for (element : IntVar| aProgram.eAllContents(IntVar))]
[element.name/]_evaluate:out none,[/for][for (element : BoolVar| aProgram.eAllContents(BoolVar))]
[element.name/]_evaluate:out none,[/for][for (element : IntBinaryOperation| aProgram.eAllContents(IntBinaryOperation))]
[element.name/]_evaluate:out none,[/for][for (element : Equal| aProgram.eAllContents(Equal))]
[element.name/]_evaluate:out none,[/for][for (element : MethodCall| aProgram.eAllContents(MethodCall))]
[element.name/]_callPreparation:out none,[/for][for (element : ControlStructure| aProgram.eAllContents(ControlStructure))]
[element.name/]_doEvaluateIf:out none,[element.name/]_evaluateTrue:out none,[element.name/]_evaluateFalse:out none,[/for][for (element : If| aProgram.eAllContents(If))]
[/for][for (element : While| aProgram.eAllContents(While))]
[/for][for (element : IntExpression| aProgram.eAllContents(IntExpression))]
[/for][for (element : Not| aProgram.eAllContents(Not))]
[/for][']'/] is
	
	states s0
[for (element : Program| aProgram.eAllContents(Program))]
    from s0  [element.name/]_start;  to s0

[/for]
[for (element : Method| aProgram.eAllContents(Method))]
    from s0  [element.name/]_startMethodEvt;  to s0
    from s0  [element.name/]_endMethodEvt;  to s0

[/for]
[for (element : Statement| aProgram.eAllContents(Statement))]
    from s0  [element.name/]_startStatement;  to s0
    from s0  [element.name/]_endStatement;  to s0

[/for]
[for (element : Print| aProgram.eAllContents(Print))]
    from s0  [element.name/]_print;  to s0

[/for]
[for (element : Block| aProgram.eAllContents(Block))]
    from s0  [element.name/]_initBlock;  to s0

[/for]
[for (element : IntVar| aProgram.eAllContents(IntVar))]
    from s0  [element.name/]_evaluate;  to s0

[/for]
[for (element : BoolVar| aProgram.eAllContents(BoolVar))]
    from s0  [element.name/]_evaluate;  to s0

[/for]
[for (element : IntBinaryOperation| aProgram.eAllContents(IntBinaryOperation))]
    from s0  [element.name/]_evaluate;  to s0

[/for]
[for (element : Equal| aProgram.eAllContents(Equal))]
    from s0  [element.name/]_evaluate;  to s0

[/for]
[for (element : MethodCall| aProgram.eAllContents(MethodCall))]
    from s0  [element.name/]_callPreparation;  to s0

[/for]
[for (element : ControlStructure| aProgram.eAllContents(ControlStructure))]
    from s0  [element.name/]_doEvaluateIf;  to s0
    from s0  [element.name/]_evaluateTrue;  to s0
    from s0  [element.name/]_evaluateFalse;  to s0

[/for]
[for (element : If| aProgram.eAllContents(If))]

[/for]
[for (element : While| aProgram.eAllContents(While))]

[/for]
[for (element : IntExpression| aProgram.eAllContents(IntExpression))]

[/for]
[for (element : Not| aProgram.eAllContents(Not))]

[/for]
[/file]
/******************** Process Parallelization for Program******************/
component sys is

var 
	global : SystemDataRoot,
    ID: int := 0
	//global : SystemDataRoot := INITIAL_Configuration

port
[for (element : Program| aProgram.eAllContents(Program))]
[element.name/]_start: none,

[/for][for (element : Method| aProgram.eAllContents(Method))]
[element.name/]_startMethodEvt: none,[element.name/]_endMethodEvt: none,

[/for][for (element : Statement| aProgram.eAllContents(Statement))]
[element.name/]_startStatement: none,[element.name/]_endStatement: none,

[/for][for (element : Print| aProgram.eAllContents(Print))]
[element.name/]_print: none,

[/for][for (element : Block| aProgram.eAllContents(Block))]
[element.name/]_initBlock: none,

[/for][for (element : IntVar| aProgram.eAllContents(IntVar))]
[element.name/]_evaluate: none,

[/for][for (element : BoolVar| aProgram.eAllContents(BoolVar))]
[element.name/]_evaluate: none,

[/for][for (element : IntBinaryOperation| aProgram.eAllContents(IntBinaryOperation))]
[element.name/]_evaluate: none,

[/for][for (element : Equal| aProgram.eAllContents(Equal))]
[element.name/]_evaluate: none,

[/for][for (element : MethodCall| aProgram.eAllContents(MethodCall))]
[element.name/]_callPreparation: none,

[/for][for (element : ControlStructure| aProgram.eAllContents(ControlStructure))]
[element.name/]_doEvaluateIf: none,[element.name/]_evaluateTrue: none,[element.name/]_evaluateFalse: none,

[/for][for (element : If| aProgram.eAllContents(If))]

[/for][for (element : While| aProgram.eAllContents(While))]

[/for][for (element : IntExpression| aProgram.eAllContents(IntExpression))]

[/for][for (element : Not| aProgram.eAllContents(Not))]

[/for]

par

pUnConstrainedSemantics['['/][for (element : Program| aProgram.eAllContents(Program))]
[element.name/]_start,[/for][for (element : Method| aProgram.eAllContents(Method))]
[element.name/]_startMethodEvt,[element.name/]_endMethodEvt,[/for][for (element : Statement| aProgram.eAllContents(Statement))]
[element.name/]_startStatement,[element.name/]_endStatement,[/for][for (element : Print| aProgram.eAllContents(Print))]
[element.name/]_print,[/for][for (element : Block| aProgram.eAllContents(Block))]
[element.name/]_initBlock,[/for][for (element : IntVar| aProgram.eAllContents(IntVar))]
[element.name/]_evaluate,[/for][for (element : BoolVar| aProgram.eAllContents(BoolVar))]
[element.name/]_evaluate,[/for][for (element : IntBinaryOperation| aProgram.eAllContents(IntBinaryOperation))]
[element.name/]_evaluate,[/for][for (element : Equal| aProgram.eAllContents(Equal))]
[element.name/]_evaluate,[/for][for (element : MethodCall| aProgram.eAllContents(MethodCall))]
[element.name/]_callPreparation,[/for][for (element : ControlStructure| aProgram.eAllContents(ControlStructure))]
[element.name/]_doEvaluateIf,[element.name/]_evaluateTrue,[element.name/]_evaluateFalse,[/for][for (element : If| aProgram.eAllContents(If))]
,[/for][for (element : While| aProgram.eAllContents(While))]
,[/for][for (element : IntExpression| aProgram.eAllContents(IntExpression))]
,[/for][for (element : Not| aProgram.eAllContents(Not))]
,[/for][']'/]
[for (element : Program| aProgram.eAllContents(Program))]
|| p[element.name/] ['['/][element.name/]_start[']'/] (&global, ID)
[/for]
[for (element : Method| aProgram.eAllContents(Method))]
|| p[element.name/] ['['/][element.name/]_startMethodEvt,[element.name/]_endMethodEvt[']'/] (&global, ID)
[/for]
[for (element : Statement| aProgram.eAllContents(Statement))]
|| p[element.name/] ['['/][element.name/]_startStatement,[element.name/]_endStatement[']'/] (&global, ID)
[/for]
[for (element : Print| aProgram.eAllContents(Print))]
|| p[element.name/] ['['/][element.name/]_print[']'/] (&global, ID)
[/for]
[for (element : Block| aProgram.eAllContents(Block))]
|| p[element.name/] ['['/][element.name/]_initBlock[']'/] (&global, ID)
[/for]
[for (element : IntVar| aProgram.eAllContents(IntVar))]
|| p[element.name/] ['['/][element.name/]_evaluate[']'/] (&global, ID)
[/for]
[for (element : BoolVar| aProgram.eAllContents(BoolVar))]
|| p[element.name/] ['['/][element.name/]_evaluate[']'/] (&global, ID)
[/for]
[for (element : IntBinaryOperation| aProgram.eAllContents(IntBinaryOperation))]
|| p[element.name/] ['['/][element.name/]_evaluate[']'/] (&global, ID)
[/for]
[for (element : Equal| aProgram.eAllContents(Equal))]
|| p[element.name/] ['['/][element.name/]_evaluate[']'/] (&global, ID)
[/for]
[for (element : MethodCall| aProgram.eAllContents(MethodCall))]
|| p[element.name/] ['['/][element.name/]_callPreparation[']'/] (&global, ID)
[/for]
[for (element : ControlStructure| aProgram.eAllContents(ControlStructure))]
|| p[element.name/] ['['/][element.name/]_doEvaluateIf,[element.name/]_evaluateTrue,[element.name/]_evaluateFalse[']'/] (&global, ID)
[/for]
[for (element : If| aProgram.eAllContents(If))]
|| p[element.name/] ['['/][']'/] (&global, ID)
[/for]
[for (element : While| aProgram.eAllContents(While))]
|| p[element.name/] ['['/][']'/] (&global, ID)
[/for]
[for (element : IntExpression| aProgram.eAllContents(IntExpression))]
|| p[element.name/] ['['/][']'/] (&global, ID)
[/for]
[for (element : Not| aProgram.eAllContents(Not))]
|| p[element.name/] ['['/][']'/] (&global, ID)
[/for]
end par
sys 
[/file]
[/template]
