context Arc
inv arcEstValide:
	(self.source.oclIsTypeOf(Place) and self.target.oclIsTypeOf(Transition)) 
	or (self.source.oclIsTypeOf(Transition) and self.target.oclIsTypeOf(Place))

context Transition
inv transitionValide:
	self.incomings->notEmpty() and self.outgoings->notEmpty()

context PetriNet
inv marquageNonVide:
	self.nodes->select( e | e.oclIsTypeOf(Place))->exists(p : Place | p.marking > 0)

context Arc
inv pasDeBoucle:
	self.source <> self.target

context Arc
inv read_arcEstValide:
	if self.kind = ArcKind::read_arc then
		self.source.oclIsTypeOf(Place) and self.target.oclIsTypeOf(Transition)
	else
		true
	endif
