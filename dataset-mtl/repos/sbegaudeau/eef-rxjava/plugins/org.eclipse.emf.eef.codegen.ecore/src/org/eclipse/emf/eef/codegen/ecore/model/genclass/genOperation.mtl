[comment encoding = UTF-8 /]
[module genOperation('http://www.eclipse.org/emf/2002/GenModel')/]

[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClass /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClassifier /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenFeature /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenEnum /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenPackage /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenDataType /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenOperation /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenParameter /]

[template public genOperation(genOperation : GenOperation, genClass : GenClass, genPackage : GenPackage, genModel : GenModel, isJDK50 : Boolean, isInterface : Boolean, isImplementation : Boolean, isGWT : Boolean)]
[if (isImplementation) ]
  [if (genOperation.isInvariant() and genOperation.hasInvariantExpression()) ]
	/**
	 * The cached validation expression for the '{@link #[genOperation.getName()/]([genOperation.getParameterTypes(', ')/]) <em>[genOperation.getFormattedName()/]</em>}' invariant operation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #[genOperation.getName()/]([genOperation.getParameterTypes(', ')/])
	 * @generated
	 * @ordered
	 */
	protected static final [genModel.getImportedName('java.lang.String')/] [genClass.getUniqueNameUpperCase(genOperation)/]__EEXPRESSION = "[genOperation.getInvariantExpression('\t\t')/]";[genModel.getNonNLS()/]

  [else][if (genOperation.hasInvocationDelegate()) ]
	/**
	 * The cached invocation delegate for the '{@link #[genOperation.getName()/]([genOperation.getParameterTypes(', ')/]) <em>[genOperation.getFormattedName()/]</em>}' operation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #[genOperation.getName()/]([genOperation.getParameterTypes(', ')/])
	 * @generated
	 * @ordered
	 */
	protected static final [genModel.getImportedName('org.eclipse.emf.ecore.EOperation')/].Internal.InvocationDelegate [genClass.getUniqueNameUpperCase(genOperation)/]__EINVOCATION_DELEGATE = (([genModel.getImportedName('org.eclipse.emf.ecore.EOperation')/].Internal)[genOperation.getQualifiedOperationAccessor()/]).getInvocationDelegate();

  [/if][/if]
[/if]
[if (isInterface) ]
[comment]<%@ include file="Class/genOperation.javadoc.override.javajetinc" fail="alternative" %>[/comment]
[comment]<%@ start %>[/comment]
	/**
[comment]<%@ include file="Class/genOperation.javadoc.insert.javajetinc" fail="silent" %>[/comment]
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
  [if (genOperation.hasDocumentation() or genOperation.hasParameterDocumentation()) ]
	 * <!-- begin-model-doc -->
    [if (genOperation.hasDocumentation()) ]
	 * [genOperation.getDocumentation(genModel.getIndentation())/]
    [/if]
  [for (genParameter : GenParameter | genOperation.genParameters)]
      [if (genParameter.hasDocumentation())]
        [let documentation : String = genParameter.getDocumentation('')]
          [if (documentation.contains('\n') or documentation.contains('\r')) ]
	 * @param [genParameter.getName()/]
	 *   [genParameter.getDocumentation(genModel.getIndentation())/]
          [else]
	 * @param [genParameter.getName()/] [genParameter.getDocumentation(genModel.getIndentation())/]
          [/if]
        [/let]
      [/if]
    [/for]
	 * <!-- end-model-doc -->
  [/if]
  [if (not genModel.suppressEMFModelTags)]
    [let modelInfoLines : Sequence(String) = genOperation.getModelInfo().tokenize(genModel.getLineDelimiter())]
      [if (modelInfoLines->isEmpty())]
	 * @model
      [else]
	 * @model [modelInfoLines->sep(genModel.getLineDelimiter() + '\t *        ')/]
      [/if]
    [/let]
  [/if]
	 * @generated
	 */
[comment]<%@ end %><%//Class/genOperation.javadoc.override.javajetinc%>[/comment]
[else]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
  [if (isJDK50)][comment]//Class/genOperation.annotations.insert.javajetinc[/comment]
[comment]<%@ include file="Class/genOperation.annotations.insert.javajetinc" fail="silent" %>[/comment]
  [/if]
[/if]
[if (not isImplementation) ]
	[genOperation.getTypeParameters(genClass)/][genOperation.getImportedType(genClass)/] [genOperation.getName()/]([genOperation.getParameters(genClass)/])[genOperation.getThrows(genClass)/];

[else]
	public [genOperation.getTypeParameters(genClass)/][genOperation.getImportedType(genClass)/] [genOperation.getName()/]([genOperation.getParameters(genClass)/])[genOperation.getThrows(genClass)/] {
  [if (genOperation.hasBody()) ]
		[genOperation.getBody(genModel.getIndentation())/]
  [else][if (genOperation.isInvariant())]
    [let opClass : GenClass = genOperation.genClass]
      [let diagnostics : String = genOperation.genParameters->at(1).oclAsType(GenParameter).getName()]
        [let ctx : String = genOperation.genParameters->at(2).oclAsType(GenParameter).getName()]
          [if (genOperation.hasInvariantExpression()) ]
		return
			[opClass.genPackage.getImportedValidatorClassName()/].validate
				([genClass.getQualifiedClassifierAccessor()/],
				 this,
				 [diagnostics/],
				 [ctx/],
				 "[genOperation.getValidationDelegate()/]",[genModel.getNonNLS()/]
				 [genOperation.getQualifiedOperationAccessor()/],
				 [genClass.getUniqueNameUpperCase(genOperation)/]__EEXPRESSION,
				 [genModel.getImportedName('org.eclipse.emf.common.util.Diagnostic')/].ERROR,
				 [opClass.genPackage.getImportedValidatorClassName()/].DIAGNOSTIC_SOURCE,
				 [opClass.genPackage.getImportedValidatorClassName()/].[opClass.getOperationID(genOperation)/]);
          [else]
		// TODO: implement this method
		// -> specify the condition that violates the invariant
		// -> verify the details of the diagnostic, including severity and message
		// Ensure that you remove @generated or mark it @generated NOT
		if (false) {
			if ([diagnostics/] != null) {
				[diagnostics/].add
					(new [genModel.getImportedName('org.eclipse.emf.common.util.BasicDiagnostic')/]
						([genModel.getImportedName('org.eclipse.emf.common.util.Diagnostic')/].ERROR,
						 [opClass.genPackage.getImportedValidatorClassName()/].DIAGNOSTIC_SOURCE,
						 [opClass.genPackage.getImportedValidatorClassName()/].[opClass.getOperationID(genOperation)/],
						 [genModel.getImportedName('org.eclipse.emf.ecore.plugin.EcorePlugin')/].INSTANCE.getString("_UI_GenericInvariant_diagnostic", new Object['[]'/] { "[genOperation.getName()/]", [genModel.getImportedName('org.eclipse.emf.ecore.util.EObjectValidator')/].getObjectLabel(this, [ctx/]) }),[genModel.getNonNLS()/][genModel.getNonNLS(2)/]
						 new Object ['[]'/] { this }));
			}
			return false;
		}
		return true;
          [/if]
        [/let]
      [/let]
    [/let]
  [else][if (genOperation.hasInvocationDelegate())]
    [let size : Integer = genOperation.genParameters->size()]
		try {
      [if (genOperation.isVoid()) ]
			[genClass.getUniqueNameUpperCase(genOperation)/]__EINVOCATION_DELEGATE.dynamicInvoke(this, [if (size > 0) ]new [genModel.getImportedName('org.eclipse.emf.common.util.BasicEList')/].UnmodifiableEList<Object>([size/], [genOperation.getParametersArray(genClass)/])[else]null[/if]);
      [else]
			return [if (not isJDK50 and genOperation.isPrimitiveType()) ]([/if]([genOperation.getObjectType(genClass)/])[genClass.getUniqueNameUpperCase(genOperation)/]__EINVOCATION_DELEGATE.dynamicInvoke(this, [if (size > 0) ]new [genModel.getImportedName('org.eclipse.emf.common.util.BasicEList')/].UnmodifiableEList<Object>([size/], [genOperation.getParametersArray(genClass)/])[else]null[/if])[if (not isJDK50 and genOperation.isPrimitiveType()) ]).[genOperation.getPrimitiveValueFunction()/]()[/if];
      [/if]
		}
		catch ([genModel.getImportedName(if (isGWT) then 'org.eclipse.emf.common.util.InvocationTargetException' else 'java.lang.reflect.InvocationTargetException' endif)/] ite) {
			throw new [genModel.getImportedName('org.eclipse.emf.common.util.WrappedException')/](ite);
		}
    [/let]
  [else]
[comment]<%@ include file="Class/implementedGenOperation.TODO.override.javajetinc" fail="alternative" %>[/comment]
[comment]<%@ start %>[/comment]
		// TODO: implement this method
		// Ensure that you remove @generated or mark it @generated NOT
		throw new UnsupportedOperationException();
[comment]<%@ end %><%//Class/implementedGenOperation.todo.override.javajetinc%>[/comment]
  [/if][/if][/if]
	}

[/if]
[comment]<%@ include file="Class/genOperation.insert.javajetinc" fail="silent" %>[/comment]
[comment]<%@ end %><%//Class/implementedGenOperation.override.javajetinc%>[/comment]
[/template]
