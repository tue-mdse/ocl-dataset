[comment encoding = UTF-8
/**
 * <copyright>
 *
 * Copyright (c) 2002-2011 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   IBM - Initial API and implementation
 *   Obeo - Migrate to Acceleo
 *
 * </copyright>
 */
/]
[module pluginxml('http://www.eclipse.org/emf/2002/GenModel')/]

[import org::eclipse::emf::eef::codegen::ecore::services::common /]
[import org::eclipse::emf::eef::codegen::ecore::services::header /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenPackage/]

[template public pluginxml(genModel : GenModel)]
[file (pluginxmlPath(), false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.0"?>

[includeHeaderXml()/]

[if (genModel.bundleManifest)]
<plugin>
[else]
<plugin
      name="%pluginName"
      id="[genModel.editPluginID/]"
      version="1.0.0"
      provider-name="%providerName"
      class="[genModel.getQualifiedEditPluginClassName()/]$Implementation">

   <requires>
  [for (pluginID : String | genModel.getEditRequiredPlugins())]
      <import plugin="[pluginID/]"[if (not pluginID.startsWith('org.eclipse.core.runtime'))] export="true"[/if]/>
  [/for]
   </requires>

   <runtime>
  [if (genModel.runtimeJar)]
      <library name="[genModel.editPluginID/].jar">
  [else]
      <library name=".">
  [/if]
         <export name="*"/>
      </library>
   </runtime>
[/if]
[for (genPackage : GenPackage | genModel.getAllGenPackagesWithClassifiers())]
  [if (not genPackage.genClasses->isEmpty())]

   <extension point="org.eclipse.emf.edit.itemProviderAdapterFactories">
      <factory
            uri="[genPackage.getNSURI()/]"
            class="[genPackage.getQualifiedItemProviderAdapterFactoryClassName()/]"
            supportedTypes=
[for (supported : String | genPackage.getProviderSupportedTypes()) before ('              "') separator (genModel.getLineDelimiter() + '               ') after ('"/>') ][supported/][/for]
   </extension>
    [comment]<%if (genPackage.isChildCreationExtenders()) { Map<GenPackage, Map<GenClass, List<GenClass.ChildCreationData>>> extendedChildCreationData = genPackage.getExtendedChildCreationData();%>
      <%if (!extendedChildCreationData.isEmpty()) {%>[/comment]
[if (genPackage.childCreationExtenders)]
   <extension point="org.eclipse.emf.edit.childCreationExtenders">
        [for (genPackage.getExtendedChildCreationDataEntrySet())]
        [let key : GenPackage = getPackageEntryKey()]
      <extender
            uri="[key.getNSURI()/]"
            class="[genPackage.getQualifiedItemProviderAdapterFactoryClassName()/]$[genPackage.getChildCreationExtenderName(key)/]"/>
        [/let]
        [/for]
   </extension>
[/if]
  [/if]
[/for]
[if (genModel.sameModelEditProject())]
  [for (genPackage : GenPackage | genModel.getAllGenPackagesWithClassifiers())]

   <extension point="org.eclipse.emf.ecore.generated_package">
      <package
            uri="[genPackage.getNSURI()/]"
    [if (genModel.hasLocalGenModel())]
            class="[genPackage.getQualifiedPackageInterfaceName()/]"
            genModel="[genModel.getRelativeGenModelLocation()/]"/>
    [else]
            class="[genPackage.getQualifiedPackageInterfaceName()/]"/>
    [/if]
   </extension>
    [if (genPackage.isContentType())]

   <extension point="org.eclipse.emf.ecore.content_parser">
      <parser
            contentTypeIdentifier="[genPackage.contentTypeIdentifier/]"
            class="[genPackage.getQualifiedEffectiveResourceFactoryClassName()/]"/>
   </extension>

   <extension point="org.eclipse.core.contenttype.contentTypes">
      <content-type
            base-type="[if genPackage.isXMIResource()]org.eclipse.emf.ecore.xmi[else]org.eclipse.core.runtime.xml[/if]"
            file-extensions="[genPackage.fileExtensions/]"
            id="[genPackage.contentTypeIdentifier/]"
            name="%_UI_[genPackage.prefix/]_content_type"
            priority="normal">
         <describer class="org.eclipse.emf.ecore.xmi.impl.RootXMLContentHandlerImpl$Describer">
      [if (genPackage.hasTargetNamespace())]
            <parameter name="namespace" value="[genPackage.getNSURI()/]"/>
      [/if]
      [if (genPackage.isXMIResource())]
            <parameter name="kind" value="xmi"/>
      [/if]
         </describer>
      </content-type>
   </extension>
    [elseif (genPackage.getResource() <> GenResourceKind::None)]

   <extension point="org.eclipse.emf.ecore.extension_parser">
      <parser
            type="[genPackage.getFileExtension()/]"
            class="[genPackage.getQualifiedResourceFactoryClassName()/]"/>
   </extension>
    [/if]
  [/for]
[/if]

</plugin>
[/file]
[/template]

[query public pluginxmlPath (genModel : GenModel) : String = 'plugin.xml' /]