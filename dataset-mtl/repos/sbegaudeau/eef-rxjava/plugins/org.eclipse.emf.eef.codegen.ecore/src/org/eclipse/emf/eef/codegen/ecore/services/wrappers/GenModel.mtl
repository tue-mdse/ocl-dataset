[comment encoding = UTF-8 /]
[module GenModel('http://www.eclipse.org/emf/2002/GenModel', 'http://www.eclipse.org/emf/2002/Ecore')/]

[query public computeMissingUsedGenPackages(genModel : GenModel) : Sequence(GenPackage)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'computeMissingUsedGenPackages()', Sequence{genModel}) /]

[query public findGenClassifier(genModel : GenModel, eClassifier : EClassifier) : GenClassifier
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'findGenClassifier(org.eclipse.emf.ecore.EClassifier)', Sequence{genModel, eClassifier}) /]

[query public findGenPackage(genModel : GenModel, ePackage : EPackage) : GenPackage
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'findGenPackage(org.eclipse.emf.ecore.EPackage)', Sequence{genModel, ePackage}) /]

[query public getAllGenAndUsedGenPackagesWithClassifiers(genModel : GenModel) : Sequence(GenPackage)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getAllGenAndUsedGenPackagesWithClassifiers()', Sequence{genModel}) /]

[query public getAllGenFeatures(genModel : GenModel) : Sequence(GenFeature)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getAllGenFeatures()', Sequence{genModel}) /]

[query public getAllGenPackagesWithClassifiers(genModel : GenModel) : Sequence(GenPackage)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getAllGenPackagesWithClassifiers()', Sequence{genModel}) /]

[query public getAllGenPackagesWithConcreteClasses(genModel : GenModel) : Sequence(GenPackage)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getAllGenPackagesWithConcreteClasses()', Sequence{genModel}) /]

[query public getAllGenUsedAndStaticGenPackagesWithClassifiers(genModel : GenModel) : Sequence(GenPackage)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getAllGenUsedAndStaticGenPackagesWithClassifiers()', Sequence{genModel}) /]

[query public getAllUsedGenPackagesWithClassifiers(genModel : GenModel) : Sequence(GenPackage)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getAllUsedGenPackagesWithClassifiers()', Sequence{genModel}) /]

[query public getCopyrightFieldLiteral(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getCopyrightFieldLiteral()', Sequence{genModel}) /]

[query public getDate(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getDate()', Sequence{genModel}) /]

[query public getDriverNumber(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getDriverNumber()', Sequence{genModel}) /]

[query public getEcoreGenPackage(genModel : GenModel) : GenPackage
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEcoreGenPackage()', Sequence{genModel}) /]

[query public getEditIconsDirectory(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditIconsDirectory()', Sequence{genModel}) /]

[query public getEditModuleInherits(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditModuleInherits()', Sequence{genModel}) /]

[query public getEditModuleSources(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditModuleSources()', Sequence{genModel}) /]

[query public getEditPluginClassName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditPluginClassName()', Sequence{genModel}) /]

[query public getEditPluginDirectory(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditPluginDirectory()', Sequence{genModel}) /]

[query public getEditPluginPackageName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditPluginPackageName()', Sequence{genModel}) /]

[query public getEditProjectDirectory(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditProjectDirectory()', Sequence{genModel}) /]

[query public getEditQualifiedPackageNames(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditQualifiedPackageNames()', Sequence{genModel}) /]

[query public getEditRequiredPlugins(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditRequiredPlugins()', Sequence{genModel}) /]

[query public getEditResourceDelegateImportedPluginClassNames(genModel : GenModel, packageName : String, className : String) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditResourceDelegateImportedPluginClassNames()', Sequence{genModel}) /]

[query public getEditSourceFolders(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditSourceFolders()', Sequence{genModel}) /]

[query public getEditorAdvisorClassName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditorAdvisorClassName()', Sequence{genModel}) /]

[query public getEditorEntryPointClassName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditorEntryPointClassName()', Sequence{genModel}) /]

[query public getEditorHomePageName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditorHomePageName()', Sequence{genModel}) /]

[query public getEditorIconsDirectory(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditorIconsDirectory()', Sequence{genModel}) /]

[query public getEditorModuleInherits(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditorModuleInherits()', Sequence{genModel}) /]

[query public getEditorModuleSources(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditorModuleSources()', Sequence{genModel}) /]

[query public getEditorPluginClassName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditorPluginClassName()', Sequence{genModel}) /]

[query public getEditorPluginDirectory(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditorPluginDirectory()', Sequence{genModel}) /]

[query public getEditorPluginPackageName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditorPluginPackageName()', Sequence{genModel}) /]

[query public getEditorProjectDirectory(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditorProjectDirectory()', Sequence{genModel}) /]

[query public getEditorQualifiedPackageNames(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditorQualifiedPackageNames()', Sequence{genModel}) /]

[query public getEditorRequiredPlugins(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditorRequiredPlugins()', Sequence{genModel}) /]

[query public getEditorSourceFolders(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEditorSourceFolders()', Sequence{genModel}) /]

[query public getEffectiveModelPluginVariables(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEffectiveModelPluginVariables()', Sequence{genModel}) /]

[query public getFilteredAllGenFeatures(genModel : GenModel) : Sequence(GenFeature)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getFilteredAllGenFeatures()', Sequence{genModel}) /]

[query public getImportedName(genModel : GenModel, qualifiedName : String) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getImportedName(java.lang.String)', Sequence{genModel, qualifiedName}) /]

[query public getLineDelimiter(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getLineDelimiter()', Sequence{genModel}) /]

[query public getMainGenModel(genModel : GenModel) : GenModel
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getMainGenModel()', Sequence{genModel}) /]

[query public getMergeRulesLocation(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getMergeRulesLocation()', Sequence{genModel}) /]

[query public getMissingPackages(genModel : GenModel) : Sequence(EPackage)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getMissingPackages()', Sequence{genModel}) /]

[query public getModelModuleInherits(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getModelModuleInherits()', Sequence{genModel}) /]

[query public getModelModuleSources(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getModelModuleSources()', Sequence{genModel}) /]

[query public getModelPluginClassName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getModelPluginClassName()', Sequence{genModel}) /]

[query public getModelPluginPackageName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getModelPluginPackageName()', Sequence{genModel}) /]

[query public getModelProjectDirectory(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getModelProjectDirectory()', Sequence{genModel}) /]

[query public getModelQualifiedPackageNames(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getModelQualifiedPackageNames()', Sequence{genModel}) /]

[query public getModelRequiredPlugins(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getModelRequiredPlugins()', Sequence{genModel}) /]

[query public getModelSourceFolders(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getModelSourceFolders()', Sequence{genModel}) /]

[query public getNonNLS(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getNonNLS()', Sequence{genModel}) /]

[query public getNonNLS(genModel : GenModel, i : Integer) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getNonNLS(int)', Sequence{genModel, i}) /]

[query public getNonNLS(genModel : GenModel, s : String) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getNonNLS(java.lang.String)', Sequence{genModel, s}) /]

[query public getNonNLS(genModel : GenModel, s : String, i : Integer) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getNonNLS(java.lang.String, int)', Sequence{genModel, s, i}) /]

[query public getPropertyCategoryKey(genModel : GenModel, category : String) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getPropertyCategoryKey(java.lang.String)', Sequence{genModel, category}) /]

[query public getPropertyCategories(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getPropertyCategories()', Sequence{genModel}) /]

[query public getQualifiedEditModuleName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getQualifiedEditModuleName()', Sequence{genModel}) /]

[query public getQualifiedEditPluginClassName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getQualifiedEditPluginClassName()', Sequence{genModel}) /]

[query public getQualifiedEditorAdvisorClassName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getQualifiedEditorAdvisorClassName()', Sequence{genModel}) /]

[query public getQualifiedEditorEntryPointClassName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getQualifiedEditorEntryPointClassName()', Sequence{genModel}) /]

[query public getQualifiedEditorModuleName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getQualifiedEditorModuleName()', Sequence{genModel}) /]

[query public getQualifiedEditorPluginClassName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getQualifiedEditorPluginClassName()', Sequence{genModel}) /]

[query public getQualifiedModelModuleName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getQualifiedModelModuleName()', Sequence{genModel}) /]

[query public getQualifiedModelPluginClassName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getQualifiedModelPluginClassName()', Sequence{genModel}) /]

[query public getQualifiedTestSuiteClassName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getQualifiedTestSuiteClassName()', Sequence{genModel}) /]

[query public getRelativeGenModelLocation(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getRelativeGenModelLocation()', Sequence{genModel}) /]

[query public getRootImplementsInterfaceGenClass(genModel : GenModel) : GenClass
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getRootImplementsInterfaceGenClass()', Sequence{genModel}) /]

[query public getStaticGenPackages(genModel : GenModel) : Sequence(GenPackage)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getStaticGenPackages()', Sequence{genModel}) /]

[query public getTestSuiteClassName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getTestSuiteClassName()', Sequence{genModel}) /]

[query public getTestSuitePackageName(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getTestSuitePackageName()', Sequence{genModel}) /]

[query public getTestsProjectDirectory(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getTestsProjectDirectory()', Sequence{genModel}) /]

[query public getTestsQualifiedPackageNames(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getTestsQualifiedPackageNames()', Sequence{genModel}) /]

[query public getTestsRequiredPlugins(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getTestsRequiredPlugins()', Sequence{genModel}) /]

[query public getTestsSourceFolders(genModel : GenModel) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getTestsSourceFolders()', Sequence{genModel}) /]

[query public getXMLEncodingChoices(genModel : GenModel) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getXMLEncodingChoices()', Sequence{genModel}) /]

[query public getXMLNamespaceGenPackage(genModel : GenModel) : GenPackage
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getXMLNamespaceGenPackage()', Sequence{genModel}) /]

[query public getXMLTypeGenPackage(genModel : GenModel) : GenPackage
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getXMLTypeGenPackage()', Sequence{genModel}) /]

[query public hasCopyrightField(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'hasCopyrightField()', Sequence{genModel}) /]

[query public hasEditSupport(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'hasEditSupport()', Sequence{genModel}) /]

[query public hasEditorSupport(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'hasEditorSupport()', Sequence{genModel}) /]

[query public hasLocalGenModel(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'hasLocalGenModel()', Sequence{genModel}) /]

[query public hasModelPluginClass(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'hasModelPluginClass()', Sequence{genModel}) /]

[query public hasPluginSupport(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'hasPluginSupport()', Sequence{genModel}) /]

[query public hasTestSuiteClass(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'hasTestSuiteClass()', Sequence{genModel}) /]

[query public hasTestSupport(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'hasTestSupport()', Sequence{genModel}) /]

[query public hasXMLDependency(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'hasXMLDependency()', Sequence{genModel}) /]

[query public isBooleanFlagsEnabled(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'isBooleanFlagsEnabled()', Sequence{genModel}) /]

[query public isDynamicDelegation(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'isDynamicDelegation()', Sequence{genModel}) /]

[query public isSetEditDirectory(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'isSetEditDirectory()', Sequence{genModel}) /]

[query public isSetEditPluginClass(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'isSetEditPluginClass()', Sequence{genModel}) /]

[query public isSetEditorDirectory(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'isSetEditorDirectory()', Sequence{genModel}) /]

[query public isSetEditorPluginClass(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'isSetEditorPluginClass()', Sequence{genModel}) /]

[query public isSetRuntimeVersion(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'isSetRuntimeVersion()', Sequence{genModel}) /]

[query public isSetTestSuiteClass(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'isSetTestSuiteClass()', Sequence{genModel}) /]

[query public isSetTestsDirectory(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'isSetTestsDirectory()', Sequence{genModel}) /]

[query public isSuppressedAnnotation(genModel : GenModel, source : String) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'isSuppressedAnnotation(java.lang.String)', Sequence{genModel, source}) /]

[query public isValidateModel(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'isValidateModel()', Sequence{genModel}) /]

[query public isVirtualDelegation(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'isVirtualDelegation()', Sequence{genModel}) /]

[query public needsRuntimeCompatibility(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'needsRuntimeCompatibility()', Sequence{genModel}) /]

[query public reconcile(genModel : GenModel, oldGenModelVersion : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'reconcile(org.eclipse.emf.codegen.ecore.genmodel.GenModel)', Sequence{genModel, oldGenModelVersion}) /]

[query public sameEditEditorProject(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'sameEditEditorProject()', Sequence{genModel}) /]

[query public sameModelEditProject(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'sameModelEditProject()', Sequence{genModel}) /]

[query public sameModelEditorProject(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'sameModelEditorProject()', Sequence{genModel}) /]

[query public sameModelTestsProject(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'sameModelTestsProject()', Sequence{genModel}) /]

[query public useClassOverrideAnnotation(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'useClassOverrideAnnotation()', Sequence{genModel}) /]

[query public useGenerics(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'useGenerics()', Sequence{genModel}) /]

[comment
    Override of services for super interface GenBase 
/]
[query public canGenerate(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'canGenerate()', Sequence{genModel}) /]

[query public canGenerateEdit(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'canGenerateEdit()', Sequence{genModel}) /]

[query public canGenerateEditor(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'canGenerateEditor()', Sequence{genModel}) /]

[query public canGenerateSchema(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'canGenerateSchema()', Sequence{genModel}) /]

[query public canGenerateTests(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'canGenerateTests()', Sequence{genModel}) /]

[query public capName(genModel : GenModel, name : String) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'capName(String)', Sequence{genModel, name}) /]

[query public getCopyright(genModel : GenModel, indentation : String) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getCopyright(java.lang.String)', Sequence{genModel, indentation}) /]

[query public getDocumentation(genModel : GenModel, indentation : String) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getDocumentation(java.lang.String)', Sequence{genModel, indentation}) /]

[query public getEcoreModelElement(genModel : GenModel) : EModelElement
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getEcoreModelElement()', Sequence{genModel}) /]

[query public getGenAnnotation(genModel : GenModel, source : String) : GenAnnotation
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'getGenAnnotation(java.lang.String)', Sequence{genModel, source}) /]

[query public hasCopyright(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'hasCopyright()', Sequence{genModel}) /]

[query public hasDocumentation(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'hasDocumentation()', Sequence{genModel}) /]

[query public reconcile(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'reconcile()', Sequence{genModel}) /]

[query public safeName(genModel : GenModel, name : String) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'safeName(java.lang.String)', Sequence{genModel, name}) /]

[query public uncapName(genModel : GenModel, name : String) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'uncapName(java.lang.String)', Sequence{genModel, name}) /]

[query public uncapPrefixedName(genModel : GenModel, input : String) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'uncapPrefixedName(java.lang.String)', Sequence{genModel, input}) /]




[query public getLocale(genModel : GenModel) : OclAny
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.impl.GenModelImpl', 'getLocale()', Sequence{genModel}) /]

[query public addImport(genModel : GenModel, qualifiedName : String) : String
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'addImport(org.eclipse.emf.codegen.ecore.genmodel.GenModel, java.lang.String)', Sequence{genModel, qualifiedName}) /]

[query public addPseudoImport(genModel : GenModel, qualifiedName : String) : String
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'addPseudoImport(org.eclipse.emf.codegen.ecore.genmodel.GenModel, java.lang.String)', Sequence{genModel, qualifiedName}) /]

[query public isJDK50(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'isJDK50(org.eclipse.emf.codegen.ecore.genmodel.GenModel)', Sequence{genModel}) /]

[query public isEMF26(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'isEMF26(org.eclipse.emf.codegen.ecore.genmodel.GenModel)', Sequence{genModel}) /]

[query public isEMF25(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'isEMF25(org.eclipse.emf.codegen.ecore.genmodel.GenModel)', Sequence{genModel}) /]

[query public isEMF24(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'isEMF24(org.eclipse.emf.codegen.ecore.genmodel.GenModel)', Sequence{genModel}) /]

[query public getIndentation(genModel : GenModel) : String
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'getIndentation(org.eclipse.emf.codegen.ecore.genmodel.GenModel)', Sequence{genModel}) /]

[comment ************ IMPORT MANAGER ****************************************** /]

[**
 * Returns the imports to insert at the relevant position in the output file.
 * @param genModel The current GenModel.
*]
[query public genSortedImports(genModel : GenModel) : String
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'genSortedImports(org.eclipse.emf.codegen.ecore.genmodel.GenModel)', Sequence{genModel}) /]

[**
 * Creates a new importManager and sets it on the current GenModel, to manage the imports
 * of the class currently being generated.
 * @param genModel The current GenModel.
 * @param packageName Qualified package name of the class being generated.
 * @param className Name of the class being generated.
*]
[query public initializeImportManager(genModel : GenModel, packageName : String, className : String) : String
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'initializeImportManager(org.eclipse.emf.codegen.ecore.genmodel.GenModel, java.lang.String, java.lang.String)', Sequence{genModel, packageName, className}) /]

[**
 * Creates a new importManager and sets it on the current GenModel, to manage the imports
 * of the class currently being generated.
 * @param genModel The current GenModel.
 * @param genPackage The current GenPackage.
 * @param packageName Qualified package name of the class being generated.
 * @param className Name of the class being generated.
*]
[query public initializeImportManager(genModel : GenModel, genPackage : GenPackage, packageName : String, className : String) : String
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'initializeImportManager(org.eclipse.emf.codegen.ecore.genmodel.GenModel, org.eclipse.emf.codegen.ecore.genmodel.GenPackage, java.lang.String, java.lang.String)', Sequence{genModel, genPackage, packageName, className}) /]

[query public toStringLiteral(genModel : GenModel, literal : String) : String
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'toStringLiteral(org.eclipse.emf.codegen.ecore.genmodel.GenModel, java.lang.String)', Sequence{genModel, literal}) /]

[query public getAllExtendedMetaDataAttributes(genModel : GenModel, eClass : EClass) : Sequence(EStructuralFeature)
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'getAllExtendedMetaDataAttributes(org.eclipse.emf.codegen.ecore.genmodel.GenModel, org.eclipse.emf.ecore.EClass)', Sequence{genModel, eClass}) /]

[query public getAllExtendedMetaDataElements(genModel : GenModel, eClass : EClass) : Sequence(EStructuralFeature)
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'getAllExtendedMetaDataElements(org.eclipse.emf.codegen.ecore.genmodel.GenModel, org.eclipse.emf.ecore.EClass)', Sequence{genModel, eClass}) /]

[query public getExtendedMetaDataName(genModel : GenModel, eFeature : EStructuralFeature) : String
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'getExtendedMetaDataName(org.eclipse.emf.codegen.ecore.genmodel.GenModel, org.eclipse.emf.ecore.EStructuralFeature)', Sequence{genModel, eFeature}) /]

[query public getExtendedMetaDataNamespace(genModel : GenModel, eFeature : EStructuralFeature) : String
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'getExtendedMetaDataNamespace(org.eclipse.emf.codegen.ecore.genmodel.GenModel, org.eclipse.emf.ecore.EStructuralFeature)', Sequence{genModel, eFeature}) /]

[query public getExtendedMetaDataNamespaceAsLiteral(genModel : GenModel, eFeature : EStructuralFeature) : String
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'getExtendedMetaDataNamespaceAsLiteral(org.eclipse.emf.codegen.ecore.genmodel.GenModel, org.eclipse.emf.ecore.EStructuralFeature)', Sequence{genModel, eFeature}) /]

[query public supportsComposition(genModel : GenModel) : Boolean
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'supportsComposition(org.eclipse.emf.codegen.ecore.genmodel.GenModel)', Sequence{genModel}) /]

[query public formatConstraint(genModel : GenModel, constraint : String) : String
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'formatConstraint(org.eclipse.emf.codegen.ecore.genmodel.GenModel, java.lang.String)', Sequence{genModel, constraint}) /]

[query public upperNameConstraint(constraint : String) : String
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenModelWrapper', 'upperNameConstraint(java.lang.String)', Sequence{constraint}) /]

[template public addImportHere(genModel : GenModel, qualifiedName : String)]
[invoke('org.eclipse.emf.codegen.ecore.genmodel.GenModel', 'addPseudoImport(java.lang.String)', Sequence{genModel, qualifiedName}) /]import [qualifiedName/];[/template]
