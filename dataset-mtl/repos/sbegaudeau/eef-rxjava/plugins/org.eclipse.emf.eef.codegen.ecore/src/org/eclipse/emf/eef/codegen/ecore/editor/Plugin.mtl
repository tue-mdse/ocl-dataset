[comment encoding = UTF-8
/**
 * <copyright>
 *
 * Copyright (c) 2002-2011 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   IBM - Initial API and implementation
 *   Obeo - Migrate to Acceleo
 *
 * </copyright>
 */
/]
[module Plugin('http://www.eclipse.org/emf/2002/GenModel')/]

[import org::eclipse::emf::eef::codegen::ecore::services::header /]
[import org::eclipse::emf::eef::codegen::ecore::services::common /]
[import org::eclipse::emf::eef::codegen::ecore::services::StringUtil /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClass /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenFeature /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenEnum /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenEnumLiteral /]

[template public Plugin(genModel : GenModel) { packageName : String = genModel.getEditorPluginPackageName() ; className : String = genModel.getEditorPluginClassName() }]
[genModel.initializeImportManager(packageName, className)/]
[genModel.addImport('org.eclipse.emf.common.EMFPlugin')/]
[genModel.addImport('org.eclipse.emf.common.util.ResourceLocator')/]

[file (genModel.editorPath(packageName, className), false, 'UTF-8')]
[includeHeader()/]
package [packageName/];
[let content : String = genModel.fileContent(genModel, packageName, className)]
[genModel.genSortedImports()/]

[content/]
[/let]
[/file]
[/template]

[template public fileContent(genModel : GenModel, packageName : String, className : String)]
/**
 * This is the central singleton for the [genModel.modelName/] editor plugin.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public final class [className/] extends EMFPlugin
{
[if (genModel.hasCopyrightField())]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final [genModel.getImportedName('java.lang.String')/] copyright = [genModel.getCopyrightFieldLiteral()/];[genModel.getNonNLS()/]
	
[/if]
	/**
	 * Keep track of the singleton.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final [className/] INSTANCE = new [className/]();
	
[if (genModel.runtimePlatform <> GenRuntimePlatform::GWT)]
	/**
	 * Keep track of the singleton.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static Implementation plugin;

[/if]
	/**
	 * Create the instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public [className/]()
	{
		super
			(new ResourceLocator [genModel.genSquareBrackets('')/] 
			{
[for (pluginClassName : String | genModel.getEditResourceDelegateImportedPluginClassNames(packageName, className))]
				[pluginClassName/].INSTANCE,
[/for]
			});
	}

	/**
	 * Returns the singleton instance of the Eclipse plugin.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the singleton instance.
	 * @generated
	 */
[if (genModel.useClassOverrideAnnotation())]
	@Override
[/if]
	public ResourceLocator getPluginResourceLocator()
	{
[if (genModel.runtimePlatform = GenRuntimePlatform::GWT)]
		return null;
[else]
		return plugin;
[/if]
	}
	
[if (genModel.runtimePlatform <> GenRuntimePlatform::GWT)]
	/**
	 * Returns the singleton instance of the Eclipse plugin.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the singleton instance.
	 * @generated
	 */
	public static Implementation getPlugin()
	{
		return plugin;
	}
	
	/**
	 * The actual implementation of the Eclipse <b>Plugin</b>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class Implementation extends [genModel.getImportedName('org.eclipse.emf.common.ui.EclipseUIPlugin')/]
	{
		/**
		 * Creates an instance.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
[if (genModel.needsRuntimeCompatibility())]
		 * @param descriptor the description of the plugin.
[/if]
		 * @generated
		 */
		public Implementation([if (genModel.needsRuntimeCompatibility())][genModel.getImportedName('org.eclipse.core.runtime.IPluginDescriptor')/] descriptor[/if])
		{
			super([if (genModel.needsRuntimeCompatibility())]descriptor[/if]);
	
			// Remember the static instance.
			//
			plugin = this;
		}
	}

[/if]
}
[/template]

