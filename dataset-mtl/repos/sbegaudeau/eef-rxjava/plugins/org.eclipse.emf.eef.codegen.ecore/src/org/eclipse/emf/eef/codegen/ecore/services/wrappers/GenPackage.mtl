[comment encoding = UTF-8 /]
[module GenPackage('http://www.eclipse.org/emf/2002/GenModel', 'http://www.eclipse.org/emf/2002/Ecore')/]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]

[query public getActionBarContributorClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getActionBarContributorClassName()', Sequence{genPackage}) /]

[query public getAdapterDelegatePackages(genPackage : GenPackage) : Sequence(GenPackage)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getAdapterDelegatePackages()', Sequence{genPackage}) /]

[query public getAdapterDelegateSuperClasses(genPackage : GenPackage) : Sequence(GenClass)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getAdapterDelegateSuperClasses()', Sequence{genPackage}) /]

[query public getAdapterFactoryClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getAdapterFactoryClassName()', Sequence{genPackage}) /]

[query public getAdapterFactoryDelegateName(genPackage : GenPackage, genDelegate : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getAdapterFactoryDelegateName(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage, genDelegate}) /]

[query public getAllAnnotations(genPackage : GenPackage) : Sequence(EAnnotation)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getAllAnnotations()', Sequence{genPackage}) /]

[query public getAllGenDataTypes(genPackage : GenPackage) : Sequence(GenDataType)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getAllGenDataTypes()', Sequence{genPackage}) /]

[query public getAllGenFeatures(genPackage : GenPackage) : Sequence(GenFeature)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getAllGenFeatures()', Sequence{genPackage}) /]

[query public getAllNestedAnnotations(genPackage : GenPackage, eAnnotation : EAnnotation) : Sequence(EAnnotation)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getAllNestedAnnotations(org.eclipse.emf.ecore.EAnnotation)', Sequence{genPackage, eAnnotation}) /]

[query public getAllSwitchGenClasses(genPackage : GenPackage) : Sequence(GenClass)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getAllSwitchGenClasses()', Sequence{genPackage}) /]

[query public getAllValidatorBaseGenPackages(genPackage : GenPackage) : Sequence(GenPackage)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getAllValidatorBaseGenPackages()', Sequence{genPackage}) /]

[query public getAnnotatedModelElementAccessor(genPackage : GenPackage, eAnnotation : EAnnotation) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getAnnotatedModelElementAccessor(org.eclipse.emf.ecore.EAnnotation)', Sequence{genPackage, eAnnotation}) /]

[query public getAnnotationSourceIdentifier(genPackage : GenPackage, annotationSource : String) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getAnnotationSourceIdentifier(java.lang.String)', Sequence{genPackage, annotationSource}) /]

[query public getAnnotationSources(genPackage : GenPackage) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getAnnotationSources()', Sequence{genPackage}) /]

[query public getBasicPackageName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getBasicPackageName()', Sequence{genPackage}) /]

[query public getChildCreationExtenderName(genPackage : GenPackage, genPackage2 : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getChildCreationExtenderName(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage, genPackage2}) /]

[query public getClassPackageName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getClassPackageName()', Sequence{genPackage}) /]

[query public getClassUniqueName(genPackage : GenPackage, genClass : GenClass) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getClassUniqueName(org.eclipse.emf.codegen.ecore.genmodel.GenClass)', Sequence{genPackage, genClass}) /]

[query public getClassifierID(genPackage : GenPackage, genClassifier : GenClassifier) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getClassifierID(org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)', Sequence{genPackage, genClassifier}) /]

[query public getClassifierValue(genPackage : GenPackage, genClassifier : GenClassifier) : Integer
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getClassifierValue(org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)', Sequence{genPackage, genClassifier}) /]

[query public getDocumentRoot(genPackage : GenPackage) : GenClass
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getDocumentRoot()', Sequence{genPackage}) /]

[query public getEditPluginClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getEditPluginClassName()', Sequence{genPackage}) /]

[query public getEditorClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getEditorClassName()', Sequence{genPackage}) /]

[query public getEditorPluginClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getEditorPluginClassName()', Sequence{genPackage}) /]

[query public getExampleClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getExampleClassName()', Sequence{genPackage}) /]

[comment][query public getExtendedChildCreationData(genPackage : GenPackage) : Map
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getExtendedChildCreationData()', Sequence{genPackage}) /][/comment]

[query public getFactoryClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getFactoryClassName()', Sequence{genPackage}) /]

[query public getFactoryInstanceName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getFactoryInstanceName()', Sequence{genPackage}) /]

[query public getFactoryInterfaceName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getFactoryInterfaceName()', Sequence{genPackage}) /]

[query public getFactoryName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getFactoryName()', Sequence{genPackage}) /]

[query public getFileExtension(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getFileExtension()', Sequence{genPackage}) /]

[query public getImportedActionBarContributorClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedActionBarContributorClassName()', Sequence{genPackage}) /]

[query public getImportedAdapterFactoryClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedAdapterFactoryClassName()', Sequence{genPackage}) /]

[query public getImportedEditPluginClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedEditPluginClassName()', Sequence{genPackage}) /]

[query public getImportedEditorClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedEditorClassName()', Sequence{genPackage}) /]

[query public getImportedEditorPluginClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedEditorPluginClassName()', Sequence{genPackage}) /]

[query public getImportedFactoryClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedFactoryClassName()', Sequence{genPackage}) /]

[query public getImportedFactoryInterfaceName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedFactoryInterfaceName()', Sequence{genPackage}) /]

[query public getImportedItemProviderAdapterFactoryClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedItemProviderAdapterFactoryClassName()', Sequence{genPackage}) /]

[query public getImportedModelWizardClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedModelWizardClassName()', Sequence{genPackage}) /]

[query public getImportedPackageClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedPackageClassName()', Sequence{genPackage}) /]

[query public getImportedPackageInterfaceName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedPackageInterfaceName()', Sequence{genPackage}) /]

[query public getImportedResourceBaseClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedResourceBaseClassName()', Sequence{genPackage}) /]

[query public getImportedResourceClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedResourceClassName()', Sequence{genPackage}) /]

[query public getImportedResourceFactoryBaseClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedResourceFactoryBaseClassName()', Sequence{genPackage}) /]

[query public getImportedResourceFactoryClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedResourceFactoryClassName()', Sequence{genPackage}) /]

[query public getImportedTestSuiteClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedTestSuiteClassName()', Sequence{genPackage}) /]

[query public getImportedValidatorClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedValidatorClassName()', Sequence{genPackage}) /]

[query public getImportedXMLProcessorBaseClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getImportedXMLProcessorBaseClassName()', Sequence{genPackage}) /]

[query public getInterfacePackageName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getInterfacePackageName()', Sequence{genPackage}) /]

[query public getItemProviderAdapterFactoryClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getItemProviderAdapterFactoryClassName()', Sequence{genPackage}) /]

[query public getJavaLangConflicts(genPackage : GenPackage) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getJavaLangConflicts()', Sequence{genPackage}) /]

[query public getLocalClassifierIndex(genPackage : GenPackage, genClassifier : GenClassifier) : Integer
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getLocalClassifierIndex(org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)', Sequence{genPackage, genClassifier}) /]

[query public getModelIconFileName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getModelIconFileName()', Sequence{genPackage}) /]

[query public getModelInfo(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getModelInfo()', Sequence{genPackage}) /]

[query public getModelWizardClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getModelWizardClassName()', Sequence{genPackage}) /]

[query public getModelWizardIconFileName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getModelWizardIconFileName()', Sequence{genPackage}) /]

[query public getNSName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getNSName()', Sequence{genPackage}) /]

[query public getNSURI(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getNSURI()', Sequence{genPackage}) /]

[query public getOrderedGenClasses(genPackage : GenPackage) : Sequence(GenClass)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getOrderedGenClasses()', Sequence{genPackage}) /]

[query public getOrderedGenClassifiers(genPackage : GenPackage) : Sequence(GenClassifier)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getOrderedGenClassifiers()', Sequence{genPackage}) /]

[query public getPackageBuildInterDependencies(genPackage : GenPackage) : Sequence(GenPackage)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getPackageBuildInterDependencies()', Sequence{genPackage}) /]

[query public getPackageClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getPackageClassName()', Sequence{genPackage}) /]

[query public getPackageInitializationDependencies(genPackage : GenPackage) : Sequence(GenPackage)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getPackageInitializationDependencies()', Sequence{genPackage}) /]

[query public getPackageInstanceVariable(genPackage : GenPackage, genPackage2 : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getPackageInstanceVariable(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage, genPackage2}) /]

[query public getPackageInterDependencies(genPackage : GenPackage) : Sequence(GenPackage)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getPackageInterDependencies()', Sequence{genPackage}) /]

[query public getPackageInterfaceName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getPackageInterfaceName()', Sequence{genPackage}) /]

[query public getPackageLoadInterDependencies(genPackage : GenPackage) : Sequence(GenPackage)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getPackageLoadInterDependencies()', Sequence{genPackage}) /]

[query public getPackageName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getPackageName()', Sequence{genPackage}) /]

[query public getPackageSimpleDependencies(genPackage : GenPackage) : Sequence(GenPackage)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getPackageSimpleDependencies()', Sequence{genPackage}) /]

[query public getPresentationPackageName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getPresentationPackageName()', Sequence{genPackage}) /]

[query public getProviderPackageName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getProviderPackageName()', Sequence{genPackage}) /]

[query public getProviderSupportedTypes(genPackage : GenPackage) : Sequence(String)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getProviderSupportedTypes()', Sequence{genPackage}) /]

[query public getQualifiedActionBarContributorClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedActionBarContributorClassName()', Sequence{genPackage}) /]

[query public getQualifiedAdapterFactoryClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedAdapterFactoryClassName()', Sequence{genPackage}) /]

[query public getQualifiedContentTypeIdentifier(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedContentTypeIdentifier()', Sequence{genPackage}) /]

[query public getQualifiedEFactoryInstanceAccessor(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedEFactoryInstanceAccessor()', Sequence{genPackage}) /]

[query public getQualifiedEFactoryInternalInstanceAccessor(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedEFactoryInternalInstanceAccessor()', Sequence{genPackage}) /]

[query public getQualifiedEditPluginClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedEditPluginClassName()', Sequence{genPackage}) /]

[query public getQualifiedEditorClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedEditorClassName()', Sequence{genPackage}) /]

[query public getQualifiedEditorPluginClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedEditorPluginClassName()', Sequence{genPackage}) /]

[query public getQualifiedEffectiveResourceFactoryClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedEffectiveResourceFactoryClassName()', Sequence{genPackage}) /]

[query public getQualifiedExampleClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedExampleClassName()', Sequence{genPackage}) /]

[query public getQualifiedFactoryClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedFactoryClassName()', Sequence{genPackage}) /]

[query public getQualifiedFactoryInstanceAccessor(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedFactoryInstanceAccessor()', Sequence{genPackage}) /]

[query public getQualifiedFactoryInterfaceName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedFactoryInterfaceName()', Sequence{genPackage}) /]

[query public getQualifiedItemProviderAdapterFactoryClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedItemProviderAdapterFactoryClassName()', Sequence{genPackage}) /]

[query public getQualifiedModelWizardClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedModelWizardClassName()', Sequence{genPackage}) /]

[query public getQualifiedPackageClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedPackageClassName()', Sequence{genPackage}) /]

[query public getQualifiedPackageInterfaceName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedPackageInterfaceName()', Sequence{genPackage}) /]

[query public getQualifiedPackageName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedPackageName()', Sequence{genPackage}) /]

[query public getQualifiedResourceClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedResourceClassName()', Sequence{genPackage}) /]

[query public getQualifiedResourceFactoryClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedResourceFactoryClassName()', Sequence{genPackage}) /]

[query public getQualifiedSwitchClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedSwitchClassName()', Sequence{genPackage}) /]

[query public getQualifiedTestSuiteClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedTestSuiteClassName()', Sequence{genPackage}) /]

[query public getQualifiedValidatorClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedValidatorClassName()', Sequence{genPackage}) /]

[query public getQualifiedXMLProcessorClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getQualifiedXMLProcessorClassName()', Sequence{genPackage}) /]

[comment][query public getReferenceData(genPackage : GenPackage, eAnnotation : EAnnotation) : Sequence(AnnotationReferenceData)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getReferenceData(org.eclipse.emf.ecore.EAnnotation)', Sequence{genPackage, eAnnotation}) /][/comment]

[query public getReflectionClassPackageName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getReflectionClassPackageName()', Sequence{genPackage}) /]

[query public getReflectionPackageName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getReflectionPackageName()', Sequence{genPackage}) /]

[query public getResource(genPackage : GenPackage) : GenResourceKind
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getResource()', Sequence{genPackage}) /]

[query public getResourceClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getResourceClassName()', Sequence{genPackage}) /]

[query public getResourceFactoryClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getResourceFactoryClassName()', Sequence{genPackage}) /]

[query public getRootClass(genPackage : GenPackage) : GenClass
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getRootClass()', Sequence{genPackage}) /]

[query public getRootFeature(genPackage : GenPackage) : GenFeature
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getRootFeature()', Sequence{genPackage}) /]

[query public getRootGenPackage(genPackage : GenPackage) : GenPackage
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getRootGenPackage()', Sequence{genPackage}) /]

[query public getSerializedPackageFilename(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getSerializedPackageFilename()', Sequence{genPackage}) /]

[query public getSubGenPackages(genPackage : GenPackage) : Sequence(GenPackage)
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getSubGenPackages()', Sequence{genPackage}) /]

[query public getSuperGenPackage(genPackage : GenPackage) : GenPackage
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getSuperGenPackage()', Sequence{genPackage}) /]

[query public getSwitchClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getSwitchClassName()', Sequence{genPackage}) /]

[query public getTestSuiteClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getTestSuiteClassName()', Sequence{genPackage}) /]

[query public getTestsPackageName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getTestsPackageName()', Sequence{genPackage}) /]

[query public getUncapAdapterFactoryClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getUncapAdapterFactoryClassName()', Sequence{genPackage}) /]

[query public getUncapAdapterFactoryDelegateName(genPackage : GenPackage, genDelegate : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getUncapAdapterFactoryDelegateName(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage, genDelegate}) /]

[query public getUncapFactoryInterfaceName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getUncapFactoryInterfaceName()', Sequence{genPackage}) /]

[query public getUncapFactoryName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getUncapFactoryName()', Sequence{genPackage}) /]

[query public getUncapPackageInterfaceName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getUncapPackageInterfaceName()', Sequence{genPackage}) /]

[query public getUncapPackageName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getUncapPackageName()', Sequence{genPackage}) /]

[query public getUtilitiesPackageName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getUtilitiesPackageName()', Sequence{genPackage}) /]

[query public getValidatorClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getValidatorClassName()', Sequence{genPackage}) /]

[query public getValidatorPackageUniqueSafeName(genPackage : GenPackage, genPackage2 : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getValidatorPackageUniqueSafeName(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage, genPackage2}) /]

[query public getXMLProcessorClassName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getXMLProcessorClassName()', Sequence{genPackage}) /]

[query public hasClassifiers(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'hasClassifiers()', Sequence{genPackage}) /]

[query public hasClassifiers(genPackage : GenPackage, traverseNestedPackages : Boolean) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'hasClassifiers(boolean)', Sequence{genPackage, traverseNestedPackages}) /]

[query public hasConcreteClasses(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'hasConcreteClasses()', Sequence{genPackage}) /]

[query public hasConstraints(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'hasConstraints()', Sequence{genPackage}) /]

[query public hasDocumentRoot(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'hasDocumentRoot()', Sequence{genPackage}) /]

[query public hasExtendedMetaData(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'hasExtendedMetaData()', Sequence{genPackage}) /]

[query public hasInterfaceImplConflict(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'hasInterfaceImplConflict()', Sequence{genPackage}) /]

[query public hasInvariantExpressions(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'hasInvariantExpressions()', Sequence{genPackage}) /]

[query public hasJavaLangConflict(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'hasJavaLangConflict()', Sequence{genPackage}) /]

[query public hasStatefulProvider(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'hasStatefulProvider()', Sequence{genPackage}) /]

[query public hasTargetNamespace(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'hasTargetNamespace()', Sequence{genPackage}) /]

[query public hasTests(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'hasTests()', Sequence{genPackage}) /]

[query public hasXMLMap(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'hasXMLMap()', Sequence{genPackage}) /]

[query public isContentType(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'isContentType()', Sequence{genPackage}) /]

[query public isEcorePackage(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'isEcorePackage()', Sequence{genPackage}) /]

[query public isLoadedInitialization(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'isLoadedInitialization()', Sequence{genPackage}) /]

[query public isLoadingInitialization(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'isLoadingInitialization()', Sequence{genPackage}) /]

[query public isMultipleFileExtensions(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'isMultipleFileExtensions()', Sequence{genPackage}) /]

[query public isXMIResource(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'isXMIResource()', Sequence{genPackage}) /]

[query public reconcile(genPackage : GenPackage, oldGenPackageVersion : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'reconcile(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage, oldGenPackageVersion}) /]

[comment
    Override of services for super interface GenBase 
/]
[query public canGenerate(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'canGenerate()', Sequence{genPackage}) /]

[query public canGenerateEdit(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'canGenerateEdit()', Sequence{genPackage}) /]

[query public canGenerateEditor(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'canGenerateEditor()', Sequence{genPackage}) /]

[query public canGenerateSchema(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'canGenerateSchema()', Sequence{genPackage}) /]

[query public canGenerateTests(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'canGenerateTests()', Sequence{genPackage}) /]

[query public capName(genPackage : GenPackage, name : String) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'capName(java.lang.String)', Sequence{genPackage, name}) /]

[query public getCopyright(genPackage : GenPackage, indentation : String) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getCopyright(java.lang.String)', Sequence{genPackage, indentation}) /]

[query public getDocumentation(genPackage : GenPackage, indentation : String) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getDocumentation(java.lang.String)', Sequence{genPackage, indentation}) /]

[query public getEcoreModelElement(genPackage : GenPackage) : EModelElement
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getEcoreModelElement()', Sequence{genPackage}) /]

[query public getGenAnnotation(genPackage : GenPackage, source : String) : GenAnnotation
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'getGenAnnotation(java.lang.String)', Sequence{genPackage, source}) /]

[query public hasCopyright(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'hasCopyright()', Sequence{genPackage}) /]

[query public hasDocumentation(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'hasDocumentation()', Sequence{genPackage}) /]

[query public reconcile(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'reconcile()', Sequence{genPackage}) /]

[query public safeName(genPackage : GenPackage, name : String) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'safeName(java.lang.String)', Sequence{genPackage, name}) /]

[query public uncapName(genPackage : GenPackage, name : String) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'uncapName(java.lang.String)', Sequence{genPackage, name}) /]

[query public uncapPrefixedName(genPackage : GenPackage, input : String) : String
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'uncapPrefixedName(java.lang.String)', Sequence{genPackage, input}) /]








[comment special handling for avoiding NPE due to importManager /]
[query public isLiteralsInterface(genPackage : GenPackage) : Boolean = genPackage.literalsInterface/]









[query public getExtendedChildCreationDataEntrySet(genPackage : GenPackage) : Set(OclAny)
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'getExtendedChildCreationDataEntrySet(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage}) /]

[query public getPackageEntryKey(oclAny : OclAny) : GenPackage
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'getPackageEntryKey(java.lang.Object)', Sequence{oclAny}) /]

[query public getPackageEntryValueEntrySet(oclAny : OclAny) : Set(OclAny)
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'getPackageEntryValueEntrySet(java.lang.Object)', Sequence{oclAny}) /]

[query public getClassEntryChildCreationData(oclAny : OclAny) : Set(OclAny)
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'getClassEntryChildCreationData(java.lang.Object)', Sequence{oclAny}) /]

[query public getClassEntryKey(oclAny : OclAny) : GenClass
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'getClassEntryKey(java.lang.Object)', Sequence{oclAny}) /]

[comment 
	This query is used to reproduce getClassUniqueName(null), used in EMF,
	but which cannot be translated "as is" with Acceleo
	because of a bug in OCL when handling 'null' in sequences.
/]
[query public getDefaultClassUniqueName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'getDefaultClassUniqueName(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage}) /]

[comment For Icons generation /]
[query public generateCreateChildIcons(genPackage : GenPackage) : OclVoid
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'generateCreateChildIcons(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage}) /]

[query public generateModelIcon(genPackage : GenPackage) : OclVoid
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'generateModelIcon(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage}) /]

[query public generateModelWizardIcon(genPackage : GenPackage) : OclVoid
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'generateModelWizardIcon(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage}) /]

[comment
	Flags this genPackage as needing an addEOperation method
 /]
[query public requireAddEOperation(genPackage : GenPackage) : OclVoid
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'requireAddEOperation(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage})/]

[comment
	Flags this genPackage as needing an addEParameter method
 /]
[query public requireAddEParameter(genPackage : GenPackage) : OclVoid
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'requireAddEParameter(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage})/]

[query public needsAddEOperation(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'needsAddEOperation(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage})/]

[query public needsAddEParameter(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'needsAddEParameter(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage})/]

[query public prepareCache(genPackage : GenPackage) : OclVoid
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'prepareCache()', Sequence{genPackage})/]

[query public clearCache(genPackage : GenPackage) : OclVoid
	= invoke('org.eclipse.emf.codegen.ecore.genmodel.GenPackage', 'clearCache()', Sequence{genPackage})/]

[query public isXMLTypePackage(genPackage : GenPackage) : Boolean
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'isXMLTypePackage(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage})/]

[comment We use a template in order to prevent acceleo cache from calling the java method each time /]
[template public prefix(genPackage : GenPackage, depth : Integer)]
[invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'prefix(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, int)', Sequence{genPackage, depth})/][/template]

[comment We use a template in order to prevent acceleo cache from calling the java method each time /]
[template public typePrefix(genPackage : GenPackage, depth : Integer)]
[invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'typePrefix(org.eclipse.emf.codegen.ecore.genmodel.GenPackage, int)', Sequence{genPackage, depth})/][/template]

[query public resetMaxGenericTypeAssignment(genPackage : GenPackage) : OclVoid
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'resetMaxGenericTypeAssignment()', Sequence{}) /]

[query public resetGenOperationPrefix(genPackage : GenPackage) : OclVoid
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenOperationWrapper', 'resetGenOperationPrefix()', Sequence{genPackage}) /]

[query public computeSwitchGenericTypeName(genPackage : GenPackage) : String
	= invoke('org.eclipse.emf.eef.codegen.ecore.services.wrappers.GenPackageWrapper', 'computeSwitchGenericTypeName(org.eclipse.emf.codegen.ecore.genmodel.GenPackage)', Sequence{genPackage}) /]
