[comment encoding = UTF-8 /]
[module genFeature('http://www.eclipse.org/emf/2002/GenModel')/]

[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClass /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClassifier /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenFeature /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenEnum /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenPackage /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenDataType /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenOperation /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenParameter /]

[template public genFeature(genFeature : GenFeature, genClass : GenClass, genPackage : GenPackage, genModel : GenModel, isJDK50 : Boolean, isInterface : Boolean, isImplementation : Boolean, positiveOffsetCorrection : String, negativeOffsetCorrection : String, singleWildcard : String)]
[if (genModel.arrayAccessors and genFeature.isListType() and not genFeature.isFeatureMapType() and not genFeature.isMapType()) ]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
  [if (not isImplementation) ]
	[genFeature.getListItemType(genClass)/]['[]'/] [genFeature.getGetArrayAccessor()/]();

  [else]
	public [genFeature.getListItemType(genClass)/]['[]'/] [genFeature.getGetArrayAccessor()/]() {
    [if (genFeature.isVolatile()) ]
		[genModel.getImportedName('org.eclipse.emf.common.util.BasicEList')/][genFeature.getListTemplateArguments(genClass)/] list = ([genModel.getImportedName('org.eclipse.emf.common.util.BasicEList')/][genFeature.getListTemplateArguments(genClass)/])[genFeature.getGetAccessor()/]();
		if (list.isEmpty()) return [if (genModel.useGenerics() and not genFeature.getListItemType(genClass).contains('<') and genFeature.getListItemType(null) <> genFeature.getListItemType(genClass)) ]([genFeature.getListItemType(genClass)/]['[]'/])[/if][genFeature.getUpperName()/]_EEMPTY_ARRAY;
    [else]
		if ([genFeature.getSafeName()/] == null || [genFeature.getSafeName()/].isEmpty()) return [if (genModel.useGenerics() and not genFeature.getListItemType(genClass).contains('<') and genFeature.getListItemType(null) <> genFeature.getListItemType(genClass)) ]([genFeature.getListItemType(genClass)/]['[]'/])[/if][genFeature.getUpperName()/]_EEMPTY_ARRAY;
		[genModel.getImportedName('org.eclipse.emf.common.util.BasicEList')/][genFeature.getListTemplateArguments(genClass)/] list = ([genModel.getImportedName('org.eclipse.emf.common.util.BasicEList')/][genFeature.getListTemplateArguments(genClass)/])[genFeature.getSafeName()/];
    [/if]
		list.shrink();
		return ([genFeature.getListItemType(genClass)/]['[]'/])list.data();
	}

  [/if]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
  [if (not isImplementation) ]
	[genFeature.getListItemType(genClass)/] get[genFeature.getAccessorName()/](int index);

  [else]
	public [genFeature.getListItemType(genClass)/] get[genFeature.getAccessorName()/](int index) {
		return [if (not genModel.useGenerics()) ]([genFeature.getListItemType(genClass)/])[/if][genFeature.getGetAccessor()/]().get(index);
	}

  [/if]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
  [if (not isImplementation) ]
	int get[genFeature.getAccessorName()/]Length();

  [else]
	public int get[genFeature.getAccessorName()/]Length() {
    [if (genFeature.isVolatile()) ]
		return [genFeature.getGetAccessor()/]().size();
    [else]
		return [genFeature.getSafeName()/] == null ? 0 : [genFeature.getSafeName()/].size();
    [/if]
	}

  [/if]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
  [if (not isImplementation) ]
	void set[genFeature.getAccessorName()/]([genFeature.getListItemType(genClass)/]['[]'/] new[genFeature.getCapName()/]);

  [else]
	public void set[genFeature.getAccessorName()/]([genFeature.getListItemType(genClass)/]['[]'/] new[genFeature.getCapName()/]) {
		(([genModel.getImportedName('org.eclipse.emf.common.util.BasicEList')/][genFeature.getListTemplateArguments(genClass)/])[genFeature.getGetAccessor()/]()).setData(new[genFeature.getCapName()/].length, new[genFeature.getCapName()/]);
	}

  [/if]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
  [if (not isImplementation) ]
	void set[genFeature.getAccessorName()/](int index, [genFeature.getListItemType(genClass)/] element);

  [else]
	public void set[genFeature.getAccessorName()/](int index, [genFeature.getListItemType(genClass)/] element) {
		[genFeature.getGetAccessor()/]().set(index, element);
	}

  [/if]
[/if]
[if (genFeature.isGet() and (isImplementation or not genFeature.isSuppressedGetVisibility()))]
  [if (isInterface)]
	/**
	 * Returns the value of the '<em><b>[genFeature.getFormattedName()/]</b></em>' [genFeature.getFeatureKind()/].
    [if (genFeature.isListType())]
      [if (genFeature.isMapType())]
        [let keyFeature : GenFeature = genFeature.getMapEntryTypeGenClass().getMapEntryKeyFeature()]
          [let valueFeature : GenFeature = genFeature.getMapEntryTypeGenClass().getMapEntryValueFeature()]
	 * The key is of type [if (keyFeature.isListType()) ]list of {@link [keyFeature.getQualifiedListItemType(genClass)/]}[else]{@link [keyFeature.getType(genClass)/]}[/if],
	 * and the value is of type [if (valueFeature.isListType()) ]list of {@link [valueFeature.getQualifiedListItemType(genClass)/]}[else]{@link [valueFeature.getType(genClass)/]}[/if],
          [/let]
        [/let]
      [else][if (not genFeature.isWrappedFeatureMapType() and not (genModel.suppressEMFMetaData and 'org.eclipse.emf.ecore.EObject' = genFeature.getQualifiedListItemType(genClass)))]
		[let typeName : String = genFeature.getQualifiedListItemType(genClass)]
          [let index : Integer = if typeName.index('<') < 0 then typeName.index('[') else typeName.index('<') endif]
            [let head : String = if index < 0 then typeName else typeName.substring(1, index - 1) endif]
              [let tail : String = if index < 0 then '' else typeName.substring(index).replaceAll('<', '&lt;') endif]
	 * The list contents are of type {@link [head/]}[tail/].
	          [/let]
	        [/let]
	      [/let]
        [/let]
      [/if][/if]
    [else][if (genFeature.isSetDefaultValue()) ]
	 * The default value is <code>[genFeature.getDefaultValue()/]</code>.
    [/if][/if]
    [if (genFeature.getTypeGenEnum() <> null) ]
	 * The literals are from the enumeration {@link [genFeature.getTypeGenEnum().getQualifiedName()/]}.
    [/if]
    [if (genFeature.isBidirectional() and not genFeature.getReverse().genClass.isMapEntry())]
      [let reverseGenFeature : GenFeature = genFeature.getReverse()]
        [if (not reverseGenFeature.isSuppressedGetVisibility()) ]
	 * It is bidirectional and its opposite is '{@link [reverseGenFeature.genClass.getQualifiedInterfaceName()/]#[reverseGenFeature.getGetAccessor()/] <em>[reverseGenFeature.getFormattedName()/]</em>}'.
        [/if]
      [/let]
    [/if]
	 * <!-- begin-user-doc -->
    [if (not genFeature.hasDocumentation()) ]
	 * <p>
	 * If the meaning of the '<em>[genFeature.getFormattedName()/]</em>' [genFeature.getFeatureKind()/] isn't clear,
	 * there really should be more of a description here...
	 * </p>
    [/if]
	 * <!-- end-user-doc -->
    [if (genFeature.hasDocumentation()) ]
	 * <!-- begin-model-doc -->
	 * [genFeature.getDocumentation(genModel.getIndentation())/]
	 * <!-- end-model-doc -->
    [/if]
	 * @return the value of the '<em>[genFeature.getFormattedName()/]</em>' [genFeature.getFeatureKind()/].
    [if (genFeature.getTypeGenEnum() <> null) ]
	 * @see [genFeature.getTypeGenEnum().getQualifiedName()/]
    [/if]
    [if (genFeature.isUnsettable()) ]
      [if (not genFeature.isSuppressedIsSetVisibility()) ]
	 * @see #isSet[genFeature.getAccessorName()/]()
      [/if]
      [if (genFeature.isChangeable() and not genFeature.isSuppressedUnsetVisibility()) ]
	 * @see #unset[genFeature.getAccessorName()/]()
      [/if]
    [/if]
    [if (genFeature.isChangeable() and not genFeature.isListType() and not genFeature.isSuppressedSetVisibility()) ]
	 * @see #set[genFeature.getAccessorName()/]([genFeature.getRawImportedBoundType()/])
    [/if]
    [if (not genModel.suppressEMFMetaData) ]
	 * @see [genPackage.getQualifiedPackageInterfaceName()/]#get[genFeature.getFeatureAccessorName()/]()
    [/if]
    [if (genFeature.isBidirectional() and not genFeature.getReverse().genClass.isMapEntry())]
      [let reverseGenFeature : GenFeature = genFeature.getReverse()]
        [if (not reverseGenFeature.isSuppressedGetVisibility()) ]
	 * @see [reverseGenFeature.genClass.getQualifiedInterfaceName()/]#[reverseGenFeature.getGetAccessor()/]
        [/if]
      [/let]
    [/if]
    [if (not genModel.suppressEMFModelTags)]
      [let modelInfoLines : Sequence(String) = genFeature.getModelInfo().tokenize(genModel.getLineDelimiter())]
        [if (modelInfoLines->isEmpty())]
	 * @model
        [else]
	 * @model [modelInfoLines->sep(genModel.getLineDelimiter() + '\t *        ')/]
        [/if]
      [/let]
    [/if]
	 * @generated
	 */
  [else][comment isInterface/]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    [if (isJDK50)][comment] { //Class/getGenFeature.annotations.insert.javajetinc[/comment]
    [/if]
  [/if][comment isInterface/]
  [if (not isImplementation) ]
	[genFeature.getImportedType(genClass)/] [genFeature.getGetAccessor()/]();

  [else]
    [if (genModel.useGenerics() and ((genFeature.isContainer() or genFeature.isResolveProxies()) and not genFeature.isListType() and not (genModel.reflectiveDelegation and genModel.isDynamicDelegation()) and genFeature.isUncheckedCast(genClass) or genFeature.isListType() and not genFeature.isFeatureMapType() and (genModel.reflectiveDelegation or genModel.isVirtualDelegation() or genModel.isDynamicDelegation()) or genFeature.isListDataType() and genFeature.hasDelegateFeature() or genFeature.isListType() and genFeature.hasSettingDelegate())) ]
	@SuppressWarnings("unchecked")
    [/if]
	public [genFeature.getImportedType(genClass)/] [genFeature.getGetAccessor()/][if (genClass.hasCollidingGetAccessorOperation(genFeature)) ]_[/if]() {
    [if (genModel.isDynamicDelegation()) ]
		return [if (not isJDK50 and genFeature.isPrimitiveType()) ]([/if]([genFeature.getObjectType(genClass)/])eDynamicGet([genClass.getQualifiedFeatureID(genFeature)/], [genFeature.getQualifiedFeatureAccessor()/], true, [not genFeature.isEffectiveSuppressEMFTypes()/])[if (not isJDK50 and genFeature.isPrimitiveType()) ]).[genFeature.getPrimitiveValueFunction()/]()[/if];
    [else][if (genModel.reflectiveDelegation) ]
		return [if (not isJDK50 and genFeature.isPrimitiveType()) ]([/if]([genFeature.getObjectType(genClass)/])eGet([genFeature.getQualifiedFeatureAccessor()/], true)[if (not isJDK50 and genFeature.isPrimitiveType()) ]).[genFeature.getPrimitiveValueFunction()/]()[/if];
    [else][if (genFeature.hasSettingDelegate()) ]
		return [if (not isJDK50 and genFeature.isPrimitiveType()) ]([/if]([genFeature.getObjectType(genClass)/])[genFeature.getUpperName()/]__ESETTING_DELEGATE.dynamicGet(this, null, 0, true, false)[if (not isJDK50 and genFeature.isPrimitiveType()) ]).[genFeature.getPrimitiveValueFunction()/]()[/if];
    [else][if (not genFeature.isVolatile()) ]
      [if (genFeature.isListType()) ]
        [if (genModel.isVirtualDelegation()) ]
		[genFeature.getImportedType(genClass)/] [genFeature.getSafeName()/] = ([genFeature.getImportedType(genClass)/])eVirtualGet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/]);
        [/if]
		if ([genFeature.getSafeName()/] == null) {
        [if (genModel.isVirtualDelegation()) ]
			eVirtualSet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], [genFeature.getSafeName()/] = new [genClass.getListConstructor(genFeature)/]);
        [else]
			[genFeature.getSafeName()/] = new [genClass.getListConstructor(genFeature)/];
        [/if]
		}
		return [genFeature.getSafeName()/][if (genFeature.isMapType() and genFeature.isEffectiveSuppressEMFTypes())].map()[/if];
      [else][if (genFeature.isContainer()) ]
		if (eContainerFeatureID() != [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/]) return null;
		return ([genFeature.getImportedType(genClass)/])eContainer();
      [else]
        [if (genFeature.isResolveProxies()) ]
          [if (genModel.isVirtualDelegation()) ]
		[genFeature.getImportedType(genClass)/] [genFeature.getSafeName()/] = ([genFeature.getImportedType(genClass)/])eVirtualGet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/][if (genFeature.hasEDefault()) ], [genFeature.getEDefault()/][/if]);
          [/if]
		if ([genFeature.getSafeName()/] != null && [genFeature.getSafeNameAsEObject()/].eIsProxy()) {
			[genModel.getImportedName('org.eclipse.emf.ecore.InternalEObject')/] old[genFeature.getCapName()/] = ([genModel.getImportedName('org.eclipse.emf.ecore.InternalEObject')/])[genFeature.getSafeName()/];
			[genFeature.getSafeName()/] = [genFeature.getNonEObjectInternalTypeCast(genClass)/]eResolveProxy(old[genFeature.getCapName()/]);
			if ([genFeature.getSafeName()/] != old[genFeature.getCapName()/]) {
          [if (genFeature.isEffectiveContains()) ]
				[genModel.getImportedName('org.eclipse.emf.ecore.InternalEObject')/] new[genFeature.getCapName()/] = ([genModel.getImportedName('org.eclipse.emf.ecore.InternalEObject')/])[genFeature.getSafeName()/];
            [if (not genFeature.isBidirectional()) ]
				[genModel.getImportedName('org.eclipse.emf.common.notify.NotificationChain')/] msgs = old[genFeature.getCapName()/].eInverseRemove(this, EOPPOSITE_FEATURE_BASE - [genClass.getQualifiedFeatureID(genFeature)/][negativeOffsetCorrection/], null, null);
            [else]
              [let reverseFeature : GenFeature = genFeature.getReverse()]
                [let targetClass : GenClass = reverseFeature.genClass]
                  [let reverseOffsetCorrection : String = if (targetClass.hasOffsetCorrection()) then ' + ' + genClass.getOffsetCorrectionField(genFeature) else '' endif]
				[genModel.getImportedName('org.eclipse.emf.common.notify.NotificationChain')/] msgs =  old[genFeature.getCapName()/].eInverseRemove(this, [targetClass.getQualifiedFeatureID(reverseFeature)/][reverseOffsetCorrection/], [targetClass.getRawImportedInterfaceName()/].class, null);
                  [/let]
                [/let]
              [/let]
            [/if]
				if (new[genFeature.getCapName()/].eInternalContainer() == null) {
            [if (not genFeature.isBidirectional()) ]
					msgs = new[genFeature.getCapName()/].eInverseAdd(this, EOPPOSITE_FEATURE_BASE - [genClass.getQualifiedFeatureID(genFeature)/][negativeOffsetCorrection/], null, msgs);
            [else]
              [let reverseFeature : GenFeature = genFeature.getReverse()]
                [let targetClass : GenClass = reverseFeature.genClass]
                  [let reverseOffsetCorrection : String = if (targetClass.hasOffsetCorrection()) then ' + ' + genClass.getOffsetCorrectionField(genFeature) else '' endif]
					msgs =  new[genFeature.getCapName()/].eInverseAdd(this, [targetClass.getQualifiedFeatureID(reverseFeature)/][reverseOffsetCorrection/], [targetClass.getRawImportedInterfaceName()/].class, msgs);
                  [/let]
                [/let]
              [/let]
            [/if]
				}
				if (msgs != null) msgs.dispatch();
          [else][if (genModel.isVirtualDelegation()) ]
				eVirtualSet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], [genFeature.getSafeName()/]);
          [/if][/if]
          [if (not genModel.suppressNotification) ]
				if (eNotificationRequired())
					eNotify(new [genModel.getImportedName('org.eclipse.emf.ecore.impl.ENotificationImpl')/](this, [genModel.getImportedName('org.eclipse.emf.common.notify.Notification')/].RESOLVE, [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], old[genFeature.getCapName()/], [genFeature.getSafeName()/]));
          [/if]
			}
		}
        [/if]
        [if (not genFeature.isResolveProxies() and genModel.isVirtualDelegation() and not genFeature.isPrimitiveType()) ]
		return ([genFeature.getImportedType(genClass)/])eVirtualGet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/][if (genFeature.hasEDefault()) ], [genFeature.getEDefault()/][/if]);
        [else][if (genClass.isFlag(genFeature)) ]
          [if (genFeature.isBooleanType()) ]
		return ([genClass.getFlagsField(genFeature)/] & [genFeature.getUpperName()/]_EFLAG) != 0;
          [else]
		return [genFeature.getUpperName()/]_EFLAG_VALUES['['/]([genClass.getFlagsField(genFeature)/] & [genFeature.getUpperName()/]_EFLAG) >>> [genFeature.getUpperName()/]_EFLAG_OFFSET];
          [/if]
        [else]
		return [genFeature.getSafeName()/];
        [/if][/if]
      [/if][/if]
    [else][comment volatile/]
      [if (genFeature.isResolveProxies() and not genFeature.isListType()) ]
		[genFeature.getImportedType(genClass)/] [genFeature.getSafeName()/] = basicGet[genFeature.getAccessorName()/]();
		return [genFeature.getSafeName()/] != null && [genFeature.getSafeNameAsEObject()/].eIsProxy() ? [genFeature.getNonEObjectInternalTypeCast(genClass)/]eResolveProxy(([genModel.getImportedName('org.eclipse.emf.ecore.InternalEObject')/])[genFeature.getSafeName()/]) : [genFeature.getSafeName()/];
      [else][if (genFeature.hasDelegateFeature())]
        [let delegateFeature : GenFeature = genFeature.getDelegateFeature()]
          [if (genFeature.isFeatureMapType()) ]
            [let featureMapEntryTemplateArgument : String = if (isJDK50) then '<' + genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap') + '.Entry>' else '' endif]
              [if (delegateFeature.isWrappedFeatureMapType()) ]
		return new [genFeature.getImportedEffectiveFeatureMapWrapperClass()/](([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal)(([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal.Wrapper)get[delegateFeature.getAccessorName()/]()).featureMap().[featureMapEntryTemplateArgument/]list([genFeature.getQualifiedFeatureAccessor()/]));
              [else]
		return ([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/])get[delegateFeature.getAccessorName()/]().[featureMapEntryTemplateArgument/]list([genFeature.getQualifiedFeatureAccessor()/]);
              [/if]
            [/let]
          [else][if (genFeature.isListType()) ]
            [if (delegateFeature.isWrappedFeatureMapType()) ]
		return (([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal.Wrapper)get[delegateFeature.getAccessorName()/]()).featureMap().list([genFeature.getQualifiedFeatureAccessor()/]);
            [else]
		return get[delegateFeature.getAccessorName()/]().list([genFeature.getQualifiedFeatureAccessor()/]);
            [/if]
          [else]
            [if (delegateFeature.isWrappedFeatureMapType()) ]
		return [if (not isJDK50 and genFeature.isPrimitiveType()) ]([/if][if (genFeature.getTypeGenDataType() = null or not genFeature.getTypeGenDataType().isObjectType()) ]([genFeature.getObjectType(genClass)/])[/if](([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal.Wrapper)get[delegateFeature.getAccessorName()/]()).featureMap().get([genFeature.getQualifiedFeatureAccessor()/], true)[if (not isJDK50 and genFeature.isPrimitiveType()) ]).[genFeature.getPrimitiveValueFunction()/]()[/if];
            [else]
		return [if (not isJDK50 and genFeature.isPrimitiveType()) ]([/if][if (genFeature.getTypeGenDataType() = null or not genFeature.getTypeGenDataType().isObjectType()) ]([genFeature.getObjectType(genClass)/])[/if]get[delegateFeature.getAccessorName()/]().get([genFeature.getQualifiedFeatureAccessor()/], true)[if (not isJDK50 and genFeature.isPrimitiveType()) ]).[genFeature.getPrimitiveValueFunction()/]()[/if];
            [/if]
          [/if][/if]
        [/let]
      [else][if (genClass.getGetAccessorOperation(genFeature) <> null) ]
		[genClass.getGetAccessorOperation(genFeature).getBody(genModel.getIndentation())/]
      [else]
		// TODO: implement this method to return the '[genFeature.getFormattedName()/]' [genFeature.getFeatureKind()/]
		// Ensure that you remove @generated or mark it @generated NOT
        [if (genFeature.isListType()) ]
		// The list is expected to implement org.eclipse.emf.ecore.util.InternalEList and org.eclipse.emf.ecore.EStructuralFeature.Setting
		// so it's likely that an appropriate subclass of org.eclipse.emf.ecore.util.[if (genFeature.isMapType()) ]EcoreEMap[else][if (genFeature.isFeatureMapType()) ]BasicFeatureMap[else]EcoreEList[/if][/if] should be used.
        [/if]
		throw new UnsupportedOperationException();
      [/if][/if][/if]
    [/if][/if][/if][/if]
	}

  [/if]
[/if]
[if (isImplementation and not genModel.reflectiveDelegation and genFeature.isBasicGet()) ]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
  [if (isJDK50)][comment] { //Class/basicGetGenFeature.annotations.insert.javajetinc[/comment]
  [/if]
	public [genFeature.getImportedType(genClass)/] basicGet[genFeature.getAccessorName()/]() {
  [if (genModel.isDynamicDelegation()) ]
		return ([genFeature.getImportedType(genClass)/])eDynamicGet([genClass.getQualifiedFeatureID(genFeature)/], [genFeature.getQualifiedFeatureAccessor()/], false, [not genFeature.isEffectiveSuppressEMFTypes()/]);
  [else][if (genFeature.hasSettingDelegate()) ]
		return [if (not isJDK50 and genFeature.isPrimitiveType()) ]([/if]([genFeature.getObjectType(genClass)/])[genFeature.getUpperName()/]__ESETTING_DELEGATE.dynamicGet(this, null, 0, false, false)[if (not isJDK50 and genFeature.isPrimitiveType()) ]).[genFeature.getPrimitiveValueFunction()/]()[/if];
  [else][if (genFeature.isContainer()) ]
		if (eContainerFeatureID() != [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/]) return null;
		return ([genFeature.getImportedType(genClass)/])eInternalContainer();
  [else][if (not genFeature.isVolatile()) ]
    [if (genModel.isVirtualDelegation()) ]
		return ([genFeature.getImportedType(genClass)/])eVirtualGet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/]);
    [else]
		return [genFeature.getSafeName()/];
    [/if]
  [else][if (genFeature.hasDelegateFeature())]
    [let delegateFeature : GenFeature = genFeature.getDelegateFeature()]
      [if (delegateFeature.isWrappedFeatureMapType()) ]
		return ([genFeature.getImportedType(genClass)/])(([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal.Wrapper)get[delegateFeature.getAccessorName()/]()).featureMap().get([genFeature.getQualifiedFeatureAccessor()/], false);
      [else]
		return ([genFeature.getImportedType(genClass)/])get[delegateFeature.getAccessorName()/]().get([genFeature.getQualifiedFeatureAccessor()/], false);
      [/if]
    [/let]
  [else]
		// TODO: implement this method to return the '[genFeature.getFormattedName()/]' [genFeature.getFeatureKind()/]
		// -> do not perform proxy resolution
		// Ensure that you remove @generated or mark it @generated NOT
		throw new UnsupportedOperationException();
  [/if][/if][/if][/if][/if]
	}

[/if]
[if (isImplementation and not genModel.reflectiveDelegation and genFeature.isBasicSet()) ]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
  [if (isJDK50)][comment] { //Class/basicSetGenFeature.annotations.insert.javajetinc[/comment]
  [/if]
	public [genModel.getImportedName('org.eclipse.emf.common.notify.NotificationChain')/] basicSet[genFeature.getAccessorName()/]([genFeature.getImportedInternalType(genClass)/] new[genFeature.getCapName()/], [genModel.getImportedName('org.eclipse.emf.common.notify.NotificationChain')/] msgs) {
  [if (genFeature.isContainer()) ]
		msgs = eBasicSetContainer(([genModel.getImportedName('org.eclipse.emf.ecore.InternalEObject')/])new[genFeature.getCapName()/], [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], msgs);
		return msgs;
  [else][if (genModel.isDynamicDelegation()) ]
		msgs = eDynamicInverseAdd(([genModel.getImportedName('org.eclipse.emf.ecore.InternalEObject')/])new[genFeature.getCapName()/], [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], msgs);
		return msgs;
  [else][if (not genFeature.isVolatile()) ]
    [if (genModel.isVirtualDelegation()) ]
		Object old[genFeature.getCapName()/] = eVirtualSet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], new[genFeature.getCapName()/]);
    [else]
		[genFeature.getImportedType(genClass)/] old[genFeature.getCapName()/] = [genFeature.getSafeName()/];
		[genFeature.getSafeName()/] = new[genFeature.getCapName()/];
    [/if]
    [if (genFeature.isUnsettable()) ]
      [if (genModel.isVirtualDelegation()) ]
        [if (not genModel.suppressNotification) ]
		boolean isSetChange = old[genFeature.getCapName()/] == EVIRTUAL_NO_VALUE;
        [/if]
      [else][if (genClass.isESetFlag(genFeature)) ]
		boolean old[genFeature.getCapName()/]ESet = ([genClass.getESetFlagsField(genFeature)/] & [genFeature.getUpperName()/]_ESETFLAG) != 0;
        [if (not genModel.suppressNotification) ]
		[genClass.getESetFlagsField(genFeature)/] |= [genFeature.getUpperName()/]_ESETFLAG;
        [/if]
      [else]
        [if (not genModel.suppressNotification) ]
		boolean old[genFeature.getCapName()/]ESet = [genFeature.getUncapName()/]ESet;
        [/if]
		[genFeature.getUncapName()/]ESet = true;
      [/if][/if]
    [/if]
    [if (not genModel.suppressNotification) ]
		if (eNotificationRequired()) {
      [if (genFeature.isUnsettable()) ]
			[genModel.getImportedName('org.eclipse.emf.ecore.impl.ENotificationImpl')/] notification = new [genModel.getImportedName('org.eclipse.emf.ecore.impl.ENotificationImpl')/](this, [genModel.getImportedName('org.eclipse.emf.common.notify.Notification')/].SET, [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], [if (genModel.isVirtualDelegation()) ]isSetChange ? null : old[genFeature.getCapName()/][else]old[genFeature.getCapName()/][/if], new[genFeature.getCapName()/], [if (genModel.isVirtualDelegation()) ]isSetChange[else]!old[genFeature.getCapName()/]ESet[/if]);
      [else]
			[genModel.getImportedName('org.eclipse.emf.ecore.impl.ENotificationImpl')/] notification = new [genModel.getImportedName('org.eclipse.emf.ecore.impl.ENotificationImpl')/](this, [genModel.getImportedName('org.eclipse.emf.common.notify.Notification')/].SET, [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], [if (genModel.isVirtualDelegation()) ]old[genFeature.getCapName()/] == EVIRTUAL_NO_VALUE ? null : old[genFeature.getCapName()/][else]old[genFeature.getCapName()/][/if], new[genFeature.getCapName()/]);
      [/if]
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
    [/if]
		return msgs;
  [else][if (genFeature.hasDelegateFeature())]
    [let delegateFeature : GenFeature = genFeature.getDelegateFeature()]
      [if (delegateFeature.isWrappedFeatureMapType()) ]
		return (([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal)(([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal.Wrapper)get[delegateFeature.getAccessorName()/]()).featureMap()).basicAdd([genFeature.getQualifiedFeatureAccessor()/], new[genFeature.getCapName()/], msgs);
      [else]
		return (([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal)get[delegateFeature.getAccessorName()/]()).basicAdd([genFeature.getQualifiedFeatureAccessor()/], new[genFeature.getCapName()/], msgs);
      [/if]
    [/let]
  [else]
		// TODO: implement this method to set the contained '[genFeature.getFormattedName()/]' [genFeature.getFeatureKind()/]
		// -> this method is automatically invoked to keep the containment relationship in synch
		// -> do not modify other features
		// -> return msgs, after adding any generated Notification to it (if it is null, a NotificationChain object must be created first)
		// Ensure that you remove @generated or mark it @generated NOT
		throw new UnsupportedOperationException();
  [/if][/if][/if][/if]
	}

[/if]
[if (genFeature.isSet() and (isImplementation or not genFeature.isSuppressedSetVisibility())) ]
  [if (isInterface) ]
	/**
	 * Sets the value of the '{@link [genClass.getQualifiedInterfaceName()/]#[genFeature.getGetAccessor()/] <em>[genFeature.getFormattedName()/]</em>}' [genFeature.getFeatureKind()/].
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>[genFeature.getFormattedName()/]</em>' [genFeature.getFeatureKind()/].
    [if (genFeature.isEnumType()) ]
	 * @see [genFeature.getTypeGenEnum().getQualifiedName()/]
    [/if]
    [if (genFeature.isUnsettable()) ]
      [if (not genFeature.isSuppressedIsSetVisibility()) ]
	 * @see #isSet[genFeature.getAccessorName()/]()
      [/if]
      [if (not genFeature.isSuppressedUnsetVisibility()) ]
	 * @see #unset[genFeature.getAccessorName()/]()
      [/if]
    [/if]
	 * @see #[genFeature.getGetAccessor()/]()
	 * @generated
	 */
  [else][comment isInterface /]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    [if (isJDK50)][comment] { //Class/setGenFeature.annotations.insert.javajetinc[/comment]
    [/if]
  [/if][comment isInterface /]
  [if (not isImplementation)]
	void set[genFeature.getAccessorName()/]([genFeature.getImportedType(genClass)/] value);

  [else][comment not isImplementation /]
    [comment Using query instead of variable because let does not support null !!!
        let setAccessorOperation : GenOperation = genClass.getSetAccessorOperation(genFeature)/]
	public void set[genFeature.getAccessorName()/][if (genClass.hasCollidingSetAccessorOperation(genFeature)) ]_[/if]([genFeature.getImportedType(genClass)/] [if (genClass.getSetAccessorOperation(genFeature) = null)]new[genFeature.getCapName()/][else][genClass.getSetAccessorOperation(genFeature).genParameters->at(1).getName()/][/if]) {
    [if (genModel.isDynamicDelegation()) ]
		eDynamicSet([genClass.getQualifiedFeatureID(genFeature)/], [genFeature.getQualifiedFeatureAccessor()/], [if (not isJDK50 and genFeature.isPrimitiveType()) ]new [genFeature.getObjectType(genClass)/]([/if]new[genFeature.getCapName()/][if (not isJDK50 and genFeature.isPrimitiveType()) ])[/if]);
    [else][if (genModel.reflectiveDelegation) ]
		eSet([genFeature.getQualifiedFeatureAccessor()/], [if (not isJDK50 and genFeature.isPrimitiveType()) ]new [genFeature.getObjectType(genClass)/]([/if]new[genFeature.getCapName()/][if (not isJDK50 and genFeature.isPrimitiveType()) ])[/if]);
    [else][if (genFeature.hasSettingDelegate()) ]
		[genFeature.getUpperName()/]__ESETTING_DELEGATE.dynamicSet(this, null, 0, [if (not isJDK50 and genFeature.isPrimitiveType()) ]new [genFeature.getObjectType(genClass)/]([/if]new[genFeature.getCapName()/][if (not isJDK50 and genFeature.isPrimitiveType()) ])[/if]);
    [else][if (not genFeature.isVolatile()) ]
      [if (genFeature.isContainer())]
        [let reverseFeature : GenFeature = genFeature.getReverse()]
          [let targetClass : GenClass = reverseFeature.genClass]
            [let reverseOffsetCorrection : String = if (targetClass.hasOffsetCorrection()) then ' + ' + genClass.getOffsetCorrectionField(genFeature) else '' endif]
		if (new[genFeature.getCapName()/] != eInternalContainer() || (eContainerFeatureID() != [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/] && new[genFeature.getCapName()/] != null)) {
			if ([genModel.getImportedName('org.eclipse.emf.ecore.util.EcoreUtil')/].isAncestor(this, [genFeature.getEObjectCast()/]new[genFeature.getCapName()/]))
				throw new [genModel.getImportedName('java.lang.IllegalArgumentException')/]("Recursive containment not allowed for " + toString());[genModel.getNonNLS()/]
			[genModel.getImportedName('org.eclipse.emf.common.notify.NotificationChain')/] msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (new[genFeature.getCapName()/] != null)
				msgs = (([genModel.getImportedName('org.eclipse.emf.ecore.InternalEObject')/])new[genFeature.getCapName()/]).eInverseAdd(this, [targetClass.getQualifiedFeatureID(reverseFeature)/][reverseOffsetCorrection/], [targetClass.getRawImportedInterfaceName()/].class, msgs);
			msgs = basicSet[genFeature.getAccessorName()/]([genFeature.getInternalTypeCast()/]new[genFeature.getCapName()/], msgs);
			if (msgs != null) msgs.dispatch();
		}
              [if (not genModel.suppressNotification) ]
		else if (eNotificationRequired())
			eNotify(new [genModel.getImportedName('org.eclipse.emf.ecore.impl.ENotificationImpl')/](this, [genModel.getImportedName('org.eclipse.emf.common.notify.Notification')/].SET, [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], new[genFeature.getCapName()/], new[genFeature.getCapName()/]));
              [/if]
            [/let]
          [/let]
        [/let]
      [else][if (genFeature.isBidirectional() or genFeature.isEffectiveContains()) ]
        [if (genModel.isVirtualDelegation()) ]
		[genFeature.getImportedType(genClass)/] [genFeature.getSafeName()/] = ([genFeature.getImportedType(genClass)/])eVirtualGet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/]);
        [/if]
		if (new[genFeature.getCapName()/] != [genFeature.getSafeName()/]) {
			[genModel.getImportedName('org.eclipse.emf.common.notify.NotificationChain')/] msgs = null;
			if ([genFeature.getSafeName()/] != null)
        [if (not genFeature.isBidirectional()) ]
				msgs = (([genModel.getImportedName('org.eclipse.emf.ecore.InternalEObject')/])[genFeature.getSafeName()/]).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - [genClass.getQualifiedFeatureID(genFeature)/][negativeOffsetCorrection/], null, msgs);
			if (new[genFeature.getCapName()/] != null)
				msgs = (([genModel.getImportedName('org.eclipse.emf.ecore.InternalEObject')/])new[genFeature.getCapName()/]).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - [genClass.getQualifiedFeatureID(genFeature)/][negativeOffsetCorrection/], null, msgs);
        [else]
          [let reverseFeature : GenFeature = genFeature.getReverse()]
            [let targetClass : GenClass = reverseFeature.genClass]
              [let reverseOffsetCorrection : String = if (targetClass.hasOffsetCorrection()) then ' + ' + genClass.getOffsetCorrectionField(genFeature) else '' endif]
				msgs = (([genModel.getImportedName('org.eclipse.emf.ecore.InternalEObject')/])[genFeature.getSafeName()/]).eInverseRemove(this, [targetClass.getQualifiedFeatureID(reverseFeature)/][reverseOffsetCorrection/], [targetClass.getRawImportedInterfaceName()/].class, msgs);
			if (new[genFeature.getCapName()/] != null)
				msgs = (([genModel.getImportedName('org.eclipse.emf.ecore.InternalEObject')/])new[genFeature.getCapName()/]).eInverseAdd(this, [targetClass.getQualifiedFeatureID(reverseFeature)/][reverseOffsetCorrection/], [targetClass.getRawImportedInterfaceName()/].class, msgs);
              [/let]
            [/let]
          [/let]
        [/if]
			msgs = basicSet[genFeature.getAccessorName()/]([genFeature.getInternalTypeCast()/]new[genFeature.getCapName()/], msgs);
			if (msgs != null) msgs.dispatch();
		}[if (genFeature.isUnsettable())] else {
          [if (genModel.isVirtualDelegation()) ]
			boolean old[genFeature.getCapName()/]ESet = eVirtualIsSet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/]);
          [else][if (genClass.isESetFlag(genFeature)) ]
            [if (not genModel.suppressNotification) ]
			boolean old[genFeature.getCapName()/]ESet = ([genClass.getESetFlagsField(genFeature)/] & [genFeature.getUpperName()/]_ESETFLAG) != 0;
            [/if]
			[genClass.getESetFlagsField(genFeature)/] |= [genFeature.getUpperName()/]_ESETFLAG;
          [else]
            [if (not genModel.suppressNotification) ]
			boolean old[genFeature.getCapName()/]ESet = [genFeature.getUncapName()/]ESet;
            [/if]
			[genFeature.getUncapName()/]ESet = true;
          [/if][/if]
          [if (not genModel.suppressNotification) ]
			if (eNotificationRequired())
				eNotify(new [genModel.getImportedName('org.eclipse.emf.ecore.impl.ENotificationImpl')/](this, [genModel.getImportedName('org.eclipse.emf.common.notify.Notification')/].SET, [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], new[genFeature.getCapName()/], new[genFeature.getCapName()/], not old[genFeature.getCapName()/]ESet));
          [/if]
		}
        [else][comment genFeature.isUnsettable() /]
          [if (not genModel.suppressNotification) ] else if (eNotificationRequired())
			eNotify(new [genModel.getImportedName('org.eclipse.emf.ecore.impl.ENotificationImpl')/](this, [genModel.getImportedName('org.eclipse.emf.common.notify.Notification')/].SET, [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], new[genFeature.getCapName()/], new[genFeature.getCapName()/]));
          [else][comment carriage return /]

          [/if]
        [/if][comment genFeature.isUnsettable() /]
      [else]
        [if (genClass.isFlag(genFeature)) ]
          [if (not genModel.suppressNotification) ]
            [if (genFeature.isBooleanType()) ]
		[genFeature.getImportedType(genClass)/] old[genFeature.getCapName()/] = ([genClass.getFlagsField(genFeature)/] & [genFeature.getUpperName()/]_EFLAG) != 0;
            [else]
		[genFeature.getImportedType(genClass)/] old[genFeature.getCapName()/] = [genFeature.getUpperName()/]_EFLAG_VALUES['['/]([genClass.getFlagsField(genFeature)/] & [genFeature.getUpperName()/]_EFLAG) >>> [genFeature.getUpperName()/]_EFLAG_OFFSET];
            [/if]
          [/if]
          [if (genFeature.isBooleanType()) ]
		if (new[genFeature.getCapName()/]) [genClass.getFlagsField(genFeature)/] |= [genFeature.getUpperName()/]_EFLAG; else [genClass.getFlagsField(genFeature)/] &= ~[genFeature.getUpperName()/]_EFLAG;
          [else]
		if (new[genFeature.getCapName()/] == null) new[genFeature.getCapName()/] = [genFeature.getUpperName()/]_EDEFAULT;
		[genClass.getFlagsField(genFeature)/] = [genClass.getFlagsField(genFeature)/] & ~[genFeature.getUpperName()/]_EFLAG | [if (isJDK50) ]new[genFeature.getCapName()/].ordinal()[else][genFeature.getImportedType(genClass)/].VALUES.indexOf(new[genFeature.getCapName()/])[/if] << [genFeature.getUpperName()/]_EFLAG_OFFSET;
          [/if]
        [else][comment (genClass.isFlag(genFeature)) /]
          [if (not genModel.isVirtualDelegation() or genFeature.isPrimitiveType()) ]
            [if (not genModel.suppressNotification) ]
		[genFeature.getImportedType(genClass)/] old[genFeature.getCapName()/] = [genFeature.getSafeName()/];
            [/if]
          [/if]
          [if (genFeature.isEnumType()) ]
            [if (genModel.isVirtualDelegation()) ]
		[genFeature.getImportedType(genClass)/] [genFeature.getSafeName()/] = new[genFeature.getCapName()/] == null ? [genFeature.getEDefault()/] : new[genFeature.getCapName()/];
            [else]
		[genFeature.getSafeName()/] = new[genFeature.getCapName()/] == null ? [genFeature.getEDefault()/] : new[genFeature.getCapName()/];
            [/if]
          [else]
            [if (genModel.isVirtualDelegation() and not genFeature.isPrimitiveType()) ]
		[genFeature.getImportedType(genClass)/] [genFeature.getSafeName()/] = [genFeature.getInternalTypeCast()/]new[genFeature.getCapName()/];
            [else]
		[genFeature.getSafeName()/] = [genFeature.getInternalTypeCast()/]new[genFeature.getCapName()/];
            [/if]
          [/if]
          [if (genModel.isVirtualDelegation() and not genFeature.isPrimitiveType()) ]
		Object old[genFeature.getCapName()/] = eVirtualSet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], [genFeature.getSafeName()/]);
          [/if]
        [/if][comment (genClass.isFlag(genFeature)) /]
        [if (genFeature.isUnsettable()) ]
          [if (genModel.isVirtualDelegation() and not genFeature.isPrimitiveType()) ]
		boolean isSetChange = old[genFeature.getCapName()/] == EVIRTUAL_NO_VALUE;
          [else][if (genClass.isESetFlag(genFeature)) ]
            [if (not genModel.suppressNotification) ]
		boolean old[genFeature.getCapName()/]ESet = ([genClass.getESetFlagsField(genFeature)/] & [genFeature.getUpperName()/]_ESETFLAG) != 0;
            [/if]
		[genClass.getESetFlagsField(genFeature)/] |= [genFeature.getUpperName()/]_ESETFLAG;
          [else]
            [if (not genModel.suppressNotification) ]
		boolean old[genFeature.getCapName()/]ESet = [genFeature.getUncapName()/]ESet;
            [/if]
		[genFeature.getUncapName()/]ESet = true;
          [/if][/if]
          [if (not genModel.suppressNotification) ]
		if (eNotificationRequired())
			eNotify(new [genModel.getImportedName('org.eclipse.emf.ecore.impl.ENotificationImpl')/](this, [genModel.getImportedName('org.eclipse.emf.common.notify.Notification')/].SET, [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], [if (genModel.isVirtualDelegation() and not genFeature.isPrimitiveType()) ]isSetChange ? [genFeature.getEDefault()/] : old[genFeature.getCapName()/][else]old[genFeature.getCapName()/][/if], [if (genClass.isFlag(genFeature)) ]new[genFeature.getCapName()/][else][genFeature.getSafeName()/][/if], [if (genModel.isVirtualDelegation() and not genFeature.isPrimitiveType()) ]isSetChange[else]!old[genFeature.getCapName()/]ESet[/if]));
          [/if]
        [else][comment (genFeature.isUnsettable()) /]
          [if (not genModel.suppressNotification) ]
		if (eNotificationRequired())
			eNotify(new [genModel.getImportedName('org.eclipse.emf.ecore.impl.ENotificationImpl')/](this, [genModel.getImportedName('org.eclipse.emf.common.notify.Notification')/].SET, [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], [if (genModel.isVirtualDelegation() and not genFeature.isPrimitiveType()) ]old[genFeature.getCapName()/] == EVIRTUAL_NO_VALUE ? [genFeature.getEDefault()/] : old[genFeature.getCapName()/][else]old[genFeature.getCapName()/][/if], [if (genClass.isFlag(genFeature)) ]new[genFeature.getCapName()/][else][genFeature.getSafeName()/][/if]));
          [/if]
        [/if][comment (genFeature.isUnsettable()) /]
      [/if][/if]
    [else][if (genFeature.hasDelegateFeature())]
      [let delegateFeature : GenFeature = genFeature.getDelegateFeature()]
        [if (delegateFeature.isWrappedFeatureMapType()) ]
		(([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal)(([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal.Wrapper)get[delegateFeature.getAccessorName()/]()).featureMap()).set([genFeature.getQualifiedFeatureAccessor()/], [if (not isJDK50 and genFeature.isPrimitiveType()) ]new [genFeature.getObjectType(genClass)/]([/if]new[genFeature.getCapName()/][if (not isJDK50 and genFeature.isPrimitiveType()) ])[/if]);
        [else]
		(([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal)get[delegateFeature.getAccessorName()/]()).set([genFeature.getQualifiedFeatureAccessor()/], [if (not isJDK50 and genFeature.isPrimitiveType()) ]new [genFeature.getObjectType(genClass)/]([/if]new[genFeature.getCapName()/][if (not isJDK50 and genFeature.isPrimitiveType()) ])[/if]);
        [/if]
      [/let]
    [else][if (genClass.getSetAccessorOperation(genFeature) <> null) ]
		[genClass.getSetAccessorOperation(genFeature).getBody(genModel.getIndentation())/]
    [else]
		// TODO: implement this method to set the '[genFeature.getFormattedName()/]' [genFeature.getFeatureKind()/]
		// Ensure that you remove @generated or mark it @generated NOT
		throw new UnsupportedOperationException();
    [/if][/if][/if][/if][/if][/if]
	}

  [/if][comment not isImplementation /]
[/if]
[if (isImplementation and not genModel.reflectiveDelegation and genFeature.isBasicUnset()) ]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
  [if (isJDK50)][comment] { //Class/basicUnsetGenFeature.annotations.insert.javajetinc[/comment]
  [/if]
	public [genModel.getImportedName('org.eclipse.emf.common.notify.NotificationChain')/] basicUnset[genFeature.getAccessorName()/]([genModel.getImportedName('org.eclipse.emf.common.notify.NotificationChain')/] msgs) {
  [if (genModel.isDynamicDelegation()) ]
		return eDynamicInverseRemove(([genModel.getImportedName('org.eclipse.emf.ecore.InternalEObject')/])[if (genFeature.isResolveProxies()) ]basicGet[genFeature.getAccessorName()/][else][genFeature.getGetAccessor()/][/if](), [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], msgs);
  [else][if (not genFeature.isVolatile()) ]
    [if (genModel.isVirtualDelegation()) ]
      [if (not genModel.suppressNotification) ]Object old[genFeature.getCapName()/] = [/if]eVirtualUnset([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/]);
    [else]
      [if (not genModel.suppressNotification) ]
		[genFeature.getImportedType(genClass)/] old[genFeature.getCapName()/] = [genFeature.getSafeName()/];
      [/if]
		[genFeature.getSafeName()/] = null;
    [/if]
    [if (genModel.isVirtualDelegation()) ]
      [if (not genModel.suppressNotification) ]
		boolean isSetChange = old[genFeature.getCapName()/] != EVIRTUAL_NO_VALUE;
      [/if]
    [else][if (genClass.isESetFlag(genFeature)) ]
      [if (not genModel.suppressNotification) ]
		boolean old[genFeature.getCapName()/]ESet = ([genClass.getESetFlagsField(genFeature)/] & [genFeature.getUpperName()/]_ESETFLAG) != 0;
      [/if]
		[genClass.getESetFlagsField(genFeature)/] &= ~[genFeature.getUpperName()/]_ESETFLAG;
    [else]
      [if (not genModel.suppressNotification) ]
		boolean old[genFeature.getCapName()/]ESet = [genFeature.getUncapName()/]ESet;
      [/if]
		[genFeature.getUncapName()/]ESet = false;
    [/if][/if]
    [if (not genModel.suppressNotification) ]
		if (eNotificationRequired()) {
			[genModel.getImportedName('org.eclipse.emf.ecore.impl.ENotificationImpl')/] notification = new [genModel.getImportedName('org.eclipse.emf.ecore.impl.ENotificationImpl')/](this, [genModel.getImportedName('org.eclipse.emf.common.notify.Notification')/].UNSET, [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], [if (genModel.isVirtualDelegation()) ]isSetChange ? old[genFeature.getCapName()/] : null[else]old[genFeature.getCapName()/][/if], null, [if (genModel.isVirtualDelegation()) ]isSetChange[else]old[genFeature.getCapName()/]ESet[/if]);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
    [/if]
  [else]
		// TODO: implement this method to unset the contained '[genFeature.getFormattedName()/]' [genFeature.getFeatureKind()/]
		// -> this method is automatically invoked to keep the containment relationship in synch
		// -> do not modify other features
		// -> return msgs, after adding any generated Notification to it (if it is null, a NotificationChain object must be created first)
		// Ensure that you remove @generated or mark it @generated NOT
		throw new UnsupportedOperationException();
  [/if][/if]
	}

[/if]
[if (genFeature.isUnset() and (isImplementation or not genFeature.isSuppressedUnsetVisibility())) ]
  [if (isInterface) ]
	/**
	 * Unsets the value of the '{@link [genClass.getQualifiedInterfaceName()/]#[genFeature.getGetAccessor()/] <em>[genFeature.getFormattedName()/]</em>}' [genFeature.getFeatureKind()/].
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
    [if (not genFeature.isSuppressedIsSetVisibility()) ]
	 * @see #isSet[genFeature.getAccessorName()/]()
    [/if]
	 * @see #[genFeature.getGetAccessor()/]()
    [if (not genFeature.isListType() and not genFeature.isSuppressedSetVisibility()) ]
	 * @see #set[genFeature.getAccessorName()/]([genFeature.getRawImportedBoundType()/])
    [/if]
	 * @generated
	 */
  [else][comment isInterface/]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    [if (isJDK50)][comment] { //Class/unsetGenFeature.annotations.insert.javajetinc[/comment]
    [/if]
  [/if][comment isInterface/]
  [if (not isImplementation) ]
	void unset[genFeature.getAccessorName()/]();

  [else][comment not isImplementation/]
	public void unset[genFeature.getAccessorName()/][if (genClass.hasCollidingUnsetAccessorOperation(genFeature)) ]_[/if]() {
    [if (genModel.isDynamicDelegation()) ]
		eDynamicUnset([genClass.getQualifiedFeatureID(genFeature)/], [genFeature.getQualifiedFeatureAccessor()/]);
    [else][if (genModel.reflectiveDelegation) ]
		eUnset([genFeature.getQualifiedFeatureAccessor()/]);
    [else][if (genFeature.hasSettingDelegate()) ]
		[genFeature.getUpperName()/]__ESETTING_DELEGATE.dynamicUnset(this, null, 0);
    [else][if (not genFeature.isVolatile()) ]
      [if (genFeature.isListType()) ]
        [if (genModel.isVirtualDelegation()) ]
		[genFeature.getImportedType(genClass)/] [genFeature.getSafeName()/] = ([genFeature.getImportedType(genClass)/])eVirtualGet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/]);
        [/if]
		if ([genFeature.getSafeName()/] != null) (([genModel.getImportedName('org.eclipse.emf.ecore.util.InternalEList')/].Unsettable[singleWildcard/])[genFeature.getSafeName()/]).unset();
      [else][if (genFeature.isBidirectional() or genFeature.isEffectiveContains()) ]
        [if (genModel.isVirtualDelegation()) ]
		[genFeature.getImportedType(genClass)/] [genFeature.getSafeName()/] = ([genFeature.getImportedType(genClass)/])eVirtualGet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/]);
        [/if]
		if ([genFeature.getSafeName()/] != null) {
			[genModel.getImportedName('org.eclipse.emf.common.notify.NotificationChain')/] msgs = null;
        [if (not genFeature.isBidirectional()) ]
			msgs = (([genModel.getImportedName('org.eclipse.emf.ecore.InternalEObject')/])[genFeature.getSafeName()/]).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - [genClass.getQualifiedFeatureID(genFeature)/][negativeOffsetCorrection/], null, msgs);
        [else]
          [let reverseFeature : GenFeature = genFeature.getReverse()]
            [let targetClass : GenClass = reverseFeature.genClass]
              [let reverseOffsetCorrection : String = if (targetClass.hasOffsetCorrection()) then ' + ' + genClass.getOffsetCorrectionField(genFeature) else '' endif]
			msgs = (([genModel.getImportedName('org.eclipse.emf.ecore.InternalEObject')/])[genFeature.getSafeName()/]).eInverseRemove(this, [targetClass.getQualifiedFeatureID(reverseFeature)/][reverseOffsetCorrection/], [targetClass.getRawImportedInterfaceName()/].class, msgs);
              [/let]
            [/let]
          [/let]
        [/if]
			msgs = basicUnset[genFeature.getAccessorName()/](msgs);
			if (msgs != null) msgs.dispatch();
		} else {
        [if (genModel.isVirtualDelegation()) ]
			boolean old[genFeature.getCapName()/]ESet = eVirtualIsSet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/]);
        [else][if (genClass.isESetFlag(genFeature)) ]
          [if (not genModel.suppressNotification) ]
			boolean old[genFeature.getCapName()/]ESet = ([genClass.getESetFlagsField(genFeature)/] & [genFeature.getUpperName()/]_ESETFLAG) != 0;
          [/if]
			[genClass.getESetFlagsField(genFeature)/] &= ~[genFeature.getUpperName()/]_ESETFLAG;
        [else]
          [if (not genModel.suppressNotification) ]
			boolean old[genFeature.getCapName()/]ESet = [genFeature.getUncapName()/]ESet;
          [/if]
			[genFeature.getUncapName()/]ESet = false;
        [/if][/if]
        [if (not genModel.suppressNotification) ]
			if (eNotificationRequired())
				eNotify(new [genModel.getImportedName('org.eclipse.emf.ecore.impl.ENotificationImpl')/](this, [genModel.getImportedName('org.eclipse.emf.common.notify.Notification')/].UNSET, [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], null, null, old[genFeature.getCapName()/]ESet));
        [/if]
		}
      [else]
        [if (genClass.isFlag(genFeature)) ]
          [if (not genModel.suppressNotification) ]
            [if (genFeature.isBooleanType()) ]
		[genFeature.getImportedType(genClass)/] old[genFeature.getCapName()/] = ([genClass.getFlagsField(genFeature)/] & [genFeature.getUpperName()/]_EFLAG) != 0;
            [else]
		[genFeature.getImportedType(genClass)/] old[genFeature.getCapName()/] = [genFeature.getUpperName()/]_EFLAG_VALUES['['/]([genClass.getFlagsField(genFeature)/] & [genFeature.getUpperName()/]_EFLAG) >>> [genFeature.getUpperName()/]_EFLAG_OFFSET];
            [/if]
          [/if]
        [else][if (genModel.isVirtualDelegation() and not genFeature.isPrimitiveType()) ]
		Object old[genFeature.getCapName()/] = eVirtualUnset([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/]);
        [else]
          [if (not genModel.suppressNotification) ]
		[genFeature.getImportedType(genClass)/] old[genFeature.getCapName()/] = [genFeature.getSafeName()/];
          [/if]
        [/if][/if]
       [if (not genModel.suppressNotification) ]
        [if (genModel.isVirtualDelegation() and not genFeature.isPrimitiveType()) ]
		boolean isSetChange = old[genFeature.getCapName()/] != EVIRTUAL_NO_VALUE;
          [else][if (genClass.isESetFlag(genFeature)) ]
		boolean old[genFeature.getCapName()/]ESet = ([genClass.getESetFlagsField(genFeature)/] & [genFeature.getUpperName()/]_ESETFLAG) != 0;
          [else]
		boolean old[genFeature.getCapName()/]ESet = [genFeature.getUncapName()/]ESet;
          [/if][/if]
        [/if]
        [if (genFeature.isReferenceType()) ]
		[genFeature.getSafeName()/] = null;
          [if (not genModel.isVirtualDelegation()) ]
            [if (genClass.isESetFlag(genFeature)) ]
		[genClass.getESetFlagsField(genFeature)/] &= ~[genFeature.getUpperName()/]_ESETFLAG;
            [else]
		[genFeature.getUncapName()/]ESet = false;
            [/if]
          [/if]
          [if (not genModel.suppressNotification) ]
		if (eNotificationRequired())
			eNotify(new [genModel.getImportedName('org.eclipse.emf.ecore.impl.ENotificationImpl')/](this, [genModel.getImportedName('org.eclipse.emf.common.notify.Notification')/].UNSET, [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], [if (genModel.isVirtualDelegation()) ]isSetChange ? old[genFeature.getCapName()/] : null[else]old[genFeature.getCapName()/][/if], null, [if (genModel.isVirtualDelegation()) ]isSetChange[else]old[genFeature.getCapName()/]ESet[/if]));
          [/if]
        [else]
          [if (genClass.isFlag(genFeature)) ]
            [if (genFeature.isBooleanType()) ]
		if ([genFeature.getEDefault()/]) [genClass.getFlagsField(genFeature)/] |= [genFeature.getUpperName()/]_EFLAG; else [genClass.getFlagsField(genFeature)/] &= ~[genFeature.getUpperName()/]_EFLAG;
            [else]
		[genClass.getFlagsField(genFeature)/] = [genClass.getFlagsField(genFeature)/] & ~[genFeature.getUpperName()/]_EFLAG | [genFeature.getUpperName()/]_EFLAG_DEFAULT;
            [/if]
          [else][if (not genModel.isVirtualDelegation() or genFeature.isPrimitiveType()) ]
		[genFeature.getSafeName()/] = [genFeature.getEDefault()/];
          [/if][/if]
          [if (not genModel.isVirtualDelegation() or genFeature.isPrimitiveType()) ]
            [if (genClass.isESetFlag(genFeature)) ]
		[genClass.getESetFlagsField(genFeature)/] &= ~[genFeature.getUpperName()/]_ESETFLAG;
            [else]
		[genFeature.getUncapName()/]ESet = false;
            [/if]
          [/if]
          [if (not genModel.suppressNotification) ]
		if (eNotificationRequired())
			eNotify(new [genModel.getImportedName('org.eclipse.emf.ecore.impl.ENotificationImpl')/](this, [genModel.getImportedName('org.eclipse.emf.common.notify.Notification')/].UNSET, [genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/], [if (genModel.isVirtualDelegation() and not genFeature.isPrimitiveType()) ]isSetChange ? old[genFeature.getCapName()/] : [genFeature.getEDefault()/][else]old[genFeature.getCapName()/][/if], [genFeature.getEDefault()/], [if (genModel.isVirtualDelegation() and not genFeature.isPrimitiveType()) ]isSetChange[else]old[genFeature.getCapName()/]ESet[/if]));
          [/if]
        [/if]
      [/if][/if]
    [else]][if (genFeature.hasDelegateFeature())]
      [let delegateFeature : GenFeature = genFeature.getDelegateFeature()]
        [if (delegateFeature.isWrappedFeatureMapType()) ]
		(([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal)(([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal.Wrapper)get[delegateFeature.getAccessorName()/]()).featureMap()).clear([genFeature.getQualifiedFeatureAccessor()/]);
        [else]
		(([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal)get[delegateFeature.getAccessorName()/]()).clear([genFeature.getQualifiedFeatureAccessor()/]);
        [/if]
      [/let]
    [else][if (genClass.getUnsetAccessorOperation(genFeature) <> null) ]
		[genClass.getUnsetAccessorOperation(genFeature).getBody(genModel.getIndentation())/]
    [else]
		// TODO: implement this method to unset the '[genFeature.getFormattedName()/]' [genFeature.getFeatureKind()/]
		// Ensure that you remove @generated or mark it @generated NOT
		throw new UnsupportedOperationException();
    [/if][/if][/if][/if][/if][/if]
	}

  [/if][comment not isImplementation/]
[/if]
[if (genFeature.isIsSet() and (isImplementation or not genFeature.isSuppressedIsSetVisibility())) ]
  [if (isInterface) ]
	/**
	 * Returns whether the value of the '{@link [genClass.getQualifiedInterfaceName()/]#[genFeature.getGetAccessor()/] <em>[genFeature.getFormattedName()/]</em>}' [genFeature.getFeatureKind()/] is set.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return whether the value of the '<em>[genFeature.getFormattedName()/]</em>' [genFeature.getFeatureKind()/] is set.
    [if (genFeature.isChangeable() and not genFeature.isSuppressedUnsetVisibility()) ]
	 * @see #unset[genFeature.getAccessorName()/]()
    [/if]
	 * @see #[genFeature.getGetAccessor()/]()
    [if (not genFeature.isListType() and genFeature.isChangeable() and not genFeature.isSuppressedSetVisibility()) ]
	 * @see #set[genFeature.getAccessorName()/]([genFeature.getRawImportedBoundType()/])
    [/if]
	 * @generated
	 */
  [else][comment isInterface/]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
    [comment][if (isJDK50)][comment] { //Class/isSetGenFeature.annotations.insert.javajetinc[/comment]
    [/if][/comment]
  [/if][comment isInterface/]
  [if (not isImplementation) ]
	boolean isSet[genFeature.getAccessorName()/]();

  [else][comment not isImplementation/]
	public boolean isSet[genFeature.getAccessorName()/][if (genClass.hasCollidingIsSetAccessorOperation(genFeature)) ]_[/if]() {
    [if (genModel.isDynamicDelegation()) ]
		return eDynamicIsSet([genClass.getQualifiedFeatureID(genFeature)/], [genFeature.getQualifiedFeatureAccessor()/]);
    [else][if (genModel.reflectiveDelegation) ]
		return eIsSet([genFeature.getQualifiedFeatureAccessor()/]);
    [else][if (genFeature.hasSettingDelegate()) ]
		return [genFeature.getUpperName()/]__ESETTING_DELEGATE.dynamicIsSet(this, null, 0);
    [else][if (not genFeature.isVolatile()) ]
      [if (genFeature.isListType()) ]
        [if (genModel.isVirtualDelegation()) ]
		[genFeature.getImportedType(genClass)/] [genFeature.getSafeName()/] = ([genFeature.getImportedType(genClass)/])eVirtualGet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/]);
        [/if]
		return [genFeature.getSafeName()/] != null && (([genModel.getImportedName('org.eclipse.emf.ecore.util.InternalEList')/].Unsettable[singleWildcard/])[genFeature.getSafeName()/]).isSet();
      [else]
        [if (genModel.isVirtualDelegation() and not genFeature.isPrimitiveType()) ]
		return eVirtualIsSet([genClass.getQualifiedFeatureID(genFeature)/][positiveOffsetCorrection/]);
        [else][if (genClass.isESetFlag(genFeature)) ]
		return ([genClass.getESetFlagsField(genFeature)/] & [genFeature.getUpperName()/]_ESETFLAG) != 0;
        [else]
		return [genFeature.getUncapName()/]ESet;
        [/if][/if]
      [/if]
    [else][if (genFeature.hasDelegateFeature())]
      [let delegateFeature : GenFeature = genFeature.getDelegateFeature()]
        [if (delegateFeature.isWrappedFeatureMapType()) ]
		return !(([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal)(([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal.Wrapper)get[delegateFeature.getAccessorName()/]()).featureMap()).isEmpty([genFeature.getQualifiedFeatureAccessor()/]);
        [else]
		return !(([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal)get[delegateFeature.getAccessorName()/]()).isEmpty([genFeature.getQualifiedFeatureAccessor()/]);
        [/if]
      [/let]
    [else][if (genClass.getIsSetAccessorOperation(genFeature) <> null) ]
		[genClass.getIsSetAccessorOperation(genFeature).getBody(genModel.getIndentation())/]
    [else]
		// TODO: implement this method to return whether the '[genFeature.getFormattedName()/]' [genFeature.getFeatureKind()/] is set
		// Ensure that you remove @generated or mark it @generated NOT
		throw new UnsupportedOperationException();
    [/if][/if][/if][/if][/if][/if]
	}

  [/if][comment not isImplementation/]
[/if]
[/template]
