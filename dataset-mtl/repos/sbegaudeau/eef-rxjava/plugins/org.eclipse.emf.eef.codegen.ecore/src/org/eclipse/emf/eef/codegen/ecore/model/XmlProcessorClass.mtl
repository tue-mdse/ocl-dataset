[comment encoding = UTF-8 /]
[module XmlProcessorClass('http://www.eclipse.org/emf/2002/GenModel', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipse::emf::eef::codegen::ecore::services::common /]
[import org::eclipse::emf::eef::codegen::ecore::services::header /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenPackage /]
[import org::eclipse::emf::eef::codegen::ecore::services::StringUtil /]

[comment]
/**
 * <copyright>
 *
 * Copyright (c) 2005-2006 IBM Corporation and others. 
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   IBM - Initial API and implementation
 *
 * </copyright>
 */
[/comment]

[template public xmlProcessorClass(genPackage : GenPackage) { genModel : GenModel = genPackage.genModel; packageName : String = genPackage.getUtilitiesPackageName(); className : String = genPackage.getXMLProcessorClassName();} ]
[genModel.initializeImportManager(packageName, className)/]

[genModel.getImportedName('java.util.Map')/]

[file (genPackage.xmlProcessorClassPath(), false, 'UTF-8')]
[genModel.includeHeader()/]
package [packageName/];
[let content : String = genPackage.xmlProcessorFileContent(genModel, className)]
[genModel.genSortedImports()/]

[content/]
[/let]
[/file]
[/template]

[template protected xmlProcessorFileContent(genPackage : GenPackage, genModel : GenModel, className : String)]
/**
 * This class contains helper methods to serialize and deserialize XML documents
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class [className/] extends [genPackage.getImportedXMLProcessorBaseClassName()/]
{
[if (genModel.hasCopyrightField())]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final [genModel.getImportedName('java.lang.String')/] copyright = [genModel.getCopyrightFieldLiteral()/];[genModel.getNonNLS()/]

[/if]

	/**
	 * Public constructor to instantiate the helper.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public [genPackage.getXMLProcessorClassName()/]()
	{
[if (genPackage.hasExtendedMetaData() and not genPackage.hasTargetNamespace())]
		super(new [genModel.getImportedName('org.eclipse.emf.ecore.impl.EPackageRegistryImpl')/]([genModel.getImportedName('org.eclipse.emf.ecore.EPackage')/].Registry.INSTANCE));
		extendedMetaData.putPackage(null, [genPackage.getImportedPackageInterfaceName()/].eINSTANCE);
[else]
		super(([genModel.getImportedName('org.eclipse.emf.ecore.EPackage')/].Registry.INSTANCE));
		[genPackage.getImportedPackageInterfaceName()/].eINSTANCE.eClass();
[/if]
	}
	
	/**
	 * Register for "*" and "xml" file extensions the [genPackage.getResourceFactoryClassName()/] factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
  [if (genModel.useClassOverrideAnnotation())]
	@Override
  [/if]
	protected Map[if (genModel.isJDK50())]<[genModel.getImportedName('java.lang.String')/], [genModel.getImportedName('org.eclipse.emf.ecore.resource.Resource')/].Factory>[/if] getRegistrations()
	{
		if (registrations == null)
		{
			super.getRegistrations();
			registrations.put(XML_EXTENSION, new [genPackage.getResourceFactoryClassName()/]());
			registrations.put(STAR_EXTENSION, new [genPackage.getResourceFactoryClassName()/]());
		}
		return registrations;
	}

} //[genPackage.getXMLProcessorClassName()/]
[/template]

[query public xmlProcessorClassPath(genPackage : GenPackage) : String
	= genPackage.genModel.extractSourceDirectory(genPackage.genModel.modelDirectory) + '/'
		+ genPackage.getQualifiedXMLProcessorClassName().toPath() + '.java'/]
