[comment encoding = UTF-8 /]
[module SwitchClass('http://www.eclipse.org/emf/2002/GenModel', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipse::emf::eef::codegen::ecore::services::common /]
[import org::eclipse::emf::eef::codegen::ecore::services::header /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenPackage /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClass /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClassifier /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenParameter /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenFeature /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenDataType /]
[import org::eclipse::emf::eef::codegen::ecore::services::StringUtil /]

[comment]
/**
 * <copyright>
 *
 * Copyright (c) 2002-2006 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   IBM - Initial API and implementation
 *
 * </copyright>
 */
[/comment]

[template public switchClass(genPackage : GenPackage) { genModel : GenModel = genPackage.genModel;
	packageName : String = genPackage.getUtilitiesPackageName();
	className : String = genPackage.getSwitchClassName();
	supportsComposition : Boolean = genModel.supportsComposition();} ]
[genModel.initializeImportManager(packageName, className)/]

[if (supportsComposition)]
[genModel.addImport('org.eclipse.emf.ecore.EObject')/]
[genModel.addImport('org.eclipse.emf.ecore.EPackage')/]
[genModel.addImport('org.eclipse.emf.ecore.util.Switch')/]
[else]
[genModel.addImport('org.eclipse.emf.ecore.EClass')/]
[genModel.addImport('org.eclipse.emf.ecore.EObject')/]
[/if]
[if (not genPackage.hasJavaLangConflict() and genPackage.getUtilitiesPackageName() <> genPackage.getInterfacePackageName())]
[genModel.addImport(genPackage.getInterfacePackageName() + '.*')/]
[/if]

[file (genPackage.switchClassPath(), false, 'UTF-8')]
[genModel.includeHeader()/]
package [packageName/];
[let templateParameterName : String = genPackage.computeSwitchGenericTypeName()]
	[let templateParameters : String = if (genModel.useGenerics()) then '<' + templateParameterName + '>' else '' endif]
		[let returnType : String = if (genModel.useGenerics()) then templateParameterName else genModel.getImportedName('java.lang.Object') endif]
			[let content : String = genPackage.switchFileContent(genModel, templateParameters, returnType, supportsComposition, className)]
[genModel.genSortedImports()/]

[content/]
			[/let]
		[/let]
	[/let]
[/let]
[/file]
[/template]

[template protected switchFileContent(genPackage : GenPackage, genModel : GenModel, templateParameters : String, returnType : String, supportsComposition : Boolean, className : String)]
/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see [genPackage.getQualifiedPackageInterfaceName()/]
 * @generated
 */
public class [className/][templateParameters/][if (supportsComposition)] extends Switch[templateParameters/][/if] {
[if (genModel.hasCopyrightField())]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final [genModel.getImportedName('java.lang.String')/] copyright = [genModel.getCopyrightFieldLiteral()/];[genModel.getNonNLS()/]

[/if]
	/**
	 * The cached model package
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static [genPackage.getImportedPackageInterfaceName()/] modelPackage;

	/**
	 * Creates an instance of the switch.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public [genPackage.getSwitchClassName()/]() {
		if (modelPackage == null) {
			modelPackage = [genPackage.getImportedPackageInterfaceName()/].eINSTANCE;
		}
	}

[if (supportsComposition)]
	/**
	 * Checks whether this is a switch for the given package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @parameter ePackage the package in question.
	 * @return whether this is a switch for the given package.
	 * @generated
	 */
	@Override
	protected boolean isSwitchFor(EPackage ePackage) {
		return ePackage == modelPackage;
	}
[else]
	/**
	 * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the first non-null result returned by a <code>caseXXX</code> call.
	 * @generated
	 */
	public [returnType/] doSwitch(EObject theEObject) {
		return doSwitch(theEObject.eClass(), theEObject);
	}

	/**
	 * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the first non-null result returned by a <code>caseXXX</code> call.
	 * @generated
	 */
	protected [returnType/] doSwitch(EClass theEClass, EObject theEObject) {
		if (theEClass.eContainer() == modelPackage) {
			return doSwitch(theEClass.getClassifierID(), theEObject);
		} else {
			[genModel.getImportedName('java.util.List')/][if (genModel.useGenerics())]<[genModel.getImportedName('org.eclipse.emf.ecore.EClass')/]>[/if] eSuperTypes = theEClass.getESuperTypes();
			return
				eSuperTypes.isEmpty() ?
					defaultCase(theEObject) :
					doSwitch([if (not genModel.useGenerics())](EClass)[/if]eSuperTypes.get(0), theEObject);
		}
	}
[/if]

	/**
	 * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the first non-null result returned by a <code>caseXXX</code> call.
	 * @generated
	 */
[if (supportsComposition)]
	@Override
[/if]
	protected [returnType/] doSwitch(int classifierID, EObject theEObject) {
		switch (classifierID) {
[for (genClass : GenClass | genPackage.genClasses)]
[if (not genClass.isExternalInterface() and not genClass.isEObject() or genClass.isMapEntry())]
	[let result : String = if ('result' = genClass.getSafeUncapName()) then 'theResult' else 'result' endif]
			case [genPackage.getImportedPackageInterfaceName()/].[genPackage.getClassifierID(genClass)/]: {
				[if (genClass.isUncheckedCast() or genClass.isMapEntry() and genModel.isJDK50())]@SuppressWarnings("unchecked") [/if][genClass.getImportedInterfaceName()/][genClass.getInterfaceWildTypeArguments()/] [genClass.getSafeUncapName()/] = ([genClass.getImportedInterfaceName()/][genClass.getInterfaceWildTypeArguments()/])theEObject;
				[returnType/] [result/] = case[genPackage.getClassUniqueName(genClass)/]([genClass.getSafeUncapName()/]);
		[for (baseGenClass : GenClass | genClass.getSwitchGenClasses())]
				if ([result/] == null) [result/] = case[genPackage.getClassUniqueName(baseGenClass)/]([if (genClass.isMapEntry())]([baseGenClass.getImportedInterfaceName()/][baseGenClass.getInterfaceTypeArguments()/])[/if][genClass.getSafeUncapName()/]);
		[/for]
				if ([result/] == null) [result/] = defaultCase(theEObject);
				return [result/];
			}
	[/let]
[/if]
[/for]
			default: return defaultCase(theEObject);
		}
	}
[for (genClass : GenClass | genPackage.getAllSwitchGenClasses())]

	/**
	 * Returns the result of interpreting the object as an instance of '<em>[genClass.getFormattedName()/]</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>[genClass.getFormattedName()/]</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public [genClass.getTypeParameters()/][returnType/] case[genPackage.getClassUniqueName(genClass)/]([genClass.getImportedInterfaceName()/][genClass.getInterfaceTypeArguments()/] object) {
		return null;
	}
[/for]

	/**
	 * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch, but this is the last case anyway.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject)
	 * @generated
	 */
[if (supportsComposition)]
	@Override
[/if]
	public [returnType/] defaultCase(EObject object) {
		return null;
	}

} //[className/]
[/template]

[query public switchClassPath(genPackage : GenPackage) : String
	= genPackage.genModel.extractSourceDirectory(genPackage.genModel.modelDirectory) + '/'
		+ genPackage.getQualifiedSwitchClassName().toPath() + '.java'/]
