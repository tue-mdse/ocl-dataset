[comment encoding = UTF-8 /]
[module AdapterFactoryClass('http://www.eclipse.org/emf/2002/GenModel')/]

[import org::eclipse::emf::eef::codegen::ecore::services::common /]
[import org::eclipse::emf::eef::codegen::ecore::services::header /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenPackage /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClass /]
[import org::eclipse::emf::eef::codegen::ecore::services::StringUtil /]

[template public adapterFactoryClass(genPackage : GenPackage)]
[let genModel : GenModel = genPackage.genModel]
[let packageName : String = genPackage.getUtilitiesPackageName()]
[let className :String = genPackage.getAdapterFactoryClassName()]
[genModel.initializeImportManager(packageName, className)/]
[genModel.addImport('org.eclipse.emf.common.notify.Adapter')/]
[genModel.addImport('org.eclipse.emf.common.notify.Notifier')/]
[genModel.addImport('org.eclipse.emf.common.notify.impl.AdapterFactoryImpl')/]
[genModel.addImport('org.eclipse.emf.ecore.EObject')/]
[if (not genPackage.hasJavaLangConflict()  and genPackage.getUtilitiesPackageName() <> genPackage.getInterfacePackageName())][genModel.addImport(genPackage.getInterfacePackageName() + '.*')/][/if]

[let typeArgument : String = if genModel.useGenerics() then '<Adapter>' else '' endif]
[let returnType : String = if genModel.useGenerics() then 'Adapter' else genModel.getImportedName('java.lang.Object') endif]
[let adapterCast : String = if genModel.useGenerics() then '' else '(Adapter)' endif]



[file (adapterFactoryClassPath(genPackage), false, 'UTF-8')]
[genModel.includeHeader()/]
package [packageName/];
[let content : String = genPackage.adapterFactoryFileContent(genModel, typeArgument, returnType, adapterCast)]
[genModel.genSortedImports()/]

[content.trim()/]
[/let]
[/file]



[/let]
[/let]
[/let]
[/let]
[/let]
[/let]
[/template]

[template protected adapterFactoryFileContent(genPackage : GenPackage, genModel : GenModel, typeArgument : String, returnType : String, adapterCast : String) ]
/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see [genPackage.getQualifiedPackageInterfaceName()/]
 * @generated
 */
public class [genPackage.getAdapterFactoryClassName()/] extends AdapterFactoryImpl {
[if (genModel.hasCopyrightField()) ]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final [genModel.getImportedName('java.lang.String')/] copyright = [genModel.getCopyrightFieldLiteral()/];[genModel.getNonNLS()/]

[/if]
	/**
	 * The cached model package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static [genPackage.getImportedPackageInterfaceName()/] modelPackage;

	/**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public [genPackage.getAdapterFactoryClassName()/]() {
		if (modelPackage == null) {
			modelPackage = [genPackage.getImportedPackageInterfaceName()/].eINSTANCE;
		}
	}

	/**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
	 * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
	 * <!-- end-user-doc -->
	 * @return whether this factory is applicable for the type of the object.
	 * @generated
	 */
  [if genModel.useClassOverrideAnnotation() ]
	@Override
  [/if]
	public boolean isFactoryForType(Object object) {
		if (object == modelPackage) {
			return true;
		}
		if (object instanceof EObject) {
			return ((EObject)object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

	/**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected [genPackage.getSwitchClassName()/][typeArgument/] modelSwitch =
		new [genPackage.getSwitchClassName()/][typeArgument/]() {
[for (genClass : GenClass | genPackage.getAllSwitchGenClasses()) ]
  [if  (genModel.useClassOverrideAnnotation())  ]
			@Override
  [/if]
			public [genClass.getTypeParameters()/][returnType/] case[genPackage.getClassUniqueName(genClass)/]([genClass.getImportedInterfaceName()/][genClass.getInterfaceTypeArguments()/] object) {
				return create[genPackage.getClassUniqueName(genClass)/]Adapter();
			}
[/for]
  [if  (genModel.useClassOverrideAnnotation())  ]
			@Override
  [/if]
			public [returnType/] defaultCase(EObject object) {
				return create[genPackage.getDefaultClassUniqueName()/]Adapter();
			}
		};

	/**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param target the object to adapt.
	 * @return the adapter for the <code>target</code>.
	 * @generated
	 */
  [if  (genModel.useClassOverrideAnnotation())  ]
	@Override
  [/if]
	public Adapter createAdapter(Notifier target) {
		return [adapterCast/]modelSwitch.doSwitch((EObject)target);
	}

[for (genClass : GenClass | genPackage.getAllSwitchGenClasses()) ]

	/**
	 * Creates a new adapter for an object of class '{@link [genClass.getQualifiedInterfaceName()/] <em>[genClass.getFormattedName()/]</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see [genClass.getQualifiedInterfaceName()/]
	 * @generated
	 */
	public Adapter create[genPackage.getClassUniqueName(genClass)/]Adapter() {
		return null;
	}
[/for]

	/**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @generated
	 */
	public Adapter create[genPackage.getDefaultClassUniqueName()/]Adapter() {
		return null;
	}

} //[genPackage.getAdapterFactoryClassName()/]
[/template]

[query public adapterFactoryClassPath(genPackage : GenPackage) : String
	= genPackage.genModel.modelPath(genPackage.getUtilitiesPackageName().toPath(), genPackage.getAdapterFactoryClassName()) /]
