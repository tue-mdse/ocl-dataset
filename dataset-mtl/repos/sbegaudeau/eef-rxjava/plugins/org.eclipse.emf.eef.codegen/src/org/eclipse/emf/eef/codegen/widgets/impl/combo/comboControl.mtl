[comment encoding = UTF-8
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module comboControl('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/mapping/1.0.0', 'http://www.eclipse.org/emf/eef/generation/1.0.0') extends org::eclipse::emf::eef::codegen::widgets::api::widgetControl/]

[import org::eclipse::emf::eef::codegen::services::naming /]
[import org::eclipse::emf::eef::codegen::services::common /]
[import org::eclipse::emf::eef::codegen::services::typeUtils /]
[import org::eclipse::emf::eef::codegen::services::filters /]
[import org::eclipse::emf::eef::codegen::services::imports /]

[comment ===== Case : model = Reference - view = Combo ===== /]
[template public declareEObjectUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides declareEObjectUpdater ? (editionElement.model.isReferenceSingle() and editionElement.representationName('Combo') and not editionElement.canGeneratemodelNavigation())]
[pec.model.name.toJavaIdentifier().disambiguation('event')/].set[editionElement.model.name.toUpperFirst()/](!"".equals(event.getNewValue()) ? ([include(editionElement.peeModelQualifiedClass())/]) event.getNewValue() : null);
[/template]

[template public liveUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides liveUpdater ? (editionElement.model.isReferenceSingle() and editionElement.representationName('Combo'))]
if ([editionElement.liveUpdaterNavigationCondition(pec)/] && [view.viewIdentifier(pec)/] != null && isAccessible([editionElement.views->first().editorID()/]))
	[view.viewIdentifier(pec)/].[editionElement.views->first().viewPackageSetter()/](([editionElement.views->first().toJavaType().trim()/])msg.getNewValue());
[/template]

[template public updater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides updater ? (editionElement.model.isReferenceSingle() and editionElement.representationName('Combo') and not editionElement.canGeneratemodelNavigation())]
if (isAccessible([editionElement.views->first().editorID()/])) {
	[view.viewIdentifier(pec)/].init[editionElement.views->first().viewPackageSignature()/]([include('org.eclipse.emf.eef.runtime.impl.utils.EEFUtils')/].choiceOfValues([pec.model.name.toJavaIdentifier()/], [editionElement.metamodelGetter()/]), [pec.model.name.toJavaIdentifier()/].get[editionElement.model.name.toUpperFirst()/]());
}
[/template]

[template public filterUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides filterUpdater ? (editionElement.model.isReferenceSingle() and editionElement.representationName('Combo'))]
[for (filter : BindingFilter | editionElement.bindingFilters)]
[filter.filterBody(editionElement,view,pec)/]
[/for]
[if (not editionElement.element.eContainer(PropertiesEditionContext).associatedGenModel().useJMergeForUserCode)]
[additionalBusinessFilterProtectedArea(editionElement)/]
[/if]
[/template]

[comment ===== Case : model = Reference - view = Combo - ModelNavigation ===== /]

[template public declareEObjectUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides declareEObjectUpdater ? (editionElement.model.isReferenceSingle() and editionElement.representationName('Combo') and editionElement.canGeneratemodelNavigation())]
[editionElement.name.toJavaIdentifier()/]Settings.setValue(!"".equals(event.getNewValue()) ? ([include(editionElement.peeModelQualifiedClass())/]) event.getNewValue() : null);
[/template]

[template public updater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides updater ? (editionElement.model.isReferenceSingle() and editionElement.representationName('Combo') and editionElement.canGeneratemodelNavigation())]
if ([editionElement.name.toJavaIdentifier()/]Settings.getSignificantObject() != null && isAccessible([editionElement.views->first().editorID()/])) {
	[view.viewIdentifier(pec)/].init[editionElement.views->first().viewPackageSignature()/]([include('org.eclipse.emf.eef.runtime.impl.utils.EEFUtils')/].choiceOfValues([editionElement.name.toJavaIdentifier()/]Settings.getSignificantObject(), [editionElement.metamodelGetter()/]), [editionElement.name.toJavaIdentifier()/]Settings.getValue());
}
[/template]

[comment ===== Case : model = Attribute - view = Combo ===== /]
[template public declareEObjectUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides declareEObjectUpdater ? (editionElement.model.isAttributeSingle() and editionElement.representationName('Combo') and not editionElement.canGeneratemodelNavigation())][pec.pecModelClass().toJavaIdentifier()/].set[editionElement.model.name.toUpperFirst()/](([editionElement.model.eType.instanceClass/])event.getNewValue());
[pec.model.name.toJavaIdentifier()/].set[editionElement.model.name.toUpperFirst()/](([include(editionElement.peeModelQualifiedClass())/])event.getNewValue());
[/template]

[template public liveUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides liveUpdater ? (editionElement.model.isAttributeSingle() and editionElement.representationName('Combo'))]
if ([editionElement.liveUpdaterNavigationCondition(pec)/] && [view.viewIdentifier(pec)/] != null && isAccessible([editionElement.views->first().editorID()/]))
	[view.viewIdentifier(pec)/].[editionElement.views->first().viewPackageSetter()/](([editionElement.views->first().toJavaType().trim()/])msg.getNewValue());
[/template]

[template public updater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides updater ? (editionElement.model.isAttributeSingle() and editionElement.representationName('Combo') and not editionElement.canGeneratemodelNavigation())]
if (isAccessible([editionElement.views->first().editorID()/])) {
	[if (pec.eContainer(PropertiesEditionContext).associatedGenModel().useJMergeForUserCode)]
	[defaultInitialization()/]
	[else]	
	// [protected ('for '.concat(editionElement.name).concat(' editor initialization'))]
	[defaultInitialization()/]
	// [/protected]
	[/if]
	[view.viewIdentifier(pec)/].init[editionElement.views->first().viewPackageSignature()/](input[editionElement.name.toJavaClassifier()/], [pec.pecModelClass().toJavaIdentifier()/].get[editionElement.model.name.toUpperFirst()/]());
}
[/template]

[template private defaultInitialization(editionElement : PropertiesEditionElement) ]
java.util.Collection<Object> input[editionElement.name.toJavaClassifier()/] = new ArrayList<Object>(3);
input[editionElement.name.toJavaClassifier()/].add("one");
input[editionElement.name.toJavaClassifier()/].add("two");
input[editionElement.name.toJavaClassifier()/].add("three");
[/template]

[template public filterUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides filterUpdater ? (editionElement.model.isAttributeSingle() and editionElement.representationName('Combo'))]
[/template]

[comment ===== Case : model = Attribute - view = Combo - ModelNavigation ===== /]
[template public declareEObjectUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides declareEObjectUpdater ? (editionElement.model.isAttributeSingle() and editionElement.representationName('Combo') and editionElement.canGeneratemodelNavigation())]
[editionElement.name.toJavaIdentifier()/]Settings.setValue(([include(editionElement.peeModelQualifiedClass())/])event.getNewValue());
[/template]

[template public updater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides updater ? (editionElement.model.isAttributeSingle() and editionElement.representationName('Combo') and editionElement.canGeneratemodelNavigation())]
if (isAccessible([editionElement.views->first().editorID()/])) {
	[if (pec.eContainer(PropertiesEditionContext).associatedGenModel().useJMergeForUserCode)]
	[defaultInitialization()/]
	[else]	
	// [protected ('for '.concat(editionElement.name).concat(' editor initialization'))]
	[defaultInitialization()/]
	// [/protected]
	[/if]
	[view.viewIdentifier(pec)/].init[editionElement.views->first().viewPackageSignature()/](input[editionElement.name.toJavaClassifier()/], [editionElement.name.toJavaIdentifier()/]Settings.getValue());
}
[/template]


