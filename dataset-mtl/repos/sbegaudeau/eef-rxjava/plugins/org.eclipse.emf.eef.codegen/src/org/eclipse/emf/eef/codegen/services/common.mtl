[comment encoding=UTF-8 
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module common('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/2002/GenModel', 'http://www.eclipse.org/emf/eef/mapping/1.0.0', 'http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/eef/generation/1.0.0')/]

[import org::eclipse::emf::eef::codegen::services::imports /]
[import org::eclipse::emf::eef::codegen::services::emfCodeGen /]

[comment --------------- Common queries --------------- /]

[comment Check if at least one views of the propertyBinding is contained by the given view /]
[query public involvedViews(pec : PropertiesEditionComponent) : OrderedSet(View) = 
	pec.views->asSequence()->union(pec.referencedBinding.binding.views->select(ancestors(View)->excludesAll(pec.views->asSequence())))->asOrderedSet()/]

[query public involvedEditionElements(pec : PropertiesEditionComponent) : OrderedSet(PropertiesEditionElement) = 
	pec.properties->asSequence()->union(pec.referencedBinding.binding.properties)->asOrderedSet()/]

[query public editionContext(pec : PropertiesEditionComponent) : PropertiesEditionContext = 
	if (pec.ancestors()->select(oclIsTypeOf(PropertiesEditionContext))->notEmpty()) then 
	pec.ancestors()->select(oclIsTypeOf(PropertiesEditionContext))->first()
	else null
	endif/]

[query public owningView(element : ViewElement) : View = 
	if (element.oclIsKindOf(View))
	then element.oclAsType(View)
	else element.container.owningView()
	endif/]

[query public owningViewString(element : ViewElement) : String = 
	if (element.oclIsKindOf(View))
	then element.oclAsType(View).name.toJavaClassifier()
	else element.container.owningViewString()
	endif/]

[query public hasOwningViewsRepository(view : View) : Boolean = view.ancestors(ViewsRepository)->notEmpty()/]

[query public owningViewsRepository(view : View) : ViewsRepository = 
	if (view.hasOwningViewsRepository()) then 
	view.ancestors(ViewsRepository)->first()
	else null
	endif/]

[query public owningViewsRepository(element : ViewElement) : ViewsRepository = 
	element.owningView().owningViewsRepository()/]

[query public referencedViews(view : View) : Sequence(View) = 
	view.eAllContents(ViewReference).view->select(oclIsTypeOf(View))/]

[query public ownedBy(element : ViewElement, view : View) : Boolean = 
	element.owningView() = view/]

[query public involvedEditionElementsInView(pec : PropertiesEditionComponent, v : View) : OrderedSet(PropertiesEditionElement) = 
	pec.involvedEditionElements()->select(views->first().ownedBy(v))/]

[query public propertiesEditionElement(element : ElementEditor, pec : PropertiesEditionComponent) : PropertiesEditionElement =
	pec.properties->select(views->includes(element))->first().oclAsType(PropertiesEditionElement)/]

[query public relatedComponent(view : View, pec : PropertiesEditionComponent) : PropertiesEditionComponent =
	if (pec.views->includes(view))
	then pec.oclAsType(PropertiesEditionComponent)
	else pec.referencedBinding.binding->select(views->includes(view))->first().oclAsType(PropertiesEditionComponent)
	endif/]

[query public fullPartInterfacePath(pepCompletePackage : String, pepInterface : String) : String = 
	pepCompletePackage.concat('.parts.').concat(pepInterface)/]

[query public associatedGenFeature(pee : PropertiesEditionElement) : GenFeature = 
	let genFeatures : OrderedSet(GenFeature) = pee.model.eInverse(GenFeature) in
	if genFeatures->isEmpty() then null else genFeatures->first() endif/]

[query public associatedGenPackage(p : EPackage) : GenPackage = 
	p.eInverse(GenPackage)->first()/]

[query public associatedGenPackage(pec : PropertiesEditionComponent) : GenPackage = 
	pec.model.ePackage.associatedGenPackage()/]

[query public associatedGenContext(peco : PropertiesEditionContext) : GenEditionContext = 
	peco.eInverse(GenEditionContext)->first()/]

[query public associatedGenContext(pec : PropertiesEditionComponent) : GenEditionContext = 
	pec.editionContext().associatedGenContext() /]

[query public associatedGenModel(pec : PropertiesEditionContext) : EEFGenModel = 
	pec.associatedGenContext().eefGenModel/]

[query public associatedEMFGenModel(pec : PropertiesEditionContext, ePackage : EPackage) : GenPackage = 
	if (pec.model.ecorePackage = ePackage) 
	then pec.model
	else if (pec.model.eAllContents(GenPackage)->select(p : GenPackage | p.ecorePackage = ePackage)->size() > 0)
		 then pec.model.eAllContents(GenPackage)->select(p : GenPackage | p.ecorePackage = ePackage)->first()
		 else null
		 endif
	endif/]

[query public associatedGenRepository(view : View) : GenViewsRepository = 
	view.owningViewsRepository().associatedGenRepository()/]

[query public associatedGenRepository(viewsRepository : ViewsRepository) : GenViewsRepository = 
	viewsRepository.eInverse(GenViewsRepository) -> first()/]

[query public associatedGenModel(viewsRepository : ViewsRepository) : EEFGenModel = 
	if not viewsRepository.associatedGenRepository().oclIsUndefined()
	then viewsRepository.associatedGenRepository().eefGenModel
	else null
	endif/]

[query public associatedPEC(eclass : EClass, peContext : PropertiesEditionContext) : PropertiesEditionComponent = if eclass.eInverse(PropertiesEditionComponent)->isEmpty() then null else eclass.eInverse(PropertiesEditionComponent)->first() endif/]

[query public significantClass(ePackage : EPackage) : Set(EClass) = ePackage.eClassifiers->filter(EClass).classAndHierarchy()->asOrderedSet() /]

[query private classAndHierarchy(eclass : EClass) : Set(EClass) = eclass.eSuperTypes.classAndHierarchy()->including(eclass)->asOrderedSet() /]


[comment Defines if a SubPropertiesEditionComponent must be generated. A SubPropertiesEdtionComponent must be generated if :
	- its 'explicit' property is set to true 
	- A ElementBindingReference reference it and it contains at least 1 PEE/]
[query public mustBeGenerated(pec : PropertiesEditionComponent) : Boolean = 
	(pec.explicit and (pec.eAllContents(PropertiesEditionElement)->notEmpty() or pec.referencedBinding->notEmpty())) or pec.eInverse(ElementBindingReference)->notEmpty()/]

[comment Defines if a ComposedPropertiesEditionComponent must be generated. A ComposedPropertiesEditionComponent must be generated if :
	- its 'explicit' property is set to true and it has more than 1 view to manage 
	- the component has to manage only reference binding /]
[query public needComposedEditionComponent(pec : PropertiesEditionComponent) : Boolean = 
	(pec.explicit and pec.involvedViews()->size() > 1) or (pec.views->isEmpty() and pec.involvedViews()->notEmpty())/]

[comment Defines if a DynamicPropertiesEditionComponent must be generated. A DynamicPropertiesEdtionComponent must be generated if :
	- its 'explicit' property is set to true 
	- the given view is a dynamic view /]
[query public mustDynamicPecBeGenerated(pec : PropertiesEditionComponent, view : View) : Boolean = 
	pec.explicit and view.isDynamicView()/]

[comment A view is Dynamic if it have subViews ... /]
[query public isDynamicView(view : View) : Boolean = 
	view.elements->filter(View)->notEmpty()/]

[query public dynamicViews(pec : PropertiesEditionComponent, topLevelView : View) : Sequence(View) = 
	pec.referencedBinding.binding->filter(PropertiesEditionComponent)->select(mustBeGenerated()).views->select(ancestors()->includes(topLevelView))/]

[comment TODOGLF: List of parts that a component have to manage/]
[query public partToManage(pec : PropertiesEditionComponent) : OrderedSet(View) = pec.involvedViews()/]

[query public mustBeGenerated(view : View, pec : PropertiesEditionComponent) : Boolean =
	view.oclAsType(EObject).eResource() = pec.oclAsType(EObject).eResource()/]

[query public needBeGenerated(ref : ViewReference) : Boolean = 
	if (ref.view.oclIsTypeOf(View))
	then not ref.view.oclAsType(View).involvedPropertiesEditionComponent().oclIsUndefined()
	else false
	endif/]

[query public isA1stLevelReferencedView(toCheck : View, pec : PropertiesEditionComponent) : Boolean = 
	pec.views.eAllContents(ViewReference).view->filter(View)->includes(toCheck)/]

[comment ----- StructuralFeatures classification ----- /]
[query public isReferenceMany(feature : EStructuralFeature) : Boolean = 
	feature.oclIsTypeOf(EReference)
	and not (feature.oclAsType(EReference).containment)
	and feature.many/]

[query public isReferenceSingle(feature : EStructuralFeature) : Boolean = 
	feature.oclIsTypeOf(EReference)
	and not (feature.oclAsType(EReference).containment)
	and not (feature.many)/]

[query public isContainment(feature : EStructuralFeature) : Boolean = 
	feature.oclIsTypeOf(EReference)
	and feature.oclAsType(EReference).containment/]

[query public isContainmentMany(feature : EStructuralFeature) : Boolean = 
	feature.oclIsTypeOf(EReference)
	and feature.oclAsType(EReference).containment
	and feature.many/]

[query public isContainmentSingle(feature : EStructuralFeature) : Boolean = 
	feature.oclIsTypeOf(EReference)
	and feature.oclAsType(EReference).containment
	and not (feature.many)/]

[query public isAttributeMany(feature : EStructuralFeature) : Boolean = 
	feature.oclIsTypeOf(EAttribute)
	and feature.many/]

[query public isAttributeSingle(feature : EStructuralFeature) : Boolean = 
	feature.oclIsTypeOf(EAttribute)
	and not (feature.many)/]

[comment ---- Views related queries ----- /]
[query public representationName(editionElement : PropertiesEditionElement, nameToCheck : String) : Boolean = 
	editionElement.views->first().representationName(nameToCheck)/]

[query public representationName(view : ViewElement, nameToCheck : String) : Boolean = 
	if view.representation.name.oclIsUndefined()
	then false
	else view.representation.name = nameToCheck
	endif/]

[comment ----- Editor ID queries ---------/]
[query public editorIDSequence(editorElement : IdentifiedElement) : Sequence(String) = 
	editorElement.qualifiedIdentifier.tokenize('::')/]

[query public identifiedElementKey(editorElement : IdentifiedElement) : String = 
	editorElement.qualifiedIdentifier.tokenize('::')->last()/]

[comment ----- Model Navigation ---------/]
[query public hasModelNavigation(pee : PropertiesEditionElement) : Boolean = 
	not pee.navigation.oclIsUndefined()/]

[query public canGeneratemodelNavigation(pee : PropertiesEditionElement) : Boolean = 
	pee.hasModelNavigation() and not pee.handleByOldReferenceSettingsSystem()/]

[query public handleByOldReferenceSettingsSystem(pee : PropertiesEditionElement) : Boolean = 
	(pee.hasModelNavigation() and 
		((pee.representationName('FlatReferencesTable'))
			or (pee.navigation.oclIsKindOf(navigation::SimpleModelNavigation) and (
				(pee.navigation.oclAsType(navigation::SimpleModelNavigation).feature.isContainmentMany() and pee.model.isReferenceSingle() and (pee.representationName('ReferencesTable') or pee.representationName('AdvancedReferencesTable')))
				or (pee.navigation.oclAsType(navigation::SimpleModelNavigation).feature.isContainmentSingle() and pee.model.isReferenceMany() and (pee.representationName('ReferencesTable') or pee.representationName('AdvancedReferencesTable')))
				or (pee.navigation.oclAsType(navigation::SimpleModelNavigation).feature.isContainmentSingle() and pee.model.isContainmentMany() and (pee.representationName('TableComposition') or pee.representationName('AdvancedTableComposition')))
				or (pee.navigation.oclAsType(navigation::SimpleModelNavigation).feature.isContainmentMany() and pee.model.isContainmentSingle() and (pee.representationName('TableComposition') or pee.representationName('AdvancedTableComposition')))
				or (pee.navigation.oclAsType(navigation::SimpleModelNavigation).feature.isContainmentSingle() and pee.model.isReferenceSingle() and (pee.representationName('EObjectFlatComboViewer') or pee.representationName('AdvancedEObjectFlatComboViewer') or pee.representationName('LinkEObjectFlatComboViewer') or pee.representationName('LinkERefenceViewer')))
		))) or (pee.model.isContainmentSingle() and (pee.representationName('EObjectFlatComboViewer') or pee.representationName('AdvancedEObjectFlatComboViewer') or pee.representationName('LinkEObjectFlatComboViewer') or pee.representationName('LinkEReferenceViewer'))))/]

[comment ----- Editor settings ---------/]
[query public canGenerateEditorSettings(pee : PropertiesEditionElement) : Boolean = 
	not pee.editorSetting.oclIsUndefined()/]

[comment --------------- Common templates --------------- /]

[query public ecoreGenModelAnnotation(modelElement : EModelElement) : OrderedSet(EAnnotation) = 
	modelElement.eAnnotations->select(annot : EAnnotation | annot.source = 'http://www.eclipse.org/emf/2002/GenModel')/]

[query public ecoreDocumentationAnnotation(modelElement : EModelElement) : Sequence(EStringToStringMapEntry) = 
	modelElement.ecoreGenModelAnnotation()->first().details.oclAsType(EStringToStringMapEntry)
				->select(entry : EStringToStringMapEntry | entry.key = 'documentation')/]

[query public ecoreHelp(modelElement : EModelElement) : String = 
	if (modelElement.ecoreGenModelAnnotation()->size() = 1)
	then if (modelElement.ecoreDocumentationAnnotation()->size() = 1)
		 then modelElement.ecoreDocumentationAnnotation()->first().value.replaceAll('"','\\"').replaceAll('\n','').replaceAll('\r','')
		 else null
		 endif
	else null
	endif/]

[template public helpText(pee : PropertiesEditionElement)]
[if (not pee.views->first().owningViewsRepository().associatedGenRepository().oclIsUndefined())]
[if (pee.views->first().owningViewsRepository().associatedGenRepository().helpStrategy = HELP_STRATEGY::GENMODEL)]
[if ((not pee.associatedGenFeature().oclIsUndefined()) and (not pee.associatedGenFeature().propertyDescription.oclIsUndefined()))]"[pee.associatedGenFeature().propertyDescription.replaceAll('"','\\"')/]"[else]null[/if]
[elseif (pee.views->first().owningViewsRepository().associatedGenRepository().helpStrategy = HELP_STRATEGY::ECOREMODEL)]
[if (pee.model.ecoreHelp().oclIsUndefined())]"[pee.model.ecoreHelp().trim()/]"[else]null[/if]
[/if]
[/if]
[/template]

[template public licenceText(eefGenModel : EEFGenModel)]
[if (not eefGenModel.license.oclIsUndefined())]
[eefGenModel.license/]
[else]
/**
 * Generated with Acceleo
 */
[/if]
[/template]

[template public propertiesLicenceText(eefGenModel : EEFGenModel)]
[if (not eefGenModel.license.oclIsUndefined())]
[eefGenModel.license.replaceAll('/\\*\\*', '##').replaceAll('\\*/', '#').replaceAll(' \\*', '#').replaceAll('\\*', '#')/]
[else]
#
# Generated with Acceleo
#
[/if]
[/template]

[template public generationMark(eefGenModel : EEFGenModel) ]
[if (eefGenModel.useJMergeForUserCode)]@generated[/if]
[/template]

[template public generationComment(eefGenModel : EEFGenModel) ]
[if (eefGenModel.useJMergeForUserCode)]
/**
 * [eefGenModel.generationMark()/]
 */
[/if]
[/template]

[template public authorText(eefGenModel : EEFGenModel)]
[if (not eefGenModel.author.oclIsUndefined())]
@author [eefGenModel.author/]
[/if]
[/template]

[comment --------------- View Common templates --------------- /]
[template public viewCompletePackageGetter(view : ViewElement)]
[view.viewPackageGetter()/]()
[/template]

[template public viewPackageGetter(view : ViewElement)]
get[view.viewPackageSignature()/]
[/template]

[template public viewPackageSignature(view : ViewElement)]
[view.name.toJavaClassifier()/]
[/template]

[template public viewPackageSetter(view : ViewElement)]
set[view.viewPackageSignature()/]
[/template]

[template public viewCompletePackageSetter(view : ViewElement)]
[view.viewPackageSetter()/]([view.toJavaType().trim()/] newValue)
[/template]

[template public toJavaType(view : ViewElement)]
[if (view.representationName('Text') or view.representationName('Textarea') or view.representationName('RichText') or view.representationName('ImageViewer') or view.representationName('SelectionDialog'))]
String
[elseif (view.representationName('EMFComboViewer'))]
[include('org.eclipse.emf.common.util.Enumerator')/]
[elseif (view.representationName('MultiValuedEditor'))]
[include('org.eclipse.emf.common.util.EList')/]
[elseif (view.representationName('EObjectFlatComboViewer') or view.representationName('LinkEReferenceViewer')or view.representationName('LinkEObjectFlatComboViewer') or view.representationName('AdvancedEObjectFlatComboViewer') or view.representationName('SingleCompositionViewer') or view.representationName('SingleCompositionEditor'))]
[include('org.eclipse.emf.ecore.EObject')/]
[elseif (view.representationName('ReferencesTable') or view.representationName('AdvancedReferencesTable') or view.representationName('FlatReferencesTable') or view.representationName('TableComposition') or view.representationName('AdvancedTableComposition'))]
[include('java.util.List')/]
[elseif (view.representationName('Checkbox'))]
Boolean
[elseif (view.representationName('Radio'))]
[comment can be used for Enums or Boolean/]
Object
[elseif (view.representationName('Combo'))]
[comment can be used for References, Enums or Boolean/]
Object
[else]
//FIXME ERROR INVALID CASE INTO template public toJavaType(view : ViewElement) in common.mtl module for representation [view.representation.name/]
[/if]
[/template]

[query public toPath(s : String) : String = s.substituteAll('.', '/')/]

[comment][query public toASCII(s : String) : String 
	= invoke('org.eclipse.emf.eef.codegen.services.StringUtilService', 'toASCII(java.lang.String)', Sequence{s}) /][/comment]

[query public toUnicode(s : String) : String
	= invoke('org.eclipse.emf.eef.codegen.services.StringUtilService', 'toUnicode(java.lang.String)', Sequence{s}) /]

[template public toASCII(s : String)]
[s.substituteAll('à', 'a')
	.substituteAll('é', 'e')
	.substituteAll('è', 'e')
	.substituteAll('ê', 'e')
	.substituteAll('ë', 'e')
	.substituteAll('ï', 'i')
	.substituteAll('î', 'i')
	.substituteAll('ö', 'o')
	.substituteAll('ô', 'o')
	.substituteAll('ù', 'u')
	.substituteAll('ü', 'u')
	.substituteAll('û', 'u')
	.substituteAll('-', '')/]
[/template]

[comment] template used for the properties files to handle accents
DEPRECATED. using now a java service to do so.
[template public toUnicode(s : String)]
[s.substituteAll('à', '\\u00E0').substituteAll('À', '\\u00C0')
	.substituteAll('á', '\\u00E1').substituteAll('Á', '\\u00C1')
	.substituteAll('â', '\\u00E2').substituteAll('Â', '\\u00C2')
	.substituteAll('ä', '\\u00E4').substituteAll('Ä', '\\u00C4')
	.substituteAll('æ', '\\u00E6').substituteAll('Æ', '\\u00C6')
	.substituteAll('ç', '\\u00E7').substituteAll('Ç', '\\u00C8')
	.substituteAll('é', '\\u00E9').substituteAll('É', '\\u00C9')
	.substituteAll('ê', '\\u00EA').substituteAll('Ê', '\\u00CA')
	.substituteAll('ë', '\\u00EB').substituteAll('Ë', '\\u00CC')
	.substituteAll('í', '\\u00EC').substituteAll('Í', '\\u00CC')
	.substituteAll('î', '\\u00EE').substituteAll('Î', '\\u00CE')
	.substituteAll('ï', '\\u00EF').substituteAll('Ï', '\\u00CF')
	.substituteAll('ñ', '\\u00F1').substituteAll('Ñ', '\\u00D1')
	.substituteAll('ò', '\\u00F2').substituteAll('Ò', '\\u00D2')
	.substituteAll('ó', '\\u00F3').substituteAll('Ó', '\\u00D3')
	.substituteAll('ô', '\\u00F4').substituteAll('Ô', '\\u00D4')
	.substituteAll('ö', '\\u00F6').substituteAll('Ö', '\\u00D6')
	.substituteAll('ù', '\\u00F9').substituteAll('Ù', '\\u00D9')
	.substituteAll('ú', '\\u00FA').substituteAll('Ú', '\\u00DA')
	.substituteAll('û', '\\u00FB').substituteAll('Û', '\\u00DB')
	.substituteAll('ü', '\\u00FC').substituteAll('Ü', '\\u00DC')
	.substituteAll('œ', '\\u0153').substituteAll('Œ', '\\u0152')
	.substituteAll('«', '\\u00AB').substituteAll('»', '\\u00BB')
	.substituteAll('$', '\\u0024').substituteAll('€', '\\u20AC')
	.substituteAll('\'', '\\u0027')/]
[/template][/comment]

[comment Sequence{1..s.size()}->
  iterate(i; result : String = "" |
    if i = 1 then result.concat(s.substring(i,i).toLower())
    else if s.substring(i,i) = " " then result
    else result.concat(s.substring(i,i))
   endif
   ) /]

[comment TODO: fixed in Acceleo 3.0.0M7/]
[query public startsWithADigit(s : String) : Boolean = not s.first(1).isAlpha()/]
[comment][query public startsWithADigit(s : String) : Boolean =
	s.firstChar() = '0' 
	or s.firstChar() = '1' 
	or s.firstChar() = '2' 
	or s.firstChar() = '3' 
	or s.firstChar() = '4' 
	or s.firstChar() = '5' 
	or s.firstChar() = '6' 
	or s.firstChar() = '7' 
	or s.firstChar() = '8' 
	or s.firstChar() = '9'/]

[template public firstChar(s : String)]
[if (s.oclIsUndefined())][''/][elseif (s = '')][''/][else][s.substring(1,1)/][/if]
[/template]
[/comment]

[template public toJavaIdentifierDelegate(s : String)]
[if (s.startsWithADigit())]_[/if][for (str : String | s.toASCII().tokenize(' '))][str.toUpperFirst()/][/for]
[/template]

[comment === escape some special keywords (java and EEF) /]
[query public toJavaIdentifier(s : String) : String = s.toJavaIdentifierDelegate().toLowerFirst().replaceKeywords()/]

[query public replaceKeywords(s : String) : String = s.replaceAll('(?i)^((title)|(parent)|(abstract)|(continue)|(for)|(new)|(switch)|(assert)|(default)|(goto)|(package)|(synchronized)|(boolean)|(do)|(if)|(private)|(this)|(break)|(double)|(implements)|(protected)|(throw)|(byte)|(else)|(import)|(public)|(throws)|(case)|(enum)|(instanceof)|(return)|(transient)|(catch)|(extends)|(int)|(short)|(try)|(char)|(final)|(interface)|(static)|(void)|(class)|(finally)|(long)|(strictfp)|(volatile)|(const)|(float)|(native)|(super)|(while))$','$1_')/]

[query public toJavaClassifier(s : String) : String = s.toJavaIdentifierDelegate().replaceKeywords().toUpperFirst()/]

[query public toJavaMetamodelIdentifier(s : String) : String = s.replaceAll('^(Class)$','$1_')/]

[query public toJavaConstant(s: String) : String = s.toJavaIdentifierDelegate().replaceKeywords().toUpper()/]

[comment ==== For multiples model features getters (thanks to UML !) ==== /]
[template public toMany(s: String)]
[s/]
[/template]

[comment ==== For boolean model features getters (thanks to UML !) ==== /]
[template public booleanGetter(feature : EStructuralFeature)]
[if (feature.eType.name() = 'EBooleanObject')]get[else]is[/if]
[/template]

[query public eefPackage(eClassifier : EClassifier, basePackage : String) : String = eClassifier.ePackage.eefPackage(basePackage)/]

[template public eefPackage(ePackage : EPackage, basePackage : String)]
[if ((not ePackage.associatedGenPackage().basePackage.oclIsUndefined()) and (ePackage.associatedGenPackage().basePackage.size() > 0))][basePackage/].[/if][ePackage.name/]
[/template]

[comment queries for model navigation /]
[query public simpleModelNavigationType(modelNavigation : SimpleModelNavigation) : String = 
	if (modelNavigation.discriminatorType.oclIsUndefined())
	then modelNavigation.feature.eType.name
	else modelNavigation.discriminatorType.name
	endif/]

[query public simpleModelNavigationMetamodelFactory(modelNavigation : SimpleModelNavigation) : String = 
	if (modelNavigation.discriminatorType.oclIsUndefined())
	then modelNavigation.feature.eType.ePackage.metamodelPrefix()
	else modelNavigation.discriminatorType.ePackage.metamodelPrefix()
	endif/]

[comment] 
@param PropertiesEditionElement the PEE of the composition
@param EStructuralFeature : the feature of the composition 
[/comment]
[query public involvedPropertiesEditionElement(peElement : PropertiesEditionElement, f : EStructuralFeature) : PropertiesEditionElement =
	 peElement.element.category.eContainer(PropertiesEditionContext).categories.bindings->select(oclIsTypeOf(PropertiesEditionComponent)).oclAsType(PropertiesEditionComponent).properties->select(oclIsTypeOf(PropertiesEditionElement)).oclAsType(PropertiesEditionElement)->select(pee : PropertiesEditionElement | pee.model=f)->first()/]

[query public involvedPropertiesEditionElement(element : ElementEditor) : PropertiesEditionElement =
	 element.eInverse(PropertiesEditionElement)->first()/]

[query public involvedPropertiesEditionElement(view : ViewElement, pec : PropertiesEditionComponent) : PropertiesEditionElement =
	 pec.involvedEditionElements()->select(views.oclAsType(ViewElement)->includes(view))->first()/]

[query public involvedPropertiesEditionComponent(view : View) : PropertiesEditionComponent = 
	view.eInverse(PropertiesEditionComponent)->first()/]

[comment ==== Metamodel getters, with imports management ==== /]
[comment
NOTE: Imports are managed here because addImport must be called from a model element from the currently generated model.
/]

[template public metamodelGetter(p : PropertiesEditionComponent)]
[p.model.metamodelGetter()/][p.addImport(p.model.ePackage.qualifiedMetamodelPackage())/]
[/template]

[template public metamodelGetter(p : PropertiesEditionElement)]
[p.model.metamodelGetter()/][p.addImport(p.model.eContainingClass.ePackage.qualifiedMetamodelPackage())/]
[/template]

[template public metamodelTypeGetter(p : PropertiesEditionElement)]
[p.model.eType.metamodelGetter()/][p.addImport(p.model.eType.ePackage.qualifiedMetamodelPackage())/]
[/template]

[template public metamodelGetter(s : SimpleModelNavigation)]
[s.feature.metamodelGetter()/][s.addImport(s.feature.eContainingClass.ePackage.qualifiedMetamodelPackage())/]
[/template]

[template public metamodelGetter(s : DeclarativeNavigationStep)]
[s.feature.metamodelGetter()/][s.addImport(s.feature.eContainingClass.ePackage.qualifiedMetamodelPackage())/]
[/template]

[template public metamodelGetter(e : EReferenceViewerSettings) post (trim())]
[if (e.model.eInverse(GenFeature).genClass.genPackage.genModel.toString() <> e.getImportGenModel())]
	[e.initializeImportManagerForGenmodel(e.model.eInverse(GenFeature)->first().genClass.genPackage.genModel, '', '')/]
[/if]
[e.model.metamodelGetter()/][e.addImport(e.model.eContainingClass.ePackage.qualifiedMetamodelPackage())/]
[/template]

[template public factoryCreator(p : PropertiesEditionElement)]
[p.model.eType.factoryCreator()/][p.addImport(p.model.eType.getQualifiedFactoryInterfaceName())/]
[/template]
