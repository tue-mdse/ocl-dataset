[comment encoding = UTF-8
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module IPropertiesEditionPart('http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/views/toolkits/1.0.0', 'http://www.eclipse.org/emf/eef/generation/1.0.0')/]

[import org::eclipse::emf::eef::codegen::services::common /]
[import org::eclipse::emf::eef::codegen::services::naming /]
[import org::eclipse::emf::eef::codegen::services::viewCommon /]
[import org::eclipse::emf::eef::codegen::widgets::api::widgetGettersSetters /]
[import org::eclipse::emf::eef::codegen::services::imports /]

[template public IPropertiesEditionPart(viewRepository : ViewsRepository)]
[for (view : View | viewRepository.eAllContents(View))]
[view.ViewPropertiesEditionPart(viewRepository)/]
[/for]
[for (view : View | viewRepository.eAllContents(CustomView))]
[view.CustomViewPropertiesEditionPart(viewRepository)/]
[/for]
[/template]

[template private ViewPropertiesEditionPart(view : View, viewRepository : ViewsRepository) ]
[initializeImportManager(view.partsPackage(), view.pepInterface())/]
[file (view.fullFilePath(), false)]
[viewRepository.associatedGenModel().licenceText().trim()/]
package [view.partsPackage()/];

[let content : String = view.fileContent(viewRepository)]
[if (viewRepository.associatedGenModel().useJMergeForUserCode)]
[viewRepository.genSortedImports()/]
[additionalImports(view, viewRepository)/]
[else]
// [protected ('for imports')]
[viewRepository.genSortedImports()/]
[additionalImports(view, viewRepository)/]

// [/protected]
[/if]

[content/]
[/let]
[/file]
[/template]

[template public fileContent(view : View, viewRepository : ViewsRepository)]
/**
 * [viewRepository.associatedGenModel().authorText().trim()/]
 * [viewRepository.associatedGenModel().generationMark()/]
 */
public interface [view.pepInterface()/] {

[for (elementEditor : ElementEditor | view.eAllContents(ElementEditor)->select(not oclIsKindOf(CustomElementEditor) and owningView() = view))]
[elementEditor.genDeclaration()/]

[/for]
[for (subView : View | view.eAllContents(View))]
[subView.genDeclarationForSubViews()/]
[/for]
[comment viewReference Support/]
[view.genDeclarationForViewReference()/]

[if (not viewRepository.associatedGenModel().useJMergeForUserCode)]
[for (viewElement : ViewElement | view.eAllContents(ElementEditor)->select(oclIsTypeOf(CustomElementEditor)))]
	// [protected ('for '.concat(viewElement.name).concat(' specific getters and setters declaration'))]
	
	// [/protected]
[/for]
[/if]

	/**
	 * Returns the internationalized title text.
	 * 
	 * @return the internationalized title text.
	 * [viewRepository.associatedGenModel().generationMark()/]
	 */
	public String getTitle();

	[if (not viewRepository.associatedGenModel().useJMergeForUserCode)]
	// [protected ('for additional methods')]
	
	// [/protected]
	[/if]

}
[/template]

[template private CustomViewPropertiesEditionPart(view : View, viewRepository : ViewsRepository) ]
[initializeImportManager(view.partsPackage(), view.pepInterface())/]
[file (view.fullFilePath(), false)]
[viewRepository.associatedGenModel().licenceText().trim()/]
package [view.partsPackage()/];

[let content : String = view.fileContentCustomView(viewRepository)]
[if (viewRepository.associatedGenModel().useJMergeForUserCode)]
[viewRepository.genSortedImports()/]
[additionalImports(view, viewRepository)/]
[else]
// [protected ('for imports')]
[viewRepository.genSortedImports()/]
[additionalImports(view, viewRepository)/]

// [/protected]
[/if]

[content/]
[/let]
[/file]
[/template]

[template public fileContentCustomView(view : View, viewRepository : ViewsRepository)]
/**
 * [viewRepository.associatedGenModel().authorText().trim()/]
 * [viewRepository.associatedGenModel().generationMark()/]
 */
public interface [view.pepInterface()/] {

	/**
	 * Returns the internationalized title text.
	 * 
	 * @return the internationalized title text.
	 * [viewRepository.associatedGenModel().generationMark()/]
	 */
	public String getTitle();

	[if (not viewRepository.associatedGenModel().useJMergeForUserCode)]
	// [protected (' for getters and setters declaration')]
	
	// [/protected]
	[/if]

}
[/template]

[template public fullFilePath(view : View)]
[view.pepQualifiedInterface().toPath()/].java
[/template]

[comment overrides this template if additional imports are needed/]
[template public additionalImports (view : View, viewRepository : ViewsRepository)/]
