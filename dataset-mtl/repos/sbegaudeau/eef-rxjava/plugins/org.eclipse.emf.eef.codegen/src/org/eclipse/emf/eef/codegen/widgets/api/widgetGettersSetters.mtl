[comment encoding = UTF-8
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module widgetGettersSetters('http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/generation/1.0.0', 'http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipse::emf::eef::codegen::services::common/]
[import org::eclipse::emf::eef::codegen::services::naming/]
[import org::eclipse::emf::eef::codegen::services::imports /]

[comment TODO: A TRAITER /]
[template public initSignature(elementEditor : ElementEditor) /]

[template public initSignatureImplementation(elementEditor : ElementEditor) /]

[template public initSignatureDocumentation(elementEditor : ElementEditor) /]

[template public initSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String) /]

[comment ====== View getters for declaration ====== /]
[template public getterForSubViewDeclaration(view : View)]
[view.getterForSubViewSignatureDocumentation()/]
	[view.getterForSubViewSignature()/];
[/template]

[template public getterForReferencedViewDeclaration(view : View)]
[view.getterForReferencedViewSignatureDocumentation()/]
	[view.getterForReferencedViewSignature()/];
[/template]

[comment ====== Widgets View getters for declaration ====== /]
[template public getterDeclaration(elementEditor : ElementEditor)]
[elementEditor.getterSignatureDocumentation()/]
[elementEditor.getterSignature()/];
[/template]

[comment ====== Signatures ====== /]
[template public getterForSubViewSignature(view : View)]
	public [include('org.eclipse.emf.eef.runtime.api.parts.IPropertiesEditionPart')/] get[view.name.toJavaClassifier()/]SubView()
[/template]

[template public getterForReferencedViewSignature(view : View)]
public [include('org.eclipse.emf.eef.runtime.api.parts.IPropertiesEditionPart')/] get[view.name.toJavaClassifier()/]ReferencedView()
[/template]

[template public getterSignature(elementEditor : ElementEditor)]
	public [elementEditor.toJavaType().trim()/] [elementEditor.viewCompletePackageGetter()/]
[/template]

[template public getterAddSignature(elementEditor : ElementEditor)]
	public List [elementEditor.viewPackageGetter()/]ToAdd()
[/template]

[template public getterRemoveSignature(elementEditor : ElementEditor)]
	public List [elementEditor.viewPackageGetter()/]ToRemove()
[/template]

[template public getterMoveSignature(elementEditor : ElementEditor)]
	public List [elementEditor.viewPackageGetter()/]ToMove()
[/template]

[template public getterEditSignature(elementEditor : ElementEditor)]
	public Map [elementEditor.viewPackageGetter()/]ToEdit()
[/template]

[template public getterTableListSignature(elementEditor : ElementEditor)]
	public List [elementEditor.viewPackageGetter()/]Table()
[/template]

[template public getterForSubViewSignatureDocumentation(view : View)]
	/**
	 * @return the [view.name/] SubView
	 * [view.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public getterForReferencedViewSignatureDocumentation(view : View)]
/**
	 * @return the [view.name/] referenced view
	 * [view.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public getterSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * @return the [elementEditor.name/]
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public getterAddSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * @return the [elementEditor.name/] to add
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public getterRemoveSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * @return the [elementEditor.name/] to remove
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public getterMoveSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * @return the [elementEditor.name/] to move
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public getterEditSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * @return the [elementEditor.name/] to edit
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public getterTableListSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * @return the current [elementEditor.name/] table
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[comment ====== Widgets View setters for declaration ====== /]
[template public setterDeclaration(elementEditor : ElementEditor)]
[elementEditor.setterSignatureDocumentation()/]
[elementEditor.setterSignature()/];
[/template]

[template public setterSignature(elementEditor : ElementEditor)]
	public void [elementEditor.viewCompletePackageSetter()/]
[/template]

[template public setterButtonModeSignature(elementEditor : ElementEditor)]
	public void [elementEditor.viewPackageSetter()/]ButtonMode([include('org.eclipse.emf.eef.runtime.ui.widgets.ButtonsModeEnum')/] newValue)
[/template]

[template public updateSignature(elementEditor : ElementEditor)]
	public void update[elementEditor.viewPackageSignature()/]()
[/template]

[template public setterSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * Defines a new [elementEditor.name/]
	 * @param newValue the new [elementEditor.name/] to set
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public setterButtonModeSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * Defines the button mode
	 * @param newValue the new mode to set
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public updateSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * Update the [elementEditor.name/]
	 * @param newValue the [elementEditor.name/] to update
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public addFilterSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * Adds the given filter to the [elementEditor.name/] edition editor.
	 * 
	 * @param filter
	 *            a viewer filter
	 * @see org.eclipse.jface.viewers.StructuredViewer#addFilter(ViewerFilter)
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public addFilterSignature(elementEditor : ElementEditor)]
	public void addFilterTo[elementEditor.viewPackageSignature()/]([include('org.eclipse.jface.viewers.ViewerFilter')/] filter)
[/template]

[template public addBusinessFilterSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * Adds the given filter to the [elementEditor.name/] edition editor.
	 * 
	 * @param filter
	 *            a viewer filter
	 * @see org.eclipse.jface.viewers.StructuredViewer#addFilter(ViewerFilter)
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public addBusinessFilterSignature(elementEditor : ElementEditor)]
	public void addBusinessFilterTo[elementEditor.viewPackageSignature()/]([include('org.eclipse.jface.viewers.ViewerFilter')/] filter)
[/template]

[template public isContainedInTableSignatureDocumentation(elementEditor : ElementEditor)]
	/**
	 * @return true if the given element is contained inside the [elementEditor.name/] table
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public isContainedInTableSignature(elementEditor : ElementEditor)]
	public boolean isContainedIn[elementEditor.viewPackageSignature()/]Table([include('org.eclipse.emf.ecore.EObject')/] element)
[/template]

[comment ====== Widgets getter implementation ====== /]
[template public getterImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
[getterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterSignatureImplementation()/]
[/template]

[comment delegate implementation for SubView/]
[template public getterForSubViewImplementationDelegate(view : View, fullInterfacePath : String)]
[view.getterForSubViewSignatureDocumentationImplementation(fullInterfacePath)/]
		[view.getterForSubViewSignature()/] {
			return ([include('org.eclipse.emf.eef.runtime.api.parts.IPropertiesEditionPart')/]) [view.pepInterface().toLowerFirst()/];
		}
[/template]

[comment delegate implementation for ViewReference/]
[template public getterForReferencedViewImplementation(view : View, fullInterfacePath : String)]
[view.getterForReferencedViewSignatureDocumentationImplementation(fullInterfacePath)/]
		[view.getterForReferencedViewSignature()/] {
			return ([include('org.eclipse.emf.eef.runtime.api.parts.IPropertiesEditionPart')/]) [view.pepInterface().toLowerFirst()/];
		}
[/template]

[template public getterImplementationDelegate(elementEditor : ElementEditor, fullInterfacePath : String, referencedView : View)]
[getterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.getterSignature()/] {
		return [referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.[elementEditor.viewCompletePackageGetter()/];
	}
[/template]

[template public getterSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#[elementEditor.viewCompletePackageGetter()/]
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public getterForSubViewSignatureDocumentationImplementation(view : View, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#get[view.name.toJavaClassifier()/]SubView()
	 * [view.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public getterForReferencedViewSignatureDocumentationImplementation(view : View, fullInterfacePath : String)]
/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#get[view.name.toJavaClassifier()/]ReferencedView()
	 * [view.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public getterSignatureImplementation(elementEditor : ElementEditor)]
[elementEditor.getterSignature()/] {
		//FIXME ERROR NO VALID CASE INTO template public getterSignatureImplementation(elementEditor : ElementEditor) in viewgetterSetters.mtl module
		return null;
	}
[/template]

[comment ====== Widgets setter implementation ====== /]
[template public setterImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
[setterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.setterSignatureImplementation()/]
[/template]

[template public setterImplementationDelegate(elementEditor : ElementEditor, fullInterfacePath : String, referencedView : View)]
[setterSignatureDocumentationImplementation(elementEditor, fullInterfacePath)/]
[elementEditor.setterSignature()/] {
		[referencedView.name.toJavaIdentifier()/]PropertiesEditionPart.[elementEditor.viewPackageSetter()/](newValue);
	}
[/template]

[comment Setters/]
[template public setterSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#[elementEditor.viewCompletePackageSetter()/]
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public setterSignatureImplementation(elementEditor : ElementEditor)]
[elementEditor.setterSignature()/] {
		// FIXME ERROR NO VALID CASE INTO template public setterSignatureImplementation(elementEditor : ElementEditor) in widgetGettersSetters.mtl module
	}
[/template]

[template public setterButtonModeSignatureImplementation(elementEditor : ElementEditor)]
[elementEditor.setterButtonModeSignature()/] {
		[elementEditor.elementEditorName()/].setButtonMode(newValue);
	}
[/template]

[template public updateSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#update[elementEditor.viewPackageSignature()/]()
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public updateSignatureImplementation(elementEditor : ElementEditor)]
[elementEditor.updateSignature()/] {
	[elementEditor.elementEditorName()/].refresh();
}
[/template]

[comment ======== AddFilter signature implementation ======/]
[template public addFilterSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#addFilter[elementEditor.viewPackageSignature()/](ViewerFilter filter)
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[template public addFilterSignatureImplementation(elementEditor : ElementEditor)]
[elementEditor.addFilterSignature()/] {
		[elementEditor.elementEditorName()/].addFilter(filter);
	}
[/template]

[comment ======== AddBusinessFilter signature implementation ======/]
[template public addBusinessFilterSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#addBusinessFilter[elementEditor.viewPackageSignature()/](ViewerFilter filter)
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[comment ======== IsContainedInXYZTable signature implementation ======/]
[template public isContainedInTableSignatureDocumentationImplementation(elementEditor : ElementEditor, fullInterfacePath : String)]
	/**
	 * {@inheritDoc}
	 * 
	 * @see [fullInterfacePath/]#isContainedIn[elementEditor.viewPackageSignature()/]Table(EObject element)
	 * [elementEditor.owningViewsRepository().associatedGenModel().generationMark()/]
	 */
[/template]

[comment ======== read only implementation ======/]
[template public setReadOnly (editor : ElementEditor)]
[editor.elementEditorName()/].setEnabled(false);
[editor.elementEditorName()/].setToolTipText([editor.owningViewsRepository().messagesProvider()/].[editor.owningViewString()/]_ReadOnly);
[/template]

[template public unsetReadOnly (editor : ElementEditor)]
[editor.elementEditorName()/].setEnabled(true);
[/template]

[template public setRemoveButtonReadOnly (editor : ElementEditor) ]
remove[editor.name.toJavaClassifier()/].setEnabled(false);
remove[editor.name.toJavaClassifier()/].setToolTipText([editor.owningViewsRepository().messagesProvider()/].[editor.owningViewString()/]_ReadOnly);
[/template]

[template public unsetRemoveButtonReadOnly (editor : ElementEditor) ]
remove[editor.name.toJavaClassifier()/].setEnabled(true);
[/template]

[template public setAddButtonReadOnly (editor : ElementEditor) ]
add[editor.name.toJavaClassifier()/].setEnabled(false);
add[editor.name.toJavaClassifier()/].setToolTipText([editor.owningViewsRepository().messagesProvider()/].[editor.owningViewString()/]_ReadOnly);
[/template]

[template public unsetAddButtonReadOnly (editor : ElementEditor) ]
add[editor.name.toJavaClassifier()/].setEnabled(true);
[/template]

[template public setEditButtonReadOnly (editor : ElementEditor) ]
edit[editor.name.toJavaClassifier()/].setEnabled(false);
edit[editor.name.toJavaClassifier()/].setToolTipText([editor.owningViewsRepository().messagesProvider()/].[editor.owningViewString()/]_ReadOnly);
[/template]

[template public unsetEditButtonReadOnly (editor : ElementEditor) ]
edit[editor.name.toJavaClassifier()/].setEnabled(true);
[/template]

[template public readOnly (editor : ElementEditor)]
[if (editor.readOnly)]
[editor.setReadOnly()/]
[else]
boolean eefElementEditorReadOnlyState = isReadOnly([editor.editorID()/][navigationReadOnly()/]);
if (eefElementEditorReadOnlyState && [editor.elementEditorName()/].isEnabled()) {
	[editor.setReadOnly()/]
} else if (!eefElementEditorReadOnlyState && ![editor.elementEditorName()/].isEnabled()) {
	[editor.unsetReadOnly()/]
}	
[/if]
[/template]

[template public navigationReadOnly (editor : ElementEditor) post (trim())]
[if (editor.involvedPropertiesEditionElement().canGeneratemodelNavigation())]
	, (([addImports(Sequence{editor.getPecImport()})/][editor.involvedPropertiesEditionElement().eContainer(PropertiesEditionComponent).subPECClass(editor.owningView())/]) propertiesEditionComponent).get[editor.involvedPropertiesEditionElement().name.toJavaClassifier()/]Settings().getOrCreateSignificantObject()
[/if]
[/template]

[template public getPecImport(editor : ElementEditor) post (trim())]
[editor.involvedPropertiesEditionElement().eContainer(PropertiesEditionComponent).componentsPackage()/].[editor.involvedPropertiesEditionElement().eContainer(PropertiesEditionComponent).subPECClass(editor.owningView())/]
[/template]
