[comment encoding = UTF-8
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 
 This module define the widget generation. It is composed of templates that need to be 
 override by the templates that implements wigdets for EEF. 
 /]
[module widgetControl('http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/eef/views/1.0.0')/]

[import org::eclipse::emf::eef::codegen::services::naming /]
[import org::eclipse::emf::eef::codegen::services::common /]
[import org::eclipse::emf::eef::codegen::services::filters /]

[comment ===== Widget generation API ===== /]

[comment declareEObjectUpdate : templates that override this one must define the method to update an EObject when a view throw an update 
			event /]
[template public declareEObjectUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent)]
// FIXME INVALID CASE you must override the template 'declareEObjectUpdater' for the case : [editionElement.name/], [view.name/], [pec.name/].
[/template]

[comment liveupdater : templates that override this one must define the behaviour of the generated widget when the associated
		 feature of the edited element has changed /]
[template public liveUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent)]
// FIXME INVALID CASE INTO template public liveUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) in widgetControl.mtl module, with the values : [editionElement.name/], [view.name/], [pec.name/].
[/template]

[comment updater : templates that override this one must define the operation to execute at the initialization of the 
		 component for the given widget /]
[template public updater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent)]
// FIXME NO VALID CASE INTO template public updater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) in widgetControl.mtl module, with the values : [editionElement.name/], [view.name/], [pec.name/].
[/template]

[comment filterUpdater : templates that override this one must define the operation to execute at the initialization of the 
		 component for the filters of the given widget /]
[template public filterUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent)]
// FIXME NO VALID CASE INTO template public filterUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) in widgetControl.mtl module, with the values : [editionElement.name/], [view.name/], [pec.name/].
[/template]

[comment additionalComponentField : templates that override this one must definethe additional fields to generate in the component 
		 manage the given element /]
[template public additionalComponentField(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent)/]

[template public liveUpdaterForReferencedViews(view : View, pec : PropertiesEditionComponent)]
[for (v : View | view.referencedViews())]
[for (editionElement : PropertiesEditionElement | pec.properties->filter(PropertiesEditionElement)->select(views->first().ownedBy(v)))]
[editionElement.liveUpdater(v, pec)/]
[/for]
[comment][if (v.referencedViews()->notEmpty())][v.liveUpdaterForReferencedViews(pec.referencedBinding.binding->select(oclIsTypeOf(PropertiesEditionComponent))->first().oclAsType(PropertiesEditionComponent))/][/if][/comment]
[/for]
[/template]


[template public liveUpdaterNavigationCondition (editionElement : PropertiesEditionElement, pec : PropertiesEditionComponent) ]
[if (editionElement.canGeneratemodelNavigation())][editionElement.name.toJavaIdentifier()/]Settings.isAffectingEvent(msg)[else][editionElement.metamodelGetter()/].equals(msg.getFeature()) && msg.getNotifier().equals(semanticObject)[/if]
[/template]

[template public liveUpdaterNavigationConditionForText (editionElement : PropertiesEditionElement, pec : PropertiesEditionComponent) ]
[if (editionElement.canGeneratemodelNavigation())]!(msg.getNewValue() instanceof EObject) && [editionElement.name.toJavaIdentifier()/]Settings.isAffectingEvent(msg)[else][editionElement.metamodelGetter()/].equals(msg.getFeature()) && msg.getNotifier().equals(semanticObject)[/if]
[/template]

[template public updaterForReferencedViews(view : View, pec : PropertiesEditionComponent)]
[for (v : View | view.referencedViews())]
		[view.viewIdentifier(pec)/].get[v.name.toJavaClassifier()/]ReferencedView().setContext(elt, allResource);
[for (editionElement : PropertiesEditionElement | pec.properties->filter(PropertiesEditionElement)->select(views->first().ownedBy(v)))]
[editionElement.updater(v, pec)/]
[/for]
[comment][if (v.referencedViews()->notEmpty())][v.updaterForSubReferencedViews(pec.referencedBinding.binding->select(oclIsTypeOf(PropertiesEditionComponent))->first().oclAsType(PropertiesEditionComponent), pec)/][/if][/comment]
[/for]
[/template]

[template public updaterForSubReferencedViews(view : View, pec : PropertiesEditionComponent, inputPEC : PropertiesEditionComponent)]
[for (v : View | view.referencedViews())]
[for (editionElement : PropertiesEditionElement | pec.properties->filter(PropertiesEditionElement)->select(views->first().ownedBy(v)))]
[editionElement.updater(v, inputPEC)/]
[/for]
[comment][if (v.referencedViews()->notEmpty())][v.updaterForSubReferencedViews(pec.referencedBinding.binding->select(oclIsTypeOf(PropertiesEditionComponent))->first().oclAsType(PropertiesEditionComponent), inputPEC)/][/if][/comment]
[/for]
[/template]

[template public filterUpdaterForReferencedViews(view : View, pec : PropertiesEditionComponent)]
[for (v : View | view.referencedViews())]
[for (editionElement : PropertiesEditionElement | pec.involvedEditionElementsInView(v))]
[editionElement.filterUpdater(view, pec)/]
[/for]
[comment][if (v.referencedViews()->notEmpty())][v.filterUpdaterForReferencedViews(pec.referencedBinding.binding->select(oclIsTypeOf(PropertiesEditionComponent))->first().oclAsType(PropertiesEditionComponent))/][/if][/comment]
[/for]
[/template]

[template public javaDeclarationFilterForReferencedViews(view : View, pec : PropertiesEditionComponent)]
[for (v : View | view.referencedViews())]
[for (editionElement : PropertiesEditionElement | pec.involvedEditionElementsInView(v))]
[editionElement.javaDeclarationFilter()/]
[/for]
[comment][if (v.referencedViews()->notEmpty())][v.filterUpdaterForReferencedViews(pec.referencedBinding.binding->select(oclIsTypeOf(PropertiesEditionComponent))->first().oclAsType(PropertiesEditionComponent))/][/if][/comment]
[/for]
[/template]

[comment Global template used to fix bug #347122 /]
[template public additionalBusinessFilterProtectedArea(editionElement : PropertiesEditionElement)]
// [protected ('for additional businessfilters for '.concat(editionElement.name))]
// [/protected]
[/template]

[comment additionalComponentGetterForEditorSettings : template to add methods in component class /]
[template public additionalComponentGetterForEditorSettings(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent)/]
