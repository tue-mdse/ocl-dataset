[comment encoding = UTF-8
 *******************************************************************************
 * Copyright (c) 2008-2010 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module textareaControl('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/2002/GenModel', 'http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/mapping/1.0.0') extends org::eclipse::emf::eef::codegen::widgets::api::widgetControl/]

[import org::eclipse::emf::eef::codegen::services::naming /]
[import org::eclipse::emf::eef::codegen::services::common /]
[import org::eclipse::emf::eef::codegen::services::typeUtils /]
[import org::eclipse::emf::eef::codegen::services::imports /]

[comment ===== Case : model = Attribute(1) - view = Textarea ===== /]
[template public declareEObjectUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides declareEObjectUpdater ? (editionElement.model.isAttributeSingle() and editionElement.representationName('Textarea') and not editionElement.canGeneratemodelNavigation())]
[if (editionElement.model.isPrimitiveType())]
[pec.pecModelClass().toJavaIdentifier().disambiguation('event')/].set[editionElement.model.name.toUpperFirst()/](([include('org.eclipse.emf.eef.runtime.impl.utils.EEFConverterUtil')/].create[editionElement.model.eType.instanceClassName.toUpperFirst()/]FromString([editionElement.metamodelTypeGetter()/], (String)event.getNewValue())));[else]
[pec.pecModelClass().toJavaIdentifier().disambiguation('event')/].set[editionElement.model.name.toUpperFirst()/](([editionElement.model.eType.instanceClassName/])[include('org.eclipse.emf.eef.runtime.impl.utils.EEFConverterUtil')/].createFromString([editionElement.metamodelTypeGetter()/], (String)event.getNewValue()));[/if]
[/template]

[template public liveUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides liveUpdater ? (editionElement.model.isAttributeSingle() and editionElement.representationName('Textarea'))]
if ([editionElement.liveUpdaterNavigationConditionForText(pec)/] && [view.viewIdentifier(pec)/] != null && isAccessible([editionElement.views->first().editorID()/])){
	if (msg.getNewValue() != null) {
		[view.viewIdentifier(pec)/].[editionElement.views->first().viewPackageSetter()/](EcoreUtil.convertToString([editionElement.metamodelTypeGetter()/], msg.getNewValue()));
	} else {
		[view.viewIdentifier(pec)/].[editionElement.views->first().viewPackageSetter()/]("");
	}
}
[/template]


[template public updater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides updater ? (editionElement.model.isAttributeSingle() and editionElement.representationName('Textarea') and not editionElement.canGeneratemodelNavigation())]
if (isAccessible([editionElement.views->first().editorID()/]))
	[view.viewIdentifier(pec)/].[editionElement.views->first().viewPackageSetter()/](EcoreUtil.convertToString([editionElement.metamodelTypeGetter()/], [pec.pecModelClass().toJavaIdentifier()/].get[editionElement.model.name.toUpperFirst()/]()));
[/template]

[template public filterUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides filterUpdater ? (editionElement.model.isAttributeSingle() and editionElement.representationName('Textarea'))]
[comment no filters for textarea /]
[/template]

[comment ===== Case : model = Attribute(1) - view = Textarea - ModelNavigation ===== /]

[template public declareEObjectUpdater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides declareEObjectUpdater ? (editionElement.model.isAttributeSingle() and editionElement.representationName('Textarea') and editionElement.canGeneratemodelNavigation())]
[if (editionElement.model.isPrimitiveType())]
[pec.pecModelClass().toJavaIdentifier().disambiguation('event')/].set[editionElement.model.name.toUpperFirst()/](([include('org.eclipse.emf.eef.runtime.impl.utils.EEFConverterUtil')/].create[editionElement.model.eType.instanceClassName.toUpperFirst()/]FromString([editionElement.metamodelTypeGetter()/], (String)event.getNewValue())));[else]
[editionElement.name.toJavaIdentifier()/]Settings.setValue(([editionElement.model.eType.instanceClassName/])[include('org.eclipse.emf.eef.runtime.impl.utils.EEFConverterUtil')/].createFromString([editionElement.metamodelTypeGetter()/], (String)event.getNewValue()));[/if]
[/template]

[template public updater(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent) overrides updater ? (editionElement.model.isAttributeSingle() and editionElement.representationName('Textarea') and editionElement.canGeneratemodelNavigation())]
if ([editionElement.name.toJavaIdentifier()/]Settings.getValue() != null && isAccessible([editionElement.views->first().editorID()/]))
	[view.viewIdentifier(pec)/].[editionElement.views->first().viewPackageSetter()/](EcoreUtil.convertToString([editionElement.metamodelTypeGetter()/], [editionElement.name.toJavaIdentifier()/]Settings.getValue()));
[/template]

