[comment encoding = UTF-8
 *******************************************************************************
 * Copyright (c) 2008-2009 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module viewCommon('http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/mapping/navigation/1.0.0', 'http://www.eclipse.org/emf/eef/mapping/filters/1.0.0', 'http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipse::emf::eef::codegen::services::common /]
[import org::eclipse::emf::eef::codegen::services::naming /]
[import org::eclipse::emf::eef::codegen::widgets::api::widgetGettersSetters /]
[import org::eclipse::emf::eef::codegen::services::typeUtils /]
[import org::eclipse::emf::eef::codegen::services::imports /]
[import org::eclipse::emf::eef::codegen::services::emfCodeGen /]
[import org::eclipse::emf::eef::codegen::services::navigationStep /]

[comment]
Common tools for views generation purpose.
TODO: externalise model/controler reference after Unedic non-reg
[/comment]

[comment --------------- Views related templates --------------- /]
[template public genDeclaration(elementEditor : ElementEditor)]
[elementEditor.getterDeclaration()/]

[elementEditor.setterDeclaration()/]

[/template]

[template public genDeclarationForSubView(view : View)]
	[view.getterForSubViewDeclaration()/]
[/template]

[template public genDeclarationForReferencedView(view : View)]
	[view.getterForReferencedViewDeclaration()/]
[/template]

[template public genDeclarationForViewReference(view : View)]
[for (viewReference : ViewReference | view.eAllContents(ViewReference))]
[viewReference.view.oclAsType(View).genDeclarationForReferencedView()/]
	[for (elementEditor : ElementEditor | viewReference.view.eAllContents(ElementEditor))]
[elementEditor.genDeclaration()/]
	[/for]
[if (viewReference.view.eAllContents(ViewReference)->notEmpty())][genDeclarationForViewReferenceDelegate(viewReference.view.oclAsType(View))/][/if]
[/for]
[/template]

[template public genDeclarationForViewReferenceDelegate(view : View)]
[for (viewReference : ViewReference | view.eAllContents(ViewReference))]
	[for (elementEditor : ElementEditor | viewReference.view.eAllContents(ElementEditor))]
[elementEditor.genDeclaration()/]
	[/for]
[if (viewReference.view.eAllContents(ViewReference)->notEmpty())][genDeclarationForViewReferenceDelegate(viewReference.view.oclAsType(View))/][/if]
[/for]
[/template]

[template public genDeclarationForSubViews(view : View)]
[view.genDeclarationForSubView()/]

[for (elementEditor : ElementEditor | view.eAllContents(ElementEditor))]
[elementEditor.genDeclaration()/]
[/for]
[/template]

[template public compositionStepName(view : IdentifiedElement)]
[view.identifiedElementKey().toJavaIdentifier()/]Step
[/template]

[template public compositionSequence(view : View)]
[include('org.eclipse.emf.eef.runtime.ui.parts.sequence.CompositionSequence')/] [view.compositionStepName()/] = new [include('org.eclipse.emf.eef.runtime.ui.parts.sequence.BindingCompositionSequence')/](propertiesEditionComponent);
[for (elem : ViewElement | view.elements)]
[elem.compositionSequence()/]
[/for]
[/template]

[template public compositionSequence(viewElement : ViewElement)]
// FIXME: composition step generation must be defined for this case : [viewElement/]
[/template]

[template public compositionSequence(containerElement : Container)]
[if (containerElement.elements->size() > 1)]
[include('org.eclipse.emf.eef.runtime.ui.parts.sequence.CompositionStep')/] [containerElement.compositionStepName()/] = [containerElement.eContainer().oclAsType(IdentifiedElement).compositionStepName()/].addStep([containerElement.editorID()/].class);
[for (element : ViewElement | containerElement.elements)]
[element.compositionSequence()/]
[/for]
[else]
[containerElement.eContainer().oclAsType(IdentifiedElement).compositionStepName()/]
	.addStep([containerElement.editorID()/].class)[if (containerElement.elements->isEmpty())];[else]

	.addStep([containerElement.elements->first().editorID()/]);
	[/if]
[/if]
[/template]

[template public compositionSequence(reference : ViewReference)]
[reference.eContainer().oclAsType(IdentifiedElement).compositionStepName()/].addStep([reference.editorID()/]);
[/template]

[template public compositionSequence(editor : ElementEditor)]
[editor.eContainer().oclAsType(IdentifiedElement).compositionStepName()/].addStep([editor.editorID()/]);
[/template]

[template public additionalComponentGetterForModelNavigation(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent)]

/**
 * @ return settings for [editionElement.name/] editor
 */
public EEFEditorSettingsImpl get[editionElement.name.toJavaClassifier()/]Settings() {
		return [editionElement.name.toJavaIdentifier()/]Settings;
}
[/template]

[template public additionalComponentFieldForModelNavigation(editionElement : PropertiesEditionElement, view : View, pec : PropertiesEditionComponent)]

/**
 * Settings for [editionElement.name/] editor
 */
protected [include('org.eclipse.emf.eef.runtime.ui.widgets.settings.EEFEditorSettingsBuilder.EEFEditorSettingsImpl')/] [editionElement.name.toJavaIdentifier()/]Settings = (EEFEditorSettingsImpl) [include('org.eclipse.emf.eef.runtime.ui.widgets.settings.EEFEditorSettingsBuilder')/].create(semanticObject, [editionElement.metamodelGetter()/])
[editionElement.navigation.generateNavigation()/]
.build();

[/template]

[template public generateNavigation(navigation : ModelNavigation)/]

[template public generateNavigation(navigation : CustomModelNavigation)]
// [protected ('for '.concat(navigation.eContainer(PropertiesEditionElement).name).concat(' model navigation implementation'))]

// [/protected]
[/template]

[template public generateNavigation(navigation : SimpleModelNavigation)]
.nextStep([include('org.eclipse.emf.eef.runtime.ui.widgets.settings.NavigationStepBuilder')/].create([navigation.metamodelGetter()/])[if (not navigation.index.oclIsUndefined())]

.index([navigation.index/])[/if][if (not navigation.discriminatorType.oclIsUndefined())]

.discriminator([navigation.discriminatorType.metamodelGetter()/][addImport(navigation.discriminatorType.ePackage.qualifiedMetamodelPackage())/])[/if].build())
[/template]

[template public generateNavigation(navigation : ChainedModelNavigation)]
[navigation.current.generateNavigation()/]
[navigation.next.generateNavigation()/]
[/template]

[template public generateNavigation(navigation : navigation::SmartModelNavigation)]
[navigation.step.generateStep()/]
[/template]

[template public generateStep(step : NavigationStep)/]

[template public generateStep(step : DeclarativeNavigationStep)]
.nextStep([include('org.eclipse.emf.eef.runtime.ui.widgets.settings.NavigationStepBuilder')/].create([step.metamodelGetter()/])[if (not step.index.oclIsUndefined())]

.index([step.index/])[/if][if (not step.discriminatorType.oclIsUndefined())]

.discriminator([step.discriminatorType.metamodelGetter()/][addImport(step.discriminatorType.ePackage.qualifiedMetamodelPackage())/])[/if][if (not step.initializer.oclIsUndefined())]

[step.initNavigationStep()/][/if][if (not step.filters->isEmpty())]

[for (filter : StepFilter | step.filters)][filter.filterNavigationStep()/][/for][/if].build())[if (not step.subStep.oclIsUndefined())]

[step.subStep.generateStep()/][/if]
[/template]

[template public filterNavigationStep (filter : StepFilter) ]
.filter(new EEFFilter() {
	
	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.ui.widgets.settings.EEFFilter#select(org.eclipse.emf.ecore.EObject)
	*/
	@Override
	protected boolean select(EObject semanticObject) {
[filter.filterBody()/]
	}

})

[/template]

[template public initNavigationStep(step : DeclarativeNavigationStep)]
.init(new EEFInitializer() {

	/**
	 * {@inheritDoc}
	 * 
	 * @see org.eclipse.emf.eef.runtime.ui.widgets.settings.EEFInit#init(org.eclipse.emf.ecore.EObject)
	*/
	@Override
	protected EObject init(EObject semanticObject) {
[step.initializer.initBody()/]
	}

})
[/template]

[template public navigationMetamodelGetter(navigation : ModelNavigation)/]

[template public navigationMetamodelGetter(navigation : SmartModelNavigation)]
[navigation.step.stepMetamodelGetter()/]
[/template]

[template public stepMetamodelGetter(step : NavigationStep)/]

[template public stepMetamodelGetter(step : DeclarativeNavigationStep)]
[step.metamodelGetter()/][if (not step.subStep.oclIsUndefined())],
		[step.subStep.stepMetamodelGetter()/][/if]
[/template]

[comment ====== Widgets getters signature ====== /]
[template public partGetterAddSignature(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'ReferencesTable' or editor.views->first().representation.name = 'AdvancedReferencesTable')]
public List get[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/]ToAdd()
[/template]

[template public partGetterRemoveSignature(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'ReferencesTable' or editor.views->first().representation.name = 'AdvancedReferencesTable')]
public List get[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/]ToRemove()
[/template]

[template public partGetterAddSignature(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'TableComposition')]
public List get[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/]ToAdd()
[/template]

[template public partGetterEditSignature(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'TableComposition')]
public Map get[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/]ToEdit()
[/template]

[template public partGetterRemoveSignature(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'TableComposition')]
public List get[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/]ToRemove()
[/template]

[template public partGetterTableListSignature(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'TableComposition')]
public List get[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/]()
[/template]

[comment ====== Widgets setters signature ====== /]
[template public partSetterSignature(editor : PropertiesEditionElement)]
public void set[editor.model.ecorePackageSignature()/]()
[/template]

[template public partSetterAddSignature(editor : PropertiesEditionElement)]
public void add[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/](EObject newValue)
[/template]

[template public partSetterRemoveSignature(editor : PropertiesEditionElement)]
public void remove[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/](EObject value)
[/template]

[template public partSetterUpdateSignature(editor : PropertiesEditionElement)]
public void update[editor.model.eContainingClass.name.toUpperFirst()/]_[editor.model.name.toUpperFirst()/](EObject value)
[/template]

[comment ====== Widgets getters ====== /]
[template public partSetter(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'MultiValuedEditor')]
[editor.partSetterSignature()/] {
		[editor.views->first().name.toJavaIdentifier()/]List = newValue;
		[editor.views->first().name.toJavaIdentifier()/]Text.setText([editor.views->first().name.toJavaIdentifier()/]List.toString());
	}
[/template]

[template public partSetter(editor : PropertiesEditionElement) ? (editor.model.oclAsType(EAttribute).isString() and (editor.model.upperBound = 0 or editor.model.upperBound = 1))]
[editor.partSetterSignature()/] {
		[editor.views->first().name.toJavaIdentifier()/].setText(newValue);
	}
[/template]

[template public partSetter(editor : PropertiesEditionElement) ? (editor.model.oclAsType(EAttribute).isBoolean())]
[editor.partSetterSignature()/] {
		[editor.views->first().name.toJavaIdentifier()/].setSelection(newValue.booleanValue());
	}
[/template]

[template public partSetter(editor : PropertiesEditionElement) ? (editor.model.oclAsType(EAttribute).isInteger() or editor.model.oclAsType(EAttribute).isShort() or editor.model.oclAsType(EAttribute).isLong())]
[editor.partSetterSignature()/] {
		[editor.views->first().name.toJavaIdentifier()/].setText(newValue.toString());
	}
[/template]

[template public partSetter(editor : PropertiesEditionElement) ? (editor.views->first().representation.name = 'EObjectFlatComboViewer' or editor.views->first().representation.name = 'AdvancedEObjectFlatComboViewer')]
[editor.partSetterSignature()/] {
		if (newValue != null)
			[editor.views->first().name.toJavaIdentifier()/].setSelection(new [include('org.eclipse.jface.viewers.StructuredSelection')/](newValue));
		else
			[editor.views->first().name.toJavaIdentifier()/].setSelection(new StructuredSelection());
	}
[/template]

[comment === ViewReference managing ===/]
[template public elementEditorGetterSettersForViewReference(view : View, pec : PropertiesEditionComponent, basePackage : String)]
[for (viewRef : ViewReference | view.eAllContents(ViewReference))]
[viewRef.view.oclAsType(View).getterForReferencedViewImplementation(pec.model.eefPackage(basePackage).fullPartInterfacePath(view.pepInterface()))/]
[for (elementEditor : ElementEditor | viewRef.view.eAllContents(ElementEditor))]
[elementEditor.getterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),viewRef.view.oclAsType(View))/]

[elementEditor.setterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),viewRef.view.oclAsType(View))/]

[/for]
[viewRef.view.oclAsType(View).elementEditorGetterSettersForSubViewReference(pec, basePackage, viewRef)/]
[/for]
[/template]

[template public elementEditorGetterSettersForSubViewReference(view : View, pec : PropertiesEditionComponent, basePackage : String, initViewRef : ViewReference)]
[for (viewRef : ViewReference | view.eAllContents(ViewReference))]
[for (elementEditor : ElementEditor | viewRef.view.eAllContents(views::ElementEditor))]
[elementEditor.getterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),initViewRef.view.oclAsType(View))/]

[elementEditor.setterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),initViewRef.view.oclAsType(View))/]

[/for]
[viewRef.view.oclAsType(View).elementEditorGetterSettersForSubViewReference(pec, basePackage, initViewRef)/]
[/for]
[/template]

[template public elementEditorGetterSettersForSubViews(view : View, pec : PropertiesEditionComponent, basePackage : String)]
[for (subView : View | view.elements->filter(View))]
[subView.getterForSubViewImplementationDelegate(pec.model.eefPackage(basePackage).fullPartInterfacePath(view.pepInterface()))/]
[for (elementEditor : ElementEditor | subView.eAllContents(ElementEditor)->select(owningView() = subView))]
[elementEditor.getterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),subView)/]

[elementEditor.setterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),subView)/]

[/for]
[subView.elementEditorGetterSettersForSubViewsDelegate(pec, basePackage, subView)/]
[/for]
[/template]

[template public elementEditorGetterSettersForSubViewsDelegate(view : View, pec : PropertiesEditionComponent, basePackage : String, initView : View)]
[for (subView : View | view.elements->filter(View))]
[for (elementEditor : ElementEditor | subView.eAllContents(ElementEditor)->select(owningView() = subView))]
[elementEditor.getterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),initView)/]


[elementEditor.setterImplementationDelegate(fullPartInterfacePath(pec.model.eefPackage(basePackage),view.pepInterface()),initView)/]
[/for]
[view.elementEditorGetterSettersForSubViewsDelegate(pec, basePackage, initView)/]
[/for]
[/template]