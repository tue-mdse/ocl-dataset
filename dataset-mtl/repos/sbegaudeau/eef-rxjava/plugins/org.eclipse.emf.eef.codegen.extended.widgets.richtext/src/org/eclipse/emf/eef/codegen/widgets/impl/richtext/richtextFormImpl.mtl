[comment encoding = UTF-8
 *******************************************************************************
 * Copyright (c) 2008-2010 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************
 /]
[module richtextFormImpl('http://www.eclipse.org/emf/eef/views/1.0.0', 'http://www.eclipse.org/emf/eef/components/1.0.0', 'http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/eef/generation/1.0.0') extends org::eclipse::emf::eef::codegen::widgets::api::widgetFormImpl/]

[import org::eclipse::emf::eef::codegen::services::common /]
[import org::eclipse::emf::eef::codegen::services::naming /]
[import org::eclipse::emf::eef::codegen::services::viewCommon /]
[import org::eclipse::emf::eef::codegen::services::imports/]

[template public manageImports(widget : Widget, pec : PropertiesEditionComponent, view : View, basePackage : String) overrides manageImports ? (widget.name = 'RichText')]
[pec.addImports(Sequence{
	'org.eclipse.swt.widgets.Composite',
	'org.eclipse.swt.widgets.Label',
	'org.eclipse.ui.forms.widgets.FormToolkit',
	'org.eclipse.emf.eef.runtime.ui.widgets.FormUtils',
	'org.eclipse.emf.eef.runtime.ui.widgets.richtext.actions.EEFFontNameAction',
	'org.eclipse.emf.eef.runtime.ui.widgets.richtext.actions.EEFFontSizeAction',
	'org.eclipse.emf.eef.runtime.ui.widgets.richtext.actions.EEFFontStyleAction',
	'org.eclipse.epf.richtext.actions.IndentAction',
	'org.eclipse.epf.richtext.actions.ItalicAction',
	'org.eclipse.epf.richtext.actions.JustifyCenterAction',
	'org.eclipse.epf.richtext.actions.JustifyLeftAction',
	'org.eclipse.epf.richtext.actions.JustifyRightAction',
	'org.eclipse.epf.richtext.actions.OutdentAction',
	'org.eclipse.epf.richtext.actions.PasteAction',
	'org.eclipse.epf.richtext.actions.SubscriptAction',
	'org.eclipse.epf.richtext.actions.SuperscriptAction',
	'org.eclipse.epf.richtext.actions.TidyActionGroup',
	'org.eclipse.epf.richtext.actions.UnderlineAction',
	'org.eclipse.epf.richtext.IRichText',
	'org.eclipse.epf.richtext.IRichTextToolBar',
	'org.eclipse.epf.richtext.RichTextToolBar',
	'org.eclipse.epf.richtext.actions.AddImageAction',
	'org.eclipse.epf.richtext.actions.AddLinkAction',
	'org.eclipse.epf.richtext.actions.AddOrderedListAction',
	'org.eclipse.epf.richtext.actions.AddTableAction',
	'org.eclipse.epf.richtext.actions.AddUnorderedListAction',
	'org.eclipse.epf.richtext.actions.BoldAction',
	'org.eclipse.epf.richtext.actions.ClearContentAction',
	'org.eclipse.epf.richtext.actions.CopyAction',
	'org.eclipse.epf.richtext.actions.CutAction',
	'org.eclipse.epf.richtext.actions.FindReplaceAction',
	'org.eclipse.emf.eef.runtime.impl.notify.PropertiesEditionEvent',
	'org.eclipse.swt.layout.GridData'})/]
[/template]

[template public widgetDeclaration(editor : ElementEditor) overrides widgetDeclaration ? (editor.representation.name = 'RichText')]
	protected [include('org.eclipse.epf.richtext.RichText')/] [editor.elementEditorName()/];
[/template]

[template public implementation(editor : ElementEditor) overrides implementation ? (editor.representation.name = 'RichText')]
return create[editor.name.toJavaClassifier()/]RichText(widgetFactory, parent);
[/template]

[template public additionalImplementation(editor : ElementEditor, pec : PropertiesEditionComponent, inputPEC: PropertiesEditionComponent) overrides additionalImplementation ? (editor.representation.name = 'RichText')]
	[editor.owningViewsRepository().associatedGenModel().generationComment()/]
	protected Composite create[editor.name.toJavaClassifier()/]RichText(FormToolkit widgetFactory, Composite parent) {
		[if (editor.nameAsLabel)]
		Label [editor.elementEditorName()/]Label = FormUtils.createPartLabel(widgetFactory, parent, [include(editor.owningViewsRepository().qualifiedMessagesProvider())/].[editor.editorKey(editor.owningView())/], propertiesEditionComponent.isRequired([editor.editorID()/], [editor.owningViewsRepository().vrClass()/].FORM_KIND));
		[else]
		Label [editor.elementEditorName()/]Label = createDescription(parent, [editor.editorID()/], [include(editor.owningViewsRepository().qualifiedMessagesProvider())/].[editor.editorKey(editor.owningView())/]);
		[/if]
		GridData [editor.elementEditorName()/]LabelData = new GridData(GridData.FILL_HORIZONTAL);
		[editor.elementEditorName()/]LabelData.horizontalSpan = 2;
		[editor.elementEditorName()/]Label.setLayoutData([editor.elementEditorName()/]LabelData);
		FormUtils.createHelpButton(widgetFactory, parent, propertiesEditionComponent.getHelpContent([editor.editorID()/], [editor.owningViewsRepository().vrClass()/].FORM_KIND), null); //$NON-NLS-1$
		Composite toolbarContainer = widgetFactory.createComposite(parent);
		toolbarContainer.setLayout(new GridLayout(2, false));
		GridData toolbarData = new GridData(GridData.FILL_HORIZONTAL);
		toolbarData.horizontalSpan = 3;
		toolbarContainer.setLayoutData(toolbarData);
		RichTextToolBar toolBar = new RichTextToolBar(toolbarContainer, SWT.NONE, [editor.elementEditorName()/]);
		[editor.elementEditorName()/] = new RichText(parent, SWT.BORDER | SWT.WRAP | SWT.MULTI | SWT.V_SCROLL); //$NON-NLS-1$
		[editor.elementEditorName()/].setEditable(true);
		GridData [editor.elementEditorName()/]Data = new GridData(GridData.FILL_HORIZONTAL);
		[editor.elementEditorName()/]Data.horizontalSpan = 3;
		[editor.elementEditorName()/]Data.heightHint = 200;
		[editor.elementEditorName()/]Data.widthHint = 200;
		[editor.elementEditorName()/].setLayoutData([editor.elementEditorName()/]Data);

		[editor.elementEditorName()/].addModifyListener(new ModifyListener() {
			public void modifyText(ModifyEvent e) {
				propertiesEditionComponent.delayedFirePropertiesChanged(new PropertiesEditionEvent([editor.editionPart()/].this, [editorID(editor)/], PropertiesEditionEvent.COMMIT, PropertiesEditionEvent.SET, null, [editor.elementEditorName()/].getText()));
			}
		});

		fillToolBar(toolBar, [editor.elementEditorName()/]);
		return parent;
	}

	/**
	 * Populate actions in the Toolbar to link with the RichText
	 * 
	 * @param toolBar The IRichTextToolBar
	 * @param richText The IRichText
	 */
	private void fillToolBar(IRichTextToolBar toolBar, IRichText richText) {
		[editor.fillToolbar()/]
	}
[/template]

[template public fillToolbar (editor : ElementEditor) ]
		toolBar.addAction(new EEFFontStyleAction(richText));
		toolBar.addAction(new EEFFontNameAction(richText));
		toolBar.addAction(new EEFFontSizeAction(richText));
		toolBar.addSeparator();
		toolBar.addAction(new CutAction(richText));
		toolBar.addAction(new CopyAction(richText));
		toolBar.addAction(new PasteAction(richText));
		toolBar.addSeparator();
		toolBar.addAction(new ClearContentAction(richText));
		toolBar.addSeparator();
		toolBar.addAction(new BoldAction(richText));
		toolBar.addAction(new ItalicAction(richText));
		toolBar.addAction(new UnderlineAction(richText));
		toolBar.addSeparator();
		toolBar.addAction(new SubscriptAction(richText));
		toolBar.addAction(new SuperscriptAction(richText));
		toolBar.addSeparator();
		toolBar.addAction(new TidyActionGroup(richText));
		toolBar.addSeparator();
		toolBar.addAction(new AddOrderedListAction(richText));
		toolBar.addAction(new AddUnorderedListAction(richText));
		toolBar.addSeparator();
		toolBar.addAction(new OutdentAction(richText));
		toolBar.addAction(new IndentAction(richText));
		toolBar.addSeparator();
		toolBar.addAction(new JustifyLeftAction(richText));
		toolBar.addAction(new JustifyCenterAction(richText));
		toolBar.addAction(new JustifyRightAction(richText));
		toolBar.addSeparator();
		toolBar.addAction(new FindReplaceAction(richText) {
			/**
			 * @see org.eclipse.epf.richtext.actions.FindReplaceAction#execute(org.eclipse.epf.richtext.IRichText)
			 */
			public void execute(IRichText rText) {
				rText.getFindReplaceAction().execute(rText);
			}
		});
		toolBar.addSeparator();
		toolBar.addAction(new AddLinkAction(richText));
		toolBar.addAction(new AddImageAction(richText));
		toolBar.addSeparator();
		toolBar.addAction(new AddTableAction(richText));

[/template]
