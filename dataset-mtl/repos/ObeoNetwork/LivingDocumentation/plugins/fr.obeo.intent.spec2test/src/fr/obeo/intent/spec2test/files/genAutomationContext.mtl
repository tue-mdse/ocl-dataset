[comment encoding = UTF-8 /]
[module genAutomationContext('http://www.eclipse.org/intent/specification/1.0')]
[import fr::obeo::intent::spec2test::files::genAutomationUtils/]

[template public getAutomationFolderPath(specification : Specification)]
	src/[getAutomationPackage().substituteAll('.', '/')/]/
[/template]

[template public getAutomationPackage(specification : Specification)post (trim())]
[getBasePackage()/].automation
[/template]

[template public genAutomationContext(specification : Specification)]
[file (getAutomationFolderPath()+'AbstractContext.java', false, 'UTF-8')]
[genLicence()/]
package [getAutomationPackage()/];

import org.junit.rules.TestRule;
import org.junit.runner.Description;
import org.junit.runners.model.Statement;

public abstract class Context implements IContext, TestRule {
	public abstract void setup();

	public abstract void tearDown();

	@Override
	public Statement apply(Statement base, Description description) {
		return new ContextStatement(base, this);
	}
}
[/file]
[file (getAutomationFolderPath()+'IContext.java', false, 'UTF-8')]
[genLicence()/]
package [getAutomationPackage()/];

public interface IContext {
	public void setup();

	public void tearDown();
}
[/file]
[file (getAutomationFolderPath()+'ContextStatement.java', false, 'UTF-8')]
[genLicence()/]
package [getAutomationPackage()/];

import org.junit.runners.model.Statement;

public class ContextStatement extends Statement {
	private final Statement base;
	private IContext context;

	public ContextStatement(Statement base, IContext context) {
		this.base = base;
		this.context = context;
	}

	@Override
	public void evaluate() throws Throwable {
		context.setup();
		try {
			base.evaluate();
		} finally {
			context.tearDown();
		}
	}
}
[/file]
[/template]