[comment encoding = UTF-8 /]
[module genAutomationUtils('http://www.eclipse.org/intent/specification/1.0', 'http://www.eclipse.org/emf/2002/Ecore')]

[template public getBasePackage (specification : Specification) ]
[specification.automationLayer.basePackage/]
[/template]
[template public getAutomationPackage (specification : Specification) ]
[getBasePackage()/].automation
[/template]
[template public getAutomationPath(specification : Specification)post (trim())]
	[getBasePath()/][getAutomationPackage(specification).substituteAll('.', '/')/]
[/template]

[template public getPackage (specification : Specification, type:TestType) ]
[getBasePackage()/].[type/]
[/template]

[template public getContextsPackage(specification : Specification)post (trim())]
	[getBasePackage()/].contexts
[/template]

[template public getContextsPath(specification : Specification)post (trim())]
	[getBasePath()/][getContextsPackage(specification).substituteAll('.', '/')/]
[/template]

[template public getFeaturePath(object : EObject, type:TestType)post (trim())]
	[getBasePath()/][getFeaturePackage(object, type).substituteAll('.', '/')/]
[/template]

[template public getFeaturePackage(object : EObject, type: TestType)post (trim())]
[if (object.oclIsTypeOf(Specification))]
	[object.oclAsType(Specification).getBasePackage()+'.'+type/]
[elseif (object.oclIsTypeOf(Story))]
	[object.eContainer(Specification).getBasePackage()+'.'+type/].stories
[elseif (object.oclIsTypeOf(Scenario))]
	[object.eContainer(Specification).getBasePackage()+'.'+type/].stories.[object.eContainer(Story).name.substituteAll(' ', '').toLowerCase()/]
[else]
	[object.eContainer(Specification).getBasePackage()+'.'+type/].features
[/if]
[/template]

[query public getTestClasses (namedElement : NamedElement, type : TestType) : Set(NamedElement) = 
if namedElement.oclIsTypeOf(Specification) then 
namedElement.oclAsType(Specification).getTestTypeFeatures(type)->asSet()
else if namedElement.oclIsTypeOf(Feature) then 
namedElement.oclAsType(Feature).getTestTypeStories(type)->asSet()
else 
namedElement.oclAsType(Story).getTestTypeContexts(type)->asSet()
endif
endif /]

[template public getBasePath()post (trim())]
src/
[/template]
[query public getTestTypeFeatures (specification : Specification, type: TestType) : OrderedSet(Feature) = specification.features->select(element|element.stories.scenarios.eAllContents(TestGenerationNote)->select(note|note.type=type)->size()>0)/]
[query public getTestTypeStories (feature : Feature, type: TestType) : OrderedSet(Story) = feature.stories->select(element|element.scenarios.eAllContents(TestGenerationNote)->select(note|note.type=type)->size()>0)/]
[query public getTestTypeContexts (story : Story, type: TestType) : Sequence(Context) = story.scenarios->select(element|element.eAllContents(TestGenerationNote)->select(note|note.type=type)->size()>0).given/]
[query public getTestTypeScenarios (contxt : Context, type: TestType) : OrderedSet(Scenario) = contxt.eInverse(Scenario)->select(element|element.eAllContents(TestGenerationNote)->select(note|note.type=type)->size()>0)/]
[query public getTestTypeScenarios (story : Story, type: TestType) : OrderedSet(Scenario) = story.scenarios->select(element|element.eAllContents(TestGenerationNote)->select(note|note.type=type)->size()>0)/]

[template public getTestClassName (testClass : NamedElement, type: TestType)post (trim()) ]
[if (testClass.oclIsTypeOf(Scenario))]
	[testClass.getCamelCaseName()/]
[else]
	[testClass.getCamelCaseName()+type.toString().toUpperFirst()/]Tests
[/if]
[/template]

[query public getCamelCaseName(namedElement: NamedElement) : String = 
    invoke('fr.obeo.intent.spec2test.services.NamedElementUtils', 'getCamelCaseName(fr.obeo.intent.specification.NamedElement)', Sequence{namedElement})
  /]

[query public getContexts(story: Story) : EMap = 
    invoke('fr.obeo.intent.spec2test.services.StoryUtils', 'getContexts(fr.obeo.intent.specification.Story)', Sequence{story})
  /]

[template public genLicence () ]
/*******************************************************************************
 * Copyright (c) 2013 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************/

[/template]