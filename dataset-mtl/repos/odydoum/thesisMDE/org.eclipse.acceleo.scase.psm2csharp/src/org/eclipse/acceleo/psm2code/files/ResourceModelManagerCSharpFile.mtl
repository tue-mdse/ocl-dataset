[comment encoding = UTF-8 /]
[module ResourceModelManagerCSharpFile('platform:/plugin/PIM2DotNetPlugin/metamodels/PSMMetamodel.ecore')]
[import org::eclipse::acceleo::psm2code::utilities::DoxyFileHelpers/]
[import org::eclipse::acceleo::psm2code::utilities::DoxyClassHelpers/]
[import org::eclipse::acceleo::psm2code::utilities::DoxyPropertiesHelpers/]

[template public generateResourceMManagerClasses(aCSharpResourceModelManager : CSharpResourceModelManager)]

[file ((aCSharpResourceModelManager.genManagerFileName()), false, 'UTF-8')]
[aCSharpResourceModelManager.genFileDocumentation(aCSharpResourceModelManager.Rbrief() , aCSharpResourceModelManager.Rdetails())/]
namespace [aCSharpResourceModelManager.ancestors(RESTfulServicePSM).name/].Models
{	
	using System;
	using System.Collections.Generic;
	using System.ComponentModel.DataAnnotations;
	using System.ComponentModel.DataAnnotations.Schema;
	using System.Data.Entity.Spatial;
	using System.Runtime.Serialization;
	
	[aCSharpResourceModelManager.genClassDocumentation( aCSharpResourceModelManager.RCbrief() , '' )/]
	[for (a: DataContractAnnotation | aCSharpResourceModelManager.CSharpRMManagerHasDataAnnotation) separator('\n')]
	[a.dataContractAnnotationText/]
	[/for]
	public class [aCSharpResourceModelManager.name/] {
	
	[for (p: PSMComponentProperty | aCSharpResourceModelManager.CSharpRMManagerHasProperty) separator('\n')]
		private [getType(p.type,p.bIsUnique)/] [p.correspondingField/] ;
		
		[p.genPropDocumentation(p.Pbrief() , p.Pdetails())/]
		[for (a: EntityAnnotation | p.PropertyHasEntityAnnotation) separator('\n')]
		[a.EntityAnnotationText/]
		[/for]
		[if (not p.PropertyHasDataAnnotation.oclIsUndefined())]
		[for (a: DataContractAnnotation |  p.PropertyHasDataAnnotation) separator('\n')]
		[a.dataContractAnnotationText/]
		[/for]
		[/if]
		public  [getType(p.type,p.bIsUnique)/] [p.name/] {
			get
	            {  [if (not p.bIsUnique) ]

					if ( [p.correspondingField/] == null)
					{ 
						[p.correspondingField/] = new List<[p.getAccessType()/]>();
					}
					return [p.correspondingField/]; 
				}
[else]return [p.correspondingField/]; }
[/if]
	        set
	            { [p.correspondingField/] =[if (not p.bIsUnique) ] new List<[p.getAccessType()/]>(value)[else] value[/if]; }
        }
		[/for]
	}	
}
[/file]
[/template]

[query private getAccessType(p : PSMComponentProperty) : String = 
 	if (not (p.bIsUnique or p.type = 'HypermediaLink' or p.bIsNavigationProperty) ) 
	then p.eContainer(CSharpResourceModel).name.concat(p.name.toUpperFirst()) 
	else p.type 
	endif
/]

[template public genManagerFileName(aCSharpResourceModelManager : CSharpResourceModelManager)]
	[aCSharpResourceModelManager.ancestors(RESTfulServicePSM).name/]/[aCSharpResourceModelManager.ancestors(RESTfulServicePSM).name/]/Models/[aCSharpResourceModelManager.name/].cs
[/template]

[template private getType(type : String , bIsUnique : Boolean)]
[if (not bIsUnique)]ICollection<[/if][type/][if (not bIsUnique)]>[/if]
[/template]