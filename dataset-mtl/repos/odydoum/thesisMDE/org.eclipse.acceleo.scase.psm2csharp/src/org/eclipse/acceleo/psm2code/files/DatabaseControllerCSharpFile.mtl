[comment encoding = UTF-8 /]
[module DatabaseControllerCSharpFile('platform:/plugin/PIM2DotNetPlugin/metamodels/PSMMetamodel.ecore')]
[import org::eclipse::acceleo::psm2code::utilities::DataHelpers/]
[import org::eclipse::acceleo::psm2code::utilities::DoxyFileHelpers/]
[import org::eclipse::acceleo::psm2code::utilities::DoxyClassHelpers/]

[template public generateDatabaseController( aRESTfulServicePSM : RESTfulServicePSM , anEntityDatabaseController : EntityDatabaseController )]

[file (anEntityDatabaseController.generateDbControllerPath(aRESTfulServicePSM), false, 'UTF-8')]
[anEntityDatabaseController.genFileDocumentation(anEntityDatabaseController.Dbrief() , anEntityDatabaseController.Ddetails())/]
namespace [aRESTfulServicePSM.name/].Data
{
    using System;
	using System.Data.Entity.Infrastructure;

	using [aRESTfulServicePSM.name/].Models;
	using [aRESTfulServicePSM.name/].Data.Repositories;

	/**
		@brief The database controller interface.

		@details The database cotnroller implements this interface.
	*/
    public interface ISimple[anEntityDatabaseController.name.toUpperFirst()/]
    {
        // Repositories
		[for (aCSharpResourceModel : CSharpResourceModel | aRESTfulServicePSM.hasCSharpRModel)]
		I[aRESTfulServicePSM.name/]GenericRepository<[aCSharpResourceModel.name/]> [aCSharpResourceModel.name/]  { get; }
		[/for]

	}
[comment etc/]

	/**
		@brief A simple interface containing the definition of a commit method. [anEntityDatabaseController.name.toUpperFirst()/] implements
		this interface.

		@details Because, generally, we may need to call severall CRUD methods from different repositories (ex. a custom delete of all 
		the collections of a specific resource), these repositories (and consequently the database controller) should be passed as a 
		parameter in the repositories. But because the repositories should NOT be able to comit any changes (thats the UOW's responsibility),
		we pass as an argument the implementation of the I[anEntityDatabaseController.name.toUpperFirst()/] instead, leaving the commit 
		method available only the instance of the [anEntityDatabaseController.name.toUpperFirst()/] class.
	*/
	public interface ICommit
    {
        int Commit();
    }

    public interface I[anEntityDatabaseController.name.toUpperFirst()/] : ISimpleDatabaseController,ICommit,IDisposable
    {
        
    }

	[anEntityDatabaseController.genClassDocumentation(anEntityDatabaseController.DbCCbrief() , anEntityDatabaseController.DbCCdetails())/]
	public class [anEntityDatabaseController.name.toUpperFirst()/] : I[anEntityDatabaseController.name.toUpperFirst()/]
	{
		private [aRESTfulServicePSM.name/]DbContext dbContext { get; set; }

		public [anEntityDatabaseController.name.toUpperFirst()/](){
			this.dbContext = new [aRESTfulServicePSM.name/]DbContext();
		}

		[for (aCSharpResourceModel : CSharpResourceModel | aRESTfulServicePSM.hasCSharpRModel) separator('\n')]
		private I[aRESTfulServicePSM.name/]GenericRepository<[aCSharpResourceModel.name/]> _[aCSharpResourceModel.name.toLowerFirst()/] ;[/for]



		[for (aCSharpResourceModel : CSharpResourceModel | aRESTfulServicePSM.hasCSharpRModel) separator('\n')]
		public I[aRESTfulServicePSM.name/]GenericRepository<[aCSharpResourceModel.name/]> [aCSharpResourceModel.name/]	///Repository that exposes all the available CRUD methods of the @ref [aRESTfulServicePSM.name/].Models.[aCSharpResourceModel.name/] "[aCSharpResourceModel.name/]" resource.
        {
            get
            {
                if (_[aCSharpResourceModel.name.toLowerFirst()/] == null)
                {
                    _[aCSharpResourceModel.name.toLowerFirst()/] = new [aCSharpResourceModel.name/]Repository(dbContext , this);
                
                }
                return _[aCSharpResourceModel.name.toLowerFirst()/];            
            }
        } 
		[/for]
		

        //ICommit Interface implementation

        public int Commit()
        {
		 try
		    {
				dbContext.Database.Log = s => { System.Diagnostics.Debug.WriteLine(s); };
		        return dbContext.SaveChanges();
		    }
		    catch (DbUpdateException e)
		    {
		        System.Diagnostics.Debug.WriteLine(e.StackTrace);
		        return -1;
		    }
            catch (InvalidOperationException e)
            {
                System.Diagnostics.Debug.WriteLine(e.StackTrace);
                return -1;
            }
        }

		//IDisposable Interface implementation

		public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
 
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                if (dbContext != null)
                {
                    dbContext.Dispose();
                }
            }
        }
	}


}
[/file]
[/template]
