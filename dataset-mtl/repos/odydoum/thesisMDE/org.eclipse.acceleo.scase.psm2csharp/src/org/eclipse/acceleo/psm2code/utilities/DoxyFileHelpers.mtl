[comment encoding = UTF-8 /]
[module DoxyFileHelpers('platform:/plugin/PIM2DotNetPlugin/metamodels/PSMMetamodel.ecore')]

[query private getDate(empty : String) : String = invoke('org.eclipse.acceleo.psm2code.utilities.ModelServices', 'getDate()',Sequence{})/]

[query private getServiceName(any : OclAny) : String = 
if any.ancestors(RESTfulServicePSM)->first().oclIsUndefined() then
	any.oclAsType(RESTfulServicePSM).name
else
	any.ancestors(RESTfulServicePSM).name
endif
/]

[template public genFileDocumentation(relElement : OclAny , brief : String , detailed :  String)]
/** @file			  
	@brief 			[brief/]
	
	@details		[detailed/]

	@project 		[self.getServiceName()/]
	@date			[getDate('')/]
	@author			RESTful MDE Engine (.NET variation) created by Odysseas Doumas
	@contact		odydoum@gmail.com
	
	@copyright		ARISTOSTLE UNIVERSITY OF THESSALONIKI <BR>
  					Copyright (C) 2015 <BR>
  					Aristotle University of Thessaloniki <BR>
  					Department of Electrical & Computer Engineering <BR>
  					Division of Electronics & Computer Engineering <BR>
 					Intelligent Systems & Software Engineering Lab
*/
[/template]

[comment --------------------------------------------------------/]

[template public Rbrief(aCSharpResourceModel : CSharpResourceModel)]
This file includes all the model (POCO) classes for the [aCSharpResourceModel.name/] resource.
[/template]

[template public Rbrief(aCSharpResourceModelManager : CSharpResourceModelManager)]
This file includes all the model (POCO) classes for the [aCSharpResourceModelManager.name/] resource.
[/template]

[template public Rbrief(aCSharpAlgoResourceModel : CSharpAlgoResourceModel)]
This file includes all the model (POCO) classes for the [aCSharpAlgoResourceModel.name/] algorithmic resource.
[/template]

[template public Cbrief(aCSharpResourceController : CSharpResourceController)]
This file includes all the classes implementing the [aCSharpResourceController.name/] Web API controller.
[/template]

[template public Cbrief(aCSharpResourceManagerController : CSharpResourceManagerController)]
This file includes all the classes implementing the [aCSharpResourceManagerController.name/] Web API controller.
[/template]

[template public Cbrief(aCSharpAlgoResourceController : CSharpAlgoResourceController)]
This file includes all the classes implementing the [aCSharpAlgoResourceController.name/] Web API controller.
[/template]

[template public Hbrief(aHTTPActionHandler : HTTPActionHandler)]
This file includes all the classes implementing the [aHTTPActionHandler.name/] handler.
[/template]

[template public Dbrief(anEntityDatabaseController : EntityDatabaseController)]
This file includes all classes and interfaces that implement the uniform [anEntityDatabaseController.name/].
[/template]

[template public Dbrief(aRESTfulServicePSM : RESTfulServicePSM)]
This file holds the classes that implement the DbContext.
[/template]

[template public Dbrief(aCSharpResourceModel : CSharpResourceModel)]
This file holds any configuration to be done upon creating the table corresponding to the [aCSharpResourceModel.name/] resource.
[/template]

[template public Dbrief(aCSharpResourceModelManager : CSharpResourceModelManager)]
This file holds the class that implements the [aCSharpResourceModelManager.parentName/] repository.
[/template]

[template public Repbrief(aRESTfulServicePSM : RESTfulServicePSM)]
This file holds contains the generic repository interface. Any specific resource repository implements this interface.
[/template]

[template public Lbrief(aRESTfulServicePSM : RESTfulServicePSM)]
This file contains the class that models a Hypermedia link.
[/template]
[comment --------------------------------------------------------/]

[template public Rdetails(aCSharpResourceModel : CSharpResourceModel)]
The classes in this file are used to model the [aCSharpResourceModel.name/] resource , create the corresponding tables 
					in the database using the code-first approach and allow access to the database via the Entity Framework
					to apply changes and persist data , and  also serialize the data using Data Contract annotations.
[/template]

[template public Rdetails(aCSharpResourceModelManager : CSharpResourceModelManager)]
The classes in this file are used to model the [aCSharpResourceModelManager.name/] resource , create the corresponding tables 
					in the database using the code-first approach and allow access to the database via the Entity Framework
					to apply changes and persist data , and also serialize the data using Data Contract annotations.
[/template]

[template public Rdetails(aCSharpAlgoResourceModel : CSharpAlgoResourceModel)]
The classes in this file are used to model the [aCSharpAlgoResourceModel.name/] algorithmic resource , and serialize the 
					data using Data Contract annotations.
[/template]

[template public Cdetails(aCSharpResourceController : CSharpResourceController)]
An API controller is responsible to receive client requests, call the appropriate handler and return the (serialized) result
					or an error response if the server can't fulfil the request.
[/template]

[template public Cdetails(aCSharpResourceManagerController : CSharpResourceManagerController)]
An API controller is responsible to receive client requests, call the appropriate handler and return the (serialized) result
					or an error response if the server can't fulfil the request.
[/template]

[template public Cdetails(aCSharpAlgoResourceController : CSharpAlgoResourceController)]
An API controller is responsible to receive client requests, call the appropriate handler and return the (serialized) result
					or an error response if the server can't fulfil the request.
[/template]

[template public Hdetails(aHTTPActionHandler : HTTPActionHandler)]
A handler is called by it's corresponding controller. There is a distinct handler for every distinct request for a specific 
					resource. A handler either accesses the database to call the appropriate CRUD operation from the database controller
					or executes a piece of code that implements the request's buisness logic, or both. A handler also consists of a basic
					error handling system, informing the controller of the request's progress via returning the appropriate HTML code.
					Finally, it calculates the hypermedia links that will be sent to the client.
[/template]

[template public Ddetails(anEntityDatabaseController : EntityDatabaseController)]
The database controller is responsible for containing all the available CRUD operations on the database. The databse controller is implementing 
					the UOW pattern in conjuction with the repository pattern. This UOW contains all the repositories that are 
					responsible for the CRUD operations, and these repositories are only accessible throuh this controller, thus,
					the handlers are ignorant of the low level operations that happen between the EF and the database.					
[/template]

[template public Ddetails(aRESTfulServicePSM : RESTfulServicePSM)]
Dbcontext is the primary class EF uses for interacting with data as object. It is responsible, among others, for creating
					the database using the code-first approach, applying any database or table configurations, and making 
					possible for the program to perform SQL queries, and commiting any changes.
[/template]

[template public Ddetails(aCSharpResourceModelManager : CSharpResourceModelManager)]
This repository contains all the CRUD operations that can be performed on the table that corresponds to the [aCSharpResourceModelManager.parentName/] resource.
					The CRUD operations are implemented using the Entity Framework (EF).
[/template]