[comment encoding = UTF-8 /]
[module DbResourceRepositoryCSharpFile('platform:/plugin/PIM2DotNetPlugin/metamodels/PSMMetamodel.ecore')]
[import org::eclipse::acceleo::psm2code::utilities::DataHelpers/]
[import org::eclipse::acceleo::psm2code::utilities::modelServices/]
[import org::eclipse::acceleo::psm2code::utilities::DoxyFileHelpers/]
[import org::eclipse::acceleo::psm2code::utilities::DoxyClassHelpers/]

[template public generateResourceRepositoryInterface(aCSharpResourceModelManager : CSharpResourceModelManager , aRESTfulServicePSM : RESTfulServicePSM)]

[file (aCSharpResourceModelManager.generateDbResourceRepositoryPath(), false, 'UTF-8')]
[let aCSharpResourceModel : CSharpResourceModel = aCSharpResourceModelManager.hasRelatedCSharpRModel]
[aCSharpResourceModelManager.genFileDocumentation(aCSharpResourceModelManager.Dbrief() , aCSharpResourceModelManager.Ddetails())/]
namespace [aCSharpResourceModelManager.ancestors(RESTfulServicePSM) -> first().name/].Data.Repositories
{
	using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
	using System.Collections.Generic;

	using [aRESTfulServicePSM.name/].Models;

	[aCSharpResourceModel.genClassDocumentation(aCSharpResourceModel.DbRCbrief(), '' )/]
    public class [aCSharpResourceModelManager.parentName.toUpperFirst()/]Repository : I[aRESTfulServicePSM.name/]GenericRepository<[aCSharpResourceModelManager.parentName.toUpperFirst()/]>
    {
 
		private ISimple[aRESTfulServicePSM.hasEntityDatabaseController.name.toUpperFirst()/] [aRESTfulServicePSM.hasEntityDatabaseController.name.toLowerFirst()/] { get; set; }
        private DbContext dbContext { get; set; }
        private DbSet<[aCSharpResourceModel.name/]> dbSet { get; set; }
 
        public [aCSharpResourceModelManager.parentName.toUpperFirst()/]Repository(DbContext dbContext ,[aRESTfulServicePSM.hasEntityDatabaseController.name.toUpperFirst()/] [aRESTfulServicePSM.hasEntityDatabaseController.name.toLowerFirst()/] )
        {
            if (dbContext == null) 
                throw new ArgumentNullException("Null DbContext");
            if (databaseController == null) 
                throw new ArgumentNullException("Null DatabseController");
            this.dbContext = dbContext;
			this.[aRESTfulServicePSM.hasEntityDatabaseController.name.toLowerFirst()/] = [aRESTfulServicePSM.hasEntityDatabaseController.name.toLowerFirst()/];
            this.dbSet = dbContext.Set<[aCSharpResourceModel.name/]>();
        }


		[aCSharpResourceModel.genGetAllMethod(aRESTfulServicePSM)/]

		[aCSharpResourceModel.genGetByIdMethod(aRESTfulServicePSM)/]

		[aCSharpResourceModel.gengetWithCollectionsMethod(aRESTfulServicePSM)/]
	
		[aCSharpResourceModel.genPostMethod(aRESTfulServicePSM)/]
	
		[aCSharpResourceModel.genPutMethod(aRESTfulServicePSM)/]
		
		[aCSharpResourceModel.genDeleteMethod(aRESTfulServicePSM)/]
	
		[aCSharpResourceModel.genExistsMethod(aRESTfulServicePSM)/]

	} 
}
[/let]
[/file]
[/template]

[template private genGetAllMethod(aCSharpResourceModel : CSharpResourceModel , aRESTfulServicePSM : RESTfulServicePSM)]
public ICollection<[aCSharpResourceModel.name/]> getAll()
{
    return dbSet
	[for (p: PSMComponentProperty | aCSharpResourceModel.CSharpRModelHasProperty -> select (pr | not( pr.bIsUnique or pr.type = 'HypermediaLink' or pr.bIsNavigationProperty)))]
			.Include(e => e.[p.name/])
	[/for]  
			.ToList<[aCSharpResourceModel.name/]>();
}
[/template]

[template private genPostMethod(aCSharpResourceModel : CSharpResourceModel , aRESTfulServicePSM : RESTfulServicePSM)]
public [aCSharpResourceModel.name/] post([aCSharpResourceModel.name/] entity)
{    
    dbSet.Add(entity);

	[for (p: PSMComponentProperty | aCSharpResourceModel.CSharpRModelHasProperty -> select(p|not (p.bIsUnique or p.bIsNavigationProperty or p.type = 'HypermediaLink')))]
    foreach (var collectionMember in entity.[p.name/].ToList())
    {
		this.dbContext.Entry(collectionMember).State = EntityState.Added;
    }

	[/for]  
    return entity;
}
[/template]

[template private genGetByIdMethod(aCSharpResourceModel : CSharpResourceModel , aRESTfulServicePSM : RESTfulServicePSM)]
public [aCSharpResourceModel.name/] get(int id)
{   
	[aCSharpResourceModel.name/] [aCSharpResourceModel.name.toLowerFirst()/] = dbSet
	[for (p: PSMComponentProperty | aCSharpResourceModel.CSharpRModelHasProperty -> select (pr | not( pr.bIsUnique or pr.type = 'HypermediaLink' or pr.bIsNavigationProperty)))]
						.Include(e => e.[p.name/])
	[/for]  
   						.Where(e => e.[aCSharpResourceModel.getPK().name/] == id).FirstOrDefault();
  
    return [aCSharpResourceModel.name.toLowerFirst()/] ;
}
[/template]

[template private genPutMethod(aCSharpResourceModel : CSharpResourceModel , aRESTfulServicePSM : RESTfulServicePSM)]
public [aCSharpResourceModel.name/] put([aCSharpResourceModel.name/] entity)
{
    dbContext.Entry(entity).State = EntityState.Modified;

	[for (p: PSMComponentProperty | aCSharpResourceModel.CSharpRModelHasProperty -> select(p|not (p.bIsUnique or p.bIsNavigationProperty or p.type = 'HypermediaLink')))]
    foreach (var collectionMember in entity.[p.name/].ToList())
    {
		this.dbContext.Entry(collectionMember).State = collectionMember.[p.name/]Id == 0 ? EntityState.Added : EntityState.Modified;
    }

	[/for]
    return entity;
}
[/template]

[template private genDeleteMethod(aCSharpResourceModel : CSharpResourceModel , aRESTfulServicePSM : RESTfulServicePSM)]
public [aCSharpResourceModel.name/] delete(int id)
{
    var entity = this.getWithCollections(id);

	[for (p: PSMComponentProperty | aCSharpResourceModel.CSharpRModelHasProperty -> select(p|not (p.bIsUnique or p.bIsNavigationProperty or p.type = 'HypermediaLink')))]
    foreach (var collectionMember in entity.[p.name/].ToList())
    {
		this.dbContext.Entry(collectionMember).State = EntityState.Deleted ;
    }

	[/for]	
	[for (p: PSMComponentProperty | aCSharpResourceModel.CSharpRModelHasProperty -> select(p|(not p.bIsUnique) and p.bIsNavigationProperty))]
	//Here we delete the collection of type [p.type/] before the requested delete
    foreach (var collectionMember in entity.[p.name/].ToList())
    {
		this.[aRESTfulServicePSM.hasEntityDatabaseController.name.toLowerFirst()/].[p.type/].delete(collectionMember.[getCollectionResourceID(aCSharpResourceModel,p)/]) ;
    }

	[/for]		
    dbContext.Entry(entity).State = EntityState.Deleted;
	return entity;
}
[/template]

[template private genExistsMethod(aCSharpResourceModel : CSharpResourceModel , aRESTfulServicePSM : RESTfulServicePSM)]
public bool exists(int id)
{
    return dbSet.Count(e => e.[aCSharpResourceModel.getPK().name/] == id) > 0;
}
[/template]

[template private gengetWithCollectionsMethod(aCSharpResourceModel : CSharpResourceModel , aRESTfulServicePSM : RESTfulServicePSM)]
public [aCSharpResourceModel.name/] getWithCollections(int id)
{   
	[aCSharpResourceModel.name/] [aCSharpResourceModel.name.toLowerFirst()/] = dbSet
	[for (p: PSMComponentProperty | aCSharpResourceModel.CSharpRModelHasProperty -> select (pr | not( pr.bIsUnique or pr.type = 'HypermediaLink') or pr.bIsNavigationProperty))]
						.Include(e => e.[p.name/])
	[/for]  
   						.Where(e => e.[aCSharpResourceModel.getPK().name/] == id).FirstOrDefault();

    return [aCSharpResourceModel.name.toLowerFirst()/] ;
}
[/template]

[query public getCollectionResourceID(aCSharpResourceModel : CSharpResourceModel , p : PSMComponentProperty) : String = 
aCSharpResourceModel.hasRelatedCSharpRMManager->collect(r | r.hasRelatedCSharpRModel)->select(r | r.name = p.type)
->first().CSharpRModelHasProperty->select(p | p.bIsPrimaryIdentifier)->first().name
/]