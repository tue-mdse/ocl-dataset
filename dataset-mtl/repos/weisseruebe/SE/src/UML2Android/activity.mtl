[comment encoding = UTF-8 /]
[module activity('http://www.eclipse.org/uml2/3.0.0/UML')]

[template public activity(c : Class)]
[file ('src/' + c._package.name + '/' + c.name + '.java', false)]
package [c._package.name/];



public[if (c.isAbstract)] abstract[/if] class [c.name/] extends Activity [generalization(c)/] {

[for (p:Property | c.attribute -> sortedBy(oclAsType(Property).name))]
	[attributes(p)/]
[/for]

[comment] 	USELESS?
[for (a:Association | c.getAssociations())]
	[associations(a, c)/]
[/for]
[/comment]

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.[c.name.toLowerFirst()/]);
		
		[for (p:Property | c.attribute -> sortedBy(oclAsType(Property).name))]
		[onclicklistener(p)/]
		[/for]
	}

[for (o:Operation | c.getAllOperations() -> sortedBy(oclAsType(Operation).name))]
	[if o.class <> c]@Override[/if]
	[operation(o)/]
[/for]

[for (p:Property | c.attribute -> sortedBy(oclAsType(Property).name))]
	[if (p.getAppliedStereotypes() -> size() > 0)]
	[if (p.getAppliedStereotype('Profile::property') <> null)]
	[genGetterSetter(p)/][/if][/if]
[/for]

}
[/file]
[/template]



[template public generalization(c : Class) ]
[if c.getAllUsedInterfaces() -> size()>0]
implements [for (classifier:Classifier | c.getAllUsedInterfaces()) separator(', ')][classifier.name/] [/for][/if][/template]

[template public attributes(p:Property)]	[comment ToDo: multiple attribute types, not only String, int, boolean /]
[if p.type.getAppliedStereotype('profile::Button') <> null][p.type.visibility/] Button [p.type.name/];
[else][p.type.visibility/][if (p.upper = -1 or p.upper > 1)] List<[p.type.name/]>[else] [p.type.name/][/if] [p.name.toLowerFirst()/];
[/if][/template]

[template public onclicklistener(p:Property)]
[p.type.getValue(p.type.getAppliedStereotype('profile::Button'), 'editPoiActivity_btnSavePos_0') /]
Qualified Name:	[p.type.qualifiedName/]
Name:			[p.type.name/]



[if p.type.getAppliedStereotype('profile::Button') <> null]
[p.type.name/].setOnClickListener(new OnClickListener() {
	@Override
	public void onClick(View v) {
		[for (e : Element | p.class._package.ownedElement)]
			[if (e.oclIsKindOf(Class) and e.oclAsType(Class).name = p.type.name) ]
				[for (p : Property | e.oclAsType(Class).attribute)]
		[p.type.name/] [p.name/];
				[/for]
			[/if]
		[/for]
		// TODO: implement stuff			
	}
});
[/if] 
[/template]

[template public associations(a:Association, c:Class)]	[comment ToDo: Aggregation, nondirectional, etc. /]
[for (p:Property | a.navigableOwnedEnd)]
[if (p.type.name <> c.name)][p.visibility/] [if(p.upper > 1 or p.upper = -1)]List<[p.type.name/]>[else][p.type.name/][/if] [p.name/];	// Multiplicity: [p.lower/]..[if (p.upper = -1)]*[else][p.upper/][/if][/if][/for]
[/template]

[template public operation(o : Operation)]
[o.visibility/] [if o.type.oclIsUndefined()]void[else][o.type.name/][/if] [o.name.toLowerFirst()/]([for (p:Parameter | o.ownedParameter) separator(',') ? (p.direction <> ParameterDirectionKind::return)][p.type.name/] [p.name/][/for]) {
	// TODO: Add your code here
	[if not o.type.oclIsUndefined()]return [Returntype(o)/];[/if]
}
[/template]

[template public Returntype(o : Operation)]
[if (o.type.name = 'Integer')]0[elseif (o.type.name = 'Boolean')]false[else]null[/if]
[/template]

[template public genGetterSetter(p : Property)]
public [if (p.upper = -1 or p.upper > 1)]List<[p.type.name/]>[else][p.type.name/][/if] get[ p.name.toUpperFirst()/]() {
	return this.[p.name.toLowerFirst()/];
}
public void set[p.name.toUpperFirst()/]([if (p.upper = -1 or p.upper > 1)]List<[p.type.name/]>[else][p.type.name/][/if] [p.name.toLowerFirst()/]) {
	this.[p.name.toLowerFirst()/] = [p.name.toLowerFirst()/];
}

[/template]