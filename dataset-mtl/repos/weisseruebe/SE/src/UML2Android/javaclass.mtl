[comment encoding = UTF-8 /]
[module javaclass('http://www.eclipse.org/uml2/3.0.0/UML')]

[template public javaclass(c : Class)]
[file ('src/' + c._package.name + '/' + c.name + '.java', false)]
package [c._package.name/];

public[if (c.isAbstract)] abstract[/if] class [c.name/] [generalization(c)/] {

[for (p:Property | c.attribute -> sortedBy(oclAsType(Property).name))]
	[attributes(p)/]
[/for]

[if not (c.isAbstract)]
	// Constructor
	public [c.name/]() {
	
	}
[/if]

[for (o:Operation | c.getAllOperations() -> sortedBy(oclAsType(Operation).name))]
	[if o.class <> c]@Override[/if]
	[operation(o)/]
[/for]

[for (p:Property | c.attribute -> sortedBy(oclAsType(Property).name))]
	[if (p.getAppliedStereotypes() -> size() > 0)]
	[if (p.getAppliedStereotype('Profile::property') <> null)]
	[genGetterSetter(p)/][/if][/if]
[/for]

}
[/file]
[/template]



[template public generalization(c : Class) ]	[comment ToDo: implements Interface /]
[if c.getGenerals() -> size()>0]
extends [for (classifier:Classifier | c.getGenerals()) separator(', ')][classifier.name/] [/for]

[elseif c.getAppliedStereotype('profile::Activity') <> null]extends Activity
[elseif c.getAppliedStereotype('profile::Button') <> null]extends Button[/if]

[if c.getAllUsedInterfaces() -> size()>0]
implements [for (classifier:Classifier | c.getAllUsedInterfaces()) separator(', ')][classifier.name/] [/for][/if]
[/template]

[template public attributes(p:Property)]	[comment ToDo: multiple attribute types, not only String, int, boolean /]
[p.type.visibility/][if (p.upper = -1 or p.upper > 1)] List<[p.type.name/]>[else] [p.type.name/][/if] [p.name.toLowerFirst()/];
[/template]

[template public associations(a:Association, c:Class)]	[comment ToDo: Aggregation, nondirectional, etc. /]
[for (p:Property | a.navigableOwnedEnd)]
[if (p.type.name <> c.name)][p.visibility/] [if(p.upper > 1 or p.upper = -1)]List<[p.type.name/]>[else][p.type.name/][/if] [p.name/];	// Multiplicity: [p.lower/]..[if (p.upper = -1)]*[else][p.upper/][/if][/if][/for] 
[/template]

[template public operation(o : Operation)]
[o.visibility/] [if o.type.oclIsUndefined()]void[else][o.type.name/][/if] [o.name.toLowerFirst()/]([for (p:Parameter | o.ownedParameter) separator(',') ? (p.direction <> ParameterDirectionKind::return)][p.type.name/] [p.name/][/for]) {
	// TODO: Add your code here
	[if not o.type.oclIsUndefined()]return [Returntype(o)/];[/if]
}
[/template]

[template public Returntype(o : Operation)]
[if (o.type.name = 'Integer')]0[elseif (o.type.name = 'Boolean')]false[else]null[/if]
[/template]

[template public genGetterSetter(p : Property)]
public [if (p.upper = -1 or p.upper > 1)]List<[p.type.name/]>[else][p.type.name/][/if] get[ p.name.toUpperFirst()/]() {
	return this.[p.name.toLowerFirst()/];
}
public void set[p.name.toUpperFirst()/]([if (p.upper = -1 or p.upper > 1)]List<[p.type.name/]>[else][p.type.name/][/if] [p.name.toLowerFirst()/]) {
	this.[p.name.toLowerFirst()/] = [p.name.toLowerFirst()/];
}

[/template]