[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/emf/2002/Ecore', 'http://schemas.ogf.org/occi/core/ecore')]

[template public generateElement(ePackage : EPackage)]
[comment @main/]
[file (ePackage.name + '.odesign', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<description:Group xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:description="http://www.eclipse.org/sirius/description/1.1.0" xmlns:description_1="http://www.eclipse.org/sirius/diagram/description/1.1.0" xmlns:style="http://www.eclipse.org/sirius/diagram/description/style/1.1.0" xmlns:tool="http://www.eclipse.org/sirius/diagram/description/tool/1.1.0" xmlns:tool_1="http://www.eclipse.org/sirius/description/tool/1.1.0" name="[ePackage.name/]" version="10.0.0.201505222000">
  <ownedViewpoints name="[ePackage.name.toUpperFirst()/]Configuration" label="[ePackage.name.toUpperFirst()/] Configuration">
    <ownedRepresentations xsi:type="description_1:DiagramDescription" name="[ePackage.name.toUpperFirst()/]Configuration Diagram" domainClass="Configuration">
      <metamodel href="http://schemas.ogf.org/occi/core/ecore#/"/>
      <metamodel href="[ePackage.nsURI/]#/"/>
      <defaultLayer name="Default">
[for (resourceClass : EClass | ePackage.getAllResourceClasses())]
        <edgeMappings name="[resourceClass.name/]LinksEdge" sourceMapping="//@ownedViewpoints['['/]name='[ePackage.name.toUpperFirst()/]Configuration'[']'/]/@ownedRepresentations['['/]name='[ePackage.name.toUpperFirst()/]Configuration%20Diagram'[']'/]/@defaultLayer/@containerMappings['['/]name='[resourceClass.name/]Container']" targetMapping="[for (link : EClass | ePackage.getAllLinkClasses()) separator(' ')]//@ownedViewpoints['['/]name='[ePackage.name.toUpperFirst()/]Configuration'[']'/]/@ownedRepresentations['['/]name='[ePackage.name.toUpperFirst()/]Configuration%20Diagram'[']'/]/@defaultLayer/@containerMappings['['/]name='[link.name/]Container'[']'/][/for]" targetFinderExpression="feature:links">
          <style sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries['['/]name='gray'[']'/]"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries['['/]name='black'[']'/]"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
[/for]
[for (linkClass : EClass | ePackage.getAllLinkClasses())]
        <edgeMappings name="[linkClass.name/]TargetEdge" sourceMapping="//@ownedViewpoints['['/]name='[ePackage.name.toUpperFirst()/]Configuration'[']'/]/@ownedRepresentations['['/]name='[ePackage.name.toUpperFirst()/]Configuration%20Diagram'[']'/]/@defaultLayer/@containerMappings['['/]name='[linkClass.name/]Container'[']'/]" targetMapping="[for (resource : EClass | ePackage.getAllResourceClasses()) separator(' ')]//@ownedViewpoints['['/]name='[ePackage.name.toUpperFirst()/]Configuration'[']'/]/@ownedRepresentations['['/]name='[ePackage.name.toUpperFirst()/]Configuration%20Diagram'[']'/]/@defaultLayer/@containerMappings['['/]name='[resource.name/]Container'][/for]" targetFinderExpression="feature:target">
          <style sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries['['/]name='gray'[']'/]"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries['['/]name='black'[']'/]"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="[linkClass.name/]Edge" sourceMapping="[for (resource : EClass | ePackage.getAllResourceClasses()) separator(' ')]//@ownedViewpoints['['/]name='[ePackage.name.toUpperFirst()/]Configuration'[']'/]/@ownedRepresentations['['/]name='[ePackage.name.toUpperFirst()/]Configuration%20Diagram'[']'/]/@defaultLayer/@containerMappings['['/]name='[resource.name/]Container'][/for]" targetMapping="[for (resource : EClass | ePackage.getAllResourceClasses()) separator(' ')]//@ownedViewpoints['['/]name='[ePackage.name.toUpperFirst()/]Configuration'[']'/]/@ownedRepresentations['['/]name='[ePackage.name.toUpperFirst()/]Configuration%20Diagram'[']'/]/@defaultLayer/@containerMappings['['/]name='[resource.name/]Container'][/for]" domainClass="[linkClass.name/]" useDomainElement="true">
          <style sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries['['/]name='gray'[']'/]"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries['['/]name='black'[']'/]"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
[/for]
[for (resourceClass : EClass | ePackage.getAllResourceClasses())]
        <containerMappings name="[resourceClass.name/]Container"
            labelDirectEdit="//@ownedViewpoints['['/]name='[ePackage.name.toUpperFirst()/]Configuration'[']'/]/@ownedRepresentations['['/]name='[ePackage.name.toUpperFirst()/]Configuration%20Diagram'[']'/]/@defaultLayer/@toolSections.1/@ownedTools['['/]name='EditEntityTitle'[']'/]"
			semanticCandidatesExpression="feature:resources" 
			domainClass="[resourceClass.name/]"
            childrenPresentation="List">
[generate(ePackage, resourceClass)/]
        </containerMappings>
[/for]
[for (linkClass : EClass | ePackage.getAllLinkClasses())]
        <containerMappings name="[linkClass.name/]Container"
            labelDirectEdit="//@ownedViewpoints['['/]name='[ePackage.name.toUpperFirst()/]Configuration'[']'/]/@ownedRepresentations['['/]name='[ePackage.name.toUpperFirst()/]Configuration%20Diagram'[']'/]/@defaultLayer/@toolSections.1/@ownedTools['['/]name='EditEntityTitle'[']'/]"
			semanticCandidatesExpression="['['/]resources.links->filter([linkClass.name/])/[']'/]" 
			domainClass="[linkClass.name/]"
            childrenPresentation="List">
[generate(ePackage, linkClass)/]
        </containerMappings>
[/for]
        <toolSections name="[ePackage.name.toUpperFirst()/]">
[for (resourceClass : EClass | ePackage.getAllResourceClasses())]
          <ownedTools xsi:type="tool:ContainerCreationDescription" 
			name="Create [resourceClass.name/]"
			containerMappings="//@ownedViewpoints['['/]name='[ePackage.name.toUpperFirst()/]Configuration'[']'/]/@ownedRepresentations['['/]name='[ePackage.name.toUpperFirst()/]Configuration%20Diagram'[']'/]/@defaultLayer/@containerMappings['['/]name='[resourceClass.name/]Container'[']'/]"> 
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:CreateInstance" typeName="[resourceClass.name/]" referenceName="resources">
                <subModelOperations xsi:type="tool_1:SetValue" featureName="title" valueExpression="['['/]'[resourceClass.name.toLowerFirst()/]' + container.oclAsType(Configuration).resources->size().toString()/[']'/]"/>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
[/for]
[for (linkClass : EClass | ePackage.getAllLinkClasses())]
          <ownedTools xsi:type="tool:EdgeCreationDescription"
			name="Create [linkClass.name/]"
			edgeMappings="//@ownedViewpoints['['/]name='[ePackage.name.toUpperFirst()/]Configuration'[']'/]/@ownedRepresentations['['/]name='[ePackage.name.toUpperFirst()/]Configuration%20Diagram'[']'/]/@defaultLayer/@edgeMappings['['/]name='[linkClass.name/]Edge'[']'/]"> 
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="var:source">
                <subModelOperations xsi:type="tool_1:CreateInstance" typeName="[linkClass.name/]" referenceName="links" variableName="link">
                  <subModelOperations xsi:type="tool_1:SetValue" featureName="target" valueExpression="var:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
[/for]
        </toolSections>
        <toolSections name="Tools">
          <ownedTools xsi:type="tool:DirectEditLabel" name="EditEntityTitle" inputLabelExpression="feature:title">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="title" valueExpression="var:arg0"/>
            </initialOperation>
          </ownedTools>
[for (eClass : EClass | ePackage.getAllClasses())]
[for (attribute : EAttribute | eClass.eAllAttributes)]
          <ownedTools xsi:type="tool:DirectEditLabel" name="Edit[eClass.name/][attribute.name.toUpperFirst()/]" inputLabelExpression="feature:[attribute.name/]">
            <mask mask="{0}"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:SetValue" featureName="[attribute.name/]" valueExpression="var:arg0"/>
            </initialOperation>
          </ownedTools>
[/for]
[for (action : EOperation | eClass.eAllOperations->select(eContainingClass.name <> 'Entity'))]
[if (action.eParameters->isEmpty())]
          <ownedTools xsi:type="tool_1:OperationAction" name="[eClass.name/][action.name.toUpperFirst()/]Action" label="[action.name.toUpperFirst()/]" precondition="['['/]self.oclIsKindOf([eClass.name/])/[']'/]">
            <view name="views"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="['['/]self.oclAsType([eClass.name/]).[action.name/]()/[']'/]"/>
            </initialOperation>
          </ownedTools>
[else]
[if (action.eParameters->size() = 1)]
[if (not getFirstParameterEnumType(action).oclIsUndefined())]
[let enumType : EEnum = getFirstParameterEnumType(action)]
          <ownedTools xsi:type="tool_1:PopupMenu" name="[eClass.name/][action.name.toUpperFirst()/]Action" label="[action.name.toUpperFirst()/]" precondition="['['/]self.oclIsKindOf([eClass.name/])/[']'/]">
[for (literal : EEnumLiteral | enumType.eLiterals)]
            <menuItemDescription xsi:type="tool_1:OperationAction" name="[enumType.name/][literal.name.toUpperFirst()/]" label="[literal.name.toUpperFirst()/]">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="['['/]self.oclAsType([eClass.name/]).[action.name/]([enumType.name/]::[literal.name/])/[']'/]"/>
              </initialOperation>
            </menuItemDescription>
[/for]
          </ownedTools>
[/let]
[/if]
[/if]
[/if]
[/for]
[/for]
          <ownedTools xsi:type="tool_1:PopupMenu" name="CRUD operations" precondition="['['/]self.oclIsKindOf(Entity)/[']'/]">
            <menuItemDescription xsi:type="tool_1:OperationAction" name="Create">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="['['/]self.oclAsType(Entity).occiCreate()/[']'/]"/>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="Retrieve">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="['['/]self.oclAsType(Entity).occiRetrieve()/[']'/]"/>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="Update">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="['['/]self.oclAsType(Entity).occiUpdate()/[']'/]"/>
              </initialOperation>
            </menuItemDescription>
            <menuItemDescription xsi:type="tool_1:OperationAction" name="Delete">
              <view name="views"/>
              <initialOperation>
                <firstModelOperations xsi:type="tool_1:ChangeContext" browseExpression="['['/]self.oclAsType(Entity).occiDelete()/[']'/]"/>
              </initialOperation>
            </menuItemDescription>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
<!--
    <ownedJavaExtensions qualifiedClassName="org.occiware.clouddesigner.occi.design.services.DesignServices"/>
-->
  </ownedViewpoints>
</description:Group>
[/file]
[/template]

[template public generate(ePackage : EPackage, eClass : EClass)]
[for (attribute : EAttribute | eClass.eAllAttributes)]
          <subNodeMappings name="[eClass.name/][attribute.name.toUpperFirst()/]"
                labelDirectEdit="//@ownedViewpoints['['/]name='[ePackage.name.toUpperFirst()/]Configuration'[']'/]/@ownedRepresentations['['/]name='[ePackage.name.toUpperFirst()/]Configuration%20Diagram'[']'/]/@defaultLayer/@toolSections.1/@ownedTools['['/]name='Edit[eClass.name/][attribute.name.toUpperFirst()/]'[']'/]"
                semanticCandidatesExpression="['['/]self/[']'/]" domainClass="[eClass.name/]">
            <style xsi:type="style:SquareDescription" labelSize="10" labelExpression="['['/]'[attribute.name/] = ' + self.[attribute.name/].toString()/[']'/]" labelAlignment="LEFT" hideLabelByDefault="true" resizeKind="NSEW">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries['['/]name='black'[']'/]"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries['['/]name='black'[']'/]"/>
              <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries['['/]name='white'[']'/]"/>
            </style>
          </subNodeMappings>
[/for]
          <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelSize="10" labelExpression="['['/]self.title + ': [eClass.name/]'/[']'/]" roundedCorner="true">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries['['/]name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries['['/]name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries['['/]name='white']"/>
            <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries['['/]name='light_gray']"/>
          </style> 
[if (not getStateAttribute(eClass).oclIsUndefined())]
[let stateAttribute : EAttribute = getStateAttribute(eClass)]
[for (eLiteral : EEnumLiteral | stateAttribute.eAttributeType.oclAsType(EEnum).eLiterals)]
          <conditionnalStyles predicateExpression="['['/][stateAttribute.name/] = [eLiteral.eEnum.name/]::[eLiteral.literal/]/[']'/]">
            <style xsi:type="style:FlatContainerStyleDescription" borderSizeComputationExpression="1" labelSize="10" labelExpression="['['/]self.title + ': [eClass.name/]'/[']'/]" roundedCorner="true">
              <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries['['/]name='black'[']'/]"/>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries['['/]name='black'[']'/]"/>
              <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries['['/]name='white'[']'/]"/>
              <foregroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries['['/]name='[getColor(eLiteral)/]'[']'/]"/>
            </style>
          </conditionnalStyles>
[/for]
[/let]
[/if]
[/template]

[query public getAllClasses(ePackage : EPackage) : Collection(EClass) = ePackage.eClassifiers->filter(EClass)/]

[query public getAllResourceClasses(ePackage : EPackage) : Collection(EClass) = ePackage.getAllClasses()->select(ec|not ec.eAllSuperTypes->any(name='Resource').oclIsUndefined()) /]

[query public getAllLinkClasses(ePackage : EPackage) : Collection(EClass) = ePackage.getAllClasses()->select(ec|not ec.eAllSuperTypes->any(name='Link').oclIsUndefined()) /]

[query public getStateAttribute(eClass : EClass) : EAttribute = eClass.eAllAttributes->any(attribute : EAttribute | attribute.name.endsWith('state') and attribute.eAttributeType.oclIsTypeOf(EEnum)) /]

[query public getColor(eEnumLiteral : EEnumLiteral) : String
	= invoke(
	'org.occiware.clouddesigner.occi.emfgen.design.services.GenUtils', 
	'getColor(org.eclipse.emf.ecore.EEnumLiteral)', 
	Sequence{eEnumLiteral})/]

[query public getFirstParameterEnumType(eOperation : EOperation) : EEnum = eOperation.eParameters->at(1).eType.oclAsType(EEnum)/]
