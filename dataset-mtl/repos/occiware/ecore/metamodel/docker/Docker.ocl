import '../OCCI.ecore'

library 'Core.ocl'

package occi

context Configuration
inv MachineNameUnique:
resources->select(kindOf_Machine)->isUnique(attributeAsString('name'))

context Resource
def : kindOf_Container : Boolean = kindOf('http://occiware.org/occi/docker#container')
def : kindOf_Machine : Boolean = kindOf('http://occiware.org/occi/docker#machine')
def : kindOf_Machine_VirtualBox : Boolean = kindOf('http://occiware.org/occi/docker#machine_VirtualBox')

def : memoryLimit : Integer =
computeInteger(kindOf_Container, attributeAsInteger('mem_limit'),
  computeInteger(kindOf_Machine_VirtualBox, links->select(kindOf_Contains).target.memoryLimit->sum(), 0)
)

def : memory : Integer =
computeInteger(kindOf_Machine_VirtualBox, attributeAsInteger('memory'), 0)

inv ContainersUsedTooMemory('Containers consume ' + memoryLimit.toString() + ' when memory is equals to ' + memory.toString()): 
when(kindOf_Machine_VirtualBox, memoryLimit <= memory)

inv ContainerNoCycleBetweenContainers: 
when(kindOf_Container, links->closure(links->select(kindOf_Link or kindOf_VolumesFrom).target.links->select(kindOf_Link or kindOf_VolumesFrom)).target->excludes(self))

inv ContainerLinkAliasUnique: 
when(kindOf_Container, links->select(kindOf_Link)->isUnique(attributeAsString('alias')))

context Link
def : kindOf_Link : Boolean = kindOf('http://occiware.org/occi/docker#link')
def : kindOf_VolumesFrom : Boolean = kindOf('http://occiware.org/occi/docker#volumesfrom')
def : identity_Contains : String = 'http://occiware.org/occi/docker#contains'
def : kindOf_Contains : Boolean = kindOf(identity_Contains)

inv LinkSourceAsContainer:
when(kindOf_Link, source.kindOf_Container)

inv LinkTargetAsContainer:
when(kindOf_Link, target.kindOf_Container)

inv LinkCanOnlyConnectColocalizedContainers:
when(kindOf_Link, linksTo(identity_Contains, source).source = linksTo(identity_Contains, target).source)

inv VolumesFromCanOnlyConnectColocalizedContainers:
when(kindOf_VolumesFrom, linksTo(identity_Contains, source).source = linksTo(identity_Contains, target).source)

inv VolumesFromSourceAsContainer:
when(kindOf_VolumesFrom, source.kindOf_Container)

inv VolumesFromTargetAsContainer:
when(kindOf_VolumesFrom, target.kindOf_Container)

endpackage