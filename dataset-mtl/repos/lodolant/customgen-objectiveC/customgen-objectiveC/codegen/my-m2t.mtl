[comment encoding = UTF-8 /]
[comment]
 As we handle UML models, we register UML metamodel.
 Be careful while changing .mtl name, module name MUST 
 have the same name as its file.
[/comment]
[module my-m2t('http://www.eclipse.org/uml2/4.0.0/UML')]

[comment]
 Main entry.
 * Do NOT change its name, it must be "generate".
 * You can change input UML type to the one
   you want (e.g, "m : Model" or "c : Class" ...).
 * "[file ../]" block can be transfered in other 
   templates. Main entry does NOT have to contain
   this block, it can be put in other ones.
[/comment]
[template public generate(m : Model)]
[comment @main/]
[m.packagedElement.gen()/]
[generateMain()/]
[/template]


[template public gen(p : PackageableElement)]
[/template]


[template public gen(p : Package) ? (not p.packagedElement->isEmpty())]
# ['['/]PACKAGE] [p.qualifiedName/]
[p.packagedElement->select(not oclIsKindOf(Package)).gen()/]
[p.packagedElement->select(oclIsKindOf(Package)).gen()/]
[/template]


[template public gen(c : Class)]
[c.generateMFile()/]
[c.generateHFile()/]
[/template]


[template public generateMain()]
[file ('src/main.m', false, 'UTF-8')]
#import <Foundation/Foundation.h>

int main(int argc, const char * argv['[]'/])
{
	NSAutoreleasePool * pool = ['[['/]NSAutoreleasePool alloc[']'/] init[']'/];
	
	// TODO auto-generated main
	
	['['/]pool drain[']'/];
	return 0;
}
[/file]
[/template]

[template public generateMFile(c : Class)]
[file ('src/'.concat(c.qualifiedName.path()).concat('.m'), false, 'UTF-8')]
#import <[c.qualifiedName.path()/].h>

// Generated from GenMyModel
@implementation [c.name/]

/* Methods of the class */
[c.ownedOperation.generateMethod()/]

/* Accessors of the class */
[c.ownedAttribute.generateAccessorsImpl()/]

/* Classical Objective-C methods */
- (NSString *) description
{
	// TODO auto-generated method
	return ['['/]super description[']'/];
}

- (void) dealloc
{
	// TODO auto-generated method
	['['/]super dealloc[']'/];
}
[/file]
[/template]


[template public generateMethod(o : Operation)]
[genOperation()/]
{
[if (o.name.startsWith('init'))]
	if((self = ['['/]super init[']'/]))
	{
		// TODO auto-generated constructor
	}
	return self;
[else]
	// TODO auto-generated method
[/if]
}

[/template]


[template public generateAccessorsImpl(p : Property)]
- ([p.type.genType()/]) [p.name/]
{
	return [p.name/];
}

- (void) set[p.name.toUpperFirst()/]:([p.type.genType()/]) new[p.name.toUpperFirst()/]
{
	[p.name/] = new[p.name.toUpperFirst()/];
}

[/template]


[template public generateHFile(c : Class)]
[file ('src/'.concat(c.qualifiedName.path()).concat('.h'), false, 'UTF-8')]
#import <Foundation/Foundation.h>

// Generated from GenMyModel
@interface [c.name/] : [c.genGeneralization()/]
{
[for (a : Property | c.ownedAttribute)]
	[a.type.genAttribute()/]
[/for]
}

/* Methods of the class*/
[for (o : Operation | c.ownedOperation)] 
[o.genMethodSqueleton()/]
[/for]

/* Accessors of the variables */
[for (a : Property | c.ownedAttribute)] 
[a.genAccesors()/]
[/for]
/* Classical Objective-C methods */
- (NSString *) description;
- (void) dealloc;

@end
[/file]
[/template]

[template public genAttribute(t : Type)]
[t.genType()/] [t.name/];
[/template]


[template public genMethodSqueleton(o : Operation)]
[o.genOperation()/];
[/template]

[template public genOperation(o : Operation)]
[if (o.isStatic)]+[else]-[/if] ([if(o.name.startsWith('init'))]id[elseif (o.returnResult()->exists(type <> null))][o.returnResult().type.genType()/][else]void[/if]) [o.name/][o.ownedParameter->select(direction <> ParameterDirectionKind::return).genParameter()/]
[/template]

[template public genParameter(p : Parameter)]
([p.type.genType()/])[p.name/]
[/template]


[template public genAccesors(a : Property)]
- ([a.type.genType()/]) [a.name/];
- (void) set[a.name.toUpperFirst()/]:([a.type.genType()/]) new[a.name.toUpperFirst()/];

[/template]

[template public genType(t : Type)]
[if (t.name = 'Integer')]int[elseif (t.name = 'Char')]char[elseif (t.name = 'Float')]float[elseif (t.name = 'Double')]double[elseif (t.name = 'void')]void[elseif (t.name = 'String')]NSString *[elseif (t.name = 'Boolean')]BOOL[else][t.name/] *[/if]
[/template]


[template public genGeneralization(c : Class)]
[if (c.generalization->exists(general <> null))][c.generalization.general.name/][else]NSObject[/if]
[/template]


[query public path(n : String) : String = 
	n.replaceAll('[^:]*::(.*)', '$1').replaceAll('::', '/')
/]