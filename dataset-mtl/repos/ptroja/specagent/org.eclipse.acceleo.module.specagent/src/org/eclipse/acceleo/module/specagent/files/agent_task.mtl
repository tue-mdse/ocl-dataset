[comment encoding = UTF-8 /]
[module agent_task('http://multirobotsystem/1.0')/]
[import utils/]

[template checkStimuli (stimuli : Set(InputBuffer)) ]
[if stimuli->notEmpty()]
[for (buffer : InputBuffer | stimuli)
   separator (' and')
] fresh ([bufferId(buffer)/])[/for][else]
 True[/if]
[/template]

[template clearBufferFlags (anAgent : Agent) ]
procedure Clear_Buffer_Flags
  (buffer : out Agent_[anAgent.name/]_Data_Types.output.Data_Type)
is
begin
   [for (buffer : OutputBuffer | effector.outputs)]
   buffer.effector.[buffer.name/].Unset;
   [/for]
   [for (aSensor : Sensor | sensors)]
   [for (buffer : OutputBuffer | aSensor.outputs)]
   buffer.sensors.[aSensor.name/].[buffer.name/].Unset;
   [/for]
   [/for]
   [for (aTransmitter : Transmitter | transmitters)]
   [for (buffer : OutputBuffer | aTransmitter.outputs)]
   buffer.transmitters.[aTransmitter.name/].[buffer.name/].Unset;
   [/for]
   [/for]
end Clear_Buffer_Flags;
[/template]

[template sendResults (anAgent : Agent) ]
procedure Send_Results
  (buffer : in Agent_[anAgent.name/]_Data_Types.output.Data_Type)
is
begin
   [if hasOutputBuffers(anAgent)]
   --  send commands to the effector
   [for (buffer : OutputBuffer | effector.outputs)]
   if buffer.effector.[buffer.name/].isSet then
      Agent_[anAgent.name/]_effector.[buffer.name/].Send
        (buffer.effector.[buffer.name/].Get);
   end if;

   [/for]
   [for (aSensor : Sensor | sensors->select(outputs->notEmpty()))]
   --  send new settings to sensor [aSensor.name/]
   [for (buffer : OutputBuffer | aSensor.outputs)]
   if buffer.sensors.[aSensor.name/].[buffer.name/].isSet then
      Agent_[anAgent.name/]_sensor_[aSensor.name/].[buffer.name/].Send
        (buffer.sensors.[aSensor.name/].[buffer.name/].Get);
   end if;

   [/for]
   [/for]
   [for (aTransmitter : Transmitter | transmitters->select(outputs->notEmpty()))]
   --  send new data to transmitter [aTransmitter.name/]
   [for (buffer : OutputBuffer | aTransmitter.outputs)]
   --  Agent_[aTransmitter.remote.name/].transmitters.[aTransmitter.name/].[buffer.name/].Send(buffer.[aTransmitter.name/].[buffer.name/].Get);
   [/for]
   [/for]
   --  FIXME: empty handler for the transmitters
   null;
   [else]
   --  there are no output buffers in this agent
   null;
   [/if]
end Send_Results;
[/template]

[template AgentTaskMainBody (anAgent : Agent) ]
task body Main is
   blocking   : Boolean;
   inputData  : Agent_[anAgent.name/]_Data_Types.input.Data_Type;
   [if behaviours.functions->notEmpty()]
   outputData : Agent_[anAgent.name/]_Data_Types.output.Data_Type;
   [/if]
   memoryData : Agent_[anAgent.name/]_Data_Types.memory.Data_Type;
   fresh      : fresh_status_t := (others => False);
   arrived    : Boolean;
begin
   --  Note: data buffer should be already initialized.
   --  Do an assignment to eliminate a compilation warning.
   pragma Warnings (Off);
   inputData  := inputData;
   memoryData := memoryData;
   pragma Warnings (On);

   loop

      [for (aBehavior : Behaviour | behaviours)
         before ('      if')
         separator ('      elsif')
         after('      end if;\n')
      ] (Behavior_[aBehavior.name/].initial_condition (inputData, memoryData)) then

         blocking := False;

         while (not Behavior_[aBehavior.name/].terminal_condition (inputData, memoryData))
         loop

            if blocking then
               Input_Buffers.BlockForSingleMessage (inputData, fresh);
               blocking := False;
            else
               Input_Buffers.PeekForSingleMessage
                 (inputData,
                  fresh,
                  arrived);

               if arrived then
                  blocking := False;
               else
                  -- if (...) then f1(state);
                  -- elsif (...) then f2(state);
                  -- elsif (...) then ...(state);
                  -- else blocking := true;
                  -- end if;

                  -- (1) Check every variant
                  -- (2) Call the transition function
                  -- (3) mark the condition buffers as used
                  [if aBehavior.functions->notEmpty()]
                  [for (function : TransitionFunction | aBehavior.functions)
                     before ('                  if')
                     separator ('                  elsif')
                  ] [checkStimuli(function.stimuli)/] then
                     -- Ada.Text_IO.Put_Line("transition_function_1...");
                     Clear_Buffer_Flags (outputData);
                     Behavior_[aBehavior.name/].transition_function_[function.name/]
                       (inputData,
                        outputData,
                        memoryData);
                     Send_Results (outputData);
                     [for (aInputBuffer : InputBuffer | function.stimuli)]
                     fresh ([bufferId(aInputBuffer)/]) := False;
                     [/for]
                  [/for]
                  else
                     blocking := True;
                  end if;
                  [else]
                  blocking := True;
                  [/if]
               end if;
            end if;
         end loop;
      [/for]

   end loop;
end Main;
[/template]

[template public agent_task(anAgent : Agent)]

[comment @main /]
[file ('agent_'+anAgent.name+'_task.ads', false, 'UTF-8')]
package Agent_[anAgent.name/]_Task is
   pragma Elaborate_Body;
end Agent_[anAgent.name/]_Task;
[/file]
	
[comment @main /]
[file ('agent_'+anAgent.name+'_task.adb', false, 'UTF-8')]
-- with Ada.Text_IO;
with Agent_[anAgent.name/]_Data_Types; use Agent_[anAgent.name/]_Data_Types;
with Agent_[anAgent.name/]_Input_Buffers; use Agent_[anAgent.name/]_Input_Buffers;
with Agent_[anAgent.name/]_Behaviors; use Agent_[anAgent.name/]_Behaviors;

[if anAgent.effector.outputs->notEmpty()]
--  access to the effector
with Agent_[anAgent.name/]_Effector;
[/if]
[if anAgent.sensors.outputs->notEmpty()]
--  access to sensors
[for (aSensor : Sensor | anAgent.sensors->select(outputs->notEmpty()))]
with Agent_[anAgent.name/]_sensor_[aSensor.name/];
[/for]
[/if]
[if (anAgent.transmitters.outputs->notEmpty())]
--  access to the remote cooperating agents
[for (remote : Agent | transmitters->select(outputs->notEmpty()).remote->asSet())]
with Agent_[remote.name/];
[/for]
[/if]

package body Agent_[anAgent.name/]_Task is

   [if behaviours.functions->notEmpty()]
   [clearBufferFlags()/]

   [sendResults()/]

   [/if]
   task Main is
      --  limit the thread storage size for the NXT
      --  pragma Storage_Size(2048);
   end Main;

   [AgentTaskMainBody()/]

end Agent_[anAgent.name/]_Task;
[/file]
	
[/template]
