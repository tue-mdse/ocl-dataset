[comment encoding = UTF-8 /]
[module generic_data_buffer()/]

[template public generic_data_buffer()]
	
[comment @main /]
[file ('data_buffer.ads', false, 'UTF-8')]
generic
   type Data_Type is private;
package Data_Buffer is
   -- This package contains only data and computations on them
   pragma Pure;

   -- Create alias (compatible) data type
   subtype Buffer_Data_Type is Data_Type;

   --  Buffer type
   type Buffer_Type is tagged private;

   -- Set the value and mark a value as fresh
   procedure Set (Buffer : out Buffer_Type; An_Item : in Data_Type);

   -- Get the value from a buffer
   function Get (Buffer : in Buffer_Type) return Data_Type;

   -- Mark the buffer as not fresh
   procedure Unset (Buffer : in out Buffer_Type);

   -- Check if the value in buffer has not been used
   function isSet (Buffer : in Buffer_Type) return Boolean;
private
   --  Single buffer with a data type
   type Buffer_Type is tagged record
      Data  : Data_Type;
      Fresh : Boolean := False;
   end record;

end Data_Buffer;
[/file]

[file ('data_buffer.adb', false, 'UTF-8')]
package body Data_Buffer is

   procedure Set (Buffer : out Buffer_Type; An_Item : in Data_Type) is
   begin
      Buffer.Data  := An_Item;
      Buffer.Fresh := True;
   end Set;

   function Get (Buffer : in Buffer_Type) return Data_Type is
   begin
      return Buffer.Data;
   end Get;

   procedure Unset (Buffer : in out Buffer_Type) is
   begin
      Buffer.Fresh := False;
   end Unset;

   function isSet (Buffer : in Buffer_Type) return Boolean is
   begin
      return Buffer.Fresh;
   end isSet;

end Data_Buffer;
[/file]
	
[/template]
