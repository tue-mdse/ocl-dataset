[comment encoding = UTF-8 /]
[module agent_data_types('http://multirobotsystem/1.0')/]
[import utils/]

[query opaquePackage(opaque : OpaqueData) : String =
if opaque._package->notEmpty() then (opaque._package+'.') else ('') endif
/]

[template inputData_Types (buffers : Set(InputBuffer)) ]
[if buffers->notEmpty()]
--  Input buffers defined for this component
package inputs is
   [for (opaque : InputBuffer | buffers)]
   --  Data type of this input buffer
   package [opaque.name/] is
      subtype Data_Type is [opaquePackage(opaque)/][opaque.type/];
   end [opaque.name/];
   [/for]

   --  Aggregate record data type with inputs of this component
   type Data_Type is record
      [for (opaque : InputBuffer | buffers)]
      [opaque.name/] : inputs.[opaque.name/].Data_Type;
      [/for]
   end record;
end inputs;
[else]
--  There are no input buffers defined for this component
[/if]
[/template]

[template outputData_Types (buffers : Set(OutputBuffer)) ]
[if buffers->notEmpty()]
--  Output buffers defined for this component
package outputs is
[for (opaque : OutputBuffer | buffers)]
   --  Data type of this output buffer
   package [opaque.name/] is
      --  Instantiate the data buffer package
      package Buffer_Package is new Data_Buffer ([opaquePackage(opaque)/][opaque.type/]);
      subtype Data_Type is Buffer_Package.Buffer_Data_Type;
   end [opaque.name/];
[/for]

   --  Aggregate record data type with outputs of this component
   type Data_Type is record
      [for (opaque : OutputBuffer | buffers)]
      [opaque.name/] : outputs.[opaque.name/].Buffer_Package.Buffer_Type;
      [/for]
   end record;
end outputs;
[else]
--  There are no output buffers defined for this component
[/if]
[/template]


[template aggregateSubsystemInputTypes (elements : Set(IOElement)) ]
[if elements.inputs->notEmpty()]
package inputs is
   type Data_Type is record
      [for (element : IOElement | elements->select(inputs->notEmpty()))]
      [element.name/] : [ioElementTypeAsString(element)/].[element.name/].inputs.Data_Type;
      [/for]
   end record;
end inputs;
[/if]
[/template]

[template aggregateSubsystemOutputTypes (elements : Set(IOElement)) ]
[if elements.outputs->notEmpty()]
package outputs is
   type Data_Type is record
      [for (element : IOElement | elements->select(outputs->notEmpty()))]
      [element.name/] : [ioElementTypeAsString(element)/].[element.name/].outputs.Data_Type;
      [/for]
   end record;
end outputs;
[/if]
[/template]

[template public agent_data_types(anAgent : Agent)]
	
[comment @main /]
[file ('agent_'+anAgent.name+'_data_types.ads', false, 'UTF-8')]
-- the packages with the input buffer data types (may be empty)
[for (p : String | anAgent.allInputBuffers()->select(_package->notEmpty())._package->asSet())]
with [p/];
[/for]
-- the packages of the output buffer data types (may be empty)
[for (p : String | anAgent.allOutputBuffers()->select(_package->notEmpty())._package->asSet())]
with [p/];
[/for]
-- the packages of the memory variables data types (may be empty)
[for (p : String | anAgent.memory->select(_package->notEmpty())._package->asSet())]
with [p/];
[/for]

[if hasOutputBuffers(anAgent)]
--  generic buffer with a data fresh flag
with Data_Buffer;
[/if]

package Agent_[anAgent.name/]_Data_Types is
   pragma Remote_Types;

   [if effector->notEmpty()]
   package effector is
      [inputData_Types(effector.inputs)/]
      [outputData_Types(effector.outputs)/]
   end effector;
   [else]
   --  There in no effector defined for this agent
   [/if]

   [if sensors->notEmpty()]
   package sensors is
      [for (aSensor : Sensor | sensors)]
      package [aSensor.name/] is
         [inputData_Types(inputs)/]
         [outputData_Types(outputs)/]
      end [aSensor.name/];
      [/for]
      [aggregateSubsystemInputTypes(sensors)/]
      [aggregateSubsystemOutputTypes(sensors)/]
   end sensors;
   [else]
   --  There are no sensors defined for this agent
   [/if]

   [if transmitters->notEmpty()]
   package transmitters is
      [for (aTransmitter : Transmitter | transmitters)]
      package [aTransmitter.name/] is
         [inputData_Types(inputs)/]
         [outputData_Types(outputs)/]
      end [aTransmitter.name/];
      [/for]
      [aggregateSubsystemInputTypes(transmitters)/]
      [aggregateSubsystemOutputTypes(transmitters)/]
   end transmitters;
   [else]
   --  There are no transmitters defined for this agent
   [/if]

   --  Input subsystems state hierarchical data record
   package input is
      type Data_Type is record
         [if effector.inputs->notEmpty()]
         effector     : Agent_[anAgent.name/]_Data_Types.effector.inputs.Data_Type;
         [/if]
         [if sensors.inputs->notEmpty()]
         sensors      : Agent_[anAgent.name/]_Data_Types.sensors.inputs.Data_Type;
         [/if]
         [if transmitters.inputs->notEmpty()]
         transmitters : Agent_[anAgent.name/]_Data_Types.transmitters.inputs.Data_Type;
         [/if]
      end record;
   end input;

   --  Output subsystems state hierarchical data record
   package output is
      type Data_Type is record
         [if effector.outputs->notEmpty()]
         effector     : Agent_[anAgent.name/]_Data_Types.effector.outputs.Data_Type;
         [/if]
         [if sensors.outputs->notEmpty()]
         sensors      : Agent_[anAgent.name/]_Data_Types.sensors.outputs.Data_Type;
         [/if]
         [if transmitters.outputs->notEmpty()]
         transmitters : Agent_[anAgent.name/]_Data_Types.transmitters.outputs.Data_Type;
         [/if]
      end record;
   end output;

   --  Internal memory state data record
   package memory is
      type Data_Type is record
         [if anAgent.memory->notEmpty()]
         [for (opaque : InternalData | anAgent.memory)]
         [opaque.name/] : [opaquePackage(opaque)/][opaque.type/];
         [/for]
         [else]
         null;
         [/if]
      end record;
   end memory;

end Agent_[anAgent.name/]_Data_Types;
[/file]
	
[/template]