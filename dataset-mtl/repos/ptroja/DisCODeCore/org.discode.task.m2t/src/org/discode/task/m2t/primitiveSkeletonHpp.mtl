[comment encoding = UTF-8 /]
[module primitiveSkeletonHpp('http://componentmodel/1.0')]

[template public generateElement(aPrimitiveComponent : PrimitiveComponent)]

[file (aPrimitiveComponent.name.concat('.hpp'), false, 'UTF-8')]
/*!
 * \file [aPrimitiveComponent.name/].hpp
 * \brief 
 * \author [aPrimitiveComponent.authorName/] [aPrimitiveComponent.authorEmail/]
 */

#ifndef [aPrimitiveComponent.name.toUpper()/]_HPP_
#define [aPrimitiveComponent.name.toUpper()/]_HPP_

#include "Component_Aux.hpp"
#include "Component.hpp"
#include "DataStream.hpp"
#include "Property.hpp"
#include "EventHandler2.hpp"

// [protected ('user-defined headers')]
// [/protected]

namespace Processors {
namespace [aPrimitiveComponent.name/] {

/*!
 * \class [aPrimitiveComponent.name/]
 * \brief [aPrimitiveComponent.description/]
 */
class [aPrimitiveComponent.name/]: public Base::Component {
public:
	/*!
	 * Constructor.
	 */
	[aPrimitiveComponent.name/](const std::string & name = "[aPrimitiveComponent.name/]");

	/*!
	 * Destructor
	 */
	virtual ~[aPrimitiveComponent.name/]();

	/*!
	 * Prepare components interface (register streams and handlers).
	 * At this point, all properties are already initialized
	 * (default values or the ones loaded from the configuration file).
	 */
	void prepareInterface();

protected:

	/*!
	 * Connects source to given device.
	 */
	bool onInit();

	/*!
	 * Disconnect source from device, closes streams, etc.
	 */
	bool onFinish();

	/*!
	 * Start component.
	 */
	bool onStart();

	/*!
	 * Stop component.
	 */
	bool onStop();

	// Data streams.
	[for (p : InPort | aPrimitiveComponent.ports.eContents(InPort)) separator ('\n')]
	Base::DataStreamIn< [p.type/] > in_[p.name/];
	[/for]

	[for (p : OutPort | aPrimitiveComponent.ports.eContents(OutPort)) separator ('\n')]
	Base::DataStreamOut< [p.type/] > out_[p.name/];
	[/for]

#if 0
	// Handlers

	// Handler activated when datastream chessboard is present.
	Base::EventHandler2 h_process_chessboard;

	// Handler activated a calibration computations should be performed.
	Base::EventHandler2 h_perform_calibration;
#endif

private:
	// [protected ('private data and operations')]
	// [/protected]
};

} //: namespace [aPrimitiveComponent.name/]
} //: namespace Processors

/*
 * Register processor component.
 */
REGISTER_COMPONENT("[aPrimitiveComponent.name/]", Processors::[aPrimitiveComponent.name/]::[aPrimitiveComponent.name/])

#endif /* [aPrimitiveComponent.name.toUpper()/]_HPP_ */
[/file]
[/template]
