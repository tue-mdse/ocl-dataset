[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012, 2014 CNES and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Cedric Notot (Obeo) - initial API and implementation
 *     Sylvain Jouanneau (CNES) - bug 440109
[/comment]

[module classFile('http://www.eclipse.org/umlgen/dsl/asl','http://www.eclipse.org/umlgen/dsl/eth','http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::eclipse::umlgen::gen::autojava::files::paramFile /]
[import org::eclipse::umlgen::gen::autojava::files::ethernetComFile /]
[import org::eclipse::umlgen::gen::autojava::specific::port /]
[import org::eclipse::umlgen::gen::autojava::specific::thread /]
[import org::eclipse::umlgen::gen::autojava::specific::stateMachine /]
[import org::eclipse::umlgen::gen::autojava::specific::root /]
[import org::eclipse::umlgen::gen::autojava::specific::lib::common /]
[import org::eclipse::umlgen::gen::autojava::specific::lib::feature /]
[import org::eclipse::umlgen::gen::autojava::specific::lib::type /]
[import org::eclipse::umlgen::gen::autojava::specific::lib::requests::common /]
[import org::eclipse::umlgen::gen::autojava::requests::port /]
[import org::eclipse::umlgen::gen::autojava::requests::common /]
[import org::eclipse::umlgen::gen::autojava::requests::ethernet /]
[import org::eclipse::umlgen::gen::autojava::services::rtsjServices /]
[import org::eclipse::umlgen::gen::autojava::services::utilServices /]
[import org::eclipse::umlgen::gen::autojava::common::imports /]
[import org::eclipse::umlgen::gen::autojava::common::common /]

[template public genFileBody(aClass : Class)]
[aClass.genFilePath().genPackageDeclaration()/]
[comment Generate import of class /]
[aClass.genImport()/]
[aClass.genThreadImport()/]
[if (aClass.isMessage())]
[aClass.genMessageImport()/]
[/if]
[if (aClass.getAllSignals()->notEmpty())]
[aClass.genSignalImport()/]
[/if]
[if (aClass.needsBuffer())]
[aClass.genBufferImport()/]
[/if]
import org.eclipse.umlgen.rtsj.framework.*;
import org.eclipse.umlgen.rtsj.framework.types.*;
[for (port : Port | aClass.get('ownedPort')->filter(Port)->union(aClass.getParents()->select(c : Classifier | c.isAbstract).get('ownedPort')->filter(Port)))]
	[for (interface : Interface | port.getAllPortInterfaces())]
import [port.genFilePath()/].[interface.genClassPortName(port)/];
	[/for]
[/for]
[for (interface : Interface | aClass.getAllProvidedInterfaces())]
import [interface.genPackagePath()/].[interface.genName()/];
[/for]
[for(aType : Type | minimize(aClass.getAllSignals()->union(aClass.getParents()->select(c : Classifier | c.isAbstract)->filter(Class).getAllSignals()).get('ownedAttribute')->filter(Property).type->select(aType : Type | not aType.isJavaPrimitive()))->filter(Type))]
import [aType.genFilePath()/].[aType.name/];
[/for]
[if (not aClass._package.isOnlyEthernetPackage())]
import [aClass.genPackagePath()/].*;
[/if]
[aClass.genEthernetComImports()/]
// [protected ('to add imports for '.concat(aClass.genName()))]

// [/protected]

[comment Generate class comment /]
[aClass.genCommentBis() /]

[if (getProperty('gen.annotations') = 'true')]
[aClass.genThreadAnnotations()/][/if]
[comment Class declaration /]
[aClass.genVisibility()/][aClass.genAbstract()/][aClass.genFinal()/]class [aClass.genName()/] [aClass.genInheritance()/] [aClass.genInterfaceRealization()/] {
	[aClass.genClassBody()/]
}
[/template]

[template protected genClassBody(aClass : Class)]
[comment Generate root methods /]
[if (aClass.isRoot())]
[aClass.genRoot()/]
[/if]

[comment Generate static memory buffer attribute /]
[aClass.genStaticMemoryBuffer()/]

[comment Generate attributes /]
[for (p : Property | aClass.getAttributes())]
[p.genAttribute()/]
[/for]
// [protected ('to add fields for '.concat(genName()))]

// [/protected]

public void readObject(ArgsBuffer argsBuffer) {
[if (aClass.general->size() > 0)]
	super.readObject(argsBuffer);
[/if]
[for (aProperty : Property | aClass.getAttributes()->select(aProperty : Property | not aProperty.isNotSerialized()))]
	[aProperty.genReader()/]
[/for]
}

public void writeObject(ArgsBuffer argsBuffer) {
[if (aClass.general->size() > 0)]
	super.writeObject(argsBuffer);
[/if]
[for (aProperty : Property | aClass.getAttributes()->select(aProperty : Property | not aProperty.isNotSerialized()))]
	[aProperty.genWriter()/]
[/for]		
}

[comment Generate signal interface declaration /]
[if (aClass.ownedBehavior->filter(StateMachine)->notEmpty())]
/**  SIGNALS.  ***/
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
interface SMState {
	[for (s : Signal | aClass.getAllSignals()->union(aClass.getParents()->select(c : Classifier | c.isAbstract)->filter(Class).getAllSignals()))]
	/**
 	* Description of the method [s.genName()/].
 	*
 	*/
	void [s.genName()/]([s.get('ownedAttribute')->filter(Property).genAttributeProperty()->sep(', ')/]);
	[/for]
	/**
	 * Description of the method enterHState.
	 *
	 * @return SMState
	 */
	SMState enterHState();
	/**
	 * Description of the method exitToState.
	 *
	 * @param s SMState
	 */
	void exitToState(SMState s);
}
[/if]

[comment Generate all inner class /]
[for (c : Class | aClass.get('nestedClassifier')->filter(Class)->select(itC : Class | not itC.eClass().name.equalsIgnoreCase('Behavior') and itC.ownedBehavior->isEmpty()))]
[c.genCommentBis()/]
[c.genVisibility()/][c.genAbstract()/][c.genFinal()/]class [c.genName()/] [c.genInheritance()/] [c.genInterfaceRealization()/] {
[c.genClassBody()/]
}
[/for]

[comment Generate getters and setters /]
[for (p : Property | aClass.get('ownedAttribute')->excluding(aClass.get('ownedPort'))->asSequence()->union(aClass.getAssociations().navigableOwnedEnd->select(itP : Property | itP.type <> aClass)->asSequence())->filter(Property))][p.genAccessors(aClass)/][/for]

[comment Generate state machine methods /]
[for (b : Behavior | aClass.get('ownedBehavior')->filter(StateMachine))]
[b.genStateMachine()/]
[/for]
[comment Generate constructor /]
[aClass.genConstructor()/]
[comment Generate methods /]
[for (o : Operation | aClass.get('ownedOperation')->filter(Operation)->select(itO : Operation | not itO.name.equalsIgnoreCase(aClass.name)))]
[o.genOperation()/]
[/for]
[comment Generate periodic/aperiodic methods /]
[aClass.genThread()/]

[comment Generate ports declaration /]
/**  CONNECTORS.  ***/
[for (port : Port | aClass.get('ownedPort')->filter(Port))]
	[for (interface : Interface | port.getAllPortInterfaces())]
protected [interface.genClassPortName(port)/] [port.name/];
	[/for]
[/for]

[if (not aClass.isAbstract and aClass.ownedPort->notEmpty())]
public void initPortsGenerator(String componentInstance, CommunicationLayer communicationLayer) {
[for (port : Port | aClass.get('ownedPort')->filter(Port)->union(aClass.getParents()->select(aParent : Classifier | aParent.isAbstract).get('ownedPort')->filter(Port)))]
	[for (interface : Interface | port.getAllPortInterfaces())]
	[port.name/] = new [interface.genPortConstructorCall(port,'componentInstance')/];
	[/for]
[/for]
[if (aClass.getParents()->notEmpty())]
	[if (aClass.getParents()->select(aParent : Classifier | not aParent.isAbstract).get('ownedPort')->filter(Port).getAllPortInterfaces()->notEmpty())]
	super.initPortsGenerator(componentInstance, communicationLayer);
	[/if]
[/if]
}
[/if]

[for (port : Port | aClass.get('ownedPort')->filter(Port)->select(p : Port | p.isReceiver()))]
public EventDataPort get[port.name.toUpperFirst()/]() {
	return [port.name/];
}
[/for]

[if (not aClass.isAbstract)]
[for (s : Signal | minimize(aClass.getAsyncInterfacesPortProvider().get('nestedClassifier')->filter(Signal)->union(aClass.getAsyncInterfacesPortProvider().get('ownedElement')->filter(Reception).signal))->filter(Signal)->union(aClass.getParents()->filter(Class)->select(c : Class | c.isAbstract).get('nestedClassifier')->filter(Signal)->union(aClass.getParents()->filter(Class)->select(c : Class | c.isAbstract).getAsyncInterfacesPortProvider().get('ownedElement')->filter(Reception).signal))->filter(Signal))]
public void [s.genName()/]([s.get('ownedAttribute')->filter(Property).genAttributeProperty()->sep(', ')/]) {
[if (aClass.get('ownedBehavior')->filter(StateMachine)->notEmpty())]
	[aClass.get('ownedBehavior')->filter(StateMachine)->first().genName()/].current_state.[s.genName()/]([s.get('ownedAttribute')->filter(Property).name->sep(', ')/]);
[else]
	// [protected ('for method '
	+ aClass.genName()
	+ '.' + s.genName() +'('
	+ s.get('ownedAttribute')->filter(Property).genAttributeProperty()->sep(', ').oclAsType(String)
	+ '): void')]
	// [/protected]
[/if]	
}
[/for]
[/if]
[/template]

[template protected genConstructor(aClass : Class) post(trim())]
[if (aClass.get('ownedOperation')->filter(Operation)->select(itOp : Operation | itOp.name.equalsIgnoreCase(aClass.name))->isEmpty())]
	[if (getProperty('gen.constructor') = 'true')]
[comment If there is no constructor operation in the model and constructor generation is enabled /]
/**
 * Constructor.
 */
public [aClass.genName()/]() {
	[aClass.genConstructorBody()/]
	// [protected ('for constructor ' + aClass.genName())]
	// [/protected]
}
	[/if]
[else]
[comment If there is at least one constructor operation in the model /]
	[for (o : Operation | aClass.get('ownedOperation')->filter(Operation)->select(itOp : Operation | itOp.name.equalsIgnoreCase(aClass.name)))]
/**
 * Constructor.
 *
	[for (p : uml::Parameter | o.get('ownedParameter')->filter(uml::Parameter)->select(aParam : uml::Parameter | aParam.direction <> ParameterDirectionKind::return))]
 * @param [p.genName()/][p.genCommentBis()/]
	[/for]
 */
[o.genVisibility()/][o.genName()/]([o.ownedParameter->select(aParam : uml::Parameter | aParam.direction <> ParameterDirectionKind::return).genMethodParam()->sep(', ')/]) {
	[o.genConstructorBody()/]
	// [protected ('for constructor '
		+ o.genName()
		+ '('
		+ o.ownedParameter->select(aParam : uml::Parameter | aParam.direction <> ParameterDirectionKind::return).genType()->sep(', ')
		+ ')')]	
	// [/protected]
}
	[/for]
[/if]
[/template]

[template protected genThread(aClass : Class)]
[if (aClass.isPeriodic() or aClass.isAperiodic() or aClass.isSporadic())]
PortBuffer pbuffer = new PortBuffer([aClass.getPortBuffer()/]);
[aClass.genThreadInfo()/]
[/if]
[/template]

[template public genInterfaceRealization(aClass : Class) post (trim())]
[if (aClass.getInterfacesRealization()->notEmpty())]implements [aClass.getInterfacesRealization().genName()->sep(', ')/][/if][if(aClass.isAperiodic() or aClass.isSporadic())][if (aClass.getInterfacesRealization()->notEmpty())], [else]implements [/if]CommunicationExceptionInterface[if (aClass.isAperiodic())], Runnable[/if][/if]
[/template]

[template protected genEthernetComImports(aClass : Class)]
[for (p : Property | aClass.getAttributes()->select(aProperty : Property | aProperty.isEthernetComponentWithConnector()))]
import [p.genEthernetComPackagePath()/].[p.genEthernetComFileName()/];
[/for]
[for (p : Property | aClass.getAttributes()->select(aProperty : Property | aProperty.isEthernetComponentForImport()))]
import [p.genDecoratorPackagePath()/].[p.type.genName()/];
[/for]
[/template]

[template protected genAccessors(aProperty : Property, aClass : Class)]
[if (getProperty('gen.accessors') = 'true')]
[comment Generate Getter /]
/**
 * Return [aProperty.genName()/].
 * @return [aProperty.genName()/][aProperty.genCommentBis()/]
 */
public [aProperty.genType()/] get[aProperty.name.toUpperFirst()/]() {
    return [aProperty.genName()/];
}
	[if (not aProperty.isReadOnly)]
[comment Generate Setter /]

/**
 * Set a value to attribute [aProperty.genName()/].
 * @param [aProperty.genName()/][aProperty.genCommentBis()/].
 */
public void set[aProperty.name.toUpperFirst()/]([aProperty.genType()/] [aProperty.genName()/]) {
		[if (aProperty.opposite <> null and aProperty.upper = 1 and getProperty('gen.biDirections') = 'true' and aProperty.opposite.upper = 1)]
	if(this.[aProperty.genName()/] != null) {
		this.[aProperty.genName()/].set[aProperty.genPropertyParent(aClass)/](null);
	}
	[aProperty.genName()/].set[aProperty.genPropertyParent(aClass)/](this);
		[/if]
    [if (aProperty.isStatic)][aProperty.class.genName()/][else]this[/if].[aProperty.genName()/] = [aProperty.genName()/];
}
	[/if]
	[if (getProperty('gen.listAccessors') = 'true' and (aProperty.upper = -1 or aProperty.upper > 1))]
[comment TODO : implement array bidirectional case /]

[comment Generate List Accessors /]
		[if (getProperty('tuple.genArrays') = 'true')]
/**
 * Add a [aProperty.genName()/] to the [aProperty.genName()/] array.
     		[if (aProperty.opposite <> null)]
 * Bidirectionnal association : add the current [aProperty.class.genName()/] instance to given [aProperty.genName()/] parameter.
     		[/if]
 * @param index index of element.
 * @param [aProperty.genNameElt()/] Element to add
 */
public void add[aProperty.name.toUpperFirst()/](int index, [aProperty.genTypeName()/] [aProperty.genNameElt()/]) {
    this.[aProperty.genName()/]['['/]index[']'/]=[aProperty.genNameElt()/];
}

/**
 * Remove a [aProperty.genName()/] to the [aProperty.genName()/] array at index position.
      		[if (aProperty.opposite <> null)]
 * Bidirectionnal association : remove the current [aProperty.class.genName()/] instance to given [aProperty.genName()/] parameter.
      		[/if]
 * @param index index element to remove.
 */
public void remove[aProperty.name.toUpperFirst()/](int index) {
    this.[aProperty.genName()/]['['/]index[']'/] = [if (isPropertyExist('java.defaultvalue.'.concat(type.name)))][getProperty('java.defaultvalue.'.concat(type.name))/][else]null[/if];
}

		[else]
/**
 * Add a [aProperty.genName()/] to the [aProperty.genName()/] collection.
     		[if (aProperty.opposite <> null)]
 * Bidirectionnal association : add the current [aProperty.class.genName()/] instance to given [aProperty.genName()/] parameter.
     		[/if]
 * @param [aProperty.genNameElt()/] Element to add.
 */
public void add[aProperty.name.toUpperFirst()/]([aProperty.genTypeName()/] [aProperty.genNameElt()/]) {
    this.[aProperty.genName()/].add([aProperty.genNameElt()/]);
      		[if (aProperty.opposite <> null and getProperty('gen.biDirections') = 'true')]
       			[if (aProperty.opposite.upper = 1)]
    [aProperty.genNameElt()/].set[aProperty.opposite.name.toUpperFirst()/](this);
       			[else]
    [aProperty.genNameElt()/].get[aProperty.opposite.name.toUpperFirst()/]().add(this);
       			[/if]
      		[/if]
}

/**
 * Remove a [aProperty.genName()/] to the [aProperty.genName()/] collection.
      		[if (aProperty.opposite <> null)]
 * Bidirectionnal association : remove the current [aProperty.class.genName()/] instance to given [aProperty.genName()/] parameter.
      		[/if]
 * @param [aProperty.genNameElt()/] Element to remove
 */
public void remove[aProperty.name.toUpperFirst()/]([aProperty.genTypeName()/] [aProperty.genNameElt()/]) {
    this.[aProperty.genName()/].remove([aProperty.genNameElt()/]);
       		[if (aProperty.opposite <> null and getProperty('gen.biDirections') = 'true')]
        		[if (aProperty.opposite.upper = 1)]
    [aProperty.genNameElt()/].set[aProperty.opposite.name.toUpperFirst()/](null);
	 			[else]
    [aProperty.genNameElt()/].get[aProperty.opposite.name.toUpperFirst()/]().remove(this);
        		[/if]
       		[/if]
}
		[/if]
	[/if]
[/if]
[/template]

[template protected genConstructorBody(anOperation : Operation) post(trim())]
[eContainer()->filter(Class).genConstructorBody()/]
[/template]

[template protected genConstructorBody(aClass : Class) post(trim())]
[if (ownedBehavior->filter(StateMachine)->notEmpty())]
[ownedBehavior->filter(StateMachine).genConstructorInitialState()/]
[else]
	super();
[/if]
[/template]

[comment generates message import /]
[template protected genMessageImport(aClass : Class)]
[if (isMessage())]
import org.eclipse.umlgen.rtsj.framework.ArgsBuffer;
[/if]
[/template]
