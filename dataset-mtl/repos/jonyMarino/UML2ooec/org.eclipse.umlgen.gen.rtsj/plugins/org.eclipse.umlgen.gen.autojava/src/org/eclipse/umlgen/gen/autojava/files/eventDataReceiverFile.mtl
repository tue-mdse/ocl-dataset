[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012, 2014 CNES and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Cedric Notot (Obeo) - initial API and implementation
[/comment]

[module eventDataReceiverFile('http://www.eclipse.org/uml2/5.0.0/UML','http://www.eclipse.org/umlgen/dsl/asl','http://www.eclipse.org/umlgen/dsl/eth')]

[import org::eclipse::umlgen::gen::autojava::specific::port /]
[import org::eclipse::umlgen::gen::autojava::specific::lib::type /]
[import org::eclipse::umlgen::gen::autojava::requests::common /]
[import org::eclipse::umlgen::gen::autojava::services::rtsjServices /]
[import org::eclipse::umlgen::gen::autojava::services::utilServices /]
[import org::eclipse::umlgen::gen::autojava::common::common /]

[template public genEventDataReceiverBody(anInterface : Interface, aPort : Port)]
[aPort.genFilePath().genPackageDeclaration()/]

import [anInterface.genPackagePath()/].[anInterface.name/];
import org.eclipse.umlgen.rtsj.framework.*;
import org.eclipse.umlgen.rtsj.framework.types.*;
[for (aType : Type | minimize(anInterface.getAllReceptions().get('ownedElement')->filter(Property)->select(aProp : Property | aProp.type <> null and not aProp.type.isJavaPrimitive() and not aProp.type.oclIsKindOf(Enumeration)).type)->filter(Type))]
import [aType.genDecoratorPackagePath() + '.' +  aType.genName()/];
[/for]
[for (anOperation : Reception | anInterface.getAllReceptions()->select(aRecep : Reception | aRecep.signal <> null))]
	[for (aProperty : Property | anOperation.signal.get('ownedAttribute')->filter(Property)->select(aProp : Property | not aProp.type.isJavaPrimitive() and not aProp.type.oclIsKindOf(Enumeration)))]
import [aProperty.type.genDecoratorPackagePath() + '.' + aProperty.genType()/];
	[/for]
[/for]

public class [aPort.genClassPortName(anInterface, 'Receiver','EventData')/] implements EventDataPort {

	String ident;
[for (anOperation : Reception | anInterface.getAllReceptions()->select(aRecep : Reception | aRecep.signal <> null))]
	ArgsBuffer [anOperation.genName()/]Buffer;
[/for]
[for (anOperation : Reception | anInterface.getAllReceptions()->select(aRecep : Reception | aRecep.signal <> null))]
	[anOperation.signal.get('ownedAttribute')->filter(Property)->first().genType()/] [anOperation.genName()/]Param;
[/for]
	CommunicationLayer communicationLayer;

	public [aPort.genClassPortName(anInterface, 'Receiver','EventData')/](String ident, CommunicationLayer communicationLayer) {
		this.ident = ident;
	[for (anOperation : Reception | anInterface.getAllReceptions()->select(aRecep : Reception | aRecep.signal <> null))]
		[anOperation.genName()/]Buffer = new ArgsBuffer([anOperation.getEventDataSize() * anOperation.signal.computeSignalSize()/]);
	[/for]
	[for (anOperation : Reception | anInterface.getAllReceptions()->select(aRecep : Reception | aRecep.signal <> null and not aRecep.signal.get('ownedAttribute')->filter(Property)->first().type.isJavaPrimitive()))]
		[anOperation.genName()/]Param = new [anOperation.signal.get('ownedAttribute')->filter(Property)->first().genType()/]();
	[/for]
		this.communicationLayer = communicationLayer;
	}

[for (anOperation : Reception | anInterface.getAllReceptions()->select(aRecep : Reception | aRecep.signal <> null))]
	/**
	 * Delinearization of data if received.
	 * 
	 * @return data delinearized or stocked data by default
	 */
	public [anOperation.signal.get('ownedAttribute')->filter(Property)->first().genType()/] get[anOperation.name.toUpperFirst()/]() {	
		if (this.hasReceived[anOperation.name.toUpperFirst()/]()) {
			synchronized ([anOperation.genName()/]Buffer) {	
			[if (anOperation.signal.get('ownedAttribute')->filter(Property)->first().type.genBufferType() = 'Object')]
				[anOperation.genName()/]Param.readObject([anOperation.genName()/]Buffer);
			[else]
				[anOperation.genName()/]Param = [anOperation.genName()/]Buffer.read[anOperation.signal.get('ownedAttribute')->filter(Property)->first().type.genBufferType()/]();
			[/if]		
			}
		}
		return [anOperation.genName()/]Param;
	}
	/**
	 * @return stocked data
	 */
	public [anOperation.signal.get('ownedAttribute')->filter(Property)->first().genType()/] getPrevious[anOperation.name.toUpperFirst()/]() {	
		return [anOperation.genName()/]Param;
	}
	/**
	 * Test if data has been received in buffer.
	 * 
	 * @return true if buffer contains data
	 */
	public boolean hasReceived[anOperation.name.toUpperFirst()/]() {
		boolean result = false;
		synchronized ([anOperation.genName()/]Buffer) {
			result = ![anOperation.genName()/]Buffer.check([anOperation.genName()/]Buffer.getSize());
		}
		return result;
	}
[/for]

	public void store(String sig, ArgsBuffer param) throws ServiceNotFoundException {
[if (anInterface.getAllReceptions()->size() > 0)]
	[for (anOperation : Reception | anInterface.getAllReceptions()->select(aRecep : Reception | aRecep.signal <> null))]
		[if (i > 1)]} else [/if]if (sig.equals("[anOperation.name/]")) {
			synchronized ([anOperation.genName()/]Buffer) {
				if (![anOperation.genName()/]Buffer.check(param.getUsed())) {
					[anOperation.genName()/]Buffer.dequeue(param.getUsed());
				}
				[anOperation.genName()/]Buffer.copy(param);
			}
	[/for]	
		} else {
			throw new ServiceNotFoundException();
		}
[else]
		throw new ServiceNotFoundException();
[/if]
	}
	
}
[/template]
