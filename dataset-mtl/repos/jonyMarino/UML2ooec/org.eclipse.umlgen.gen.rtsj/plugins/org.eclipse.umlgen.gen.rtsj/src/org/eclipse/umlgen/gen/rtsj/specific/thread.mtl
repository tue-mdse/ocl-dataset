[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012, 2015 CNES and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Cedric Notot (Obeo) - initial API and implementation
 *     JF Rolland (ATOS) - implementation of rtsj specific generation
[/comment]

[module thread('http://www.eclipse.org/uml2/5.0.0/UML') extends org::eclipse::umlgen::gen::autojava::specific::thread]

[import org::eclipse::umlgen::gen::autojava::specific::lib::common /]
[import org::eclipse::umlgen::gen::autojava::specific::lib::requests::common /]
[import org::eclipse::umlgen::gen::autojava::specific::lib::feature/]
[import org::eclipse::umlgen::gen::autojava::requests::common /]
[import org::eclipse::umlgen::gen::autojava::services::utilServices /]
[import org::eclipse::umlgen::gen::autojava::services::umlServices /]
[import org::eclipse::umlgen::gen::autojava::common::common /]

[comment generates thread info /]
[template public genThreadInfo(aClass : Class) overrides genThreadInfo]
[if (aClass.isSporadic() and not aClass.hasBeforeOperation())]

	[if (getProperty('gen.annotations') = 'true')]
@ignore
	[/if]
public void before() {
	// [protected ('for method '.concat(aClass.genName()).concat('.before():'))]
	
	// [/protected] 
}
[/if]
[if (aClass.isSporadic() and not aClass.hasAfterOperation())]

	[if (getProperty('gen.annotations') = 'true')]
@ignore
	[/if]
public void after() {
	// [protected ('for method '.concat(aClass.genName()).concat('.after():'))]
	
	// [/protected] 
}
[/if]

[aClass.genThreadAttribute()/]

[aClass.genThreadRTInfo()/]

[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public void schedule() { thread.schedule(); }
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public void deschedule() { thread.deschedule(); }

[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public void start() { thread.start(); }

[aClass.genStartAll()/]

[for (anOp : Operation | aClass.get('ownedOperation')->filter(Operation)->select(op : Operation | op.name.equalsIgnoreCase('body')))]
[anOp.genMethodComment()/]
[/for]
[comment Generate not abstract method (with body) /]
[for (anOp : Operation | aClass.get('ownedOperation')->filter(Operation)->select(op : Operation | op.name.equalsIgnoreCase('body')))]
[genMethodAnnotation()/]
[/for]
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public void body() {
[for (anOp : Operation | aClass.get('ownedOperation')->filter(Operation)->select(op : Operation | op.name.equalsIgnoreCase('body')))]
[genMethodOldAnnotation()/]
[/for]
	[aClass.genBody()/]
}

[for (anOp : Operation | aClass.get('ownedOperation')->filter(Operation)->select(op : Operation | op.name.equalsIgnoreCase('init')))]
[anOp.genMethodComment()/]
[/for]
[for (anOp : Operation | aClass.get('ownedOperation')->filter(Operation)->select(op : Operation | op.name.equalsIgnoreCase('init')))]
[genMethodAnnotation()/]
[/for]
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public void init() {
[for (anOp : Operation | aClass.get('ownedOperation')->filter(Operation)->select(op : Operation | op.name.equalsIgnoreCase('init')))]
[genMethodOldAnnotation()/]
[/for]
	// [protected ('for method '.concat(genName()).concat('.init():'))]

	// [/protected] 
}
[if (aClass.isAperiodic() or aClass.isSporadic())]

[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public void catchCommunicationException(String service, ArgsBuffer params) {
	// [protected ('for method '.concat(genName()).concat('.catchCommunicationException(String,Argsbuffer):'))]
	//TODO Fill Method
	// [/protected] 
}
[/if]
[/template]

[comment generates thread import /]
[template public genThreadImport(aClass : Class) overrides genThreadImport]
[if (isAperiodic() or isSporadic())]
// import javax.realtime.*;
// import AperiodicRealtimeEntry;
// import AperiodicRealtimeComponent;
[/if]
[if (isPeriodic())]
// import javax.realtime.*;
// import PeriodicRealtimeEntry;
// import PeriodicRealtimeComponent;
[/if]
[if (isSynchronized())]
// import javax.realtime.MonitorControl;
// import javax.realtime.PriorityInheritance;
[/if]
[/template]

[template protected genThreadAttribute(aClass : Class) overrides genThreadAttribute]
[if (isPeriodic())]
	[if (getProperty('gen.annotations') = 'true')]
@ignore
	[/if]
private PeriodicRealtimeComponent thread = new PeriodicRealtimeComponent(this);
[elseif (isAperiodic() or isSporadic())]
	[if (getProperty('gen.annotations') = 'true')]
@ignore
	[/if]
private AperiodicRealtimeComponent  thread = new AperiodicRealtimeComponent (this);
[else]
	[if (getProperty('gen.annotations') = 'true')]
@ignore
	[/if]
private final Object thread = new Object();
[/if]
[/template]

[template protected genThreadRTInfo(aClass : Class) overrides genThreadRTInfo]
[if (isPeriodic())]
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public int getThreadPeriod() { return [genPeriodicPeriod()/]; }
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public int getThreadPhase() { return [genPeriodicPhase()/]; }
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public Object getThread() { return null; }
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public int getThreadPriority() { return [genPeriodicPriority()/]; }
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public PortBuffer getPbuffer() { return pbuffer; }
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public PeriodicParameters getPeriodicParameters() {
	return new PeriodicParameters(
		new RelativeTime([genPeriodicPhase()/], 0), // phase
		new RelativeTime([genPeriodicPeriod()/], 0), // period
		new RelativeTime([genPeriodicWcet()/], 0), // wcet
		new RelativeTime([genPeriodicDeadline()/], 0), // deadline
		null, null);
}

[/if]
[if (isSporadic())]
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public int getThreadPeriod() { return [genSporadicPeriod()/]; }
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public int getThreadPhase() { return [genSporadicPhase()/]; }
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public Object getThread() { return thread; }
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public int getThreadPriority() { return [genSporadicPriority()/]; }
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public PortBuffer getPbuffer() { return pbuffer; }
[/if]
[if (isAperiodic())]
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public Thread getThread() { return thread; }
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public int getThreadPriority() { return [genAperiodicPriority()/]; }
[/if]
[/template]

[template protected genStartAll(aClass: Class) overrides genStartAll]
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public void start_all() {
	[if (feature->filter(Connector)->notEmpty())]
	makeConnections();
	[/if]
	[for (get('attribute')->filter(Property))]
	[if (not type.oclIsUndefined() and type.oclIsKindOf(Class) and type.oclAsType(Class).isActive)]
	[name/].start_all();
	[/if]
	[/for]
	init();
	start();
}
[/template]