[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2015 Spacebel SA.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Johan Hardy (Spacebel) - initial API and implementation
[/comment]
[module operations('http://www.eclipse.org/uml2/5.0.0/UML')/]
[import org::eclipse::umlgen::gen::embedded::c::commons::type/]
[import org::eclipse::umlgen::gen::embedded::c::commons::namedelement /]

[query public getNotAbstract(seq : Sequence(uml::Operation)) : Sequence(uml::Operation) =  
seq->select(op : uml::Operation | not(op.isAbstract))->asSequence()/]

[query public getAbstract(seq : Sequence(uml::Operation)) : Sequence(uml::Operation) =  
seq->select(op : uml::Operation | (op.isAbstract))->asSequence()/]

[query public getStatic(seq : Sequence(uml::Operation)) : Sequence(uml::Operation) =  
seq->select(op : uml::Operation | (op.isStatic))-> asSequence()/]

[query public getNotStatic(seq : Sequence(uml::Operation)) : Sequence(uml::Operation) =  
seq->select(op : uml::Operation | not (op.isStatic))->asSequence()/]

[query public isPrivate(op : uml::Operation) : Boolean = 
(visibility = VisibilityKind::private)/]

[query public isPublic(op : uml::Operation) : Boolean = 
(visibility = VisibilityKind::public)/]

[query public getPrivate(seq : Sequence(uml::Operation)) : Sequence(uml::Operation) =  
seq->select(op : uml::Operation | op.isPrivate())->asSequence()/]

[query public getNotPrivate(seq : Sequence(uml::Operation)) : Sequence(uml::Operation) =  
seq->select(op : uml::Operation | not(op.isPrivate()))->asSequence()/]

[query public getPublic(seq : Sequence(uml::Operation)) : Sequence(uml::Operation) =  
seq->select(op : uml::Operation | op.isPublic())->asSequence()/]

[query public getNotPublic(seq : Sequence(uml::Operation)) : Sequence(uml::Operation) =  
seq->select(op : uml::Operation | not(op.isPublic()))->asSequence()/]

[query public getType(op : uml::Operation) : String = 
if type.oclIsUndefined() then 'void'
else type.getType()
endif
/]

[query public isInline(o : uml::Operation) : Boolean = 
if o.hasStereotype('embedded_C::Inline') then true
else false 
endif
/]

[query public isAsm(o : uml::Operation) : Boolean = 
if o.hasStereotype('embedded_C::asm') then true
else false 
endif
/]

[query public getInline(seq : Sequence(uml::Operation)) : Sequence(uml::Operation) =  
seq->select(op : uml::Operation | op.isInline())->asSequence()/]

[query public getNotInline(seq : Sequence(uml::Operation)) : Sequence(uml::Operation) =  
seq->select(op : uml::Operation | not(op.isInline()))->asSequence()/]

[query public isConditional(o : uml::Operation) : Boolean = 
if o.hasStereotype('embedded_C::Inline') then not(o.getValue(o.getAppliedStereotype('embedded_C::Inline'), 'Condition').oclAsType(uml::EnumerationLiteral).name = 'None')
else true 
endif
/]

[query public getInlineCondition(o : uml::Operation) : String = 
if o.hasStereotype('embedded_C::Inline') then o.getValue(o.getAppliedStereotype('embedded_C::Inline'), 'Condition').oclAsType(uml::EnumerationLiteral).name
else ''
endif
/]

[query public getValueCondition(o : uml::Operation) : String = 
if o.hasStereotype('embedded_C::Inline') then o.getValue(o.getAppliedStereotype('embedded_C::Inline'), 'Value')
else o.name
endif
/]

[query public getVirtual(seq : Sequence(uml::Operation)) : Sequence(uml::Operation) =  
seq->select(op : uml::Operation | op.isVirtual())->asSequence()/]

[query public getNotVirtual(seq : Sequence(uml::Operation)) : Sequence(uml::Operation) =  
seq->select(op : uml::Operation | not(op.isVirtual()))->asSequence()/]

[comment][query public isVirtual(o : uml::Operation) : Boolean = 
if o.hasStereotype('embedded_C::Virtual') then true
else false 
endif
/][/comment]

[query public isVirtual(o : uml::Operation) : Boolean = 
if o.isLeaf then false
else true 
endif
/]
