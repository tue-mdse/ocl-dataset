[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2015 Spacebel SA.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Johan Hardy (Spacebel) - initial API and implementation
[/comment]
[module enumeration('http://www.eclipse.org/uml2/5.0.0/UML')/]
[import org::eclipse::umlgen::gen::embedded::c::commons::datatype/]
[import org::eclipse::umlgen::gen::embedded::c::commons::namedelement/]
[import org::eclipse::umlgen::gen::embedded::c::commons::enumerationliteral/]
[import org::eclipse::umlgen::gen::embedded::c::commons::constraint/]
[import org::eclipse::umlgen::gen::embedded::c::services::configuration/]
[import org::eclipse::umlgen::gen::embedded::c::services::queries/]

[template private genEnumLiteral(seq : Sequence(uml::NamedElement)) post(trim())]
[for (el : uml::NamedElement | seq->orderByContents())]
[el.oclAsType(uml::EnumerationLiteral).name/][if (el.oclAsType(uml::EnumerationLiteral).hasValue())] = [el.oclAsType(uml::EnumerationLiteral).getValue()/][/if][if not(seq->orderByContents()->last() = el)],[/if][if not(el.oclAsType(uml::EnumerationLiteral).ownedComment->isEmpty())] /**< [el.oclAsType(uml::EnumerationLiteral).ownedComment._body.trim()/] */[/if]
[/for]
[/template]

[template public genEnum(e : uml::Enumeration) ? (isTypedef())]
[if ownedComment->notEmpty()]
/*! 
 * [ownedComment.format('\x5cbrief ', false, ' *        ', 120)/]
[if (isTraceabilityEnabled())]
[if (e.isConstrained(getModel().getAllConstraints()))]
 *
 * <b>Requirements traceability</b>
 [e.getRequirementList('*     ')/]
[/if]
[/if]
 */
[/if]
enum [name/]
{
[let seq : Sequence(uml::NamedElement) = ownedElement->asSequence()->filter(uml::EnumerationLiteral)]
    [seq->genEnumLiteral()/]
[/let]
};
typedef [getMappedType()/] [name/];

[/template]

[template public genEnum(e : uml::Enumeration) ? (isNotTypedef())]
[if ownedComment->notEmpty()]
/*! 
 * [ownedComment.format('\x5cbrief ', false, ' *        ', 120)/]
[if (isTraceabilityEnabled())]
[if (e.isConstrained(getModel().getAllConstraints()))]
 *
 * <b>Requirements traceability</b>
 [e.getRequirementList('*     ')/]
[/if]
[/if]
 */
[/if]
typedef enum [name/]
{
[let seq : Sequence(uml::NamedElement) = ownedElement->asSequence()->filter(uml::EnumerationLiteral)]
    [seq->genEnumLiteral()/]
[/let]
} [name/];

[/template]
