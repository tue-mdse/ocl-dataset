[comment encoding = UTF-8 /]
[module DescriptionFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::eclipse::umlgen::gen::embedded::c::commons::class /]
[import org::eclipse::umlgen::gen::embedded::c::commons::method /]
[import org::eclipse::umlgen::gen::embedded::c::commons::operations /]
[import org::eclipse::umlgen::gen::embedded::c::commons::property /]
[import org::eclipse::umlgen::gen::embedded::c::commons::namedelement /]
[import org::eclipse::umlgen::gen::embedded::c::templates::methods /]
[import org::eclipse::umlgen::gen::embedded::c::templates::properties /]
[comment][import org::eclipse::umlgen::gen::embedded::c::templates::properties /][/comment]

[query public reqOutgoingNavigableOwnedEnd(aClass : Class) : Set(Property)
   = reqSelfAssociationsNavigableOwnedEnd(aClass)
      ->union(reqOtherAssociationsNavigableOwnedEnd(aClass))->asOrderedSet()
/]

[query private reqSelfAssociationsNavigableOwnedEnd(aClass : Class) : Set(Property)
   = aClass.getAssociations()->select(ownedEnd.type->asSet()->size() = 1).navigableOwnedEnd->asOrderedSet()
/]

[query private reqOtherAssociationsNavigableOwnedEnd(aClass : Class) : Set(Property)
   = aClass.getAssociations()->select(navigableOwnedEnd->select(type <> aClass)->size() = 1).navigableOwnedEnd->select(type <> aClass)->asOrderedSet()
/]

[template public generate_descriptionFile(aClass : Class)]

[comment archivo de informacion protegida /]
#ifndef [aClass.name.toUpper()/]_PROTECTED_H
#define [aClass.name.toUpper()/]_PROTECTED_H


#include "[aClass.getSuperClasses().name/]_protected.h"

//[protected ('Ingresa tus archivos a incluir aqui')]
//#include ...
//[/protected]

//Class [aClass.name.toUpperFirst()/] declaration
struct [aClass.name.toUpperFirst()/]{
	const struct [aClass.getSuperClasses().name/] _;
	[let seq : Sequence(uml::NamedElement) = getNotReadOnly(getHasTypeApplied(getNotUsesStaticMethods(ownedAttribute->asSequence())))]
	[for (n : uml::NamedElement | seq->orderByContents())]
	[n.oclAsType(uml::Property).generateProperty()/]; 
	[/for]	
	[/let]
};

//MetaClass for class [aClass.name.toUpperFirst()/] declaration
struct [aClass.name.toUpperFirst()/]Class{
	const struct [aClass.getSuperClasses().name/]Class _;
	[for (o : Operation | aClass.ownedOperation->reject(o:Operation | aClass.getSuperClasses().allNotFinalOperations()->exists(redefine(o))))  ]
	[if o.isVirtual()]
	[o.generateReturnType()/] (*[o.name/])[generateAllParameters(o,'')/]; 
	[/if]
	[/for]
};

extern const struct [aClass.name.toUpperFirst()/]Class _[aClass.name.toUpperFirst()/];

[generateDynamicMethodDeclaration()/]

[generateMethodDeclarationsNotFinal(VisibilityKind::protected)/]

[generateMethodDeclarationsFinal(VisibilityKind::protected)/]

[generateNotRedifinedMethods()/]

[generateSuperMethodsDeclaration()/]

#endif
[/template]
