[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2015 Spacebel SA.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Johan Hardy (Spacebel) - initial API and implementation
[/comment]
[module enumerationliteral('http://www.eclipse.org/uml2/5.0.0/UML')/]
[import org::eclipse::umlgen::gen::embedded::c::commons::namedelement/]

[query public getAllConstants(seq : Sequence(uml::EnumerationLiteral)) : Sequence(uml::EnumerationLiteral) =  
seq->select(e : uml::EnumerationLiteral | (hasStereotype(e, 'embedded_C::Constant')))->asSequence()/]

[query public getConstantDeclaration(e : uml::EnumerationLiteral) : String = 
e.getValue(e.getAppliedStereotype('embedded_C::Constant'), 'Declaration').toString()/]

[query public isConditional(e : uml::EnumerationLiteral) : Boolean = 
if e.hasStereotype('embedded_C::Constant') then not(e.getValue(e.getAppliedStereotype('embedded_C::Constant'), 'Condition').oclAsType(uml::EnumerationLiteral).name = 'None')
else true 
endif
/]

[query public getConstantCondition(e : uml::EnumerationLiteral) : String = 
if e.hasStereotype('embedded_C::Constant') then e.getValue(e.getAppliedStereotype('embedded_C::Constant'), 'Condition').oclAsType(uml::EnumerationLiteral).name
else ''
endif
/]

[query public hasValue(e : uml::EnumerationLiteral) : Boolean = e.hasStereotype(e, 'embedded_C::Value')/]

[query public getValue(e : uml::EnumerationLiteral) : String = 
e.getValue(e.getAppliedStereotype('embedded_C::Value'), 'Value').toString()/]

[query public hasAtLeastOneConstant(e : uml::Enumeration) : Boolean = 
not(e.ownedLiteral->asSequence()->getAllConstants()->isEmpty())/]

[query public hasNoConstant(e : uml::Enumeration) : Boolean = 
e.ownedLiteral->asSequence()->getAllConstants()->isEmpty()/]
