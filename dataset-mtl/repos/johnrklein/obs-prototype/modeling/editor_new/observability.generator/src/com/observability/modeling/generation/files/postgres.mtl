
[comment encoding = UTF-8 /]
[**
 * The documentation of the module cassandra.
 */]
[module postgres('http://www.observability.com/emf')]
[import com::observability::modeling::generation::files::systemMetrics/]
[import com::observability::modeling::generation::files::notifications /]
[**
 * The documentation of the template generateCassandra.
 * @param aNodeMachine
 */]
[template public generatePostgres(aCluster : DatabaseCluster, frequency : Integer)]

[for (machine : NodeMachine | aCluster.machines)]

[file ( machine.IP + '_' + machine.Port + '_collectd.conf' , false, 'UTF-8')]
Interval [frequency/]
Hostname [machine.IP/]

[machine.generateSystemMetrics(aCluster)/]

LoadPlugin "network"
<Plugin "network">
  Server "[aCluster.eContainer(Model).serverIP/]"
</Plugin>


[aCluster.generateNotifications(machine)/]

LoadPlugin postgresql

<Plugin postgresql>

	[for (metric : Metric | aCluster.collectedMetrics)]
		[if metric.oclIsKindOf(BaseMetric) and  metric.type.strcmp('DATABASE') = 0]
			[let element : Element = metric.elements->at(1)]
<Query [element.value/]>
				[for (kv : KeyValue | element.keyValues)]
	[kv.key/] [kv.value/]
				[/for]
				
				[for (e : Element | element.elements)]
	<[e.name/] [e.value/]>
					[for (kv : KeyValue | e.keyValues)]
		[kv.key/] [kv.value/]
					[/for]
	</[e.name/]>
				[/for]

				[for (e:Element | machine.elements)]
					[if e.name.strcmp(element.name) = 0]
						[for (kv : KeyValue | e.keyValues)]
	[kv.key/] [kv.value/]
						[/for]		
					[/if]
				[/for]
			[/let]
</Query>
		[/if]
	[/for]

	
  [for (element : Element | machine.elements)]
	[if element.name.startsWith('Database')]
<Database [element.value/]>
	  [for (keyValue : KeyValue | element.keyValues)]
   [keyValue.key/] [keyValue.value/]
	  [/for]
	  [for (m : Metric | aCluster.collectedMetrics) ]
	  	[if m.oclIsKindOf(BaseMetric) and m.type.strcmp('DATABASE')=0]
   Query "[m.elements->at(1).value/]"		
		[/if]
	
	  [/for]	  	
</Database>
	[/if]
  [/for]
    
  </Plugin>
[/file]
[/for]
[/template]