
[comment encoding = UTF-8 /]
[**
 * The documentation of the module cassandra.
 */]
[module redis('http://www.observability.com/emf')]
[import com::observability::modeling::generation::files::systemMetrics]
[import com::observability::modeling::generation::files::notifications /]
[**
 * The documentation of the template generateCassandra.
 * @param aNodeMachine
 */]
[template public generateRedis(aCluster : DatabaseCluster, frequency : Integer)]

[for (machine : NodeMachine | aCluster.machines)]

	[file ( machine.IP + '_' + machine.Port + '_collectd.conf' , false, 'UTF-8')]
Interval [frequency/]
Hostname [machine.IP/]

[machine.generateSystemMetrics(aCluster)/]

<LoadPlugin python> 
      Globals true 
</LoadPlugin>

LoadPlugin "network"
<Plugin "network">
  Server "[aCluster.eContainer(Model).serverIP/]"
</Plugin>

[aCluster.generateNotifications(machine)/]


<Plugin python>
  	ModulePath "/opt/collectd/lib/collectd/plugins/python"
  	Import "redis_info"
	
	<Module redis_info>
	  	[for (keyValue : KeyValue | machine.keyValues)]
		[keyValue.key/] [keyValue.value/]
	 	[/for]
	
		[for (metric : Metric | aCluster.collectedMetrics)]
			[if metric.oclIsKindOf(BaseMetric) and metric.type.strcmp('DATABASE') = 0]
	
				[for (keyValue : KeyValue | metric.keyValues)]
		[keyValue.key/] [keyValue.value/]
	 			[/for]

			[/if]
		[/for]
	</Module>
    
  </Plugin>
	[/file]
[/for]
[/template]