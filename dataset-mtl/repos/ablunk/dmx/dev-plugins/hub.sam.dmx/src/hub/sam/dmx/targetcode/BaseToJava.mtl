[comment encoding = UTF-8 /]
[module BaseToJava('platform:/resource/hub.sam.dmx/resources/dbl.ecore','http://www.eclipse.org/emf/2002/Ecore')/]

[template public baseToJava(model : Model)]
[comment @main /]

[for (mod : Module | model.modules)]
	[if (mod.procedures->notEmpty() or mod.variables->notEmpty())]
		[genGlobalElements(mod)/]
	[/if]

	[genClasses(mod)/]

	[file ('JavaMain.java', false, 'UTF-8')]
		//package hub.sam.dmx.extensions;

		public class JavaMain {
			public static void main(String['['/][']'/] args) {
				long startTime = System.nanoTime();

				[genStartSimulationStatement(model)/]

				long estimatedTime = System.nanoTime() - startTime;
				long ms = estimatedTime / (1000 * 1000);
				System.out.println("Execution time: " + ms / 1000.0 + " seconds");

				Runtime runtime = Runtime.getRuntime();
				long memory = runtime.totalMemory() - runtime.freeMemory();
				System.out.println("Memory Usage: " +  memory/1024.0/1024 + " MB");

				System.exit(0);
			}
		}
	[/file]
[/for]	
[/template]

[template public genClasses(mod : Module)]
	[for (classifier : Classifier | mod.classifiers)]
		[genClassifier(classifier)/]
	[/for]
[/template]

[template public genClassifier(classifier : Classifier)]
	<!-- unknown classifier >
[/template]

[query private getSimLib() : String = 
    invoke('hub.sam.dmx.TransformationProperties', 'getSimLib()', Sequence {})
/]

[query private getNextTransformationUniqueNumber() : String = 
    invoke('hub.sam.dmx.TransformationProperties', 'getNextTransformationUniqueNumber()', Sequence {})
/]

[template public genSimLibUnknownFile(fileName : String)]
	[file (fileName + '.java', false, 'UTF-8')]
		<!-- Simulation library '[getSimLib()/]' is unknown. -->
	[/file]
[/template]

[template public genSimLibUnknownMsg(oclAny : OclAny)]
	<!-- Simulation library '[getSimLib()/]' is unknown in transformation of [oclAny.eClass()/]. -->
[/template]

[template public genProcedure(procedure : Procedure)]
	[genType(procedure)/] [procedure.name/](
		[for (param : Parameter | procedure.parameters) separator (',')]
			[genType(param)/] [param.name/]
		[/for]
	) {
		[for (stm : Statement | procedure.statements)]
			[genStatement(stm)/]
		[/for]
	}	
[/template]

[comment STATEMENTS /]

[template public genStatement(stm : Statement)]
	[genStatement(stm, false)/]
[/template]

[template public genStatement(stm : Statement, extensionSemantics : Boolean)]
	<! unsupported statement [stm.eClass().name/] !>
[/template]

[template public genStatement(stm : ExpressionStatement, extensionSemantics : Boolean)]
	[genStatementExpression(stm.expression, extensionSemantics)/];
[/template]

[template public genStatementExpression(stmExpr : StatementExpression, extensionSemantics : Boolean)]
	<! unsupported statement [stmExpr.eClass().name/] !>
[/template]

[template public genStatementExpression(stmExpr : ProcedureCall, extensionSemantics : Boolean)]
	[genExpression(stmExpr.procedureAccess, extensionSemantics)/]
[/template]

[template public genStatement(stm : Print, extensionSemantics : Boolean)]
	System.out.print([for (expr : Expression | stm.outputs) separator ('+')] [genExpression(expr, extensionSemantics)/] [/for]);
[/template]

[template public genStatement(stm : IfStatement, extensionSemantics : Boolean)]
	if ([genExpression(stm.condition, extensionSemantics)/]) {
		[for (bodyStm : Statement | stm.ifCaseBlock.statements)]
			[genStatement(bodyStm, extensionSemantics)/]
		[/for]
	}
	[for (elseIfBlock : CodeBlock | stm.elifCaseBlock)]
	else if([genExpression(stm.elifCondition->at(stm.elifCaseBlock->indexOf(elseIfBlock)), extensionSemantics)/]) {
		[for (bodyStm : Statement | elseIfBlock.statements)]
			[genStatement(bodyStm, extensionSemantics)/]
		[/for]
	}
	[/for]
	[if (not stm.elseCaseBlock.oclIsUndefined())]
	else {
		[for (bodyStm : Statement | stm.elseCaseBlock.statements)]
			[genStatement(bodyStm, extensionSemantics)/]
		[/for]
	}
	[/if]
[/template]

[template public genStatement(stm : Assignment, extensionSemantics : Boolean)]
	[genExpression(stm.variable, extensionSemantics)/] = [genExpression(stm.value, extensionSemantics)/];
[/template]

[template public genStatement(stm : Return, extensionSemantics : Boolean)]
	return [genExpression(stm.value, extensionSemantics)/];
[/template]

[template public genStatement(stm : AddToSet, extensionSemantics : Boolean)]
	[genExpression(stm.set, extensionSemantics)/].add(
		[if (not stm.atIndex.oclIsUndefined())]
			(int) [genExpression(stm.atIndex, extensionSemantics)/],
		[/if]
		[genExpression(stm.object, extensionSemantics)/]
	);
[/template]

[template public genStatement(stm : RemoveFromSet, extensionSemantics : Boolean)]
	[genExpression(stm.set, extensionSemantics)/].remove([genExpression(stm.object, extensionSemantics)/]);
[/template]

[template public genStatement(stm : EmptySet, extensionSemantics : Boolean)]
	[genExpression(stm.set, extensionSemantics)/].clear();
[/template]

[template public genStatement(stm : BreakStatement, extensionSemantics : Boolean)]
	break;
[/template]

[template public genStatement(stm : ContinueStatement, extensionSemantics : Boolean)]
	continue;
[/template]

[template public genStatement(stm : Variable, extensionSemantics : Boolean)]
	[genType(stm)/] [stm.name/]
	[if (not stm.initialValue.oclIsUndefined())]
		= [genExpression(stm.initialValue, extensionSemantics)/]
	[elseif (stm.isList)]
		[if (stm.listDims->size() = 1)]
			[let ldim1 : ListDimension = stm.listDims->at(1)]
				[if (ldim1.size > 0)]
					= new [genTypeNoWrapOfListPrimitives(ldim1)/]['['/][ldim1.size/][']'/] 
				[else]
					= new java.util.ArrayList<[genTypeWrapListPrimitives(ldim1)/]>()	
				[/if]
			[/let]
		[/if]
	[elseif (not stm.classifierTypeExpr.oclIsUndefined())]
		= null;
	[/if]
	;
[/template]

[template public genStatement(stm : ForEachStatement, extensionSemantics : Boolean)]
	[if (not stm.iteratorVariableDefinition.oclIsUndefined())]
		for ([genType(stm.iteratorVariableDefinition)/] [stm.iteratorVariableDefinition.name/]
			: [genExpression(stm.iterableExpression, extensionSemantics)/]) {
			[for (fstm : Statement | stm.forBlock.statements)]
				[genStatement(fstm, extensionSemantics)/]
			[/for]
		}
	[elseif (not stm.iteratorVariableReference.oclIsUndefined())]
		[let it : String = genExpression(stm.iterableExpression, extensionSemantics).toString().trim().concat('_it')]
			java.util.Iterator<
				[if (stm.iterableExpression.oclIsTypeOf(IdExpr))]
					[genTypeWrapListPrimitives(stm.iterableExpression.oclAsType(IdExpr).referencedElement.oclAsType(TypedElement))/]
				[/if]
				> 
				[it/] = [genExpression(stm.iterableExpression, extensionSemantics)/].iterator();
			while ([it/].hasNext()) {
				[genExpression(stm.iteratorVariableReference, extensionSemantics)/] = [it/].next();
				[for (fstm : Statement | stm.forBlock.statements)]
					[genStatement(fstm, extensionSemantics)/]
				[/for]
			}
		[/let]
	[/if]
[/template]

[template public genStatement(stm : WhileStatement, extensionSemantics : Boolean)]
	while ([genExpression(stm.condition, extensionSemantics)/]) {
		[for (bstm : Statement | stm.whileBlock.statements)]
			[genStatement(bstm, extensionSemantics)/]
		[/for]
	}
[/template]

[template public genStatement(stm : ResetGenContextStatement, extensionSemantics : Boolean)]
	resetGenContext();
[/template]

[template public genStatement(stm : SetGenContextStatement, extensionSemantics : Boolean)]
	setGenContext([genExpression(stm._context, extensionSemantics)/], [stm.addAfterContext/]);
[/template]

[template public genStatement(stm : MappingStatement, extensionSemantics : Boolean)]
	[for (part : MappingPart | stm.parts) before ('gen(') separator ('+') after (');')]
		[genMappingPart(part)/]
	[/for]
[/template]

[template public genMappingPart(part : MappingPart)]
[/template]

[template public genMappingPart(part : FixedMappingPart)]
	[genJavaString(part.code)/]
[/template]

[template public genMappingPart(part : DynamicMappingPart)]
	[genExpression(part.expr, true)/]
[/template]

[comment TYPES /]

[template public genType(typedElement : TypedElement)]
	[if (typedElement.isList)]
		[if (typedElement.listDims->size() = 1)]
			[let ldim1 : ListDimension = typedElement.listDims->at(1)]
				[if (ldim1.size > 0)]
					[comment map to array when the size is given /]
					[genTypeNoWrapOfListPrimitives(ldim1)/]['['/][']'/]
				[else]
					java.util.List<[genTypeWrapListPrimitives(ldim1)/]>
				[/if]
			[/let]
		[/if]
	[else]
		[genTypeNoWrapOfListPrimitives(typedElement)/]
	[/if]
[/template]

[template public genTypeNoWrapOfListPrimitives(typedElement : TypedElement)]
	[if (not typedElement.primitiveType.oclIsUndefined())]
		[genType(typedElement.primitiveType)/]
	[else]
		[genClassifierTypeExpr(typedElement.classifierTypeExpr)/]
	[/if]
[/template]

[template public genTypeWrapListPrimitives(typedElement : TypedElement)]
	[if (not typedElement.primitiveType.oclIsUndefined())]
		[genWrappedType(typedElement.primitiveType)/]
	[else]
		[genClassifierTypeExpr(typedElement.classifierTypeExpr)/]
	[/if]
[/template]

[template public genType(type : Type)]
	<! unsupported type [type.eClass().name/] !>
[/template]

[template public genType(type : IntType)]
	long
[/template]

[template public genType(type : VoidType)]
	void
[/template]

[template public genType(type : StringType)]
	String
[/template]

[template public genType(type : BoolType)]
	boolean
[/template]

[template public genType(type : DoubleType)]
	double
[/template]

[template public genWrappedType(type : Type)]
	<! unsupported wrapped type [type.eClass().name/] !>
[/template]

[template public genWrappedType(type : IntType)]
	Long
[/template]

[template public genWrappedType(type : VoidType)]
	void
[/template]

[template public genWrappedType(type : StringType)]
	String
[/template]

[template public genWrappedType(type : BoolType)]
	Boolean
[/template]

[template public genWrappedType(type : DoubleType)]
	Double
[/template]

[template public genClassifierTypeExpr(typeExpr : IdExpr)]
	[let namedElement : NamedElement = typeExpr.referencedElement]
		[if (namedElement.oclIsKindOf(Type))]
			[let type : Type = namedElement.oclAsType(Type)]
				[genType(type)/]
			[/let]
		[elseif (namedElement.oclIsKindOf(ReferableRhsType))]
			[namedElement.oclAsType(ReferableRhsType).name/]
		[/if]
	[/let]
[/template]

[template public genType(classifier : Classifier)]
	[if (classifier.bindings->isEmpty())]
		[classifier.name/]
	[else]
		[if (classifier.bindings->select(targetLanguage = getSimLib())->notEmpty())]
			[classifier.bindings->select(targetLanguage = getSimLib()).targetType/]
		[else]
			<!-- type binding for language '[getSimLib()/]' or 'java' is missing for BL type '[classifier.name/]' -->
		[/if]
	[/if]
[/template]

[comment EXPRESSIONS /]

[template public genExpression(expr : Expression)]
	[genExpression(expr, false)/]
[/template]

[template public genExpression(expr : Expression, extensionSemantics : Boolean)]
	<! unsupported expression [expr.eClass().name/] !>
[/template]

[template public genExpression(expr : Or, extensionSemantics : Boolean)]
	([genExpression(expr.op1, extensionSemantics)/] || [genExpression(expr.op2, extensionSemantics)/])
[/template]

[template public genExpression(expr : And, extensionSemantics : Boolean)]
	([genExpression(expr.op1, extensionSemantics)/] && [genExpression(expr.op2, extensionSemantics)/])
[/template]

[template public genExpression(expr : Equal, extensionSemantics : Boolean)]
	([genExpression(expr.op1, extensionSemantics)/] == [genExpression(expr.op2, extensionSemantics)/])
[/template]

[template public genExpression(expr : NotEqual, extensionSemantics : Boolean)]
	([genExpression(expr.op1, extensionSemantics)/] != [genExpression(expr.op2, extensionSemantics)/])
[/template]

[template public genExpression(expr : Greater, extensionSemantics : Boolean)]
	([genExpression(expr.op1, extensionSemantics)/] > [genExpression(expr.op2, extensionSemantics)/])
[/template]

[template public genExpression(expr : GreaterEqual, extensionSemantics : Boolean)]
	([genExpression(expr.op1, extensionSemantics)/] >= [genExpression(expr.op2, extensionSemantics)/])
[/template]

[template public genExpression(expr : Less, extensionSemantics : Boolean)]
	([genExpression(expr.op1, extensionSemantics)/] < [genExpression(expr.op2, extensionSemantics)/])
[/template]

[template public genExpression(expr : LessEqual, extensionSemantics : Boolean)]
	([genExpression(expr.op1, extensionSemantics)/] <= [genExpression(expr.op2, extensionSemantics)/])
[/template]

[template public genExpression(expr : InstanceOf, extensionSemantics : Boolean)]
	([genExpression(expr.op1, extensionSemantics)/] instanceof [genExpression(expr.op2, extensionSemantics)/])
[/template]

[template public genExpression(expr : Plus, extensionSemantics : Boolean)]
	([genExpression(expr.op1, extensionSemantics)/] + [genExpression(expr.op2, extensionSemantics)/])
[/template]

[template public genExpression(expr : Minus, extensionSemantics : Boolean)]
	([genExpression(expr.op1, extensionSemantics)/] - [genExpression(expr.op2, extensionSemantics)/])
[/template]

[template public genExpression(expr : Mul, extensionSemantics : Boolean)]
	([genExpression(expr.op1, extensionSemantics)/] * [genExpression(expr.op2, extensionSemantics)/])
[/template]

[template public genExpression(expr : Div, extensionSemantics : Boolean)]
	([genExpression(expr.op1, extensionSemantics)/] / [genExpression(expr.op2, extensionSemantics)/])
[/template]

[template public genExpression(expr : Mod, extensionSemantics : Boolean)]
	([genExpression(expr.op1, extensionSemantics)/] % [genExpression(expr.op2, extensionSemantics)/])
[/template]

[template public genExpression(expr : Neg, extensionSemantics : Boolean)]
	(-[genExpression(expr.op, extensionSemantics)/])
[/template]

[template public genExpression(expr : Not, extensionSemantics : Boolean)]
	(![genExpression(expr.op, extensionSemantics)/])
[/template]

[template public genExpression(expr : Cast, extensionSemantics : Boolean)]
	(([genType(expr)/]) [genExpression(expr.op, extensionSemantics)/])
[/template]

[template public genExpression(expr : TypeAccess, extensionSemantics : Boolean)]
	[genClassifierTypeExpr(expr.idExpr)/]
[/template]

[template public genExpression(expr : VariableAccess, extensionSemantics : Boolean)]
	[genExpression(expr.idExpr)/]
[/template]

[template public genExpression(argExpr : ArgumentExpression, extensionSemantics : Boolean)]
	[for (expr : Expression | argExpr.arguments) separator (',')]
		[genExpression(expr, extensionSemantics)/]
	[/for]
[/template]

[template public genExpression(expr : CreateObject, extensionSemantics : Boolean)]
	(new [genType(expr)/](
		[if (not expr.classifierTypeExpr.oclIsUndefined() and not expr.classifierTypeExpr.arguments.oclIsUndefined())]
			[genExpression(expr.classifierTypeExpr.arguments, extensionSemantics)/]
		[/if]
	))
[/template]

[comment begin IDEXPR /]

[query public refersToSyntaxPart(idExpr : IdExpr) : Boolean
	= if (idExpr.parentIdExpr.oclIsUndefined())
		then (
			if (not idExpr.referencedElement.oclIsUndefined())
				then idExpr.referencedElement.oclIsKindOf(PropertyBindingExpr)
				else false
			endif
		) 
		else refersToSyntaxPart(idExpr.parentIdExpr)
		endif /]

[query public refersToSyntaxPartOfStructuredType(idExpr : IdExpr) : Boolean
	= if (not idExpr.referencedElement.oclIsUndefined() and idExpr.referencedElement.oclIsKindOf(PropertyBindingExpr))
		then (
			let propertyType : PropertyType = idExpr.referencedElement.oclAsType(PropertyBindingExpr).propertyType
			in
				if (propertyType.oclIsKindOf(StructuredPropertyType))
				then true
				else false
				endif
		) 
		else false
		endif /]

[query public refersToVariableOfStructuredType(idExpr : IdExpr) : Boolean
	= if (not idExpr.referencedElement.oclIsUndefined() and idExpr.referencedElement.oclIsKindOf(Variable))
		then (
			let variable : Variable = idExpr.referencedElement.oclAsType(Variable)
			in
				if (not variable.classifierTypeExpr.oclIsUndefined() and variable.classifierTypeExpr.referencedElement.eContainer().oclIsTypeOf(Module))
				then (
					if (variable.classifierTypeExpr.referencedElement.eContainer().oclAsType(Module).name = 'dbl')
					then true
					else false
					endif
				)
				else false
				endif
		) 
		else false
		endif /]

[query public hasSyntaxType(idExpr : IdExpr) : Boolean
	= if (idExpr.parentIdExpr.oclIsUndefined())
		then (
			if (not idExpr.referencedElement.oclIsUndefined())
				then idExpr.referencedElement.oclIsKindOf(Construct)
				else false
			endif
		) 
		else hasSyntaxType(idExpr.parentIdExpr)
		endif /]

[query public isUsedInGenStatement(idExpr : IdExpr) : Boolean
	= isUsedInGenStatement(idExpr, idExpr.eContainer()) /]

[query public isUsedInGenStatement(idExpr : IdExpr, container : EObject) : Boolean
	= if (not container.oclIsUndefined())
		then (
			if (container.oclIsKindOf(MappingStatement))
				then true
				else isUsedInGenStatement(idExpr, container.eContainer())
				endif
		) else false
		endif /]

[template public genExpression(idExpr : IdExpr, extensionSemantics : Boolean)]
[if (extensionSemantics and (refersToSyntaxPart(idExpr) or hasSyntaxType(idExpr)))]
	[if (isUsedInGenStatement(idExpr))]
		[if (refersToSyntaxPart(idExpr))]self.[/if][genIdExpr(idExpr, extensionSemantics)/]
		[if (refersToSyntaxPartOfStructuredType(idExpr) or refersToVariableOfStructuredType(idExpr))]
			.getConcreteSyntax()
		[/if]
	[else]
		[if (refersToSyntaxPart(idExpr))]self.[/if][genIdExpr(idExpr, extensionSemantics)/]
	[/if]
[else]
	[genIdExpr(idExpr, extensionSemantics)/]
[/if]
[/template]

[template public genIdExpr(idExpr : IdExpr, extensionSemantics : Boolean)]
	[if (not idExpr.parentIdExpr.oclIsUndefined())]
		[if (not idExpr.predefinedId.oclIsUndefined() and idExpr.predefinedId.oclIsTypeOf(IndexOf))]
			(
		[/if]
		[genIdExpr(idExpr.parentIdExpr, extensionSemantics)/].
	[/if]

	[if (not idExpr.referencedElement.oclIsUndefined())]
		[genIdExprReferencedElement(idExpr, extensionSemantics, idExpr.referencedElement)/]
	[else]
		[genIdExprPredefinedId(idExpr, extensionSemantics, idExpr.predefinedId)/]
	[/if]
[/template]

[template public genIdExprPredefinedId(idExpr : IdExpr, extensionSemantics : Boolean, predefinedId : PredefinedId)]<! unsupported PredefinedId !>[/template]

[template public genIdExprPredefinedId(idExpr : IdExpr, extensionSemantics : Boolean, predefinedId : MeLiteral)]
	[if (extensionSemantics)]self[else]this[/if]
[/template]

[template public genIdExprPredefinedId(idExpr : IdExpr, extensionSemantics : Boolean, predefinedId : SuperLiteral)]
	super
[/template]

[template public genIdExprPredefinedId(idExpr : IdExpr, extensionSemantics : Boolean, predefinedId : SizeOfSet)]
	size()
[/template]

[template public genIdExprPredefinedId(idExpr : IdExpr, extensionSemantics : Boolean, predefinedId : FirstInSet)]
	get(0)
[/template]

[template public genIdExprPredefinedId(idExpr : IdExpr, extensionSemantics : Boolean, predefinedId : LastInSet)]
	get([genIdExpr(idExpr.parentIdExpr, extensionSemantics)/].size() - 1)
[/template]

[template public genIdExprPredefinedId(idExpr : IdExpr, extensionSemantics : Boolean, predefinedId : Contains)]
	contains([genExpression(idExpr.arguments, extensionSemantics)/])
[/template]

[template public genIdExprPredefinedId(idExpr : IdExpr, extensionSemantics : Boolean, predefinedId : IndexOf)]
	indexOf([genExpression(idExpr.arguments, extensionSemantics)/]))
[/template]

[template public genIdExprPredefinedId(idExpr : IdExpr, extensionSemantics : Boolean, predefinedId : ObjectAt)]
	get((int) [genExpression(idExpr.arguments, extensionSemantics)/])
[/template]

[template public genIdExprPredefinedId(idExpr : IdExpr, extensionSemantics : Boolean, predefinedId : AfterInSet)]
	get(
		[genIdExpr(idExpr.parentIdExpr, extensionSemantics)/].indexOf(
			[genExpression(idExpr.arguments, extensionSemantics)/]) + 1 )
[/template]

[template public genIdExprPredefinedId(idExpr : IdExpr, extensionSemantics : Boolean, predefinedId : BeforeInSet)]
	get(
		[genIdExpr(idExpr.parentIdExpr, extensionSemantics)/].indexOf(
			[genExpression(idExpr.arguments, extensionSemantics)/]) - 1 )
[/template]

[template public genIdExprReferencedElement(idExpr : IdExpr, extensionSemantics : Boolean, referencedElement : NamedElement)]
	[if (referencedElement.eContainer().oclIsTypeOf(Module))]
		[referencedElement.eContainer().oclAsType(Module).name.toUpperFirst()/].
	[/if]
	[referencedElement.name/]
[/template]

[template public genIdExprReferencedElement(idExpr : IdExpr, extensionSemantics : Boolean, referencedElement : Procedure)]
	[if (referencedElement.eContainer().oclIsTypeOf(Module))]
		[referencedElement.eContainer().oclAsType(Module).name.toUpperFirst()/].
	[/if]
	[referencedElement.name/]([for (arg : Expression | idExpr.arguments.arguments) separator (',')][genExpression(arg, extensionSemantics)/][/for])
[/template]

[template public genIdExprReferencedElement(idExpr : IdExpr, extensionSemantics : Boolean, referencedElement : PropertyBindingExpr)]
	get[referencedElement.name.toUpperFirst()/]()
[/template]

[comment end IDEXPR /]

[template public genExpression(expr : StringLiteral, extensionSemantics : Boolean)]
	[genJavaString(expr.value)/]
[/template]

[template public genExpression(expr : IntLiteral, extensionSemantics : Boolean)]
	[expr.value/]L
[/template]

[template public genExpression(expr : TrueLiteral, extensionSemantics : Boolean)]
	true
[/template]

[template public genExpression(expr : FalseLiteral, extensionSemantics : Boolean)]
	false
[/template]

[template public genExpression(expr : DoubleLiteral, extensionSemantics : Boolean)]
	[expr.value/]
[/template]

[template public genExpression(expr : NullLiteral, extensionSemantics : Boolean)]
	null
[/template]

[comment JAVA SPECIFIC /]

[template public genJavaString(string : String)]
	[if (string.contains('\r\n'))]
		"[string.replaceAll('\r\n', '\\\\r\\\\n"+\r\n"')/]"
	[else]
		"[string.replaceAll('\n', '\\\\r\\\\n"+\r\n"')/]"
	[/if]
[/template]

[comment DESMO-J SPECIFIC /]

[template public genStartSimulationStatement(model : Model)
		? (getSimLib() = 'desmoj')]
	[model.modules->first().name.toUpperFirst()/].startMain();
[/template]

[template public genStatement(stm : Yield, extensionSemantics : Boolean)
		? (getSimLib() = 'desmoj')]
	DefaultSimulation.DEFAULT.getCurrentProcess().base_yield();
[/template]

[template public genStatement(stm : Wait, extensionSemantics : Boolean)
		? (getSimLib() = 'desmoj')]
	DefaultSimulation.DEFAULT.getCurrentProcess().passivate();
[/template]

[template public genStatement(stm : ActivateObject, extensionSemantics : Boolean)
		? (getSimLib() = 'desmoj')]
	((SimulationProcess) [genExpression(stm.objectAccess)/]).base_activate();
[/template]

[template public genStatement(stm : Reactivate, extensionSemantics : Boolean)
		? (getSimLib() = 'desmoj')]
	((SimulationProcess) [genExpression(stm.objectAccess)/]).base_reactivate();
[/template]

[template public genStatement(stm : Advance, extensionSemantics : Boolean)
		? (getSimLib() = 'desmoj')]
	base_advance([genExpression(stm.time)/]);
[/template]

[template public genExpression(expr : TimeLiteral, extensionSemantics : Boolean)
		? (getSimLib() = 'desmoj')]
	DefaultSimulation.DEFAULT.getPresentTime()
[/template]

[template public genExpression(expr : ActiveLiteral, extensionSemantics : Boolean)
		? (getSimLib() = 'desmoj')]
	DefaultSimulation.DEFAULT.getCurrentProcess()
[/template]

[template public genClassifier(clazz : Clazz)
		? (getSimLib() = 'desmoj')]
	[genDesmoJClassifier(clazz)/]
[/template]

[template public genGlobalElements(mod : Module)
		? (getSimLib() = 'desmoj')]
	[genDesmoJGlobalElements(mod)/]
[/template]

[template public genDesmoJClassifier(clazz : Clazz)]
[if (clazz.bindings->isEmpty())]
[file (clazz.name.toUpperFirst() + '.java', false, 'MacRoman')]
	import hub.sam.dmx.javasim.desmoj.SimulationProcess;
	import hub.sam.dmx.javasim.desmoj.DefaultSimulation;

	// DesmoJ
	public class [clazz.name.toUpperFirst()/]
		[if (clazz.active)]
			extends SimulationProcess
		[elseif (clazz.superClass.name.size()> 0)]
			extends [genType(clazz.superClass)/]
		[/if] 		

	{
		
		public [clazz.name.toUpperFirst()/]() {
			[if (clazz.active)]
				super("[clazz.name.toUpperFirst()/]");
			[/if]

			[if (not clazz.initialBlock.oclIsUndefined())]
				[for (stm : Statement | clazz.initialBlock.statements)]
					[genStatement(stm)/]
				[/for]
			[/if]
		}

		[for (attr : Variable | clazz.attributes)]
			public [genStatement(attr)/]
		[/for]

		[for (method : Procedure | clazz.methods)]
			public [genProcedure(method)/]
		[/for]

		[if (clazz.active)]
			public void base_actions() {
				[if (not clazz.actionsBlock.oclIsUndefined())]
					[for (stm : Statement | clazz.actionsBlock.statements)]
						[genStatement(stm)/]
					[/for]
				[/if]
			}
		[/if]
	}
[/file]
[/if]
[/template]

[template public genDesmoJGlobalElements(mod : Module) {
	moduleName : String = mod.name.toUpperFirst();
	isMainModule : Boolean = mod.procedures->exists(name = 'main')
}]
	[file (moduleName + '.java', false, 'UTF-8')]
		//package hub.sam.dmx.extensions;

		import hub.sam.dmx.javasim.desmoj.SimulationProcess;
		import hub.sam.dmx.javasim.desmoj.DefaultSimulation;

		public class [moduleName/] 
		[if (isMainModule)]
			extends SimulationProcess
		[/if]
		{

			public [moduleName/]() {
		[if (isMainModule)]
				super("[moduleName/]");
		[/if]
			}

		[for (variable : Variable | mod.variables)]
			public static [genStatement(variable)/]
		[/for]

		[for (procedure : Procedure | mod.procedures)]
			[if (procedure.name = 'main')]
				public void base_actions() {
					[for (stm : Statement | procedure.statements)]
						[genStatement(stm)/]
					[/for]

					// simulations are stopped when main terminates
					getModel().getExperiment().stop();
				}

				public static void startMain() {
					[moduleName/] mainProcess = new [moduleName/]();
					DefaultSimulation.DEFAULT.addInitialProcess(mainProcess);
					DefaultSimulation.DEFAULT.start(0);
				}	
			[else]
				public static [genProcedure(procedure)/]
			[/if]
		[/for]
		}
	[/file]
[/template]


[comment JDISCO SPECIFIC /]
[template public genGlobalElements(mod : Module)
		? (getSimLib() = 'jdisco')]
	[genJDiscoGlobalElements(mod)/]
[/template]


[template public genJDiscoGlobalElements(mod : Module) {
	moduleName : String = mod.name.toUpperFirst();
	isMainModule : Boolean = mod.procedures->exists(name = 'main')
}]
	[file (moduleName + '.java', false, 'UTF-8')]
		//package hub.sam.tef.odemcustom.extensions;

import hub.sam.dmx.javasim.jdisco.Process;
import hub.sam.dmx.javasim.jdisco.*;

		public class [moduleName/] 
		[if (isMainModule)]
			extends Process
		[/if]
		{

			public [moduleName/]() {
			}

		[for (variable : Variable | mod.variables)]
			public static [genStatement(variable)/]	[/for]

		[for (procedure : Procedure | mod.procedures)]
			[if (procedure.name = 'main')]
				public void actions() {
					[for (stm : Statement | procedure.statements)]
						[genStatement(stm)/]
					[/for]
				}

				public static void startMain() {
					activate(new [moduleName/]());
				}	
			[else]
				public static [genProcedure(procedure)/]
			[/if]
		[/for]
		}
	[/file]
[/template]


[template public genClassifier(clazz : Clazz)
		? (getSimLib() = 'jdisco')]
	[genJDiscoClassifier(clazz)/]
[/template]

[template public genJDiscoClassifier(clazz : Clazz)]
[if (clazz.bindings->isEmpty())]
[file (clazz.name.toUpperFirst() + '.java', false, 'MacRoman')]
import hub.sam.dmx.javasim.jdisco.Process;
import hub.sam.dmx.javasim.jdisco.*;

	// JDisco
	public class [clazz.name.toUpperFirst()/] 		
		[if (clazz.active)]
			extends Process
		[elseif (clazz.superClass.name.size()> 0)]
			extends [clazz.superClass.name.toUpperFirst()/]
		[/if]  {

		public [clazz.name.toUpperFirst()/]() {

			[if (not clazz.initialBlock.oclIsUndefined())]
				[for (stm : Statement | clazz.initialBlock.statements)]
					[genStatement(stm)/]
				[/for]
			[/if]
		}

		[for (attr : Variable | clazz.attributes)] public [genStatement(attr)/][/for]

		[for (method : Procedure | clazz.methods)] public [genProcedure(method)/] [/for]

		public void actions() {
				[if (not clazz.actionsBlock.oclIsUndefined())][for (stm : Statement | clazz.actionsBlock.statements)][genStatement(stm)/][/for][/if]
			}
		
	}
[/file]
[/if]
[/template]


[template public genStartSimulationStatement(model : Model)
		? (getSimLib() = 'jdisco')]
	[model.modules->first().name.toUpperFirst()/].startMain();
[/template]


[template public genExpression(expr : TimeLiteral, extensionSemantics : Boolean)
		? (getSimLib() = 'jdisco')]
	time()
[/template]

[template public genExpression(expr : ActiveLiteral, extensionSemantics : Boolean)
		? (getSimLib() = 'jdisco')]
	current()
[/template]


[template public genStatement(stm : ActivateObject, extensionSemantics : Boolean)
		? (getSimLib() = 'jdisco')]
	activate([genExpression(stm.objectAccess)/]);
[/template]


[template public genStatement(stm : Advance, extensionSemantics : Boolean)
		? (getSimLib() = 'jdisco')]
	hold([genExpression(stm.time)/]);
[/template]


[template public genStatement(stm : Wait, extensionSemantics : Boolean)
		? (getSimLib() = 'jdisco')]
	current().passivate();
[/template]

[template public genStatement(stm : Yield, extensionSemantics : Boolean)
		? (getSimLib() = 'jdisco')]
	hold(0);
[/template]


[template public genStatement(stm : WaitUntil, extensionSemantics : Boolean)
		? (getSimLib() = 'jdisco')]
	waitUntil(new Condition() {
		public boolean test() {
	return ([genExpression(stm.condition)/]);
}
});

[/template]


[template public genStatement(stm : Reactivate, extensionSemantics : Boolean)
		? (getSimLib() = 'jdisco')]
	 activate((Process)[genExpression(stm.objectAccess)/]);
[/template]



[comment JiST SPECIFIC /]

[template public genStartSimulationStatement(model : Model)
		? (getSimLib() = 'jist')]
	java.util.List<String> argsList = new java.util.ArrayList<String>();
	argsList.add("[model.modules->first().name.toUpperFirst()/]");
	argsList.addAll(Arrays.asList(args));

	hub.sam.dmx.javasim.jist.RunJistSimulation.main(argsList.toArray(new String['['/][']'/] {}));
[/template]

[template public genStatement(stm : Wait, extensionSemantics : Boolean)
		? (getSimLib() = 'jist')]
	getActiveEntity().simWait();
[/template]

[template public genStatement(stm : Yield, extensionSemantics : Boolean)
		? (getSimLib() = 'jist')]
	GlobalSimulationPrimitives.getActiveEntity().yield();
[/template]

[template public genStatement(stm : ActivateObject, extensionSemantics : Boolean)
		? (getSimLib() = 'jist')]
	([genExpression(stm.objectAccess)/]).getEntity().activate();
[/template]

[template public genStatement(stm : Reactivate, extensionSemantics : Boolean)
		? (getSimLib() = 'jist')]
	[let objVar : String = 'obj_'.concat(getNextTransformationUniqueNumber())]
		Object [objVar/] = [genExpression(stm.objectAccess)/];
		if ([objVar/] instanceof GenericEntity || [objVar/] instanceof EntityRef) {
			GenericEntity ge_[objVar/] = (GenericEntity) [objVar/];
			ge_[objVar/].reactivate();
		}
		else if ([objVar/] instanceof IProcess) {
			IProcess process_[objVar/] = (IProcess) [objVar/];
			process_[objVar/].getEntity().reactivate();
		}
		else {
			System.out.println("ERROR: cannot reactivate non-process object.");
			JistAPI.end();
		}
	[/let]
[/template]

[template public genStatement(stm : Advance, extensionSemantics : Boolean)
		? (getSimLib() = 'jist')]
	getActiveEntity().advance([genExpression(stm.time)/]);
[/template]

[template public genExpression(expr : TimeLiteral, extensionSemantics : Boolean)
		? (getSimLib() = 'jist')]
	JistAPI.getTime()
[/template]

[template public genExpression(expr : ActiveLiteral, extensionSemantics : Boolean)
		? (getSimLib() = 'jist')]
	GlobalSimulationPrimitives.getActiveEntity()
[/template]

[template public genClassifier(clazz : Clazz)
		? (getSimLib() = 'jist')]
[if (clazz.bindings->isEmpty())]
[file (clazz.name.toUpperFirst() + '.java', false, 'MacRoman')]
	import hub.sam.dmx.javasim.jist.GenericEntity;
	import hub.sam.dmx.javasim.jist.IProcess;
	import jist.runtime.JistAPI;
	import jist.runtime.JistAPI.Timeless;
	import hub.sam.dmx.javasim.jist.GlobalSimulationPrimitives;

	public class [clazz.name.toUpperFirst()/]
		[if (clazz.active)]
			implements Timeless, IProcess
		[elseif (clazz.superClass.name.size()> 0)]
			extends [clazz.superClass.name.toUpperFirst()/]
		[/if]
	{
		[if (clazz.active)]
		private GenericEntity _internal_entity;	

		public GenericEntity getEntity() {
			return _internal_entity;
		}

		public GenericEntity getActiveEntity() {
			return _internal_entity;
		}
		[else]
		public GenericEntity getActiveEntity() {
			return GlobalSimulationPrimitives.getActiveEntity();
		}
		[/if]
		
		public [clazz.name.toUpperFirst()/]() {
			[if (clazz.active)]
				this._internal_entity = new GenericEntity(this);
			[/if]

			[if (not clazz.initialBlock.oclIsUndefined())]
				[for (stm : Statement | clazz.initialBlock.statements)]
					[genStatement(stm)/]
				[/for]
			[/if]
		}

		[for (attr : Variable | clazz.attributes)]
			public [genStatement(attr)/]
		[/for]

		[for (method : Procedure | clazz.methods)]
			public [genProcedure(method)/]
		[/for]

		[if (clazz.active)]
			public void actions() {
				[if (not clazz.actionsBlock.oclIsUndefined())]
					[for (stm : Statement | clazz.actionsBlock.statements)]
						[genStatement(stm)/]
					[/for]
				[/if]
			}
		[/if]
	}
[/file]
[/if]
[/template]

[template public genGlobalElements(mod : Module)
		? (getSimLib() = 'jist')
{
	moduleName : String = mod.name.toUpperFirst();
	isMainModule : Boolean = mod.procedures->exists(name = 'main')
}
]
	[file (moduleName + '.java', false, 'UTF-8')]
		//package hub.sam.dmx.extensions;

		import hub.sam.dmx.javasim.jist.GenericEntity;
		import hub.sam.dmx.javasim.jist.IProcess;
		import jist.runtime.Controller;
		import jist.runtime.JistAPI;
		import jist.runtime.JistAPI.Timeless;
		import hub.sam.dmx.javasim.jist.GlobalSimulationPrimitives;

		public class [moduleName/]
		[if (isMainModule)]
			implements Timeless, IProcess
		[/if]
		{

		[if (isMainModule)]
			private GenericEntity _internal_entity;

			public [moduleName/]() {
				this._internal_entity = new GenericEntity(this);
			}

			public GenericEntity getEntity() {
				return _internal_entity;
			}
			
			public GenericEntity getActiveEntity() {
				return _internal_entity;
			}
		[/if]

		[for (variable : Variable | mod.variables)]
			public static [genStatement(variable)/]
		[/for]

		[for (procedure : Procedure | mod.procedures)]
			[if (procedure.name = 'main')]
				public void actions() {
					[for (stm : Statement | procedure.statements)]
						[genStatement(stm)/]
					[/for]

					JistAPI.end();
				}

				public static void main(String['['/][']'/] args) {
					[moduleName/] mainInstance = new [moduleName/]();
					mainInstance.getEntity().activate();
				}
			[else]
				public static [genProcedure(procedure)/]
			[/if]
		[/for]
		}
	[/file]
[/template]