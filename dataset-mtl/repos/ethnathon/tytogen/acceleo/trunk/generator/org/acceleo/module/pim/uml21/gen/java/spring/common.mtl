[module common('http://www.eclipse.org/uml2/3.0.0/UML')/] 
[import org::acceleo::module::pim::uml21::services::uml2services /]

[import org::acceleo::module::pim::uml21::gen::java::spring::services::uml2services/]

[import org::acceleo::module::pim::uml21::services::stringservice /]

[import org::acceleo::module::pim::uml21::gen::java::spring::services::springservices /]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]

[template public classPackage(class : Class)]
[class._package.getCompleteName()/]
[/template]


[template public interfacePackage(interface : Interface)]
[interface._package.getCompleteName()/]

[/template]


[template public daoPackage(namedElement : NamedElement) post (trim())]
[if (getProperty('useDaoPackage') = 'no')]
[namedElement.eContainer(NamedElement).getCompleteName()/]
[else]
[namedElement.baseImports()/].[namedElement.projectName()/].dao.[namedElement.eContainer(Package).normalizedName()/]
[/if]

[/template]


[template public servicePackage(namedElement : NamedElement)]
[if (getProperty('useServicePackage') = 'no')]
[namedElement.eContainer(NamedElement).getCompleteName()/]
[else]
[namedElement.baseImports()/].[namedElement.projectName()/].service.[namedElement.eContainer().eContainer(Package).normalizedName()/]
[/if]

[/template]


[template public serviceImplPackage(class : Class) post (trim())]
[if (getProperty('useServicePackage') = 'no')]
[class._package.getCompleteName()/].impl
[else]
[class.baseImports()/].[class.projectName()/].service.[class._package.normalizedName()/].impl
[/if]
[/template]


[template public uiPackage(namedElement : NamedElement)]
[if (getProperty('useUiPackage') = 'no')]
[namedElement.eContainer(NamedElement).getCompleteName()/]
[else]
[namedElement.baseImports()/].[namedElement.projectName()/].ui.[namedElement.eContainer(Package).normalizedName()/]
[/if]

[/template]


[template public uiImplPackage(class : Class)]
[if (getProperty('useUiPackage') = 'no')]
[class._package.getCompleteName()/].impl[else]
[class.baseImports()/].[class.projectName()/].ui.[class._package.normalizedName()/].impl
[/if]

[/template]


[template public viewFactoryPackage(namedElement : NamedElement)]
[namedElement.ancestors()->last().oclAsType(NamedElement).getCompleteName()/].ui
[/template]


[template public starterPackage(namedElement : NamedElement)]
[namedElement.ancestors()->last().oclAsType(NamedElement).getCompleteName()/].lifecycle
[/template]


[template public controllerPackage(class : Class)]
[if (getProperty('useControllerPackage') = 'no')]
[class._package.getCompleteName()/]
[else]
[class.baseImports()/].[class.projectName()/].controller.[class._package.normalizedName()/]
[/if]

[/template]


[template public controllerImplPackage(class : Class)]
[if (getProperty('useControllerPackage') = 'no')]
[class._package.getCompleteName()/].impl[else]
[class.baseImports()/].[class.projectName()/].controller.[class._package.normalizedName()/].impl
[/if]

[/template]


[template public viewImplPackage(namedElement : NamedElement)]
[if (getProperty('useViewPackage') = 'no')]
[namedElement.eContainer(NamedElement).getCompleteName()/].impl[else]
[namedElement.baseImports()/].[namedElement.projectName()/].view.[namedElement.eContainer(Package).normalizedName()/].impl
[/if]

[/template]


[template public configPackage(class : Class)]
[class._package.getCompleteName()/]
[/template]


[template public testPackage(model : Model)]
[model.name/]
[/template]


[template public genExceptions(operation : Operation)]
[if (operation.raisedException->notEmpty())], [operation.raisedException.name->sep(', ')/][/if]
[/template]


[template public exceptions(operation : Operation)]
[operation.raisedException.name/]

[/template]


[template public exempleValues(property : Property)]
[if (property.type->select(oclIsTypeOf(Enumeration))->notEmpty())][property.type.name/].[property.type.oclAsType(Enumeration).genEnum()/][else][if (property.type.name = 'Integer')][property.name.uniqueCode()/][else][if (property.type.name = 'String')]"my[property.name.toUpperFirst()/]"[else][if (property.type.name = 'Boolean')]true[else][if (property.type.name = 'Date')]new Date(0)[else][if (property.type.name = 'Long')]new Long(0)[else][if (property.type.name = 'Float')]new Float([name.uniqueCode()/].0)[else]new [property.type.name/]()[/if][/if][/if][/if][/if][/if][/if]
[/template]


[template public exempleValues2(property : Property)]
[if (property.type->select(oclIsTypeOf(Enumeration))->notEmpty())][property.type.name/].[property.type.oclAsType(Enumeration).genEnum()/][else][if (property.type.name = 'Integer')][property.name.uniqueCode()/][else][if (property.type.name = 'String')]"second[property.name.toUpperFirst()/]"[else][if (property.type.name = 'Boolean')]false[else][if (property.type.name = 'Date')]new Date(1)[else][if (property.type.name = 'Long')]new Long(1)[else][if (property.type.name = 'Float')]new Float([name.uniqueCode()/].0)[else]new [property.type.name/]()[/if][/if][/if][/if][/if][/if][/if]
[/template]


[template public genEnum(enumeration : Enumeration)]
[enumeration.ownedLiteral->first().name/]
[/template]

[comment][query public classAttributes(class : Class) : Set(Property) =
class.attribute->union(
class.getAssociations().oclAsType(Association).oppositeAttributeOf(class)
->select(isNavigable())->asSet())
/][/comment]


[query public operationsParameters(class : Class):Sequence(Parameter) = 
class.ownedOperation.ownedParameter->union(if(class.ownedOperation.returnResult()->notEmpty())then class.ownedOperation.returnResult()->asSequence() else Sequence{} endif )
/]


[query public operationsParametersTypes(class : Class):Sequence(Classifier) = 
class.operationsParameters().type->filter(Classifier)->select(not (name.endsWith('String')) and not (name.endsWith('Integer')) and not (name.endsWith('Float')) and not (name.endsWith('Long')) and not (name.endsWith('Double')) and not (name.endsWith('Boolean')) and not (name.startsWith('byte')) and not (name.endsWith('Object')))->asOrderedSet()->asSequence()
/]
[template public name(arg : Property)]
	[arg.upper/]
[/template]

[query public getMultiplicity(aClass : Class) : Set(MultiplicityElement) = 
(if(aClass.classAttributes()->notEmpty()) then
	aClass.classAttributes().oclAsType(MultiplicityElement)->asSet()
else
	Set{}
endif)->union(
	if(aClass.operationsParameters()->notEmpty()) then
		aClass.operationsParameters()->filter(MultiplicityElement)->asSet()
	else
		Set{}
	endif
)
/]



[comment]aClass.operationsParameters()->filter(MultiplicityElement)->select(aMultiplicityElement:MultiplicityElement|aMultiplicityElement.upper = -1 or aMultiplicityElement.upper > 1)->asSet()[/comment]

[template public genCollectionImports(class : Class)]
[if (class.operationsParameters()->select((upper = -1 or upper > 1) and isOrdered)->notEmpty())]
import java.util.List;
[/if]
[if (class.operationsParameters()->select((upper = -1 or upper > 1) and (not (isOrdered) and isUnique))->notEmpty())]
import java.util.Set;
[/if]
[if (class.operationsParameters()->select((upper = -1 or upper > 1) and (not (isOrdered) and not (isUnique)))->notEmpty())]
import java.util.Collection;
[/if]

[/template]
