[module servicehessianxml('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::spring::profile/]
[import org::acceleo::module::pim::uml21::gen::java::spring::common/]
[import org::acceleo::module::pim::uml21::gen::java::spring::ioc/]
[import org::acceleo::module::pim::uml21::gen::java::spring::services::uml2services /]
[import org::acceleo::module::pim::uml21::gen::java::spring::services::springservices /]
[import org::acceleo::module::pim::uml21::gen::java::spring::tests::entitytesthelper /]

[import org::acceleo::module::pim::uml21::services::stringservice /]
[import org::acceleo::module::pim::uml21::services::uml2services /]

[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::acceleo::module::pim::uml21::gen::java::dao::api::daocommon /]

[comment][template private fullFilePath(model : Model)]
[if (model.webservices()->notEmpty())][model.pathToMainResources()/]/META-INF/spring/[model.baseImports()/]/layer-hessian-services.xml[/if]
[/template][/comment]


[template public generateServiceHessianSpringApplicationContext(model : Model)? (model.webservices()->notEmpty())]
[comment This template is called by the main module file /]
[file (model.fullFilePath(model.pathToMainResources(), 'META-INF/spring/'.concat(model.baseImports()), 'layer-hessian-services.xml'), false))]
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
           http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.0.xsd">

	<aop:config>	  	
		<!--  configure aspect to provide thread local session for hessian -->		
		<aop:advisor advice-ref="hibernateInterceptor" pointcut="execution(* org.springframework.remoting.caucho.HessianServiceExporter.handleRequest(..))" order="1"/>
	</aop:config>

[for (class:Class|model.webservices())]
		<!-- Hessian Web Service remoting -->		
		<bean name="/[class.name.toUpperFirst()/]WebService" class="org.springframework.remoting.caucho.HessianServiceExporter">
			<property name="service" ref="[class.name.toLowerFirst()/]"/>
			<property name="serviceInterface" value="[class.servicePackage()/].I[class.name/]WebService"/>
			<property name="sendCollectionType" value="false"/>
		</bean>				
[/for]
 	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">			
    	<property name="urlMap">
        	<map>
[for (class:Class|model.webservices())]
            	<entry key="/I[class.name/]WebService">
                	<ref bean="/[class.name/]WebService"/>
            	</entry>
[/for]
        	</map>
    	</property>
[comment 
    	<property name="interceptors">
		<list>
			<!-- <%startUserCode%> urlMapping interceptors -->
			<!-- <ref bean="openSessionInViewInterceptor" /> --> 
			<!-- <%endUserCode%> urlMapping interceptors -->			
		</list>
		</property>
/]	</bean>
</beans>
[/file]
[/template]


[template public genOverrideTypesList(class : Class)]
[for (param:Parameter|class.ownedOperation.returnResult())]
	[for (class:Class|param.type.inheritanceTree())]
		<value>[class.getCompleteName()/]</value>
	[/for]
[/for]

[/template]


[query public inheritanceTree(type : Type): Sequence(Class)= 
type.ancestors()->last().eAllContents(Class)->select(class:Class|class->select(oclIsTypeOf(InterfaceRealization))->notEmpty() and class.clientDependency.oclAsType(InterfaceRealization).supplier.name = type.name or class.superClass.name = type.name)->asOrderedSet()->asSequence()
/]
