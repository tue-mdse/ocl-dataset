[module velocityview('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::acceleo::module::pim::uml21::gen::java::spring::profile/]
[import org::acceleo::module::pim::uml21::gen::java::spring::common/]
[import org::acceleo::module::pim::uml21::gen::java::spring::ioc /]
[import org::acceleo::module::pim::uml21::gen::java::spring::services::uml2services /]
[import org::acceleo::module::pim::uml21::gen::java::spring::services::springservices /]
[import org::acceleo::module::pim::uml21::gen::java::spring::tests::entitytesthelper /]

[import org::acceleo::module::pim::uml21::services::stringservice /]
[import org::acceleo::module::pim::uml21::services::uml2services /]

[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::acceleo::module::pim::uml21::gen::java::common::specifics /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::acceleo::module::pim::uml21::gen::java::dao::api::daocommon /]

[template private fullFilePath(class : Class)]
[if (class.isView())][class.pathToMainJava()/]/[class.viewImplPackage().toPath()/]/[class.name/].java[/if]
[/template]


[template public generateVelocityView(class : Class)? (class.isView())]
[comment This template is called by the main module file /]
[file (class.fullFilePath(class.pathToMainJava(), class.viewImplPackage().toPath(), class.name.concat('.java')), false))]
package [class.viewImplPackage()/];

// [protected ('imports')] 
// for import 
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;

import org.sharengo.exceptions.TechnicalException;

import java.io.Writer;

[for (classifier:Classifier|class.viewDependencies())]
import [viewImplPackage()/].[name/];
[/for]

[for (prop:Property|class.attribute)]
	[if (prop.type.isEntity())]
import [prop.type.entityPackage()/].[prop.type.name/];
	[else]
import [prop.type.getCompleteName() /];	
	[/if]
[/for]

import java.util.Collection;
// [/protected]

public class [class.name/] {	
[comment  TODO peut-être créer une classe mère VelocityView  /]	
	/**
	 * class dedicated logger
 	 */
	private static Log log = LogFactory.getLog([class.name/].class.getName());  

	private VelocityContext velocityContext = null;

	public VelocityContext getVelocityContext() {
		return velocityContext;
	}

	public void setVelocityContext(VelocityContext velocityContext) {
		this.velocityContext = velocityContext;
	}

	private VelocityEngine velocityEngine=null;
		
	public VelocityEngine getVelocityEngine() {
		return velocityEngine;
	}

	public void setVelocityEngine(VelocityEngine velocityEngine) {
		this.velocityEngine = velocityEngine;
	}
	
[for (prop:Property|class.attribute)]
	public void set[prop.name.toUpperFirst()/]([prop.convertToJavaType()/] [prop.name.toLowerFirst()/]){
		// [protected ('store properties')]		
		velocityContext.put("[prop.name.toLowerFirst()/]", [prop.name.toLowerFirst()/]);
		// [/protected]		
	}
[/for]
	
	[iocAccessors2('View')/]
	
	public void show(Writer writer) throws TechnicalException{
		try{
			// [protected ('get templates')]			
			Template template = velocityEngine.getTemplate("[class.name/].vsl");
			// [/protected]
			template.merge(velocityContext, writer);
		}catch(Exception e){
			throw new TechnicalException(e);
		}
	}
[comment 
	<%for (ownedOperation){%>
	<%generateJavadoc%>
	public <%generateReturn%> <%name%>(<%generateRawParameters%>);
	<%}%>
	/]}
[/file]
[/template]
