[comment encoding = ISO-8859-1 /]
[module generateServiceJsp('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::webPathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::requests/]
[template public generateServiceJsp(aClass : Class) ]
	[file (aClass.getModel().generateProjectFolder().concat(aClass.getModel().pathToMainResources()).concat('/').concat(aClass.name).concat('.jsp'), false, 'ISO-8859-1')]
<html>
<head>
</head>
<body>

<h1>Welcome to Impala</h1>
<p>If you can see this message, then you have successfully started up a minimal working multi-module application,
set up using the <a href = "http://maven.apache.org/">Maven project conventions</a>.</p>

<p>As the property <code>auto.reload.modules</code> is set true, any change you make to the application will
be automatically detected, and the affected modules will be reloaded.</p>

<p>You can test this for yourself be editing the following files.
[for (aService : Class | aClass.getServicesOfController())]
	[for (aOperation : Operation | aService.ownedOperation)]
<ul>
<li>Rename or change the <code>[aOperation.name/]()</code> method in <code>[aService.name/]</code>, in the <i>root</i> module. This will cause all the modules to reload.</li>
<li>Change the implementation class <code>[aService.name/]</code> class in the <i>implementation</i> module. This will cause just the implementation module to reload.</li>
<li>Make a change in <code>[aClass.name/]</code>, which will result in just the <i>web</i> module reloading.</li>
</ul>
	[/for]
</p>

[/for]

<b>A message from message service:</b> <span style = "color:blue;"><%=request.getAttribute("message")%></span><br/>

<p>Note: the JSP for this is contained within the module itself.</p>
</body>
</html>	[/file]
[/template]
