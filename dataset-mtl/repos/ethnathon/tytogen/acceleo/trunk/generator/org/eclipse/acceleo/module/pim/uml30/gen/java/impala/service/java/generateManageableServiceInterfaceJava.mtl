[module generateManageableServiceInterfaceJava('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::pathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::acceleo::module::pim::uml21::gen::java::common::compositeUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::acceleo::module::pim::uml21::gen::java::common::requests /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::service::common::servicePathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::main::common::mainCommon /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::build::common::entityUtil /]
[import org::acceleo::module::pim::uml21::services::uml2services /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::dao::common::daoCommon /]
[template public generateManageableServiceInterfaceJava(anEntity : Class)]
[file (anEntity.getModel().generateProjectFolder().concat(anEntity.getModel().pathToGeneratedMainJava()).concat('/').concat(anEntity.generateJavaPackagePath()).concat('/crud/').concat(anEntity.name.toUpperFirst()).concat('ManageableService.java'), false, 'UTF-8')]
package [anEntity.generateJavaPackage()/].crud;

[anEntity.generateImports()/]

import java.util.List;
import java.util.Map;

/**
 * 
 */
public interface [anEntity.name.toUpperFirst()/]ManageableService
{
	
    /**
     * @param id 
	[for (aProperty : Property | anEntity.getEntityDaoManagerProperties())]
     * @param [aProperty.paramName()/] 
	[/for]
     * @return [anEntity.name.toUpperFirst()/]ValueObject
     * @throws Exception
     */
    public [anEntity.name.toUpperFirst()/]ValueObject create([anEntity.generateDaoManagerFunctionParam()/])
        throws Exception;

    /**
     * @param id The manageable identifier name
     * @return [anEntity.name.toUpperFirst()/]ValueObject
     * @throws Exception
     */
    public [anEntity.name.toUpperFirst()/]ValueObject readById([anEntity.getPrimaryTypeName(true)/] id)
        throws Exception;

    /**
     * @param id 
	[for (aProperty : Property | anEntity.getEntityDaoManagerProperties())]
     * @param [aProperty.paramName()/] 
	[/for]
     * @return List<[anEntity.name.toUpperFirst()/]ValueObject>
     * @throws Exception
     */
    public List<[anEntity.name.toUpperFirst()/]ValueObject> read([anEntity.generateDaoManagerFunctionParam()/])
        throws Exception;

    /**
     * @return all manageable
     * @throws Exception
     */
    public List<[anEntity.name.toUpperFirst()/]ValueObject> readAll()
        throws Exception;

    /**
     * @return manageable backing lists
     * @throws Exception
     */
    public Map<String,?> readBackingLists()
        throws Exception;

    /**
     * @param id 
	[for (aProperty : Property | anEntity.getEntityDaoManagerProperties())]
     * @param [aProperty.paramName()/] 
	[/for]
     * @return [anEntity.name.toUpperFirst()/]ValueObject
     * @throws Exception
     */
    public [anEntity.name.toUpperFirst()/]ValueObject update([anEntity.generateDaoManagerFunctionParam()/])
        throws Exception;

    /**
     * @param ids The array of IDs to be deleted
     * @throws Exception
     */
    public void delete([anEntity.getPrimaryTypeName(true)/]['[]'/] ids)
        throws Exception;

}	
[/file]
[/template]
