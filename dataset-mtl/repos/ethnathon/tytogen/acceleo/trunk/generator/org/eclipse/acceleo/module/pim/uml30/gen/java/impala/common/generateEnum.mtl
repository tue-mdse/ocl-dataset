[comment encoding = UTF-8 /]
[module generateEnum('http://www.eclipse.org/uml2/3.0.0/UML')]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::pathUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::structure /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::structureUtil /]
[import org::acceleo::module::pim::uml21::gen::java::common::dataTypes /]
[import org::acceleo::module::pim::uml21::gen::java::common::common /]
[import org::eclipse::acceleo::module::pim::uml30::gen::java::impala::common::stringUtil /]
[import org::acceleo::module::pim::uml21::gen::java::spring::java::javaclass /]
[import org::acceleo::module::pim::uml21::gen::java::spring::common /]


[template public generateEnum(anEnumeration : Enumeration)]
package [anEnumeration._package.getCompleteName()/];

// [protected ('imports')] 
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
// [/protected]

	[anEnumeration.generateJavadoc()/]
public enum [anEnumeration.name.toUpperFirst()/]{
	[for (anEnumLiteral : EnumerationLiteral | anEnumeration.ownedLiteral) separator (',') after (';')]
		/** TODO: Model Documentation for Enumeration Literal [anEnumLiteral.name.toUpper()/] value "[anEnumLiteral.name/]" */
		[anEnumLiteral.name.toUpper()/]("[anEnumLiteral.name/]")
	[/for]

	private final String enumValue;

	/**
     * The constructor with enumeration literal value allowing
     * super classes to access it.
     */
    private [anEnumeration.name.toUpperFirst()/](String value)
    {
        this.enumValue = value;
    }

	/*
	 * Do not override this method directly. Use an alternate name
	 * if providing a different toString implementation
	 * @see Object#toString()
    @Override
    public String toString()
    {
        return String.valueOf(this.enumValue);
    }
    */

    /**
     * Retrieves an instance of [anEnumeration.name.toUpperFirst()/] from <code>its name</code>.
     *
     * @param name the name to create the [anEnumeration.name.toUpperFirst()/] from.
     * @return The enumeration literal named after the 'name' argument
    */
    public static [anEnumeration.name.toUpperFirst()/] fromString(String name)
    {
        return [anEnumeration.name.toUpperFirst()/].valueOf(name);
    }

	/**
     * Returns an enumeration literal String <code>value</code>.
     * Required by JAXB2 enumeration implementation
     *
     * @return String with corresponding value
     */
    public String value()
    {
        return this.enumValue;
    }

    /**
     * Returns an instance of [anEnumeration.name.toUpperFirst()/] from String <code>value</code>.
     * Required by JAXB2 enumeration implementation
     *
     * @param value the value to create the [anEnumeration.name.toUpperFirst()/] from.
     * @return static Enumeration with corresponding value
     */
    public static [anEnumeration.name.toUpperFirst()/] fromValue(String value)
    {
        for ([anEnumeration.name.toUpperFirst()/] enumName: [anEnumeration.name.toUpperFirst()/].values())
        {
            if (enumName.getValue().equals(value))
            {
                return enumName;
            }
        }
        throw new IllegalArgumentException("[anEnumeration.name.toUpperFirst()/].fromValue(" + value + ')');
    }

    /**
     * Gets the underlying value of this type safe enumeration.
     * This method is necessary to comply with DaoBase implementation.
     * @return The name of this literal.
     */
    public String getValue()
    {
        return this.enumValue;
    }

    /**
     * Returns an unmodifiable list containing the literals that are known by this enumeration.
     *
     * @return A List containing the actual literals defined by this enumeration, this list
     *         can not be modified.
     */
    public static List<String> literals()
    {
        return [anEnumeration.name.toUpperFirst()/].literals;
    }

    /**
     * Returns an unmodifiable list containing the names of the literals that are known
     * by this enumeration.
     *
     * @return A List containing the actual names of the literals defined by this
     *         enumeration, this list can not be modified.
     */
    public static List<String> names()
    {
        return [anEnumeration.name.toUpperFirst()/].names;
    }

	private static final Map<String, [anEnumeration.name.toUpperFirst()/]> values = new LinkedHashMap<String, [anEnumeration.name.toUpperFirst()/]>(4, 1);
    private static final List<String> literals = Collections.unmodifiableList(
            Arrays.asList(
	[for (anEnumLiteral : EnumerationLiteral | anEnumeration.ownedLiteral) separator (',')]
            "[anEnumLiteral.name.toUpper()/]"
	[/for]
			));
    private static final List<String> names = Collections.unmodifiableList(
            Arrays.asList(
	[for (anEnumLiteral : EnumerationLiteral | anEnumeration.ownedLiteral) separator (',')]
            [anEnumeration.name.toUpperFirst()/].[anEnumLiteral.name.toUpper()/].enumValue
	[/for]
			));
    private static final List<[anEnumeration.name.toUpperFirst()/]> valueList = Collections.unmodifiableList(
            Arrays.asList(
	[for (anEnumLiteral : EnumerationLiteral | anEnumeration.ownedLiteral) separator (',')]
            [anEnumeration.name.toUpperFirst()/].[anEnumLiteral.name.toUpper()/]
	[/for]
			));
    /**
     * Initializes the values.
     */
    static
    {
        synchronized ([anEnumeration.name.toUpperFirst()/].values)
        {
	[for (anEnumLiteral : EnumerationLiteral | anEnumeration.ownedLiteral)]
            [anEnumeration.name.toUpperFirst()/].values.put([anEnumLiteral.name.toUpper()/].enumValue, [anEnumLiteral.name.toUpper()/]);
	[/for]
        }
    }
}
[/template]


