[comment]Copyright (c) 2013 CEA LIST.

All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
 Obeo - Initial API and implementation
 CEA LIST - Modification to support Facade code generation[/comment]
[comment encoding = UTF-8 /]
[module genOperation('http://www.eclipse.org/emf/2002/GenModel')/]

[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClass /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClassifier /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenFeature /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenEnum /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenPackage /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenDataType /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenOperation /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenParameter /]
[import org::eclipse::papyrus::facade::codegen::utils::FacadeCodegenUtils /]
[import org::eclipse::papyrus::facade::codegen::utils::WrappingListUtils /]

[template public genOperation(genOperation : GenOperation, genClass : GenClass, genPackage : GenPackage, genModel : GenModel, isJDK50 : Boolean, isInterface : Boolean, isImplementation : Boolean, isGWT : Boolean)]
[if (isImplementation) ]
  [if (genOperation.isInvariant() and genOperation.hasInvariantExpression()) ]
	/**
	 * The cached validation expression for the '{@link #[genOperation.getName()/]([genOperation.getParameterTypes(', ')/]) <em>[genOperation.getFormattedName()/]</em>}' invariant operation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #[genOperation.getName()/]([genOperation.getParameterTypes(', ')/])
	 * @generated
	 * @ordered
	 */
	protected static final [genModel.getImportedName('java.lang.String')/] [genClass.getUniqueNameUpperCase(genOperation)/]__EEXPRESSION = "[genOperation.getInvariantExpression('\t\t')/]";[genModel.getNonNLS()/]

  [else][if (genOperation.hasInvocationDelegate()) ]
	/**
	 * The cached invocation delegate for the '{@link #[genOperation.getName()/]([genOperation.getParameterTypes(', ')/]) <em>[genOperation.getFormattedName()/]</em>}' operation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #[genOperation.getName()/]([genOperation.getParameterTypes(', ')/])
	 * @generated
	 * @ordered
	 */
	protected static final [genModel.getImportedName('org.eclipse.emf.ecore.EOperation')/].Internal.InvocationDelegate [genClass.getUniqueNameUpperCase(genOperation)/]__EINVOCATION_DELEGATE = (([genModel.getImportedName('org.eclipse.emf.ecore.EOperation')/].Internal)[genOperation.getQualifiedOperationAccessor()/]).getInvocationDelegate();

  [/if][/if]
[/if]
[if (isInterface) ]
[comment]<%@ include file="Class/genOperation.javadoc.override.javajetinc" fail="alternative" %>[/comment]
[comment]<%@ start %>[/comment]
	/**
[comment]<%@ include file="Class/genOperation.javadoc.insert.javajetinc" fail="silent" %>[/comment]
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
  [if (genOperation.hasDocumentation() or genOperation.hasParameterDocumentation()) ]
	 * <!-- begin-model-doc -->
    [if (genOperation.hasDocumentation()) ]
	 * [genOperation.getDocumentation(genModel.getIndentation())/]
    [/if]
  [for (genParameter : GenParameter | genOperation.genParameters)]
      [if (genParameter.hasDocumentation())]
        [let documentation : String = genParameter.getDocumentation('')]
          [if (documentation.contains('\n') or documentation.contains('\r')) ]
	 * @param [genParameter.getName()/]
	 *   [genParameter.getDocumentation(genModel.getIndentation())/]
          [else]
	 * @param [genParameter.getName()/] [genParameter.getDocumentation(genModel.getIndentation())/]
          [/if]
        [/let]
      [/if]
    [/for]
	 * <!-- end-model-doc -->
  [/if]
  [if (not genModel.suppressEMFModelTags)]
    [let modelInfoLines : Sequence(String) = genOperation.getModelInfo().tokenize(genModel.getLineDelimiter())]
      [if (modelInfoLines->isEmpty())]
	 * @model
      [else]
	 * @model [modelInfoLines->sep(genModel.getLineDelimiter() + '\t *        ')/]
      [/if]
    [/let]
  [/if]
	 * @generated
	 */
[comment]<%@ end %><%//Class/genOperation.javadoc.override.javajetinc%>[/comment]
[else]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
  [if (isJDK50)][comment]//Class/genOperation.annotations.insert.javajetinc[/comment]
[comment]<%@ include file="Class/genOperation.annotations.insert.javajetinc" fail="silent" %>[/comment]
  [/if]
[/if]
[if (not isImplementation) ]
	[genOperation.getTypeParameters(genClass)/][genOperation.getImportedType(genClass)/] [genOperation.getName()/]([genOperation.getParameters(genClass)/])[genOperation.getThrows(genClass)/];

[else]
	public [genOperation.getTypeParameters(genClass)/][genOperation.getImportedType(genClass)/] [genOperation.getName()/]([genOperation.getParameters(genClass)/])[genOperation.getThrows(genClass)/] {
  [if (genOperation.hasBody()) ]
		[genOperation.getBody(genModel.getIndentation())/]
  [else]
	[if (genOperation.isListType())]
		[if (genOperation.isPrimtiveList())]
			 [genOperation.genGetContentPrimitiveType(genModel, genPackage)/]
		[else]
			[genModel.getImportedName('org.eclipse.emf.common.util.EList')/]<? extends [genModel.getImportedName('org.eclipse.emf.ecore.EObject')/]> umlList = (([genModel.getImportedName(genClass.ecoreClass.findUMLMetaElement(genModel).getPackagePathFromUML()+'.'+genClass.ecoreClass.getUMLMetaElement(genModel))/])get__Represented()).[genOperation.ecoreOperation.findUMLGetAccessor(genModel)/]([genParameters(genOperation)/]);
			[genOperation.getImportedType(genClass)/] update = new [genModel.getImportedName('org.eclipse.emf.common.util.BasicEList')/]<[genOperation.getTypeGenClass().getQualifiedInterfaceName()/]>();
	
			for([genModel.getImportedName('org.eclipse.emf.ecore.EObject')/] umlElement : umlList) {
	
				[genModel.getImportedName('org.eclipse.emf.ecore.EObject')/] representingElement = [genModel.getImportedName(genPackage.getUtilitiesPackageName()+'.Wrapper')/].getInstance().findOrCreateSpecific(([genModel.getImportedName('org.eclipse.emf.ecore.EObject')/])umlElement);
				if(representingElement != null) {
					if(representingElement instanceof [genOperation.getTypeGenClass().getQualifiedInterfaceName()/]) {
						update.add(([genOperation.getTypeGenClass().getQualifiedInterfaceName()/])representingElement);
					} 	
				}			
			}

			return update;
		[/if]

	[else]	
		[if (genOperation.isPrimitive())]
 			[genOperation.genGetContentPrimitiveType(genModel, genPackage)/]
		[else]
			[genModel.getImportedName('org.eclipse.emf.ecore.EObject')/] umlElement = (([genModel.getImportedName(genClass.ecoreClass.findUMLMetaElement(genModel).getPackagePathFromUML()+'.'+genClass.ecoreClass.getUMLMetaElement(genModel))/])get__Represented()).[genOperation.ecoreOperation.findUMLGetAccessor(genModel)/]([genParameters(genOperation)/]);
	
			if(umlElement [if (genOperation.isEnumType())] !=null [else] instanceof [genModel.getImportedName('org.eclipse.emf.ecore.EObject')/] [/if]) {
			
	
				[if (genOperation.isEnumType())]
					Enum representingElement = [genModel.getImportedName(genPackage.getUtilitiesPackageName()+'.Wrapper')/].getInstance().getEnumMappingFromUML((Enum)umlElement);
				[else]
					[genModel.getImportedName('org.eclipse.emf.ecore.EObject')/] representingElement =  [genModel.getImportedName(genPackage.getUtilitiesPackageName()+'.Wrapper')/].getInstance().findOrCreateSpecific(([genModel.getImportedName('org.eclipse.emf.ecore.EObject')/])umlElement);
				[/if]
				
				if(representingElement != null) {
					if(representingElement instanceof [genOperation.getTypeGenClassifier().getAppropriateQualifiedTypeName()/]) {
				
							return ([genOperation.getTypeGenClassifier().getAppropriateQualifiedTypeName()/])representingElement;
	
					}
				}
			} 
	
			return null;
		[/if]	
	[/if]

  [/if]
	}

[/if]
[comment]<%@ include file="Class/genOperation.insert.javajetinc" fail="silent" %>[/comment]
[comment]<%@ end %><%//Class/implementedGenOperation.override.javajetinc%>[/comment]
[/template]

[template public genParameters(genOperation : GenOperation)]
	[for (param : GenParameter | genOperation.genParameters) separator (',')]
		[if (param.isPrimitive() or genOperation.isInvariant() or param.isPrimtiveList())]
			[param.getName()/]
		[else]
			[if (param.isListType())]
				[param.getGenModel().getImportedName(param.getGenPackage().getUtilitiesPackageName()+'.Wrapper')/].getInstance().toRepresentedList([param.getName()/])
			[else]
				[if (param.isEnumType())]
					(([param.getGenModel().getImportedName(param.getTypeGenClassifier().getEcoreClassifier().findUMLMetaElement(param.getGenModel()).getPackagePathFromUML()+'.'+param.getTypeGenClassifier().getEcoreClassifier().getUMLMetaElement(param.getGenModel()))/])[param.getGenModel().getImportedName(param.getGenPackage().getUtilitiesPackageName()+'.Wrapper')/].getInstance().getEnumMappingFromSpecific([param.getName()/]))
				[else]
					([param.getGenModel().getImportedName(param.getTypeGenClass().ecoreClass.findUMLMetaElement(param.getGenModel()).getPackagePathFromUML()+'.'+param.getTypeGenClass().ecoreClass.getUMLMetaElement(param.getGenModel()))/])[param.getName()/].get__Represented()
				[/if]
			[/if]
		[/if]
		
	[/for]
[/template]

[template public genGetContentPrimitiveType(genOperation : GenOperation, genModel: GenModel, genPackage : GenPackage)]

	[if (genOperation.isVoid())]
		(([genModel.getImportedName(genClass.ecoreClass.findUMLMetaElement(genModel).getPackagePathFromUML()+'.'+genClass.ecoreClass.getUMLMetaElement(genModel))/])get__Represented()).[genOperation.ecoreOperation.findUMLGetAccessor(genModel)/]([genParameters(genOperation)/]);
	[else]
		return  (([genModel.getImportedName(genOperation.genClass.ecoreClass.findUMLMetaElement(genModel).getPackagePathFromUML()+'.'+genClass.ecoreClass.getUMLMetaElement(genModel))/])get__Represented()).[genOperation.ecoreOperation.findUMLGetAccessor(genModel)/]([genParameters(genOperation)/]);
	[/if]
	
[/template]
