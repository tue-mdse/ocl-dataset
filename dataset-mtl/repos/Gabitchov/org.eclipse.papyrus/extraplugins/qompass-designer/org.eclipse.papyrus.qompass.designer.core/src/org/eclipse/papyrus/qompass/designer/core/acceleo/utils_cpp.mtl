[module utils_cpp('http://www.eclipse.org/uml2/5.0.0/UML')/]

[import org::eclipse::papyrus::qompass::designer::core::acceleo::UMLTool /]

[comment
	create the C++ signature for an operation (including parenthesis)
/]
[template public cppSignature(operation : Operation)]
[operation.name/] ([for (parameter : Parameter | operation.ownedParameter) separator(', ')]
	[parameter.cppParameter()/]
[/for]
[/template]


[comment
	make a C++ call, pass all parameters except the return parameter
/]
[template public cppCall(operation : Operation)]
[operation.name/]([for (parameter : Parameter | operation.parametersNonRet()) separator(', ')
	][parameter.name/][/for])
[/template]

[comment
	make a C++ call, pass all parameters except the return parameter, prefix with "return",
	if there is a return type in the operations declaration
/]
[template public returnCppCall(operation : Operation)]
[if not (operation.type = null)]return [/if][cppCall()/]
[/template]

[template public cppParameter(parameter : Parameter)]
	[parameter.type/][if (parameter.direction = 'out')]_out[/if] [parameter.name/]
[/template]

[template public cppType(type : Type) post(trim())]
	[if (type.qualifiedName = 'UMLPrimitiveTypes::Boolean')]
		bool
	[elseif (type.qualifiedName = 'UMLPrimitiveTypes::Integer')]
		int
	[else]
		[type.dereferenceTypedef()/]
	[/if]
[/template]


[template public cppRetType(operation : Operation)]
	[if (operation.type = null)]
	void
	[else]
	[operation.type.cppType()/]
	[/if]
[/template]

[comment
	open a set of C++ namespaces associated with the packages of of the passed named element
	TODO: use indentTab? => requires making this script recursive
/]
[template public openNamespace(namedElement : NamedElement)]
	[comment need to include referenced types (assuming a naming convention) /]
	[for (ns : Namespace | namedElement.usedNamespaces()->reverse())]
		namespace [ns.name/]
	[/for]
[/template]

[comment
	close a set of C++ namespaces associated with the packages of of the passed named element
/]
[template public closeNamespace(namedElement : NamedElement)]
	[comment need to include referenced types (assuming a naming convention) /]
	[for (ns : Namespace | namedElement.usedNamespaces())]
	}; // of namespace [ns.name/]
	[/for]
[/template]

[comment
<%script type="uml.Class" name="partSignature" post="trim()"%>
<%for (part.sep(", ")) {%><%if (!type.isCompImpl) {%><%type.name%> * <%name%><%}%><%}%>
/]