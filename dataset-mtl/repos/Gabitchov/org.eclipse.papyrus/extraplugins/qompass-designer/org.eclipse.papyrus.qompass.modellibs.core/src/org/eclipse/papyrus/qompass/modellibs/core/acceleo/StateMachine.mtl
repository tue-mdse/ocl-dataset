[comment encoding = UTF-8 /]
[module StateMachine('http://www.eclipse.org/uml2/5.0.0/UML')/]

[import org::eclipse::papyrus::qompass::designer::core::acceleo::EnumService/]
[import org::eclipse::papyrus::qompass::designer::core::acceleo::UMLTool/]
[import org::eclipse::papyrus::qompass::modellibs::core::acceleo::acceptableEvents/]

[template public StateMachine(clazz : BehavioredClassifier)]

// processEvents body - generated by Qompass 
//
// supports ports [if clazz.oclIsKindOf(Class)][for (port : Port | clazz.oclAsType(Class).ownedPort)] [literal('PortEnum_'+clazz.name, 'port_'+port.name)/] [/for][/if]
TRACEpr (AO);
PR ("IN [clazz.name/]::checkPreCond()" << showI);
	
[for (sm : StateMachine | ownedBehavior->select(oclIsKindOf(StateMachine)))]
core::ContainerServices::CallEvent_ event;
int timeout;
int newState;
int newSubSate;

switch(m_currentState)
{
	[for (state : State | sm.region.subvertex->select(oclIsKindOf(State)))]
	case [literal('LStateIDs_'+clazz.name, 'STATE_'+state.name)/]:
		// -------- treatment of accepted events
[state.acceptableEvents()/]
[comment		// -------- treatment of ignored events /]
[comment [state.ignoredEvents()/]
[comment		// -------- treatment of rejected events /]
[comment [state.rejectedEvent()/]
[comment		// -------- not accepted nor ignored neither rejected
		// else not acceptable event
/]
		break;
	[/for]
	
	default:
		OSAL_ERROR ("Inconsistent state");
		break;
}
if (animOut != 0) {
	animOut->enterState(newState, [clazz.fragment()/]);
}

[/for]
[/template]


[query public boundPackageRef(actual : Type) : Package =
	invoke('org.eclipse.papyrus.qompass.designer.core.acceleo.UMLTool',
		'boundPackageRef(org.eclipse.uml2.uml.Type)',
		Sequence{actual}) /]