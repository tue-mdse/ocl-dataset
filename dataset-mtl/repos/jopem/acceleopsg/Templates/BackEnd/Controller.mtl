[module Controller('http://www.eclipse.org/uml2/5.0.0/UML')]
[import org::sadf::generator::files::ControllerAdapterPattern/]

[template public generateElementController(aClass : Class) ? (aClass.getEAnnotation('crud').toString().contains('crud'))]

[comment @main /]
[file ('main/java/'.concat(aClass._package.name.replaceAll('\\.','/')).concat('/catalogo/').concat('/controller/').concat(aClass.name).concat('Controller.java'), false), 'UTF-8') ]
package [_package.name/].catalogo.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.UriComponentsBuilder;

import [_package.name/].catalogo.bean.[name.toUpperFirst()/]Bean;
import [_package.name/].domain.[name.toUpperFirst()/];
import [_package.name/].service.[name.toUpperFirst()/]Service;

@Controller
public class [name.toUpperFirst()/]Controller {

	@Autowired
	private [name.toUpperFirst()/]Service [name.toLower()/]Service;
	[name.toUpperFirst()/] [name.toLower()/] = new [name.toUpperFirst()/]();

	@RequestMapping(value = "/[name.toLower()/]", method = RequestMethod.GET, produces = "application/json")
	public @ResponseBody  List<[name.toUpperFirst()/]> get[name.toUpperFirst()/]s(@RequestParam(value="q", defaultValue="") 
	String query, HttpServletRequest request) {

       	List<[name.toUpperFirst()/]> list[name.toUpperFirst()/] = [name.toLower()/]Service.list[name.toUpperFirst()/]ss([name.toLower()/]);
	
		if (query.equals("")) {
       		list[name.toUpperFirst()/] = [name.toLower()/]Service.list[name.toUpperFirst()/]ss([name.toLower()/]);
		} else {
			list[name.toUpperFirst()/] = [name.toLower()/]Service.list[name.toUpperFirst()/]ssQuery([name.toLower()/], query);
		}	
	
		return list[name.toUpperFirst()/];
	}

	
	@RequestMapping(value = "/[name.toLower()/]/{id}", method = RequestMethod.GET, produces = "application/json")
	    public @ResponseBody  [name.toUpperFirst()/] get[name.toUpperFirst()/](@PathVariable("id") int id) {
	        
	        [name.toLower()/].setId(id);
	        
	        [name.toUpperFirst()/] [name.toLower()/] = null;
	        [name.toLower()/] = [name.toLower()/]Service.get[name.toUpperFirst()/](id);
			return [name.toLower()/];
	 }



	 @RequestMapping(value = "/[name.toLower()/]", method = RequestMethod.POST)
	    public ResponseEntity<Void> create[name.toUpperFirst()/](@RequestBody [name.toUpperFirst()/] [name.toLower()/],    UriComponentsBuilder ucBuilder) {
	   
	        [name.toLower()/]Service.add[name.toUpperFirst()/]([name.toLower()/]);
	 
	        HttpHeaders headers = new HttpHeaders();
	        headers.setLocation(ucBuilder.path("/[name.toLower()/]/{id}").buildAndExpand([name.toLower()/].getId()).toUri());
	        return new ResponseEntity<Void>(headers, HttpStatus.CREATED);
	 }
		
	 @RequestMapping(value = "/[name.toLower()/]/{id}", method = RequestMethod.PUT)
	    public ResponseEntity<[name.toUpperFirst()/]> actualizar[name.toUpperFirst()/](@PathVariable("id") int id, @RequestBody [name.toUpperFirst()/] [name.toLower()/]) {
	        
	        
	        [name.toUpperFirst()/] [name.toLower()/]Found = [name.toLower()/]Service.get[name.toUpperFirst()/](id);
	         
	        if ([name.toLower()/]Found==null) {
	            System.out.println("User with id " + id + " not found");
	            return new ResponseEntity<[name.toUpperFirst()/]>(HttpStatus.NOT_FOUND);
	        }
	 
			[for (attribute)]
				[aClass.name.toLower()/]Found.set[name.toUpperFirst()/]([aClass.name.toLower()/].get[name.toUpperFirst()/]());
       		[/for]
			[name.toLower()/].setId(null);
	        
	        [name.toLower()/]Service.edit[name.toUpperFirst()/]([name.toLower()/]Found);
	        return new ResponseEntity<[name.toUpperFirst()/]>([name.toLower()/]Found, HttpStatus.OK);
	  } 	
	
		
		@RequestMapping(value = "/[name.toLower()/]/{id}", method = RequestMethod.DELETE)
	    public ResponseEntity<[name.toUpperFirst()/]> delete[name.toUpperFirst()/](@PathVariable("id") int id) {
	    	 System.out.println("Fetching & Deleting User with id " + id);
	    	 
	         [name.toUpperFirst()/] [name.toLower()/] = [name.toLower()/]Service.get[name.toUpperFirst()/](id);
	         if ([name.toLower()/] == null) {
	             System.out.println("Unable to delete. Cuenta with id " + id + " not found");
	             return new ResponseEntity<[name.toUpperFirst()/]>(HttpStatus.NOT_FOUND);
	         }
	  
	         [name.toLower()/]Service.delete[name.toUpperFirst()/]([name.toLower()/]);
	         return new ResponseEntity<[name.toUpperFirst()/]>(HttpStatus.NO_CONTENT);
		}




	@RequestMapping(value = "/save[name.toUpperFirst()/]", method = RequestMethod.POST)
	public @ResponseBody String save[name.toUpperFirst()/](
			@ModelAttribute("command") [name.toUpperFirst()/]Bean [name.toLower()/]Bean) {


		[name.toUpperFirst()/] [name.toLower()/] = prepareModel([name.toLower()/]Bean);
		[name.toLower()/]Service.add[name.toUpperFirst()/]([name.toLower()/]);

		return "SUCCESS";
	}
	
	@RequestMapping(value = "/edit[name.toUpperFirst()/]", method = RequestMethod.POST)
	public @ResponseBody String edit[name.toUpperFirst()/](
			@ModelAttribute("command") [name.toUpperFirst()/]Bean [name.toLower()/]Bean) {


		[name.toUpperFirst()/] [name.toLower()/] = prepareModel([name.toLower()/]Bean);
		[name.toLower()/]Service.edit[name.toUpperFirst()/]([name.toLower()/]);
		return "SUCCESS";
	}

	@RequestMapping(value = "/search[name.toUpperFirst()/]", method = RequestMethod.GET)
	public ModelAndView add[name.toUpperFirst()/](
			@ModelAttribute("command") [name.toUpperFirst()/]Bean [name.toLower()/]Bean,
			BindingResult result) {

		Map<String, Object> model = new HashMap<String, Object>();
		[name.toUpperFirst()/] [name.toLower()/] = null;
		if ([name.toLower()/]Bean != null)
			[name.toLower()/] = prepareModel([name.toLower()/]Bean);
		model.put("[name.toLower()/]s",
				prepareListofBean([name.toLower()/]Service.list[name.toUpperFirst()/]ss([name.toLower()/])));
		return new ModelAndView("search[name.toUpperFirst()/]", model);
	}

	@RequestMapping(value = "/delete[name.toUpperFirst()/]", method = RequestMethod.POST)
	public ModelAndView delete[name.toUpperFirst()/](
			@ModelAttribute("command") [name.toUpperFirst()/]Bean [name.toLower()/]Bean,
			BindingResult result) {
		System.out.println("delete " + [name.toLower()/]Bean.getId());
		[name.toLower()/]Service.delete[name.toUpperFirst()/](prepareModel([name.toLower()/]Bean));
		Map<String, Object> model = new HashMap<String, Object>();
		model.put("[name.toLower()/]", null);
		model.put("[name.toLower()/]s",
				prepareListofBean([name.toLower()/]Service.list[name.toUpperFirst()/]ss(null)));
		return new ModelAndView("search[name.toUpperFirst()/]", model);
	}

	@RequestMapping(value = "/entry[name.toUpperFirst()/]", method = RequestMethod.GET)
	public ModelAndView entry[name.toUpperFirst()/]() {
		return new ModelAndView("redirect:/search[name.toUpperFirst()/]");
	}

	private [name.toUpperFirst()/] prepareModel([name.toUpperFirst()/]Bean [name.toLower()/]Bean) {
		[name.toUpperFirst()/] [name.toLower()/] = new [name.toUpperFirst()/]();

		[for (attribute)]
		[aClass.name.toLower()/].set[name.toUpperFirst()/]([aClass.name.toLower()/]Bean.get[name.toUpperFirst()/]());
        [/for]
		[name.toLower()/].setId([name.toLower()/]Bean.getId());
		[name.toLower()/]Bean.setId(null);
		return [name.toLower()/];
	}

	private List<[name.toUpperFirst()/]Bean> prepareListofBean(List<[name.toUpperFirst()/]> [name.toLower()/]s) {
		List<[name.toUpperFirst()/]Bean> beans = null;
		if ([name.toLower()/]s != null && ![name.toLower()/]s.isEmpty()) {
			beans = new ArrayList<[name.toUpperFirst()/]Bean>();
			[name.toUpperFirst()/]Bean bean = null;
			for ([name.toUpperFirst()/] [name.toLower()/] : [name.toLower()/]s) {
				bean = new [name.toUpperFirst()/]Bean();

				[for (attribute)]
                bean.set[name.toUpperFirst()/]([aClass.name.toLower()/].get[name.toUpperFirst()/]());
                [/for]
				bean.setId([name.toLower()/].getId());
				beans.add(bean);
			}
		}
		return beans;
	}

}

[if (aClass.getOperations() -> asSequence() -> size()) > 0]
	[comment aClass.generateElementControllerAdapter('sda')/]
[/if]

[/file]
[/template]
