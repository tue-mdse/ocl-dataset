[comment encoding = UTF-8 /]
[module ServiceImpl('http://www.eclipse.org/uml2/5.0.0/UML')]
[import org::sadf::generator::files::ServiceAdapterPatternImpl/]


[template public generateElementServiceImpl(aClass : Class) ? (aClass.getEAnnotation('crud').toString().contains('crud'))]
[comment @main /]
[file ('main/java/'.concat(aClass._package.name.replaceAll('\\.','/')).concat('/service/').concat('/impl/').concat(aClass.name).concat('ServiceImpl.java'), false), 'UTF-8')]

[if (aClass.getOperations() -> asSequence() -> size()) > 0]
	[comment aClass.generateElementServiceAdapterImpl('sda')/]
[/if]

package [aClass._package.name.toLower()/].service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import [aClass._package.name.toLower()/].repository.[name.toUpperFirst()/]Repository;
import [aClass._package.name.toLower()/].domain.[name.toUpperFirst()/];
import [aClass._package.name.toLower()/].service.[name.toUpperFirst()/]Service;

@Service("[name.toLower()/]Service")
@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
public class [name.toUpperFirst()/]ServiceImpl implements [name.toUpperFirst()/]Service {

	@Autowired
	private [name.toUpperFirst()/]Repository [name.toLower()/]Repository;

	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public void add[name.toUpperFirst()/]([name.toUpperFirst()/] [name.toLower()/]) {
		
		[name.toLower()/]Repository.add[name.toUpperFirst()/]([name.toLower()/]);
	}

	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public void edit[name.toUpperFirst()/]([name.toUpperFirst()/] [name.toLower()/]) {
		
		[name.toLower()/]Repository.edit[name.toUpperFirst()/]([name.toLower()/]);
	}
	
	
	public List<[name.toUpperFirst()/]> list[name.toUpperFirst()/]ss([name.toUpperFirst()/] [name.toLower()/]) {

		return [name.toLower()/]Repository.list[name.toUpperFirst()/]ss([name.toLower()/]);
	}

	public [name.toUpperFirst()/] get[name.toUpperFirst()/](int empid) {

		return [name.toLower()/]Repository.get[name.toUpperFirst()/](empid);
	}

	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public void delete[name.toUpperFirst()/]([name.toUpperFirst()/] [name.toLower()/]) {
		System.out.println("Entrando al delete[name.toUpperFirst()/]");

		 [name.toLower()/]Repository.delete[name.toUpperFirst()/]([name.toLower()/]);
	}


	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public List<[name.toUpperFirst()/]> list[name.toUpperFirst()/]sPagination([name.toUpperFirst()/] [name.toLower()/], int page, int size) {

		return [name.toLower()/]Repository.list[name.toUpperFirst()/]sPagination([name.toLower()/], page, size);
	}
	
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public int getTotalPages(int size) {

		return [name.toLower()/]Repository.getTotalPages(size);
	}

	public List<[name.toUpperFirst()/]> list[name.toUpperFirst()/]ssQuery([name.toUpperFirst()/] [name.toLower()/], String query) {
		// TODO Auto-generated method stub
		return [name.toLower()/]Repository.list[name.toUpperFirst()/]ssQuery([name.toLower()/], query);
	}


}

[/file]
[/template]
