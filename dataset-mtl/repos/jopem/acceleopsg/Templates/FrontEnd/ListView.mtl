[comment encoding = UTF-8 /]
[module ListView('http://www.eclipse.org/uml2/5.0.0/UML')]


[template public generateElementListView(aClass : Class)? (aClass.getEAnnotation('crud').toString().contains('crud'))]
[comment @main /]
[file ((aClass.name.toUpperFirst()).concat('/').concat(aClass.name.toUpperFirst()).concat('List.js'), false), 'UTF-8') ]

import React, { Component, PropTypes } from 'react';
import { Link } from 'react-router';
import { connect } from 'react-redux';
import SweetAlert from 'react-bootstrap-sweetalert';
import { Row, Col, Table, ButtonToolbar } from 'react-bootstrap';

import { fetch[name.toUpperFirst()/]List } from './actions';

import Loading from '../../Common/Loading/Loading';

class [name.toUpperFirst()/]List extends Component {

  componentWillMount() {
    this.props.fetch[name.toUpperFirst()/]List();
  }

  onRetryLoad() {
    this.props.fetch[name.toUpperFirst()/]List();
  }

  renderList() {
    return this.props.[name.toLower()/].all.map((item) => {
      return (
        <tr key={item.id}>
        [for (p: Property | aClass.getAllAttributes())]
		<td>{item.[p.name.toLower()/]}</td>	
		[/for]
          <td>
            <ButtonToolbar>
              <Link className="btn btn-default" to={`/[name.toLower()/]/edit/${item.id}`}>
                <em className="fa fa-pencil" />
              </Link>
              <Link className="btn btn-default" to={`/[name.toLower()/]/delete/${item.id}`}>
                <em className="fa fa-trash" />
              </Link>
            </ButtonToolbar>
          </td>
        </tr>
      );
    });
  }

  render() {
    if ((this.props.[name.toLower()/] || {}).loading) {
      return (
        <Loading />
      );
    }

    if ((this.props.[name.toLower()/] || {}).error) {
      return (
        <SweetAlert
          type="error"
          title={this.props.[name.toLower()/].error.message}
          content="Comunicate con el Administrador del Sistema o intentalo más tarde."
          confirmBtnText="Intentar de nuevo"
          onConfirm={this.onRetryLoad.bind(this)} />
      );
    }

    return (
      <Row>
        <Col sm={12}>
          <Table responsive striped>
            <thead>
              <tr>
				[for (p: Property | aClass.getAllAttributes())]
				<th>[p.name.toUpperFirst()/]</th>
				[/for]
				<th>Operaciones</th>
              </tr>
            </thead>
            <tbody>
              {this.renderList()}
            </tbody>
          </Table>
        </Col>
      </Row>
    );
  }
}

[name.toUpperFirst()/]List.propTypes = {
  fetch[name.toUpperFirst()/]List: PropTypes.func.isRequired,
  [name.toLower()/]: PropTypes.object.isRequired
};

function mapStateToProps(state) {
  return {
    [name.toLower()/]: state.[name.toLower()/]
  };
}

export default connect(mapStateToProps, { fetch[name.toUpperFirst()/]List })([name.toUpperFirst()/]List);

[/file]
[/template]
