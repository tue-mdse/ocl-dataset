[comment encoding = UTF-8 /]
[module CreateView('http://www.eclipse.org/uml2/5.0.0/UML')]


[template public generateElementView(aClass : Class)? (aClass.getEAnnotation('crud').toString().contains('crud'))]
[comment @main /]
[file ((aClass.name.toUpperFirst()).concat('/').concat(aClass.name.toUpperFirst()).concat('Create.js'), false), 'UTF-8') ]

import React, { Component, PropTypes } from 'react';
import { Link } from 'react-router';
import { connect } from 'react-redux';
import { Panel, ButtonToolbar, Button } from 'react-bootstrap';
import { reduxForm, Field } from 'redux-form';
import { toastr } from 'react-redux-toastr';

import ContentWrapper from "../../Common/Layout/ContentWrapper";
import FormTextField from "../../Common/Form/FormTextField";
import { fetch[name.toUpperFirst()/], create[name.toUpperFirst()/] } from './actions';

class [name.toUpperFirst()/]Create extends Component {

  constructor(props) {
    super(props);
    this.onFormSubmit = this.onFormSubmit.bind(this);
  }

  onFormSubmit(props) {
    this.props.create[name.toUpperFirst()/](props)
      .then(() => {
        this.context.router.push('/[name.toLower()/]_mgmnt');
        toastr.success("[name.toUpperFirst()/] creado", `El [name.toUpperFirst()/] fué creado exitosamente.`);
      });
  }

  render() {
    const { handleSubmit, pristine, submitSucceeded } = this.props;

    return (
      <ContentWrapper>
        <ol className="breadcrumb pull-right">
           <li>
             <Link to="/">Inicio</Link>
           </li>
           <li className="active">[name.toUpperFirst()/]</li>
           <li>
             <Link to="/[name.toLower()/]_mgmnt">Administrar [name.toUpperFirst()/]</Link>
           </li>
           <li className="active">Agregar [name.toUpperFirst()/]</li>
        </ol>
        <h3>
          <span className="mr">Agregar de [name.toUpperFirst()/]</span>
        </h3>
        <Panel header="[name.toUpperFirst()/]">
          <form
            role="form"
            onSubmit={handleSubmit(this.onFormSubmit)}>
			[for (p: Property | aClass.getAllAttributes())]
			<Field
              name="[p.name.toLower()/]"
              component={FormTextField}
              label="[p.name.toUpperFirst()/]" />
			[/for]
            <ButtonToolbar>
              <Button
                type="submit"
                bsStyle="primary"
                disabled={pristine || submitSucceeded}>
                  <i className={`${submitSucceeded ? 'fa fa-refresh fa-spin' : 'fa fa-save'}`} />
                  <span> Guardar</span>
              </Button>
            </ButtonToolbar>
          </form>
        </Panel>
      </ContentWrapper>
    );
  }
}

[name.toUpperFirst()/]Create.propTypes = {
  handleSubmit: PropTypes.func.isRequired,
  pristine: PropTypes.bool.isRequired,
  submitSucceeded: PropTypes.bool.isRequired,
  create[name.toUpperFirst()/]: PropTypes.func.isRequired
};

[name.toUpperFirst()/]Create.contextTypes = {
  router: PropTypes.object.isRequired
};

const validate = values => {
  const errors = {};

  [for (p: Property | aClass.getAllAttributes())]	
  if (!values.[p.name.toLower()/]) {
    errors.[p.name.toLower()/] = 'Campo requerido.';
  }
  [/for]	

  return errors;
};

function mapStateToProps(state) {
  return { [name.toLower()/]: state.[name.toLower()/].item };
}

const form = reduxForm({
  form: '[name.toUpperFirst()/]CreateForm',
  validate
});

export default connect(mapStateToProps, { fetch[name.toUpperFirst()/], create[name.toUpperFirst()/] })(form([name.toUpperFirst()/]Create));

[/file]
[/template]
