[comment encoding = UTF-8 /]
[module Reducer('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public generateElementReducer(aClass : Class)? (aClass.getEAnnotation('crud').toString().contains('crud'))]
[comment @main /]
[file ((aClass.name.toUpperFirst()).concat('/').concat('reducer.js'), false), 'UTF-8') ]
import {
  FETCH_[name.toUpper()/]_LIST_REQUEST,
  FETCH_[name.toUpper()/]_LIST_SUCCESS,
  FETCH_[name.toUpper()/]_LIST_FAILURE,
  FETCH_[name.toUpper()/]_REQUEST,
  FETCH_[name.toUpper()/]_SUCCESS,
  FETCH_[name.toUpper()/]_FAILURE
} from './actions';

const INITIAL_STATE = { all: ['[]'/], item: null, loading: false, error:null };

export default function (state = INITIAL_STATE, action) {
  let error;

  switch (action.type) {
    case FETCH_[name.toUpper()/]_LIST_REQUEST:
      return { ...state, all: ['[]'/], loading: true, error: null };

    case FETCH_[name.toUpper()/]_LIST_SUCCESS:
      return { ...state, all: action.payload.data, loading: false, error: null };

    case FETCH_[name.toUpper()/]_LIST_FAILURE:
      error = action.payload.data || { message: action.payload.message };
      return { ...state, all: ['[]'/], loading: false, error: error };

    case FETCH_[name.toUpper()/]_REQUEST:
      return { ...state, item: null, loading: true, error: null};

    case FETCH_[name.toUpper()/]_SUCCESS:
      return { ...state, item: action.payload.data, loading: false, error: null };

    case FETCH_[name.toUpper()/]_FAILURE:
      error = action.payload.data || { message: action.payload.message };
      return { ...state, item: null, loading: false, error: error };
  }

  return state;
}
[/file]
[/template]
