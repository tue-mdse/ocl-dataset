[comment encoding = UTF-8 /]
[module RoutesView('http://www.eclipse.org/uml2/5.0.0/UML')]


[template public generateElementRoutesView(aModel : Model)]
[comment @main /]
[file (('VIsta').concat('/routes.js'), false), 'UTF-8') ]
import React from 'react';
import { Route, IndexRoute } from 'react-router';

import App from './features/App/App';
import HomePage from './features/Home/Home';
import LoginPage from './features/Common/Pages/Login';
import NotFoundPage from './features/Common/Pages/NotFound';

[for (p : Package | aModel.packagedElement->filter(Package))]
				[if p.name.equalsIgnoreCase('com.softtek.app.test')]	
	 				[for (c : Class | p.packagedElement->filter(Class))]
      					[if c.getEAnnotation('crud').toString().contains('crud')]	
import [c.name.toUpperFirst()/]Management from './features/Entities/[c.name.toUpperFirst()/]/[c.name.toUpperFirst()/]Management';
import [c.name.toUpperFirst()/]Create from './features/Entities/[c.name.toUpperFirst()/]/[c.name.toUpperFirst()/]Create';
import [c.name.toUpperFirst()/]Edit from './features/Entities/[c.name.toUpperFirst()/]/[c.name.toUpperFirst()/]Edit';
import [c.name.toUpperFirst()/]Delete from './features/Entities/[c.name.toUpperFirst()/]/[c.name.toUpperFirst()/]Delete';
						[/if]        
   					[/for]
				[/if]	
[/for]

// import ProductoManagement from './features/Entities/Producto/ProductoManagement';
// import ProductoCreate from './features/Entities/Producto/ProductoCreate';
// import ProductoEdit from './features/Entities/Producto/ProductoEdit';
// import ProductoDelete from './features/Entities/Producto/ProductoDelete';

import RoleManagement from './features/Common/Security/Role/RoleManagement';
import RoleEdit from './features/Common/Security/Role/RoleEdit';
import RoleDelete from './features/Common/Security/Role/RoleDelete';

export default (
  <Route path="/" component={App}>
    <IndexRoute component={HomePage}/>

[for (p : Package | aModel.packagedElement->filter(Package))]
				[if p.name.equalsIgnoreCase('com.softtek.app.test')]	
	 				[for (c : Class | p.packagedElement->filter(Class))]
      					[if c.getEAnnotation('crud').toString().contains('crud')]	
	<Route path="[c.name.toLower()/]_mgmnt" component={[c.name.toUpperFirst()/]Management} />
	<Route path="[c.name.toLower()/]" component={[c.name.toUpperFirst()/]Create} />
	<Route path="[c.name.toLower()/]/edit/:id" component={[c.name.toUpperFirst()/]Edit} />
	<Route path="[c.name.toLower()/]/delete/:id" component={[c.name.toUpperFirst()/]Delete} />
						[/if]        
   					[/for]
				[/if]	
[/for]

    <Route path="roles" component={RoleManagement} />
    <Route path="roles/edit/:id" component={RoleEdit} />
    <Route path="roles/delete/:id" component={RoleDelete} />

    <Route path="/login" component={LoginPage}/>
    <Route path="*" component={NotFoundPage}/>
  </Route>
);

//---- Mover junto a las demás rutas
// <Route path="producto_mgmnt" component={ProductoManagement} />
// <Route path="producto" component={ProductoCreate} />
// <Route path="producto/edit/:id" component={ProductoEdit} />
// <Route path="producto/delete/:id" component={ProductoDelete} />




[/file]
[/template]
