[comment encoding = UTF-8 /]
[module entity('uri:rok/model')/]
[import rok::generator::service::texttools/]
[import rok::generator::java::template::common /]
[import rok::generator::java::template::ref/]
[import rok::generator::java::template::mClass /]

[import rok::generator::service::rokservices /]

[template public entity_getFilePath(e : MClass) post (clearSpace())]
java/[e.parentDomainsPath()/]/[e.filterNameCapitalized()/].java
[/template]


[template public entity_getImportList(e : MClass) post (javaImports()) ]
java.io.Serializable

javax.annotation.Nonnull
javax.annotation.Nullable

javax.validation.constraints.NotNull
javax.validation.constraints.Pattern
javax.validation.constraints.Size
javax.validation.constraints.Min
javax.validation.constraints.Max

javax.ws.rs.Path

rok.api.constraints.ValidRef

rok.model.exception.BadRequestException
rok.model.exception.ApiException

rok.model.Entity
rok.model.EntityRef
rok.model.MClass
rok.model.metadata.Metadata
rok.model.Transformer
rok.model.Uniform
rok.model.Addressable

[e.listEntityJavaImports()/]

[e.ref_getImportList()/]
[e.mClass_getImportList()/]
[/template]

[template public entity_writeFile(e : MClass)]
[file (e.entity_getFilePath(), false, 'UTF-8')]
package	[e.parentDomains()/];

[e.entity_getImportList()/]

[e.entity_getContent()/]
[e.ref_getContent()/]
[e.mClass_getContent()/]
}
[/file]
[/template]

[template public entity_getContent(e : MClass)]
/**
 * 
[e.javadoc()/]
[if (e.keyProperties()->size() > 0)]
[if (e.keyProperties()->size() > 1)]
 * <p>Les propriétés permettant d'assurer l'unicité des {@link [e.filterNameCapitalized()/]} (les clés d'unicités) sont :</p>
[else]
 * <p>La propriété permettant d'assurer l'unicité des {@link [e.filterNameCapitalized()/]} (la clé d'unicité) est :</p>
[/if]
 * <dl>
 [for (p : Property | e.keyProperties())]
 * <dt>[p.filterName()/]</dt><dd>[p.javadoc()/]</dd>
 [/for]
 * </dl>
[/if]
 * <p>Le motif de l'URI : <code>[e.getUriPattern()/]</code>.</p>
[for (p : Property | e.keyProperties()->filter(EntityProperty)) before(' * <p>Avec :</p><dl>\n') after(' * </dl>\n')]
 * <dt>{[p.filterName()/]}</dt>
 * <dd>[p.getType().getUriPattern()/]</dd>
[/for]
 */
@Path("[e.getUriPattern()/]")
public class [e.filterNameCapitalized()/] implements Entity<[e.filterNameCapitalized()/]> {

	/**
	 * <p>Singleton permettant d'accéder à cette MClass simplement via un <code>import static</code>.
	 * <p>Exemple :</p>
	 * <pre>
	 * import static [e.parentDomains()/].[e.className_entity()/].m[e.className_entity()/];
	 * </pre>
	 */
	public static final [className_mClass(e)/] m[e.className_entity()/] = new [className_mClass(e)/]();

	public static final ListRef<[e.className_entity()/]> all = m[e.className_entity()/].getAll();

	@Override
	@Nonnull
	public final [className_mClass(e)/] getMclass() {
		return m[e.filterNameCapitalized()/];
	}
[for (p : Property | e.propertiesWithoutKey())]

	/**
	 * [p.javadoc()/]
	 */[p.contraintAnnotations()/]
	private [if (p.isReadOnly())]final[/if] [p.javaType(false)/] [p.filterName()/]; 
[/for]
	
	/**
	 * <p>Constructeur permettant d'initialiser les propriétés définies comme étant les clés de l'instance mais également des propriétés en lectures seules</p>
	 *
[for (p : Property | e.constructorParams())]
	 * @param p_[p.filterName()/] 
	 * 					<p>Permet de définir la propriété {@link #[p.filterName()/]} :</p>
	 *					[p.javadoc()/]
[/for]
	 */
	public [e.filterNameCapitalized()/](final Metadata p_metadata 
[for (p : Property | e.keyProperties()) before (',') separator (',')]
	final [p.javaType(false)/] p_[p.filterName()/]
[/for]
[for (p : Property | e.readOnlyProperties()) before (',') separator (',')]
	final [p.javaType(false)/] p_[p.filterName()/]
[/for]
	){
		this.metadata = p_metadata;
		this.ref = new [className_ref(e)/](
		[for (p : Property | e.keyProperties()) separator (', ')]
			p_[p.filterName()/]
		[/for]
		);
[for (p : Property | e.readOnlyProperties())]
		this.[p.filterName()/] = p_[p.filterName()/];
[/for]
[for (p : EntityProperty | e.getProperties()->select(p : Property | p.isEntityList())->select(p : Property | p.oclIsKindOf(EntityProperty)).oclAsType(EntityProperty))]
[let prop : MClass = p.getType()]
		this.[p.filterName()/] = ParentListRefImpl.create(this.ref, [p.getType().filterNameCapitalized()/].m[p.getType().filterNameCapitalized()/], "[p.filterName()/]");
[/let]
[/for]
	}

	/**
	 * <p>Constructeur d'une nouvelle instance à persister.</p>
	 * <p>Les identifiants et valeurs 'readOnly' sont à <code>null</code>.</p>
[for (p : Property |
		e.keyProperties()
			->select(pr : Property | pr.oclIsKindOf(IdProperty))
	)
	before ('\t * <p>Les propriétés suivantes seront initialisées via <code>UUID.randomUUID()</code> :</p>\n\t * <dl>\n')
	after ('\t * </dl>\n')
]
	 * <dt><code>[p.filterName()/]</code></dt>
	 * <dd>[p.javadoc()/]</dd>		
[/for]
[for (p : Property | e.constructorParamsNewInstance())]
	 * @param p_[p.filterName()/] 
	 * 					<p>Permet de définir la propriété {@link #[p.filterName()/]} :</p>
	 *					[p.javadoc()/]
[/for]
	 */
	public static [e.className_entity()/] create([for (
		p : Property | e.keyProperties()
		->select(pr : Property | not(pr.oclIsKindOf(IdProperty)))
	) separator (', ') ]final [p.javaType(false)/] [p.filterName()/][/for]) {
		return new [e.className_entity()/](
			Metadata.NEW_INSTANCE
		[for (p : Property | e.keyProperties())]
[if (p.oclIsKindOf(IdProperty))]
			, UUID.randomUUID() //
[else]
			, [p.filterName()/] //
[/if]
		[/for]
		[for (p : Property | e.readOnlyProperties()) before (',') separator (',')]
			null
		[/for]
		);
	}

	public [e.className_entity()/]([for (
		p : Property | e.keyProperties()
		->select(pr : Property | not(pr.oclIsKindOf(IdProperty)))
	) separator (', ') ]final [p.javaType(false)/] [p.filterName()/][/for]) {
		this(
			Metadata.NEW_INSTANCE
		[for (p : Property | e.keyProperties())]
[if (p.oclIsKindOf(IdProperty))]
			, UUID.randomUUID() //
[else]
			, [p.filterName()/] //
[/if]
		[/for]
		[for (p : Property | e.readOnlyProperties()) before (',') separator (',')]
			null
		[/for]
		);
	}

[for (p : Property | e.keyProperties())]
  /**
   * <p>Permet de récupérer la valeur de la propriété : {@link [e.className_ref()/]#[p.filterName()/]} :</p>
[p.javadoc()/]
   *
   * @return La valeur de la propriété {@link [e.className_ref()/]#[p.filterName()/]}.
   */
  public [p.javaType(false) /] get[p.filterNameCapitalized()/]() {
      return this.ref.get[p.filterNameCapitalized()/]();
  }
[/for]

[for (p : Property | e.setableEntityListProperties())]
	@SafeVarargs
	public final [e.className_entity()/] add[p.filterNameCapitalized()/](final Addressable<? extends [p.getType().filterNameCapitalized()/]>... items) {
		// TODO
		return this;
	}
[/for]

[for (p : Property | e.propertiesWithoutKey())]
  /**
   * <p>Permet de récupérer la valeur de la propriété : {@link #[p.filterName()/]} :</p>
[p.javadoc()/]
   *
   * @return La valeur de la propriété {@link #[p.filterName()/]}.
   */
  public [p.javaType(false) /] get[p.filterNameCapitalized()/]() {
      return this.[p.filterName()/];
  }
[/for]
[for (p : Property | e.setableProperties())]

  /**
   * <p>Permet de mettre à jour la valeur de la propriété : {@link #[p.filterName()/]} :</p>
   [p.javadoc()/]
   *
   * @param p_[p.filterName()/]
   * 					la nouvelle valeur pour la propriété {@link #[p.filterName()/]}.
	 * @return L'objet courant pour chaîner les appels de méthode.
   */
  public [e.filterNameCapitalized()/] set[p.filterNameCapitalized()/](final [p.javaType(false)/] p_[p.filterName()/]) {
      this.[p.filterName()/] = p_[p.filterName()/];
      return this;
  }
[if (p.oclIsKindOf(DateProperty))]

	/**
	 * <p>Permet de mettre à jour la propriété '[p.name/]' : {@link #[p.filterName()/]} :</p>
[p.javadoc()/]
	 * @param timeZoneId
	 *          ID the ID for a TimeZone, either an abbreviation such as "PST", a
	 *          full name such as "America/Los_Angeles", or a custom ID such as
	 *          "GMT-8:00". Note that the support of abbreviations is for JDK
	 *          1.1.x compatibility only and full names should be used.
	 * @param year
	 *          the year
	 * @param monthOfYear
	 *          the month of the year
	 * @param dayOfMonth
	 *          the day of the month
	 * @param time
	 *          To specify time (the hour of the day, the minute of the hour, the
	 *          second of the minute, le milliseconde of second). Default value is
	 *          0
	 * @return L'objet courant pour chaîner les appels de méthode.
	 */
	public [e.filterNameCapitalized()/] set[p.filterNameCapitalized()/](final String timeZoneId, final int year, final int monthOfYear,
			final int dayOfMonth, final int... time) {
		return this.set[p.filterNameCapitalized()/](new DateTime( //
				year, //
				monthOfYear, //
				dayOfMonth, //
				time.length > 0 ? time[ '[0]' /] : 0, // hourOfDay
				time.length > 1 ? time[ '[1]' /] : 0, // minuteOfHour
				time.length > 2 ? time[ '[2]' /] : 0, // secondOfMinute
				time.length > 3 ? time[ '[3]' /] : 0, // millisOfSecond
				DateTimeZone.forTimeZone(TimeZone.getTimeZone(timeZoneId))//
				));
	}
[elseif (p.oclIsKindOf(EntityProperty))]

  /**
   * <p>Permet de mettre à jour la valeur de la propriété : {@link #[p.filterName()/]} :</p>
   [p.javadoc()/]
   *
   * @param p_[p.filterName()/]
   * 					la nouvelle valeur pour la propriété {@link #[p.filterName()/]}.
   * @return L'objet courant pour chaîner les appels de méthode.
   */
  public [e.className_entity()/] set[p.filterNameCapitalized()/](final [p.getType().filterNameCapitalized()/] p_[p.filterName()/]) {
    if(p_[p.filterName()/] == null) {
	    this.[p.filterName()/] = null;
	}
	else {
	    this.[p.filterName()/] = p_[p.filterName()/].getRef();
	}
    return this;
  }
[/if]
[/for]

	/** 
	 * Les méta-données d'un élément addressable 
	 */
	@ValidRef
	private final [className_ref(e)/] ref;

	@Override
	@Nonnull
	public String getUri() {
		return this.ref.getUri();
	}

	/** 
	 * Les méta-données d'un élément addressable 
	 */
	private final Metadata metadata;
	
  	/**
   	 * <p>Permet de récupérer la valeur de la propriété : {@link #metadata}.</p>
     * <dl><dt>metadata</dt><dd>Les méta-données d'un élément addressable</dd></dl>
     *
     * @return La valeur de la propriété {@link #metadata}.
     */
	@Override
	@Nonnull
	public Metadata getMetadata() {
		return this.metadata;
	}

	/**
	 * <p>Permet de transformer une instance de {@link [e.filterNameCapitalized()/]} dans un autre type d'objet.</p>
	 * @param p_transformer
	 * 			l'instance du transformeur permettant de générer le nouvel objet.
	 * @return L'object transformé ou null si le transformeur est null
	 */
	public <OUT> OUT transform(final @Nonnull Transformer<[e.filterNameCapitalized()/], OUT> p_transformer) {
		if(p_transformer == null) { 
			return null;
		}
		return p_transformer.transform(this);
	}

	@Override
	public String toString() {
		final StringBuilder sb = new StringBuilder();
		sb.append("[e.className_entity()/]:{\n\turi:").append(this.getUri());
[for (p : Property | e.getProperties())]
		if (this.get[p.filterNameCapitalized()/]() != null) {
			sb.append("\n\t[p.filterName()/]:{").append(this.get[p.filterNameCapitalized()/]().toString().replace("\n","\n\t")).append("}");
		}
[/for]
		return sb.append("\n}").toString();
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((this.ref == null) ? 0 : this.ref.hashCode());
		result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
[for (p : Property | e.propertiesWithoutKey())]
		result = prime * result + ((this.[p.filterName()/] == null) ? 0 : this.[p.filterName()/].hashCode());
[/for]
		return result;
	}

	@Override
	public boolean equals(final Object obj) {
		if (this == obj){return true;}
		if (obj == null){return false;}
		if (getClass() != obj.getClass()){return false;}
		[e.className_entity()/] other = ([e.className_entity()/]) obj;
		if (this.ref == null) {
			if (other.ref != null){return false;}
		}
		else if (!this.ref.equals(other.ref)){
			return false;
		}
		if (this.metadata == null) {
			if (other.metadata != null){return false;}
		}
		else if (!this.metadata.equals(other.metadata)){
			return false;
		}
[for (p : Property | e.propertiesWithoutKey())]
		if (this.[p.filterName()/] == null) {
			if (other.[p.filterName()/] != null){return false;}
		}
		else if (!this.[p.filterName()/].equals(other.[p.filterName()/])){
			return false;
		}
[/for]
		return true;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see rok.model.Entity#save(rok.model.Uniform)
	 */
	@Override
	public [e.className_entity()/] save(final @Nonnull Uniform api) throws BadRequestException, ApiException {
		if (api == null) {
			throw new BadRequestException("Uniform inferface must not be null");
		}
		return api.save(this);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see rok.model.Entity#delete(rok.model.Uniform)
	 */
	@Override
	public [e.className_entity()/] delete(final @Nonnull Uniform api) throws BadRequestException, ApiException {
		if (api == null) {
			throw new BadRequestException("Uniform inferface must not be null");
		}
		api.delete(this);
		return this;
	}

	public static Ref ref(
[for (p : Property | e.keyProperties()) separator (',')]
		final [p.javaType()/] p_[p.filterName()/]
[/for]
	){
		return new Ref(
[for (p : Property | e.keyProperties()) separator (',')]
			p_[p.filterName()/]
[/for]
		);
	}

	@Override
	public void checkRef() throws BadRequestException {
		this.ref.checkRef();
	}

	public Ref getRef() {
		return this.ref;
	}
[/template]

[query public getEntityListProperties(e : MClass) : Set(EntityProperty) = ( 
	e.getProperties()
	->select(p : Property | 
		p.isEntityList()
	)
	.oclAsType(EntityProperty)
	->oclAsSet()
) /]

