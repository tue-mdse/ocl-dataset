[comment encoding = UTF-8 /]
[module mClass('uri:rok/model')/]
[import rok::generator::service::texttools/]
[import rok::generator::service::rokservices/]
[import rok::generator::java::template::common /]


[template public mClass_getFilePath(e : MClass) post(clearSpace())]
java/[e.parentDomainsPath()/]/[className_mClass(e)/].java
[/template]

[comment 
	Renvoie une chaine de caractère représentant le type d'une propriété.
/]
[template public javaPropertyType(p : Property, basedEntity : MClass) post (clearSpace())]
[if (
	p.oclIsTypeOf(StringProperty)
	or p.oclIsTypeOf(IdProperty)
)]
	Searchable
[elseif (
	p.oclIsTypeOf(DateProperty)
	or p.oclIsTypeOf(RealNumberProperty)
	or p.oclIsTypeOf(IntegerProperty)
)]
	Comparable
[/if]
Property
[/template]

[template public javaPropertyGenerics(p : Property, basedEntity : MClass) post (clearSpace())]
	[if (p.isPrimitiveList())]
		[p.javaType(false)/]
	[elseif (p.isEntityList())]
		[p.getType().className_ref()/]
	[elseif (p.isEntitySingle())]
		[p.getType().className_ref()/]
	[else]
		[p.javaGenericType()/]
	[/if]
[/template]


[template public propertyClassPrefix(p : Property) post(clearSpace())]
[p.javaType().toUpperFirst()/]
[/template]

[template public mClass_getImportList(e : MClass) ]
static rok.parser.UriUtils.uriUtils

java.util.ArrayList
java.util.Collections
java.util.LinkedHashMap
java.util.List
java.util.Map
javax.annotation.Nonnull
javax.annotation.Nullable

rok.model.AbstractMClass
rok.model.ListRef
rok.model.ListRefImpl
rok.model.MClass
rok.model.filter.Filter
rok.model.exception.ApiException
rok.model.exception.BadRequestException
rok.model.exception.InternalServerException
rok.model.exception.NotFoundException
rok.model.filter.Order
rok.model.PropertyType
rok.model.property.Getter
rok.model.property.Function1
rok.model.property.Function2
rok.model.property.Property
rok.model.property.PropertyKey
rok.model.property.PropertyMap
rok.model.property.Range
rok.model.property.impl.PropertySetableImpl

rok.parser.Parser
rok.parser.EntityRefParser
rok.parser.ParserFactory
rok.parser.UriParser
rok.parser.UriParserFactory
rok.parser.impl.ParentListRefParserFromMClassImpl

[e.listEntityJavaImports()/]

[comment Import pour MClass /]
[for (p : Property | e.getProperties())]
rok.model.property.[p.javaPropertyType(e)/][p.propertySuffixe()/]
[/for]
rok.model.property.PropertyList
rok.model.property.impl.PropertyImpl
rok.model.property.impl.PropertyListImpl
rok.model.property.impl.PropertyKeyImpl
[/template]

[template public mClass_writeFile(e : MClass)]
[file (e.mClass_getFilePath(), false, 'UTF-8')]
package	[e.parentDomains()/];

[e.mClass_getImportList().javaImports()/]
[e.mClass_getContent()/]
[/file]
[/template]

[template public propertySuffixe(p : Property) post(clearSpace())]
[if (p.isKey())]Key[/if]
[if (p.isEntityList())]List[/if]
[if (p.isSetable())]Setable[/if]
[/template]

[template public property_generics(e : MClass, p : Property) post(clearSpace())]
[if (p.isKey() or p.isEntityList())][e.className_ref()/],[/if]
[e.className_entity()/],
[if (p.isEntityList())]
	[p.getType().filterNameCapitalized()/]
[else]
	[p.javaType(false)/]
[/if]
[/template]

[template public mClass_getContent(e : MClass)]
/**
 * Permet de désigner des critères de recherches (filtres) ou de trie sur l'entité métier {@link [e.className_entity()/]}.
 */
public static class MClass extends AbstractMClass<[e.className_entity()/],[e.className_ref()/]> {

[for (p : Property | e.getProperties())]
	/**
	 * <p>Désigne la propriété {@link [e.className_entity()/]#[p.filterName()/]} :</p>
	 * [p.javadoc()/]
	 */
	public final [p.javaPropertyType(e)/][p.propertySuffixe()/]<[e.property_generics(p)/]> [p.filterName()/]
		[comment
			Boolean étant un objet 'final', nous sommes fortement contraint de le géré comme cas particulier 
		/]
 		= new Property[p.propertySuffixe()/]Impl<[e.property_generics(p)/]>(
			this,
		[if (p.isEntityList())]
			[p.getType().filterNameCapitalized()/].class
		[else]
			[p.javaType(false)/].class
		[/if]
			,"[p.filterName()/]" //
			// Getter
			, new Function1<
				[p.javaType(false)/],
				[e.className_entity()/]
			>() {
				public [p.javaType(false)/] apply(final @Nonnull [e.className_entity()/] object) {
					return object.get[p.filterNameCapitalized()/]();
				}
			}
[if (p.isKey())]
			// Ref Getter
			, new Function1<[p.javaType(false)/],[e.className_ref()/]>() {
				public [p.javaType(false)/] apply(final @Nonnull [e.className_ref()/] ref) {
					return ref.get[p.filterNameCapitalized()/]();
				}
			}
[/if]
[if (p.isSetable())]
			// Setter
			, new Function2<Void,[e.className_entity()/],[p.javaType(false)/]>() {
				public Void apply(final @Nullable [e.className_entity()/] object, final @Nullable [p.javaType(false)/] value) {
					if(object!=null){
						object.set[p.filterNameCapitalized()/](value);
					}
					return null;
				}
			} //
[/if]
			, 
				[if (p.isEntitySingle())]
					new Getter<Parser<[p.javaType(false)/]>>() {
						@Override
						public Parser<[p.javaType(false)/]> get() {
							return [p.getType().className_entity()/].m[p.getType().className_entity()/].getRefParser();
						}
					}
				[elseif (p.isEntityList())]
					new Getter<Parser<[p.javaType(false)/]>>() {
						@Override
						public Parser<[p.javaType(false)/]> get() {
							return new ParentListRefParserFromMClassImpl(
								[e.className_entity()/].m[e.className_entity()/],
								[p.getType().className_entity()/].m[p.getType().className_entity()/],
								"[p.filterName()/]"
							);
						}
					}
				[else]
					new Getter<Parser<[p.javaType(false)/]>>() {
						@Override
						public Parser<[p.javaType(false)/]> get() {
							return ParserFactory.parserFactory.getParser([p.javaType(false)/].class);
						}
					}
				[/if]

[if(p.oclIsKindOf(DateProperty))]
	[let prop : DateProperty = p.oclAsType(DateProperty)]
		[if(not(prop.min.oclIsUndefined()) or not(prop.max.oclIsUndefined()))]
			,null
			,new Range<DateTime>(
				[dateTimeConstructor(prop.min.toString())/]
				,[dateTimeConstructor(prop.max.toString())/]
			)
			,null
		[/if]
	[/let]
[elseif(p.oclIsKindOf(StringProperty))]
	[let prop : StringProperty = p.oclAsType(StringProperty)]
		[if(not(prop.min.oclIsUndefined()) or not(prop.max.oclIsUndefined()))]
			,null
			,null
			,new Range<Long>(
				[if(not(prop.min.oclIsUndefined()))]
					[prop.min.toString()/]L
				[else]
					null
				[/if]
				,
				[if(not(prop.max.oclIsUndefined()))]
					[prop.max.toString()/]L
				[else]
					null
				[/if]
			)
		[/if]
	[/let]
[elseif(p.oclIsKindOf(IntegerProperty))]
	[let prop : IntegerProperty = p.oclAsType(IntegerProperty)]
		[if(not(prop.min.oclIsUndefined()) or not(prop.max.oclIsUndefined()))]
			,null
			,new Range<[integerJavaType2(prop,false)/]>(
				[if(not(prop.min.oclIsUndefined()))]
					new Long([prop.min.toString()/]L).[integerJavaType2(prop,true)/]Value()
				[else]
					null
				[/if]
				,
				[if(not(prop.max.oclIsUndefined()))]
					new Long([prop.max.toString()/]L).[integerJavaType2(prop,true)/]Value()
				[else]
					null
				[/if]
			)
			,null
		[/if]
	[/let]
[elseif(p.oclIsKindOf(RealNumberProperty))]
	[let prop : RealNumberProperty = p.oclAsType(RealNumberProperty)]
		[if(not(prop.min.oclIsUndefined()) or not(prop.max.oclIsUndefined()))]
			,null
			,new Range<BigDecimal>(
				BigDecimal.valueOf([prop.min.toString()/])
				,BigDecimal.valueOf([prop.max.toString()/])
			)
			,null
		[/if]
	[/let]
[/if]
[if (p.isKey())]
			, PropertyType.key
[/if]
[if (p.isReadOnly())]
			, PropertyType.readOnly
[/if]
[if (p.isRequired())]
			, PropertyType.required
[/if]
[if (p.isSetable())]
			, PropertyType.setable
[/if]
		);
[/for]



	@SuppressWarnings("unchecked")
	private final Property<[e.className_entity()/], ?>[ '[]' /] propertiesArray = new Property[ '[]' /] {[for (p : Property | e.getProperties()) separator (', ')]this.[p.filterName()/][/for]};

	public final Property<[e.className_entity()/], ?>[ '[]' /] getPropertiesArray() {
		return propertiesArray;
	}

	/**
	 * Constructeur privé pour le singleton {@link #m[e.className_entity()/]}
	 */
	private MClass() {
		super("[e.name.escapeString()/]"
			,[e.className_entity()/].class
			,[e.className_ref()/].class
			,"[e.getUriPattern().escapeString()/]"
			,"[e.getUriPatternForAllInstance().escapeString()/]"
		);
	}

	public Ref createRef(final Map<String, String> params) throws BadRequestException {
		if (params == null) {
			return null;
		}
		return new Ref(
[for (p : Property | e.keyProperties()) separator (',')]
			m[e.filterNameCapitalized()/].[p.filterName()/].parse(params.get("[p.filterName()/]"))
[/for]
		);
	}

	public Ref createRefFromUriParams(final Map<String, String> params) throws BadRequestException {
		return new Ref(
[for (p : Property | e.keyProperties()) separator (',')]
			m[e.filterNameCapitalized()/].[p.filterName()/].parse(uriUtils.decode(params.get("[p.filterName()/]")))
[/for]
		);
	}

	@Override
	public ListRef<[e.className_entity()/]> createListRefFromUri(final String uri) throws BadRequestException {
		final Map<String, String> keys = this.parseUriParams(uriUtils.trimPath(uri) + "/*");;
		if (keys == null) {
			throw new BadRequestException("Bad URI for [e.className_entity()/]:" + uri);
		}
		// return new Ref(m[e.className_entity()/].id.parse(uriUtils.decode(keys.get("id"),
		// Addressable.WILDCARD)));
		return ListRefImpl.create(this, uriUtils.trimPath(uri));
	}

	
	[comment]/**
	 * Permet de parser une chaine de caractères afin d'en déterminer un filtre.
	 * Voir {@link #toQueryParamValue()} pour le format attendu. Demanière
	 * générale, il est assuré que {@link #lastItemPosition} =>
	 * {@link #firstItemPosition} si {@link #lastItemPosition} != -1 
	 * 
	 * @param p_queryParamValue
	 *          Chaine de caractère à parser.
	 * @param defaultFirstItemPosition
	 *          indice par défaut à prendre pour le premier élément si la valeur à
	 *          parser n'est pas valide (le nombre à parser doit forcément être >=
	 *          0)
	 * @param defaultLastItemPosition
	 *          indice par défaut à prendre pour le dernier élément si la valeur à
	 *          parser n'est pas valide (le nombre à parser doit forcément être -1
	 *          ou > à {@link #firstItemPosition})
	 * @return
	 */
	public Filter<[e.className_entity()/]> parseFilter(final String p_queryParamValue, final int defaultFirstItemPosition, final int defaultLastItemPosition) {
		return null;
	}

	public Order<[e.className_entity()/]> parseOrder(final String value) {
		return null;
	}[/comment]

	/**
	 * <p>
	 * Permet de recopier la valeur des propriétés modifiable d'une entitée.
	 * </p>
	 * <p>
	 * C'est à dire les propriétés qui ne sont ni en lecture seule, ni celles qui
	 * constituent le(s) clé(s) d'unicités de l'entitée, ni celles qui sont des références fixes vers d'autres entités.
	 * </p>
	 * <p>
	 * Liste des propriétés recopiées :
	 * </p>
	 * <dl>
[for (p : Property | e.setableProperties())]
	 * <dt><code>[p.filterName()/]</code></dt>
 	 * <dd>
 	 * [p.javadoc()/]
 	 * <p>Voir @link [e.className_entity()/]#get[p.filterNameCapitalized()/]([p.javaGenericType()/])}</p>
 	 * </dd>
[/for]
	 * </dl>
	 * 
	 * @param p_source
	 *          Entitée à partir de laquelle les valeurs doivent être prises en
	 *          compte
	 * @param p_destination
	 *          Entitée dons les propriété doivent être mise à jour
	 */
	public void copy(final [e.className_entity()/] p_source, final [e.className_entity()/] p_destination){
[for (p : Property | e.setableProperties())]
		p_destination.set[p.filterNameCapitalized()/](p_source.get[p.filterNameCapitalized()/]());
[/for]
	}

	@Override
	public [e.className_entity()/] create(final Metadata metadata, PropertyMap<[e.className_entity()/]> propertyMap) throws BadRequestException {
		final [e.className_entity()/] newEntity = new [e.className_entity()/](metadata //
[for (p : Property | e.keyProperties())]
			, propertyMap.getValue(this.[p.filterName()/]) //
[/for]
[for (p : Property | e.readOnlyProperties())]
			, null // Read-Only properties
[/for]
		);
[for (p : Property | e.setableProperties())]
		newEntity.set[p.filterNameCapitalized()/](propertyMap.getValue(this.[p.filterName()/]));
[/for]
		return newEntity;
	}
}
[/template]