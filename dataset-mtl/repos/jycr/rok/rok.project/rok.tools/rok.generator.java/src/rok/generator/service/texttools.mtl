[comment encoding = UTF-8 /]
[**
 * The documentation of the module.
 */]
[module texttools('uri:rok/model')/]

[**
 * The documentation of the query
 * @param arg0
 */]
[query public filter(arg0 : OclAny) : String
	= invoke('rok.generator.service.TextTools', 'filter(java.lang.Object)', Sequence{arg0}) /]

[**
 * The documentation of the query
 * @param arg0
 */]
[query public removeDiacritics(arg0 : String) : String
	= invoke('rok.generator.service.TextTools', 'removeDiacritics(java.lang.String)', Sequence{arg0}) /]

[**
 * The documentation of the query
 * @param arg0
 */]
[query public removeDeterminer(arg0 : String) : String
	= invoke('rok.generator.service.TextTools', 'removeDeterminer(java.lang.String)', Sequence{arg0}) /]

[**
 * The documentation of the query
 * @param arg0
 */]
[query public removeNonAlphaNum(arg0 : String) : String
	= invoke('rok.generator.service.TextTools', 'removeNonAlphaNum(java.lang.String)', Sequence{arg0}) /]

[**
 * The documentation of the query
 * @param arg0
 */]
[query public collapseWords(arg0 : String) : String
	= invoke('rok.generator.service.TextTools', 'collapseWords(java.lang.String)', Sequence{arg0}) /]

[**
 * The documentation of the query
 * @param arg0
 */]
[query public escapeString(arg0 : String) : String
	= invoke('rok.generator.service.TextTools', 'escapeString(java.lang.String)', Sequence{arg0}) /]

[**
 * The documentation of the query
 * @param arg0
 */]
[query public escapeXml(arg0 : String) : String
	= invoke('rok.generator.service.TextTools', 'escapeXml(java.lang.String)', Sequence{arg0}) /]

[**
 * The documentation of the query
 * @param arg0
 */]
[query public filterTemplateUri(arg0 : String) : String
	= invoke('rok.generator.service.TextTools', 'filterTemplateUri(java.lang.String)', Sequence{arg0}) /]

[**
 * The documentation of the query
 * @param arg0
 * @param arg1
 */]
[query public clearSpace(arg0 : String) : String
	= invoke('rok.generator.service.TextTools', 'clearSpace(java.lang.String)', Sequence{arg0}) /]


[query public dateTimeConstructor(arg0 : String) : String
	= invoke('rok.generator.service.TextTools', 'dateTimeConstructor(java.lang.String)', Sequence{arg0})
/]
