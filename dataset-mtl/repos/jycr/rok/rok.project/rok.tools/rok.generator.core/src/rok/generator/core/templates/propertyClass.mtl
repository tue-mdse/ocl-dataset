[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module propertyClass('http://www.eclipse.org/emf/2002/Ecore')]
[import rok::generator::core::common::common /]
[template public interfaceSignature(c : EClass, suffixe : String) post(replaceAll('\\s+',' '))]
public interface [c.name/][suffixe/]<E,T>
[/template]
[template public classSignature(c : EClass) post(replaceAll('\\s+',' '))]
public class [name.toUpperFirst()/]Impl<E,T>
[if (oclIsDefined(eSuperTypes))]
[for (ec : EClass | c.getExtendsEClass()) before (' extends ') separator (', ')]
	[ec.name/]Impl<E,T>
[/for]
implements 
	[name.toUpperFirst()/]<E,T>
	,[name.toUpperFirst()/]Key<E,T>
	,[name.toUpperFirst()/]Setable<E,T>
	,[name.toUpperFirst()/]ReadOnly<E,T>
[for (ec : EClass | c.getImplementsEClass())]
	, [ec.name/]<E,T>
[/for]
[/if]
[/template]

[template public javaImports(c : EClass)]
[comment]// [protected ('imports')][/comment]
[if (c.name='DateProperty')]
import java.util.Date;
[elseif (c.name='EntityRefProperty')]
import rok.model.EntityRef;
[elseif (c.name='ListRefProperty')]
import rok.model.ListRef;
[elseif (c.name='ListProperty')]
import java.util.List;
[elseif (c.name='ListOfRefProperty')]
import java.util.List;
import rok.model.Ref;
[/if]
[comment]// [/protected][/comment]
[/template]

[template public generatePropertyClass(c : EClass)]
[file ('rok/model/property/'+c.name+'Impl.java', false, 'UTF-8')]
package rok.model.property;

[c.javaImports()/]

import rok.model.filter.Criteria;
import rok.model.filter.CriteriaOperator;
import rok.model.exception.BadRequestException;

[c.classSignature()/] {

	public [name/]Impl(final Class<E> entity, final Class<T> type, final String name, final GetSet<E,T> getSet) {
		[if (c.getExtendsEClass()->size()>0)]
		super(entity, type, name, getSet);
		[/if]
	}

[comment][for (compareOperation : EOperation | c.getCompareOperations())]
	/**
	 * Permet de créer un nouveau {@link Criteria} de type
	 * {@link CriteriaOperator#[compareOperation.getCompareType()/]} pour cette propriété.
	 * 
	 * @param value
	 * @return
	 */
	public Criteria<E, [c.getTargetJavaType()/]> [compareOperation.name/](final [c.getTargetJavaType()/] value) {
		return Criteria.create(this, CriteriaOperator.[compareOperation.getCompareType()/], value);
	}

[/for]

	public [getTargetJavaType()/] parse(final String input) throws BadRequestException {
		return [getTargetJavaType()/]Parser.getFactory().parse(input);
	}[/comment]
}
[/file]
[c.writeInterface('', Sequence{'Property'})/]
[c.writeInterface('Key', Sequence{c.name,'PropertyKey'})/]
[c.writeInterface('Setable', Sequence{c.name,'PropertySetable'})/]
[c.writeInterface('ReadOnly', Sequence{c.name,'PropertyReadOnly'})/]
[/template]
[template public writeInterface(c : EClass, suffixe : String, implements : Sequence(String))]
[file ('rok/model/property/'+c.name+suffixe+'.java', false, 'UTF-8')]
package rok.model.property;

[c.javaImports()/]

[c.interfaceSignature(suffixe)/] [for (s : String | implements) before ('extends ') separator (', ')][s/]<E,T>[/for] {}
[/file]
[/template]
[query public getCompareOperations(c : EClass) : EOperation = c.eContents(EOperation)
	->select(
		name='equalsTo'
		or name='greaterThan'
		or name='greaterThanOrEqualTo'
		or name='lesserThan'
		or name='lesserThanOrEqualTo'
		or name='contains'
		or name='startsWith'
		or name='endsWith'
	)
/]
[query public getCompareType(o : EOperation) : String = o.name.replaceAll('^(greater|lesser|equals)(To|Than)(greater|lesser|equals)(To|Than)$','$1$3') /]
[query public getTargetJavaType(c : EClass) : String = name.replaceAll('Property$','') /]
