[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012, 2014 CNES and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Cedric Notot (Obeo) - initial API and implementation
[/comment]

[module root('http://www.eclipse.org/uml2/5.0.0/UML','http://www.eclipse.org/umlgen/dsl/eth','http://www.eclipse.org/umlgen/dsl/asl')]

[import org::eclipse::umlgen::gen::autojava::specific::port /]
[import org::eclipse::umlgen::gen::autojava::requests::ethernet /]
[import org::eclipse::umlgen::gen::autojava::requests::connectors /]
[import org::eclipse::umlgen::gen::autojava::requests::port /]
[import org::eclipse::umlgen::gen::autojava::requests::common /]
[import org::eclipse::umlgen::gen::autojava::services::utilServices /]
[import org::eclipse::umlgen::gen::autojava::services::umlServices /]
[import org::eclipse::umlgen::gen::autojava::common::common /]

[comment generates root specific methods for class/]
[template public genRoot(aClass : Class)]
[aClass.genBegin()/]

[aClass.genInit()/]

[aClass.genRootBodyCommon()/]
[/template]

[template public genDistributedRoot(aClass : Class, aContainer : Container)]
[aClass.genDistributedBegin(aContainer)/]

[aClass.genDistributedInit(aContainer)/]

[aClass.genRootBody(aContainer)/]
[/template]

[template public genRootBody(aClass : Class, aContainer : Container) ]
private static void makeConnections() {
[for (aProperty : Property | aClass.get('ownedAttribute')->filter(Property)->asOrderedSet())]
	[if (aProperty.type.oclIsKindOf(Class))]
		[for (aPort : Port | aProperty.type.oclAsType(Class).getSelfAndAllParents().get('ownedPort')->filter(Port)->select(p : Port | p.type.oclIsUndefined()))]
	[aProperty.genInitConnectionsCommon(aPort, aContainer)/]
		[/for]
	[/if]
[/for]
[for (aProperty : Property | aContainer.components->filter(Property))]
	[if (aProperty.type.oclIsKindOf(Class))]
		[for (aPort : Port | aProperty.type.oclAsType(Class).getSelfAndAllParents().get('ownedPort')->filter(Port)->select(p : Port | p.type.oclIsUndefined() and p.end->size() > 0 and p.isEthernet()))]
	[aProperty.genInitEthConnections(aPort)/]
		[/for]
	[/if]
[/for]
}
[/template]

[template protected genBegin(aClass : Class)]
[aClass.genBeginCommon()/]

public static void start_all() {
[for (prop : Property | aClass.get('ownedAttribute')->filter(Property)->select(aProp : Property | not aProp.type.isJavaPrimitive() and aProp.type.oclAsType(Class).isActive)->sortedBy(aProp2 : Property | aProp2.type.oclAsType(Class).genRTSJPriority())->reverse()->filter(Property))]
	[prop.genName()/].start_all();
[/for]
}
[/template]

[template protected genDistributedBegin(aClass : Class, aContainer : Container)]
[aClass.genBeginCommon()/]

public static void start_all() {
[for (prop : Property | aContainer.get('components')->filter(Property)->select(aProp : Property | not aProp.type.isJavaPrimitive() and aProp.type.oclAsType(Class).isActive)->sortedBy(aProp2 : Property | aProp2.type.oclAsType(Class).genRTSJPriority())->reverse()->filter(Property))]
	[prop.genName()/].start_all();
[/for]
}
[/template]

[template protected genBeginCommon(aClass : Class)]
public static CommunicationLayer communicationLayer = new CommunicationLayer();
[/template]

[template protected genInit(aClass : Class)]
[aClass.genInitCommon(aClass.get('ownedAttribute')->filter(Property))/]
[/template]

[template protected genDistributedInit(aClass : Class, aContainer : Container)]
[aClass.genInitCommon(aContainer.get('components')->filter(Property))/]
[/template]

[template protected genInitCommon(aClass : Class, components : Sequence(Property))]
public static void init(int freq_OBC) {
	[aClass.genInitBodyCommon(components)/]
}
[/template]

[template protected genInitBodyCommon (aClass : Class, components : Sequence(Property)) ]
// [protected ('to prepare init() operation (pre connections)')]
 	
// [/protected]
[for (p : Property | components->select(p : Property | p.type.oclIsKindOf(Class) and p.type.oclAsType(Class).ownedPort->notEmpty()))]
	[p.name/].initPortsGenerator("[p.name/]", communicationLayer);
[/for]

[for (p : Property | components->select(aProp : Property | aProp.isEthernetComponentWithConnector()))]
	communicationLayer.registerComProtocol("[p.name/]", new EthernetCom[p.name.toUpperFirst()/](communicationLayer));
[/for]

makeConnections();
// [protected ('to complete init() operation (post connections)')]

// [/protected]
start_all();
[/template]

[template protected genRootBodyCommon (aClass : Class) ]
private static void makeConnections() {
[for (aProperty : Property | aClass.get('ownedAttribute')->filter(Property))]
	[if (aProperty.type.oclIsKindOf(Class))]	
		[for (aPort : Port | aProperty.type.oclAsType(Class).getSelfAndAllParents().get('ownedPort')->filter(Port)->select(p : Port | p.type.oclIsUndefined()))]
	[aProperty.genInitConnectionsCommon(aPort, null)/]
		[/for]
	[/if]
[/for]
[for (aProperty : Property | aClass.get('ownedAttribute')->filter(Property))]
	[if (aProperty.type.oclIsKindOf(Class))]
		[for (aPort : Port | aProperty.type.oclAsType(Class).getSelfAndAllParents().get('ownedPort')->filter(Port)->select(p : Port | p.type.oclIsUndefined() and p.end->size() > 0 and p.isEthernet()))]
	[aProperty.genInitEthConnections(aPort)/]
		[/for]
	[/if]
[/for]
}
[/template]

[template protected genInitEthConnections(aCompInstance : Property, aPort : Port) post (trim())]
String['[]'/] [aCompInstance.name/][aPort.name.toUpperFirst()/]DestComp = new String['['+ aCompInstance.getOutgoingEthConnectors(aPort)->size() +']'/];
[for (aConnector : Connector | aCompInstance.getOutgoingEthConnectors(aPort))]
[aCompInstance.name/][aPort.name.toUpperFirst()/]DestComp['['+ (i-1) +']'/] = "[aConnector.getTargetInstance().name/]";
[/for]
communicationLayer.setComponentMap("[aCompInstance.genIdent(aPort)/]", [aCompInstance.name/][aPort.name.toUpperFirst()/]DestComp);
[/template]

[template protected genInitConnectionsCommon(aCompInstance : Property, aPort : Port, aContainer: Container) post (trim())]
[if (aCompInstance.getTargetInstances(aPort)->size() > 0)]
	[if (aPort.isAsynchronous())]
communicationLayer.setAsynchronousConnection("[aCompInstance.getTargetInstances(aPort)->first().genIdent(aPort.getTargets()->first())/]", "[aCompInstance.genIdent(aPort)/]");
	[elseif (aPort.isSynchronous())]
communicationLayer.setSynchronousConnection("[aCompInstance.getTargetInstances(aPort)->first().genIdent(aPort.getTargets()->first())/]", "[aCompInstance.genIdent(aPort)/]");
	[elseif (aPort.isEventData() and aContainer.oclIsUndefined())]
[aCompInstance.genInitEventDataConnections(aPort, aCompInstance.getOutgoingConnectors(aPort))/]
	[elseif (aPort.isEventData() and not aContainer.oclIsUndefined())]
[aCompInstance.genInitEventDataConnections(aPort, aCompInstance.getOutgoingConnectors(aPort)->keepConnectorsToMe(aContainer))/]
	[else]
// no identification of the port: [aCompInstance.genIdent(aPort)/]
	[/if]
[else]
// no connection for [aCompInstance.genIdent(aPort)/] (the type of the target port [aPort.getTargets().name->sep(', ')/] may be null or it may be a port provider considered as a client)
[/if]

[/template]

[template protected genInitEventDataConnections(aCompInstance : Property, aPort : Port, outgoingConnectors : OrderedSet(Connector)) post (trim())]
String['[]'/] [aCompInstance.name/][aPort.name.toUpperFirst()/]Receivers = new String['['+ outgoingConnectors->size() +']'/];
[for (aConnector : Connector | outgoingConnectors)]
[aCompInstance.name/][aPort.name.toUpperFirst()/]Receivers['['+ (i-1) +']'/] = "[aConnector.getTargetInstance().genIdent(aConnector.getTarget())/]";
[/for]
communicationLayer.setEventDataConnection("[aCompInstance.genIdent(aPort)/]", [aCompInstance.name/][aPort.name.toUpperFirst()/]Receivers);
[for (aConnector : Connector | outgoingConnectors)]
communicationLayer.registerEventDataReceiverPort([aCompInstance.name/][aPort.name.toUpperFirst()/]Receivers['['+ (i-1) +']'/], [aConnector.getTargetInstance().name/].get[aConnector.getTarget().name.toUpperFirst()/]());
[/for]
[/template]

[comment generates the priority of the active class /]
[template protected genRTSJPriority(aClass : Class) post (trim())]
[if (isActive)]
	[if (getStereotypeProperty('RTSJ::Periodic', 'priority') <> '')]
		[getStereotypeProperty('RTSJ::Periodic', 'priority')/]
	[else]
		[if (getStereotypeProperty('RTSJ::Aperiodic', 'priority') <> '')]
			[getStereotypeProperty('RTSJ::Aperiodic', 'priority')/]
		[else]
			[if (getStereotypeProperty('RTSJ::Sporadic', 'priority') <> '')]
				[getStereotypeProperty('RTSJ::Sporadic', 'priority')/]
			[else]
				0
			[/if]
		[/if]
	[/if]
[else]
	0
[/if]
[/template]
