[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2012, 2014 CNES and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Cedric Notot (Obeo) - initial API and implementation
 *     Sylvain Jouanneau (CNES) - bug 440109
[/comment]

[module thread('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::eclipse::umlgen::gen::autojava::specific::lib::common /]
[import org::eclipse::umlgen::gen::autojava::specific::lib::requests::common /]
[import org::eclipse::umlgen::gen::autojava::specific::lib::feature/]
[import org::eclipse::umlgen::gen::autojava::requests::common /]
[import org::eclipse::umlgen::gen::autojava::services::utilServices /]
[import org::eclipse::umlgen::gen::autojava::services::umlServices /]
[import org::eclipse::umlgen::gen::autojava::common::common /]

[comment generates thread info /]
[template public genThreadInfo(aClass : Class)]
[if (aClass.isSporadic() and not aClass.hasBeforeOperation())]

	[if (getProperty('gen.annotations') = 'true')]
@ignore
	[/if]
public void before() {
	// [protected ('for method '.concat(aClass.genName()).concat('.before():'))]
	
	// [/protected] 
}
[/if]
[if (aClass.isSporadic() and not aClass.hasAfterOperation())]

	[if (getProperty('gen.annotations') = 'true')]
@ignore
	[/if]
public void after() {
	// [protected ('for method '.concat(aClass.genName()).concat('.after():'))]
	
	// [/protected] 
}
[/if]

[aClass.genThreadAttribute()/]

[aClass.genThreadRTInfo()/]

[if (aClass.isAperiodic())]
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public void start() { thread.start(); }
[/if]

[aClass.genStartAll()/]

[for (anOp : Operation | aClass.get('ownedOperation')->filter(Operation)->select(op : Operation | op.name.equalsIgnoreCase('body')))]
[anOp.genMethodComment()/]
[/for]
[comment Generate not abstract method (with body) /]
[for (anOp : Operation | aClass.get('ownedOperation')->filter(Operation)->select(op : Operation | op.name.equalsIgnoreCase('body')))]
[genMethodAnnotation()/]
[/for]
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public void [if (aClass.isAperiodic())]run[else]body[/if]() {
[for (anOp : Operation | aClass.get('ownedOperation')->filter(Operation)->select(op : Operation | op.name.equalsIgnoreCase('body')))]
[genMethodOldAnnotation()/]
[/for]
	[aClass.genBody()/]
}

[for (anOp : Operation | aClass.get('ownedOperation')->filter(Operation)->select(op : Operation | op.name.equalsIgnoreCase('init')))]
[anOp.genMethodComment()/]
[/for]
[for (anOp : Operation | aClass.get('ownedOperation')->filter(Operation)->select(op : Operation | op.name.equalsIgnoreCase('init')))]
[genMethodAnnotation()/]
[/for]
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public void init() {
[for (anOp : Operation | aClass.get('ownedOperation')->filter(Operation)->select(op : Operation | op.name.equalsIgnoreCase('init')))]
[genMethodOldAnnotation()/]
[/for]
	// [protected ('for method '.concat(genName()).concat('.init():'))]

	// [/protected] 
}
[if (aClass.isAperiodic() or aClass.isSporadic())]

[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public void catchCommunicationException(String service, ArgsBuffer params) {
	// [protected ('for method '.concat(genName()).concat('.catchCommunicationException(String,Argsbuffer):'))]
	//TODO Fill Method
	// [/protected] 
}
[/if]
[/template]

[template public genThreadAnnotations(aClass : Class)]
[if (isPeriodic())]
@Periodic(period = [genPeriodicPeriod()/], phase = [genPeriodicPhase()/], priority = [genPeriodicPriority()/], deadline = [genPeriodicDeadline()/], wcet = [genPeriodicWcet()/], bcet = [genPeriodicBcet()/])
[elseif (isAperiodic())]
@Aperiodic(priority = [genAperiodicPriority()/])
[elseif (isSporadic())]
@Sporadic(period = [genSporadicPeriod()/], phase = [genSporadicPhase()/], priority = [genSporadicPriority()/], deadline = [genSporadicDeadline()/], wcet = [genSporadicWcet()/], bcet = [genSporadicBcet()/], messages = [genSporadicMessages()/])
[/if]
[if (isBackground())]
@Background
[/if]
[if (isMessage())]
@Message
[/if]
[if (isRoot())]
@Root
[/if]
[if (isExactBuffer())]
@ExactBuffer
[elseif (isLossyBuffer())]
@LossyBuffer(bufSize = [getStereotypeProperty('RTSJ::LossyBuffer', 'bufSize')/], mbufSize = [getStereotypeProperty('RTSJ::LossyBuffer', 'mbufSize')/])
[/if]
[if (isClassInfo())]
@ClassInfo(monitorControl = "[getMonitorControl()/]", priorityCeiling = [getPriorityCeiling()/], issynchronized = [isSynchronized()/])
[/if]
[/template]

[comment generates thread import /]
[template public genThreadImport(aClass : Class)]
[if (isAperiodic())]
import java.lang.Runnable;
[/if]
[/template]

[comment generates body /]
[template protected genBody(aClass : Class) post(trim())]
[if (aClass.isPeriodic())]
// [protected ('for method '.concat(aClass.genName()).concat('.body():'))]
// [/protected]
[elseif (aClass.isAperiodic())]
[if (aClass.needsBuffer())]
while (true) {
	if (!pbuffer.empty()) {
		pbuffer.get().invokeNextOperation();
	}
	// [protected ('for first part of method '.concat(aClass.genName()).concat('.body():'))]
	// [/protected]
	synchronized (thread) {
		if (pbuffer.empty()) {
			try {
				thread.wait();
			} catch (Exception e) {
			}
		}
	}
	// [protected ('for second part of method '.concat(aClass.genName()).concat('.body():'))]
	// [/protected]
}
[else]
// [protected ('for method '.concat(aClass.genName()).concat('.body():'))]

// [/protected]
[/if]
[elseif (aClass.isSporadic())]
before();
[if (aClass.needsBuffer())]
for (int count = 0; count < [aClass.getStereotypeProperty('RTSJ::Sporadic', 'messages')/]; count++) {
	synchronized(thread) {
		if (!pbuffer.empty()) {
			pbuffer.get().invokeNextOperation();
		} else {
			break;
		}
	}
}
[/if]
after();
[else]
// [protected ('for method '.concat(aClass.genName()).concat('.body():'))]

// [/protected]
[/if]
[/template]

[template protected genThreadAttribute(aClass : Class)]
[if (isSporadic())]
	[if (getProperty('gen.annotations') = 'true')]
@ignore
	[/if]
private final Object thread = new Object();
[elseif (isAperiodic())]
	[if (getProperty('gen.annotations') = 'true')]
@ignore
	[/if]
private final Thread thread = new Thread(this);
[/if]
[/template]

[template protected genThreadRTInfo(aClass : Class)]
[if (isPeriodic())]
public int getThreadPeriod() { return [genPeriodicPeriod()/]; }
public int getThreadPhase() { return [genPeriodicPhase()/]; }
public Object getThread() { return null; }
public int getThreadPriority() { return [genPeriodicPriority()/]; }
public PortBuffer getPbuffer() { return pbuffer; }
[/if]
[if (isSporadic())]
public int getThreadPeriod() { return [genSporadicPeriod()/]; }
public int getThreadPhase() { return [genSporadicPhase()/]; }
public Object getThread() { return thread; }
public int getThreadPriority() { return [genSporadicPriority()/]; }
public PortBuffer getPbuffer() { return pbuffer; }
[/if]
[if (isAperiodic())]
public Thread getThread() { return thread; }
public int getThreadPriority() { return [genAperiodicPriority()/]; }
[/if]
[/template]

[template protected genStartAll(aClass: Class)]
[if (getProperty('gen.annotations') = 'true')]
@ignore
[/if]
public void start_all() {
	[if (feature->filter(Connector)->notEmpty())]
	makeConnections();
	[/if]
	[for (get('attribute')->filter(Property))]
	[if (not type.oclIsUndefined() and type.oclIsKindOf(Class) and type.oclAsType(Class).isActive)]
	[name/].start_all();
	[/if]
	[/for]
	init();
	[if (isAperiodic())]
	start();
	[/if]
}
[/template]

[template protected genMethodComment(anOperation : Operation)]
[comment Generate methods doc /]
/**
 * Description of the method [genName()/][genCommentBis()/].
 *
	[for (get('ownedParameter')->filter(Parameter)->select(direction <> ParameterDirectionKind::return))]
 * @param [genName()/][genCommentBis()/]
	[/for]
	[for (get('ownedParameter')->filter(Parameter)->select(direction = ParameterDirectionKind::return))]
 * @return [genName()/][genCommentBis()/]
	[/for]
 */
[/template]

[template protected genPeriodicPeriod(aClass : Class)]
[if (getStereotypeProperty('RTSJ::Periodic', 'period').trim() <> '')][getStereotypeProperty('RTSJ::Periodic', 'period')/][else]0[/if]
[/template]

[template protected genPeriodicPhase(aClass : Class)]
[if (getStereotypeProperty('RTSJ::Periodic', 'phase').trim() <> '')][getStereotypeProperty('RTSJ::Periodic', 'phase')/][else]0[/if]
[/template]

[template protected genPeriodicPriority(aClass : Class)]
[if (getStereotypeProperty('RTSJ::Periodic', 'priority').trim() <> '')][getStereotypeProperty('RTSJ::Periodic', 'priority')/][else]0[/if]
[/template]

[template protected genSporadicPeriod(aClass : Class)]
[if (getStereotypeProperty('RTSJ::Sporadic', 'period').trim() <> '')][getStereotypeProperty('RTSJ::Sporadic', 'period')/][else]0[/if]
[/template]

[template protected genSporadicPhase(aClass : Class)]
[if (getStereotypeProperty('RTSJ::Sporadic', 'phase').trim() <> '')][getStereotypeProperty('RTSJ::Sporadic', 'phase')/][else]0[/if]
[/template]

[template protected genSporadicPriority(aClass : Class)]
[if (getStereotypeProperty('RTSJ::Sporadic', 'priority').trim() <> '')][getStereotypeProperty('RTSJ::Sporadic', 'priority')/][else]0[/if]
[/template]

[template protected genAperiodicPriority(aClass : Class)]
[if (getStereotypeProperty('RTSJ::Aperiodic', 'priority').trim() <> '')][getStereotypeProperty('RTSJ::Aperiodic', 'priority')/][else]0[/if]
[/template]

[template protected genPeriodicDeadline(aClass : Class)]
[if (getStereotypeProperty('RTSJ::Periodic', 'deadline').trim() <> '')][getStereotypeProperty('RTSJ::Periodic', 'deadline')/][else]0[/if]
[/template]

[template protected genSporadicDeadline(aClass : Class)]
[if (getStereotypeProperty('RTSJ::Sporadic', 'deadline').trim() <> '')][getStereotypeProperty('RTSJ::Sporadic', 'deadline')/][else]0[/if]
[/template]

[template protected genPeriodicWcet(aClass : Class)]
[if (getStereotypeProperty('RTSJ::Periodic', 'wcet').trim() <> '')][getStereotypeProperty('RTSJ::Periodic', 'wcet')/][else]0[/if]
[/template]

[template protected genPeriodicBcet(aClass : Class)]
[if (getStereotypeProperty('RTSJ::Periodic', 'bcet').trim() <> '')][getStereotypeProperty('RTSJ::Periodic', 'bcet')/][else]0[/if]
[/template]

[template protected genSporadicWcet(aClass : Class)]
[if (getStereotypeProperty('RTSJ::Sporadic', 'wcet').trim() <> '')][getStereotypeProperty('RTSJ::Sporadic', 'wcet')/][else]0[/if]
[/template]

[template protected genSporadicBcet(aClass : Class)]
[if (getStereotypeProperty('RTSJ::Sporadic', 'bcet').trim() <> '')][getStereotypeProperty('RTSJ::Sporadic', 'bcet')/][else]0[/if]
[/template]

[template protected genSporadicMessages(aClass : Class)]
[if (getStereotypeProperty('RTSJ::Sporadic', 'messages').trim() <> '')][getStereotypeProperty('RTSJ::Sporadic', 'messages')/][else]0[/if]
[/template]
