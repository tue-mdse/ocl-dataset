[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2011, 2014 Obeo and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Stephane Begaudeau (Obeo) - initial API and implementation
[/comment]
[module documentation('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::eclipse::umlgen::gen::java::common::declaration/]
[import org::eclipse::umlgen::gen::java::common::path /]

[import org::eclipse::umlgen::gen::java::services::commonServices /]
[import org::eclipse::umlgen::gen::java::services::configurationServices /]

[template public genHeader(aClassifier : Classifier) post(trim())]
/*******************************************************************************
[if (aClassifier.reqGetCopyrightAndLicense().trim().size() > 0)]
 * [aClassifier.reqGetCopyrightAndLicense()/]
[else]
 * File generated from the [if (not aClassifier.qualifiedName.oclIsUndefined())][aClassifier.qualifiedName/][else][aClassifier.name/][/if] uml [aClassifier.eClass().name/]
 * Generated by the Acceleo 3 <i>UML to Java</i> generator.
 * Date: [reqDate()/] [reqTime()/]
[/if]
 *******************************************************************************/
[/template]

[template public genJavadoc(aClassifier : Classifier)]
/**
[if (aClassifier.hasComment() or aClassifier.hasDocumentation())]
[for (documentation : String | aClassifier.allDocumentation()->union(aClassifier.eInverse(Comment)._body))]
[documentation.reqFormatJavadoc()/][/for]
[else]
 * Description of [aClassifier.name/].
[/if]
 * 
 * @author [aClassifier.reqGetAuthor()/]
 */
[/template]

[template public genComment(anElement : Element)]
[for (ownedComment : Comment | anElement.ownedComment)]
[ownedComment._body/][/for]
[/template]

[query public hasDocumentation(anElement : Element) : Boolean =
	anElement.eAnnotations.details->select(entry | entry.key = 'documentation')->size() > 0
/]

[query public hasComment(anElement : Element) : Boolean =
	anElement.eInverse(Comment)->size() > 0
/]

[query private allDocumentation(anElement : Element) : Sequence(String)
	= anElement.eAnnotations.details->select(entry | entry.key = 'documentation')->collect(entry | entry.value)
/]


[template public genOperationComment(anOperation : Operation)]
/**
[if (anOperation.hasComment() or anOperation.hasDocumentation())]
[for (documentation : String | anOperation.allDocumentation()->union(anOperation.eInverse(Comment)._body))]
[documentation.reqFormatJavadoc()/][/for]
[else]
 * Description of the method [anOperation.genName()/].
[/if]
[for (parameter : Parameter | anOperation.ownedParameter)]
[if (not (parameter.direction = ParameterDirectionKind::return))]
 * @param [parameter.genName()/] [parameter.genComment()/]
[/if]
[/for]
[for (parameter : Parameter | anOperation.ownedParameter)]
[if (parameter.direction = ParameterDirectionKind::return)]
 * @return [parameter.genComment()/]
[/if]
[/for]
 */
[/template]

[template public genInheritedOperationComment(anOperation : Operation)]
/**
 * {@inheritDoc}
[if(anOperation.eContainer().oclIsKindOf(Classifier))]
 * @see [anOperation.eContainer().oclAsType(Classifier).genPackageDeclaration()/].[anOperation.eContainer().oclAsType(Classifier).name/]
[/if]
 */
[/template]