[comment encoding = UTF-8 /]
[module importResolve('http://www.eclipse.org/uml2/4.0.0/UML')]

[import org::eclipse::acceleo::sisgom::uml2java::common::stereotypeUtils /]
[import org::eclipse::acceleo::sisgom::uml2java::common::fileUtils /]
[import org::eclipse::acceleo::sisgom::properties::properties /]

[template public genDefaultImport(aType : Classifier)post (trim())]
[if (aType.oclIsTypeOf(Class) and aType.oclAsType(Class).superClass->isEmpty())]
[let pack : Package = aType.getPackageBase()]
import [pack.name + '.'+ pack.getUtilsNamespace() + '.' + pack.getBaseBean()/];
[/let]
[/if]
[if (aType.getAllAttributes()->exists(property : Property | property.upper = -1 or property.upper > 1))]
import java.util.List;
[/if]
[if (aType.oclIsTypeOf(Class))]
	[let aClass : Class = aType.oclAsType(Class)]
[aClass.obterTodosOsTipo().genElementsImportGeneric(aType) /]
[aClass.importEntityNamespece() /]
	[/let]
[elseif (aType.oclIsTypeOf(Interface))]
	[aType.oclAsType(Interface).obterTodosOsTipo().genElementsImportGeneric(aType) /]
[/if]
// [protected ('for imports' + aType.name)]
// [/protected]
[/template]

[template public genElementsImportGeneric(aType : Type, aPai: Classifier)]
[if (aType.oclIsTypeOf(DataType))]
	[if (getProperty(aType.name) <> '')]
import [getProperty(aType.name)/];[/if][else]
[aType.genElementsImportSpecific(aPai)/][/if][/template]

[template public genElementsImportSpecific(aClass : Class, aPai: Classifier)]
[if (aClass.genPackageValue() <>  aPai.genPackageValue() and aClass.genPackageValue() <> '')]
import [aClass.genPackageValue()+ '.' + aClass.name + aClass.getEntitySuffix() /];
[/if]
[/template]

[template public genElementsImportSpecific(anEnum : Enumeration, aPai: Classifier)]
import [anEnum.genPackageEnum()+ '.' + anEnum.name + anEnum.getEnumSuffix() /];
[/template]

[template public genElementsImportSpecific(aType : Type, aPai: Classifier)]
[/template]

[template public importEntityNamespece(aClass : Class) post (trim())]
[if (aClass.hasStereotypeQuery('Entity'))]
import [aClass.getJavaxPersistence() /];
[/if]
[/template]

[query private obterTodosOsTipo(aClass : Class) : OrderedSet(Type) = 
aClass.getAllAttributes()->collect(s : Property | s.type)->union(aClass.getOperations()->union(aClass.getImplementedInterfaces().ownedOperation).ownedParameter
	->collect(c  : Parameter | c.type))->reject(tipo : Type | tipo.oclIsTypeOf(PrimitiveType)) ->asOrderedSet() /]


[query private obterTodosOsTipo(aInterface : Interface) : OrderedSet(Type) = 
aInterface.getAllAttributes()->collect(s : Property | s.type)->union(aInterface.getOperations().ownedParameter
	->collect(c  : Parameter | c.type))->reject(tipo : Type | tipo.oclIsTypeOf(PrimitiveType))->asOrderedSet() /]
