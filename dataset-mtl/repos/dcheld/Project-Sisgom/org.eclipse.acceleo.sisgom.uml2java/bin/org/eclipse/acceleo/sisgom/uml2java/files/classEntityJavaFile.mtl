[comment encoding = UTF-8 /]
[**
 * The documentation of the module classJavaFile.
 */]
[module classEntityJavaFile('http://www.eclipse.org/uml2/4.0.0/UML')]

[import org::eclipse::acceleo::sisgom::uml2java::common::fileUtils /]
[import org::eclipse::acceleo::sisgom::uml2java::common::importResolve /]
[import org::eclipse::acceleo::sisgom::uml2java::files::hibernateFile /]
[import org::eclipse::acceleo::sisgom::properties::properties /]

[**
 * The documentation of the template genClassJavaFile.
 * @param aClass
 */]
[template public genClassJavaEntity(aClass : Class)]
[file (aClass.genFilePathEntity(), false, 'UTF-8')]
package [aClass.genPackageEntity()/];

[aClass.genDefaultImport()/]
[aClass.hibernatEntity()/]
public [if (aClass.isAbstract)]abstract[/if] class [aClass.getClassNameEntity()/] [aClass.inheritance()/]{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	[aClass.fields()/]
	public [aClass.name + aClass.getEntitySuffix()/]() {
		super();
	}
	[aClass.constructor()/]
	[aClass.classBody()/]
}
[/file]
[/template]

[template private classBody(aClass : Class)]
[aClass.operations()/]
[aClass.accessors()/]
[/template]

[template private inheritance(aClass : Class) post (trim())]
[aClass.extendedClasses()/][aClass.implementedInterfaces()/]
[/template]

[template private extendedClasses(aClass : Class)]
[if(aClass.superClass->notEmpty())]
[for (aSuperClass : Class | aClass.superClass) before(' extends ') separator(', ')][aSuperClass.name + aSuperClass.getEntitySuffix()/][/for]
[else]
 extends BaseBean
[/if]
[/template]

[template private implementedInterfaces(aClass : Class)]
[for (anInterface : Interface | aClass.getImplementedInterfaces()) before(' implements ') separator(', ')][anInterface.name/][/for]
[/template]

[template private fields(aClass : Class)]
[for (aProperty : Property | aClass.attribute) separator ('\n')]
[aProperty.hybernatProperty()/]
private [if (aProperty.upper = -1 or aProperty.upper > 1)]List<[aProperty.type.getClassNameEntity()/]>[else][aProperty.type.getClassNameEntity()/][/if] [aProperty.name.toLowerFirst()/];
[/for]
[/template]

[template private operations(aClass : Class)]
[for (anOperation : Operation | aClass.getOperations()->union(aClass.getImplementedInterfaces().ownedOperation)) separator ('\r\n')]
/**
 * The documentation of the method [anOperation.name.toLowerFirst()/].
 * [for (aComment : Comment | anOperation.ownedComment)] [aComment._body/][/for]
[for (aParameter : Parameter | anOperation.ownedParameter) ? (aParameter.direction <> ParameterDirectionKind::return)]
 * @param [aParameter.name/]
[/for]
[if (not anOperation.type.oclIsUndefined())]
 * @return
[/if]
 * 
 * @generated
 */
public [if (anOperation.type.oclIsUndefined())]void[else][anOperation.type.name/][/if] [anOperation.name/]([anOperation.parameters()/]) {
	// [protected ('for the body of ' + anOperation.name.toLowerFirst())]
	// TODO should be implemented
	[if (not anOperation.type.oclIsUndefined())]
	return null;
	[/if]
	// [/protected]
}

[/for]
[/template]

[template private parameters(anOperation : Operation)]
[for (aParameter : Parameter | anOperation.ownedParameter->reject(aParameter : Parameter | aParameter.direction = ParameterDirectionKind::return)) separator(', ')][aParameter.type.name/] [aParameter.name.toLowerFirst()/][/for]
[/template]

[query private allAbstractOperationsInherited(aClass : Class) : Sequence(Operation) =
	aClass.superClass.ownedOperation->select(anOperation: Operation | anOperation.isAbstract)->asSequence()
/]

[template private accessors(aClass : Class)]
[for (aProperty : Property | aClass.attribute) separator ('\n')]
public [aProperty.fieldsType()/] get[aProperty.name.toUpperFirst()/]() {
	return this.[aProperty.name.toLowerFirst()/];
}

public void set[aProperty.name/]([aProperty.fieldsType()/] [aProperty.name.toLowerFirst()/]) {
	this.[aProperty.name.toLowerFirst()/] = [aProperty.name.toLowerFirst()/];
}
[/for]
[/template]

[template public getClassNameEntity(aClass : Class)post (trim())]
[aClass.name.toUpperFirst() + aClass.getEntitySuffix()/]
[/template]

[template public getClassNameEntity(anEnum : Enumeration)post (trim())]
[anEnum.name.toUpperFirst() + anEnum.getEnumSuffix()/]
[/template]

[template public getClassNameEntity(aType : Type)post (trim())]
[aType.name /]
[/template]

[template private fieldsType(aProperty : Property) post (trim())]
[let typeName : String = aProperty.type.getClassNameEntity()][if (aProperty.upper = -1 or aProperty.upper > 1)]List<[typeName/]>[else][typeName/][/if][/let] 
[/template]

[template public constructor(aClass : Class)]
public [aClass.name + aClass.getEntitySuffix()/]([for (aProp : Property | aClass.getAllAttributes()->sortedBy(a : Property | a.name))separator(', ')][aProp.fieldsType() + ' ' + aProp.name.toLowerFirst()/][/for]) {
	super([for (aProp : Property | aClass.superClass.getAllAttributes()->sortedBy(a : Property | a.name))separator(', ')][aProp.name.toLowerFirst()/][/for]);
[for (aProp : Property | aClass.attribute->sortedBy(a : Property | a.name))]
	this.[aProp.name.toLowerFirst()/] = [aProp.name.toLowerFirst()/]; 
[/for]
}
[/template]