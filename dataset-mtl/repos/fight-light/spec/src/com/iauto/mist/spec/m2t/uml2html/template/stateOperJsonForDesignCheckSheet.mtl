[comment encoding = UTF-8 /]
[module stateOperJsonForDesignCheckSheet('http://www.eclipse.org/uml2/4.0.0/UML')]

[import com::iauto::mist::spec::m2t::uml2html::query::commonQuery/]

[template public genStateOperationJsonForDesignCheckSheet(aModel : Model)]
[file ('statesOperation.json', false, 'UTF-8')]
{
[for (asm : StateMachine | aModel.getAllStateMachine()->sortedBy(name))]
[genInitState(asm)/]
[let condition : Boolean = asm.submachineState->size() > 1]
	[for (is : State | asm.region.getAllVertex()->selectByType(State)->select(region->isEmpty() and submachine->isEmpty())->sortedBy(name))]
[let specState : Sequence(String) = Sequence{}]
[genSpecState(is, specState)/]
"[if(specState->at(4)<>null and specState->at(4)<>'')][specState->at(4).xlsNameEscape()/] [/if][specState->at(3).xlsNameEscape()/]":{
	"cl_state":"[is.name.otherEscapeText().escapeTextForOperAndCL()/]",
	"cl_diagram":"[asm.name.otherEscapeText().escapeTextForOperAndCL()/]",
	"comment_author":"[genCommentAuthor(asm).otherEscapeText().escapeTextForOperAndCL()/]",
	"comment_verNo":"[genCommentVerNo(asm).otherEscapeText().escapeTextForOperAndCL()/]",
    "title":"[specState->at(4).otherEscapeText().escapeTextForOperAndCL()/] [specState->at(3).otherEscapeText().escapeTextForOperAndCL()/]",
	"path":"[specState->at(4).otherEscapeText().escapeTextForOperAndCL()/]",
	"isState":"true",
	"diagram":"[specState->at(5)/]",
    "info":"[specState->at(6).otherEscapeText().escapeTextForOperAndCL()/]",
	"actionresponse":"[specState->at(1).otherEscapeText().escapeTextForOperAndCL()/]",
	"display":"[specState->at(2).otherEscapeText().escapeTextForOperAndCL()/]"
},
[/let]
	[/for]
[/let]
[/for]
}
[/file]
[/template]

[template public genInitState(asm : StateMachine)]
[let initTransition : Transition = asm.region->asSequence()->at(1).getInitTransition()]
[if (initTransition->notEmpty() and initTransition.target.isChioce())]
"[initTransition.target.name.xlsNameEscape()/] [initTransition.target.name.xlsNameEscape()/]":{
	"cl_state":"",
	"cl_diagram":"[asm.name.otherEscapeText().escapeTextForOperAndCL()/]",
	"comment_author":"[genCommentAuthor(asm).otherEscapeText().escapeTextForOperAndCL()/]",
	"comment_verNo":"[genCommentVerNo(asm).otherEscapeText().escapeTextForOperAndCL()/]",
    "title":"[initTransition.target.name.otherEscapeText().escapeTextForOperAndCL()/]",
	"path":"",
	"isState":"false",
    "diagram":"",
    "info":""
},
[/if]
[/let]
[/template]

[query public isChioce(vertex : Vertex) : Boolean =  
	vertex.oclIsTypeOf(Pseudostate) and vertex.oclAsType(Pseudostate).kind = PseudostateKind::choice
/]

[query public genCommentAuthor(asm : StateMachine) : String =  
	 invoke('com.iauto.mist.spec.m2t.uml2html.util.utils', 'getCommentAuthor(org.eclipse.uml2.uml.StateMachine)', Sequence{asm})
/]

[query public genCommentVerNo(asm : StateMachine) : String =  
	 invoke('com.iauto.mist.spec.m2t.uml2html.util.utils', 'getCommentVersionNum(org.eclipse.uml2.uml.StateMachine)', Sequence{asm})
/]

[template private genSpecState(is : State , list : Sequence(String))]
[    invoke('com.iauto.mist.spec.common.plugin.util.AtlDataTracker', 'getSingleStateDataByPage(org.eclipse.uml2.uml.State, java.util.List)', Sequence{is,list})/]
[/template]


