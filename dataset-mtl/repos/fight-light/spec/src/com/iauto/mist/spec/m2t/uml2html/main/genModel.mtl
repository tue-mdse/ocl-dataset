[comment encoding = UTF-8 /]
[module genModel('http://com.iauto.mist.spec/2.0')]

[import com::iauto::mist::spec::m2t::uml2html::query::commonQuery/]

[template public genModel(container : StateMachine)]
[file ('model.js', false, 'UTF-8')]
define(['[\'dynamic-module\', \'state-machine\']'/], function(module, StateMachine) {
  module.service('model', ['['/]function(){
    var model = function() {
      var me = this;
      this.title = '[container.title/]';
      this.size = {'width': [if (container.model.width->notEmpty())] [container.model.width/][else]800[/if], 'height': [if (container.model.height->notEmpty())] [container.model.height/][else]480[/if]};
      this.curStatus = {'stm': '', 'containerId': '', 'stateId': '', 'transition': '', 'type': ''};
      this.preStatus = {};
      this.history = {};
      this.stateMachines = [container.getAllStates4Container().umlStateMachine.delRevAndEscape()->asSet()->sep('[\'', '\', \'', '\']')/];
      this.states = {[container.handleStates()/]};
      this.stateContainers = {[container.handleStateContainer()/]};
      this.choiceFromInitModelNameDict = {[container.handleChoiceFromInitModelNameDict()/]};
      this.needSoundStmArray = ['['/][for (stmname : String | getAllNeedDisplaySoundInfoStm()) separator (',')]'[stmname/]'[/for][']'/];
      this.containerHistory = {[container.handleContainerHistory()/]};
      this.historyContainer = {[container.handleHistoryContainer()/]};
      this.transitionExits = {[container.handleTransitionExits()/]};
      this.transitionEntries = {[container.handleTransitionEntries()/]};
      this.stateHistory = {[container.handleStateHistory()/]};
      this.stateModelNameDict = {[container.handleStateModelNameDict()/]};
      ///////////////////////method/////////////////////
      this.rollBack = function() {
        this.backAnyStatus(this.preStatus);
      };
      this.backAnyStatus = function(anyStatus) {
        this.storeStatus(anyStatus.stm, anyStatus.containerId, anyStatus.stateId, anyStatus.transition, anyStatus.type);
      };
      this.storeStatus = function(stm, containerId, stateId, event, type) {
        this.curStatus.stm = stm;
        this.curStatus.containerId = containerId;
        this.curStatus.stateId = stateId;
        this.curStatus.transition = event;
        this.curStatus.type = type || 'state';
        this.current = stateId;
        if (type === 'terminate') {
           this.clear();
        }
      };
      this.handleTransition = function(event, type, containerId) {
        var containerList = (type === 'onenter') ? this.transitionEntries['[event]'/] || ['[]'/] : this.transitionExits['[event]'/] || ['[]'/];
        for (var i in containerList) {
          // when onenter container is not the cureent container, do onenterContainer
          if (type !== 'onenter' || (containerId && containerList['[i]'/] !== containerId)) {
            me['[type + containerList[i]]'/](event);
          }
        }
      };
      this.enterHistory = function(event, containerId, historyId) {
        if (historyId in this.history && this.history['['/]historyId].length > 0) {
          this.handleTransition(event, 'onenter', containerId);
          var status = this.history['[historyId]'/].pop();
          var stateId = status.state;
          var containers = this.stateContainers['[stateId]'/] || ['[]'/];
          for (var i in containers) {
            var container = containers['[i]'/];
            if (container === containerId) break;
            var historyId = this.containerHistory['[container]'/];
            this.history['[historyId]'/].pop();
          }
          status.transition = event;
          this.backAnyStatus(status);
        }
        else {
          this.rollBack();
          console.info('State Router can\'t tigger transition: ' + event);
        }
      };
      this.enterState = function(event, stm, containerId, stateId) {
        this.storeStatus(stm, containerId, stateId, event, 'state');
        this.handleTransition(event, 'onenter');
        if (stateId in this.stateHistory && typeof this.preStatus.stateId !== 'undefined') {
          var history = this.stateHistory['[stateId]'/];
          for (var index in history) {
            var historyId = history['[index]'/];
            if (this.stateContainers['[stateId]'/].indexOf(this.historyContainer['[historyId]'/]) > -1
                && this.stateContainers['[this.preStatus.stateId]'/].indexOf(this.historyContainer['[historyId]'/]) > -1) {
              this.recordStatus(historyId);
            }
          }
        }
      };
      this.leaveState = function(event, stm, containerId, stateId) {
        this.preStatus.stm = stm;
        this.preStatus.containerId = containerId;
        this.preStatus.stateId = stateId;
        this.preStatus.transition = event;
        this.handleTransition(event, 'onleave');
      };
      this.enterChoice = function(event, stm, containerId, choiceId, isFromInitial) {
        this.storeStatus(stm, containerId, choiceId, event, isFromInitial ? 'choiceFromInitial' : 'choice');
        event && this.handleTransition(event, 'onenter');
      };
      this.leaveChoice = function(event, containerId, stateId) {
        this.handleTransition(event, 'onleave');
      };
      this.enterContainer = function(event, historyId) {
        if (historyId in this.history) {
          this.history['[historyId]'/].pop();
        }
      };
      this.leaveContainer = function(event, historyId) {
        this.recordStatus(historyId);
      };
      this.enterTerminate = function(event, containerId, stateId) {
        this.curStatus.containerId = containerId;
        this.curStatus.stateId = stateId;
        this.curStatus.transition = event;
        this.curStatus.type = 'terminate';
        this.clear();
      };
      this.recordStatus = function(historyId) {
        if (!(historyId in this.history)) {
          this.history['[historyId]'/] = ['[]'/];
        }
        // check whether the previous state in the container of historyId
        var isInStateHistories = false;
        var containers = this.stateContainers['[this.preStatus.stateId]'/];
        var containerId = this.historyContainer['[historyId]'/];
        if (!containerId) {
          return;
        }
        for (var i in containers) {
          if (containerId == containers['[i]'/]) {
            isInStateHistories = true;
            break;
          }
        }
        // when the previous state in the container of historyId, push the previous state into the historyId stack
        if (isInStateHistories) {
          var tempStatus = {stm: this.preStatus.stm, containerId: this.preStatus.containerId, stateId: this.preStatus.stateId};
          this.history['[historyId]'/].push(tempStatus);
        }
      };
      this.clear = function() {
        this.current = 'none';
        this.preStatus = {};
        this.history = {};
      };
    };

    model.prototype = {
      [handleContainer(container)/]
    };

    StateMachine.create({
      target: model.prototype,
      [handleEvents(container)/]
    });
    return new model();
  }]);
});
[/file]

[comment][file ('test.js', false, 'UTF-8')]
[container.handleStateHistory()/]
[/file][/comment]
[/template]

[template public handleStates(container : Container)]
[for (state : State | container.getAllStates4Container())]'[state.id/]': '[state.name.delRevAndEscape()/]', [/for]
[/template]

[comment]state containers[/comment]
[template public handleStateContainer(container : Container)]
[for (state : State | container.getAllStates4Container())]'[state.id/]': [state.container.getAllContainer4State().id->sep('[\'', '\', \'', '\']')/], [/for]
[/template]

[query public getAllContainer4State(container : Container) : Sequence(Container) =
  if (container.container->notEmpty()) then  container->asSequence()->union(container.container.getAllContainer4State())
  else container->asSequence()
  endif
/]

[comment]container history[/comment]
[template public handleContainerHistory(container : Container)]
[for (container : Container | container.getAllContainer()->prepend(container)->select(shallowHistory->notEmpty()))]'[container.id/]': '[container.shallowHistory.id/]', [/for]
[/template]

[comment]history container[/comment]
[template public handleHistoryContainer(container : Container)]
[for (container : Container | container.getAllContainer()->prepend(container)->select(shallowHistory->notEmpty()))]'[container.shallowHistory.id/]': '[container.id/]', [/for]
[/template]

[query public getAllContainer(container : Container) : Sequence(Container) =
  container.subContainer->asSequence()->union(container.subContainer.getAllContainer())
/]

[comment]transition exits[/comment]
[template public handleTransitionExits(container : Container)]
[for (transition : Transition | container.transition->select(transition: Transition | transition.exits->notEmpty()))]'[transition.id/]': [transition.exits->sep('[\'', '\', \'', '\']')/], [/for]
[/template]

[comment]transition entries[/comment]
[template public handleTransitionEntries(container : Container)]
[for (transition : Transition | container.transition->select(transition: Transition | transition.entries->notEmpty()))]'[transition.id/]': [transition.entries->sep('[\'', '\', \'', '\']')/], [/for]
[/template]

[comment]state-history same level[/comment]
[template public handleStateHistory(container : Container)]
[for (state : State | container.getAllStates4Container())][let historys : Sequence(ShallowHistory) = state.outgoing.getTargets(Sequence{})->excluding(null)][if (historys->notEmpty())]'[state.id/]': [historys.id->asSet()->sep('[\'', '\', \'', '\']')/], [/if][/let][/for]
[/template]

[comment]get target of state jump choice[/comment]
[query public getTargets(transition : Transition, seq : Sequence(ShallowHistory)) : Sequence(Vertex) = 
if (transition.target <> null) then 
  if (transition.target.oclIsTypeOf(Choice)) then transition.target.outgoing.getTargets(seq)
  else if (transition.target.oclIsTypeOf(ShallowHistory)) then seq->union(transition.target->asSequence())
       else null
       endif
  endif
else null
endif
/]

[comment]composite state[/comment]
[template public handleContainer(container : Container)]
[for (state : State | container.state)]
[handleState(state)/]
[/for]
[for (choice : Choice | container.choice)]
[handleChoice(choice)/]
[/for]
[if (container.terminate->notEmpty())]
[enterTerminate(container.terminate)/]
[/if]
[if (container.shallowHistory->notEmpty())]
[handlerHistory(container.shallowHistory)/]
'onenter[container.id/]': function(event, from, to) { this.enterContainer(event, '[container.shallowHistory.id/]'); },
'onleave[container.id/]': function(event, from, to) { this.leaveContainer(event, '[container.shallowHistory.id/]'); },
[else]
'onenter[container.id/]': function(event, from, to) {},
'onleave[container.id/]': function(event, from, to) {},
[/if]
[for (subcontainer : Container | container.subContainer)][handleContainer(subcontainer)/][/for]
[/template]

[comment]state[/comment]
[template public handleState(state : State)]
'onenter[state.id/]': function(event, from, to) { this.enterState(event, '[state.umlStateMachine.delRevAndEscape()/]', '[state.container.id/]', '[state.id/]'); },
'onleave[state.id/]': function(event, from, to) { this.leaveState(event, '[state.umlStateMachine.delRevAndEscape()/]', '[state.container.id/]', '[state.id/]'); },
[/template]

[comment]choice[/comment]
[template public handleChoice(choice : Choice)]
[if (choice.isFromInitial)]
'onenter[choice.id/]': function(event, from, to) { this.enterChoice(event, '[choice.umlStateMachine.delRevAndEscape()/]', '[choice.container.id/]', '[choice.id/]', true); },
'onleave[choice.id/]': function(event, from, to) { this.leaveChoice(event, '[choice.id/]'); },
[else]
'onenter[choice.id/]': function(event, from, to) { this.enterChoice(event, '[choice.umlStateMachine.delRevAndEscape()/]', '[choice.container.id/]', '[choice.id/]'); },
'onleave[choice.id/]': function(event, from, to) { this.leaveChoice(event, '[choice.id/]'); },
[/if]
[/template]

[comment]history[/comment]
[template public handlerHistory(history : ShallowHistory)]
'onenter[history.id/]': function(event, from, to) { this.enterHistory(event, '[history.container.id/]', '[history.id/]'); },
[/template]

[comment]terminate[/comment]
[template public enterTerminate(terminate : Terminate)]
'onenter[terminate.id/]': function(event, from, to) { this.enterTerminate(event, '[terminate.id/]', '[terminate.container.id/]'); },
[/template]

[comment]get all states for container[/comment]
[query public getAllStates4Container(container : Container) : Sequence(State) = 
  container.state->asSequence()->union(container.subContainer.getAllStates4Container())
/]

[comment]event[/comment]
[template public handleEvents(aStateMachine : StateMachine)]
events: ['['/]
  { name: 'init', from: 'none', to: '[aStateMachine.initial.outgoing.target.id/]' },
  [for (entryPoint : EntryPoint | aStateMachine.entryPoint)]
  { name: 'init', from: '[entryPoint.name.delRevAndEscape()/]', to: '[entryPoint.outgoing.target.id/]' },
  [/for]
  [for (transition : Transition | aStateMachine.transition->select(source->notEmpty() and target->notEmpty() and visibility <> Visibility::private))]
  { name: '[transition.id/]', from: '[transition.source.id/]', to: '[transition.target.id/]' },
  [/for]  
]
[/template]

[comment]stateModelNameDict #3650[/comment]
[template public handleStateModelNameDict(container : Container)]
[for (state : State | container.getAllStates4Container())]'[state.id/]': '[state.umlStateMachine/]', [/for]
[/template]

[comment]get all stmName which should be displayed sound info #3815[/comment]
[query public getAllNeedDisplaySoundInfoStm() : Sequence(String) =
    invoke('com.iauto.mist.spec.m2t.uml2html.util.utils', 'getAllNeedDisplaySoundInfoStm()', Sequence{})
/]
[comment]get all choices for containe #3815[/comment]
[query public getAllChoices4Container(container : Container) : Sequence(Choice) =
  container.choice->asSequence()->union(container.subContainer.getAllChoices4Container())
/]
[comment]get choice's modelName which is from init #3815[/comment]
[template public handleChoiceFromInitModelNameDict(container : Container)]
[let choices : Sequence(Choice) = container.getAllChoices4Container()->select(isFromInitial)]
  [if (choices->notEmpty())]
    [let choice : Choice = choices->at(1)]
'[choice.id/]': '[choice.umlStateMachine/]'
    [/let]
  [/if]
[/let]
[/template]
