[comment encoding = UTF-8 /]
[module stateOperJsonSpec('http://com.iauto.mist.spec/2.0')]

[template public genStateOperationJson(container : StateMachine)]
[file ('statesOperation.json', false, 'utf-8')]
{
[let choices : Sequence(Choice) = container.getAllChoices4Container()->select(isFromInitial)]
  [if (choices->notEmpty())]
  	[let choice : Choice = choices->at(1)]
"[getVertexName(choice)/]":{
	"cl_state":"",
	"cl_diagram":"[container.name/]",
	"title":"[choice.name/]",
	"path":"",
	"isState":"false",
    "diagram":"",
    "info":"",
	"actionresponse":['[]'/],
	"display":['[]'/],
    "transitions":{
		"start":{
			"imageName":"",
    		"operationName":"",
			"operationInfo":"",
			"transKind":"external",
			"beepSound":"",
			"duringDriving":"",
			"remark":"",
			"target":"",
    		"guards": {
				[choice.genTransition()/]
			}
		}
	}
},
	[/let]
  [/if]
[/let]
[for (state : State | container.getAllStates4Container())]
"[getVertexName(state)/]":{
	"cl_state":"[state.name/]",
	"cl_diagram":"[container.name/]",
    "title":"[getVertexName(state)/]",
	"path":"[state.screenID/]",
	"isState":"true",
    "diagram":[if state.image->notEmpty()]"resources/img/screen_page/[state.pageName.otherEscapeText().escapeText()/].png"[else]""[/if],
    "info":[if state.screenDescription->notEmpty()]"[state.screenDescription.otherEscapeText().escapeText()/]"[else]""[/if],
	"actionresponse":[if (state.screenActionResponse->notEmpty())][state.screenActionResponse/][else]['[]'/][/if],
	"display":[if (state.screenDisplay->notEmpty())][state.screenDisplay/][else]['[]'/][/if],
	"transitions":{
		[state.genTransition()/]
	}
},
[/for]
}
[/file]
[/template]

[template public handleGuards(transition : Transition)]
[if (transition.target->notEmpty() and transition.target.oclIsTypeOf(Choice))]
"target":"",
"guards": {[transition.target.genTransition()/]}
[else]
	[if (transition.source = transition.target)]
"target":[if transition.infoValue->notEmpty()]"[transition.infoValue.otherEscapeText().escapeText()/]"[else]""[/if]
	[else]
"target":[if transition.getExpectValue()->notEmpty()]"[transition.getExpectValue().otherEscapeText().escapeText()/]"[else]""[/if]
	[/if]
[/if]
[/template]

[template public genTransition(vertex : Vertex)]
[for (transition : Transition | vertex.outgoing->sortedBy(name))]
"[transition.name/]":{
	"imageName":"[transition.image/]",
	"operationName":"[transition.infoName/]",
	"operationInfo":[if transition.infoValue->notEmpty()]"[transition.infoValue.otherEscapeText().escapeText()/]"[else]""[/if],
	"transKind":"[if (transition.source = transition.target)]internal[else]external[/if]",
	"beepSound":"[transition.beepSound/]",
	"duringDriving":"[transition.duringDriving/]",
	"remark":"[transition.remark/]",
	[transition.handleGuards()/]
},
[/for]
[/template]

[comment]get all choices for container[/comment]
[query public getAllChoices4Container(container : Container) : Sequence(Choice) = 
  container.choice->asSequence()->union(container.subContainer.getAllChoices4Container())
/]


[comment]get all states for container[/comment]
[query public getAllStates4Container(container : Container) : Sequence(State) = 
  container.state->asSequence()->union(container.subContainer.getAllStates4Container())
/]

[comment]translate[/comment]
[query public escapeText(aString : String) : String = 
aString.replaceAll('\r\n|\r|\n', '\\\\r').replaceAll('\\\'', '\\\\\\\'').replaceAll('\\\"', '\\\\\\\"')
 /]

[query public otherEscapeText(aString : String) : String = 
aString.replaceAll('\t', '    ').replaceAll('\\\\', '\\\\\\\\').replaceAll('\"', '\\\"').replaceAll('\'', '\\'+'\'')
 /]

[query public xlsNameEscape(aString : String) : String = 
aString.replaceAll('\t', '_').replaceAll('\"', '_').replaceAll('/', '_').replaceAll('\\\\', '_')
 /]

[comment]vertexName[/comment]
[query public getVertexName(vertex : Vertex) : String = 
if vertex.oclIsTypeOf(Choice) then
	let choice : Choice = vertex.oclAsType(Choice) in
	choice.name
else 
	if vertex.oclIsTypeOf(State) then
		let state : State = vertex.oclAsType(State) in
		if state.screenID->notEmpty() and state.screenID <> '' then
			if state.screenName->notEmpty() and state.screenName <> '' then
				state.screenID + ' ' + state.screenName
			else
				state.screenID
			endif
		else
			if state.screenName->notEmpty() and state.screenName <> '' then
				state.screenName
			else
				state.name
			endif
		endif
	else
		vertex.name
	endif
endif
 /]

[query public getExpectValue(it : Transition) : String = 
if it.target.oclIsTypeOf(State) then
	let is : State = it.target.oclAsType(State) in
		is.screenID
else
	if it.target.oclIsTypeOf(ShallowHistory) then
		it.target.name
	else
		if it.target.oclIsTypeOf(Terminate) then
			'アプリ終了'
		else
			if it.target.oclIsTypeOf(Choice) then
				it.target.name
			else
				null
			endif
		endif
	endif
endif
 /]
