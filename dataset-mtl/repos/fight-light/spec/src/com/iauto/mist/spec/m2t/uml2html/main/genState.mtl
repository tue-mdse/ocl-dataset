[comment encoding = UTF-8 /]
[module genState('http://com.iauto.mist.spec/2.0')]

[import com::iauto::mist::spec::m2t::uml2html::query::commonQuery/]

[template public genState(container : StateMachine)]
[file ('states.js', false, 'utf-8')]
var states = {

[let choices : Sequence(Choice) = container.getAllChoices4Container()->select(isFromInitial)]
  [if (choices->notEmpty())]
  	[let choice : Choice = choices->at(1)]
  '[choice.id/]': {'name': '', 'screenID': '', 'screenName': '', 'info': '[appendTransitionRemarks2Info(choice).dealEscape()/]', 'diagram': '',  'screen_action': '', 'screen_display': '',
    'transitions': {
      'start': {'name': 'start', 'imageName': '', 'operationName': '', 'operationInfo': '',
        'guards': {
          [choice.genTransition()/]
        }
      }
    }
  },		
  	[/let]
  [/if]
[/let]
[for (state : State | container.getAllStates4Container())]
  '[state.id/]': {'name': '[state.name.dealEscape()/]', 'screenID': '[state.screenID.dealEscape()/]', 'screenName': '[state.screenName.dealEscape()/]', 'diagram': '[state.image/]', 'stm': '[state.umlStateMachine.delRevAndEscape()/]',
    'info': '[appendTransitionRemarks2Info(state).dealEscape()/]',
    'screen_action': [if (state.screenActionResponse->notEmpty())] [state.screenActionResponse/][else]['[]'/][/if],
    'screen_display': [if (state.screenDisplay->notEmpty())] [state.screenDisplay/][else]['[]'/][/if],
    'transitions': {
      [state.genTransition()/]
    }
  },
[/for]
};
if ("function" === typeof define) {
  define(function(require) { return states; });
}
else {
  window.states = states;
}
[/file]
[/template]

[template public handleGuards(transition : Transition)]
[if (transition.target->notEmpty() and transition.target.oclIsTypeOf(Choice))]
'guards': {[transition.target.genTransition()/]}
[else]
'guards': {},[/if]
[/template]

[template public genTransition(vertex : Vertex)]
[for (transition : Transition | vertex.outgoing->sortedBy(name))]
'[transition.id/]': {'name': '[transition.name.dealEscape()/]', 'imageName': '[transition.image/]', 'operationName': '[transition.infoName.dealEscape()/]', 'operationInfo': '[getOperationInfoWithoutRemark(transition.infoValue).dealEscape()/]', 'beepSound': '[transition.beepSound.otherEscapeText().escapeText()/]', 'remark': '[transition.remark.dealEscape()/]', 'animationType': '[transition.animationType/]', 'animationParameter': [if (transition.animationParameter <> '')][transition.animationParameter/][else]{}[/if], [transition.handleGuards()/]},
[/for]
[/template]

[comment]get all choices for container[/comment]
[query public getAllChoices4Container(container : Container) : Sequence(Choice) = 
  container.choice->asSequence()->union(container.subContainer.getAllChoices4Container())
/]


[comment]get all states for container[/comment]
[query public getAllStates4Container(container : Container) : Sequence(State) = 
  container.state->asSequence()->union(container.subContainer.getAllStates4Container())
/]

[comment]get transition.infoValue(remove remark from transition.infoValue)[/comment]
[query public getOperationInfoWithoutRemark(transInfoValue : String) : String =  
	 invoke('com.iauto.mist.spec.m2t.uml2html.util.Spec2StatesJsTools', 'removeRemarkInfo(java.lang.String)', Sequence{transInfoValue})
/]
[comment]get info(append transition remark to info)[/comment]
[query public appendTransitionRemarks2Info(vertex : Vertex) : String =  
	 invoke('com.iauto.mist.spec.m2t.uml2html.util.Spec2StatesJsTools', 'appendTransitionRemarks2Info(spec.Vertex)', Sequence{vertex})
/]
