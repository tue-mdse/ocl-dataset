[comment encoding = UTF-8 /]
[module upiOperJson('http://com.iauto.mist.spec/2.0')]
[import com::iauto::mist::spec::m2t::uml2html::query::commonQuery/]

[template public genOperationJson(container : StateMachine)]
[for (state : State | container.getAllStates4Container()->sortedBy(name))]
[file ('upiTmpJson/' + state.id + '.json', false, 'utf-8')]
{
"[getVertexName(state)/]":{
	"stateId":"[state.genealogy/]",
	"author":"[state.umlStateMachine.genCommentBody().otherEscapeText().escapeTextForOperAndCL()/]",
	"stateName":"[state.getVertexName()/]",
	"stmName":"[state.umlStateMachine/]",
    "diagram":[if state.image->notEmpty()]"resources/img/screen_page/[state.pageName.otherEscapeText().escapeTextForOperAndCL()/].png"[else]""[/if],
    "info":[if (state.screenDescription->notEmpty())]"[state.screenDescription.otherEscapeText().escapeTextForOperAndCL()/]"[else]""[/if],
	"actionresponse":"[if (state.screenActionResponse->notEmpty())][state.screenActionResponse.otherEscapeText().escapeTextForOperAndCL()/][else]['[]'/][/if]",
	"display":"[if (state.screenDisplay->notEmpty())][state.screenDisplay.otherEscapeText().escapeTextForOperAndCL()/][else]['[]'/][/if]",
	"transitions":{
		[state.genTransition()/]
	}
}
}
[/file]
[/for]
[/template]

[template public handleGuards(transition : Transition)]
[if transition.target->notEmpty()]
	[if transition.target.oclIsTypeOf(Choice)]
"target":"",
"guards": {
	[transition.target.oclAsType(Choice).genGuards()/]
}
	[else]
		[if transition.source = transition.target]
"target":[if transition.infoValue->notEmpty()]"[transition.infoValue.otherEscapeText().escapeTextForOperAndCL()/]"[else]""[/if]
		[else]
"target":[if transition.getExpectValue()->notEmpty()]"[transition.getExpectValue().otherEscapeText().escapeTextForOperAndCL()/]"[else]""[/if]
		[/if]
	[/if]
[else]
"target":""
[/if]
[/template]

[template public genGuards(choice : Choice)]
[for (it : Transition | choice.outgoing->sortedBy(name))]
"[it.name/]":{
	"imageName":[if it.image->notEmpty()]"[it.image.otherEscapeText().escapeTextForOperAndCL()/]"[else]""[/if],
	"operationName":[if it.infoName->notEmpty()]"[it.infoName.otherEscapeText().escapeTextForOperAndCL()/]"[else]""[/if],
	"operationInfo":[if it.infoValue->notEmpty()]"[it.infoValue.otherEscapeText().escapeTextForOperAndCL()/]"[else]""[/if],
	"transKind":"[if (it.source = it.target)]internal[else]external[/if]",
	"beepSound":[if it.beepSound->notEmpty()]"[it.beepSound.otherEscapeText().escapeTextForOperAndCL()/]"[else]""[/if],
	"duringDriving":[if it.duringDriving->notEmpty()]"[it.duringDriving.otherEscapeText().escapeTextForOperAndCL()/]"[else]""[/if],
	"remark":[if it.remark->notEmpty()]"[it.remark.otherEscapeText().escapeTextForOperAndCL()/]"[else]""[/if],
	[it.handleGuards()/] 
},
[/for]
[/template]

[template public genTransition(vertex : Vertex)]
[for (transition : Transition | vertex.outgoing->select(checkTransition())->select(visibility<>Visibility::private or visibility=null)->sortedBy(name))]
"[transition.name/]":{
	"condition":"",
	"imageName":[if transition.image->notEmpty()]"[transition.image.otherEscapeText().escapeTextForOperAndCL()/]"[else]""[/if],
	"operationName":[if transition.infoName->notEmpty()]"[transition.infoName.otherEscapeText().escapeTextForOperAndCL()/]"[else]""[/if],
	"operationInfo":[if transition.infoValue->notEmpty()]"[transition.infoValue.otherEscapeText().escapeTextForOperAndCL()/]"[else]""[/if],
	"transKind":"[if (transition.source = transition.target)]internal[else]external[/if]",
	"beepSound":[if transition.beepSound->notEmpty()]"[transition.beepSound.otherEscapeText().escapeTextForOperAndCL()/]"[else]""[/if],
	"duringDriving":[if transition.duringDriving->notEmpty()]"[transition.duringDriving.otherEscapeText().escapeTextForOperAndCL()/]"[else]""[/if],
	"remark":[if transition.remark->notEmpty()]"[transition.remark.otherEscapeText().escapeTextForOperAndCL()/]"[else]""[/if],
	[transition.handleGuards()/]
},
[/for]
[/template]

[comment]get all states for container[/comment]
[query public getAllStates4Container(container : Container) : Sequence(State) = 
  container.state->asSequence()->union(container.subContainer.getAllStates4Container())
 /]

[query public genCommentBody(smName : String) : String =  
  invoke('com.iauto.mist.spec.m2t.uml2html.util.utils', 'getCommentBody(java.lang.String)', Sequence{smName})
/]

[query public checkTransition(aTransition : Transition) : Boolean = 
if aTransition.source->notEmpty() and aTransition.target->notEmpty() then
    true
else
    false
endif
 /]

[comment]vertexName[/comment]
[query public getVertexName(vertex : Vertex) : String = 
if vertex.oclIsTypeOf(Choice) then
	let choice : Choice = vertex.oclAsType(Choice) in
	choice.name
else 
	if vertex.oclIsTypeOf(State) then
		let state : State = vertex.oclAsType(State) in
		if state.screenID->notEmpty() and state.screenID <> '' then
			if state.screenName->notEmpty() and state.screenName <> '' then
				state.screenID + ' ' + state.screenName
			else
				state.screenID
			endif
		else
			if state.screenName->notEmpty() and state.screenName <> '' then
				state.screenName
			else
				state.name
			endif
		endif
	else
		vertex.name
	endif
endif
 /]

[query public getExpectValue(it : Transition) : String = 
if it.target.oclIsTypeOf(State) then
	let is : State = it.target.oclAsType(State) in
		is.screenID
else
	if it.target.oclIsTypeOf(ShallowHistory) then
		it.target.name
	else
		if it.target.oclIsTypeOf(Terminate) then
			'アプリ終了'
		else
			if it.target.oclIsTypeOf(Choice) then
				it.target.name
			else
				null
			endif
		endif
	endif
endif
 /]
