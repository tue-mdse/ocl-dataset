[comment encoding = UTF-8 /]
[module stateList('http://www.eclipse.org/uml2/4.0.0/UML')]

[import com::iauto::mist::spec::m2t::uml2html::query::commonQuery/]

[template public genStateListFile(aModel : Model)]
[file ('states.js', false, 'UTF-8')]
[for (asm : StateMachine | aModel.getAllStateMachine()->sortedBy(name))]
///////////////////////// State Machine - [asm.name/] /////////////////////////
[genInitState(asm)/]
[let condition : Boolean = asm.submachineState->size() > 1]
	[for (is : State | asm.region.getAllVertex()->selectByType(State)->select(region->isEmpty() and submachine->isEmpty())->sortedBy(name))]
StateRouter.create('[asm.name/]', '[is.name/]', {
  title: '[let ic : Constraint = is.ownedRule->any(name='id')][let ils : LiteralString = ic.specification][if (ils.value<>null)][ils.value/][/if][else][''/][/let][else][''/][/let] [let ic : Constraint = is.stateInvariant][let ils : LiteralString = ic.specification][if (ils.name<>null)][ils.name/][/if][/let][/let]',
  id: '[getRefId(is)/]',
  isState: true,
  default: {
    [let ic : Constraint = is.stateInvariant]
    diagram: '[ic.name.addPicSuffix()/]',
    info: '[let ils : LiteralString = ic.specification][if (ils.value<>null)][ils.value.escapeText().escapeModifyFormat()/][/if][/let]',
		[else]
    diagram: '[getDefaultPre()/][is.name/][getDefaultPost()/]',
    info: '',
	[/let]
    screen_action: [let ic : Constraint = is.ownedRule->any(name='screen_action_response')][let ils : LiteralString = ic.specification][if (ils.value<>null)][ils.value/][/if][else]['[]'/][/let][else]['[]'/][/let],
    screen_display: [let ic : Constraint = is.ownedRule->any(name='screen_display')][let ils : LiteralString = ic.specification][if (ils.value<>null)][ils.value/][/if][else]['[]'/][/let][else]['[]'/][/let],
    transitions: {
      [is.genTransition(asm, condition)/]
    }
  }
});
	[/for]
[/let]
[/for]
[/file]
[/template]

[template public genInitState(asm : StateMachine)]
[let initTransition : Transition = asm.region->asSequence()->at(1).getInitTransition()]
[if (initTransition->notEmpty() and initTransition.target.isChioce())]
StateRouter.create('[asm.name/]', '[initTransition.target.name/]', {
  title: '[initTransition.target.name/]',
  id: '[getRefId(initTransition.target)/]',
  isState: false,
  default: {
    diagram: '[getDefaultPre()/][initTransition.target.name/][getDefaultPost()/]',
    info: '',
    transitions: {
      [genTransition4Choice(initTransition.target, asm, false)/]
    }
  }
});
[/if]
[/let]
[/template]

[template private genTransitionFromComment(is : State, icontext : String,  asm : StateMachine, condition : Boolean)]
[let outgoings : Sequence(Transition) = Sequence{}]
[genOutgoings(is,icontext,outgoings)/]
[for (it : Transition | outgoings->select(checkTransition())->select(visibility<>VisibilityKind::private or visibility=null))]
'[it.name/]': {
[if (condition and not (it.containingStateMachine() = asm))]
   [let states : Sequence(State) = asm.submachineState -> select(getOutGoings().name->includes(it.name))->asSequence()]
   [if (states->notEmpty())]
  condition: '[genCondition(states, asm)/]',
   [/if]
   [/let]
[/if]
  imageName: '[let ic : Constraint = it.ownedRule->any(name='image')][let ils : LiteralString = ic.specification][if (ils.name<>null)][ils.name/][/if][/let][/let]',
  operationName: '[let ic : Constraint = it.ownedRule->any(name='info')][let ils : LiteralString = ic.specification][if (ils.name<>null)][ils.name/][/if][/let][/let]',
  operationInfo: '[let ic : Constraint = it.ownedRule->any(name='info')][let ils : LiteralString = ic.specification][if (ils.value<>null)][ils.value.escapeText().escapeModifyFormat()/][/if][/let][/let]',
  guards: ['['/]
    [genGuards(it, asm)/]
  ]
},
[/for]
[/let]
[/template]

[template private genTransition(is : Vertex, asm : StateMachine, condition : Boolean)]
[let outgoings : Sequence(Transition) = Sequence{}]
[genOutgoings(is,outgoings)/]
[for (it : Transition | outgoings->select(checkTransition())->select(visibility<>VisibilityKind::private or visibility=null)->sortedBy(name))]
'[it.name/]': {
[if (condition and not (it.containingStateMachine() = asm))]
   [let states : Sequence(State) = asm.submachineState -> select(getOutGoings().name->includes(it.name))->asSequence()]
   [if (states->notEmpty())]
  condition: '[genCondition(states, asm)/]',
   [/if]
   [/let]
[/if]
  imageName: '[let ic : Constraint = it.ownedRule->any(name='image')][let ils : LiteralString = ic.specification][if (ils.name<>null)][ils.name/][/if][/let][/let]',
  operationName: '[let ic : Constraint = it.ownedRule->any(name='info')][let ils : LiteralString = ic.specification][if (ils.name<>null)][ils.name/][/if][/let][/let]',
[if (condition and not (it.containingStateMachine() = asm))]
  operationInfo: [genOperationInfo(asm)/]
[else]
  operationInfo: '[let ic : Constraint = it.ownedRule->any(name='info')][let ils : LiteralString = ic.specification][if (ils.value<>null)][ils.value.escapeText().escapeModifyFormat()/][/if][/let][/let]',
[/if]
  guards: ['['/]
    [genGuards(it, asm)/]
  ]
},
[/for]
[/let]
[/template]

[template public genTransition4Choice(is : Vertex, asm : StateMachine, condition : Boolean)]
'start': {
  imageName: '',
  operationName: '',
  operationInfo: '',
  guards: ['['/]
[for (it : Transition | is.outgoing->select(checkTransition())->select(visibility<>VisibilityKind::private or visibility=null)->sortedBy(name))]
    [genGuardsTemplate(it, null, asm)/]
[/for]
  ]
},
[for (is : State | is.containingStateMachine().submachineState->sortedBy(name))]
[genTransition(is, asm, condition)/]
[/for]
[/template]

[template public genGuards(transition : Transition, asm : StateMachine)]
[if (transition.target->notEmpty())]
  [if (isExitPoint(transition.target))]
	[for (it : Transition | transition.containingStateMachine().submachineState.connection->select(exit->includes(transition.target)).outgoing->select(checkTransition()))]
[genGuardsLogic(it, it, asm)/]  
	[/for]
  [else]
[genGuardsLogic(transition, null, asm)/]
  [/if]
[/if]
[/template]

[template public genGuardsLogic(transition : Transition, first_transition : Transition, asm : StateMachine)]
[let transitionEnd : Transition = transition.getTransitionEnd()]
[if (isChioce(transitionEnd.target))]
  [for (it : Transition | transitionEnd.target.outgoing->select(checkTransition())->sortedBy(name))]
[genGuardsTemplate(it, first_transition, asm)/]
  [/for]
[/if]
[/let]
[/template]

[template public genGuardsTemplate(it : Transition, transition : Transition, asm : StateMachine)]
{
  name: '[it.name/]',
  [if (transition->notEmpty() and transition.containingStateMachine().submachineState->size() > 1)]
  condition: '[genGuardCondition(transition, asm)/]',
  [/if]
  imageName: '[let ic : Constraint = it.ownedRule->any(name='image')][let ils : LiteralString = ic.specification][if (ils.name<>null)][ils.name/][/if][/let][/let]',
  operationName: '[let ic : Constraint = it.ownedRule->any(name='info')] [let ils : LiteralString = ic.specification][if (ils.name<>null)][ils.name/][/if][/let][/let]',
  operationInfo: '[let ic : Constraint = it.ownedRule->any(name='info')] [let ils : LiteralString = ic.specification][if (ils.value<>null)][ils.value.escapeText().escapeModifyFormat()/][/if][/let][/let]',
  guards: ['['/]
    [genGuards(it, asm)/]
  ]
},
[/template]

[query public isExitPoint(vertex : Vertex) : Boolean =  
	vertex.oclIsTypeOf(Pseudostate) and vertex.oclAsType(Pseudostate).kind = PseudostateKind::exitPoint
/]

[query public isChioce(vertex : Vertex) : Boolean =  
	vertex.oclIsTypeOf(Pseudostate) and vertex.oclAsType(Pseudostate).kind = PseudostateKind::choice
/]

[template public genCondition(states : Sequence(State), asm : StateMachine)]
[for (state : State | states) separator (' || ')]("[state.containingStateMachine().name/]" == [asm.name/]Obj.stmParent && "[state.name/]" == [asm.name/]Obj.stateParent)[/for]  
[/template]

[template public genOperationInfo(it : Transition, asm : StateMachine)]
[let transtions : Sequence(Transition) = asm.submachineState.getOutGoingSameWithIt(it)->excluding(null)->asSequence()]
[if (transtions->size() > 1 and transtions.ownedRule->select(name = 'info').specification.oclAsType(LiteralString)->select(value <> null).value.escapeText().escapeModifyFormat()->asSet()->size() > 1)]
{
[for (transition : Transition | transtions)]
  [transition.containingStateMachine().name/] : '[let ic : Constraint = transition.ownedRule->any(name='info')][let ils : LiteralString = ic.specification][if (ils.value<>null)][ils.value.escapeText().escapeModifyFormat()/][/if][/let][/let]',
[/for]
},
[else]
'[let ic : Constraint = it.ownedRule->any(name='info')][let ils : LiteralString = ic.specification][if (ils.value<>null)][ils.value.escapeText().escapeModifyFormat()/][/if][/let][/let]',
[/if]
[/let]
[/template]

[query public getOutGoings(state : State) : Set(Transition) = 
	if state.container->notEmpty() and state.container.state->notEmpty() then state.outgoing->union(getOutGoings(state.container.state))
	else  if state.containingStateMachine().submachineState->notEmpty() then state.outgoing->union(state.containingStateMachine().submachineState.getOutGoings())
          else state.outgoing
          endif
	endif
 /]

[query public getOutGoingSameWithIt(state : State, it : Transition) : Transition = 
    let sequence : Sequence(Transition) = state.outgoing->select(name = it.name)->asSequence()->excluding(null) in
    if sequence->notEmpty() then sequence->at(1)
    else 
        if state.container->notEmpty() and state.container.state->notEmpty() then getOutGoingSameWithIt(state.container.state, it)
        else
            null
        endif
     endif
 /]


[template private genOutgoings(is : State , icontext : String,list : Sequence(Transition))]
[    invoke('com.iauto.mist.spec.m2t.uml2html.util.utils', 'genOutgoings(org.eclipse.uml2.uml.State,java.lang.String, java.util.List)', Sequence{is,icontext,list})/]
[/template]

[template private genOutgoings(is : Vertex , list : Sequence(Transition))]
[    invoke('com.iauto.mist.spec.m2t.uml2html.util.utils', 'genOutgoingsForStateList(org.eclipse.uml2.uml.Vertex, java.util.List)', Sequence{is,list})/]
[/template]

[template public genGuardCondition(transtion : Transition, asm : StateMachine)]
"[transtion.containingStateMachine().name/]" == [asm.name/]Obj.stmParent
[/template]

