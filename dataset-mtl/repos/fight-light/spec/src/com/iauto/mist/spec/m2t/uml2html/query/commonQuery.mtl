[comment encoding = UTF-8 /]
[module commonQuery('http://www.eclipse.org/uml2/4.0.0/UML')]


[query public generateElement (aClass : Class) : OclAny = self/]

[query public getAllStateMachine(aModel : Model) : Bag(StateMachine) = 
aModel.member->selectByType(StateMachine).oclAsType(StateMachine)
 /]

[query public getTopStateMachine(aModel : Model) : StateMachine = 
aModel.getAllStateMachine()->any(submachineState->isEmpty())
 /]

[query public getAllTransitionInRegion(aRegion : Region) : Bag(Transition) = 
if aRegion.subvertex->selectByType(State).region->notEmpty() then
	aRegion.transition->union(aRegion.subvertex->selectByType(State).region.getAllTransitionInRegion())
else 
	aRegion.transition
endif
 /]

[query public getInitTransition(region : Region) : Transition = 
if region.subvertex->selectByType(Pseudostate)->select(kind=PseudostateKind::initial)->isEmpty() then
	null
else 
	region.subvertex->selectByType(Pseudostate)->select(kind=PseudostateKind::initial).outgoing->any(checkTransition())
endif
 /]

[query public getEntryPointTransition(aStateMachine : StateMachine) : Set(Transition) = 
aStateMachine.region.getAllTransitionInRegion()->select(checkTransition())->select(source.oclIsTypeOf(Pseudostate) 
	and source.oclAsType(Pseudostate).kind=PseudostateKind::entryPoint )->
		select(not (target.oclIsTypeOf(Pseudostate) and target.oclAsType(Pseudostate).kind=PseudostateKind::shallowHistory))->asSet()
 /]

[query public checkTransition(aTransition : Transition) : Boolean = 
if aTransition.source->notEmpty() and aTransition.target->notEmpty() then
    true
else
    false
endif
 /]

[query public getAllVertex(aRegion : Region) : Set(Vertex) = 
let transitions : Bag(Transition) = aRegion.getAllTransitionInRegion()->select(checkTransition()) in
transitions.source->union(transitions.target)->asSet()
 /]

[query public getAllVertexInRegion(aRegion : Region) : Set(Vertex) = 
if aRegion.subvertex->selectByType(State).region->notEmpty() then
	aRegion.subvertex->select(not (oclIsTypeOf(State) and oclAsType(State).region->notEmpty()))->union(aRegion.subvertex->selectByType(State).region.getAllVertexInRegion())
else 
	aRegion.subvertex
endif
 /]

[query public getVertexWhetherNesting(aVertex : Vertex) : Set(Vertex) = 
if aVertex.oclIsTypeOf(State) and aVertex.oclAsType(State).region->notEmpty() then
	aVertex.oclAsType(State).region.subvertex.getVertexWhetherNesting()
else 
	aVertex->asSet()
endif
 /]

[query public isVertexInRegion(aVertex : Vertex, aRegion : Region) : Boolean = 
if aVertex.oclIsTypeOf(ConnectionPointReference) then
    aVertex.oclAsType(ConnectionPointReference).state.isVertexInRegion(aRegion)
else
    if aVertex.container->isEmpty() then
        false
    else
        if aVertex.container = aRegion then
            true
        else
            if aVertex.container.state->notEmpty() then
                aVertex.container.state.isVertexInRegion(aRegion)
            else
                false
            endif
        endif
    endif
endif
 /]


[query public removePrefix(aString : String) : String = 
aString.replace('interrupt_', '').replace('HDKey_', '').replace('INT@', '').replace('HDK@', '')
 /]

[query public addPicSuffix(aString : String) : String =
let dotIndex : Integer = aString.lastIndex('.') in
if dotIndex = -1 then
	aString + getDefaultPost()
else
	let suffix : String = aString.substring(dotIndex) in
	if suffix.equalsIgnoreCase('.jpg')
		or suffix.equalsIgnoreCase('.png')
		or suffix.equalsIgnoreCase('.gif')
		or suffix.equalsIgnoreCase('.bmp')
		or suffix.equalsIgnoreCase('.jpeg')
		or suffix.equalsIgnoreCase('.svg')
		or suffix.equalsIgnoreCase('.pdf')
	 then
		aString
	else
		aString + getDefaultPost()
	endif
endif
 /]

[query public getDefaultPre() : String =  
	invoke('com.iauto.mist.spec.m2t.uml2html.util.ConfigUtil', 'getDefaultPre()', Sequence{})
/]

[query public getDefaultPost() : String =  
	invoke('com.iauto.mist.spec.m2t.uml2html.util.ConfigUtil', 'getDefaultPost()', Sequence{})
/]


[query public getTransitionBegin(it : Transition) : Set(Transition) = 
if it.source.oclIsTypeOf(Pseudostate) 
   and (it.source.oclAsType(Pseudostate).kind=PseudostateKind::entryPoint or it.source.oclAsType(Pseudostate).kind=PseudostateKind::exitPoint) 
   and it.source.oclAsType(Pseudostate).state ->notEmpty() then
   let icpr : Bag(ConnectionPointReference) = it.containingStateMachine().submachineState.connection->select(entry->includes(it.source)) in
   it.source.oclAsType(Pseudostate).incoming->select(source->notEmpty()).getTransitionBegin()->union(icpr.incoming->select(source->notEmpty()).getTransitionBegin())
else
    if it.source.oclIsTypeOf(Pseudostate) and it.source.oclAsType(Pseudostate).kind=PseudostateKind::entryPoint then
       let icpr : Bag(ConnectionPointReference) = it.containingStateMachine().submachineState.connection->select(entry->includes(it.source)) in
       if icpr.incoming->notEmpty() and icpr.incoming.source->notEmpty() then
          icpr.incoming->select(source->notEmpty()).getTransitionBegin()
       else
          null->asSet()
       endif
    else
    	if it.source.oclIsTypeOf(ConnectionPointReference) and it.source.oclAsType(ConnectionPointReference).exit->notEmpty() then
		   let ips : Collection(Pseudostate) = it.source.oclAsType(ConnectionPointReference).exit in
		   ips.incoming->select(source->notEmpty()).getTransitionBegin()
	    else
		   it->asSet()
	    endif
    endif
endif
 /]

[query public getTransitionEnd(it : Transition) : Transition =  
if (it.target.oclIsTypeOf(Pseudostate) and (it.target.oclAsType(Pseudostate).kind = PseudostateKind::exitPoint or it.target.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint)) then 
    if  it.target.oclAsType(Pseudostate).state->notEmpty() then 
        getTransitionEnd(it.target.outgoing->asSequence()->at(1))
    else if it.containingStateMachine().submachineState.connection->one(exit->includes(it.target)) then 
         let icpr : ConnectionPointReference = it.containingStateMachine().submachineState.connection->any(exit->includes(it.target)) in
             if icpr.outgoing->notEmpty() and icpr.outgoing.target->notEmpty() then
				icpr.outgoing->any(target->notEmpty()).getTransitionEnd()
			else
				null
			endif
         else
              null
         endif
    endif
else
    if it.target.oclIsTypeOf(ConnectionPointReference) then
       if it.target.oclAsType(ConnectionPointReference).entry->notEmpty() then
       let ips : Collection(Pseudostate) = it.target.oclAsType(ConnectionPointReference).entry in
          if ips.outgoing->notEmpty() and ips.outgoing.target->notEmpty() then
             ips.outgoing->any(target->notEmpty()).getTransitionEnd()
          else
             null
          endif
       else
          null
       endif
    else
        if it.target.oclIsTypeOf(State) then 
           if it.target.oclAsType(State).submachine->notEmpty() then 
				if it.target.oclAsType(State).submachine.region->notEmpty() then
					if it.target.oclAsType(State).submachine.region->asSequence()->at(1).getInitTransition()->notEmpty()
              			then it.target.oclAsType(State).submachine.region->asSequence()->at(1).getInitTransition().getTransitionEnd()
					else 
						null
					endif
				else
					null
				endif
           else 
               if it.target.oclAsType(State).region->notEmpty() then
				if it.target.oclAsType(State).region->asSequence()->at(1).getInitTransition()->notEmpty()
              		then it.target.oclAsType(State).region->asSequence()->at(1).getInitTransition().getTransitionEnd()
				else null
				endif
              else
                  it
              endif
           endif
        else
            it
        endif
    endif
endif
/]



[query public getTransitionBeginExtend(it : Transition) : Set(Transition) = 
if it.source.oclIsTypeOf(Pseudostate) and it.source.oclAsType(Pseudostate).kind=PseudostateKind::entryPoint then
    if it.containingStateMachine().submachineState.connection->one(entry->includes(it.source)) then
        let icpr : ConnectionPointReference = it.containingStateMachine().submachineState.connection->any(entry->includes(it.source)) in
        if icpr.incoming->isEmpty() or icpr.incoming.source->isEmpty() then
            null->asSet()
        else
            icpr.incoming->select(source->notEmpty()).getTransitionBeginExtend()
        endif
    else
        null->asSet()
    endif
else
	if it.source.oclIsTypeOf(Pseudostate) and it.source.oclAsType(Pseudostate).kind=PseudostateKind::initial then
		if it.containingStateMachine().submachineState->notEmpty() then
			it.containingStateMachine().submachineState.incoming->select(checkTransition())->any(true).getTransitionBeginExtend()
		else
			null->asSet()
		endif
	else	
		if it.source.oclIsTypeOf(ConnectionPointReference) and it.source.oclAsType(ConnectionPointReference).exit->notEmpty() then
			let ips : Collection(Pseudostate) = it.source.oclAsType(ConnectionPointReference).exit in
				ips.incoming->select(source->notEmpty()).getTransitionBeginExtend()
		else
			if it.source.oclIsTypeOf(State) and it.source.oclAsType(State).region.ownedMember->selectByType(State)->notEmpty() then
				if it.source.isCompositeStateWithoutInitial() then
					it->asSet()
				else
					null->asSet()
				endif
			else
				it->asSet()
			endif
		endif
	endif
endif
 /]

[query public getInComingTransitions(aStateMachine : StateMachine) : Set(Transition) = 
if aStateMachine.submachineState->notEmpty() then
	aStateMachine.submachineState.incoming->select(checkTransition())->union(
	aStateMachine.submachineState.connection->select(entry->notEmpty()).incoming->select(checkTransition()))->asSet()
else
	null->asSet()
endif
 /]

[query public getoutGoingTransitions(is : State) : Set(Transition) =
if is.submachine->isEmpty() then 
	is.containingStateMachine().region.getAllTransitionInRegion()->select(checkTransition())->select(source.getVertexWhetherNesting()->includes(is))->asSet()
else
	is.containingStateMachine().region.getAllTransitionInRegion()->select(checkTransition())->select(source.getVertexWhetherNesting()->includes(is))->union(
		is.connection->select(exit->notEmpty()).outgoing->select(checkTransition()))->asSet()
endif
 /]

[query public isConnectionPointReferenceExitPoint(it : Transition) : Boolean = 
if it.source.oclIsTypeOf(ConnectionPointReference) and it.source.oclAsType(ConnectionPointReference).exit->notEmpty() then
	true
else
	false
endif
 /]

[query public getExtendStateName(it : Transition) : String = 
if it.source.oclIsTypeOf(State) then
	let state : State = it.source.oclAsType(State) in
		if state.isCompositeStateWithoutInitial() then
			state.name + 'から'
		else
			if state.submachine->notEmpty() then
				state.name
			else
				state.getLsName()
			endif
		endif
else
	it.source.name
endif
 /]

[query public getExtendStateMachineName(it : Transition) : String = 
if it.source.oclIsTypeOf(State) then
	let state : State = it.source.oclAsType(State) in
		if state.submachine->notEmpty() then
			state.submachine.name
		else
			state.containingStateMachine().name
		endif
else
	it.source.containingStateMachine().name
endif
 /]

[query public getExtendStateType(it : Transition) : String = 
if it.source.oclIsTypeOf(State) then
	let state : State = it.source.oclAsType(State) in
		if state.isCompositeStateWithoutInitial() then
			'otherIncoming'
		else
			if state.submachine->notEmpty() then
				'otherIncoming'
			else
				'exitPointIncoming'
			endif
		endif
else
	'otherIncoming'
endif
 /]


[comment]检查target是否为复合状态，并且包含initial[/comment]
[query public isCompositeStateWithoutInitial(iv : Vertex) : Boolean = 
if iv.oclIsTypeOf(State) then
	let state : State = iv.oclAsType(State) in
	if state.region.ownedMember->selectByType(State)->notEmpty() then
	    if state.region.ownedMember->selectByType(Pseudostate)->notEmpty() then 
	        let c : Collection(Pseudostate) = state.region.ownedMember->selectByType(Pseudostate) in 
	            if c->select(kind = PseudostateKind::initial)->notEmpty() then 
	                true
	            else 
	                false 
	            endif
	    else
	        false
	    endif
	else
	    false
	endif
else 
	false
endif
 /]

[query public getTransitionEndExtend(it : Transition) : Transition = 
if it.target.oclIsTypeOf(Pseudostate) and it.target.oclAsType(Pseudostate).kind=PseudostateKind::exitPoint then
	if it.containingStateMachine().submachineState.connection->one(exit->includes(it.target)) then
		let icpr : ConnectionPointReference = it.containingStateMachine().submachineState.connection->any(exit->includes(it.target)) in
		if icpr.outgoing->notEmpty() and icpr.outgoing.target->notEmpty() then
			icpr.outgoing->any(target->notEmpty()).getTransitionEnd()
		else
			null
		endif
	else
		null
	endif
else
	if it.target.oclIsTypeOf(State) and it.target.oclAsType(State).region.ownedMember->selectByType(State)->notEmpty() then
		if it.target.isCompositeStateWithoutInitial() then
			let is : State = it.target.oclAsType(State) in
			is.region.subvertex->selectByType(Pseudostate)->select(kind=PseudostateKind::initial).outgoing->any(target->notEmpty()).getTransitionEnd()
		else
			null
		endif
    else
        it
    endif
endif
 /]

[query public getTargetName(it : Transition) : String = 
if it.target.oclIsTypeOf(ConnectionPointReference) then
	if it.target.oclAsType(ConnectionPointReference).entry->notEmpty() then
		it.target.oclAsType(ConnectionPointReference).state.name
	else
		null
	endif
else
	it.target.name
endif
 /]

[query public ignoreChoiceOutgoing(aTransition : Transition) : Set(Transition) = 
if aTransition.source.oclIsTypeOf(Pseudostate) and aTransition.source.oclAsType(Pseudostate).kind=PseudostateKind::choice then
    aTransition.source.incoming.ignoreChoiceOutgoing()
else
    aTransition
endif
 /]

[query public escapeText(aString : String) : String = 
aString.replaceAll('\r\n|\r|\n', '\\\\r\\\\n').replaceAll('\\\'', '\\\\\\\'').replaceAll('\\\"', '\\\\\\\"')
 /]

[query public escapeModifyFormat(aString : String) : String = 
aString.replaceAll('<S_[AUD]_[01]\\|.*?>', '')
 /]

[query public escapeTextForOperAndCL(aString : String) : String = 
aString.replaceAll('\r\n|\r|\n', '\\\\r').replaceAll('\\\'', '\\\\\\\'').replaceAll('\\\"', '\\\\\\\"')
 /]

[query public getBasicImagePath(aString : String) : String = 
let prefixIndex : Integer = aString.index('resources/img/') in
if prefixIndex = -1 then
	aString
else
	aString.substring(prefixIndex + 'resources/img/'.size())
endif
 /]

[query public otherEscapeText(aString : String) : String = 
aString.replaceAll('\t', '    ').replaceAll('\\\\', '\\\\\\\\').replaceAll('\"', '\\\"').replaceAll('\'', '\\'+'\'')
 /]

[comment]replaceAll('*', '_').replaceAll(':', '_').replaceAll('?', '_').replaceAll('<', '_').replaceAll('>', '_')[/comment]
[query public xlsNameEscape(aString : String) : String = 
aString.replaceAll('\t', '_').replaceAll('\"', '_').replaceAll('/', '_').replaceAll('\\\\', '_')
 /]

[query public getTransSpecValue(it : Transition) : String = 
if it.getTransitionEnd().specTransitionCheck() then
	it.getTransitionEnd().getSelfTransSpecValue()
else
	it.getTransitionEnd().getExpectValue().otherEscapeText().escapeText()
endif	
 /]

[query public getSelfTransSpecValue(it : Transition) : String = 
if it.ownedRule->any(name='info')->notEmpty() then
	let ic : Constraint = it.ownedRule->any(name='info') in
		if ic.specification->notEmpty() and ic.specification.oclIsTypeOf(LiteralString) then
			let ils : LiteralString = ic.specification.oclAsType(LiteralString) in 
				ils.value.otherEscapeText().escapeText()
		else
			null
		endif
else
	null
endif	
 /]

[query public specTransitionCheck(it : Transition) : Boolean = 
if (it.target.oclIsTypeOf(State) and it.target.oclAsType(State).region->notEmpty()) or (it.source = it.target) then
	true
else
	false
endif
 /]

[query public getRefId(n : Element, e : Element) : String = 
    invoke('com.iauto.mist.spec.m2t.uml2html.util.utils', 'xmlID(org.eclipse.uml2.uml.Element)', Sequence{e})
/]

[comment]找到最顶层的模型[/comment]
[query public getTopModel(aModel : Model) : Model = 
if aModel.ownedMember->selectByType(StateMachine).submachineState->notEmpty() then
    if aModel.ownedMember->selectByType(StateMachine).submachineState->asSequence()->at(1).getModel() <> null 
       and aModel.ownedMember->selectByType(StateMachine).submachineState->asSequence()->at(1).getModel() <> aModel then 
        getTopModel(aModel.ownedMember->selectByType(StateMachine).submachineState->asSequence()->at(1).getModel())
    else 
        aModel
    endif
else 
    aModel 
endif
/]

[query public appCloseWarningChange(aString : String) : String = 
if aString.equalsIgnoreCase('AppCloseWarning') then
	'アプリ終了'
else
	aString
endif
 /]

[query public getLsName(is : State) : String = 
if is.stateInvariant->notEmpty() and is.stateInvariant.oclIsTypeOf(Constraint) then
	let ic : Constraint = is.stateInvariant.oclAsType(Constraint) in 
		if ic.specification->notEmpty() and ic.specification.oclIsTypeOf(LiteralString) then
			let ils : LiteralString = ic.specification.oclAsType(LiteralString) in
				if ils.name <> null and ils.name <> '' and ils.name <> 'constraintSpec' then
					ils.name
				else
					is.name
				endif
		else
				is.name
		endif
else
	is.name
endif
 /]

[query public getMajorName(is : State) : String = 
if is.stateInvariant->notEmpty() and is.stateInvariant.oclIsTypeOf(Constraint) then
	let ic : Constraint = is.stateInvariant.oclAsType(Constraint) in 
		if ic.specification->notEmpty() and ic.specification.oclIsTypeOf(LiteralString) then
			let ils : LiteralString = ic.specification.oclAsType(LiteralString) in
				if ils.name <> null and ils.name <> '' and ils.name <> 'constraintSpec' then
					ils.name
				else
					is.name.appCloseWarningChange()
				endif
		else
			is.name.appCloseWarningChange()
		endif
else
	is.name.appCloseWarningChange()
endif
 /]

[query public getMajorId(is : State) : String = 
if is.ownedRule->any(name='id')->notEmpty() and is.ownedRule->any(name='id').oclIsTypeOf(Constraint) then
    let ic : Constraint = is.ownedRule->any(name='id').oclAsType(Constraint) in 
        if ic.specification->notEmpty() and ic.specification.oclIsTypeOf(LiteralString) then
            let ils : LiteralString = ic.specification.oclAsType(LiteralString) in
                if ils.value <> null and ils.value <> '' then
                    ils.value + ' '
                else
                    ''
                endif
        else
            ''
        endif
else
    ''
endif
 /]

[query public getMajorIdByPageFile(is : State) : String = 
	 invoke('com.iauto.mist.spec.common.plugin.util.AtlDataTracker', 'getCommonQueryMajorId(org.eclipse.uml2.uml.State)', Sequence{is})
 /]

[query public getExpectValue(it : Transition) : String = 
if it.target.oclIsTypeOf(State) then
	let is : State = it.target.oclAsType(State) in
		is.getMajorIdByPageFile()
else
	if it.target.oclIsTypeOf(Pseudostate) and it.target.oclAsType(Pseudostate).kind=PseudostateKind::shallowHistory then
		it.target.name
	else
		if it.target.oclIsTypeOf(Pseudostate) and it.target.oclAsType(Pseudostate).kind=PseudostateKind::terminate then
			'アプリ終了'
		else
			if it.target.oclIsTypeOf(Pseudostate) and it.target.oclAsType(Pseudostate).kind=PseudostateKind::choice then
				it.target.name
			else
				if it.target.oclIsTypeOf(ConnectionPointReference) then
					let is : State = it.target.oclAsType(ConnectionPointReference).state in
						is.getMajorIdByPageFile()
				else
					null
				endif
			endif
		endif
	endif
endif
 /]

[query public getStateMachineName(it : Transition) : String = 
if it.target.oclIsTypeOf(State) then
	let is : State = it.target.oclAsType(State) in
	if is.submachine->notEmpty() then 
		is.submachine.name
	else
		is.containingStateMachine().name
	endif
else
	it.target.containingStateMachine().name
endif
 /]

[query public removeRevisionFormat(s : String) : String = 
if s <> null then
	s.replaceAll('<S_[AUD]_[01]\\|.*?>', '')
else
	''
endif
 /]

[query public delRevAndEscape(s : String) : String = 
if s <> null then
	s.removeRevisionFormat().otherEscapeText().escapeText()
else
	''
endif
 /]

[query public dealEscape(s : String) : String = 
if s <> null then
	s.otherEscapeText().escapeText()
else
	''
endif
 /]
