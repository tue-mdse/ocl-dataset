[comment encoding = UTF-8 /]
[module genStateGenealogy('http://com.iauto.mist.spec/2.0')]

[import com::iauto::mist::spec::m2t::uml2html::query::commonQuery/]

[template public genStateGenealogy(container : StateMachine)]
[file ('stateGenealogyMap.js', false, 'utf-8')]
var stateGenealogMap = {};
stateGenealogMap.stateGenealogDict = {

[let choices : Sequence(Choice) = container.getAllChoices4Container()->select(isFromInitial)]
  [if (choices->notEmpty())]
  	[let choice : Choice = choices->at(1)]
  '[choice.id/]': '[choice.id/]',	
  	[/let]
  [/if]
[/let]
[for (state : State | container.getAllStates4Container())]
  '[state.id/]': '[state.genealogy/]',
[/for]
};
stateGenealogMap.genealogStateDict = {
[let choices : Sequence(Choice) = container.getAllChoices4Container()->select(isFromInitial)]
  [if (choices->notEmpty())]
  	[let choice : Choice = choices->at(1)]
  '[choice.id/]': '[choice.id/]',	
  	[/let]
  [/if]
[/let]
[for (state : State | container.getAllStates4Container())]
  '[state.genealogy/]': '[state.id/]',
[/for]
};
if ("function" === typeof define) {
  define(function(require) { return stateGenealogMap; });
}
else {
  window.stateGenealogMap = stateGenealogMap;
}
[/file]
[file ('stateGenealogyMap.json', false, 'utf-8')]
{
  "stateGenealogMap": {
    "stateGenealogDict": {
      [let choices : Sequence(Choice) = container.getAllChoices4Container()->select(isFromInitial)]
        [if (choices->notEmpty())]
  	      [let choice : Choice = choices->at(1)]
        "[choice.id/]": "[choice.id/]",	
  	      [/let]
        [/if]
      [/let]
      [for (state : State | container.getAllStates4Container()) separator (',')]
        "[state.id/]": "[state.genealogy/]"
      [/for]
    },
    "genealogStateDict": {
      [let choices : Sequence(Choice) = container.getAllChoices4Container()->select(isFromInitial)]
        [if (choices->notEmpty())]
  	      [let choice : Choice = choices->at(1)]
      "[choice.id/]": "[choice.id/]",	
  	      [/let]
        [/if]
      [/let]
      [for (state : State | container.getAllStates4Container()) separator (',')]
      "[state.genealogy/]": "[state.id/]"
      [/for]
    }
  }
}
[/file]
[/template]

[comment]get all choices for container[/comment]
[query public getAllChoices4Container(container : Container) : Sequence(Choice) = 
  container.choice->asSequence()->union(container.subContainer.getAllChoices4Container())
/]


[comment]get all states for container[/comment]
[query public getAllStates4Container(container : Container) : Sequence(State) = 
  container.state->asSequence()->union(container.subContainer.getAllStates4Container())
/]

