[comment encoding = UTF-8 /]
[module statesxml('http://www.eclipse.org/uml2/4.0.0/UML')]

[import com::iauto::mist::spec::m2t::uml2html::query::commonQuery/]

[template public genStatesXmlFile(aModel : Model)]
[file ('statelist.xml', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="lib/miststates.xsl"?>
<model name="[aModel.name/]" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="lib/MIST.xsd">
  <statemachinelist>
[for (asm : StateMachine | aModel.getAllStateMachine())]
    <statemachine name="[asm.name/]">
      <statelist>
    [for (is : State | asm.region.getAllVertexInRegion()->selectByType(State))]
        <state name="[is.name/]">
        [let ic : Constraint = is.stateInvariant]
            [let ils : LiteralString = ic.specification]
          <symbol>[if (ils.name<>null)]['<![CDATA['/][ils.name/][']]>'/][/if]</symbol>
          <description>[if (ils.value<>null)]['<![CDATA['/][ils.value.replaceAll('\r\n|\r|\n', '\\\\r')/][']]>'/][/if]</description>
            [else]
          <symbol></symbol>
          <description></description>
            [/let]
          <winscape></winscape>
        [else]
          <symbol></symbol>
          <description></description>
          <winscape></winscape>
        [/let]
          <data_model></data_model>
          <eventlist>
        [for (it : Transition | asm.region.getAllTransitionInRegion()->select(checkTransition())->select(source.getVertexWhetherNesting()->includes(is))->select(getTransitionEnd()<>null))]
            <event type="[if (it.name.startsWith('interrupt_') or it.name.startsWith('INT@'))]interrupt[elseif (it.name.startsWith('HDKey_') or it.name.startsWith('HDK@'))]hardkey[else]normal[/if]">
              <target>[asm.name/]</target>
              <transition>[it.name.removePrefix()/]</transition>
            </event>
        [/for]
          </eventlist>
        </state>
    [/for]
      </statelist>
      <choicelist>
    [for (ips : Pseudostate | asm.region.getAllVertexInRegion()->selectByType(Pseudostate)->select(kind=PseudostateKind::choice))]
        <choice name="[ips.name/]">
          <comment>[if (ips.ownedComment->notEmpty())]['<![CDATA['/][ips.ownedComment->any(true)._body.replaceAll('\r\n|\r|\n', '\\\\r')/][']]>'/][/if]</comment>
          <data_model></data_model>
          <guardlist>
        [for (it : Transition | ips.outgoing->select(target->notEmpty())->select(getTransitionEnd()<>null))]
            <guard>
              <key></key>
              <value></value>
              <event type="choice">
                <target>[asm.name/]</target>
                <transition>[it.name/]</transition>
              </event>
            </guard>
        [/for]
          </guardlist>
        </choice>
    [/for]
      </choicelist>
    </statemachine>
[/for]
  </statemachinelist>
</model>
[/file]
[/template]
