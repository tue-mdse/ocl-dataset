[comment encoding = UTF-8 /]
[module utility('http://www.sb.net/statemachine/dsl/Stm')/]

[query public Utility(anOclAny: OclAny) : OclVoid
	= invoke('net.sb.statemachine.generator.services.Utility', 'Utility()', Sequence{})
/]

[query public  getStartingState(arg0 : Statemachine) : State
	= invoke('net.sb.statemachine.generator.services.Utility', 'getStartingState(net.sb.statemachine.dsl.stm.Statemachine)', Sequence{arg0})
/]

[query public getOverrideAnnotation(anOclAny: OclAny) : String
	= invoke('net.sb.statemachine.generator.services.Utility', 'getOverrideAnnotation()', Sequence{})
/]

[query public getAllStates(arg0 : Statemachine) : Collection(State)
	= invoke('net.sb.statemachine.generator.services.Utility', 'getAllStates(net.sb.statemachine.dsl.stm.Statemachine)', Sequence{arg0})
/]

[query public getSelfEvents(arg0 : State, arg1 : Event) : Collection(SelfEvent)
	= invoke('net.sb.statemachine.generator.services.Utility', 'getSelfEvents(net.sb.statemachine.dsl.stm.State, net.sb.statemachine.dsl.stm.Event)', Sequence{arg0, arg1})
/]

[query public getTransitions(arg0 : State, arg1 : Event) : Collection(Transition)
	= invoke('net.sb.statemachine.generator.services.Utility', 'getTransitions(net.sb.statemachine.dsl.stm.State, net.sb.statemachine.dsl.stm.Event)', Sequence{arg0, arg1})
/]

[query public isEnableAnotations(anOclAny: OclAny) : Boolean
	= invoke('net.sb.statemachine.generator.services.Utility', 'isEnableAnotations()', Sequence{})
/]

[query public setEnableAnotations(arg0 : Boolean) : OclVoid
	= invoke('net.sb.statemachine.generator.services.Utility', 'setEnableAnotations()', Sequence{arg0})
/]

[query public stateID(arg0 : State) : Integer
	= invoke('net.sb.statemachine.generator.services.Utility', 'stateID(net.sb.statemachine.dsl.stm.State)', Sequence{arg0})
/]

[query public stateName(arg0 : State) : String
	= invoke('net.sb.statemachine.generator.services.Utility', 'stateName(net.sb.statemachine.dsl.stm.State)', Sequence{arg0})
/]

[query public eventID(arg0 : Event) : Integer
	= invoke('net.sb.statemachine.generator.services.Utility', 'eventID(net.sb.statemachine.dsl.stm.Event)', Sequence{arg0})
/]

[query public eventName(arg0 : Event) : String
	= invoke('net.sb.statemachine.generator.services.Utility', 'eventName(net.sb.statemachine.dsl.stm.Event)', Sequence{arg0})
/]

[query public getStateMachine(arg0 : State) : Statemachine
	= invoke('net.sb.statemachine.generator.services.Utility', 'getStateMachine(net.sb.statemachine.dsl.stm.State)', Sequence{arg0})
/]

[query public getStateMachine(arg0 : Event) : Statemachine
	= invoke('net.sb.statemachine.generator.services.Utility', 'getStateMachine(net.sb.statemachine.dsl.stm.Event)', Sequence{arg0})
/]

[query public getStates2ExitedStates(arg0 : Statemachine) : Sequence(OclAny)
	= invoke('net.sb.statemachine.generator.services.Utility', 'getStates2ExitedStates(net.sb.statemachine.dsl.stm.Statemachine)', Sequence{arg0})
/]

[query public  getOriginalState(arg0 : OclAny) : State
	= invoke('net.sb.statemachine.generator.services.Utility', 'getOriginalState(net.sb.statemachine.generator.services.States2ExitedStates)', Sequence{arg0})
/]

[query public getExitedStates(arg0 : OclAny) : Collection(OclAny)
	= invoke('net.sb.statemachine.generator.services.Utility', 'getExitedStates(net.sb.statemachine.generator.services.States2ExitedStates)', Sequence{arg0})
/]

[query public getStatesStates2ExitActions(arg0 : OclAny) : Collection(State)
	= invoke('net.sb.statemachine.generator.services.Utility', 'getStatesStates2ExitActions(net.sb.statemachine.generator.services.States2ExitActions)', Sequence{arg0})
/]

[query public getExitedStatesStates2ExitActions(arg0 : OclAny) : Collection(State)
	= invoke('net.sb.statemachine.generator.services.Utility', 'getExitedStatesStates2ExitActions(net.sb.statemachine.generator.services.States2ExitActions)', Sequence{arg0})
/]

[query public handleCompletionEvent(arg0 : State) : Boolean
	= invoke('net.sb.statemachine.generator.services.Utility', 'handleCompletionEvent(net.sb.statemachine.dsl.stm.State)', Sequence{arg0})
/]

[query public hasState(arg0 : Collection(OclAny)) : Boolean
	= invoke('net.sb.statemachine.generator.services.Utility', 'hasState(java.util.Collection)', Sequence{arg0})
/]

[template public guardCall(traceabilityContext : OclAny, guard : String, guardCall : GuardCall)]
[guard/].[guardCall.guard.name/](context[for (parameter : String | guardCall.parameters) before (', ')
][parameter/][/for])
[/template]

