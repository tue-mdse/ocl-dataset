[comment encoding = UTF-8 /]
[module type('http://www.eclipse.org/uml2/5.0.0/UML')]

[import at::fhv::TimeTracker::java::common::common /]
[import at::fhv::TimeTracker::java::common::properties /]

[**
 * Generate the return type of an operation
 * @param anOperation The operation for which the return type should be calculated
*/]
[template public genReturn(anOperation : Operation) post(trim())]
[if (anOperation.ownedParameter->select(param : Parameter | param.direction = ParameterDirectionKind::return)-> size() > 0)]
[anOperation.ownedParameter->select(param : Parameter | param.direction = ParameterDirectionKind::return)->first().genType()/]
[else]
void
[/if]
[/template]

[**
 * Generate the type of a property
 * @param aProperty The property for which the type should be generated
*/]
[template public genType(aProperty : Property) post(trim())]
[if (aProperty.upper = 1)]
[aProperty.genTypeName()/]
[elseif (aProperty.isArray())]
[aProperty.genTypeName()/]['['/][']'/] 
[else]
[aProperty.genCollectionType()/]<[aProperty.genTypeName()/]>
[/if]
[/template]

[**
 * Generate the type of a parameter
 * @param aParameter The parameter for which the type should be generated
*/]
[template public genType(aParameter : Parameter) post(trim())]
[if (aParameter.upper = 1)]
    [aParameter.genTypeName()/]
[elseif (aParameter.isArray())]
    [aParameter.genTypeName()/]['['/][']'/]
[else]
    [aParameter.genCollectionType()/]<[aParameter.genTypeName()/]>
[/if]
[/template]

[**
 * Generate the type name for an element
 * @param anElement The element for which the type name should be generated
*/]
[template protected genTypeName(aTypedElement : TypedElement) post(trim())]
[if (aTypedElement.type = null)]
Object
[elseif (not getProperty('java.typeconversion.' + aTypedElement.type.name).oclIsUndefined() and (getProperty('java.typeconversion.' + aTypedElement.type.name).size() > 0))]
[getProperty('java.typeconversion.' + aTypedElement.type.name).tokenize('.')->last()/]
[elseif (type.name = 'UnlimitedNatural')]
Integer
[else]
[aTypedElement.type.genName().tokenize('.')->last()/]
[/if]
[/template]

[**
 * Generate the initial value for a property
 * @param aProperty The property for which the initial value should be generated
*/]
[template public genInitValue(aProperty : Property)]
[if ((aProperty.upper <> 1 and not aProperty.isArray()))]
 = new [aProperty.genCollectionImplType()/]<[aProperty.genTypeName()/]>()[/if]
[/template]

[**
 * Generate a collection
 * @param aMultiplicityElement The element for which the collection type should be generated
*/]
[template protected genCollectionType(aMultiplicityElement : MultiplicityElement) post(trim())]
[if (not aMultiplicityElement.isOrdered.oclIsUndefined() and aMultiplicityElement.isOrdered)]
    [if (aMultiplicityElement.isUnique)]
        [aMultiplicityElement.getOrderedUniqueCollectionClass()/]
    [else]
        [aMultiplicityElement.getOrderedNotUniqueCollectionClass()/]
    [/if]
[else]
    [if (aMultiplicityElement.isUnique)]
        [aMultiplicityElement.getNotOrderedUniqueCollectionClass()/]
    [else]
        [aMultiplicityElement.getNotOrderedNotUniqueCollectionClass()/]
    [/if]
[/if]
[/template]

[**
 * Implementation of the collection type generation
 * @param aMultiplicityElement The element for which the collection type should be generated 
*/]
[template protected genCollectionImplType(aMultiplicityElement : MultiplicityElement) post(trim())]
[if (not aMultiplicityElement.isOrdered.oclIsUndefined() and aMultiplicityElement.isOrdered)]
    [if (aMultiplicityElement.isUnique)]
        [aMultiplicityElement.getOrderedUniqueCollectionImplClass()/]
    [else]
        [aMultiplicityElement.getOrderedNotUniqueCollectionImplClass()/]
    [/if]
[else]
    [if (aMultiplicityElement.isUnique)]
        [aMultiplicityElement.getNotOrderedUniqueCollectionImplClass()/]
    [else]
        [aMultiplicityElement.getNotOrderedNotUniqueCollectionImplClass()/]
    [/if]
[/if]
[/template]

[**
 * Query to check if the given type is a java primitive type
 * @param aType The type to check for a primitive java type
*/]
[query protected isJavaPrimitive(aType : Type) : Boolean = 
   aType.name.equalsIgnoreCase('int')
   or aType.name.equalsIgnoreCase('Integer')
   or aType.name.equalsIgnoreCase('float')
   or aType.name.equalsIgnoreCase('boolean')
   or aType.name.equalsIgnoreCase('byte')
   or aType.name.equalsIgnoreCase('long')
   or aType.name.equalsIgnoreCase('short')
   or aType.name.equalsIgnoreCase('char')
   or aType.name.equalsIgnoreCase('Character')
   or aType.name.equalsIgnoreCase('void')
   or aType.name.equalsIgnoreCase('String')
   or aType.name.equalsIgnoreCase('double')
 /]
