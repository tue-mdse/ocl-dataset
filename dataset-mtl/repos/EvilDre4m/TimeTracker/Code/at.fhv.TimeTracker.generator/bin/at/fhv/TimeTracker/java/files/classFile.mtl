[comment encoding = UTF-8 /]
[module classFile('http://www.eclipse.org/uml2/5.0.0/UML') extends at::fhv::TimeTracker::java::files::commonFile]

[import at::fhv::TimeTracker::java::common::attributes /]
[import at::fhv::TimeTracker::java::common::common /]
[import at::fhv::TimeTracker::java::common::declaration /]
[import at::fhv::TimeTracker::java::common::type /]
[import at::fhv::TimeTracker::java::request::request /]

[comment it is important to import the extended class, otherwise the methods cannot be resolved /]
[import at::fhv::TimeTracker::java::files::commonFile /]

[**
 * Generate the java file content
 * @param aClass The class for which a java file should be generated
*/]
[template protected genFileContent(aClass : Class) overrides genFileContent]
[aClass.genPackageDeclaration()/]
[aClass.genBody()/]
[/template]

[**
 * Generate the java class code
 * @param aClass The class to generate
*/]
[template protected genBody(aClass : Class) overrides genBody]
[aClass.genVisibility()/][aClass.genAbstract()/][aClass.genFinal()/]class [aClass.genName()/][aClass.genInheritance()/][aClass.genInterfaceRealization()/] {
    [aClass.genAttributes()/]
    [aClass.genConstructor()/]
	[aClass.genAccessors()/]
	[aClass.genOperations()/]
}
[/template]

[**
 * Generate the constructor of a java class
 * @param aClass The class for which the constructor should be generated
*/]
[template protected genConstructor(aClass : Class) post(trim())]
[if (ownedOperation->select(anOperation : Operation | anOperation.name.equalsIgnoreCase(aClass.name))->size() = 0)]
[if (getProperty('gen.constructor') = 'true')]
/**
 * The constructor.
 */
public [aClass.genName()/]() {
   // [protected ('constructor')]
   super();
   // [/protected]
}
[/if]
[else]
[for (aConstructor : Operation | ownedOperation->select(anOperation : Operation | anOperation.name.equalsIgnoreCase(aClass.name)))]
/**
 * The constructor.
[for (aParameter : Parameter | aConstructor.ownedParameter)]
 * @param [aParameter.genName()/][aParameter.genComment()/]
[/for]
 */
[aConstructor.genVisibility()/][aConstructor.genName()/]([aConstructor.genOperationParameters()/]) {
   // [protected ('constructor with ' + aConstructor.ownedParameter.genName()->sep(', '))]
   super();
   // [/protected]
}
[/for]
[/if]
[/template]

[template public genAccessors(aClass : Class)]
[for (aProperty : Property | aClass.ownedAttribute->union(aClass.getOutgoingNavigableOwnedEnd()))]
	[aProperty.genAccessors()/]
[/for]
[/template]

[**
 * Generate the getter and setter for a property
 * @param aProperty The property for which the getter and setter should be generated
*/]
[template private genAccessors(aProperty : Property)]
public [if (aProperty.isStatic)]static [/if][aProperty.genType()/] get[aProperty.genName().toUpperFirst()/](){
   return [if (not aProperty.isStatic)]this.[/if][aProperty.genName()/];
}
[if (not aProperty.isLeaf)]

public [if (aProperty.isStatic)]static [/if]void set[aProperty.genName().toUpperFirst()/]([aProperty.genType()/] [aProperty.genName()/]){
   [if (not aProperty.isStatic)]this.[/if][aProperty.genName()/] = [aProperty.genName()/];
}
[/if]
[/template]