[comment encoding = UTF-8 /]
[module timeStamp('http://www.eclipse.org/uml2/5.0.0/UML') extends at::fhv::TimeTracker::java::files::classFile/]

[import at::fhv::TimeTracker::java::common::attributes /]
[import at::fhv::TimeTracker::java::common::common /]
[import at::fhv::TimeTracker::java::common::declaration /]
[import at::fhv::TimeTracker::java::request::request /]
[import at::fhv::TimeTracker::java::common::type /]

[comment it is important to import the extended class, otherwise the methods cannot be resolved /]
[import at::fhv::TimeTracker::java::files::classFile /]


[template public generateTimestamp(aClass : Class)]
[if (aClass.hasStereotype('RootElement::Timestamp'))]
[file (aClass.genFullPathFile(), false, 'UTF-8')]
[aClass.genFileContent()/]
[/file]
[/if]
[/template]

[**
 * Generate the java file content
 * @param aClass The class for which a java file should be generated
*/]
[template protected genFileContent(aClass : Class) overrides genFileContent]
[aClass.genPackageDeclaration()/]

[aClass.genBody()/]

[/template]

[**
 * Generate the java class code
 * @param aClass The class to generate
*/]
[template protected genBody(aClass : Class) overrides genBody]
[aClass.genVisibility()/][aClass.genAbstract()/][aClass.genFinal()/]class [aClass.genName()/][aClass.genInheritance()/][aClass.genInterfaceRealization()/] {
    [aClass.genAttributes()/]

	public [aClass.genName()/]([for (aProperty : Property | aClass.ownedAttribute->union(aClass.getOutgoingNavigableOwnedEnd())) separator(', ')][aProperty.genType()/] [aProperty.genName()/][/for]) throws IllegalArgumentException
	{
	[for (aProperty : Property | aClass.ownedAttribute->union(aClass.getOutgoingNavigableOwnedEnd()))]
		String pattern = "^\\d{2}\\.\\d{2}\\.\\d{2} \\d{2}:\\d{2}";
		if([aProperty.genName()/].matches(pattern)){
			[if (not aProperty.isStatic)]this.[/if][aProperty.genName()/] = [aProperty.genName()/];
		} else {
			throw new IllegalArgumentException("Invalid pattern of timestamp!");
		}
	[/for]
	}

	[aClass.genAccessors()/]
	[aClass.genOperations()/]
}
[/template]

[template public genAccessors(aClass : Class) overrides genAccessors]
[for (aProperty : Property | aClass.ownedAttribute->union(aClass.getOutgoingNavigableOwnedEnd()))]
	[aProperty.genAccessors()/]
[/for]
[/template]

[**
 * Generate the getter and setter for a property
 * @param aProperty The property for which the getter and setter should be generated
*/]
[template private genAccessors(aProperty : Property)]
public [if (aProperty.isStatic)]static [/if][aProperty.genType()/] get[aProperty.genName().toUpperFirst()/](){
   return [if (not aProperty.isStatic)]this.[/if][aProperty.genName()/];
}
[if (not aProperty.isLeaf)]

public [if (aProperty.isStatic)]static [/if]void set[aProperty.genName().toUpperFirst()/]([aProperty.genType()/] [aProperty.genName()/]) throws IllegalArgumentException{
	String pattern = "^\\d{2}\\.\\d{2}\\.\\d{2} \\d{2}:\\d{2}";
	if([aProperty.genName()/].matches(pattern)){
		[if (not aProperty.isStatic)]this.[/if][aProperty.genName()/] = [aProperty.genName()/];
	} else {
		throw new IllegalArgumentException("Invalid pattern of timestamp!");
	}
}
[/if]
[/template]