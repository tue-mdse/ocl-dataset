[comment encoding = UTF-8 /]
[module declaration('http://www.eclipse.org/uml2/5.0.0/UML')]

[import at::fhv::TimeTracker::java::common::common /]
[import at::fhv::TimeTracker::java::common::type /]
[import at::fhv::TimeTracker::java::request::request /]

[**
 * Generate all operations for the given class
 * @param aClass The class for which all operations should be generated
*/]
[template public genOperations(aClass : Class)]
[for (anOperation : Operation | aClass.ownedOperation->union(aClass.allRealizedInterfaces().ownedOperation))]
[anOperation.genMethodPrototype()/] {
// [protected (anOperation.name)]

// [/protected]
}

[/for]
// [protected ('(user defined operations)')]

// [/protected]

[/template]

[**
 * Generate the a method declaration without body
 * @param anOperation The operation which should be generated
*/]
[template public genMethodPrototype(anOperation : Operation)]
[genVisibility()/][genAbstract()/][genFinal()/][genStatic()/][genReturn()/] [genName()/]([genOperationParameters()/])
[/template]

[**
 * Generate the parameters for an operation
 * @param anOperation The operation for which the parameters should be generated
*/]
[template public genOperationParameters(anOperation : Operation)]
[anOperation.ownedParameter->select(param : Parameter | not (param.direction = ParameterDirectionKind::return)).genOperationParameter()->sep(', ')/]
[/template]

[**
 * Generate a single parameter for an operation
 * @param aParameter The parameter to generate
*/]
[template protected genOperationParameter(aParameter : Parameter)]
[aParameter.genType()/] [aParameter.genName()/]
[/template]

[**
 * Generate the java inheritance
 * @param aClassifier The classifier for which an inheritance relation should be  generated
*/]
[template public genInheritance(aClassifier : Classifier)]
[if (aClassifier.general->size() > 0)] extends [for (extendedClassifier : Classifier | aClassifier.general)][extendedClassifier.genName()/][/for][/if]
[/template]

[**
 * Generate an interface realization
 * @param aClass The class for which an interface realization should be generated
*/]
[template public genInterfaceRealization(aClass : Class)]
[if (not aClass.clientDependency->filter(Realization)->isEmpty())] implements [for (namedElement : NamedElement | aClass.getAllInterfaces()) separator(', ')][namedElement.genName()/][/for][/if]
[/template]

[**
 * Generate the visibility for the given element
 * @param aNamedElement The element for which the visibility should be generated
*/]
[template public genVisibility(aNamedElement : NamedElement)]
[if (not (aNamedElement.visibility = VisibilityKind::_package))][aNamedElement.visibility/] [else]/*package*/ [/if]
[/template]

[**
 * Generate the abstract modifier if necessary
 * @param aClass The class for which the abstract modifier should be generated if needed
*/]
[template public genAbstract(aClass : Class)]
[if (aClass.isAbstract)]abstract [/if]
[/template]

[**
 * Generate the abstract modifier if necessary
 * @param anOperation The operation for which the abstract modifier should be generated if needed
*/]
[template public genAbstract(anOperation : Operation)]
[if (anOperation.isAbstract)]abstract [/if]
[/template]

[**
 * Generate the final modifier if necessary
 * @param aRedefinableElement The element for which the final modifier should be generated if needed
*/]
[template public genFinal(aRedefinableElement : RedefinableElement)]
[if (aRedefinableElement.isLeaf)]final [/if]
[/template]

[**
 * Generate the final modifier if necessary
 * @param aProperty The property for which the final modifier should be generated if needed
*/]
[template public genFinal(aProperty : Property)]
[if (aProperty.isLeaf)]final [/if]
[/template]

[**
 * Generate the static modifier if necessary
 * @param aFeature The feature for which the static modifier should be generated if needed
*/]
[template public genStatic(aFeature : Feature)]
[if (aFeature.isStatic)]static [/if]
[/template]

[**
 * Generate the default value for a property
 * @param aProperty The property for which the default value should be generated
*/]
[template public genDefaultValue(aProperty : Property)]
 = [computeDefault()/]
[/template]

[**
 * Compute the default value for a property
 * @param aProperty The property for which a default value should be generated
*/]
[template public computeDefault(aProperty : Property) post(trim())]
[if (aProperty.upper = 1)]
    [if (not aProperty.default.oclIsUndefined())]
        [if (''.equalsIgnoreCase(aProperty.default) or aProperty.default = null)]
            [if (aProperty.getUserDefaultValue().equalsIgnoreCase(''))][aProperty.default/][else][aProperty.getUserDefaultValue()/][/if]
        [else]
            [if ('String'.equalsIgnoreCase(aProperty.type.genName()))][aProperty.default.addQuotes()/][else][aProperty.default/][/if]
        [/if]
    [else]
        [if ('String'.equalsIgnoreCase(aProperty.type.genName()))]
            ['""'/]
        [else]        
            [aProperty.getUserDefaultValue()/]
        [/if]
    [/if]
[else]
    [if (not aProperty.default.oclIsUndefined())]        
        new [aProperty.genType()/]()
    [else]
        new [aProperty.genType()/]()
    [/if]
[/if]
[/template]

[**
 * Add quotes to a string
 * @param aString The string which should be quoted
*/]
[template public addQuotes(aString : String)]
"[aString/]"
[/template]

[**
 * Get the user defined default value
 * @param The element for which the default value should be loaded
*/]
[template public getUserDefaultValue(aTypedElement : TypedElement) post(trim())]
[if (not getProperty('java.defaultvalue.' + aTypedElement.type.name).size().oclIsUndefined() and (getProperty('java.defaultvalue.' + aTypedElement.type.name).size() > 0) and not ''.equalsIgnoreCase(getProperty('java.defaultvalue.' + aTypedElement.type.name)))]
    [getProperty('java.defaultvalue.' + aTypedElement.type.name)/]
[else]
    null
[/if]
[/template]