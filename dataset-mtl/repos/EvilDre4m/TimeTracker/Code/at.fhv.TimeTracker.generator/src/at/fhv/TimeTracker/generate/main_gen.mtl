[comment encoding = UTF-8 /]
[module main_gen('http://www.eclipse.org/uml2/5.0.0/UML') extends at::fhv::TimeTracker::java::files::classFile/]

[import at::fhv::TimeTracker::java::common::attributes /]
[import at::fhv::TimeTracker::java::common::common /]
[import at::fhv::TimeTracker::java::common::declaration /]
[import at::fhv::TimeTracker::java::request::request /]
[import at::fhv::TimeTracker::java::common::type /]

[comment it is important to import the extended class, otherwise the methods cannot be resolved /]
[import at::fhv::TimeTracker::java::files::classFile /]


[template public generateMain(aClass : Class)]
[if (aClass.hasStereotype('RootElement::Main'))]
[file (aClass.genFullPathFile(), false, 'UTF-8')]
[aClass.genFileContent()/]
[/file]
[/if]
[/template]

[**
 * Generate the java file content
 * @param aClass The class for which a java file should be generated
*/]
[template protected genFileContent(aClass : Class) overrides genFileContent]
[aClass.genPackageDeclaration()/]

// [protected ('(user defined imports)')]

// [/protected]

[aClass.genBody()/]

[/template]

[**
 * Generate the java class code
 * @param aClass The class to generate
*/]
[template protected genBody(aClass : Class) overrides genBody]
[aClass.genVisibility()/][aClass.genAbstract()/][aClass.genFinal()/]class [aClass.genName()/][aClass.genInheritance()/][aClass.genInterfaceRealization()/] {
	[aClass.genAttributes()/]

	[aClass.genConstructor()/]


[aClass.genAccessors()/]
	[aClass.genOperations()/]
}
[/template]

[**
 * Generate the constructor of a java class
 * @param aClass The class for which the constructor should be generated
*/]
[template protected genConstructor(aClass : Class) overrides genConstructor]
/**
 * The constructor.
 */
public [aClass.genName()/]([for (aProperty : Property | aClass.ownedAttribute->union(aClass.getOutgoingNavigableOwnedEnd())) separator(', ')][aProperty.genType()/] [aProperty.genName()/][/for]){
	[for (aProperty : Property | aClass.ownedAttribute->union(aClass.getOutgoingNavigableOwnedEnd()))]
	this.set[aProperty.genName().toUpperFirst()/]([aProperty.genName()/]);
	[/for]
}

public [aClass.genName()/]([aClass.genName()/] [aClass.genName().toLowerFirst()/]){
	[for (aProperty : Property | aClass.ownedAttribute->union(aClass.getOutgoingNavigableOwnedEnd()))]
	this.set[aProperty.genName().toUpperFirst()/]([aClass.genName().toLowerFirst()/].get[aProperty.genName().toUpperFirst()/]());
	[/for]
}
[/template]