[comment encoding = UTF-8 /]
[**
 * This module is used to generate entities from CardEntity. 
*/]
[module entitiesGen('http://www.i-mogene.org/imogene/1.0')/]

[**
 * This template is used to generate entities. It uses queries and another template to 
 * generate a part of code.
*/]

[template public entitiesGen(project : Project)]
[for (anEntity : CardEntity | project.entities)]
[if (anEntity.oclIsTypeOf(Actor))]
[else]
[comment] It will be good to generate automatically the name of the file and the name package[/comment]
[file ('/src/org/imogene/entities/'.concat(anEntity.name).concat('.java'), false, 'UTF-8')]
package org.imogene.entities;
import java.util.*;
import java.sql.Time;
import javax.persistence.*;
@Entity
public class [anEntity.name.toUpperFirst()/] extends AbstractEntity {
	private static final long serialVersionUID = 1L;
	//Entity fields
	[for (fields : FieldEntity | anEntity.groups.fields)]
	[fields.generateEntityFields() /]
	[/for]
	//Relations fields	
	[for (fields : FieldEntity | anEntity.groups.fields)]
	[if (fields.oclIsUndefined())] //Some relation fields are undefined
	[elseif (fields.oclIsKindOf(MainRelationFieldEntity))]
	[fields.oclAsType(MainRelationFieldEntity).generateMainRelationFields()/]
	[elseif (fields.oclIsKindOf(ReverseRelationFieldEntity))]
	//Enter the reverse relation field generator
	[fields.oclAsType(ReverseRelationFieldEntity).generateReverseRelationField()/]
	[/if]
	[/for]
	//Default constructor
	public [anEntity.name.toUpperFirst().toUpperFirst()/]() {
	}
	//A contructor using [anEntity.name/]
	public [anEntity.name.toUpperFirst().toUpperFirst()/]([anEntity.name.toUpperFirst() /] [anEntity.name.toLowerFirst()/]){
		[for (fields : FieldEntity | anEntity.groups.fields)]
		[if (fields.oclIsInvalid())]
		[elseif (fields.oclIsKindOf(MainRelationFieldEntity))]
		[fields.oclAsType(MainRelationFieldEntity).generateMainRelationFieldForContructor(anEntity)/]	
		[elseif (fields.oclIsKindOf(ReverseRelationFieldEntity))]
		[fields.oclAsType(ReverseRelationFieldEntity).generateReverseFieldForConstructor(anEntity)/]	
		[else]
		this.[fields.name.toLowerFirst()/]=[anEntity.name.toLowerFirst()/].[fields.name.toLowerFirst()/];
		[/if]
		[/for]
	}
	// toString
	public String toString() {
		return String.format("[anEntity.name.toUpperFirst().toUpperFirst()/]['['/]%s, %s[']'/]", id, version);
	}
[comment]Commenting getters and setter for now[/comment]
	// getters
	[for (fields : FieldEntity | anEntity.groups.fields)]
	[if (fields.oclIsUndefined())] //Nothing define
	[else]
	//Something define
		public [fields.getFieldType() /] get[fields.name.toUpperFirst()/](){
			[if (fields.oclIsKindOf(MainRelationFieldEntity))]
			return [fields.oclAsType(MainRelationFieldEntity).getMainRelationTypeName()/];
			[elseif (fields.oclIsKindOf(ReverseRelationFieldEntity))]
			return [fields.oclAsType(ReverseRelationFieldEntity).getReverseRelationTypeName()/];
			[else]
			return this.[fields.name.toLowerFirst()/];	
			[/if]
			
		}		
	[/if]
	[/for]
	//Setter
	[for (field : FieldEntity | anEntity.groups.fields)]
	[if (field.oclIsUndefined())]
	[else]
		public void set[field.name.toUpperFirst()/]([field.getFieldType() /] [field.name.toLowerFirst()/]) {
			[if (field.oclIsKindOf(MainRelationFieldEntity))]
			this.[field.oclAsType(MainRelationFieldEntity).getMainRelationTypeName()/]=[field.oclAsType(MainRelationFieldEntity).getMainRelationTypeName()/];
			[elseif (field.oclIsKindOf(ReverseRelationFieldEntity))]
			this.[field.oclAsType(ReverseRelationFieldEntity).getReverseRelationTypeName()/]=[field.oclAsType(ReverseRelationFieldEntity).getReverseRelationTypeName()/];
			[else]
			this.[field.name.toLowerFirst()/] = [field.name.toLowerFirst()/];	
			[/if]
			
		}		
	[/if]
	[/for]
}
[/file]
[/if]
[/for]
[/template]


[**
 * Get the type of a fieldEntity
*/]

[template public getFieldType(field : FieldEntity)]
	[if (field.oclIsKindOf(BooleanField))]
	boolean
	[/if]
	[if (field.oclIsKindOf(IntegerField))]
	int
	[/if]
	[if (field.oclIsKindOf(TextField) or field.oclIsKindOf(EnumField))]
	String
	[/if]
	[if (field.oclIsKindOf(DateField) or field.oclIsKindOf(DateTimeField))]
	Date
	[/if]
	[if (field.oclIsKindOf(TimeField))]
	Time
	[/if]
	[if (field.oclIsKindOf(FloatField))]
	float
	[/if]
	[if (field.oclIsKindOf(MainRelationFieldEntity))]
	[field.oclAsType(MainRelationFieldEntity).getFieldTypeForMainRelationField()/]
	[/if]
	[if (field.oclIsKindOf(ReverseRelationFieldEntity))]
	[field.oclAsType(ReverseRelationFieldEntity).getFieldTypeForReverseRelationField()/]
	[/if]
[/template]

[**
 * Uses to generate all fields of entity
*/]
[template public generateEntityFields(fields : FieldEntity)]
		[if (fields.oclIsKindOf(BooleanField))]
		private boolean [fields.name.toLowerFirst()/];
		[/if]
		[if (fields.oclIsKindOf(IntegerField))]
		private int [fields.name.toLowerFirst()/];
		[/if]
		[if (fields.oclIsKindOf(FloatField))]
		private float [fields.name.toLowerFirst()/];
		[/if]
		[if (fields.oclIsKindOf(TextField) or fields.oclIsKindOf(EnumField))]
		private String [fields.name.toLowerFirst()/];
		[/if]
		[if (fields.oclIsKindOf(DateField) or fields.oclIsKindOf(DateTimeField))]
		@Temporal(TemporalType.TIMESTAMP)
		private Date [fields.name.toLowerFirst()/];
		[/if]
		[if (fields.oclIsKindOf(TimeField))]
		private Time [fields.name.toLowerFirst()/];
		[/if]
[/template]
[**
 * Use to generate main relations fields
*/]

[template public generateMainRelationFields(field : MainRelationFieldEntity)]
	[if (field.cardinality=1 and field.InverseCardinality=1)]
	@OneToOne
	private [field.entity.name.toUpperFirst()/] [field.name.toLowerFirst()/];		
	[/if]
	[if (field.cardinality=1 and field.InverseCardinality=-1)]
	@ManyToOne
	private [field.entity.name.toUpperFirst()/] [field.name.toLowerFirst()/];
	[/if]
	[if (field.cardinality=-1 and field.InverseCardinality=1)]
	@OneToMany
	private List<[field.entity.name.toUpperFirst()/]> [field.name.toLowerFirst()/]List;	
	[/if]
	[if (field.cardinality=-1 and field.InverseCardinality=-1)]
	@ManyToMany
	private List<[field.entity.name.toUpperFirst()/]> [field.name.toLowerFirst()/]List;
	[/if]
[/template]
[**
 * Use to generate reverse relations fields
*/]
[template public generateReverseRelationField(field : ReverseRelationFieldEntity)]
	//Enter the reverse generation method
	[if (field.cardinality=1 and field.oppositeRelationField.cardinality=1)]
	@OneToOne
	private [field.entity.name.toUpperFirst()/] [field.name.toLowerFirst()/];
	[/if]
	[if (field.cardinality=1 and field.oppositeRelationField.cardinality=-1)]
	@ManyToOne
	private [field.entity.name.toUpperFirst()/] [field.name.toLowerFirst()/];
	[/if]
	[if (field.cardinality=-1 and field.oppositeRelationField.cardinality=1)]
	@OneToMany
	private List<[field.entity.name.toUpperFirst()/]> [field.name.toLowerFirst()/]List;
	[/if]
	[if (field.cardinality=-1 and field.oppositeRelationField.cardinality=-1)]
	@ManyToMany
	private List<[field.entity.name.toUpperFirst()/]> [field.name.toLowerFirst()/]List;
	[/if]
[/template]

[**
 * Get the types for main relation fields
*/]
[template public getFieldTypeForMainRelationField(field : MainRelationFieldEntity)]
	//One to One
	[if (field.cardinality=1 and field.InverseCardinality=1)]
	[field.entity.name.toUpperFirst()/]		
	[/if]
	[if (field.cardinality=-1 and field.InverseCardinality=1)]
	List<[field.entity.name.toUpperFirst()/]>
	[/if]
	[if (field.cardinality=1 and field.InverseCardinality=-1)]
	[field.entity.name.toUpperFirst()/]
	[/if]
	[if (field.cardinality=-1 and field.InverseCardinality=-1)]
	List<[field.entity.name.toUpperFirst()/]>
	[/if]
[/template]

[**
 * Get types for reverse relation fields
*/]

[template public getFieldTypeForReverseRelationField(field : ReverseRelationFieldEntity)]
	//One to One
	[if (field.cardinality=1 and field.oppositeRelationField.cardinality=1)]
	[field.entity.name.toUpperFirst()/]
	[/if]	
	[if (field.cardinality=-1 and field.oppositeRelationField.cardinality=1)]
	List<[field.entity.name.toUpperFirst()/]>
	[/if]
	[if (field.cardinality=1 and field.oppositeRelationField.cardinality=-1)]
	[field.entity.name.toUpperFirst()/]
	[/if]
	[if (field.cardinality=-1 and field.oppositeRelationField.cardinality=-1)]
	List<[field.entity.name.toUpperFirst()/]>
	[/if]
[/template]

[**
 * Get the name of the main relations fields
*/]
[template public getMainRelationTypeName(field : MainRelationFieldEntity)]
	[if (field.cardinality=1 and field.InverseCardinality=1)]
	[field.name.toLowerFirst()/]
	[/if]	
	[if (field.cardinality=-1 and field.InverseCardinality=1)]
	[field.name.toLowerFirst()/]List
	[/if]	
	[if (field.cardinality=1 and field.InverseCardinality=-1)]
	[field.name.toLowerFirst()/]
	[/if]
	[if (field.cardinality=-1 and field.InverseCardinality=-1)]
	[field.name.toLowerFirst()/]List
	[/if]
[/template]

[**
 * Get the name of the reverse relations fields
*/]
[template public getReverseRelationTypeName(field : ReverseRelationFieldEntity)]
	[if (field.cardinality=1 and field.oppositeRelationField.cardinality=1)]
	[field.name.toLowerFirst()/]
	[/if]	
	[if (field.cardinality=-1 and field.oppositeRelationField.cardinality=1)]
	[field.name.toLowerFirst()/]List
	[/if]	
	[if (field.cardinality=1 and field.oppositeRelationField.cardinality=-1)]
	[field.name.toLowerFirst()/]
	[/if]
	[if (field.cardinality=-1 and field.oppositeRelationField.cardinality=-1)]
	[field.name.toLowerFirst()/]List
	[/if]
[/template]

[**
 * Generate main relation fields for constructor using field
*/]

[template public generateReverseFieldForConstructor (field : ReverseRelationFieldEntity, anEntity : CardEntity)]
	[if (field.cardinality=1 and field.oppositeRelationField.cardinality=1)]
	this.[field.name.toLowerFirst()/]=[anEntity.name.toLowerFirst()/].[field.name.toLowerFirst()/];
	[/if]	
	[if (field.cardinality=-1 and field.oppositeRelationField.cardinality=1)]
	this.[field.name.toLowerFirst()/]List=[anEntity.name.toLowerFirst()/].[field.name.toLowerFirst()/]List;
	[/if]	
	[if (field.cardinality=1 and field.oppositeRelationField.cardinality=-1)]
	this.[field.name.toLowerFirst()/]=[anEntity.name.toLowerFirst()/].[field.name.toLowerFirst()/];
	[/if]
	[if (field.cardinality=-1 and field.oppositeRelationField.cardinality=-1)]
	this.[field.name.toLowerFirst()/]List=[anEntity.name.toLowerFirst()/].[field.name.toLowerFirst()/]List;
	[/if]
[/template]

[**
 * Generate reverse relation fields for constructor
*/]

[template public generateMainRelationFieldForContructor(field : MainRelationFieldEntity, anEntity : CardEntity)]
	[if (field.cardinality=1 and field.InverseCardinality=1)]
	this.[field.name.toLowerFirst()/]=[anEntity.name.toLowerFirst()/].[field.name.toLowerFirst()/];
	[/if]	
	[if (field.cardinality=-1 and field.InverseCardinality=1)]
	this.[field.name.toLowerFirst()/]List=[anEntity.name.toLowerFirst()/].[field.name.toLowerFirst()/]List;
	[/if]	
	[if (field.cardinality=1 and field.InverseCardinality=-1)]
	this.[field.name.toLowerFirst()/]=[anEntity.name.toLowerFirst()/].[field.name.toLowerFirst()/];
	[/if]
	[if (field.cardinality=-1 and field.InverseCardinality=-1)]
	this.[field.name.toLowerFirst()/]List=[anEntity.name.toLowerFirst()/].[field.name.toLowerFirst()/]List;
	[/if]
[/template]


[query public generateNamePackage (anEntity : CardEntity) : OclAny = '/src/org/imogene/entities/'.concat(anEntity.name).concat('.java')/]

