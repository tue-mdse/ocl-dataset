[comment encoding = UTF-8 /]
[module domain('http://www.i-mogene.org/imogene/1.0')/]

[template public domain(project : Project)]
[for (anEntity : CardEntity | project.entities)]
[file ('/src/org/imogene/domain/'.concat(anEntity.name.toUpperFirst()).concat('Domain.java'), false, 'UTF-8')]

package org.imogene.domain;

import org.imogene.repositories.*;
import org.imogene.entities.*;
import org.imogene.entities.security.*;


import java.util.Date;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


import com.google.common.collect.Lists;

@Service //("[anEntity.name.toLowerFirst()/]Domain")
public class [anEntity.name.toUpperFirst()/]Domain implements I[anEntity.name.toUpperFirst()/]Domain {

	// Repositories
	@Autowired
	private [anEntity.name.toUpperFirst()/]Repository [anEntity.name.toLowerFirst()/]Repository;

	// Implements interfaces


	@Override
	public void save[anEntity.name.toUpperFirst()/]([anEntity.name.toUpperFirst()/] [anEntity.name.toLowerFirst()/]) {
		[anEntity.name.toLowerFirst()/]Repository.save(new [anEntity.name.toUpperFirst()/]([anEntity.name.toLowerFirst()/]));
	}
/*
	//Uses Abstract entity to make the method more generic
	@Override
	public void save[anEntity.name.toUpperFirst()/](AbstractEntity [anEntity.name.toLowerFirst()/]) {
		[anEntity.name.toLowerFirst()/]Repository.save(new [anEntity.name.toUpperFirst()/]([anEntity.name.toLowerFirst()/]));
	}
*/

	@Override
	public List<[anEntity.name.toUpperFirst()/]> getAll[anEntity.name.toUpperFirst()/]s() {
		return Lists.newArrayList([anEntity.name.toLowerFirst()/]Repository.findAll());
	}

	@Override
	public [anEntity.name.toUpperFirst()/] get[anEntity.name.toUpperFirst()/]ById(long id[anEntity.name.toUpperFirst()/]) {
		return [anEntity.name.toLowerFirst()/]Repository.findOne(id[anEntity.name.toUpperFirst()/]);
	}

	@Override
	public void delete[anEntity.name.toUpperFirst()/](long id[anEntity.name.toLowerFirst()/]) {
		[anEntity.name.toLowerFirst()/]Repository.delete(id[anEntity.name.toLowerFirst()/]);
	}
}
[/file]
[/for]
[/template]
