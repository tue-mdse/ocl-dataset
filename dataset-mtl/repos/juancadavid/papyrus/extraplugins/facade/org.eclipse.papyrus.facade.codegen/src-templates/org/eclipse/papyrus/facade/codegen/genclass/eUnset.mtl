[comment]Copyright (c) 2013 CEA LIST.

All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
 Obeo - Initial API and implementation
 CEA LIST - Modification to support Facade code generation[/comment]
[comment encoding = UTF-8 /]
[module eUnset('http://www.eclipse.org/emf/2002/GenModel')/]

[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenClass /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenFeature /]
[import org::eclipse::emf::eef::codegen::ecore::services::wrappers::GenModel /]

[template public eUnset(genClass : GenClass, genModel : GenModel, negativeOffsetCorrection : String)]
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
  [if (genModel.useClassOverrideAnnotation()) ]
	@Override
  [/if]
	public void eUnset(int featureID) {
		switch (featureID[negativeOffsetCorrection/]) {
  [for (genFeature : GenFeature | genClass.getEUnsetGenFeatures())]
			case [genClass.getQualifiedFeatureID(genFeature)/]:
    [if (genFeature.isListType() and not genFeature.isUnsettable()) ]
      [if (genFeature.isWrappedFeatureMapType()) ]
				(([genModel.getImportedName('org.eclipse.emf.ecore.util.FeatureMap')/].Internal.Wrapper)[genFeature.getGetAccessor()/]()).featureMap().clear();
      [else]
				[genFeature.getGetAccessor()/]().clear();
      [/if]
    [else][if (genFeature.isUnsettable()) ]
				unset[genFeature.getAccessorName()/]();
    [else][if (not genFeature.hasEDefault()) ]
				set[genFeature.getAccessorName()/](([genFeature.getImportedType(genClass)/])null);
    [else]
				set[genFeature.getAccessorName()/]([genFeature.getEDefault()/]);
    [/if][/if][/if]
				return;
  [/for]
		}
  [if (genModel.minimalReflectiveMethods) ]
		super.eUnset(featureID);
  [else]
		eDynamicUnset(featureID);
  [/if]
	}

[/template]
