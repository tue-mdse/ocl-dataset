[comment encoding = UTF-8 /]
[module generateXMLElementHandler('http://www.eclipse.org/papyrus/2010/domaincontextcodegen','http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipse::papyrus::domaincontextcodegen::modules::ModelUtils /]

[template public generateXMLElementHandler(domain : DomainContext)]
	[comment this template is used to generate the plugin.xml /]
	
[file (domain.handlerProjectName+'/'+'xmlElementHandlers.xml', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.4"?>
<plugin>

[comment generation of all command attached to an handler /]
<!-- Creation command declarations -->
<extension point="org.eclipse.ui.commands">
[for (type : ElementType | domain.elementTypes.types->select(not isAbstract()))]
	<!-- Creation command for [type.name/] -->
	<command categoryId="org.eclipse.papyrus.editor.category" defaultHandler="[type.getCommandHandler()/]" description="Create a new [type.name/]" id="[type.getCommandID()/]" name="Create a new [type.name/]">
	</command>
	
[/for ]
</extension>

[comment generation of all menus /]
	
<!-- UI Menu declaration for creation commands -->
<extension point="org.eclipse.ui.menus">

	<menuContribution locationURI="[domain.genHandlers.createChildMenuLocationURI/]" allPopups="false">

[for (type : ElementType | domain.elementTypes.types->select(not isAbstract()))]
		<!-- Creation menu action for [type.name/] -->
		<command commandId="[type.getCommandID()/]" icon="[type.getIcon()/]" label="Create a new [type.name/]" style="push" tooltip="Create a new [type.name/]">
			<visibleWhen checkEnabled="true"/>
		</command>
		
[/for ]	
[for (type : ElementType | domain.genHandlers.parentDomainCreateChild->select(not isAbstract()))]
		<!-- Creation menu action for [type.name/] -->
		<command commandId="[type.getCommandID()/]" icon="[type.getIcon()/]" label="Create a new [type.name/]" style="push" tooltip="Create a new [type.name/]">
			<visibleWhen checkEnabled="true"/>
		</command>
		
[/for ]
	</menuContribution>
	
</extension>
</plugin>
[/file]

[/template]

[query public getIcon(type : ElementType) : String = 
	if type.oclIsTypeOf(MetaClassType) then
		type.icon
	else if type.oclIsTypeOf(SpecializationType) then 
		if not type.icon.oclIsUndefined() then
			type.icon
		else 
			type.oclAsType(SpecializationType).ref.getIcon()
		endif
	else
		'undefined_icon'
	endif endif/]
