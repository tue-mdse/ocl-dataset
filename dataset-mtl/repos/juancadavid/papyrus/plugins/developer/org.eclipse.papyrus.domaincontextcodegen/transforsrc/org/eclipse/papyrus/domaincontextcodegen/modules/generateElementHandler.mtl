[comment encoding = UTF-8 /]
[module generateElementHandler('http://www.eclipse.org/papyrus/2010/domaincontextcodegen','http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipse::papyrus::domaincontextcodegen::modules::ModelUtils /]

[template public generateElementHandler(domain : DomainContext)]
	
[comment this template is used to generate an enumeration of all handlers + an abstract handler/]

[for (type : ElementType | domain.elementTypes.types)]
[file (domain.handlerProjectName+'/'+domain.generatedSourceFolder+'/'+type.getCommandHandler().substituteAll('.', '/').concat('.java'), false, 'UTF-8')]
package [domain.genHandlers.handlerPackage/];

import org.eclipse.core.commands.IHandler;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import [domain.genHandlers.elementTypeEnumeratorPackage/].[domain.genHandlers.elementTypeEnumerator/];
import [domain.genHandlers.superClassPackage/].[domain.genHandlers.superClass/];

/**
 * <pre>
 * Command handler for [type.name/] creation
 *
 * </pre>
 * @generated
 */
public class [type.name/]Handler extends [domain.genHandlers.superClass/] implements IHandler {

	/**
	 * <pre>
	 * @see [domain.genHandlers.superClassPackage/].[domain.genHandlers.superClass/]#getElementTypeToCreate()
	 *
	 * @return the IElementType this handler is supposed to create
	 *
	 * </pre>
	 * @generated
	 */
	protected IElementType getElementTypeToCreate() {
		return [domain.genHandlers.elementTypeEnumerator/].[type.name.formatUpperWithSep()/];
	}
}

[/file]
[/for]
	
[/template]


[template public generateCommandFilter(domain : DomainContext)]
[file (domain.handlerProjectName+'/'+domain.generatedSourceFolder+'/'+domain.handlerProjectName.substituteAll('.', '/').concat('/filter/CommandFilter.java'), false, 'UTF-8')]
package [domain.handlerProjectName/].filter;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import [domain.genHandlers.elementTypeEnumeratorPackage/].[domain.genHandlers.elementTypeEnumerator/];
[if (not domain.specializationOf.oclIsUndefined())]
import [domain.specializationOf.genHandlers.elementTypeEnumeratorPackage/].[domain.specializationOf.genHandlers.elementTypeEnumerator/];	
[/if]
import org.eclipse.papyrus.views.modelexplorer.ICommandFilter;

public class CommandFilter implements ICommandFilter {

	private List<IElementType> visibleCommands;

	public List<IElementType> getVisibleCommands() {
		if(visibleCommands == null) {
			visibleCommands = new ArrayList<IElementType>();

[for (domainElt : ElementType | domain.elementTypes.types->select(not isAbstract()))]
	[if (domain.genHandlers.visibleCreateChildHandlers->includes(domainElt))]
			visibleCommands.add([domain.genHandlers.elementTypeEnumerator/].[domainElt.name.formatUpperWithSep()/]);
	[/if]
	[if (not domain.genHandlers.visibleCreateChildHandlers->includes(domainElt))]
			// visibleCommands.add([domain.genHandlers.elementTypeEnumerator/].[domainElt.name.formatUpperWithSep()/]);
	[/if]		
[/for]			
		}

		return visibleCommands;
	}
}
[/file]

[/template]