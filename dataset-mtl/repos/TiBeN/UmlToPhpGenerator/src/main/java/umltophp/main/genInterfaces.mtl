[comment encoding = UTF-8 /]
[module genInterfaces('http://www.eclipse.org/uml2/4.0.0/UML')]
[import umltophp::main::commons /]

[ comment 
	Generate PHP interface from model interface
	interfaces must be in a Package otherwise they will be ignored
 /]
[template public genPhpInterfaceFile(aInterface : Interface)]
[file (aInterface.getFilePath(), false, 'UTF-8')]
<?php

namespace [aInterface.getNamespacePath()/];

[for (aClassifier: Classifier | aInterface.getClassToBeImported()) after(lineSeparator())]
use [aClassifier.getUsePath()/];
[/for]
/**
 * [aInterface.ownedComment._body.substituteAll('\n', '\n * ')  /] 
 *
 * @package [aInterface.getNamespacePath()/]
 * @author [getProperty('vendor')/]
 */ 
interface [aInterface.name.toUpperFirst()/][if (not aInterface.getGenerals()->isEmpty())] extends [for (aInterface : Interface | aInterface.getGenerals()->filter(Interface)) separator(', ')][if(aInterface.isInNativePhpLibrary())]\[/if][aInterface.name/][/for][/if]
{
	[for (aProperty: Property | aInterface.getAllAttributes()) separator('\n') after('\n')]
	[aProperty.genPhpPropertyGetterDeclaration()/];

	[aProperty.genPhpPropertySetterDeclaration()/];
	[/for]
	[for (aOperation: Operation | aInterface.getAllOperations()) separator('\n') after('\n')]
	[aOperation.genPhpMethodDeclaration()/];
	[/for]	
}
[/file]
[/template]

[ comment 
	Generate PHP Getters and setters
 /]
[template private genPhpGettersSetters(attributes : Property)]
[for (p: Property | attributes) ? (p.isStatic = false)]

[p.visibility /] function get[p.genName().toUpperFirst()/]();

[p.visibility /] function set[p.genName().toUpperFirst()/]([if (not p.genPhpType().isPhpScalar())][p.genPhpType()/] [/if]$[p.genName()/]);
[/for]
[/template]

[ comment 
	Generate PHP Methods
 /]
[template private genPhpMethods(operations : Operation)]
[for (o: Operation | operations)]

/**
[if(o.ownedComment->size() > 0)] 
 * [o.ownedComment._body.substituteAll('\n', '\n     * ')/]
[/if]
[for (op: Parameter | o.ownedParameter) ? (op.direction.toString() = 'in')]
 * @param  [op.genPhpType()/] $[op.name/]
[/for]
[for (op: Parameter | o.ownedParameter) ? (op.direction.toString() = 'return')]
 * @return [op.genPhpType()/] $[op.name/]
[/for]
 */
[o.visibility /] [if (o.isStatic = true)]static[/if] function [o.name/]([for (op: Parameter | o.ownedParameter) separator(', ') ? (op.direction.toString() = 'in')][if(not op.genPhpType().isPhpScalar())][op.genPhpType()/] [/if]$[op.name/][/for]);
[/for]
[/template]
