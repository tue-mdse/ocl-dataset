[comment encoding = UTF-8 /]
[module commons('http://www.eclipse.org/uml2/4.0.0/UML')]

[ comment
    Contains commons methods used by templates generators
 /]

[ comment
    Convert uml datatype to php equivalent type
 /]
[template private asPhpType(uType : Type) post(trim())]
[if(uType.name = 'String')]
    string
[elseif(uType.name = 'Integer')]
    int
[elseif(uType.name = 'Boolean')]
    bool
[elseif(uType.name = 'Real')]
    float
[else]
    [uType.name /]
[/if]
[/template]

[comment
    Define wether the type is PHP scalar or not
/]
[query public isPhpScalar(aString : String) : Boolean =
    Sequence{'string', 'int', 'bool', 'float'}->exists(s : String | s = aString)
/]

[ comment
    Define wether the interface is defined in SPL
/]
[query public isInNativePhpLibrary(aInterface : Interface) : Boolean =
    Sequence{
        'Countable',
        'OuterIterator',
        'RecursiveIterator',
        'SeekableIterator',
        'SplObserver',
        'SplSubject',
        'Traversable',
        'Iterator',
        'IteratorAggregate',
        'ArrayAccess',
        'Serializable',
        'Closure',
        'Generator'
    }->exists(s : String | s = aInterface.name)
/]

[ comment
    Define wether the parameter is a TemplateParameter or not
    (as collection of template parameters are converted to array, they are not considered as template parameters)
/]
[query public isTemplateParameter(aParameter : Parameter) : Boolean =
    not (aParameter.type.owningTemplateParameter->isEmpty())
    and not (aParameter.upper = *)
/]

[ comment
    Determine whether a class contain constructor method or not
/]
[query public hasConstructorMethod(aClass : Class) : Boolean =
    aClass.getOperations()->reject(o : Operation | o.name <> aClass.name)->notEmpty()
/]

[ comment 
    Return the constructor method. Since Php can only contain One __constructor method,
    the first method where the name match the class name will be used has constructor.
    The others will be simply ignored. This should be improved (if possible) later.
/]
[query public getConstructorMethod(aClass : Class) : Operation =
    aClass.getOperations()->reject(o : Operation | o.name <> aClass.name)->asSequence()->first() 
/]

[ comment
    Define wether the class has templates signature
/]
[query public hasTemplateSignature(aClass : Class) : Boolean =
    not aClass.ownedTemplateSignature->isEmpty()
    or not aClass.getAllImplementedInterfaces()->forAll(it : Interface | it.ownedTemplateSignature->isEmpty())
/]

[ comment 
    Return Set of class that must be imported into a Class
    It include Dependencies, Generalizations, 
    Property type Classifiers and Operations Parameters Classifiers types
/]
[query public getClassToBeImported(aClass : Classifier) : Set(Classifier) = 
    Sequence{}
        ->addAll(
            if not aClass.attribute->isEmpty()
            then
                aClass.attribute
                    ->reject(type.isTemplateParameter()) 
                    .type
                    ->filter(Classifier)
                    ->select(c : Classifier | c.oclIsKindOf(Class) or c.oclIsKindOf(Interface))
                    ->select(c : Classifier | c.getNamespacePath() <> aClass.getNamespacePath())
            else
                Sequence{}
            endif
        )
        ->addAll(
            if not aClass.getOperations().ownedParameter->isEmpty()
            then
                aClass.getOperations().ownedParameter
                    ->reject(self.isTemplateParameter()).type
                    ->filter(Classifier)
                    ->select(c : Classifier | c.oclIsKindOf(Class) or c.oclIsKindOf(Interface))
                    ->select(c : Classifier | c.getNamespacePath() <> aClass.getNamespacePath())
            else
                Sequence{}
            endif
        )
        ->addAll(
            if not aClass.clientDependency.target.oclAsSet()->asSequence()->isEmpty()
            then 
                aClass.clientDependency.target.oclAsSet()
                    ->asSequence()
                    ->filter(Classifier)
                    ->select(c : Classifier | c.getNamespacePath() <> aClass.getNamespacePath())
            else
                Sequence{}
            endif    
        )
        ->addAll(
            if not aClass.getGenerals()->filter(Classifier)->isEmpty()
            then
                aClass.getGenerals()
                    ->filter(Classifier)
                    ->select(c : Classifier | c.getNamespacePath() <> aClass.getNamespacePath())
            else
                Sequence{}
            endif
        )
        ->addAll(
            if aClass.oclIsKindOf(Class) and 
            not aClass
                .oclAsType(Class)
                .getImplementedInterfaces()
                ->filter(Interface)
                ->isEmpty()
            then
                Sequence{}
                    ->addAll(
                        if not aClass
                            .oclAsType(Class)
                            .getImplementedInterfaces()
                            ->filter(Interface)
                            .getAllOperations()
                            .ownedParameter
                            ->isEmpty()
                        then
                            aClass
                                .oclAsType(Class)
                                .getImplementedInterfaces()
                                ->filter(Interface)
                                .getAllOperations()
                                .ownedParameter
                                    ->reject(self.isTemplateParameter()).type
                                    ->filter(Classifier)
                                    ->select(c : Classifier | c.oclIsKindOf(Class) or c.oclIsKindOf(Interface))
                                    ->select(c : Classifier | c.getNamespacePath() <> aClass.getNamespacePath())
                        else
                            Sequence{}
                        endif
                    )
            else
                Sequence{}
            endif   
        )
        ->addAll(
            if aClass.oclIsKindOf(Class) and 
            not aClass
                .oclAsType(Class)
                .getImplementedInterfaces()
                ->filter(Interface)
                ->isEmpty()
            then
                Sequence{}
                    ->addAll(
                        if not aClass
                            .oclAsType(Class)
                            .getImplementedInterfaces()
                            ->filter(Interface)
                            .attribute
                            ->isEmpty()
                        then
                            aClass
                                .oclAsType(Class)
                                .getImplementedInterfaces()
                                ->filter(Interface)
                                .attribute
                                    ->reject(type.isTemplateParameter()) 
                                    .type
                                    ->filter(Classifier)
                                    ->select(c : Classifier | c.oclIsKindOf(Class) or c.oclIsKindOf(Interface))
                                    ->select(c : Classifier | c.getNamespacePath() <> aClass.getNamespacePath())
                        else
                            Sequence{}
                        endif
                    )
            else
                Sequence{}
            endif   
        )
        ->asSet()
/]

[ comment
    Return Sequence of template parameters of a class and its generals/implemented
    interfaces
/]
[query public getTemplateParameters(aClass : Class) : Sequence(TemplateParameter) =
    Sequence{}
        ->addAll(
            if not aClass.ownedTemplateSignature->isEmpty()
            then
                aClass.ownedTemplateSignature.ownedParameter->asSequence()
            else Sequence{}
            endif
        )
        ->addAll(
            if not aClass.getAllImplementedInterfaces()->forAll(it : Interface | it.ownedTemplateSignature->isEmpty())
            then
                aClass
                    .getAllImplementedInterfaces()
                    .ownedTemplateSignature
                    ->filter(TemplateSignature)
                    .ownedParameter
                    ->asSequence()
            else Sequence{}
            endif
        )
/]

[ comment
    Return the file path of a class/interface
    ex : src/ProjectName/PackagePath/ClassName.php
/]
[query public getFilePath(aClassifier : Classifier) : String =
    'src/'
        .concat(getProperty('project'))
        .concat('/')
        .concat(aClassifier.getSlashSeparatedPackagePath())
        .concat('/')
        .concat(aClassifier.name)
        .concat('.php')
/]

[ comment
    Return the namespace of a class/interface
    ex : Vendor\ProjectName\PackagePath
/]
[query public getNamespacePath(aClassifier : Classifier) : String =
    getProperty('vendor')
        .concat('\\')
        .concat(getProperty('project'))
        .concat('\\')
        .concat(aClassifier.getAntiSlashSeparatedPackagePath())
/]

[ comment
    Return the file path of a test class/interface
    ex : src/ProjectName/PackagePath/ClassName.php
/]
[query public getTestFilePath(aClassifier : Classifier) : String =
    'tests/'
        .concat(getProperty('project'))
        .concat('/Tests/')
        .concat(aClassifier.getSlashSeparatedPackagePath())
        .concat('/')
        .concat(aClassifier.name)
        .concat('Test.php')
/]

[ comment
    Return the namespace of a class/interface
    ex : Vendor\ProjectName\PackagePath
/]
[query public getTestNamespacePath(aClassifier : Classifier) : String =
    getProperty('vendor')
        .concat('\\')
        .concat(getProperty('project'))
        .concat('\\Tests\\')
        .concat(aClassifier.getAntiSlashSeparatedPackagePath())
/]

[ comment
    Return the "use" path of the classifier
    ex Vendor\Project\PackagePath\ClassifierName
/]
[query public getUsePath(aClassifier : Classifier) : String =
    aClassifier.getNamespacePath()
        .concat('\\')
        .concat(aClassifier.name)
/]

[template public getSlashSeparatedPackagePath(aClassifier : Classifier) ]
[aClassifier.ancestors(Package).name->reverse()->drop(1)->sep('/')/]
[/template]

[template public getAntiSlashSeparatedPackagePath(aClassifier : Classifier) ]
[aClassifier.ancestors(Package).name->reverse()->drop(1)->sep('\\')/]
[/template]

[ comment
    Generate the php type of the property
/]
[ template public genPhpType(aProperty : Property) post(trim())]
[if (aProperty.upper = *)]
    array
[else]
    [aProperty.type.asPhpType() /]
[/if]
[/template]

[ comment
    Generate the Name of the Property
/]
[ template public genName(aProperty : Property) post(trim())]
    [aProperty.name/][if (aProperty.upper = *)]s[/if]
[/template]

[ comment
    Generate the default value declaration of a Property
/]
[ template private genDefault(aProperty : Property) post(trim())]
    [if (aProperty.default <> null)] = [if (aProperty.type.name = 'String')]'[/if][aProperty.default /][if (aProperty.type.name = 'String')]'[/if][/if]
[/template]

[ comment
    Generate the visibility of a property
/]
[ template private genVisibility(aProperty : Property) post(trim())]
    [if(aProperty.association <> null)]
        [aProperty.association.visibility /]
    [else]
        [aProperty.visibility/]
    [/if]
[/template]

[ comment
    Generate the php type of the parameter
/]
[ template public genPhpType(aParameter : Parameter) post(trim())]
[if (aParameter.upper = *)]
    array
[else]
    [aParameter.type.asPhpType() /]
[/if]
[/template]

[ comment
    Generate php property
/]
[template public genPhpProperty(aProperty : Property) post(trim()) {pDefaultValue: String = aProperty.genDefault();}]
/**
[if(aProperty.ownedComment->size() > 0)]
 * [aProperty.ownedComment._body.substituteAll('\n', '\n * ')  /]
[/if]
 * @[if (aProperty.isReadOnly)]var[else]var[/if] [aProperty.genPhpType() /]
 */
[if (aProperty.isReadOnly)]
const [aProperty.genName().toUpperCase()/][if(pDefaultValue <> '')] [pDefaultValue/][/if];
[else]
[aProperty.genVisibility() /] [if(aProperty.isStatic = true)]static [/if]$[aProperty.genName()/][if(pDefaultValue <> '')] [pDefaultValue/][/if];
[/if]
[/template]

[ comment Generate php property getter declaration /]
[template public genPhpPropertyGetterDeclaration(aProperty : Property) {pName: String = aProperty.genName() ; pPhpType: String = aProperty.genPhpType();}]
/**
 * @return [pPhpType /]
 */
[aProperty.genVisibility() /] [if(aProperty.isStatic = true)]static [/if]function get[pName.toUpperFirst()/]()
[/template]

[ comment Generate php property getter content /]
[template public genPhpPropertyGetterContent(aProperty : Property) {pName: String = aProperty.genName() ; pPhpType: String = aProperty.genPhpType();}]
{
[if(aProperty.isStatic = true)]
    // [protected ('Static getter '.concat(aProperty.namespace.name).concat('.').concat('get').concat(pName.toUpperFirst()))]
    // [/protected]
    return self::$[pName/];
[else]
    // [protected ('Getter '.concat(aProperty.namespace.name).concat('.').concat('get').concat(pName.toUpperFirst()))]
    // [/protected]
    return $this->[pName/];
[/if]
}
[/template]

[ comment Generate php property setter declaration /]
[template public genPhpPropertySetterDeclaration(aProperty : Property) {pName: String = aProperty.genName() ; pPhpType: String = aProperty.genPhpType();}]
/**
 * @param [pPhpType/] $[pName/]
 */
[aProperty.genVisibility() /] [if(aProperty.isStatic = true)]static [/if]function set[pName.toUpperFirst()/]([if (not pPhpType.isPhpScalar())][pPhpType/] [/if]$[pName/])
[/template]

[ comment Generate php property setter content /]
[template public genPhpPropertySetterContent(aProperty : Property) {pName: String = aProperty.genName() ; pPhpType: String = aProperty.genPhpType();}]
{
[if(aProperty.isStatic = true)]
    // [protected ('Static setter '.concat(aProperty.namespace.name).concat('.').concat('set').concat(pName.toUpperFirst()))]
    // [/protected]
    self::$[pName/] = $[pName/];
[else]
    // [protected ('Setter '.concat(aProperty.namespace.name).concat('.').concat('set').concat(pName.toUpperFirst()))]
    // [/protected]
    $this->[pName/] = $[pName/];
[/if]
}
[/template]

[ comment
    Generate constructor declaration templates types parameters
/]
[template public genConstructorDeclarationTemplateTypeParameters(aClass : Class)]
[for (aParameter: TemplateParameter | aClass.getTemplateParameters()) separator(', ')]$[aParameter.ownedElement->selectByType(Class).name/]Type = null[/for]
[/template]

[ comment Generate php method declaration /]
[template public genPhpMethodDeclaration(aOperation : Operation)]
/**
[if(aOperation.ownedComment->size() > 0)]
 * [aOperation.ownedComment._body.toUpperFirst().substituteAll('\n', '\n * ')/]
[/if]
[if (aOperation.ownedComment->size() > 0 and aOperation.ownedParameter->size() > 0)]
 *
[/if] 
[for (op: Parameter | aOperation.ownedParameter) ? (op.direction.toString() = 'in')]
 * @param [op.genPhpType()/] $[op.name/]
[/for]
[for (op: Parameter | aOperation.ownedParameter) ? (op.direction.toString() = 'return')]
 * @return [op.genPhpType()/] $[op.name/]
[/for]
 */
[aOperation.visibility /] [if (aOperation.isStatic = true)]static [/if]function [aOperation.name/]([aOperation.genPhpMethodDeclarationParameters()/])
[/template]

[ comment
    Generate Php method declaration parameters list
/]
[template public genPhpMethodDeclarationParameters(aOperation : Operation) post(trim())]
[for (op: Parameter | aOperation.ownedParameter) separator(', ') ? (op.direction.toString() = 'in')][if(not (op.genPhpType().isPhpScalar())) and (not op.isTemplateParameter())][op.genPhpType()/] [/if]$[op.name/][if(op.lower = 0)] = NULL[/if][/for]
[/template]

[ comment 
    Generate Php method content 
/]
[template public genPhpMethodContent(aOperation : Operation)]
{
    [for (op: Parameter | aOperation.ownedParameter) ? (
        op.direction.toString() = 'in'
        and op.isTemplateParameter()
    )]
    $this->typeHint($this->[op.type.name/]Type, $[op.name/]);
    [/for]
    // [protected (aOperation.namespace.name.concat('.').concat(aOperation.name))]
    // TODO should be implemented.
    // [/protected]
    [if aOperation.ownedParameter->select(direction.toString() = 'return')->notEmpty() ]

    return $[aOperation.ownedParameter->select(direction.toString() = 'return')->first().name /];
    [/if]
}
[/template]
