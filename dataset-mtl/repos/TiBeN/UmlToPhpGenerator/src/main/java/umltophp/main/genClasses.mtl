[comment encoding = UTF-8 /]
[module genClasses('http://www.eclipse.org/uml2/4.0.0/UML')]
[import umltophp::main::commons /]

[ comment
    Generate PHP class from model Class
    Classes must be in a Package otherwise they will be ignored
 /]
[template public genPhpClassFile(aClass : Class)]
[file (aClass.getFilePath(), false, 'UTF-8')]
<?php

namespace [aClass.getNamespacePath()/];

[for (aClassifier: Classifier | aClass.getClassToBeImported()) after(lineSeparator())]
use [aClassifier.getUsePath()/];
[/for]
// [protected (aClass.name.concat('.useStatements'))]
// Place your use statements here.
// [/protected]

/**
 * [aClass.ownedComment._body.substituteAll('\n', '\n * ')/]
 *
 * @package [aClass.getNamespacePath()/]
 * @author [getProperty('vendor')/]
 */
[if (aClass.isAbstract)]abstract [/if]class [aClass.name.toUpperFirst()/][if (not aClass.getGenerals()->filter(Class)->isEmpty())] extends [aClass.getGenerals()->filter(Class)->asSequence()->first().name /][/if][if (not aClass.getImplementedInterfaces()->filter(Interface)->isEmpty())] implements [for (aInterface : Interface | aClass.getImplementedInterfaces()) separator(', ')][if(aInterface.isInNativePhpLibrary())]\[/if][aInterface.name/][/for][/if]
{
    [if (aClass.hasTemplateSignature())]
    [for (aParameter: TemplateParameter | aClass.getTemplateParameters()) separator('\n') after('\n')]
    /**
     * Type of the element [aParameter.ownedElement->selectByType(Class).name/]
     * @var String
     */
    protected $[aParameter.ownedElement->selectByType(Class).name/]Type;
    [/for]
    [/if]
    [for (aProperty: Property | aClass.attribute) separator('\n') after('\n')]
    [aProperty.genPhpProperty()/]
    [/for]
    [for (aInterface : Interface | aClass.getImplementedInterfaces()->filter(Interface))]
    [for (aProperty: Property | aInterface.getAllAttributes()) separator('\n') after('\n')]
    [aProperty.genPhpProperty()/]
    [/for]
    [/for]
    [if (aClass.getGenerals()->isEmpty() and (aClass.hasTemplateSignature() or aClass.hasConstructorMethod()))]
    public function __construct([if (aClass.hasTemplateSignature())][aClass.genConstructorDeclarationTemplateTypeParameters()/][/if][if (aClass.hasConstructorMethod() and aClass.getConstructorMethod().ownedParameter->select(direction.toString() = 'in')->notEmpty())][if (aClass.hasTemplateSignature())], [/if][aClass.getConstructorMethod().genPhpMethodDeclarationParameters()/][/if])
    {
        [if (aClass.hasTemplateSignature())]
        [for (aParameter: TemplateParameter | aClass.getTemplateParameters()) after('\n')]
        $this->[aParameter.ownedElement->selectByType(Class).name/]Type = $[aParameter.ownedElement->selectByType(Class).name/]Type;
        [/for]
        [/if]
        // [protected (aClass.name.concat('.'.concat('constructor')))]
        // [/protected]
    }

    [/if]
    [if (aClass.getGenerals()->notEmpty())]
    // [protected (aClass.name.concat('.'.concat('surchargedConstructorsDestructors')))]
    // Surcharge Constructors and Destructors here
    // [/protected]

    [/if]
    [if (aClass.hasTemplateSignature())]
    [for (aParameter: TemplateParameter | aClass.getTemplateParameters()) separator('\n')]
    /**
     * [aParameter.ownedElement->selectByType(Class).name/] type getter
     * @var String
     */
    public function get[aParameter.ownedElement->selectByType(Class).name/]Type()
    {
        return $this->[aParameter.ownedElement->selectByType(Class).name/]Type;
    }
    [/for]

    /**
     * Emulate Templates (generics) in PHP. Check if the type of the object match
     * type specified in constructor.
     * If no type (null) if specified in the constructor, then type is not checked.
     *
     * @param string $type
     * @param <$type> $variable
     * @return boolean 
     */
    private static function typeHint($type, $variable)
    {
        if ($type == null || $variable == null) {
            return;
        }

        if (is_object($variable)) {
            $hint = is_a($variable, $type);
            $varType = get_class($variable);
        } else {
            $varType = gettype($variable);
            $hint = $varType == $type;
        }

        if (!$hint) {
            throw new \InvalidArgumentException(
                sprintf('expects parameter to be %s, %s given', $type, $varType)
            );
        }
    }

    [/if]
    [for (aProperty: Property | aClass.attribute) separator('\n') ? (not aProperty.isReadOnly) ]
    [aProperty.genPhpPropertyGetterDeclaration()/]
    [aProperty.genPhpPropertyGetterContent()/]

    [aProperty.genPhpPropertySetterDeclaration()/]
    [aProperty.genPhpPropertySetterContent()/]
    [/for]
    [for (aOperation: Operation | aClass.getOperations()->reject(o: Operation | o.name = aClass.name)) before('\n') separator('\n') ]
    [aOperation.genPhpMethodDeclaration()/]
    [aOperation.genPhpMethodContent()/]
    [/for]
    [for (aInterface : Interface | aClass.getImplementedInterfaces()->filter(Interface)) before('\n') separator('\n')]
    // [aInterface.name.toUpperFirst()/] Realization

    [for (aProperty: Property | aInterface.getAllAttributes()) separator('\n')]
    [aProperty.genPhpPropertyGetterDeclaration()/]
    [aProperty.genPhpPropertyGetterContent()/]

    [aProperty.genPhpPropertySetterDeclaration()/]
    [aProperty.genPhpPropertySetterContent()/]
    [/for]
    [for (aOperation: Operation | aInterface.getAllOperations()) separator('\n')]
    [aOperation.genPhpMethodDeclaration()/]
    [aOperation.genPhpMethodContent()/]
    [/for]
    [/for]
    [if (not aClass.getGenerals()->filter(Class)->isEmpty())]

    // [protected (aClass.name.concat('.'.concat('surchargedMethods')))]
    // Surcharge Methods here
    // [/protected]
    [/if]

    // [protected (aClass.name.concat('.'.concat('implementationSpecificMethods')))]
    // Place your implementation specific methods here
    // [/protected]
}
[/file]
[/template]
