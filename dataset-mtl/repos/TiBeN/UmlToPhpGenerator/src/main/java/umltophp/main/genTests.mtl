[comment encoding = UTF-8 /]
[module genTests('http://www.eclipse.org/uml2/4.0.0/UML')]
[import umltophp::main::commons /]

[ comment
    Generate PHP classes tests from model Class.
    The tests class are PHPUnit compliant
    Classes must be in a Package otherwise they will be ignored.
    Classes without operations are considered Object values classes and will be ignored.
 /]
[template public genPhpClassTestFile(aClass : Class)
    ? (aClass.ownedOperation->reject(o: Operation | o.name = aClass.name)->notEmpty()
        or aClass.clientDependency->filter(Realization).supplier->filter(Interface).ownedOperation->notEmpty()
    )
]
[file (aClass.getTestFilePath(), false, 'UTF-8')]
<?php

namespace [aClass.getTestNamespacePath()/];

use [aClass.getUsePath()/];

// [protected (aClass.name.concat('.useStatements'))]
// Place your use statements here.
// [/protected]

/**
 * Test cases for class [aClass.name.toUpperFirst()/]
 * 
 * [protected (aClass.name.concat('Test.test').concat('Annotations'))]
 * PHPUnit user annotations can be placed here
 * [/protected]
 *
 * @package [aClass.getTestNamespacePath()/]
 * @author [getProperty('vendor')/]
 */
class [aClass.name.toUpperFirst()/]Test extends \PHPUnit_Framework_TestCase
{
    // [protected (aClass.name.concat('Test.attributes'))]
    // Place additional tests attributes here.
    // [/protected]

    public function setUp()
    {
        // [protected (aClass.name.concat('Test.setUp'))]
        // Place additional setUp code here.
        // [/protected]
    }

    public function tearDown()
    {
        // [protected (aClass.name.concat('Test.tearDown'))]
        // Place additional tearDown code here.
        // [/protected]
    }
    [aClass.genPhpTestMethods() before('\n') /]
    [for (aInterface : Interface | aClass.getImplementedInterfaces()->filter(Interface)) before('\n') separator('\n')]
    [aInterface.genPhpTestRealizationMethods() /]
    [/for]

    // [protected (aClass.name.concat('Test.methods'))]
    // Place additional tests methods here.
    // [/protected]
}
[/file]
[/template]

[ comment
    Generate PHP Test Methods
 /]
[template private genPhpTestMethods(aClass: Class) post(trim())]
[for (o: Operation | aClass.getOperations()->reject(o: Operation | o.name = aClass.name)) separator('\n')]
/**
 * Test[if (o.isStatic = true)] static[/if] method [o.name/] from class [o.class.name /]
 *
 * [protected (aClass.name.concat('Test.test'.concat(o.name).concat('Annotations')))]
 * PHPUnit user annotations can be placed here
 * [/protected]
 */
public function test[o.name.toUpperFirst()/]()
{
    // [protected (o.class.name.concat('Test.test'.concat(o.name)))]
    $this->markTestIncomplete(
        'This test has not been implemented yet.'
    );
    // [/protected]
}
[/for]
[/template]

[ comment
    Generate PHP Test Realization Methods
 /]
[template private genPhpTestRealizationMethods(aInterface : Interface) post(trim())]
[for (o: Operation | aInterface.getAllOperations()) separator('\n')]
/**
 * Test [if (o.isStatic = true)]static [/if]method [o.name/] from interface [aInterface.name /]
 * [protected (aInterface.name.concat('.test'.concat(o.name).concat('Annotations')))]
 * PHPUnit users annotations can be placed here
 * [/protected]
 */
public function test[o.name.toUpperFirst()/]()
{
    // [protected (o.interface.name.concat('.test'.concat(o.name)))]
    $this->markTestIncomplete(
        'This test has not been implemented yet.'
    );
    // [/protected]
}
[/for]
[/template]
