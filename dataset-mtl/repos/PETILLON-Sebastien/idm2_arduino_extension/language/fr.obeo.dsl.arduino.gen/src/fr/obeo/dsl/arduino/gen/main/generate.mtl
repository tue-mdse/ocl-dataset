[comment encoding = UTF-8 /]
[module generate('http://www.obeo.fr/arduino')]
[import fr::obeo::dsl::arduino::gen::main::arduinoservices /]


[template public generateSketch(sketch : Sketch)]

[comment @main/]
[genIno()/] 
[genMakefile()/]
[/template]

[template public genIno (sketch : Sketch) ]
[file (sketch.getVariableName()+'.ino', false, 'UTF-8')]
[for (library : Library | sketch.eAllContents("ModuleAssignment").module->select(library<>arduino::Library::none).library->asOrderedSet())]
#include <[library.toString().toUpperFirst()/].h>
[/for]
[for (mod : Module | sketch.eAllContents("ModuleInstruction").module->asOrderedSet())]
[if (mod.library<>arduino::Library::music)]
int [mod.getVariableName()/] = [sketch.getPinId(mod)/];
[/if]
[/for]
[for (mod : Module | sketch.eAllContents("ModuleAssignment").module->select(library<>arduino::Library::none)->asOrderedSet())]
[mod.library.toString().toUpperFirst()/] [mod.getVariableName()/];
[/for]
[for (mod : Module | sketch.eAllContents("ModuleGet").module->select(m |m.oclIsKindOf(Sensor))->asOrderedSet())]
// [mod.image/]
int [mod.getVariableName()/] = [sketch.getPinId(mod)/]; 
[/for]
[for (instruction : Repeat | getRepeatInstructions(sketch))]
int iter_[eContainer(arduino::Sketch).getRepeatInstructionIndex(instruction)/];
[/for]
[for (instruction : VariableDeclaration | sketch.eAllContents("VariableDeclaration"))]
[if (instruction.variable.oclIsTypeOf(IntegerVariable))]int [instruction.variable.name/];[/if]
[if (instruction.variable.oclIsTypeOf(BooleanVariable))]short unsigned int [instruction.variable.name/];[/if]
[/for]

void setup() {
[if (sketch.eAllContents("ModuleAssignment").module.library->select(lib|lib = arduino::Library::music)->asOrderedSet()->size()>=1)]
 music.init();
[/if]
[for (mod : Module | sketch.eAllContents("ModuleAssignment").module->asOrderedSet())]
[if (mod.library<>arduino::Library::music)]
  pinMode([mod.getVariableName()/], OUTPUT);
[/if]
[/for]
[for (mod : Module | sketch.eAllContents("ModuleAssignment").module->select(library<>arduino::Library::none)->asOrderedSet())]
 [mod.getVariableName()/].attach([sketch.getPinId(mod)/]);
[/for]
[for (instruction : VariableDeclaration | sketch.eAllContents("VariableDeclaration"))]
[if (instruction.variable.oclIsTypeOf(IntegerVariable))][instruction.variable.name/] = [instruction.variable.oclAsType(IntegerVariable).initialValue/];[/if]
[if (instruction.variable.oclIsTypeOf(BooleanVariable))][instruction.variable.name/] = [instruction.variable.oclAsType(BooleanVariable).initialValue/];[/if]
[/for]
}

// the loop routine runs over and over again forever:
void loop() {
//my compiler
 [sketch.instructions-> first().genINO()/]
}
[/file]
[/template]

[template public genINO(i : Instruction)post (trim())]
[i.generateInstruction()/]
[if (not i.oclIsInvalid() and not i.next.oclIsInvalid() and not i.next.oclIsKindOf(arduino::Sketch))]
[genINO(i.next)/] 
[/if]  
[/template]


[template public genMakefile (sketch : Sketch) ]
[file ('Makefile', false, 'UTF-8')]
BOARD_TAG    = uno
ARDUINO_PORT = /dev/ttyACM0
ARDUINO_LIBS = [for (library : Library | sketch.eAllContents("ModuleAssignment").module->select(library<>arduino::Library::none).library->asOrderedSet())][library.toString().toUpperFirst()/][/for]

include /usr/share/arduino/Arduino.mk
[/file]
[/template]

[template public generateInstruction(instruction : Delay)post (trim())]
delay([instruction.value/]);
[/template]

[template public generateInstruction(instruction : ModuleAssignment)post (trim())]
[if (instruction.module.library=arduino::Library::music)]
[if (instruction.operand.oclIsTypeOf(BooleanConstant) and instruction.operand.oclAsType(BooleanConstant).value=false)]
	music.play();
[else]
	music.pause();
[/if]
[else]
digitalWrite([instruction.module.getVariableName()/], [getStatus(instruction)/]);		
[/if]

[/template]

[template public generateInstruction(instruction : ModuleGet)post (trim())]
[instruction.module.getVariableName()/]_value
[/template]

[template private getStatus(instruction : ModuleAssignment)post (trim())]
[if ((not instruction.operand.oclIsInvalid()) and instruction.operand.oclIsTypeOf(BooleanConstant))]
	[if (instruction.operand.oclAsType(BooleanConstant).value=true)]
HIGH
	[else]
LOW
	[/if]
[else]
	[if (instruction.operand.oclIsTypeOf(IntegerConstant))]
[instruction.operand.oclAsType(IntegerConstant).value/]
	[else]
		[if (instruction.operand.oclIsTypeOf(ModuleGet))]
[generateInstruction(instruction)/]
		[/if]
	[/if]
[/if]
[/template]

[template public generateInstruction(instruction : ModuleInstruction)post (trim())]
[if (instruction.module.kind=ModuleKind::digital)]
digitalRead([instruction.module.getVariableName()/])
[else]
analogRead([instruction.module.getVariableName()/])
[/if]

[/template]

[template public generateInstruction(instruction : Repeat)post (trim())]
[let index : Integer = eContainer(arduino::Sketch).getRepeatInstructionIndex(instruction)]
for (iter_[index/]=0; iter_[index/] < ( [instruction.iteration/] ); ++iter_[index/] )
{
 [instruction.instructions->first().genINO()/]
}
[/let]
[/template]

[template public generateInstruction(instruction : While)post (trim())]
{
	[instruction.generateContainedModuleGet()/]
	while ([instruction.condition.generateExpression()/])
	{
	 [instruction.instructions->first().genINO()/] 
	}
}
[/template]

[template public generateInstruction(instruction : If)post (trim())]
{//IF
	[instruction.generateContainedModuleGet()/]
	if ([instruction.condition.generateExpression()/])
	{
	 [instruction.instructions->first().genINO()/]
	}
//endIf
}
[/template]

[template public generateContainedModuleGet(instruction : If)post (trim())]
[if (((not instruction.condition.oclIsInvalid()) and instruction.condition.oclIsKindOf(ModuleGet))	 )]
int [instruction.condition.oclAsType(ModuleGet).module.getVariableName()/]_value = digitalRead([instruction.condition.oclAsType(ModuleGet).module.getVariableName()/]);
[/if]
[if ((not instruction.condition.oclIsInvalid())  
		and
	(instruction.condition.oclIsKindOf(BinaryBooleanExpression) 
		and instruction.condition.oclAsType(BinaryBooleanExpression).left.oclIsKindOf(ModuleGet))
	 )]
int [instruction.condition.oclAsType(BinaryBooleanExpression).left.oclAsType(ModuleGet).module.getVariableName()/]_value = digitalRead([instruction.condition.oclAsType(BinaryBooleanExpression).left.oclAsType(ModuleGet).module.getVariableName()/]);
[/if]
[if ((not instruction.condition.oclIsInvalid())  
		and
	(instruction.condition.oclIsKindOf(BinaryBooleanExpression) 
		and instruction.condition.oclAsType(BinaryBooleanExpression).right.oclIsKindOf(ModuleGet))
	 )]
int [instruction.condition.oclAsType(BinaryBooleanExpression).right.oclAsType(ModuleGet).module.getVariableName()/]_value = digitalRead([instruction.condition.oclAsType(BinaryBooleanExpression).right.oclAsType(ModuleGet).module.getVariableName()/]);
[/if]
[/template]

[template public generateContainedModuleGet(instruction : While)post (trim())]
[if (((not instruction.condition.oclIsInvalid()) and instruction.condition.oclIsKindOf(ModuleGet))	 )]
int [instruction.condition.oclAsType(ModuleGet).module.getVariableName()/]_value = digitalRead([instruction.condition.oclAsType(ModuleGet).module.getVariableName()/]);
[/if]
[if ((not instruction.condition.oclIsInvalid())  
		and
	(instruction.condition.oclIsKindOf(BinaryBooleanExpression) 
		and instruction.condition.oclAsType(BinaryBooleanExpression).left.oclIsKindOf(ModuleGet))
	 )]
int [instruction.condition.oclAsType(BinaryBooleanExpression).left.oclAsType(ModuleGet).module.getVariableName()/]_value = digitalRead([instruction.condition.oclAsType(BinaryBooleanExpression).left.oclAsType(ModuleGet).module.getVariableName()/]);
[/if]
[if ((not instruction.condition.oclIsInvalid())  
		and
	(instruction.condition.oclIsKindOf(BinaryBooleanExpression) 
		and instruction.condition.oclAsType(BinaryBooleanExpression).right.oclIsKindOf(ModuleGet))
	 )]
int [instruction.condition.oclAsType(BinaryBooleanExpression).right.oclAsType(ModuleGet).module.getVariableName()/]_value = digitalRead([instruction.condition.oclAsType(BinaryBooleanExpression).right.oclAsType(ModuleGet).module.getVariableName()/]);
[/if]
[/template]



[comment][template public generateInstruction(instruction : Level)post (trim())]
[if (instruction.module.library=arduino::Library::servo)]
[instruction.module.getVariableName()/].write([instruction.level.generateInstruction()/]);
[else]
analogWrite([instruction.eContainer(arduino::Sketch).getPinId(instruction.module)/],255-([instruction.level.generateInstruction()/]));	
[/if]
[/template][/comment]



[template public generateInstruction(instruction : IntegerVariable)post (trim())]
[instruction.getValue()/]
[/template]

[template public generateInstruction(instruction : BooleanVariable)post (trim())]
[instruction.getValue()/]
[/template]

[template public generateInstruction(instruction : Sketch)post (trim())]
[/template]

[template public generateExpression(expression :  VariableRef)post (trim())]
[expression.variable.name/];
[/template]

[template public generateExpression(expression :  BinaryIntegerExpression)post (trim())]
([expression.left.generateExpression()/] [expression.operator.getOperator()/] [expression.right.generateExpression()/])
[/template]

[template public generateExpression(expression :  BinaryBooleanExpression)post (trim())]
([expression.left.generateExpression()/] [expression.operator.getOperator()/] [expression.right.generateExpression()/])
[/template]

[template public generateExpression(expression :  ModuleGet)post (trim())]
[expression.module.getVariableName()/]_value
[/template]

[template public generateExpression(instruction : IntegerConstant)post (trim())]
[instruction.value/]
[/template]

[template public generateExpression(instruction : BooleanConstant)post (trim())]
[instruction.value/]
[/template]

[template public generateExpression(expression :  Expression)post (trim())]
Generation error for [expression/]
[/template]

[template public generateInstruction(instruction : Instruction)]
Generation error for [instruction/]
[/template]
 

[query public getPinId (sketch : Sketch, mod : Module) : Integer = sketch.hardware.connectors->select(c| c.module = mod)->first().pin.id/]

[query public getVariableName (element : NamedElement) : String = element.name.replaceAll(' ', '')/]

[query public getRepeatInstructions (sketch : Sketch) : OrderedSet(Repeat) = sketch.eAllContents("Repeat")->asOrderedSet()/]
