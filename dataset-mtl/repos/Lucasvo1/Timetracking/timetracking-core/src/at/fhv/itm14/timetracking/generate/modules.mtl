[comment encoding = UTF-8 /]
[module modules('http://www.eclipse.org/uml2/5.0.0/UML')]

[import at::fhv::itm14::timetracking::service::uml2service/]
[import at::fhv::itm14::timetracking::generate::datatype /]



[template public generateProperties(aClass : Class)]
[for (p : Property | aClass.attribute) separator('\n')]
[if(p.name='activities' and p.class.name='User')]
[p.visibility/] List<[p.type.convertJavaDataType()/]> [p.name/] = new ArrayList<>();
[else]
[p.visibility/] [if p.isStatic]static [/if][p.type.convertJavaDataType()/] [p.name/][if (p.default <> null)] = "[p.default/]"[/if];
[/if]
[/for]
[/template]

[template public generateOperation(o : Operation)]
[o.visibility/] [if o.isStatic]static [/if][if (o.class.name<>o.name)][o.generateReturn()/][/if] [o.name/]([o.generateRawParameters()/]) [if (o.name='addActivity' or o.name='removeActivity' )]throws Exception[/if]{
	[if (o.class.name=o.name)]
	[if(o.getRealParameters()->asSequence()->first().name<>'id')]
	this.id = new Date().getTime();
	[/if]
	[for (p : Parameter |o.getRealParameters())]
	this.[p.name/] = [p.name/];
	[/for]
	[elseif (o.name='isNew')]
	 return !DatabaseController.getDatabaseControllerInstance().[if (o.class.name='Activity')]activityExists[elseif(o.class.name='User')]userExists[/if](id);
	[elseif (o.name='addActivity')]
	 activities.add(activity);
	[elseif(o.name='removeActivity')]
	 activities.remove(activity);
	[/if]
}
[/template]

[template public generateRawParameters(operation:Operation)]
[operation.getRealParameters()->filter(Parameter).genRawDeclare()->sep(', ')/]
[/template]

[template public generateReturn(operation:Operation)]
[if (type = null)]void[else][operation.returnResult().convertJavaDataType()/][/if]
[/template]

[template public genRawDeclare(parameter:Parameter)]
[parameter.convertJavaDataType()/] [name.toLowerFirst()/]
[/template]


[template public generateSingleton(aClass : Class)]
[if aClass.hasStereotype('Singleton')]
private static [aClass.name.toUpperFirst()/] _instance;
public static [aClass.name.toUpperFirst()/] get[aClass.name.toUpperFirst()/]Instance()
{
	if(_instance == null)
	{
		_instance = new [aClass.name.toUpperFirst()/]();
	}
	return _instance;
}
[/if]
[/template]

[template public generateConstructor(aClass : Class)]
[if aClass.hasStereotype('Singleton')]private[else]public[/if] [aClass.name/](){}
[/template]

[template public generateImports(class:Class) post (trim())]
[for (prop:Property|class.attribute->select(type.oclIsTypeOf(NamedElement)))]
	[let propType : Type = prop.type]
		[let typeName : String = propType.name]
			[if (propType._package.name <> 'UMLPrimitiveTypes' and 
				typeName <> 'String' and typeName <> 'Integer' and 
				typeName <> 'Float' and typeName <> 'Long' and 
				typeName <> 'Boolean' and typeName <> 'Date')]
import [propType.getCompleteName()/];
[else] import [propType.getCompleteName()/];
			[/if]		
		[/let]
	[/let]
[/for]
[/template]


[template public getCompleteName(namedElement:NamedElement) post (trim())]
[let packages : Sequence(Package) = namedElement.ancestors(Package)->select(not oclIsTypeOf(Model))]
	[packages.name->reverse()->sep('.')->toString().concat(if(packages->notEmpty())then '.' else '' endif).concat(namedElement.name)/]
[/let]
[/template]
