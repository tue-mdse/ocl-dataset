[comment encoding = UTF-8 /]
[module database('http://www.eclipse.org/uml2/5.0.0/UML')]
[import at::fhv::itm14::timetracking::service::uml2service/]
[import at::fhv::itm14::timetracking::generate::datatype /]
[import at::fhv::itm14::timetracking::generate::modules /]


[template public generateDatabaseOperations(o : Operation)]
[o.visibility/] [if o.isStatic]static[/if] [o.generateReturn()/] [o.name/]([o.generateRawParameters()/]) [if(o.name<>'activityExists' and o.name<>'userExists')]throws Exception[/if] {
[if (o.name='insertUser' or o.name='insertActivity' or o.name='updateActivity' or o.name='updateUser' or o.name='deleteUser' or o.name='deleteActivity')]
	Connection c = null;
	try
	{
		Class.forName(DB_DRIVER);
		c = DriverManager.getConnection(DB_CONNECTION);
		c.setAutoCommit(false);
		c.createStatement();
		[if (o.name='insertUser')]
		PreparedStatement ps = c.prepareStatement("INSERT INTO user VALUES (?, ?, ?, ?, ?, ?);");
		[o.generateUserTypesInsertUpdate()/]
		[elseif (o.name='insertActivity')]
		PreparedStatement ps = c.prepareStatement("INSERT INTO activity VALUES (?, ?, ?, ?, ?);");
		[o.generateActivityTypesInsertUpdate()/]
		[elseif (o.name='updateActivity')]
		PreparedStatement ps = c.prepareStatement("UPDATE activity SET description=?, fromstamp=?, tostamp=? where id=?;");	
		[o.generateActivityTypesInsertUpdate()/]
		[elseif (o.name='updateUser')]
		PreparedStatement ps = c.prepareStatement("UPDATE user SET username=?, firstname=?, lastname=?, passwrd=? where id=?;");
		[o.generateUserTypesInsertUpdate()/]
		[elseif (o.name='deleteUser')]
		PreparedStatement ps = c.prepareStatement("DELETE FROM user where ID=?");
		ps.setObject(1, user.getId());
		[elseif (o.name='deleteActivity')]
		PreparedStatement ps = c.prepareStatement("DELETE FROM activity where ID=?");
		ps.setObject(1, activity.getId());
		[/if]
		ps.addBatch();
		ps.executeBatch();
		c.commit();
		c.close();
	} catch (Exception e) {
		System.err.println(e.getClass().getName() + ": " + e.getMessage());
		System.exit(0);
	}
[elseif (o.name='findAllUsers' or o.name='findAllActivities')]
	Connection c = null;
	Statement stmt = null;
	[o.returnResult().convertJavaDataType()/] rv = new HashSet<[o.returnResult().type.name/]>();
	try {
		Class.forName(DB_DRIVER);
		c = DriverManager.getConnection(DB_CONNECTION);
		stmt = c.createStatement();
		ResultSet rs = stmt.executeQuery("[if(o.name='findAllActivities')]SELECT * FROM ACTIVITY;[elseif (o.name='findAllUsers')]SELECT * FROM user;[/if]");
		while (rs.next()) {
			[if(o.name='findAllUsers')]
			rv.add(new User(rs.getLong(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)));
			[elseif (o.name='findAllActivities')]
			[generateActivityTypesFindAll()/]
			[/if]
		}
		rs.close();
		c.close();
	} catch (Exception e) {
		System.err.println(e.getClass().getName() + ": " + e.getMessage());
		System.exit(0);
	}
	return rv;
	[elseif (o.name='findUserById' or o.name='findUserByUsername' or o.name='findActivityById')]
	Connection c = null;
	PreparedStatement stmt = null;
	[o.returnResult().convertJavaDataType()/] rv = null;
	try
	{
		Class.forName(DB_DRIVER);
		c = DriverManager.getConnection(DB_CONNECTION);
		c.setAutoCommit(false);
		[if (o.name='findUserById')]
		stmt = c.prepareStatement("SELECT * FROM user where ID=?");
		stmt.setObject(1, id);
		[elseif (o.name='findUserByUsername')]
		stmt = c.prepareStatement("SELECT * from user where username=?");
		stmt.setString(1, username);
		[elseif(o.name='findActivityById')]
		stmt = c.prepareStatement("SELECT * from activity where ID=?");
		stmt.setString(1, Long.toString(id));
		[/if]
		ResultSet rs = stmt.executeQuery();
		while(rs.next()){
		[if(o.name='findActivityById')]
		[o.generateActivityTypesFindAll()/]
		rv = [o.generateActivityConstructor()/];
		[else]
		rv = new User(rs.getLong(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5));
		[/if]
		}
		c.close();
	} catch (Exception e) {
		System.err.println(e.getClass().getName() + ": " + e.getMessage());
		System.exit(0);
	}
	return rv;
	[elseif(o.name='createDatabase')]
	Connection c = null;
	Statement stmt = null;
	try {
		Class.forName(DB_DRIVER);
		c = DriverManager.getConnection(DB_CONNECTION);
	    stmt = c.createStatement();
	    String sql = "CREATE TABLE IF NOT EXISTS user (" + 
					"id TEXT PRIMARY KEY NOT NULL," + 
				    "username TEXT NOT NULL," + 
				    "firstname TEXT NOT NULL," + 
				    "lastname TEXT NOT NULL," + 
				    "passwrd TEXT NOT NULL," +
				    "enabled INTEGER  NOT NULL DEFAULT 1" +
				    ");";
		stmt.executeUpdate(sql);
		    
		sql = "CREATE TABLE IF NOT EXISTS activity (" +
		  			"id TEXT PRIMARY KEY NOT NULL,"+
		   			"description TEXT NOT NULL,"+
		   			"fromstamp TEXT NOT NULL,"+
		   			"tostamp TEXT NOT NULL,"+
		   			"user_id INTEGER NOT NULL,"+
		   			"FOREIGN KEY(user_id) REFERENCES user(id));";
		stmt.executeUpdate(sql);
			      		      
		sql = "CREATE TABLE IF NOT EXISTS user_roles (" + 
		      		"user_role_id INTEGER PRIMARY KEY NOT NULL," + 
		      		"username TEXT NOT NULL," + 
		      		"role TEXT NOT NULL," + 
		      		"UNIQUE (role, username)," +
		      		"FOREIGN KEY(username) REFERENCES user(username)" + 
		      		");";
		stmt.executeUpdate(sql);
		stmt.close();
		c.close();
	} catch ( Exception e ) {
		System.err.println( e.getClass().getName() + ": " + e.getMessage() );
		System.exit(0);
	}
	System.out.println("Created tables succesfully");
	[elseif (o.name='activityExists' or o.name='userExists')]
	Connection c = null;
	PreparedStatement stmt = null;
	int count = 0;
	try {
		Class.forName(DB_DRIVER);
		c = DriverManager.getConnection(DB_CONNECTION);
		c.setAutoCommit(false);
		[if(o.name='activityExists')]
		stmt = c.prepareStatement("SELECT count(*) from activity where ID=?");
		[elseif(o.name='userExists')]
		stmt = c.prepareStatement("SELECT count(*) from user where ID=?");
		[/if]
		stmt.setString(1, Long.toString(id));
		ResultSet rs = stmt.executeQuery();
		while(rs.next()){
			count = rs.getInt(1);
		}
		c.close();
	} catch (Exception e) {
		System.err.println(e.getClass().getName() + ": " + e.getMessage());
		System.exit(0);
	}
	return count != 0;
	[elseif(o.name='insertTestUsers')]
	User temp = findUserByUsername("lvo");
	if(temp == null)
	{
		try {
			User u = new User("lvo", "Lucas", "Van Overberghe", "passw");
			Date then = new Date();
			then.setSeconds(40);
			Activity activity = new Activity(1, "modeling shit", getTimestamp(new Date()), getTimestamp(then), u);
			u.addActivity(activity);
			insertUser(u);
			insertActivity(activity);
		} catch (Exception e) {
			System.err.println( e.getClass().getName() + ": " + e.getMessage() );
			System.exit(0);
		}
	}
	[elseif(o.name='findActivitiesOfUser')]
	Connection c = null;
	[o.returnResult().convertJavaDataType()/] rv = new HashSet<[o.returnResult().type.name/]>();
	try {
		Class.forName(DB_DRIVER);
		c = DriverManager.getConnection(DB_CONNECTION);
		c.createStatement();
		PreparedStatement ps = c.prepareStatement("SELECT * FROM activity where user_id = ?");
		ps.setString(1, Long.toString(user.getId()));
		ResultSet rs = ps.executeQuery();
		while (rs.next()) {
			[o.generateActivityTypesFindAll()/]
			rv.add([o.generateActivityConstructor()/]);  
		}
		rs.close();
		c.close();
	} catch (Exception e) {
		System.err.println(e.getClass().getName() + ": " + e.getMessage());
		System.exit(0);
	}
	return rv;
[/if]
}
[/template]

[template public generateUserTypesInsertUpdate(o : Operation)]
[if(o.name='updateUser')]
ps.setString(1, user.getUsername());
ps.setString(2, user.getFirstname());
ps.setString(3, user.getLastname());
ps.setString(4, user.getPassword());
ps.setString(5, Long.toString(user.getId()));
[else]
ps.setString(1, Long.toString(user.getId()));
ps.setString(2, user.getUsername());
ps.setString(3, user.getFirstname());
ps.setString(4, user.getLastname());
ps.setString(5, user.getPassword());
ps.setInt(6, 1);	
[/if]
[/template]

[template public generateActivityTypesInsertUpdate(o : Operation)]
[if(o.name='updateActivity')]
ps.setString(1, activity.getDescription());
ps.setString(2, activity.getFrom());
ps.setString(3, activity.getTo());
ps.setString(4, Long.toString(activity.getId()));
[else]
ps.setString(1, Long.toString(activity.getId()));
ps.setString(2, activity.getDescription());
ps.setString(3, activity.getFrom());
ps.setString(4, activity.getTo());
ps.setString(5, Long.toString(activity.getUser().getId()));
[/if]
[/template]

[template public generateActivityTypesFindAll(o : Operation)]
[if(o.name='findAllActivities')]rv.add([o.generateActivityConstructor()/]);[/if]
[/template]

[template public generateActivityConstructor(o : Operation)]
new Activity(rs.getLong(1), rs.getString(2), rs.getString(3), rs.getString(4), findUserById(Long.toString(rs.getLong(5))))
[/template]

