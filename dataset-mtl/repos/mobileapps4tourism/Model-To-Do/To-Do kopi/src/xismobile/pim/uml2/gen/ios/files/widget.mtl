[comment encoding = UTF-8 /]
[module widget('http://www.eclipse.org/uml2/4.0.0/UML')]
[import xismobile::pim::uml2::gen::ios::common::xisMobileUtils/]

[template public initializeWidget(c : Class) post (trim())]
TO DO!!!! Define all widgets!!! Call alloc init.
[comment][if (c.isXisLabel())
mLabel[c.name.toUpperFirst()/] = (XisLabel)findViewById(R.id.label[c.name.toUpperFirst()/]);

[elseif (c.isXisTextBox())]
mTextBox[c.name.toUpperFirst()/] = (XisTextBox)findViewById(R.id.textBox[c.name.toUpperFirst()/]);
[elseif (c.isXisCheckBox())]
mCheckBox[c.name.toUpperFirst()/] = (XisCheckBox)findViewById(R.id.checkBox[c.name.toUpperFirst()/]);
[elseif (c.isXisButton())]
mButton[c.name.toUpperFirst()/] = (XisButton)findViewById(R.id.button[c.name.toUpperFirst()/]);
[elseif (c.isXisLink())]
mLink[c.name.toUpperFirst()/] = (XisLink)findViewById(R.id.link[c.name.toUpperFirst()/]);
[elseif (c.isXisImage())]
mImage[c.name.toUpperFirst()/] = (XisImage)findViewById(R.id.image[c.name.toUpperFirst()/]);
[elseif (c.isXisDatePicker())]
mDatePicker[c.name.toUpperFirst()/] = (XisDatePicker)findViewById(R.id.datePicker[c.name.toUpperFirst()/]);
[elseif (c.isXisTimePicker())]
mTimePicker[c.name.toUpperFirst()/] = (XisTimePicker)findViewById(R.id.timePicker[c.name.toUpperFirst()/]);
[elseif (c.isXisWebView())]
mWebView[c.name.toUpperFirst()/] = (XisWebView)findViewById(R.id.web[c.name.toUpperFirst()/]);
[elseif (c.isXisMapView())]
SupportMapFragment mv = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map[c.name.toUpperFirst()/]);
mMap[c.name.toUpperFirst()/] = mv.getMap();

if (mMap[c.name.toUpperFirst()/] == null) {
	Toast.makeText(getApplicationContext(), "Unable to create mMap[c.name.toUpperFirst()/]!", Toast.LENGTH_SHORT).show();
} else {
	[if (c.mapHasCenter())]
	LatLng center = new LatLng([c.getMapLatitute()/], [c.getMapLongitude()/]);
	[if (c.mapHasZoom())]
	mMap[c.name.toUpperFirst()/].moveCamera(CameraUpdateFactory.newLatLngZoom(center, [c.getMapZoom()/]));
	[else]
	mMap[c.name.toUpperFirst()/].moveCamera(CameraUpdateFactory.newLatLng(center));
	[/if]
	[/if]
	[if (c.mapHasMarkers())]
	[for (m : Class | c.getMapMarkers())]
	[if (m.markerHasTitle() or m.markerHasDescription() or
		(m.markerHasLatitude() and m.markerHasLongitude()) or m.markerHasIcon())]
	MarkerOptions mOpt = new MarkerOptions();
	[if (m.markerHasTitle())]
	mOpt.title([m.getMarkerTitle()/]);
	[/if]
	[if (m.markerHasDescription())]
	mOpt.snippet([m.getMarkerDescription()/]);
	[/if]
	[if (m.markerHasLatitude() and m.markerHasLongitude())]
	mOpt.position(new LatLng([m.getMarkerLatitude()/], [m.getMarkerLongitude()/]));
	[/if]
	[if (m.markerHasIcon())]
	mOpt.icon(BitmapDescriptorFactory.fromAsset("[m.getMarkerIcon()/]"));
	[/if]
	mMap[c.name.toUpperFirst()/].addMarker(mOpt);
	[/if]
	
	[if (m.markerHasOnTap())]
	mMap[c.name.toUpperFirst()/].setOnInfoWindowClickListener(new OnInfoWindowClickListener() {
		@Override
		public void onInfoWindowClick(Marker marker) {
			
		}
	});
	[/if]
	[/for]
	[/if]
}
[/if][/comment]
[/template]

