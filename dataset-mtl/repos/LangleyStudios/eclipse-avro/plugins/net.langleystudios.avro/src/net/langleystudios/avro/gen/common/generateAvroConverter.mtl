[comment
/*******************************************************************************
 * Copyright (c) 2014 Langley Studios
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Langley Studios - initial API and implementation
 *******************************************************************************/
/]
[comment encoding = UTF-8 /]
[module generateAvroConverter('http://www.eclipse.org/emf/2002/Ecore')]

[template public generateConverter(anEPackage : EPackage) {
basePackage : String = getBasePackage();
avroPrefix : String = basePackage.concat('.avro.');
emfPrefix : String = basePackage.concat('.');
emfPackage : String = emfPrefix.concat(getPackage());
emfFactory : String = emfPrefix.concat(getFactory());
}]
[comment @main/]

[file ('ConvertEMFtoAvro.java', false, 'UTF-8')]
package [basePackage/].avro;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import net.langleystudios.avro.AvroEMFConverter;

import org.apache.avro.Schema;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;

[comment Main class definition /]
public class ConvertEMFtoAvro implements AvroEMFConverter {

public Schema getSchema() {
	List<Schema> schemaList = new ArrayList<Schema>();
[for (eclass: EClass | anEPackage.eClassifiers->filter(EClass))]
	schemaList.add([avroPrefix.concat(eclass.name)/].SCHEMA$);
[/for]	
	Schema unionSchema = Schema.createUnion(schemaList);
	return unionSchema;
}

public Object convertEObject(EObject eobject) {
[for (eclass: EClass | anEPackage.eClassifiers->filter(EClass))]
	if(eobject instanceof [emfPrefix.concat(eclass.name)/])
	{
		return convert[eclass.name/](([emfPrefix.concat(eclass.name)/])eobject);
	}
[/for]
	return null;
}

public Schema getSchema(EObject eobject) {
[for (eclass: EClass | anEPackage.eClassifiers->filter(EClass))]
	if(eobject instanceof [emfPrefix.concat(eclass.name)/])
	{
		return [avroPrefix.concat(eclass.name)/].getClassSchema();
	}
[/for]
	return null;
}

[for (eclass: EClass | anEPackage.eClassifiers->filter(EClass))]
public [avroPrefix.concat(eclass.name)/] convert[eclass.name/](
	[emfPrefix.concat(eclass.name)/] input) {

	[comment
		If the input is null, then return null 
	/]
	if(input == null)
	{
		return null;
	}
	[avroPrefix.concat(eclass.name)/] output = new [avroPrefix.concat(eclass.name)/]();

[for (aFeature: EStructuralFeature | eclass.eAllStructuralFeatures)]
[if( not aFeature.eType.name.equalsIgnoreCase('EFeatureMapEntry'))]
[if(aFeature.upperBound <> 1)]
	[comment]Handle array of non-containment references[/comment]
	[if(aFeature.oclIsTypeOf(EReference) and not aFeature.oclAsType(EReference).containment)]
		List<CharSequence> [aFeature.name/]List = new ArrayList<CharSequence>();
		for([emfPrefix.concat(aFeature.eType.name)/] itr : input.get[aFeature.name.toUpperFirst()/]()) {
			String uri = getURI(itr);
			[aFeature.name/]List.add(uri);
		}
		if([aFeature.name/]List.size() > 0)
		{
			output.set[aFeature.name.toUpperFirst()/]([aFeature.name/]List);
		} else {
			output.set[aFeature.name.toUpperFirst()/](null);
		}
	[comment]Now handle normal array[/comment]
	[else]
		List<[avroPrefix.concat(aFeature.eType.name)/]> [aFeature.name/]List = new ArrayList<[avroPrefix.concat(aFeature.eType.name)/]>();
		for([emfPrefix.concat(aFeature.eType.name)/] itr : input.get[aFeature.name.toUpperFirst()/]()) {
			[aFeature.name/]List.add(convert[aFeature.eType.name/](itr));
		}
		if([aFeature.name/]List.size() > 0)
		{
			output.set[aFeature.name.toUpperFirst()/]([aFeature.name/]List);
		} else {
			output.set[aFeature.name.toUpperFirst()/](null);
		}
	[/if]
[elseif(aFeature.oclIsTypeOf(EAttribute))]
	[if(aFeature.eType.oclIsTypeOf(EEnum))]
	if(input.get[aFeature.name.toUpperFirst()/]() != null) {
		output.set[aFeature.name.toUpperFirst()/]([avroPrefix.concat(aFeature.eType.name)/].valueOf(input.get[aFeature.name.toUpperFirst()/]().getLiteral()));
	}
	[elseif(aFeature.eType.name.equalsIgnoreCase('EBoolean'))]
	output.set[aFeature.name.toUpperFirst()/](input.is[aFeature.name.toUpperFirst()/]());
	[elseif(aFeature.eType.name.equalsIgnoreCase('EDate'))]
	if(input.get[aFeature.name.toUpperFirst()/]() != null) {
		output.set[aFeature.name.toUpperFirst()/](input.get[aFeature.name.toUpperFirst()/]().toString());
	}
	[else]
	output.set[aFeature.name.toUpperFirst()/](input.get[aFeature.name.toUpperFirst()/]());
	[/if]
[else]
	[comment]Handle non-containment references[/comment]
	[if(aFeature.oclIsTypeOf(EReference) and not aFeature.oclAsType(EReference).containment)]
	if(input.get[aFeature.name.toUpperFirst()/]() != null)
	{
		String uri = getURI(input.get[aFeature.name.toUpperFirst()/]());
		output.set[aFeature.name.toUpperFirst()/](uri);
	}
	[else]
	output.set[aFeature.name.toUpperFirst()/](convert[aFeature.eType.name/](input.get[aFeature.name.toUpperFirst()/]()));
	[/if]
[/if]
[/if]

[/for]

	return output;
}

[/for]

public EObject convertAvroObject(Object object) {
[for (eclass: EClass | anEPackage.eClassifiers->filter(EClass))]
[if (eclass.abstract = false)]
	if(object instanceof [avroPrefix.concat(eclass.name)/])
	{
		return convert[eclass.name/](([avroPrefix.concat(eclass.name)/])object);
	}
[/if]
[/for]
	return null;
}

[for (eclass: EClass | anEPackage.eClassifiers->filter(EClass))]
[if (eclass.abstract = false)]
public [emfPrefix.concat(eclass.name)/] convert[eclass.name/](
	[avroPrefix.concat(eclass.name)/] input) {

	[emfPrefix.concat(eclass.name)/] output = [emfFactory/].eINSTANCE.create[eclass.name/]();

[for (aFeature: EStructuralFeature | eclass.eAllStructuralFeatures)]
[if( not aFeature.eType.name.equalsIgnoreCase('EFeatureMapEntry'))]
	if(input.get[aFeature.name.toUpperFirst()/]() != null) {
[if(aFeature.upperBound <> 1)]
	[if(aFeature.oclIsTypeOf(EReference) and not aFeature.oclAsType(EReference).containment)]
	EList<[emfPrefix.concat(aFeature.eType.name)/]> [aFeature.name/]List = output.get[aFeature.name.toUpperFirst()/]();
	for(CharSequence itr : input.get[aFeature.name.toUpperFirst()/]()) {
		[emfPrefix.concat(aFeature.eType.name)/] [aFeature.name/]Proxy = 
			([emfPrefix.concat(aFeature.eType.name)/])getEObject(itr.toString());
		[aFeature.name/]List.add([aFeature.name/]Proxy);
	}
	[else]
	EList<[emfPrefix.concat(aFeature.eType.name)/]> [aFeature.name/]List = output.get[aFeature.name.toUpperFirst()/]();
	for([avroPrefix.concat(aFeature.eType.name)/] itr : input.get[aFeature.name.toUpperFirst()/]()) {
		[aFeature.name/]List.add(([emfPrefix.concat(aFeature.eType.name)/])convertAvroObject(itr));
	}
	[/if]
[elseif(aFeature.oclIsTypeOf(EAttribute))]
	[if(aFeature.eType.oclIsTypeOf(EEnum))]
	output.set[aFeature.name.toUpperFirst()/]([emfPrefix.concat(aFeature.eType.name)/].get(input.get[aFeature.name.toUpperFirst()/]().name()));
	[elseif(aFeature.eType.name.equalsIgnoreCase('EBoolean'))]
	output.set[aFeature.name.toUpperFirst()/](input.get[aFeature.name.toUpperFirst()/]());
	[elseif(aFeature.eType.name.equalsIgnoreCase('EDate'))]
	try {
		Date [aFeature.name/]Date = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH).parse(input.get[aFeature.name.toUpperFirst()/]().toString());
		output.set[aFeature.name.toUpperFirst()/]([aFeature.name/]Date);
	} catch(ParseException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	[elseif(aFeature.eType.name.equalsIgnoreCase('EString'))]
	output.set[aFeature.name.toUpperFirst()/](input.get[aFeature.name.toUpperFirst()/]().toString());
	[else]
	output.set[aFeature.name.toUpperFirst()/](input.get[aFeature.name.toUpperFirst()/]());
	[/if]
[else]
	[comment]Handle non-containment references[/comment]
	[if(aFeature.oclIsTypeOf(EReference) and not aFeature.oclAsType(EReference).containment)]
	[emfPrefix.concat(aFeature.eType.name)/] [aFeature.name/]Proxy = 
		([emfPrefix.concat(aFeature.eType.name)/])getEObject(input.get[aFeature.name.toUpperFirst()/]().toString());
	output.set[aFeature.name.toUpperFirst()/]([aFeature.name/]Proxy);
	[else]
	output.set[aFeature.name.toUpperFirst()/](convert[aFeature.eType.name/](input.get[aFeature.name.toUpperFirst()/]()));
	[/if]
[/if]
	}
[/if]
[/for]

	return output;
}
[/if]
[/for]

	private EObject getEObject(String input) {
		EObject rvalue = null;
		String['['/][']'/] pieces = input.split(" ");
		if (pieces.length == 3) {
			String ns = pieces['['/]0[']'/];
			String className = pieces['['/]1[']'/];
			String fragment = pieces['['/]2[']'/];
			EPackage pkg = EPackage.Registry.INSTANCE.getEPackage(ns);
			if (pkg != null) {
				EClassifier classifier = pkg.getEClassifier(className);
				if (classifier instanceof EClass) {
					InternalEObject eobject = (InternalEObject) EcoreUtil
							.create((EClass) classifier);
					URI uri = URI.createURI(fragment);
					eobject.eSetProxyURI(uri);
					rvalue = eobject;
				}
			}
		}
		return rvalue;
	}

	private StringBuilder builder = new StringBuilder();
	private String getURI(EObject eobject) {
		if(eobject.eResource() == null)
		{
			throw new NullPointerException("child object not contained in a resource");
		}
		builder.setLength(0);
		builder.append(eobject.eClass().getEPackage().getNsURI());
		builder.append(" ");
		builder.append(eobject.eClass().getName());
		builder.append(" ");
		builder.append(EcoreUtil.getURI(eobject));
		return builder.toString();
	}

}
[/file]

[/template]

[query public getBasePackage(tracecontext : OclAny) : EString
	= invoke('net.langleystudios.avro.gen.Utility', 'getBasePackage()', Sequence{tracecontext})
/]
[query public getPackage(tracecontext : OclAny) : EString
	= invoke('net.langleystudios.avro.gen.Utility', 'getPackage()', Sequence{tracecontext})
/]
[query public getFactory(tracecontext : OclAny) : EString
	= invoke('net.langleystudios.avro.gen.Utility', 'getFactory()', Sequence{tracecontext})
/]
