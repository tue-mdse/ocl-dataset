[comment encoding = UTF-8 /]
[module processor_h('/PML/model/pml.ecore')]
[import PMLGen::generator::pmlutil /]

[template public generateElement(c : Processor)]
	[file (c.name.concat('_untimed.h'), false, 'UTF-8')]
	#ifndef [c.name.concat('_h')/]
	#define  [c.name.concat('_h')/]
	#include "systemc.h"
	
	SC_MODULE([c.name/]){

		sc_in_clk clock;
		
		Channel *canal;
		[for (p : ControlUnit | c.controlUnits)]
	       [p.name/] *[p.name.toLower()/]_;
	    [/for]
	 	[for (p : ULA | c.ulas)]
	       [p.name/] *[p.name.toLower()/]_;
	    [/for]
	 	[for (p : Demultiplexor | c.demux)]
	       [p.name/] *[p.name.toLower()/]_;
	    [/for]
	 	[for (p : Decoder | c.decoders)]
	       [p.name/] *[p.name.toLower()/]_;
	    [/for]
	 	[for (p : Multiplexor | c.mux)]
	       [p.name/] *[p.name.toLower()/]_;
	    [/for]
	 	[for (p : Memory | c.memories)]
	       [p.name/] *[p.name.toLower()/]_;
	    [/for]
	 	[for (p : Register | c.registers)]
	       [p.name/] *[p.name.toLower()/]_;
	    [/for]
		SC_CTOR([c.name/]) {
		[for (p : ControlUnit | c.controlUnits)]
	       [p.name.toLower()/]_ = new  [p.name/]();
	    [/for]
	 	[for (p : ULA | c.ulas)]
	        [p.name.toLower()/]_ = new  [p.name/]();
	    [/for]
	 	[for (p : Demultiplexor | c.demux)]
	        [p.name.toLower()/]_ = new  [p.name/]();
	    [/for]
	 	[for (p : Decoder | c.decoders)]
	        [p.name.toLower()/]_ = new  [p.name/]();
	    [/for]
	 	[for (p : Multiplexor | c.mux)]
	        [p.name.toLower()/]_ = new  [p.name/]();
	    [/for]
	 	[for (p : Memory | c.memories)]
	        [p.name.toLower()/]_ = new  [p.name/]();
	    [/for]
	 	[for (p : Register | c.registers)]
	        [p.name.toLower()/]_ = new  [p.name/]();
	    [/for]
		Channel canal =  new Channel("canal");
		[for (p : ControlUnit | c.controlUnits)]
	       [p.name.toLower()/]_->in(canal);
	       [p.name.toLower()/]_->out(canal);
	    [/for]
	 	[for (p : ULA | c.ulas)]
	       [p.name.toLower()/]_->in(canal);
	       [p.name.toLower()/]_->out(canal);
	    [/for]
	 	[for (p : Demultiplexor | c.demux)]
	       [p.name.toLower()/]_->in(canal);
	       [p.name.toLower()/]_->out(canal);
	    [/for]
	 	[for (p : Decoder | c.decoders)]
	       [p.name.toLower()/]_->in(canal);
	       [p.name.toLower()/]_->out(canal);
	    [/for]
	 	[for (p : Multiplexor | c.mux)]
	       [p.name.toLower()/]_->in(canal);
	       [p.name.toLower()/]_->out(canal);
	    [/for]
	 	[for (p : Memory | c.memories)]
	       [p.name.toLower()/]_->in(canal);
	       [p.name.toLower()/]_->out(canal);
	    [/for]
	 	[for (p : Register | c.registers)]
	       [p.name.toLower()/]_->in(canal);
	       [p.name.toLower()/]_->out(canal);
	    [/for]
        }       
	};
	#endif
[/file]

	[file (c.name.concat('_channel.h'), false, 'UTF-8')]
	#ifndef [c.name.concat('_channel_h')/]
	#define  [c.name.concat('_channel_h')/]
	#include "systemc.h"
	
class [c.name.concat('_channel')/] : public sc_channel, public write_if, public read_if
{
public:
    [c.name.concat('_channel')/](sc_module_name name) : sc_channel(name)
      [for (p : ControlUnit | c.controlUnits)]
	       void [p.name.toLower()/]_in(){}
	       void [p.name.toLower()/]_out(){}
	    [/for]
	 	[for (p : ULA | c.ulas)]
	       void [p.name.toLower()/]_in(){}
	       void [p.name.toLower()/]_out(){}
	    [/for]
	 	[for (p : Demultiplexor | c.demux)]
	       void [p.name.toLower()/]_in(){}
	       void [p.name.toLower()/]_out(){}
	    [/for]
	 	[for (p : Decoder | c.decoders)]
	       void [p.name.toLower()/]_in(){}
	       void [p.name.toLower()/]_out(){}
	    [/for]
	 	[for (p : Multiplexor | c.mux)]
	       void [p.name.toLower()/]_in(){}
	       void [p.name.toLower()/]_out(){}
	    [/for]
	 	[for (p : Memory | c.memories)]
	       void [p.name.toLower()/]_in(){}
	       void [p.name.toLower()/]_out(){}
	    [/for]
	 	[for (p : Register | c.registers)]
	       void [p.name.toLower()/]_in(){}
	       void [p.name.toLower()/]_out(){}
		[/for]
private:
    
    [for (p : ControlUnit | c.controlUnits)]
	       sc_event [p.name.toLower()/]_in;
	       sc_event [p.name.toLower()/]_out;
	    [/for]
	 	[for (p : ULA | c.ulas)]
	       sc_event [p.name.toLower()/]_in;
	       sc_event [p.name.toLower()/]_out;
	    [/for]
	 	[for (p : Demultiplexor | c.demux)]
	       sc_event [p.name.toLower()/]_in;
	       sc_event [p.name.toLower()/]_out;
	    [/for]
	 	[for (p : Decoder | c.decoders)]
	       sc_event [p.name.toLower()/]_in;
	       sc_event [p.name.toLower()/]_out;
	    [/for]
	 	[for (p : Multiplexor | c.mux)]
	       sc_event [p.name.toLower()/]_in;
	       sc_event [p.name.toLower()/]_out;
	    [/for]
	 	[for (p : Memory | c.memories)]
	       sc_event [p.name.toLower()/]_in;
	       sc_event [p.name.toLower()/]_out;
	    [/for]
	 	[for (p : Register | c.registers)]
	       sc_event [p.name.toLower()/]_in;
	       sc_event [p.name.toLower()/]_out;
		[/for]
};

[/file]

[file (c.name.concat('_untimed_2.h'), false, 'UTF-8')]
	#ifndef [c.name.concat('_h')/]
	#define  [c.name.concat('_h')/]
	#include "systemc.h"
	
	SC_MODULE([c.name/]){

		sc_in_clk clock;
		
		Channel *canal;
		[for (p : ControlUnit | c.controlUnits)]
	       [p.name/] *[p.name.toLower()/]_;
	    [/for]
	 	[for (p : ULA | c.ulas)]
	       [p.name/] *[p.name.toLower()/]_;
	    [/for]
	 	[for (p : Memory | c.memories)]
	       [p.name/] *[p.name.toLower()/]_;
	    [/for]
	 	SC_CTOR([c.name/]) {
		[for (p : ControlUnit | c.controlUnits)]
	       [p.name.toLower()/]_ = new  [p.name/]();
	    [/for]
	 	[for (p : ULA | c.ulas)]
	        [p.name.toLower()/]_ = new  [p.name/]();
	    [/for]
	 	[for (p : Memory | c.memories)]
	        [p.name.toLower()/]_ = new  [p.name/]();
	    [/for]
	 	Channel canal =  new Channel("canal");
		[for (p : ControlUnit | c.controlUnits)]
	       [p.name.toLower()/]_->in(canal);
	       [p.name.toLower()/]_->out(canal);
	    [/for]
	 	[for (p : ULA | c.ulas)]
	       [p.name.toLower()/]_->in(canal);
	       [p.name.toLower()/]_->out(canal);
	    [/for]
	 	[for (p : Memory | c.memories)]
	       [p.name.toLower()/]_->in(canal);
	       [p.name.toLower()/]_->out(canal);
	    [/for]
	    }       
	};
	#endif
[/file]


	[file (c.name.concat('_timed.h'), false, 'UTF-8')]
	#ifndef [c.name.concat('_h')/]
	#define  [c.name.concat('_h')/]
	#include "systemc.h"
	
	SC_MODULE([c.name/]){

		sc_in_clk clock;
		[processSignal(c)  /]	
		[for (p : SignalEvent | c.processorSignalEvents)]
			sc_signal< sc_ > > [p.name /];
				
			
		[/for]		
	 	[for (p : ControlUnit | c.controlUnits)]
	       [p.name/] *[p.name.toLower()/]_;
	    [/for]
	 	[for (p : ULA | c.ulas)]
	       [p.name/] *[p.name.toLower()/]_;
	    [/for]
	 	[for (p : Demultiplexor | c.demux)]
	       [p.name/] *[p.name.toLower()/]_;
	    [/for]
	 	[for (p : Decoder | c.decoders)]
	       [p.name/] *[p.name.toLower()/]_;
	    [/for]
	 	[for (p : Multiplexor | c.mux)]
	       [p.name/] *[p.name.toLower()/]_;
	    [/for]
	 	[for (p : Memory | c.memories)]
	       [p.name/] *[p.name.toLower()/]_;
	    [/for]
	 	[for (p : Register | c.registers)]
	       [p.name/] *[p.name.toLower()/]_;
	    [/for]
		SC_CTOR([c.name/]) {
		[for (p : ControlUnit | c.controlUnits)]
	       [p.name.toLower()/]_ = new  [p.name/]();
	    [/for]
	 	[for (p : ULA | c.ulas)]
	        [p.name.toLower()/]_ = new  [p.name/]();
	    [/for]
	 	[for (p : Demultiplexor | c.demux)]
	        [p.name.toLower()/]_ = new  [p.name/]();
	    [/for]
	 	[for (p : Decoder | c.decoders)]
	        [p.name.toLower()/]_ = new  [p.name/]();
	    [/for]
	 	[for (p : Multiplexor | c.mux)]
	        [p.name.toLower()/]_ = new  [p.name/]();
	    [/for]
	 	[for (p : Memory | c.memories)]
	        [p.name.toLower()/]_ = new  [p.name/]();
	    [/for]
	 	[for (p : Register | c.registers)]
	        [p.name.toLower()/]_ = new  [p.name/]();
	    [/for]
        }       
	};
	#endif
[/file]
[/template]
