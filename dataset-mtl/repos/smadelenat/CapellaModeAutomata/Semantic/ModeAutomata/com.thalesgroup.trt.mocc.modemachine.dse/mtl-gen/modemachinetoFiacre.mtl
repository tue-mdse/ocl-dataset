[comment encoding = UTF-8 /]

[module generate('http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation', 
	'http://www.eclipse.org/emf/2002/Ecore', 
	'http://org.gemoc.moccml/1.0', 
	'http://fr.inria.aoste.timemodel',
	'http://org.gemoc.moccml.fsmmodel/1.0',
	'http://www.eclipse.org/xtend', 
	'http://www.eclipse.org/xtend/RichString', 
	'http://www.eclipse.org/xtext/xbase/Xbase',
	'http://www.polarsys.org/capella/core/modeller/0.8.0','http://www.polarsys.org/capella/core/cs/0.8.0','http://www.polarsys.org/capella/core/information/0.8.0','http://www.polarsys.org/kitalpha/emde/1.0.0','http://www.thalesgroup.com/trt/time/1.0.0','http://www.thalesgroup.com/trt/mode/1.0.0','http://www.thalesgroup.com/trt/expression/1.0.0','http://www.thalesgroup.com/trt/al/1.0.0','http://www.thalesgroup.com/trt/modesimulation/1.0.0','http://www.polarsys.org/capella/common/behavior/0.8.0','http://www.polarsys.org/capella/core/fa/0.8.0','http://www.polarsys.org/capella/core/ctx/0.8.0') ]
[template public generate(aProject : Project)]
[comment @main/]
[file (aProject.name+'_FiacreProcess.fcr', false, 'UTF-8')]
// *********************** Type Declaration ******************************/



process pUnConstrainedSemantics['['/][']'/] is
	states s0

[file ('pUnConstrainedSemantics.fcr', false, 'UTF-8')]
process pUnConstrainedSemantics['['/][']'/] is
	
	states s0
[/file]
/******************** Process Parallelization for Project******************/
component sys is

var 
	global : SystemDataRoot,
    ID: int := 0
	//global : SystemDataRoot := INITIAL_Configuration

port


par

pUnConstrainedSemantics['['/][']'/]
end par
sys 



process pUnConstrainedSemantics['['/][']'/] is
	states s0

[file ('pUnConstrainedSemantics.fcr', false, 'UTF-8')]
process pUnConstrainedSemantics['['/][']'/] is
	
	states s0
[/file]
/******************** Process Parallelization for Project******************/
component sys is

var 
	global : SystemDataRoot,
    ID: int := 0
	//global : SystemDataRoot := INITIAL_Configuration

port


par

pUnConstrainedSemantics['['/][']'/]
end par
sys 



process pUnConstrainedSemantics['['/][']'/] is
	states s0

[file ('pUnConstrainedSemantics.fcr', false, 'UTF-8')]
process pUnConstrainedSemantics['['/][']'/] is
	
	states s0
[/file]
/******************** Process Parallelization for Project******************/
component sys is

var 
	global : SystemDataRoot,
    ID: int := 0
	//global : SystemDataRoot := INITIAL_Configuration

port


par

pUnConstrainedSemantics['['/][']'/]
end par
sys 



process pUnConstrainedSemantics['['/][']'/] is
	states s0

[file ('pUnConstrainedSemantics.fcr', false, 'UTF-8')]
process pUnConstrainedSemantics['['/][']'/] is
	
	states s0
[/file]
/******************** Process Parallelization for Project******************/
component sys is

var 
	global : SystemDataRoot,
    ID: int := 0
	//global : SystemDataRoot := INITIAL_Configuration

port


par

pUnConstrainedSemantics['['/][']'/]
end par
sys 



/*********************************************************************
Defining the Functions for : Clock
**********************************************************************/
process pUnConstrainedSemantics['['/][for (element : Clock| aProject.eAllContents(Clock))]
[element.name/]_ticks:out none,[/for][']'/] is
	states s0
[for (element : Clock| aProject.eAllContents(Clock))]
    from s0  [element.name/]_ticks;  to s0

[/for]

[file ('pUnConstrainedSemantics.fcr', false, 'UTF-8')]
process pUnConstrainedSemantics['['/][for (element : Clock| aProject.eAllContents(Clock))]
[element.name/]_ticks:out none,[/for][']'/] is
	
	states s0
[for (element : Clock| aProject.eAllContents(Clock))]
    from s0  [element.name/]_ticks;  to s0

[/for]
[/file]
/******************** Process Parallelization for Project******************/
component sys is

var 
	global : SystemDataRoot,
    ID: int := 0
	//global : SystemDataRoot := INITIAL_Configuration

port
[for (element : Clock| aProject.eAllContents(Clock))]
[element.name/]_ticks: none,
[/for]

par

pUnConstrainedSemantics['['/][for (element : Clock| aProject.eAllContents(Clock))]
[element.name/]_ticks,[/for][']'/]
[for (element : Clock| aProject.eAllContents(Clock))]
|| p[element.name/] ['['/][element.name/]_ticks[']'/] (&global, ID)
[/for]
end par
sys 



/*********************************************************************
Defining the Functions for : AbstractMode
**********************************************************************/
/*********************************************************************
Defining the Functions for : ModeMachine
**********************************************************************/
/*********************************************************************
Defining the Functions for : Transition
**********************************************************************/
process pUnConstrainedSemantics['['/][for (element : AbstractMode| aProject.eAllContents(AbstractMode))]
[element.name/]_entering:out none,[element.name/]_leaving:out none,[/for][for (element : ModeMachine| aProject.eAllContents(ModeMachine))]
[element.name/]_start:out none,[element.name/]_anyEventOrTime:out none,[/for][for (element : Transition| aProject.eAllContents(Transition))]
[element.name/]_fire:out none,[element.name/]_reset:out none,[element.name/]_evaluate:out none,[element.name/]_evaluatedTrue:out none,[element.name/]_evaluatedFalse:out none,[/for][']'/] is
	states s0
[for (element : AbstractMode| aProject.eAllContents(AbstractMode))]
    from s0  [element.name/]_entering;  to s0
    from s0  [element.name/]_leaving;  to s0

[/for]
[for (element : ModeMachine| aProject.eAllContents(ModeMachine))]
    from s0  [element.name/]_start;  to s0
    from s0  [element.name/]_anyEventOrTime;  to s0

[/for]
[for (element : Transition| aProject.eAllContents(Transition))]
    from s0  [element.name/]_fire;  to s0
    from s0  [element.name/]_reset;  to s0
    from s0  [element.name/]_evaluate;  to s0
    from s0  [element.name/]_evaluatedTrue;  to s0
    from s0  [element.name/]_evaluatedFalse;  to s0

[/for]

[file ('pUnConstrainedSemantics.fcr', false, 'UTF-8')]
process pUnConstrainedSemantics['['/][for (element : AbstractMode| aProject.eAllContents(AbstractMode))]
[element.name/]_entering:out none,[element.name/]_leaving:out none,[/for][for (element : ModeMachine| aProject.eAllContents(ModeMachine))]
[element.name/]_start:out none,[element.name/]_anyEventOrTime:out none,[/for][for (element : Transition| aProject.eAllContents(Transition))]
[element.name/]_fire:out none,[element.name/]_reset:out none,[element.name/]_evaluate:out none,[element.name/]_evaluatedTrue:out none,[element.name/]_evaluatedFalse:out none,[/for][']'/] is
	
	states s0
[for (element : AbstractMode| aProject.eAllContents(AbstractMode))]
    from s0  [element.name/]_entering;  to s0
    from s0  [element.name/]_leaving;  to s0

[/for]
[for (element : ModeMachine| aProject.eAllContents(ModeMachine))]
    from s0  [element.name/]_start;  to s0
    from s0  [element.name/]_anyEventOrTime;  to s0

[/for]
[for (element : Transition| aProject.eAllContents(Transition))]
    from s0  [element.name/]_fire;  to s0
    from s0  [element.name/]_reset;  to s0
    from s0  [element.name/]_evaluate;  to s0
    from s0  [element.name/]_evaluatedTrue;  to s0
    from s0  [element.name/]_evaluatedFalse;  to s0

[/for]
[/file]
/******************** Process Parallelization for Project******************/
component sys is

var 
	global : SystemDataRoot,
    ID: int := 0
	//global : SystemDataRoot := INITIAL_Configuration

port
[for (element : AbstractMode| aProject.eAllContents(AbstractMode))]
[element.name/]_entering: none,[element.name/]_leaving: none,

[/for][for (element : ModeMachine| aProject.eAllContents(ModeMachine))]
[element.name/]_start: none,[element.name/]_anyEventOrTime: none,

[/for][for (element : Transition| aProject.eAllContents(Transition))]
[element.name/]_fire: none,[element.name/]_reset: none,[element.name/]_evaluate: none,[element.name/]_evaluatedTrue: none,[element.name/]_evaluatedFalse: none,

[/for]

par

pUnConstrainedSemantics['['/][for (element : AbstractMode| aProject.eAllContents(AbstractMode))]
[element.name/]_entering,[element.name/]_leaving,[/for][for (element : ModeMachine| aProject.eAllContents(ModeMachine))]
[element.name/]_start,[element.name/]_anyEventOrTime,[/for][for (element : Transition| aProject.eAllContents(Transition))]
[element.name/]_fire,[element.name/]_reset,[element.name/]_evaluate,[element.name/]_evaluatedTrue,[element.name/]_evaluatedFalse,[/for][']'/]
[for (element : AbstractMode| aProject.eAllContents(AbstractMode))]
|| p[element.name/] ['['/][element.name/]_entering,[element.name/]_leaving[']'/] (&global, ID)
[/for]
[for (element : ModeMachine| aProject.eAllContents(ModeMachine))]
|| p[element.name/] ['['/][element.name/]_start,[element.name/]_anyEventOrTime[']'/] (&global, ID)
[/for]
[for (element : Transition| aProject.eAllContents(Transition))]
|| p[element.name/] ['['/][element.name/]_fire,[element.name/]_reset,[element.name/]_evaluate,[element.name/]_evaluatedTrue,[element.name/]_evaluatedFalse[']'/] (&global, ID)
[/for]
end par
sys 



/*********************************************************************
Defining the Functions for : EventExpression
**********************************************************************/
/*********************************************************************
Defining the Functions for : EventBinaryExpression
**********************************************************************/
/*********************************************************************
Defining the Functions for : EventUnaryExpression
**********************************************************************/
process pUnConstrainedSemantics['['/][for (element : EventExpression| aProject.eAllContents(EventExpression))]
[element.name/]_occurs:out none,[/for][for (element : EventBinaryExpression| aProject.eAllContents(EventBinaryExpression))]
[/for][for (element : EventUnaryExpression| aProject.eAllContents(EventUnaryExpression))]
[/for][']'/] is
	states s0
[for (element : EventExpression| aProject.eAllContents(EventExpression))]
    from s0  [element.name/]_occurs;  to s0

[/for]
[for (element : EventBinaryExpression| aProject.eAllContents(EventBinaryExpression))]

[/for]
[for (element : EventUnaryExpression| aProject.eAllContents(EventUnaryExpression))]

[/for]

[file ('pUnConstrainedSemantics.fcr', false, 'UTF-8')]
process pUnConstrainedSemantics['['/][for (element : EventExpression| aProject.eAllContents(EventExpression))]
[element.name/]_occurs:out none,[/for][for (element : EventBinaryExpression| aProject.eAllContents(EventBinaryExpression))]
[/for][for (element : EventUnaryExpression| aProject.eAllContents(EventUnaryExpression))]
[/for][']'/] is
	
	states s0
[for (element : EventExpression| aProject.eAllContents(EventExpression))]
    from s0  [element.name/]_occurs;  to s0

[/for]
[for (element : EventBinaryExpression| aProject.eAllContents(EventBinaryExpression))]

[/for]
[for (element : EventUnaryExpression| aProject.eAllContents(EventUnaryExpression))]

[/for]
[/file]
/******************** Process Parallelization for Project******************/
component sys is

var 
	global : SystemDataRoot,
    ID: int := 0
	//global : SystemDataRoot := INITIAL_Configuration

port
[for (element : EventExpression| aProject.eAllContents(EventExpression))]
[element.name/]_occurs: none,
[/for][for (element : EventBinaryExpression| aProject.eAllContents(EventBinaryExpression))]

[/for][for (element : EventUnaryExpression| aProject.eAllContents(EventUnaryExpression))]

[/for]

par

pUnConstrainedSemantics['['/][for (element : EventExpression| aProject.eAllContents(EventExpression))]
[element.name/]_occurs,[/for][for (element : EventBinaryExpression| aProject.eAllContents(EventBinaryExpression))]
,[/for][for (element : EventUnaryExpression| aProject.eAllContents(EventUnaryExpression))]
,[/for][']'/]
[for (element : EventExpression| aProject.eAllContents(EventExpression))]
|| p[element.name/] ['['/][element.name/]_occurs[']'/] (&global, ID)
[/for]
[for (element : EventBinaryExpression| aProject.eAllContents(EventBinaryExpression))]
|| p[element.name/] ['['/][']'/] (&global, ID)
[/for]
[for (element : EventUnaryExpression| aProject.eAllContents(EventUnaryExpression))]
|| p[element.name/] ['['/][']'/] (&global, ID)
[/for]
end par
sys 



process pUnConstrainedSemantics['['/][']'/] is
	states s0

[file ('pUnConstrainedSemantics.fcr', false, 'UTF-8')]
process pUnConstrainedSemantics['['/][']'/] is
	
	states s0
[/file]
/******************** Process Parallelization for Project******************/
component sys is

var 
	global : SystemDataRoot,
    ID: int := 0
	//global : SystemDataRoot := INITIAL_Configuration

port


par

pUnConstrainedSemantics['['/][']'/]
end par
sys 



process pUnConstrainedSemantics['['/][']'/] is
	states s0

[file ('pUnConstrainedSemantics.fcr', false, 'UTF-8')]
process pUnConstrainedSemantics['['/][']'/] is
	
	states s0
[/file]
/******************** Process Parallelization for Project******************/
component sys is

var 
	global : SystemDataRoot,
    ID: int := 0
	//global : SystemDataRoot := INITIAL_Configuration

port


par

pUnConstrainedSemantics['['/][']'/]
end par
sys 



/*********************************************************************
Defining the Functions for : AbstractEvent
**********************************************************************/
process pUnConstrainedSemantics['['/][for (element : AbstractEvent| aProject.eAllContents(AbstractEvent))]
[element.name/]_occurs:out none,[/for][']'/] is
	states s0
[for (element : AbstractEvent| aProject.eAllContents(AbstractEvent))]
    from s0  [element.name/]_occurs;  to s0

[/for]

[file ('pUnConstrainedSemantics.fcr', false, 'UTF-8')]
process pUnConstrainedSemantics['['/][for (element : AbstractEvent| aProject.eAllContents(AbstractEvent))]
[element.name/]_occurs:out none,[/for][']'/] is
	
	states s0
[for (element : AbstractEvent| aProject.eAllContents(AbstractEvent))]
    from s0  [element.name/]_occurs;  to s0

[/for]
[/file]
/******************** Process Parallelization for Project******************/
component sys is

var 
	global : SystemDataRoot,
    ID: int := 0
	//global : SystemDataRoot := INITIAL_Configuration

port
[for (element : AbstractEvent| aProject.eAllContents(AbstractEvent))]
[element.name/]_occurs: none,
[/for]

par

pUnConstrainedSemantics['['/][for (element : AbstractEvent| aProject.eAllContents(AbstractEvent))]
[element.name/]_occurs,[/for][']'/]
[for (element : AbstractEvent| aProject.eAllContents(AbstractEvent))]
|| p[element.name/] ['['/][element.name/]_occurs[']'/] (&global, ID)
[/for]
end par
sys 



process pUnConstrainedSemantics['['/][']'/] is
	states s0

[file ('pUnConstrainedSemantics.fcr', false, 'UTF-8')]
process pUnConstrainedSemantics['['/][']'/] is
	
	states s0
[/file]
/******************** Process Parallelization for Project******************/
component sys is

var 
	global : SystemDataRoot,
    ID: int := 0
	//global : SystemDataRoot := INITIAL_Configuration

port


par

pUnConstrainedSemantics['['/][']'/]
end par
sys 



/*********************************************************************
Defining the Functions for : System
**********************************************************************/
process pUnConstrainedSemantics['['/][for (element : System| aProject.eAllContents(System))]
[element.name/]_start:out none,[/for][']'/] is
	states s0
[for (element : System| aProject.eAllContents(System))]
    from s0  [element.name/]_start;  to s0

[/for]

[file ('pUnConstrainedSemantics.fcr', false, 'UTF-8')]
process pUnConstrainedSemantics['['/][for (element : System| aProject.eAllContents(System))]
[element.name/]_start:out none,[/for][']'/] is
	
	states s0
[for (element : System| aProject.eAllContents(System))]
    from s0  [element.name/]_start;  to s0

[/for]
[/file]
/******************** Process Parallelization for Project******************/
component sys is

var 
	global : SystemDataRoot,
    ID: int := 0
	//global : SystemDataRoot := INITIAL_Configuration

port
[for (element : System| aProject.eAllContents(System))]
[element.name/]_start: none,
[/for]

par

pUnConstrainedSemantics['['/][for (element : System| aProject.eAllContents(System))]
[element.name/]_start,[/for][']'/]
[for (element : System| aProject.eAllContents(System))]
|| p[element.name/] ['['/][element.name/]_start[']'/] (&global, ID)
[/for]
end par
sys 
[/file]
[/template]
