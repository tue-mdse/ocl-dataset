[comment encoding = UTF-8 /]

[module generate('http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation', 
	'http://www.eclipse.org/emf/2002/Ecore', 
	'http://org.gemoc.moccml/1.0', 
	'http://fr.inria.aoste.timemodel',
	'http://org.gemoc.moccml.fsmmodel/1.0',
	'http://www.polarsys.org/capella/core/modeller/0.8.0','http://www.polarsys.org/capella/core/cs/0.8.0','http://www.polarsys.org/capella/core/information/0.8.0','http://www.polarsys.org/kitalpha/emde/1.0.0','http://www.thalesgroup.com/trt/time/1.0.0','http://www.thalesgroup.com/trt/mode/1.0.0','http://www.thalesgroup.com/trt/expression/1.0.0','http://www.thalesgroup.com/trt/al/1.0.0','http://www.thalesgroup.com/trt/modesimulation/1.0.0','http://www.polarsys.org/capella/common/behavior/0.8.0','http://www.polarsys.org/capella/core/fa/0.8.0','http://www.polarsys.org/capella/core/ctx/0.8.0') ]

[template public generate(aProject : Project)]
[comment @main/]
[file (aProject.name+'_withMoC-SMCubeMoCC.clocksystem', false, 'UTF-8')]

"Some global constants"
|system moccmllibs ccsllibs|
"MoCCML librairies specifications" 
moccmllibs:={ #SMCubeMoCC -> {
		#JoinGuardedTrueAndFalseDef -> ['['/]:s   :JGTF_evaluate :JGTF_initiatorTorF :JGTF_joinTransitionTorF :JGTF_Reset|
	
				s caseOf: {
							['['/]0[']'/] -> ['['/]{
								0 -> 1 when: {} 
							}[']'/]..

							['['/]2[']'/] -> ['['/]{
								2 -> 1 when: {JGTF_initiatorTorF. JGTF_joinTransitionTorF}. 
								2 -> 1 when: {JGTF_initiatorTorF. JGTF_joinTransitionTorF. JGTF_Reset} 
							}
							[']'/].

							['['/]1[']'/] -> ['['/]{
								1 -> 2 when: {JGTF_evaluate}. 
								1 -> 1 when: {JGTF_initiatorTorF. JGTF_Reset} 
							}
							[']'/].

					
					} "end caseof"
 
			[']'/]. "end #JoinGuardedTrueAndFalseDef"

		#TriggerAndGuardedTransitionDef -> ['['/]:s   :TAGT_stateEntry :TAGT_trigger :TAGT_evaluateGuard :TAGT_guardTrue :TAGT_guardFalse :TAGT_reset :TAGT_fire|
	
				s caseOf: {
							['['/]0[']'/] -> ['['/]{
								0 -> 1 when: {} 
							}[']'/]..

							['['/]1[']'/] -> ['['/]{
								1 -> 2 when: {TAGT_stateEntry}. 
								1 -> 1 when: {TAGT_reset}. 
								1 -> 1 when: {TAGT_trigger} 
							}
							[']'/].

							['['/]2[']'/] -> ['['/]{
								2 -> 1 when: {TAGT_reset}. 
								2 -> 3 when: {TAGT_trigger. TAGT_evaluateGuard}. 
								2 -> 1 when: {TAGT_guardTrue. TAGT_reset} 
							}
							[']'/].

							['['/]3[']'/] -> ['['/]{
								3 -> 2 when: {TAGT_guardFalse}. 
								3 -> 1 when: {TAGT_fire. TAGT_guardTrue}. 
								3 -> 1 when: {TAGT_reset. TAGT_guardFalse}. 
								3 -> 1 when: {TAGT_reset. TAGT_guardTrue}. 
								3 -> 4 when: {TAGT_reset} 
							}
							[']'/].

							['['/]4[']'/] -> ['['/]{
								4 -> 1 when: {TAGT_guardTrue}. 
								4 -> 1 when: {TAGT_guardFalse} 
							}
							[']'/].

					
					} "end caseof"
 
			[']'/]. "end #TriggerAndGuardedTransitionDef"

		#TriggerOnlyTransitionDef -> ['['/]:s   :TOT_stateEntry :TOT_trigger :TOT_reset :TOT_fire|
	
				s caseOf: {
							['['/]0[']'/] -> ['['/]{
								0 -> 1 when: {} 
							}[']'/]..

							['['/]1[']'/] -> ['['/]{
								1 -> 2 when: {TOT_stateEntry}. 
								1 -> 1 when: {TOT_reset}. 
								1 -> 1 when: {TOT_trigger} 
							}
							[']'/].

							['['/]2[']'/] -> ['['/]{
								2 -> 1 when: {TOT_reset}. 
								2 -> 1 when: {TOT_fire. TOT_trigger} 
							}
							[']'/].

					
					} "end caseof"
 
			[']'/]. "end #TriggerOnlyTransitionDef"

		#MicroStepConstraintDef -> ['['/]:s   :MSC_eventOrTime :MSC_startOfMicroStep :MSC_endOfMicroStep|
	
				s caseOf: {
							['['/]0[']'/] -> ['['/]{
								0 -> 1 when: {} 
							}[']'/]..

							['['/]1[']'/] -> ['['/]{
								1 -> 1 when: {MSC_eventOrTime}. 
								1 -> 2 when: {MSC_startOfMicroStep}. 
								1 -> 2 when: {MSC_eventOrTime. MSC_startOfMicroStep} 
							}
							[']'/].

							['['/]2[']'/] -> ['['/]{
								2 -> 1 when: {MSC_endOfMicroStep} 
							}
							[']'/].

					
					} "end caseof"
 
			[']'/]. "end #MicroStepConstraintDef"


} asDictionary }.

	"CCSL librairies specifications"


"Instanciation" 


system := ClockSystem named: '[aProject.name/]_withMoC-SMCubeMoCC'.
system addLibrary:moccmllibs asDictionary.
"system addLibs:ccsllibs asDictionary."

[for (element : Clock| aProject.eAllContents(Clock))]
"clocks for Clock [element.name/]" 
	system addClocks: #(ticks[element.name /] ).
[/for]
[for (element : AbstractMode| aProject.eAllContents(AbstractMode))]
"clocks for AbstractMode [element.name/]" 
	system addClocks: #(entering[element.name /] leaving[element.name /] ).
"internal clocks for AbstractMode [element.name/]" 
    system addInternalClocks: #(allFiredoutgoingTransition[element.name /] allInputTransition[element.name /] allFire1[element.name /] ).
[/for]
[for (element : ModeMachine| aProject.eAllContents(ModeMachine))]
"clocks for ModeMachine [element.name/]" 
	system addClocks: #(start[element.name /] anyEventOrTime[element.name /] ).
"internal clocks for ModeMachine [element.name/]" 
    system addInternalClocks: #(allEvents[element.name /] allTicksevt[element.name /] eventsOrTime[element.name /] allTicksEvt2[element.name /] onlyOneFirst[element.name /] ).
[/for]
[for (element : Transition| aProject.eAllContents(Transition))]
"clocks for Transition [element.name/]" 
	system addClocks: #(fire[element.name /] reset[element.name /] evaluate[element.name /] evaluatedTrue[element.name /] evaluatedFalse[element.name /] ).
"internal clocks for Transition [element.name/]" 
    system addInternalClocks: #(doNotTickreset[element.name /] otherFireFromTheSameStateNOOSS[element.name /] allTicksGO[element.name /] ).
[/for]
[for (element : EventExpression| aProject.eAllContents(EventExpression))]
"clocks for EventExpression [element.name/]" 
	system addClocks: #(occurs[element.name /] ).
[/for]
[for (element : EventBinaryExpression| aProject.eAllContents(EventBinaryExpression))]
"clocks for EventBinaryExpression [element.name/]" 
	system addClocks: #().
"internal clocks for EventBinaryExpression [element.name/]" 
    system addInternalClocks: #(binaryConjunction[element.name /] binaryDisjunction[element.name /] ).
[/for]
[for (element : EventUnaryExpression| aProject.eAllContents(EventUnaryExpression))]
"clocks for EventUnaryExpression [element.name/]" 
	system addClocks: #().
[/for]
[for (element : AbstractEvent| aProject.eAllContents(AbstractEvent))]
"clocks for AbstractEvent [element.name/]" 
	system addClocks: #(occurs[element.name /] ).
[/for]
[for (element : System| aProject.eAllContents(System))]
"clocks for System [element.name/]" 
	system addClocks: #(start[element.name /] ).
"internal clocks for System [element.name/]" 
    system addInternalClocks: #(allStartMachine[element.name /] onlyOneFirst[element.name /] ).
[/for]

[for (element : Clock| aProject.eAllContents(Clock))]
"relations for Clock [element.name/]" 
[/for]
[for (element : AbstractMode| aProject.eAllContents(AbstractMode))]
"expressions used by  AbstractMode [element.name/]" 
	system allUnion: #() named: #allFiredoutgoingTransition[element.name/]. 
	system allUnion: #() named: #allInputTransition[element.name/]. 
	system allUnion: #() named: #allFire1[element.name/]. 
"relations for AbstractMode [element.name/]" 
	"enterOnceBeforeToLeave in AbstractMode [element.name/]"
	system
		library: #extraExpressions
		relation: #WeakAlternatesDef
		clocks: #(entering[element.name/] leaving[element.name/])
		constants: {}
		variables: {}.

	"firingATransitionAlternatesWithLeavingState in AbstractMode [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(allFiredoutgoingTransition[element.name/] leaving[element.name/]).

	"stateEntering1 in AbstractMode [element.name/]"
		system library: #Kernel relation: #Alternates clocks: #(allInputTransition[element.name/] entering[element.name/]).

	"stateEntering_microstep1 in AbstractMode [element.name/]"
	system
		library: #SMCubeMoCC
		relation: #MicroStepConstraintDef
		clocks: #(anyEventOrTime[element.oclAsType(ecore::EObject).eContainer().oclAsType(mode::ModeMachine).name/] allFire1[element.name/] entering[element.name/])
		constants: {}
		variables: {}.

	"oneTransitionAtATime in AbstractMode [element.name/]"
	system
		library: #TODO: complete EclServices.java, ConstraintCS.getLibraryName() for expression type InfixExpCS
		relation: #TODO: complete EclServices.java, ConstraintCS.getRelationName() for expression type InfixExpCS
		clocks: #(TODO: complete EclServices.java, ConstraintCS.getClockNamesListedAndSepBySep())
		constants: {}
		variables: {TODO: complete EclServices.java, ConstraintCS.getVariablesListedAndSepByDot() for expression type InfixExpCS}.

[/for]
[for (element : ModeMachine| aProject.eAllContents(ModeMachine))]
"expressions used by  ModeMachine [element.name/]" 
	system allUnion: #() named: #allEvents[element.name/]. 
	system allUnion: #() named: #allTicksevt[element.name/]. 
	system allUnion: #() named: #eventsOrTime[element.name/]. 
	system allUnion: #() named: #allTicksEvt2[element.name/]. 
	system allOneTickAndNoMore: #(start[element.name/]) named: #onlyOneFirst[element.name/]. 
"relations for ModeMachine [element.name/]" 
	"oneModeAtATime in ModeMachine [element.name/]"
		system library: #Kernel relation: #Exclusion clocks: #([for (ne : AbstractMode | element.ownedModes->select(s | (s).oclIsKindOf(AbstractMode)).oclAsType(AbstractMode))]entering[ne.name/] [/for]).

	"defineAllEventOrTime in ModeMachine [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(anyEventOrTime[element.name/] eventsOrTime[element.name/]).

	"defineAllEventOrTime2 in ModeMachine [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(anyEventOrTime[element.name/] allTicksEvt2[element.name/]).

	"firstIsInitialState in ModeMachine [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(start[element.name/] entering[element.initial.name/]).

	"firstOnlyOnce in ModeMachine [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(start[element.name/] onlyOneFirst[element.name/]).

[/for]
[for (element : Transition| aProject.eAllContents(Transition))]
"expressions used by  Transition [element.name/]" 
	system allNoTick: #(fire[element.name/]) named: #doNotTickreset[element.name/]. 
	system allUnion: #() named: #otherFireFromTheSameStateNOOSS[element.name/]. 
	system allUnion: #([for (ne : mode::ModeMachine | element.oclAsType(ecore::EObject).eContainer().oclAsType(mode::ModeMachine).localClocks)]ticks[ne.name/] [/for]) named: #allTicksGO[element.name/]. 
"relations for Transition [element.name/]" 
	"reset_singleTransitionNoSuperState in Transition [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(reset[element.name/] doNotTickreset[element.name/]).

	"reset_severalTransitionsNoSuperState in Transition [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(reset[element.name/] otherFireFromTheSameStateNOOSS[element.name/]).

	"TAG in Transition [element.name/]"
	system
		library: #TODO: complete EclServices.java, ConstraintCS.getLibraryName() for expression type InfixExpCS
		relation: #TODO: complete EclServices.java, ConstraintCS.getRelationName() for expression type InfixExpCS
		clocks: #(TODO: complete EclServices.java, ConstraintCS.getClockNamesListedAndSepBySep())
		constants: {}
		variables: {TODO: complete EclServices.java, ConstraintCS.getVariablesListedAndSepByDot() for expression type InfixExpCS}.

	"GO in Transition [element.name/]"
	system
		library: #TODO: complete EclServices.java, ConstraintCS.getLibraryName() for expression type InfixExpCS
		relation: #TODO: complete EclServices.java, ConstraintCS.getRelationName() for expression type InfixExpCS
		clocks: #(TODO: complete EclServices.java, ConstraintCS.getClockNamesListedAndSepBySep())
		constants: {}
		variables: {TODO: complete EclServices.java, ConstraintCS.getVariablesListedAndSepByDot() for expression type InfixExpCS}.

[/for]
[for (element : EventExpression| aProject.eAllContents(EventExpression))]
"relations for EventExpression [element.name/]" 
[/for]
[for (element : EventBinaryExpression| aProject.eAllContents(EventBinaryExpression))]
"expressions used by  EventBinaryExpression [element.name/]" 
	system allIntersection: #(occurs[element.operand1.name/] occurs[element.operand2.name/]) named: #binaryConjunction[element.name/]. 
	system allUnion: #(occurs[element.operand1.name/] occurs[element.operand2.name/]) named: #binaryDisjunction[element.name/]. 
"relations for EventBinaryExpression [element.name/]" 
	"eventAND in EventBinaryExpression [element.name/]"
	system
		library: #TODO: complete EclServices.java, ConstraintCS.getLibraryName() for expression type InfixExpCS
		relation: #TODO: complete EclServices.java, ConstraintCS.getRelationName() for expression type InfixExpCS
		clocks: #(TODO: complete EclServices.java, ConstraintCS.getClockNamesListedAndSepBySep())
		constants: {}
		variables: {TODO: complete EclServices.java, ConstraintCS.getVariablesListedAndSepByDot() for expression type InfixExpCS}.

	"eventOR in EventBinaryExpression [element.name/]"
	system
		library: #TODO: complete EclServices.java, ConstraintCS.getLibraryName() for expression type InfixExpCS
		relation: #TODO: complete EclServices.java, ConstraintCS.getRelationName() for expression type InfixExpCS
		clocks: #(TODO: complete EclServices.java, ConstraintCS.getClockNamesListedAndSepBySep())
		constants: {}
		variables: {TODO: complete EclServices.java, ConstraintCS.getVariablesListedAndSepByDot() for expression type InfixExpCS}.

[/for]
[for (element : EventUnaryExpression| aProject.eAllContents(EventUnaryExpression))]
"relations for EventUnaryExpression [element.name/]" 
	"EventRefCoincidence in EventUnaryExpression [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(occurs[element.name/] occurs[element.operand.name/]).

[/for]
[for (element : AbstractEvent| aProject.eAllContents(AbstractEvent))]
"relations for AbstractEvent [element.name/]" 
[/for]
[for (element : System| aProject.eAllContents(System))]
"expressions used by  System [element.name/]" 
	system allUnion: #([for (ne : mode::ModeMachine | element.ownedExtensions->select(e | (e).oclIsTypeOf(mode::ModeMachine)).oclAsType(mode::ModeMachine))]start[ne.name/] [/for]) named: #allStartMachine[element.name/]. 
	system allOneTickAndNoMore: #(start[element.name/]) named: #onlyOneFirst[element.name/]. 
"relations for System [element.name/]" 
	"startTimedSystemBeforeAllStartComponent in System [element.name/]"
		system library: #Kernel relation: #Precedes clocks: #(start[element.name/] allStartMachine[element.name/]).

	"allStartsTogether in System [element.name/]"
	system
		library: #TODO: complete EclServices.java, ConstraintCS.getLibraryName() for expression type InfixExpCS
		relation: #TODO: complete EclServices.java, ConstraintCS.getRelationName() for expression type InfixExpCS
		clocks: #(TODO: complete EclServices.java, ConstraintCS.getClockNamesListedAndSepBySep())
		constants: {}
		variables: {TODO: complete EclServices.java, ConstraintCS.getVariablesListedAndSepByDot() for expression type InfixExpCS}.

	"firstOnlyOnce in System [element.name/]"
		system library: #Kernel relation: #Coincides clocks: #(start[element.name/] onlyOneFirst[element.name/]).

[/for]
[/file]
[file ('ClkSysFunctionTest.clocksystem', false, 'UTF-8')]
SimpleSDF example1 system
[/file]
[/template]
