[comment encoding = UTF-8 /]

[module generate('http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation', 
	'http://www.eclipse.org/emf/2002/Ecore', 
	'http://org.gemoc.moccml/1.0', 
	'http://fr.inria.aoste.timemodel',
	'http://org.gemoc.moccml.fsmmodel/1.0',
	'http://www.polarsys.org/capella/core/modeller/0.8.0','http://www.polarsys.org/kitalpha/emde/1.0.0','http://www.polarsys.org/capella/core/ctx/0.8.0','http://www.polarsys.org/capella/core/interaction/0.8.0') ]

[template public generate(aProject : Project)]
[comment @main/]
[file (aProject.name+'_withMoC-temporalConstraints.clocksystem', false, 'UTF-8')]

"Some global constants"
|system moccmllibs ccsllibs|
"MoCCML librairies specifications" 
moccmllibs:={ #temporalConstraints -> {
		#PeriodicWithJitterDef -> ['['/]:s :counter :one :zero :PeriodicWithJitterPeriod :PeriodicWithJitterJitter :PeriodicWithJitterRes :PeriodicWithJitterBase|
	
				s caseOf: {
							['['/]0[']'/] -> ['['/]|transitions|
							transitions := OrderedCollection new.
							true ifTrue: ['['/]
									transitions add: (0 -> 1  do: ['['/]:configuration |
										|counter_ | 
										counter_ := configuration at: 2.
										configuration at: 2 put: (zero).

									[']'/]
									) [']'/].							
									transitions asArray.
							[']'/].
							['['/]1[']'/] -> ['['/]|transitions|
							transitions := OrderedCollection new.
							(counter < PeriodicWithJitterPeriod - PeriodicWithJitterJitter) ifTrue:['['/]
									transitions add: (1 -> 1  when:{PeriodicWithJitterBase}  do: ['['/]:configuration |
										|counter_ |
										counter_ := configuration at: 2.
										configuration at: 2 put: (counter + 1).
	
									[']'/]
									) [']'/].

							(counter == PeriodicWithJitterPeriod - PeriodicWithJitterJitter) ifTrue:['['/]
									transitions add: (1 -> 2  when:{PeriodicWithJitterBase} 
									) [']'/].


									transitions asArray.
							[']'/].

							['['/]2[']'/] -> ['['/]|transitions|
							transitions := OrderedCollection new.
							(counter < PeriodicWithJitterPeriod + PeriodicWithJitterJitter) ifTrue:['['/]
									transitions add: (2 -> 2  when:{PeriodicWithJitterBase}  do: ['['/]:configuration |
										|counter_ |
										counter_ := configuration at: 2.
										configuration at: 2 put: (counter + 1).
	
									[']'/]
									) [']'/].

							(counter <= PeriodicWithJitterPeriod + PeriodicWithJitterJitter) ifTrue:['['/]
									transitions add: (2 -> 1  when:{PeriodicWithJitterRes}  do: ['['/]:configuration |
										|counter_ |
										counter_ := configuration at: 2.
										configuration at: 2 put: (zero).
	
									[']'/]
									) [']'/].

							(counter < PeriodicWithJitterPeriod + PeriodicWithJitterJitter) ifTrue:['['/]
									transitions add: (2 -> 1  when:{PeriodicWithJitterBase. PeriodicWithJitterRes}  do: ['['/]:configuration |
										|counter_ |
										counter_ := configuration at: 2.
										configuration at: 2 put: (zero).
	
									[']'/]
									) [']'/].


									transitions asArray.
							[']'/].

					
					} "end caseof"
 
			[']'/]. "end #PeriodicWithJitterDef"


} asDictionary }.

	"CCSL librairies specifications"


"Instanciation" 


system := ClockSystem named: '[aProject.name/]_withMoC-temporalConstraints'.
system addLibrary:moccmllibs asDictionary.
"system addLibs:ccsllibs asDictionary."

[for (element : ctx::Capability| aProject.eAllContents(ctx::Capability))]
"clocks for Capability [element.name/]" 
system addClocks: #(globalClock[element.name/]).

[/for]
[for (element : interaction::Execution| aProject.eAllContents(interaction::Execution))]
"clocks for Execution [element.name/]" 
system addClocks: #(begin[element.name/]).
system addClocks: #(stop[element.name/]).

[/for]
[for (element : interaction::MessageEnd| aProject.eAllContents(interaction::MessageEnd))]
"clocks for MessageEnd [element.name/]" 
system addClocks: #(messEnd_occurs[element.name/]).

[/for]
[for (element : interaction::ExecutionEnd| aProject.eAllContents(interaction::ExecutionEnd))]
"clocks for ExecutionEnd [element.name/]" 
system addClocks: #(execEnd_occurs[element.name/]).

[/for]
[for (element : interaction::AbstractEnd| aProject.eAllContents(interaction::AbstractEnd))]
"clocks for AbstractEnd [element.name/]" 
system addClocks: #(abstractEnd_occurs[element.name/]).

[/for]
[for (element : interaction::SequenceMessage| aProject.eAllContents(interaction::SequenceMessage))]
"clocks for SequenceMessage [element.name/]" 
system addClocks: #(AnyReceivingOccurs[element.name/]).

"internal clocks for interaction::SequenceMessage [element.name/]" 
	[if ( element.oclAsType(ecore::EObject).eContainer().eAllContents(SequenceMessage)->select(me|me.oclAsType(interaction::SequenceMessage).name.toString().=(element.name.toString())).oclAsType(interaction::SequenceMessage).receivingEnd->size()>1) ]system addInternalClocks: #(UnionofallReceptionOfMessageOfSameName[element.name/]).[/if]

[/for]
[for (element : interaction::InstanceRole| aProject.eAllContents(interaction::InstanceRole))]
"clocks for InstanceRole [element.name/]" 
[/for]
[for (element : interaction::ConstraintDuration| aProject.eAllContents(interaction::ConstraintDuration))]
"clocks for ConstraintDuration [element.name/]" 
[/for]

[for (element : ctx::Capability| aProject.eAllContents(ctx::Capability))]
"relations for Capability [element.name/]" 
[/for]
[for (element : interaction::Execution| aProject.eAllContents(interaction::Execution))]
"relations for Execution [element.name/]" 
	"startWhenStarted in Execution [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Coincides clocks: #(begin[element.name/]  abstractEnd_occurs[element.start.oclAsType(interaction::AbstractEnd).name/]) .
		[/if]
	"stopWhenStopped in Execution [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Coincides clocks: #(stop[element.name/]  abstractEnd_occurs[element.finish.oclAsType(interaction::AbstractEnd).name/]) .
		[/if]
	"startBeforeFinish in Execution [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(abstractEnd_occurs[element.start.oclAsType(interaction::AbstractEnd).name/]  abstractEnd_occurs[element.finish.oclAsType(interaction::AbstractEnd).name/])  constants:{-1} .
		[/if]
[/for]
[for (element : interaction::MessageEnd| aProject.eAllContents(interaction::MessageEnd))]
"relations for MessageEnd [element.name/]" 
	"messIsAbst in MessageEnd [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Coincides clocks: #(abstractEnd_occurs[element.name/]  messEnd_occurs[element.name/]) .
		[/if]
[/for]
[for (element : interaction::ExecutionEnd| aProject.eAllContents(interaction::ExecutionEnd))]
"relations for ExecutionEnd [element.name/]" 
	"execIsAbst in ExecutionEnd [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Coincides clocks: #(abstractEnd_occurs[element.name/]  execEnd_occurs[element.name/]) .
		[/if]
[/for]
[for (element : interaction::AbstractEnd| aProject.eAllContents(interaction::AbstractEnd))]
"relations for AbstractEnd [element.name/]" 
[/for]
[for (element : interaction::SequenceMessage| aProject.eAllContents(interaction::SequenceMessage))]
"expressions used by  SequenceMessage [element.name/]" 

	[if ( element.oclAsType(ecore::EObject).eContainer().eAllContents(SequenceMessage)->select(me|me.oclAsType(interaction::SequenceMessage).name.toString().=(element.name.toString())).oclAsType(interaction::SequenceMessage).receivingEnd->size()>1) ]
	system allUnion: #([for (ne : interaction::SequenceMessage | element.oclAsType(ecore::EObject).eContainer().eAllContents(SequenceMessage)->select(me|me.oclAsType(interaction::SequenceMessage).name.toString().=(element.name.toString())).oclAsType(interaction::SequenceMessage).receivingEnd)]messEnd_occurs[ne.name/] [/for]) named: #UnionofallReceptionOfMessageOfSameName[element.name/]. 
	[/if]
 
"relations for SequenceMessage [element.name/]" 
	"startPrecedesEnd in SequenceMessage [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(messEnd_occurs[element.sendingEnd.name/]  messEnd_occurs[element.receivingEnd.name/])  constants:{-1} .
		[/if]
	"unionConstruction in SequenceMessage [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Coincides clocks: #(UnionofallReceptionOfMessageOfSameName[element.name/]  AnyReceivingOccurs[element.name/]) .
		[/if]
[/for]
[for (element : interaction::InstanceRole| aProject.eAllContents(interaction::InstanceRole))]
"relations for InstanceRole [element.name/]" 
	"endsInOrder in InstanceRole [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #()  constants:{-1} .
		[/if]
	"nonRentrantSCenario in InstanceRole [element.name/]"
		[if ( ( self.abstractEnds->size() > 1) ) ]
	system library: #Kernel relation: #Alternates clocks: #(abstractEnd_occurs[element.abstractEnds->first().name/]  abstractEnd_occurs[element.abstractEnds->last().name/]) .
		[/if]
[/for]
[for (element : interaction::ConstraintDuration| aProject.eAllContents(interaction::ConstraintDuration))]
"relations for ConstraintDuration [element.name/]" 
	"DurationOfExec in ConstraintDuration [element.name/]"
	[if ( true) ]
	system
		library: #CCSL4RT
		relation: #DurationDef
		clocks: #(abstractEnd_occurs[element.start.oclAsType(interaction::AbstractEnd).name/]  abstractEnd_occurs[element.finish.oclAsType(interaction::AbstractEnd).name/]  globalClock[element.oclAsType(ecore::EObject).eContainer().oclAsType(interaction::Scenario).oclAsType(ecore::EObject).eContainer().oclAsType(ctx::Capability).name/]  )
		constants: {[element.duration.replaceAll('^.', '').replaceAll(';.*', '').toString().toInteger().round()/]. [element.duration.replaceAll('.[0-9]+;', '').replaceAll(']', '').toString().toInteger().round()/]}
		variables: {}.
	[/if]

[/for]
[/file]
[file ('ClkSysFunctionTest.clocksystem', false, 'UTF-8')]
SimpleSDF example1 system
[/file]


[/template]



