[comment encoding = UTF-8 /]

[module generate('http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation', 
	'http://www.eclipse.org/emf/2002/Ecore', 
	'http://org.gemoc.moccml/1.0', 
	'http://fr.inria.aoste.timemodel',
	'http://org.gemoc.moccml.fsmmodel/1.0',
	'http://www.polarsys.org/capella/core/modeller/0.8.0','http://www.polarsys.org/kitalpha/emde/1.0.0','http://www.thalesgroup.com/trt/modesimulation/1.0.0','http://www.polarsys.org/capella/core/fa/0.8.0') ]

[template public generate(aProject : Project)]
[comment @main/]
[file (aProject.name+'_withMoC-ModeFunctionalChain.clocksystem', false, 'UTF-8')]

"Some global constants"
|system moccmllibs ccsllibs|
"MoCCML librairies specifications" 
moccmllibs:={ #ModeFunctionalChain -> {
		#NoFunctionalChainIfNotAvailableInModeDef -> ['['/]:s   :enterMode :leaveMode :anyfunctionalChainEvent|
	
				s caseOf: {
							['['/]0[']'/] -> ['['/]{
								0 -> 1 when: {} 
							}[']'/].
							['['/]1[']'/] -> ['['/]{
								1 -> 2 when: {enterMode} 
							}
							[']'/].

							['['/]2[']'/] -> ['['/]{
								2 -> 1 when: {leaveMode}. 
								2 -> 2 when: {anyfunctionalChainEvent} 
							}
							[']'/].

					
					} "end caseof"
 
			[']'/]. "end #NoFunctionalChainIfNotAvailableInModeDef"

		#FunctionLifeCycleDef -> ['['/]:s   :Function_lifeCycle_enable :Function_lifeCycle_disable :Function_lifeCycle_start :Function_lifeCycle_stop :Function_lifeCycle_isRunning|
	
				s caseOf: {
							['['/]0[']'/] -> ['['/]{
								0 -> 1 when: {} 
							}[']'/].
							['['/]1[']'/] -> ['['/]{
								1 -> 2 when: {Function_lifeCycle_enable} 
							}
							[']'/].

							['['/]2[']'/] -> ['['/]{
								2 -> 3 when: {Function_lifeCycle_start}. 
								2 -> 1 when: {Function_lifeCycle_disable} 
							}
							[']'/].

							['['/]3[']'/] -> ['['/]{
								3 -> 3 when: {Function_lifeCycle_isRunning}. 
								3 -> 2 when: {Function_lifeCycle_stop} 
							}
							[']'/].

					
					} "end caseof"
 
			[']'/]. "end #FunctionLifeCycleDef"


} asDictionary }.

	"CCSL librairies specifications"


"Instanciation" 


system := ClockSystem named: '[aProject.name/]_withMoC-ModeFunctionalChain'.
system addLibrary:moccmllibs asDictionary.
"system addLibs:ccsllibs asDictionary."

[for (element : fa::AbstractFunction| aProject.eAllContents(fa::AbstractFunction))]
"clocks for AbstractFunction [element.name/]" 
[if((self.ownedFunctions->isEmpty())) ]system addClocks: #(makeactive[element.name/]).[/if]
[if((self.ownedFunctions->isEmpty())) ]system addClocks: #(start[element.name/]).[/if]
[if((self.ownedFunctions->isEmpty())) ]system addClocks: #(run[element.name/]).[/if]
[if((self.ownedFunctions->isEmpty())) ]system addClocks: #(stop[element.name/]).[/if]
[if((self.ownedFunctions->isEmpty())) ]system addClocks: #(makeinactive[element.name/]).[/if]

"internal clocks for fa::AbstractFunction [element.name/]" 
	[if ( element.oclAsType(ecore::EObject).eContainer().oclAsType(fa::AbstractFunction).ownedFunctionalChains->select(fc : fa::FunctionalChain|fc.enactedFunctions->exists(ef : fa::AbstractFunction | ef.=(self)))->size()>1) ]system addInternalClocks: #(anyAssociatedFCactivation[element.name/]).[/if]
[if ( (element.oclAsType(ecore::EObject).eContainer().oclAsType(AbstractFunction).ownedFunctionalChains->select(fc | (fc).enactedFunctions->exists(ef | (ef) = self)))->size()>1) ]system addInternalClocks: #(anyAssociatedFCdeactivation[element.name/]).[/if]

[/for]
[for (element : fa::FunctionalChain| aProject.eAllContents(fa::FunctionalChain))]
"clocks for FunctionalChain [element.name/]" 
system addClocks: #(activate[element.name/]).
system addClocks: #(deactivate[element.name/]).

[/for]
[for (element : fa::FunctionalExchange| aProject.eAllContents(fa::FunctionalExchange))]
"clocks for FunctionalExchange [element.name/]" 
[/for]

[for (element : fa::AbstractFunction| aProject.eAllContents(fa::AbstractFunction))]
"expressions used by  AbstractFunction [element.name/]" 

	[if ( element.oclAsType(ecore::EObject).eContainer().oclAsType(fa::AbstractFunction).ownedFunctionalChains->select(fc : fa::FunctionalChain|fc.enactedFunctions->exists(ef : fa::AbstractFunction | ef.=(self)))->size()>1) ]
	system allUnion: #([for (ne : fa::AbstractFunction | element.oclAsType(ecore::EObject).eContainer().oclAsType(fa::AbstractFunction).ownedFunctionalChains->select(fc : fa::FunctionalChain|fc.enactedFunctions->exists(ef : fa::AbstractFunction | ef.=(self))))]activate[ne.name/] [/for]) named: #anyAssociatedFCactivation[element.name/]. 
	[/if]
 

	[if ( (element.oclAsType(ecore::EObject).eContainer().oclAsType(AbstractFunction).ownedFunctionalChains->select(fc | (fc).enactedFunctions->exists(ef | (ef) = self)))->size()>1) ]
	system allUnion: #([for (ne : AbstractFunction | (element.oclAsType(ecore::EObject).eContainer().oclAsType(AbstractFunction).ownedFunctionalChains->select(fc | (fc).enactedFunctions->exists(ef | (ef) = self))))]deactivate[ne.name/] [/for]) named: #anyAssociatedFCdeactivation[element.name/]. 
	[/if]
 
"relations for AbstractFunction [element.name/]" 
	"functionLifeCycle in AbstractFunction [element.name/]"
	[if ( ( self.ownedFunctions->isEmpty()) ) ]
	system
		library: #ModeFunctionalChain
		relation: #FunctionLifeCycleDef
		clocks: #(makeactive[element.name/]  makeinactive[element.name/]  start[element.name/]  stop[element.name/]  run[element.name/])
		constants: {}
		variables: {}.
	[/if]

	"activatedIfOneAssociatedFCactivated in AbstractFunction [element.name/]"
		[if ( ( self.oclAsType(ecore::EObject).eContainer().oclAsType(AbstractFunction).ownedFunctionalChains->select(fc | (fc).enactedFunctions->exists(ef | (ef) = self))->size() >0) ) ]
	system library: #Kernel relation: #Coincides clocks: #(makeactive[element.name/]  anyAssociatedFCactivation[element.name/]) .
		[/if]
	"deactivatedIfOneAssociatedFCdeactivated in AbstractFunction [element.name/]"
		[if ( ( self.oclAsType(ecore::EObject).eContainer().oclAsType(AbstractFunction).ownedFunctionalChains->select(fc | (fc).enactedFunctions->exists(ef | (ef) = self))->size() >0) ) ]
	system library: #Kernel relation: #Coincides clocks: #(makeinactive[element.name/]  anyAssociatedFCdeactivation[element.name/]) .
		[/if]
[/for]
[for (element : fa::FunctionalChain| aProject.eAllContents(fa::FunctionalChain))]
"relations for FunctionalChain [element.name/]" 
	"activateAltDeactivate in FunctionalChain [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Alternates clocks: #(activate[element.name/]  deactivate[element.name/]) .
		[/if]
[/for]
[for (element : fa::FunctionalExchange| aProject.eAllContents(fa::FunctionalExchange))]
"relations for FunctionalExchange [element.name/]" 
	"SourcePrecedesTarget in FunctionalExchange [element.name/]"
		[if ( ( let sourceFunction : AbstractFunction =
		self.sourceFunctionOutputPort.oclAsType(ecore::EObject).eContainer().oclAsType(AbstractFunction) in
	let targetFunction : AbstractFunction =
		self.targetFunctionInputPort.oclAsType(ecore::EObject).eContainer().oclAsType(AbstractFunction) in
          	(Relation Alternates((sourceFunction).run,(targetFunction).run))) ) ]
	system library: #Kernel relation: #Alternates clocks: #(  ) .
		[/if]
[/for]
[/file]
[file ('ClkSysFunctionTest.clocksystem', false, 'UTF-8')]
SimpleSDF example1 system
[/file]


[/template]



