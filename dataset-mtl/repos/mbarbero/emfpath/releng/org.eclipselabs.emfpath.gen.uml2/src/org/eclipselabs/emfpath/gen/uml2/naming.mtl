[comment encoding = UTF-8 /]
[module naming('http://www.eclipse.org/uml2/2.2.0/GenModel', 'http://www.eclipse.org/emf/2002/Ecore') extends org::eclipselabs::emfpath::gen::naming/]

[import org::eclipselabs::emfpath::gen::typing /]
[import org::eclipselabs::emfpath::gen::naming /]
[import org::eclipselabs::emfpath::gen::utils /]
[import org::eclipselabs::emfpath::gen::primitives /]
[import org::eclipselabs::emfpath::gen::uml2::common /]
[import org::eclipselabs::emfpath::gen::uml2::caseformat/]

[template public functionName(e : GenOperation) overrides functionName post(trim().escapeJavaKeyword())]
[if (isConflictingOperation())]
	[ecoreOperation.name/]_
[else]
	[ecoreOperation.name/]
[/if]
[/template]

[query private isConflictingOperation(e : GenOperation) : Boolean = 
not	e.genClass.ecoreClass.eAllSubClassesAndSelf()->
	select(eClass : EClass | not eClass.eAllAttributesAndReferences()->
		select(eSF : EStructuralFeature | eSF.name = e.ecoreOperation.name)->isEmpty()
	)->isEmpty()
/]

[query private eAllAttributesAndReferences(e : EClass) : Sequence(EStructuralFeature) = 
	e.eAllStructuralFeatures->select(oclIsKindOf(EAttribute) or oclIsKindOf(EReference))->asSequence()
/]

[template public getterName(e : GenFeature) overrides getterName ? (isContainedByUML2Package() and not willGeneratePredicate() and ecoreFeature.many) post(trim().avoidObjectMethodsNameClash())]
	get[pluralize().toUpperFirst()/]
[/template]

[template public getterName(e : GenFeature) overrides getterName ? (isContainedByUML2Package() and not willGeneratePredicate() and not ecoreFeature.many) post(trim().avoidObjectMethodsNameClash())]
	get[pluralize().toUpperFirst()/]
[/template]

[template public getterName(e : GenFeature) overrides getterName ? (isContainedByUML2Package() and willGeneratePredicate() and ecoreFeature.name.startsWith('is')) post(trim().avoidObjectMethodsNameClash())]
	[pluralize()/]
[/template]

[template public getterName(e : GenFeature) overrides getterName ? (isContainedByUML2Package() and willGeneratePredicate()) post(trim().avoidObjectMethodsNameClash())]
	is[pluralize().toUpperFirst()/]
[/template]

[template public getterName(e : GenFeature) overrides getterName ? (isContainedByUML2Package()) post(trim())]
	/*FIXME: implements getterName(e : GenFeature)*/
[/template]

[template private pluralize(e : GenFeature) ? (ecoreFeature.many) post(trim())]
	[if (ecoreFeature.name.endsWith('s'))]
		[ecoreFeature.name/]es
	[elseif (ecoreFeature.name.endsWith('y') and not ecoreFeature.name.toLower().endsWith('by'))]
		[ecoreFeature.name.substring(1, ecoreFeature.name.size() - 1)/]ies
	[elseif (ecoreFeature.name.endsWith('a'))]
		[ecoreFeature.name/]
	[elseif (ecoreFeature.name.endsWith('ex'))]
		[ecoreFeature.name.substring(1, ecoreFeature.name.size() - 2)/]ices
	[else]
		[ecoreFeature.name/]s
	[/if]
[/template]

[template private pluralize(e : GenFeature) ? (not ecoreFeature.many) post(trim())]
	[ecoreFeature.name/]
[/template]

[template public operationName(e : GenOperation) overrides operationName ? (isContainedByUML2Package() and ecoreOperation.eParameters->first().eType.instanceTypeName = 'org.eclipse.emf.common.util.DiagnosticChain') post(trim())]
	validate[ecoreOperation.name.lowerUnderscoreToUpperCamel()/]
[/template]

[template public predicateName(e : GenOperation) overrides predicateName ? (isContainedByUML2Package() and ecoreOperation.eParameters->first().eType.instanceTypeName = 'org.eclipse.emf.common.util.DiagnosticChain') post(trim())]
	validate[ecoreOperation.name.lowerUnderscoreToUpperCamel()/]
[/template]
