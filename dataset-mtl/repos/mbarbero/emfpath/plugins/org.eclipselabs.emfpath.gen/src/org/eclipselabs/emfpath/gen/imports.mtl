[comment encoding = UTF-8 /]
[module imports('http://www.eclipse.org/emf/2002/GenModel', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import org::eclipselabs::emfpath::gen::naming /]
[import org::eclipselabs::emfpath::gen::typing /]
[import org::eclipselabs::emfpath::gen::utils /]
[import org::eclipselabs::emfpath::gen::primitives /]
[import org::eclipselabs::emfpath::gen::genClasses /]

[template public genImports(e : GenClass) post(trim())]
[if (not (allGenFeatures()->select(gf : GenFeature | not gf.willGeneratePredicate())->isEmpty() and allGenOperations()->select(go : GenOperation | not go.willGeneratePredicate())->isEmpty()))]
import com.google.common.base.Function;	
[/if]
[if (not (allGenFeatures()->select(gf : GenFeature | gf.willGeneratePredicate())->isEmpty() and allGenOperations()->select(go : GenOperation | go.willGeneratePredicate())->isEmpty()))]
	[if (getProperty('predicate.fullclassname').oclIsUndefined())]
import com.google.common.base.Predicate;
	[else]
import [getProperty('predicate.fullclassname')/];
	[/if]
[/if]
[if (not allGenOperations()->select(go : GenOperation | not go.ecoreOperation.eExceptions->isEmpty())->isEmpty())]
import org.eclipse.emf.common.util.WrappedException;
[/if]
[if (not (allGenFeatures().ecoreFeature->select(many)->isEmpty() and allGenOperations().ecoreOperation->select(many)->isEmpty()))]
	[if (genPackage.genModel.suppressEMFTypes)]
import java.util.List;
	[elseif (not allEClassifierToImport()->exists(instanceTypeName = 'org.eclipse.emf.common.util.EList'))]
import org.eclipse.emf.common.util.EList;
	[/if]
[/if]

[allEClassifierToImport().genImport(e.eContainer(GenModel))->asOrderedSet()->sortedBy(toString())->sep('\n')/]

[/template]

[query private allEClassifierToImport(e : GenClass) : OrderedSet(EClassifier) = 
	getAllMixinEClasses()
	->union(getAllMixinGenFeatures().ecoreFeature.eType)
	->union(getAllMixinGenOperations().ecoreOperation.eType)
	->union(getAllMixinGenParameters().ecoreParameter.eType)
	->asOrderedSet()
		->select(not isPrimitiveOrNonJavaLangClassifier())
/]

[query private isPrimitiveOrNonJavaLangClassifier(e : EClassifier) : Boolean = 
if (instanceTypeName.oclIsUndefined()) then
	false
else
	instanceTypeName.startsWith('java.lang') or instanceTypeName.isPrimitiveType()
endif
/]

[template private genImport(e : EClassifier, genModel : GenModel) ? (not e.instanceTypeName.oclIsUndefined() and e.instanceTypeName = 'java.util.Map$Entry' ) post(trim())]
	[if (genModel.basePackage(e).eContainer(GenModel).suppressEMFTypes)]
		import java.util.Map;
	[else]
		import org.eclipse.emf.common.util.EMap;
	[/if]
[/template]

[template private genImport(e : EClassifier, genModel : GenModel) ? (not e.instanceTypeName.oclIsUndefined() and e.instanceTypeName <> '' ) post(trim())]
import [instanceTypeName/];
[/template]

[template private genImport(e : EClassifier, genModel : GenModel) post(trim())]
import [genModel.basePackage(e).qualifiedJavaName()/].[name/];
[/template]

[query private basePackage(genModel : GenModel, toFind : EClassifier) : GenPackage =  
	if (not genModel.eAllContents(GenClass)->select(ecoreClass = toFind)->isEmpty()) then
		genModel.eAllContents(GenClass)->any(ecoreClass = toFind).genPackage
	else 
		if (not genModel.eAllContents(GenEnum)->select(ecoreEnum = toFind)->isEmpty()) then
			genModel.eAllContents(GenEnum)->any(ecoreEnum = toFind).genPackage
		else
			if (not genModel.usedGenPackages->isEmpty()) then
				genModel.usedGenPackages.eAllContents(GenClass)->any(ecoreClass = toFind).genPackage
			else
				genModel.genPackages->first()
			endif
		endif
	endif
/]
