[comment encoding = UTF-8 /]
[module genFEModel('http://github.com/kanafghan/welipse/joomlagen/1.0', 'http://github.com/kanafghan/welipse/webdsl/1.0', 'http://www.eclipse.org/emf/2002/Ecore')]

[import com::github::kanafghan::welipse::joomlagen::generator::acceleo::common::common /]

[template public generateModel(model : GenClass, genModel : JoomlaGenModel)]
[comment @main/]
[file (model.itemMVCName.toLower().concat('.php'), false, 'UTF-8')]
<?php
// No direct access to this file
defined('_JEXEC') or die('Restricted access');
 
/**
 * [model.itemMVCName.toUpperFirst()/] Model
 */
class [genModel.extensionName.toUpperFirst()/]Model[model.itemMVCName.toUpperFirst()/] extends FormModel
{
[for (feature : GenFeature | model.genFeatures)]
[if (feature.oclIsKindOf(GenAttribute))]
 	public $[feature.name/];
[/if]
[/for]

    /**
     * (non-PHPdoc)
     * @see JModel::__construct()
     */
    public function __construct($config = array())
    {
        parent::__construct($config);

        if (array_key_exists('requestVar', $config))
        {
            $this->initialize($config[ '[' /]'requestVar'[ ']' /] );
        }
        if (array_key_exists('id', $config))
        {
            $this->initialize(null, $config[ '[' /]'id'[ ']' /] );
        }
    }

    public function initialize($var, $id = 0) 
    {
        if ($var) 
        {
            // load the row based on the request
            $jinput = JFactory::getApplication()->input;
            $id = $jinput->get($var, 0, 'INT');
        }

        // Get a TablePlayers instance
        $table = $this->getTable();

        // Load the row
        $table->load($id);

        // Initialize
        foreach ($table->getProperties() as $key => $value)
        {
            $this->$key = $value;
        }
    }

    /**
     * (non-PHPdoc)
     * @see JModel::getTable()
     */
    public function getTable($type = '[model.databaseTableName.toUpperFirst()/]', $prefix = '[genModel.extensionName.toUpperFirst()/]Table', $config = array()) 
    {
        return JTable::getInstance($type, $prefix, $config);
    }

[for (feature : GenFeature | model.genFeatures)]
[if (feature.oclIsKindOf(GenReference))]
[let reference : GenReference = feature.oclAsType(GenReference)]
	/**
     * Retrieve and return instance(s) of [reference.type.oclAsType(GenClass).itemMVCName.toUpperFirst()/]
     *
     * @param  int    The id of the instance to be retrieved
     * @return object The instance of [reference.type.oclAsType(GenClass).itemMVCName.toUpperFirst()/]
     */
    public function get[reference.name.toUpperFirst()/]([if (not reference.ecoreReference.oclAsType(EReference).derived and not reference.many)]$id = 0[/if]) 
    {
	[if (reference.ecoreReference.oclAsType(EReference).derived)]
		[generatePHPProtectedRegion('Implementation of '.concat(reference.name))/]
	[else]
		if (!isset($this->[reference.name/]Instance[if (reference.many)]s[/if])) 
        {
			if (isset($this->[reference.name/])) 
			{
				$this->[reference.name/]Instance = JModel::getInstance('[reference.type.oclAsType(GenClass).itemMVCName.toUpperFirst()/]', '[genModel.extensionName.toUpperFirst()/]Model', $config = array('id' => $this->[reference.name/]));
			} 
			[if (not reference.opposite.oclIsUndefined())]
			else if (isset($this->[reference.opposite.genClass.databaseTableName/]_[reference.opposite.name/])) 
			{
				$this->[reference.name/]Instance = JModel::getInstance('[reference.type.oclAsType(GenClass).itemMVCName.toUpperFirst()/]', '[genModel.extensionName.toUpperFirst()/]Model', $config = array('id' => $this->[reference.opposite.genClass.databaseTableName/]_[reference.opposite.name/]));
			}
			[/if] 
			else 
			{
	            $ids = array();
	            $this->[reference.name/]Instance[if (reference.many)]s = array()[else] = null[/if];
	            $db = $this->getDbo();
	            $query = $db->getQuery(true);
	
	            $query->select('a.id');
	            $query->from('[genModel.databaseTablePrefix.concat(reference.type.oclAsType(GenClass).databaseTableName)/] AS a');
	  		[if (reference.manyToMany)]
				$query->join('LEFT', '[genModel.getAssociationTableName(reference.genClass, reference.type.oclAsType(GenClass))/] AS b ON b.[reference.genClass.databaseTableName/]_[reference.name/] = a.id');
				$query->join('LEFT', '[genModel.databaseTablePrefix.concat(model.databaseTableName)/] AS c ON c.id = b.[reference.opposite.genClass.databaseTableName/]_[reference.opposite.name/]');
				$query->where('c.id = '. (int) $this->id);
			[else]
				$query->join('LEFT', '[genModel.databaseTablePrefix.concat(model.databaseTableName)/] AS b ON b.id = a.[reference.genClass.databaseTableName/]_[reference.name/]');
	            $query->where('b.id = '. (int) $this->id);
			[/if]
	
	            $db->setQuery($query);
	            try {
	                $ids = $db->loadObjectList();
	            } catch(JDatabaseException $e) {
	                $this->setError($e->getMessage);
	                return false;
	            }
			[if (reference.many)]
	            foreach ($ids as $obj) {
	                $instance = JModel::getInstance('[reference.type.oclAsType(GenClass).itemMVCName.toUpperFirst()/]', '[genModel.extensionName.toUpperFirst()/]Model', $config = array('id' => $obj->id));
	                array_push($this->[reference.name/]Instances, $instance);
	            }
			[else]
				
				if (!empty($ids)) {
					$this->[reference.name/]Instance = JModel::getInstance('[reference.type.oclAsType(GenClass).itemMVCName.toUpperFirst()/]', '[genModel.extensionName.toUpperFirst()/]Model', $config = array('id' => $ids[ '[' /]0[ ']' /]->id));
				}
			[/if]
			}
		}
		
        return $this->[reference.name/]Instance[if (reference.many)]s[/if];
	[/if]
    }
[/let]
[/if]

[/for]

[for (operation : GenOperation | model.genOperations)]
    /**
     * <!-- user-docs-start -->
     * <!-- user-docs-end -->
[for (parameter : GenParameter | operation.genParameters)]
     * @param	[parameter.ecoreParameter.oclAsType(EParameter).eType.name/] $[parameter.ecoreParameter.oclAsType(EParameter).name/]
[/for]
     * @return [operation.ecoreOperation.oclAsType(EOperation).eType.name/]
     */
    public function [operation.ecoreOperation.oclAsType(EOperation).name/]([generateOperationParameters(operation)/]) 
    {
		//[protected ('Implementation of '.concat(operation.ecoreOperation.oclAsType(EOperation).name))]			
    	// Don't remove above line
		//TODO Auto-generated function needs implementation
    	[generateOperationReturnStatement(operation)/]
		// Don't remove below line
		//[/protected]
    }
[/for]

	public function __toString()
	{
	[if (model.labelFeature.oclIsUndefined())]
		return "[ '[' /]Object of type [model.ecoreClass.oclAsType(EClass).name/][ ']' /]";	
	[else]
		return "". $this->[model.labelFeature.name/];		
	[/if]
	}

	// [protected ('preValidateHook')]
	// Don't remove above line
	protected function preValidateHook($data)
	{
		return true;
	}
	// Don't remove below line
	// [/protected]

    public function validate($data)
    {
        if (!$this->preValidateHook($data))
		{
			return false;
		}

		$app    = JFactory::getApplication();
        $jinput = $app->input;
        $msg = "The field <strong>%s</strong> is a required field, "
                ."you must fill it.";
        $requiredFields = $jinput->get('__required__', '', 'STRING');
        $valid = true;
        if (!empty($requiredFields))
        {
            $fields = explode(',', $requiredFields);
            foreach ($fields as $field) {
                if (isset($data[ '[' /]$field[ ']' /]))
                {
                    if (empty($data[ '[' /]$field[ ']' /])) 
                    {
                        $this->setError(sprintf($msg, $field));
                        $valid = false;
                    }
                } else {
                    $this->setError(sprintf($msg, $field));
                    $valid = false;
                }
            }
        }

		if (!$valid) 
		{
			return false;
		}

        return $this->postValidateHook($data);
    }

	// [protected ('postValidateHook')]
	// Don't remove above line
	protected function postValidateHook($data)
	{
		return true;
	}
	// Don't remove below line
	// [/protected]

	// [protected ('preSaveHook')]
	// Don't remove above line
	protected function preSaveHook($data)
	{
		return true;
	}
	// Don't remove below line
	// [/protected]
	
    public function save($data)
    {
		if (!$this->preSaveHook($data))
		{
			return false;
		}

		$table = $this->getTable();
        $key = $table->getKeyName();
        $pk = (!empty($data[ '[' /]$key[ ']' /]) ? $data[ '[' /]$key[ ']' /] : 0);
        $isNew = true;

        try 
        {
            // Load the row if saving an existing record.
            if ($pk > 0)
            {
                $table->load($pk);
                $isNew = false;
            }

            // Bind the data.
            if (!$table->bind($data))
            {
                $this->setError($table->getError());
                return false;
            }

            // Check the data.
            if (!$table->check())
            {
                $this->setError($table->getError());
                return false;
            }

            // Store the data.
            if (!$table->store())
            {
                $this->setError($table->getError());
                return false;
            }

            // Initialize this object with newly added data
            foreach ($table->getProperties() as $key => $value)
            {
                $this->$key = $value;
            }

[for (feature : GenFeature | model.genFeatures)]
	[if (feature.oclIsKindOf(GenReference))]
	[let reference : GenReference = feature.oclAsType(GenReference)]
		[if (not reference.ecoreReference.oclAsType(EReference).derived and reference.manyToMany)]
	        if (isset($data[ '[' /]'[reference.name/]'[ ']' /]))
            {
                return $this->save[reference.name.toUpperFirst()/]($data[ '[' /]'[reference.name/]'[ ']' /]);
            }
		[/if]
	[/let]
	[/if]
[/for]
        }
        catch (Exception $e) 
        {
            $this->setError($e->getMessage);
            return false;
        }

        $pkName = $table->getKeyName();
        if (isset($table->$pkName))
        {
            $this->setState($this->getName() . '.id', $table->$pkName);
        }        

        return $this->postSaveHook($data);
    }

	// [protected ('postSaveHook')]
	// Don't remove above line
	protected function postSaveHook($data)
	{
		return true;
	}
	// Don't remove below line
	// [/protected]

[for (feature : GenFeature | model.genFeatures)]
	[if (feature.oclIsKindOf(GenReference))]
	[let reference : GenReference = feature.oclAsType(GenReference)]
		[if (not reference.ecoreReference.oclAsType(EReference).derived and reference.manyToMany)]
    protected function save[reference.name.toUpperFirst()/]($new[reference.name.toUpperFirst()/]) 
    {
        $db = $this->getDbo();
        $objectList = $this->get[reference.name.toUpperFirst()/]();
        $old[reference.name.toUpperFirst()/] = array();

        // Extract ids from the list of objects
        foreach ($objectList as $object) {
            $old[reference.name.toUpperFirst()/][ '[' /][ ']' /] = (int) $object->id;
        }

        // Find the difference between the new and the old lists,
        // the result list will be added to DB
        $toAdd = array_diff($new[reference.name.toUpperFirst()/], $old[reference.name.toUpperFirst()/]);
        if (!empty($toAdd))
        {
            /***** Add to DB ****/
            
            // create mappings
            $tuples = array();
            foreach ($toAdd as $item) {
                $tuples[ '[' /][ ']' /] = (int) $this->id .','. (int) $item;
            }

            $query = $db->getQuery(true);    
            $query->insert('[genModel.getAssociationTableName(reference.genClass, reference.type.oclAsType(GenClass))/] ([reference.opposite.genClass.databaseTableName/]_[reference.opposite.name/], [reference.genClass.databaseTableName/]_[reference.name/])');
            $query->values($tuples);
                
            $db->setQuery($query);
            try {
                $db->query();
                if ($db->getErrorNum())
                {
                    throw new Exception($db->getErrorMsg());
                }
            } catch (Exception $e) {
                $this->setError($e->getMessage());
                return false;
            }
        }

        // Now, find the difference between the old and the new lists,
        // the resulting list will be removed from DB
        $toRemove = array_diff($old[reference.name.toUpperFirst()/], $new[reference.name.toUpperFirst()/]);
        if (!empty($toRemove))
        {
            /***** Delete from DB *****/

            $query = $db->getQuery(true);

            $query->delete('[genModel.getAssociationTableName(reference.genClass, reference.type.oclAsType(GenClass))/]');
            $query->where('[reference.opposite.genClass.databaseTableName/]_[reference.opposite.name/] = '. (int) $this->id);
            $query->where('[reference.genClass.databaseTableName/]_[reference.name/] IN ('. implode(',', $toRemove) .')');
            
            $db->setQuery($query);
            try {
                $db->query();
                if ($db->getErrorNum())
                {
                    throw new Exception($db->getErrorMsg());
                }
            } catch (Exception $e) {
                $this->setError($e->getMessage());
                return false;
            }
        }

        return true;
    }
		[/if]
	[/let]
	[/if]
[/for]
}
[/file]
[/template]

[template public generateOperationParameters (operation : GenOperation) post (trim())]
[operation.genParameters.generateParameter()->sep(',')/]
[/template]

[template public generateOperationReturnStatement (operation : GenOperation) post (trim())]
[let op : EOperation = operation.ecoreOperation.oclAsType(EOperation)]
return [if (op.upperBound = -1)]array()[elseif (op.eType.name = 'EInt')]0[elseif (op.eType.name = 'EBoolean')]false[else]''[/if];
[/let]
[/template]

[template public generateParameter (parameter : GenParameter) ]
$[parameter.ecoreParameter.oclAsType(EParameter).name/]
[/template]