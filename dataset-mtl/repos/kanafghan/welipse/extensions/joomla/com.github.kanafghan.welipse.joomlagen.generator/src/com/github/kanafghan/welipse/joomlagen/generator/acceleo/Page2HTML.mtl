[comment encoding = UTF-8 /]
[module Page2HTML('http://github.com/kanafghan/welipse/webdsl/1.0', 'http://github.com/kanafghan/welipse/joomlagen/1.0', 'http://www.eclipse.org/emf/2002/Ecore')]

[import com::github::kanafghan::welipse::joomlagen::generator::acceleo::common::common /]
[import com::github::kanafghan::welipse::joomlagen::generator::acceleo::Expression2PHP /]
[import com::github::kanafghan::welipse::joomlagen::generator::acceleo::common::UtilsServices /]

[template public generatePage(page : Page, genModel : JoomlaGenModel)]

[comment @main /]
[file ('default.php', false, 'UTF-8')]
<?php
// No direct access to this file
defined('_JEXEC') or die('Restricted access');

// Parameters of the page
[for (param : Parameter | page.parameters)]
$[param.var/] = $this->[param.var/];
[/for]

// Variables of the page
[for (variable : VariableInitialization | page.variables)]
$[variable.var/] = [generateExpression(variable.initExp, genModel)/];
[/for]
?>
[if (hasPageForm(page))]
<?php JHTML::_('behavior.formvalidation'); ?>
<script type="text/javascript">
	var update = function(element, field) {
		if (element) {
			if (element.hasClass('invalid')) {
				field.addClass('has-error');	
			} else {
				field.removeClass('has-error');
			}
		}
	};

	window.addEvent('domready', function() {
		$$('.form-group').each(function(field, i) {
			var element = field.getElement('.form-control');
			if (element) {
				element.addEvent('blur', function(event) {
					update(this, field);
				});
			}
		});

		$$('button[ '[' /]type=submit[ ']' /]').each(function(submit, i) {
			if (submit.hasClass('validate')) {
				submit.addEvent('click', function(event) {
					if (this && this.form) {
						this.form.getElements('.form-group').each(function(field, i) {
							var element = field.getElement('.form-control');
							update(element, field);
						});
					}
				});	
			}
		});
	});
</script>
[/if]

[for (element : PageElement | page.elements)]
[generatePageElement(element, genModel)/]
[/for]
[/file]

[/template]

[query public hasPageForm (page : Page) : Boolean 
	= page.elements->exists(e | e.oclIsKindOf(Form)) /]


[template public generatePageElement(element : PageElement, genModel : JoomlaGenModel) post (trim())]
[if (element.oclIsKindOf(Text))]
[generateText(element.oclAsType(Text), genModel)/]
[/if]
[if (element.oclIsKindOf(Image))]
[generateImage(element.oclAsType(Image), genModel)/]
[/if]
[if (element.oclIsKindOf(Link))]
[generateLink(element.oclAsType(Link), genModel)/]
[/if]
[if (element.oclIsKindOf(List))]
[generateList(element.oclAsType(List), genModel)/]
[/if]
[if (element.oclIsKindOf(FormElement))]
[generateFormElement(element.oclAsType(FormElement), genModel)/]
[/if]
[if (element.oclIsKindOf(Group))]
[if (element.oclIsKindOf(Form))]
[generateForm(element.oclAsType(Form), genModel)/]
[else]	
[generateGroup(element.oclAsType(Group), genModel)/]
[/if]
[/if]
[/template]


[template public generateGroup(group : Group, genModel : JoomlaGenModel)]
<div[generateAttributes(group)/]>
[for (element : PageElement | group.elements)]
	[generatePageElement(element, genModel)/]
[/for]
</div>
[/template]


[template public generateForm(form : Form, genModel : JoomlaGenModel) ]
<?php
	$session = JFactory::getSession();
	$formState = $session->get('form-state', null, '[genModel.extensionName/]');
	if ($formState)
	{
	[if (hasSaveAction(form))]
		[generateExpression(getFormObject(form), genModel)/]->bind($formState);
	[else]
	[for (variable : VariableInitialization | getElementPage(form).variables)]
		if (isset($formState[ '[' /]'[variable.var/]'[ ']' /])) { $[variable.var/] = $formState[ '[' /]'[variable.var/]'[ ']' /]; }
	[/for]
	[/if]
	}
?>
<form action="?option=[genModel.componentName/]"
	method="[if (form.method = FormMethod::Post)]POST[else]GET[/if]"
	class="form-horizontal form-validate"
	role="form"
	>
[for (element : PageElement | form.elements)]
	[if (not element.oclIsKindOf(Button))]		
	[generatePageElement(element, genModel)/]
	[/if]
[/for]

<div class="form-group">
	<div class="col-sm-offset-4 col-sm-10">
[for (element : PageElement | form.elements)]
	[if (element.oclIsKindOf(Button))]
	[generateButton(element.oclAsType(Button), genModel)/]
	[/if]
[/for]
	</div>
</div>
[if (hasSaveAction(form))]
	<input type="hidden"
		name="__form[ '[' /]id[ ']' /]" 
	[let formObject : Expression = getFormObject(form)]
		value="<?php echo (isset([generateExpression(formObject, genModel)/]->id) && [generateExpression(formObject, genModel)/]->id ? [generateExpression(formObject, genModel)/]->id : 0);?>"
	[/let]
		/>
[/if]

[for (parameter : Parameter | getElementPage(form).parameters)]
	<input type="hidden"
		name="__params-vars[ '['.concat(parameter.var).concat(']') /]"
		value="[if (parameter.type.oclIsKindOf(EClass))][parameter.classifier/]::<?php echo $[parameter.var/]->id; ?>[else]<?php echo $[parameter.var/]; ?>[/if]"
		/>
[/for]
[for (variable : VariableInitialization | getElementPage(form).variables)]
	<input type="hidden"
		name="__params-vars[ '['.concat(variable.var).concat(']') /]"
		value="[if (variable.type.oclIsKindOf(EClass))][variable.classifier/]::<?php echo $[variable.var/]->id; ?>[else]<?php echo $[variable.var/]; ?>[/if]"
		/>
[/for]

	<input type="hidden" 
		name="task"
		value="[if (hasSaveAction(form))][getFormObject(form).oclAsType(VariableExp).declaration.classifier.toLower()/].save[else]doAction[/if]"
		/>

	<input type="hidden"
		name="__source-page__"
		value="<?php echo base64_encode(JFactory::getURI()->toString()); ?>"
		/>
	
	<input type="hidden"
		name="__target-page__"
		value="<?php echo base64_encode(JFactory::getURI()->toString()); ?>"
		/>

	<input type="hidden"
		name="__required__"
		value="[generateFormRequiredFieldsList(form, genModel)/]"
		/>
		
	<?php echo JHtml::_('form.token'); ?>
</form>
[/template]

[template public generateFormRequiredFieldsList (form : Form, genModel : JoomlaGenModel) post (trim()) ]
[generateFormRequiredField(form, genModel)->sep(',')/]
[/template]

[template public generateFormRequiredField (form : Form, genModel : JoomlaGenModel) post (trim()) ]
[for (element : PageElement | form.elements)]
	[if (element.oclIsKindOf(Input))]
		[if (element.oclAsType(Input).required)]
			[element.name/]
		[/if]
	[/if]
[/for]
[/template]

[query public hasSaveAction (form : Form) : Boolean 
	= form.elements->exists(e | e.oclIsKindOf(Save)) /]


[template public generateText(txt : Text, genModel : JoomlaGenModel) post (trim())]
[if (txt._static)]
	[generateStaticText(txt)/]
[/if]
[if (not txt._static)]
	[generateDynamicText(txt, genModel)/]
[/if]
[/template]

[template protected generateStaticText(sTxt : Text)]
<div[generateAttributes(sTxt)/]><?php echo '[sTxt.content.oclAsType(StringConstant).value/]'; ?></div>
[/template]

[template protected generateDynamicText(dTxt : Text, genModel : JoomlaGenModel)]
<div[generateAttributes(dTxt)/]><?php echo [generateExpression(dTxt.content, genModel)/]; ?></div>
[/template]

[template public generateImage(img : Image, genModel : JoomlaGenModel) post (trim())]
[if (img._static)]
	[generateStaticImage(img, genModel)/]
[/if]
[if (not img._static)]
	[generateDynamicImage(img, genModel)/]
[/if]
[/template]

[template protected generateStaticImage(sImg : Image, genModel : JoomlaGenModel) post (trim())]
<img src="[generateStaticImageSource(sImg, genModel)/]"[generateAttributes(sImg)/]>
[/template]

[template protected generateDynamicImage (dImg : Image, genModel : JoomlaGenModel) post (trim())]
<img src="[generateDynamicImageSource(dImg, genModel)/]"[generateAttributes(dImg)/]>
[/template]

[template public generateStaticImageSource(img : Image, genModel : JoomlaGenModel) post (trim())]
[if (img.referenced)][img.source/][else]<?php echo JURI::base(); ?>media/[genModel.componentName/]/images/[generateExpression(img.source, genModel)/][/if]
[/template]

[template public generateDynamicImageSource (dImg : Image, genModel : JoomlaGenModel) post (trim())]
<?php echo [if (dImg.referenced)][generateExpression(dImg.source, genModel)/][else] JURI::base() ."media/[genModel.componentName/]/images/".[generateExpression(dImg.source, genModel)/][/if]; ?>
[/template]

[template public generateList(list : List, genModel : JoomlaGenModel)]
<?php
$list = [generateExpression(list.collection, genModel)/];
if ($list && is_array($list)):
?>
<div[generateAttributes(list)/]>
<?php
	foreach ($list as $[list.iteratorVariable.var/]):
?>
[for (element : PageElement | list.elements)]
	[generatePageElement(element, genModel)/]
[/for]
<?php
	endforeach;
?>
</div>
<?php
endif;
?>
[/template]

[template public generateLink(link : Link, genModel : JoomlaGenModel) post (trim())]
[if (link.oclIsKindOf(InternalLink))]
	[generateInternalLink(link.oclAsType(InternalLink), genModel)/]
[/if]
[if (link.oclIsKindOf(ExternalLink))]
	[generateExternalLink(link.oclAsType(ExternalLink), genModel)/]
[/if]
[/template]

[template public generateInternalLink(link : InternalLink, genModel : JoomlaGenModel) post (trim())]
<a href="[buildInternalURL(link, genModel)/]"[generateAttributes(link)/]>[generatePageElement(link.source, genModel)/]</a>
[/template]

[template public generateExternalLink(link : ExternalLink, genModel : JoomlaGenModel) post (trim())]
<a href="<?php echo [generateExpression(link.target, genModel)/]; ?>"[generateAttributes(link)/]>[generatePageElement(link.source, genModel)/]</a>
[/template]

[template public buildInternalURL(link : InternalLink, genModel : JoomlaGenModel) post (trim())]
?option=[genModel.componentName/]&view=[link.target.page.name/]&[link.actualParameters.generateActualParameter(genModel)->sep('&')/][if (link.target.name.size() > 0)]#[link.target.name/][/if]
[/template]

[template public generateActualParameter (parameter : ActualParameter, genModel : JoomlaGenModel) post (trim())]
[parameter.identifier/]=<?php echo [generateExpression(parameter.value, genModel)/]->id; ?>
[/template]

[template public generateFormElement(element : FormElement, genModel: JoomlaGenModel) ]
[if (element.oclIsKindOf(Input))]
[generateInput(element.oclAsType(Input), genModel)/]
[/if]
[/template]

[template public generateInput (input : Input, genModel : JoomlaGenModel) ]
<div class="form-group<?php echo $formState && empty($formState[ '[' /]'[input.name/]'[ ']' /]) ? ' has-error': ''; ?>">
	<label class="col-sm-4 control-label"><?php echo [if (not input.label.oclIsUndefined())][generateExpression(input.label, genModel)/][/if]; ?></label>
	<div class="col-sm-8">
[if (input.oclIsKindOf(TextInput))]
[generateTextInput(input.oclAsType(TextInput), genModel)/]
[/if]
[if (input.oclIsKindOf(SelectionList))]
[generateSelectionList(input.oclAsType(SelectionList), genModel)/]
[/if]
	</div>
</div>
[/template]

[template public generateButton (button : Button, genModel : JoomlaGenModel) ]
<button type="[generateButtonType(button)/]" class="btn[if (button.oclIsKindOf(Submit))] btn-primary[/if] [button.class/]">[button.value/]</button>
[if (button.oclIsKindOf(Submit))]
	[generateSubmitButton(button.oclAsType(Submit), genModel)/]
[/if]
[/template]

[template public generateTextInput (textInput : TextInput, genModel : JoomlaGenModel) ]
[if (textInput.isTextArea)]
[generateTextArea(textInput, genModel)/]
[else]
<input 
	id="[generateInputID(textInput, genModel)/]"
	type="[if (textInput.isPassword)]password[else]text[/if]"
	name="[generateInputName(textInput, genModel)/]"
	value="<?php echo [generateExpression(textInput.value, genModel)/]; ?>"
	class="[generateInputClass(textInput, genModel)/]"
	/>
[/if]
[/template]

[template public generateInputName (input : Input, genModel : JoomlaGenModel) ]
__form[ '[' /][input.name/][ ']' /]
[/template]

[template public generateInputID (input : Input, genModel : JoomlaGenModel) ]
[input.name/]_[generateID()/]
[/template]

[template public generateInputClass (input : Input, genModel : JoomlaGenModel) post (trim())]
[if (input.oclIsKindOf(SelectionList))]
	[let selectionList : SelectionList = input.oclAsType(SelectionList)]
		[if (selectionList.rendering = SelectionListRendering::DropDown)]
			form-control	
		[/if]
	[/let]
[else]
form-control	
[/if]
[if (input.required)] required[/if][if (not input.class.oclIsUndefined())] [input.class/][/if]
[/template]

[template public generateSelectionList (selectionList : SelectionList, genModel : JoomlaGenModel) ]
[if (selectionList.rendering = SelectionListRendering::DropDown)]
<select 
	id="[generateInputID(selectionList, genModel)/]"
	name="[generateInputName(selectionList, genModel)/][if (selectionList.isMultiple)][ '[' /][ ']' /][/if]"
	class="[generateInputClass(selectionList, genModel)/]">
	[if (not selectionList.isMultiple)]
	<option value="">-- Select One --</option>
	[/if]
[generateSelectionListOptions(selectionList, genModel)/]
</select>
[else]
[generateSelectionListOptions(selectionList, genModel)/]
[/if]
[/template]

[template public generateSelectionListOptions (selectionList : SelectionList, genModel : JoomlaGenModel) ]
<?php
	$options = [generateExpression(selectionList.options, genModel)/];
[if (selectionList.options.oclIsKindOf(ListExp))]
	foreach($options as $key => $value):
[else]
	if (is_array($options)):
		foreach($options as $option): 
[/if]
?>
[if (selectionList.rendering = SelectionListRendering::DropDown)][generateDropDownOption(selectionList, genModel)/][/if]
[if (selectionList.rendering = SelectionListRendering::Radio)][generateRadioOption(selectionList, genModel)/][/if]
[if (selectionList.rendering = SelectionListRendering::Checkbox)][generateCheckboxOption(selectionList, genModel)/][/if]
<?php
[if (selectionList.options.oclIsKindOf(ListExp))]
	endforeach;
[else]
		endforeach; 
	endif;
[/if]
?>
[/template]

[template public generateDropDownOption (dropDown : SelectionList, genModel : JoomlaGenModel) ]
[if (dropDown.options.oclIsKindOf(ListExp))]
<option 
	value="<?php echo $key; ?>"
[if (dropDown.isMultiple)]
	<?php 
		foreach ([generateExpression(dropDown.value, genModel)/] as $selected):
			if ($key === $selected): 
	?>
	selected="selected"
	<?php 
			endif;
		endforeach; 
	?>
[else]
	<?php if ($key === [generateExpression(dropDown.value, genModel)/]): ?>
	selected="selected"
	<?php endif; ?>	
[/if]
	>
	<?php echo $value; ?>
</option>
[else]
<option
	value="<?php echo $option->id; ?>"
[if (dropDown.isMultiple)]
	<?php 
		foreach ([generateExpression(dropDown.value, genModel)/] as $selected):
			if ($option->id == $selected->id): 
	?>
	selected="selected"
	<?php 
			endif;
		endforeach; 
	?>
[else]
	<?php if ($option->id == [generateExpression(dropDown.value, genModel)/]): ?>
	selected="selected"
	<?php endif; ?>	
[/if]
	>
	<?php echo $option; ?>
</option>	
[/if]
[/template]

[template public generateRadioOption (radio : SelectionList, genModel : JoomlaGenModel) ]
<label class="radio-inline">
	<input 
		id="[generateInputID(radio, genModel)/]"
		type="radio" 
		name="[generateInputName(radio, genModel)/]"
		class="[generateInputClass(radio, genModel)/]"
[if (radio.options.oclIsKindOf(ListExp))]
		value="<?php echo $key; ?>"
	<?php if ($key == [generateExpression(radio.value, genModel)/]): ?>
		checked="checked"
	<?php endif; ?>
		/>
	<?php echo $value; ?>
[else]
		value="<?php echo $option->id; ?>"
	<?php if ($option->id == [generateExpression(radio.value, genModel)/]): ?>
		checked="checked"
	<?php endif; ?>
		/>
	<?php echo $option; ?>
[/if]
</label>
[/template]

[template public generateCheckboxOption (checkbox : SelectionList, genModel : JoomlaGenModel) ]
<label class="checkbox-inline">
<input
	id="[generateInputID(checkbox, genModel)/]"
	type="checkbox" 
	name="[generateInputName(checkbox, genModel)/][ '[' /][ ']' /]"
	class="[generateInputClass(checkbox, genModel)/]"
[if (checkbox.options.oclIsKindOf(ListExp))]
	value="<?php echo $key; ?>"
	<?php
		foreach ([generateExpression(checkbox.value, genModel)/] as $selected):
			if ($key === $selected): 
	?>
	checked="checked"
	<?php
			endif;
		endforeach; 
	?>
	/>
<?php echo $value; ?>
[else]
	value="<?php echo $option->id; ?>"
	<?php
		foreach ([generateExpression(checkbox.value, genModel)/] as $selected):
			if ($option->id == $selected->id): 
	?>
	checked="checked"
	<?php 
			endif;
		endforeach; 
	?>
	/>
<?php echo $option; ?>
[/if]
</label>
[/template]


[template public generateButtonType (button : Button) post (trim())]
[if (button.type = ButtonType::Submit)]submit[elseif (button.type = ButtonType::Reset or button.oclIsKindOf(Reset))]reset[else]button[/if]
[/template]

[template public generateTextArea (textInput : TextInput, genModel : JoomlaGenModel) ]
<textarea
	id="[generateInputID(textInput, genModel)/]"
	name="[generateInputName(textInput, genModel)/]"
	class="[generateInputClass(textInput, genModel)/]"
	rows="5"><?php echo [generateExpression(textInput.value, genModel)/]; ?></textarea>
[/template]

[template public generateSubmitButton (submit : Submit, genModel : JoomlaGenModel) ]
<input type="hidden" 
	name="__performer__"
	value="[generateSubmitPerformer(submit, genModel)/]"
	/>
[generateSubmitPerformerArguments(submit, genModel)/]

<input type="hidden" 
	name="__validator__" 
	value="[generateSubmitValidator(submit, genModel)/]"
	/>
[generateSubmitValidatorArguments(submit, genModel)/]

[/template]	

[template public generateSubmitPerformer (submit : Submit, genModel : JoomlaGenModel) post (trim()) ]
[if (submit.oclIsKindOf(Save))]
	[submit.oclAsType(Save).performer.oclAsType(VariableExp).declaration.classifier/]
[else]
[if (not submit.performer.oclIsUndefined() and submit.performer.oclIsKindOf(ClassifierOperation))]
	[let exp : ClassifierOperation = submit.performer.oclAsType(ClassifierOperation)]
		[exp.source.oclAsType(VariableExp).declaration.type.oclAsType(EClassifier).name/].[exp.identifier/]
	[/let]
[/if]
[/if]
[/template]

[template public generateSubmitValidator (submit : Submit, genModel : JoomlaGenModel) post (trim()) ]
[if (not submit.validator.oclIsUndefined() and submit.validator.oclIsKindOf(ClassifierOperation))]
[let exp : ClassifierOperation = submit.validator.oclAsType(ClassifierOperation)]
	[exp.source.oclAsType(VariableExp).declaration.type.oclAsType(EClassifier).name/].[exp.identifier/]
[/let]
[/if]
[/template]

[template public generateSubmitPerformerArguments (submit : Submit, genModel : JoomlaGenModel) ]
[if (not submit.performer.oclIsUndefined() and submit.performer.oclIsKindOf(ClassifierOperation))]
[let exp : ClassifierOperation = submit.performer.oclAsType(ClassifierOperation)]
[for (argument : Expression | exp.arguments)]
<input type="hidden"
	name="__performer-arguments[ '[' /][ ']' /]"
[if (argument.oclIsKindOf(VariableExp))]
	value="[argument.oclAsType(VariableExp).var/]"
[/if]
	/>
[/for]
[/let]
[/if]
[/template]

[template public generateSubmitValidatorArguments (submit : Submit, genModel : JoomlaGenModel) ]
[if (not submit.validator.oclIsUndefined() and  submit.validator.oclIsKindOf(ClassifierOperation))]
[let exp : ClassifierOperation = submit.validator.oclAsType(ClassifierOperation)]
[for (argument : Expression | exp.arguments)]
<input type="hidden"
	name="__validator-arguments[ '[' /][ ']' /]"
[if (argument.oclIsKindOf(VariableExp))]
	value="[argument.oclAsType(VariableExp).var/]"
[/if]
	/>
[/for]
[/let]
[/if]
[/template]