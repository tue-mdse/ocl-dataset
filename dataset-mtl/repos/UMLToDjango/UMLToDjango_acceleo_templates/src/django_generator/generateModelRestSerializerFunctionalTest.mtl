[comment encoding = UTF-8 /]
[module generateModelRestSerializerFunctionalTest('http://www.eclipse.org/uml2/5.0.0/UML')]
[import django_generator::generateModelInstance/]
[import django_generator::generateFileHeaderComment/]
[import django_generator::generateAssociationClassImports/]

[query public getCurrentDateString(traceabilityContext : OclAny): 
    String = invoke('django_generator.Generate', 'getCurrentDateString()', Sequence{})
/]



[template public generateModelRestSerializerFunctionalTest(c : Class, pk:Package)]
[file(pk.name+'/tests/'+getCurrentDateString()+'/__init__.py',false)]
[/file]
[file(pk.name+'/tests/'+getCurrentDateString()+'/test_functional_'+c.name.toLower()+'restserializer.py',false)]
[generateFileHeaderComment(pk)/]
from rest_framework import status
from rest_framework.test import APITestCase
from autofixture import AutoFixture
from [pk.name/].model.[c.name.toLowerCase()/] import [c.name/]
[c.generateAssociationClassImports(pk)/]

class [c.name/]RestSerializerFunctionalTests(APITestCase):
	
	fixture = AutoFixture([c.name/],generate_fk=True)
	

	def test_detail(self):
		"""
		"""
		"""
		Creating an instance to download from REST, autogenerated from a fixture
		"""
		instance = [c.name/]RestSerializerFunctionalTests.fixture.create(1)['['/]0[']'/]
		
		"""
		Downloading it with GET endpoint and instance pk
		"""
		url = '/[pk.name.toLowerCase()/]/[c.name.toLowerCase()/]/%s/' % instance.pk		

		response = self.client.get(url, format='json')
		
		self.assertEqual(response.status_code, status.HTTP_200_OK)

	def test_list(self):
		"""
		"""

		url = '/[pk.name.toLowerCase()/]/[c.name.toLowerCase()/]/'
		
		response = self.client.get(url, format='json')
		
		self.assertEqual(response.status_code, status.HTTP_200_OK)
	

	def test_options(self):
		"""
		"""
		url = '/[pk.name.toLowerCase()/]/[c.name.toLowerCase()/]/'
		
		response = self.client.options(url, format='json')
		
		self.assertEqual(response.status_code, status.HTTP_200_OK)

	def test_post(self):
		"""
		:return:
		"""

		POST_DATA = [c.generateInitDict()/]

		url = '/[pk.name.toLowerCase()/]/[c.name.toLowerCase()/]/'
		
		data = POST_DATA
		
		response = self.client.post(url, data, format='json')
		
		self.assertEqual(response.status_code, status.HTTP_201_CREATED)
		
	def test_put(self):
		"""
		"""
		PUT_DATA = [c.generateInitDict()/]

		instance = [c.name/]RestSerializerFunctionalTests.fixture.create(1)['['/]0[']'/]	
		
		url = '/[pk.name.toLowerCase()/]/[c.name.toLowerCase()/]/%s/' % instance.id
		
		data = PUT_DATA
		
		response = self.client.put(url, data, format='json')
		
		self.assertEqual(response.status_code, status.HTTP_200_OK)

	def test_patch(self):
		"""
		"""
		PATCH_DATA = [c.generateInitDict()/]

		instance = [c.name/]RestSerializerFunctionalTests.fixture.create(1)['['/]0[']'/]	
		
		url = '/[pk.name.toLowerCase()/]/[c.name.toLowerCase()/]/%s/' % instance.id
		
		data = PATCH_DATA
		
		response = self.client.patch(url, data, format='json')
		
		self.assertEqual(response.status_code, status.HTTP_200_OK)


	def test_delete(self):
		"""
		"""
		"""
		Creating an instance to download from REST, autogenerated from a fixture
		"""
		instance = [c.name/]RestSerializerFunctionalTests.fixture.create(1)['['/]0[']'/]
		
		"""
		Downloading it with GET endpoint and instance pk
		"""
		url = '/[pk.name.toLowerCase()/]/[c.name.toLowerCase()/]/%s/' % instance.pk		

		response = self.client.delete(url, format='json')
		
		self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)

[/file]
[/template]
