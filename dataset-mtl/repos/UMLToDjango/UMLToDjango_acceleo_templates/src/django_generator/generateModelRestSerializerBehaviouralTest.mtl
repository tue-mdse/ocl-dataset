[comment encoding = UTF-8 /]
[module generateModelRestSerializerBehaviouralTest('http://www.eclipse.org/uml2/5.0.0/UML')]
[import django_generator::generateModelInstance/]
[import django_generator::generateFileHeaderComment/]
[import django_generator::generateAssociationClassImports/]

[query public getCurrentDateString(traceabilityContext : OclAny): 
    String = invoke('django_generator.Generate', 'getCurrentDateString()', Sequence{})
/]

[template public generateModelRestSerializerBehaviouralTest(c : Class, pk:Package)]

[file(pk.name+'/tests/'+getCurrentDateString()+'/test_behavioural_'+c.name.toLower()+'restserializer.py',false)]
[generateFileHeaderComment(pk)/]
import json
from django.contrib.contenttypes.models import ContentType
from rest_framework import status
from rest_framework.test import APITestCase
from autofixture import AutoFixture
from [pk.name/].model.[c.name.toLowerCase()/] import [c.name/]
[c.generateAssociationClassImports(pk)/]

class [c.name/]RestSerializerBehaviouralTests(APITestCase):
	fixture = AutoFixture([c.name/], generate_fk=True)
	
	def test_expected_schema(self):
		"""
		This test will check if [c.name/] REST GET Endpoint 
		returns a JSON that conforms to [c.name/] class schema.
		"""

		"""
		Creating an instance to download from REST, autogenerated from a fixture
		"""
		instance = [c.name/]RestSerializerBehaviouralTests.fixture.create(1)['['/]0[']'/]
		
		"""
		Downloading it with GET endpoint and instance pk
		"""
		url = '/[pk.name.toLowerCase()/]/[c.name.toLowerCase()/]/%s/' % instance.pk
		response = self.client.get(url, format='json')
		self.assertEqual(response.status_code, status.HTTP_200_OK)
		view_model_instance = json.loads(response.content)

		[for(p:Property | c.getAllAttributes())]
		"""
		Behavioral Validation of property [p.name/],
		Is expected that [p.name/] exists in representation
		"""
		self.assertIn('[p.name/]',view_model_instance, 'Field [p.name/] is not in [c.name/] json representation' )

		if '[p.name/]' in view_model_instance:
			[p.expectedSchemaPropertyValidation(c,pk)/]
		[/for]
	
	
	INVALID_POST_DATA = ['['/][']'/]
	
	def test_invalid_post_data(self):
		
		url = '/[pk.name.toLowerCase()/]/[c.name.toLowerCase()/]/'
		
		[c.generateWrongData(pk)/]
		
		data = [c.name/]RestSerializerBehaviouralTests.INVALID_POST_DATA
		
		for d in data:
			response = self.client.post(url, d, format='json')
			self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST, '%s is considered valid' % d)
[/file]
[/template]


[template public expectedSchemaPropertyValidation(p:Property,c:Class, pk:Package)]
[if(p.lowerBound() > 0)]
[if(p.isMultivalued())]
"""
Expected multiplicity is ([p.lowerBound()/],[p.upperBound()/])
"""
self.assertNotEqual(view_model_instance['['/]'[p.name/]'[']'/],['['/][']'/])
[else]
"""
Expected multiplicity is ([p.lowerBound()/],[p.upperBound()/])
"""
self.assertNotEqual(view_model_instance['['/]'[p.name/]'[']'/],None)
[/if]
[/if]
"""
Expected type is UML::[p.type.name/]
"""
[if(not(p.type.name.oclIsUndefined()))]
[if(p.type.oclIsKindOf(Integer) or p.type.name.equalsIgnoreCase('int'))]
self.assertIsInstance(view_model_instance['['/]'[p.name/]'[']'/],int,'[p.name/] attribute is not an integer')
[elseif( p.type.name.equalsIgnoreCase('float'))]
self.assertIsInstance(view_model_instance['['/]'[p.name/]'[']'/],float,'[p.name/] attribute is not a float')
[elseif(p.type.name.equalsIgnoreCase('date'))]
#TODO: Add date support
[elseif(p.type.name.equalsIgnoreCase('datetime'))]
#TODO: Add datetime support
[elseif(p.type.oclIsKindOf(String) or p.type.name.equalsIgnoreCase('string'))]
self.assertIsInstance(view_model_instance['['/]'[p.name/]'[']'/],basestring,'[p.name/] attribute is not a string')
[elseif(p.type.oclIsKindOf(Boolean) or p.type.name.equalsIgnoreCase('boolean'))]
self.assertIsInstance(view_model_instance['['/]'[p.name/]'[']'/],bool,'[p.name/] attribute is not a boolean')
[else]
[for (a : Association | c.getAssociations())]
[if(p.name.equalsIgnoreCase(a.memberEnd->first().name))]
[expectedSchemaRelationshipValidation(c,pk,a.memberEnd->first(), a.memberEnd->last(),a)/]
[elseif(p.name.equalsIgnoreCase(a.memberEnd->last().name))]
[expectedSchemaRelationshipValidation(c,pk,a.memberEnd->last(), a.memberEnd->first(),a)/][/if]
[/for]
[/if]
[/if]
[/template]


[template public expectedSchemaRelationshipValidation(c:Class, pk:Package, source : Property, target: Property, a : Association)]
[if(not(target.type.name.oclIsUndefined()))]
[if(target.lowerBound() > 0)]
ct=ContentType.objects.filter(model='[target.type.name.toLowerCase()/]').first()
[if(source.isMultivalued())]
pks=ct.model_class().objects.filter(pk__in=view_model_instance['['/]'[source.name/]'[']'/]).values_list('pk',flat=True)
"""
Checking if related element exists
"""
self.assertItemsEqual(view_model_instance['['/]'[source.name/]'[']'/],list(pks),'One or more primary key for [target.type.name/] in field [source.name/] does not exist')
[else]
"""
Checking if related element exists
"""
self.assertTrue(ct.model_class().objects.filter(pk=view_model_instance['['/]'[source.name/]'[']'/]).exists(),'No [target.type.name/] found for primary_key %s' % view_model_instance['['/]'[source.name/]'[']'/])
[/if]
[/if]
[/if]
[/template]


[template public generateWrongData(c:Class,pk:Package)]
VALID_DATA=[c.generateInitDict()/]
[for(p:Property | c.getAllAttributes())]
"""
Testing property [p.name/]
"""
[if(p.lowerBound() > 0)]
"""
Testing [p.name/] multiplicity
"""
[p.name.toUpperCase()/]_INVALID_DATA_MULTIPLICITY = VALID_DATA.copy()
[p.name.toUpperCase()/]_INVALID_DATA_MULTIPLICITY['['/]'[p.name.toLowerCase()/]'[']'/] = None
[c.name/]RestSerializerBehaviouralTests.INVALID_POST_DATA.append([p.name.toUpperCase()/]_INVALID_DATA_MULTIPLICITY)
[/if]
[if(not(p.type.name.oclIsUndefined()))]
"""
Testing [p.name/] type
Expected type is UML::[p.type.name/]
"""
[p.name.toUpperCase()/]_INVALID_DATA_TYPE = VALID_DATA.copy()
[if(p.type.oclIsKindOf(Integer) or p.type.name.equalsIgnoreCase('int'))]
[p.name.toUpperCase()/]_INVALID_DATA_TYPE['['/]'[p.name.toLowerCase()/]'[']'/] = 'wrong_data'
[elseif( p.type.name.equalsIgnoreCase('float'))]
[p.name.toUpperCase()/]_INVALID_DATA_TYPE['['/]'[p.name.toLowerCase()/]'[']'/] = 'wrong_data'
[elseif(p.type.name.equalsIgnoreCase('date'))]
#TODO: Add date support
[elseif(p.type.name.equalsIgnoreCase('datetime'))]
#TODO: Add datetime support
[elseif(p.type.oclIsKindOf(String) or p.type.name.equalsIgnoreCase('string'))]
[p.name.toUpperCase()/]_INVALID_DATA_TYPE['['/]'[p.name.toLowerCase()/]'[']'/] = {'value':1231432}
[elseif(p.type.oclIsKindOf(Boolean) or p.type.name.equalsIgnoreCase('boolean'))]
[p.name.toUpperCase()/]_INVALID_DATA_TYPE['['/]'[p.name.toLowerCase()/]'[']'/] = 'wrong_data'
[else]
[for (a : Association | c.getAssociations())]
[if(p.name.equalsIgnoreCase(a.memberEnd->first().name))]
[generateInvalidRelationshipData(c,pk,a.memberEnd->first(), a.memberEnd->last(),a)/]
[elseif(p.name.equalsIgnoreCase(a.memberEnd->last().name))]
[generateInvalidRelationshipData(c,pk,a.memberEnd->last(), a.memberEnd->first(),a)/][/if]
[/for]
[/if]
[c.name/]RestSerializerBehaviouralTests.INVALID_POST_DATA.append([p.name.toUpperCase()/]_INVALID_DATA_TYPE)
[/if][/for]
[/template]

[template public generateInvalidRelationshipData(c:Class, pk:Package, source : Property, target: Property, a : Association)]
[if(not(source.type.name.oclIsUndefined()))]
"""
Creating an instance of [source.type.name/]
Storing pk in wrong_pk variable
Deleting the created instance, in this way we have a wrong pk
"""
ct=ContentType.objects.filter(model='[source.type.name.toLowerCase()/]').first()
fixture = AutoFixture(ct.model_class(), generate_fk=True)
new_instance=fixture.create(1)['['/]0[']'/]
wrong_pk=new_instance.pk
new_instance.delete()

[if(source.isMultivalued())]
[source.name.toUpperCase()/]_INVALID_DATA_TYPE['['/]'[source.name.toLowerCase()/]'[']'/] = ['['/]wrong_pk[']'/]
[else]
[source.name.toUpperCase()/]_INVALID_DATA_TYPE['['/]'[source.name.toLowerCase()/]'[']'/] = wrong_pk
[/if]
[/if]
[/template]
