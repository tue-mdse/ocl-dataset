[comment encoding = UTF-8 /]

[module generate('http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation', 
	'http://www.eclipse.org/emf/2002/Ecore', 
	'http://org.gemoc.moccml/1.0', 
	'http://fr.inria.aoste.timemodel',
	'http://org.gemoc.moccml.fsmmodel/1.0',
	'http://org.gemoc.arduino.concurrent.xarduino/arduino/') ]

[template public generate(aProject : Project)]
[comment @main/]
[file (aProject.name+'_withMoC-.clocksystem', false, 'UTF-8')]

"Some global constants"
|system moccmllibs ccsllibs|
"MoCCML librairies specifications" 

	"CCSL librairies specifications"


"Instanciation" 


system := ClockSystem named: '[aProject.name/]_withMoC-'.
system addLibrary:moccmllibs asDictionary.
"system addLibs:ccsllibs asDictionary."

[for (element : arduino::Instruction| aProject.eAllContents(arduino::Instruction))]
"clocks for Instruction [element.name/]" 
[if((not ((self).oclIsKindOf(ModuleGet)))) ]system addClocks: #(start[element.name/]).[/if]
[if((not ((self).oclIsKindOf(ModuleGet)))) ]system addClocks: #(stop[element.name/]).[/if]

[/for]
[for (element : arduino::Sketch| aProject.eAllContents(arduino::Sketch))]
"clocks for Sketch [element.name/]" 
system addClocks: #(start[element.name/]).
system addClocks: #(stop[element.name/]).

[/for]
[for (element : arduino::Control| aProject.eAllContents(arduino::Control))]
"clocks for Control [element.name/]" 
system addClocks: #(doEvaluate[element.name/]).
system addClocks: #(evaluatedToTrue[element.name/]).
system addClocks: #(evaluatedToFalse[element.name/]).

[/for]
[for (element : arduino::ArduinoCommunicationModule| aProject.eAllContents(arduino::ArduinoCommunicationModule))]
"clocks for ArduinoCommunicationModule [element.name/]" 
[if((self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eAllContents(ModuleAssignment)->select(ma|(ma).oclAsType(ModuleAssignment).module = self))->size() >0) ]system addClocks: #(send[element.name/]).[/if]
[if((self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eAllContents(ModuleGet)->select(ma|(ma).oclAsType(ModuleGet).module = self))->size() >0) ]system addClocks: #(receive[element.name/]).[/if]

[/for]
[for (element : arduino::PushButton| aProject.eAllContents(arduino::PushButton))]
"clocks for PushButton [element.name/]" 
system addClocks: #(toggleIt[element.name/]).

[/for]
[for (element : arduino::Delay| aProject.eAllContents(arduino::Delay))]
"clocks for Delay [element.name/]" 
[/for]
[for (element : arduino::If| aProject.eAllContents(arduino::If))]
"clocks for If [element.name/]" 
"internal clocks for arduino::If [element.name/]" 
	system addInternalClocks: #(i_trueOrFalse[element.name/]).
system addInternalClocks: #(i_lastInstructionfromthenOrFalse[element.name/]).
system addInternalClocks: #(i_lastInstructionfromthenOrElse[element.name/]).

[/for]
[for (element : arduino::While| aProject.eAllContents(arduino::While))]
"clocks for While [element.name/]" 
"internal clocks for arduino::While [element.name/]" 
	system addInternalClocks: #(w_startOrEndLoop[element.name/]).
system addInternalClocks: #(w_trueOrFalse[element.name/]).

[/for]
[for (element : arduino::Repeat| aProject.eAllContents(arduino::Repeat))]
"clocks for Repeat [element.name/]" 
"internal clocks for arduino::Repeat [element.name/]" 
	system addInternalClocks: #(r_startOrEndLoop[element.name/]).
system addInternalClocks: #(r_trueOrFalse[element.name/]).

[/for]
[for (element : arduino::ModuleGet| aProject.eAllContents(arduino::ModuleGet))]
"clocks for ModuleGet [element.name/]" 
[/for]
[for (element : arduino::ModuleAssignment| aProject.eAllContents(arduino::ModuleAssignment))]
"clocks for ModuleAssignment [element.name/]" 
[/for]
[for (element : arduino::BluetoothTransceiver| aProject.eAllContents(arduino::BluetoothTransceiver))]
"clocks for BluetoothTransceiver [element.name/]" 
[/for]
[for (element : arduino::VariableAssignment| aProject.eAllContents(arduino::VariableAssignment))]
"clocks for VariableAssignment [element.name/]" 
[/for]

[for (element : arduino::Instruction| aProject.eAllContents(arduino::Instruction))]
"relations for Instruction [element.name/]" 
	"I_OrderEnforcement in Instruction [element.name/]"
		[if ( ( self.oclAsType(ecore::EObject).eContainer().oclAsType(Block).instructions->last() <> self) ) ]
	system library: #Kernel relation: #Precedes clocks: #(stop[element.name/]  start[element.oclAsType(ecore::EObject).eContainer().oclAsType(arduino::Block).instructions->at(element.oclAsType(ecore::EObject).eContainer().oclAsType(Block).instructions->indexOf(self)+1).name/])  constants:{-1} .
		[/if]
	"I_atomicbutDelayAndControlAndModuleGet in Instruction [element.name/]"
		[if ( ( (not (self.oclIsKindOf(Delay))) and (not (self.oclIsKindOf(Control))) and (not (self.oclIsKindOf(ModuleGet)))) ) ]
	system library: #Kernel relation: #Coincides clocks: #(start[element.name/]  stop[element.name/]) .
		[/if]
[/for]
[for (element : arduino::Sketch| aProject.eAllContents(arduino::Sketch))]
"relations for Sketch [element.name/]" 
	"S_nonReentrant in Sketch [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Alternates clocks: #(start[element.name/]  stop[element.name/]) .
		[/if]
	"S_startInternalFirst in Sketch [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Coincides clocks: #(start[element.name/]  start[element.block.instructions->first().name/]) .
		[/if]
	"S_stopInternalFirst in Sketch [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Coincides clocks: #(stop[element.block.instructions->last().name/]  stop[element.name/]) .
		[/if]
[/for]
[for (element : arduino::Control| aProject.eAllContents(arduino::Control))]
"relations for Control [element.name/]" 
[/for]
[for (element : arduino::ArduinoCommunicationModule| aProject.eAllContents(arduino::ArduinoCommunicationModule))]
"relations for ArduinoCommunicationModule [element.name/]" 
[/for]
[for (element : arduino::PushButton| aProject.eAllContents(arduino::PushButton))]
"relations for PushButton [element.name/]" 
[/for]
[for (element : arduino::Delay| aProject.eAllContents(arduino::Delay))]
"relations for Delay [element.name/]" 
	"D_NonAtomic in Delay [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Alternates clocks: #(start[element.name/]  stop[element.name/]) .
		[/if]
[/for]
[for (element : arduino::If| aProject.eAllContents(arduino::If))]
"expressions used by  If [element.name/]" 

	[if ( true) ]
	system allUnion: #(evaluatedToFalse[element.name/] evaluatedToTrue[element.name/]) named: #i_trueOrFalse[element.name/]. 
	[/if]
 

	[if ( true) ]
	system allUnion: #(stop[element.block.instructions->last().name/] evaluatedToFalse[element.name/]) named: #i_lastInstructionfromthenOrFalse[element.name/]. 
	[/if]
 

	[if ( true) ]
	system allUnion: #(stop[element.block.instructions->last().name/] stop[element.elseBlock.instructions->last().name/]) named: #i_lastInstructionfromthenOrElse[element.name/]. 
	[/if]
 
"relations for If [element.name/]" 
	"I_nonReentrant in If [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Alternates clocks: #(start[element.name/]  stop[element.name/]) .
		[/if]
	"I_startMeansEvaluate in If [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(start[element.name/]  doEvaluate[element.name/])  constants:{-1} .
		[/if]
	"I_evaluatingResultsInTrueOrFalse in If [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(doEvaluate[element.name/]  i_trueOrFalse[element.name/])  constants:{-1} .
		[/if]
	"I_trueExclusifFalse in If [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Exclusion clocks: #(evaluatedToFalse[element.name/]  evaluatedToTrue[element.name/]) .
		[/if]
	"I_startInternalofThen in If [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Coincides clocks: #(evaluatedToTrue[element.name/]  start[element.block.instructions->first().name/]) .
		[/if]
	"I_startInternalofElse in If [element.name/]"
		[if ( ( self.elseBlock <> null) ) ]
	system library: #Kernel relation: #Coincides clocks: #(evaluatedToFalse[element.name/]  start[element.elseBlock.instructions->first().name/]) .
		[/if]
	"I_startInternalofElseEmpty in If [element.name/]"
		[if ( ( self.elseBlock = null) ) ]
	system library: #Kernel relation: #Precedes clocks: #(i_lastInstructionfromthenOrFalse[element.name/]  stop[element.name/])  constants:{-1} .
		[/if]
	"I_stopInternalFirst in If [element.name/]"
		[if ( ( self.elseBlock <> null) ) ]
	system library: #Kernel relation: #Precedes clocks: #(i_lastInstructionfromthenOrElse[element.name/]  stop[element.name/])  constants:{-1} .
		[/if]
[/for]
[for (element : arduino::While| aProject.eAllContents(arduino::While))]
"expressions used by  While [element.name/]" 

	[if ( true) ]
	system allUnion: #(start[element.name/] stop[element.block.instructions->last().name/]) named: #w_startOrEndLoop[element.name/]. 
	[/if]
 

	[if ( true) ]
	system allUnion: #(evaluatedToFalse[element.name/] evaluatedToTrue[element.name/]) named: #w_trueOrFalse[element.name/]. 
	[/if]
 
"relations for While [element.name/]" 
	"W_startOrFinishLoopMeansEvaluate in While [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Coincides clocks: #(w_startOrEndLoop[element.name/]  doEvaluate[element.name/]) .
		[/if]
	"W_evaluatingResultsInTrueOrFalse in While [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(doEvaluate[element.name/]  w_trueOrFalse[element.name/])  constants:{-1} .
		[/if]
	"W_trueExclusifFalse in While [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Exclusion clocks: #(evaluatedToFalse[element.name/]  evaluatedToTrue[element.name/]) .
		[/if]
	"W_startInternalFirst in While [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Coincides clocks: #(evaluatedToTrue[element.name/]  start[element.block.instructions->first().name/]) .
		[/if]
	"W_stopwhenEvaluatedFalse in While [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Coincides clocks: #(evaluatedToFalse[element.name/]  stop[element.name/]) .
		[/if]
[/for]
[for (element : arduino::Repeat| aProject.eAllContents(arduino::Repeat))]
"expressions used by  Repeat [element.name/]" 

	[if ( true) ]
	system allUnion: #(start[element.name/] stop[element.block.instructions->last().name/]) named: #r_startOrEndLoop[element.name/]. 
	[/if]
 

	[if ( true) ]
	system allUnion: #(evaluatedToFalse[element.name/] evaluatedToTrue[element.name/]) named: #r_trueOrFalse[element.name/]. 
	[/if]
 
"relations for Repeat [element.name/]" 
	"R_startMeansEvaluate in Repeat [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(r_startOrEndLoop[element.name/]  doEvaluate[element.name/])  constants:{-1} .
		[/if]
	"R_evaluatingResultsInTrueOrFalse in Repeat [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Precedes clocks: #(doEvaluate[element.name/]  r_trueOrFalse[element.name/])  constants:{-1} .
		[/if]
	"R_trueExclusifFalse in Repeat [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Exclusion clocks: #(evaluatedToFalse[element.name/]  evaluatedToTrue[element.name/]) .
		[/if]
	"R_startInternalFirst in Repeat [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Coincides clocks: #(evaluatedToTrue[element.name/]  start[element.block.instructions->first().name/]) .
		[/if]
	"R_stopwhenEvaluatedFalse in Repeat [element.name/]"
		[if ( true) ]
	system library: #Kernel relation: #Coincides clocks: #(evaluatedToFalse[element.name/]  stop[element.name/]) .
		[/if]
[/for]
[for (element : arduino::ModuleGet| aProject.eAllContents(arduino::ModuleGet))]
"relations for ModuleGet [element.name/]" 
	"waitIfInVariableAssignment in ModuleGet [element.name/]"
		[if ( ( self.module.oclIsKindOf(ArduinoCommunicationModule)
			and
		self.module.oclAsType(ecore::EObject).eContainer().oclIsKindOf(VariableAssignment)) ) ]
	system library: #Kernel relation: #Precedes clocks: #(receive[element.module.oclAsType(arduino::ArduinoCommunicationModule).name/]  start[element.module.oclAsType(ecore::EObject).eContainer().oclAsType(arduino::VariableAssignment).name/])  constants:{-1} .
		[/if]
[/for]
[for (element : arduino::ModuleAssignment| aProject.eAllContents(arduino::ModuleAssignment))]
"relations for ModuleAssignment [element.name/]" 
	"sendAfterAssignement in ModuleAssignment [element.name/]"
		[if ( ( self.module.oclIsKindOf(ArduinoCommunicationModule)) ) ]
	system library: #Kernel relation: #Alternates clocks: #(start[element.name/]  send[element.module.oclAsType(arduino::ArduinoCommunicationModule).name/]) .
		[/if]
[/for]
[for (element : arduino::BluetoothTransceiver| aProject.eAllContents(arduino::BluetoothTransceiver))]
"relations for BluetoothTransceiver [element.name/]" 
	"sendBeforeReceive in BluetoothTransceiver [element.name/]"
		[if ( ( (self.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eAllContents(ModuleAssignment)->select(ma|(ma).oclAsType(ModuleAssignment).module = self))->size() >0)  and ( self.connectedTransceiver <> null)  and ( (self.connectedTransceiver.oclAsType(ecore::EObject).eContainer().eContainer().eContainer().eAllContents(ModuleGet)->select(ma|(ma).oclAsType(ModuleGet).module = self.connectedTransceiver))->size() >0) ) ]
	system library: #Kernel relation: #Coincides clocks: #(send[element.name/]  receive[element.connectedTransceiver->first().name/]) .
		[/if]
	"allReceiveTogether in BluetoothTransceiver [element.name/]"
		[if ( ( self.connectedTransceiver->size() > 1) ) ]
	system library: #Kernel relation: #Coincides clocks: #() .
		[/if]
[/for]
[for (element : arduino::VariableAssignment| aProject.eAllContents(arduino::VariableAssignment))]
"relations for VariableAssignment [element.name/]" 
	"getDataIfModuleGetCom in VariableAssignment [element.name/]"
		[if ( ( self.eAllContents(ModuleGet)->select(mg | (mg).oclAsType(ModuleGet).module.oclIsKindOf(BluetoothTransceiver))->size() > 0) ) ]
	system library: #Kernel relation: #Alternates clocks: #(receive[element.eAllContents(ModuleGet)->select(mg|mg.oclAsType(arduino::ModuleGet).module.oclIsKindOf(arduino::BluetoothTransceiver))->asSequence()->first().oclAsType(arduino::ModuleGet).module.oclAsType(arduino::BluetoothTransceiver).name/]  start[element.name/]) .
		[/if]
[/for]
[/file]
[file ('ClkSysFunctionTest.clocksystem', false, 'UTF-8')]
SimpleSDF example1 system
[/file]


[/template]



