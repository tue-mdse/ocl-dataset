[comment encoding = UTF-8 /]

[module generate('http://fr.inria.aoste.timemodel.ccslmodel.clockexpressionandrelation', 
	'http://www.eclipse.org/emf/2002/Ecore', 
	'http://org.gemoc.moccml/1.0', 
	'http://fr.inria.aoste.timemodel',
	'http://org.gemoc.moccml.fsmmodel/1.0',
	'http://www.eclipse.org/xtend', 
	'http://www.eclipse.org/xtend/RichString', 
	'http://www.eclipse.org/xtext/xbase/Xbase',
	'http://org.gemoc.arduino.concurrent.xarduino/arduino/') ]
[template public generate(aProject : Project)]
[comment @main/]
[file (aProject.name+'_FiacreProcess.fcr', false, 'UTF-8')]
// *********************** Type Declaration ******************************/
const NUMBER_Boards : int is [aProject.eAllContents(Board)->size()/]
const NUMBER_Modules : int is [aProject.eAllContents(Module)->size()/]
const NUMBER_DigitalPins : int is [aProject.eAllContents(DigitalPin)->size()/]
const NUMBER_Pins : int is [aProject.eAllContents(Pin)->size()/]
const NUMBER_AnalogPins : int is [aProject.eAllContents(AnalogPin)->size()/]
const NUMBER_Sketchs : int is [aProject.eAllContents(Sketch)->size()/]
const NUMBER_Projects : int is [aProject.eAllContents(Project)->size()/]
const NUMBER_Instructions : int is [aProject.eAllContents(Instruction)->size()/]
const NUMBER_ModuleAssignments : int is [aProject.eAllContents(ModuleAssignment)->size()/]
const NUMBER_ModuleInstructions : int is [aProject.eAllContents(ModuleInstruction)->size()/]
const NUMBER_Controls : int is [aProject.eAllContents(Control)->size()/]
const NUMBER_Utilitiess : int is [aProject.eAllContents(Utilities)->size()/]
const NUMBER_Delays : int is [aProject.eAllContents(Delay)->size()/]
const NUMBER_Repeats : int is [aProject.eAllContents(Repeat)->size()/]
const NUMBER_ModuleGets : int is [aProject.eAllContents(ModuleGet)->size()/]
const NUMBER_Whiles : int is [aProject.eAllContents(While)->size()/]
const NUMBER_BinaryExpressions : int is [aProject.eAllContents(BinaryExpression)->size()/]
const NUMBER_Variables : int is [aProject.eAllContents(Variable)->size()/]
const NUMBER_VariableAssignments : int is [aProject.eAllContents(VariableAssignment)->size()/]
const NUMBER_BinaryIntegerExpressions : int is [aProject.eAllContents(BinaryIntegerExpression)->size()/]
const NUMBER_BinaryBooleanExpressions : int is [aProject.eAllContents(BinaryBooleanExpression)->size()/]
const NUMBER_Expressions : int is [aProject.eAllContents(Expression)->size()/]
const NUMBER_Constants : int is [aProject.eAllContents(Constant)->size()/]
const NUMBER_Ifs : int is [aProject.eAllContents(If)->size()/]
const NUMBER_IntegerConstants : int is [aProject.eAllContents(IntegerConstant)->size()/]
const NUMBER_BooleanConstants : int is [aProject.eAllContents(BooleanConstant)->size()/]
const NUMBER_BooleanExpressions : int is [aProject.eAllContents(BooleanExpression)->size()/]
const NUMBER_IntegerExpressions : int is [aProject.eAllContents(IntegerExpression)->size()/]
const NUMBER_Assignments : int is [aProject.eAllContents(Assignment)->size()/]
const NUMBER_IntegerVariables : int is [aProject.eAllContents(IntegerVariable)->size()/]
const NUMBER_BooleanVariables : int is [aProject.eAllContents(BooleanVariable)->size()/]
const NUMBER_BooleanModuleGets : int is [aProject.eAllContents(BooleanModuleGet)->size()/]
const NUMBER_IntegerModuleGets : int is [aProject.eAllContents(IntegerModuleGet)->size()/]
const NUMBER_UnaryExpressions : int is [aProject.eAllContents(UnaryExpression)->size()/]
const NUMBER_UnaryBooleanExpressions : int is [aProject.eAllContents(UnaryBooleanExpression)->size()/]
const NUMBER_UnaryIntegerExpressions : int is [aProject.eAllContents(UnaryIntegerExpression)->size()/]
const NUMBER_VariableDeclarations : int is [aProject.eAllContents(VariableDeclaration)->size()/]
const NUMBER_VariableRefs : int is [aProject.eAllContents(VariableRef)->size()/]
const NUMBER_IntegerVariableRefs : int is [aProject.eAllContents(IntegerVariableRef)->size()/]
const NUMBER_LEDs : int is [aProject.eAllContents(LED)->size()/]
const NUMBER_PushButtons : int is [aProject.eAllContents(PushButton)->size()/]
const NUMBER_Buzzers : int is [aProject.eAllContents(Buzzer)->size()/]
const NUMBER_RotationSensors : int is [aProject.eAllContents(RotationSensor)->size()/]
const NUMBER_MicroServos : int is [aProject.eAllContents(MicroServo)->size()/]
const NUMBER_InfraRedSensors : int is [aProject.eAllContents(InfraRedSensor)->size()/]
const NUMBER_AmbientLightSensors : int is [aProject.eAllContents(AmbientLightSensor)->size()/]
const NUMBER_SoundSensors : int is [aProject.eAllContents(SoundSensor)->size()/]
const NUMBER_Fans : int is [aProject.eAllContents(Fan)->size()/]
const NUMBER_MusicPlayers : int is [aProject.eAllContents(MusicPlayer)->size()/]
const NUMBER_ArduinoModules : int is [aProject.eAllContents(ArduinoModule)->size()/]
const NUMBER_Blocks : int is [aProject.eAllContents(Block)->size()/]
const NUMBER_ArduinoBoards : int is [aProject.eAllContents(ArduinoBoard)->size()/]
const NUMBER_ArduinoDigitalModules : int is [aProject.eAllContents(ArduinoDigitalModule)->size()/]
const NUMBER_ArduinoAnalogModules : int is [aProject.eAllContents(ArduinoAnalogModule)->size()/]
const NUMBER_BooleanVariableRefs : int is [aProject.eAllContents(BooleanVariableRef)->size()/]
const NUMBER_Objects : int is [aProject.eAllContents(Object)->size()/]
const NUMBER_ArduinoCommunicationModules : int is [aProject.eAllContents(ArduinoCommunicationModule)->size()/]
const NUMBER_BluetoothTransceivers : int is [aProject.eAllContents(BluetoothTransceiver)->size()/]

type Board_boardsArray is array [Project.eContents(Board)->size()/] of int
type Sketch_sketchesArray is array [Project.eContents(Sketch)->size()/] of int
type Instruction_instructionsArray is array [Block.eContents(Instruction)->size()/] of int
type DigitalPin_digitalPinsArray is array [ArduinoBoard.eContents(DigitalPin)->size()/] of int
type AnalogPin_analogPinsArray is array [ArduinoBoard.eContents(AnalogPin)->size()/] of int
type BluetoothTransceiver_connectedTransceiverArray is array [BluetoothTransceiver.eContents(BluetoothTransceiver)->size()/] of int


/*********************************************************************
Defining the Functions for : Instruction
**********************************************************************/
/*********************************************************************
Defining the Functions for : Sketch
**********************************************************************/
/*********************************************************************
Defining the Functions for : Control
**********************************************************************/
/*********************************************************************
Defining the Functions for : ArduinoCommunicationModule
**********************************************************************/
/*********************************************************************
Defining the Functions for : PushButton
**********************************************************************/
/*********************************************************************
Defining the Functions for : Delay
**********************************************************************/
/*********************************************************************
Defining the Functions for : If
**********************************************************************/
/*********************************************************************
Defining the Functions for : While
**********************************************************************/
/*********************************************************************
Defining the Functions for : Repeat
**********************************************************************/
/*********************************************************************
Defining the Functions for : ModuleGet
**********************************************************************/
/*********************************************************************
Defining the Functions for : ModuleAssignment
**********************************************************************/
/*********************************************************************
Defining the Functions for : BluetoothTransceiver
**********************************************************************/
/*********************************************************************
Defining the Functions for : VariableAssignment
**********************************************************************/
/************************* Instruction Process Instances***************************/
[for (element : Instruction| aProject.eAllContents(Instruction))]
process p[element.name/] ['['/][element.name/]_start:in none,[element.name/]_stop:in none[']'/](&global : SystemDataRoot, id : read int) is
	states s0
	var _self:Instruction
    from s0  [element.name/]_start; global:=Instruction_execute( global , global.refToElement_id) ;  to s0
    from s0  [element.name/]_stop; global:=Instruction_finalize( global , global.refToElement_id) ;  to s0
[/for]
/************************* Control Process Instances***************************/
[for (element : Control| aProject.eAllContents(Control))]
process p[element.name/] ['['/][element.name/]_doEvaluate:in none,[element.name/]_evaluatedToTrue:in none,[element.name/]_evaluatedToFalse:in none[']'/](&global : SystemDataRoot, id : read int) is
	states s0
	var _self:Control
    from s0  [element.name/]_doEvaluate; global:=Control_evaluate( global , global.refToElement_id) ;  to s0
    from s0  [element.name/]_evaluatedToTrue;  to s0
    from s0  [element.name/]_evaluatedToFalse;  to s0
[/for]
/************************* ArduinoCommunicationModule Process Instances***************************/
[for (element : ArduinoCommunicationModule| aProject.eAllContents(ArduinoCommunicationModule))]
process p[element.name/] ['['/][element.name/]_send:in none,[element.name/]_receive:in none[']'/](&global : SystemDataRoot, id : read int) is
	states s0
	var _self:ArduinoCommunicationModule
    from s0  [element.name/]_send; global:=ArduinoCommunicationModule_push( global , global.refToElement_id) ;  to s0
    from s0  [element.name/]_receive;  to s0
[/for]
/************************* PushButton Process Instances***************************/
[for (element : PushButton| aProject.eAllContents(PushButton))]
process p[element.name/] ['['/][element.name/]_toggleIt:in none[']'/](&global : SystemDataRoot, id : read int) is
	states s0
	var _self:PushButton
    from s0  [element.name/]_toggleIt; global:=PushButton_toggle( global , global.refToElement_id) ;  to s0
[/for]
process pUnConstrainedSemantics['['/][for (element : Instruction| aProject.eAllContents(Instruction))]
[element.name/]_start:out none,[element.name/]_stop:out none,[/for][for (element : Sketch| aProject.eAllContents(Sketch))]
[element.name/]_start:out none,[element.name/]_stop:out none,[/for][for (element : Control| aProject.eAllContents(Control))]
[element.name/]_doEvaluate:out none,[element.name/]_evaluatedToTrue:out none,[element.name/]_evaluatedToFalse:out none,[/for][for (element : ArduinoCommunicationModule| aProject.eAllContents(ArduinoCommunicationModule))]
[element.name/]_send:out none,[element.name/]_receive:out none,[/for][for (element : PushButton| aProject.eAllContents(PushButton))]
[element.name/]_toggleIt:out none,[/for][for (element : Delay| aProject.eAllContents(Delay))]
[/for][for (element : If| aProject.eAllContents(If))]
[/for][for (element : While| aProject.eAllContents(While))]
[/for][for (element : Repeat| aProject.eAllContents(Repeat))]
[/for][for (element : ModuleGet| aProject.eAllContents(ModuleGet))]
[/for][for (element : ModuleAssignment| aProject.eAllContents(ModuleAssignment))]
[/for][for (element : BluetoothTransceiver| aProject.eAllContents(BluetoothTransceiver))]
[/for][for (element : VariableAssignment| aProject.eAllContents(VariableAssignment))]
[/for][']'/] is
	states s0
[for (element : Instruction| aProject.eAllContents(Instruction))]
    from s0  [element.name/]_start;  to s0
    from s0  [element.name/]_stop;  to s0

[/for]
[for (element : Sketch| aProject.eAllContents(Sketch))]
    from s0  [element.name/]_start;  to s0
    from s0  [element.name/]_stop;  to s0

[/for]
[for (element : Control| aProject.eAllContents(Control))]
    from s0  [element.name/]_doEvaluate;  to s0
    from s0  [element.name/]_evaluatedToTrue;  to s0
    from s0  [element.name/]_evaluatedToFalse;  to s0

[/for]
[for (element : ArduinoCommunicationModule| aProject.eAllContents(ArduinoCommunicationModule))]
    from s0  [element.name/]_send;  to s0
    from s0  [element.name/]_receive;  to s0

[/for]
[for (element : PushButton| aProject.eAllContents(PushButton))]
    from s0  [element.name/]_toggleIt;  to s0

[/for]
[for (element : Delay| aProject.eAllContents(Delay))]

[/for]
[for (element : If| aProject.eAllContents(If))]

[/for]
[for (element : While| aProject.eAllContents(While))]

[/for]
[for (element : Repeat| aProject.eAllContents(Repeat))]

[/for]
[for (element : ModuleGet| aProject.eAllContents(ModuleGet))]

[/for]
[for (element : ModuleAssignment| aProject.eAllContents(ModuleAssignment))]

[/for]
[for (element : BluetoothTransceiver| aProject.eAllContents(BluetoothTransceiver))]

[/for]
[for (element : VariableAssignment| aProject.eAllContents(VariableAssignment))]

[/for]

[file ('pUnConstrainedSemantics.fcr', false, 'UTF-8')]
process pUnConstrainedSemantics['['/][for (element : Instruction| aProject.eAllContents(Instruction))]
[element.name/]_start:out none,[element.name/]_stop:out none,[/for][for (element : Sketch| aProject.eAllContents(Sketch))]
[element.name/]_start:out none,[element.name/]_stop:out none,[/for][for (element : Control| aProject.eAllContents(Control))]
[element.name/]_doEvaluate:out none,[element.name/]_evaluatedToTrue:out none,[element.name/]_evaluatedToFalse:out none,[/for][for (element : ArduinoCommunicationModule| aProject.eAllContents(ArduinoCommunicationModule))]
[element.name/]_send:out none,[element.name/]_receive:out none,[/for][for (element : PushButton| aProject.eAllContents(PushButton))]
[element.name/]_toggleIt:out none,[/for][for (element : Delay| aProject.eAllContents(Delay))]
[/for][for (element : If| aProject.eAllContents(If))]
[/for][for (element : While| aProject.eAllContents(While))]
[/for][for (element : Repeat| aProject.eAllContents(Repeat))]
[/for][for (element : ModuleGet| aProject.eAllContents(ModuleGet))]
[/for][for (element : ModuleAssignment| aProject.eAllContents(ModuleAssignment))]
[/for][for (element : BluetoothTransceiver| aProject.eAllContents(BluetoothTransceiver))]
[/for][for (element : VariableAssignment| aProject.eAllContents(VariableAssignment))]
[/for][']'/] is
	
	states s0
[for (element : Instruction| aProject.eAllContents(Instruction))]
    from s0  [element.name/]_start;  to s0
    from s0  [element.name/]_stop;  to s0

[/for]
[for (element : Sketch| aProject.eAllContents(Sketch))]
    from s0  [element.name/]_start;  to s0
    from s0  [element.name/]_stop;  to s0

[/for]
[for (element : Control| aProject.eAllContents(Control))]
    from s0  [element.name/]_doEvaluate;  to s0
    from s0  [element.name/]_evaluatedToTrue;  to s0
    from s0  [element.name/]_evaluatedToFalse;  to s0

[/for]
[for (element : ArduinoCommunicationModule| aProject.eAllContents(ArduinoCommunicationModule))]
    from s0  [element.name/]_send;  to s0
    from s0  [element.name/]_receive;  to s0

[/for]
[for (element : PushButton| aProject.eAllContents(PushButton))]
    from s0  [element.name/]_toggleIt;  to s0

[/for]
[for (element : Delay| aProject.eAllContents(Delay))]

[/for]
[for (element : If| aProject.eAllContents(If))]

[/for]
[for (element : While| aProject.eAllContents(While))]

[/for]
[for (element : Repeat| aProject.eAllContents(Repeat))]

[/for]
[for (element : ModuleGet| aProject.eAllContents(ModuleGet))]

[/for]
[for (element : ModuleAssignment| aProject.eAllContents(ModuleAssignment))]

[/for]
[for (element : BluetoothTransceiver| aProject.eAllContents(BluetoothTransceiver))]

[/for]
[for (element : VariableAssignment| aProject.eAllContents(VariableAssignment))]

[/for]
[/file]
/******************** Process Parallelization for Project******************/
component sys is

var 
	global : SystemDataRoot,
    ID: int := 0
	//global : SystemDataRoot := INITIAL_Configuration

port
[for (element : Instruction| aProject.eAllContents(Instruction))]
[element.name/]_start: none,[element.name/]_stop: none,


[/for][for (element : Sketch| aProject.eAllContents(Sketch))]
[element.name/]_start: none,[element.name/]_stop: none,

[/for][for (element : Control| aProject.eAllContents(Control))]
[element.name/]_doEvaluate: none,[element.name/]_evaluatedToTrue: none,[element.name/]_evaluatedToFalse: none,
[/for][for (element : ArduinoCommunicationModule| aProject.eAllContents(ArduinoCommunicationModule))]
[element.name/]_send: none,[element.name/]_receive: none,
[/for][for (element : PushButton| aProject.eAllContents(PushButton))]
[element.name/]_toggleIt: none,
[/for][for (element : Delay| aProject.eAllContents(Delay))]

[/for][for (element : If| aProject.eAllContents(If))]

[/for][for (element : While| aProject.eAllContents(While))]

[/for][for (element : Repeat| aProject.eAllContents(Repeat))]

[/for][for (element : ModuleGet| aProject.eAllContents(ModuleGet))]

[/for][for (element : ModuleAssignment| aProject.eAllContents(ModuleAssignment))]

[/for][for (element : BluetoothTransceiver| aProject.eAllContents(BluetoothTransceiver))]

[/for][for (element : VariableAssignment| aProject.eAllContents(VariableAssignment))]

[/for]

par

pUnConstrainedSemantics['['/][for (element : Instruction| aProject.eAllContents(Instruction))]
[element.name/]_start,[element.name/]_stop,[/for][for (element : Sketch| aProject.eAllContents(Sketch))]
[element.name/]_start,[element.name/]_stop,[/for][for (element : Control| aProject.eAllContents(Control))]
[element.name/]_doEvaluate,[element.name/]_evaluatedToTrue,[element.name/]_evaluatedToFalse,[/for][for (element : ArduinoCommunicationModule| aProject.eAllContents(ArduinoCommunicationModule))]
[element.name/]_send,[element.name/]_receive,[/for][for (element : PushButton| aProject.eAllContents(PushButton))]
[element.name/]_toggleIt,[/for][for (element : Delay| aProject.eAllContents(Delay))]
,[/for][for (element : If| aProject.eAllContents(If))]
,[/for][for (element : While| aProject.eAllContents(While))]
,[/for][for (element : Repeat| aProject.eAllContents(Repeat))]
,[/for][for (element : ModuleGet| aProject.eAllContents(ModuleGet))]
,[/for][for (element : ModuleAssignment| aProject.eAllContents(ModuleAssignment))]
,[/for][for (element : BluetoothTransceiver| aProject.eAllContents(BluetoothTransceiver))]
,[/for][for (element : VariableAssignment| aProject.eAllContents(VariableAssignment))]
,[/for][']'/]
[for (element : Instruction| aProject.eAllContents(Instruction))]
|| p[element.name/] ['['/][element.name/]_start,[element.name/]_stop[']'/] (&global, ID)
[/for]
[for (element : Sketch| aProject.eAllContents(Sketch))]
|| p[element.name/] ['['/][element.name/]_start,[element.name/]_stop[']'/] (&global, ID)
[/for]
[for (element : Control| aProject.eAllContents(Control))]
|| p[element.name/] ['['/][element.name/]_doEvaluate,[element.name/]_evaluatedToTrue,[element.name/]_evaluatedToFalse[']'/] (&global, ID)
[/for]
[for (element : ArduinoCommunicationModule| aProject.eAllContents(ArduinoCommunicationModule))]
|| p[element.name/] ['['/][element.name/]_send,[element.name/]_receive[']'/] (&global, ID)
[/for]
[for (element : PushButton| aProject.eAllContents(PushButton))]
|| p[element.name/] ['['/][element.name/]_toggleIt[']'/] (&global, ID)
[/for]
[for (element : Delay| aProject.eAllContents(Delay))]
|| p[element.name/] ['['/][']'/] (&global, ID)
[/for]
[for (element : If| aProject.eAllContents(If))]
|| p[element.name/] ['['/][']'/] (&global, ID)
[/for]
[for (element : While| aProject.eAllContents(While))]
|| p[element.name/] ['['/][']'/] (&global, ID)
[/for]
[for (element : Repeat| aProject.eAllContents(Repeat))]
|| p[element.name/] ['['/][']'/] (&global, ID)
[/for]
[for (element : ModuleGet| aProject.eAllContents(ModuleGet))]
|| p[element.name/] ['['/][']'/] (&global, ID)
[/for]
[for (element : ModuleAssignment| aProject.eAllContents(ModuleAssignment))]
|| p[element.name/] ['['/][']'/] (&global, ID)
[/for]
[for (element : BluetoothTransceiver| aProject.eAllContents(BluetoothTransceiver))]
|| p[element.name/] ['['/][']'/] (&global, ID)
[/for]
[for (element : VariableAssignment| aProject.eAllContents(VariableAssignment))]
|| p[element.name/] ['['/][']'/] (&global, ID)
[/for]
end par
sys 
[/file]
[/template]
