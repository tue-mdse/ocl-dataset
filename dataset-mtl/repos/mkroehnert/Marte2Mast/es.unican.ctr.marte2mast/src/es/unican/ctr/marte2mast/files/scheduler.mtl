[comment encoding = UTF-8 /]
[comment]--------------------------------------------------------------
--                           Marte2Mast                              --
--      Converter of Schedulability analysis models made with UML2   --
--   and The UML Profile for MARTE to MAST, the Analysis Suite for   --
--                      Real-Time Applications                       --
--                                                                   --
--                     Copyright (C) 2010-2011                       --
--                 Universidad de Cantabria, SPAIN                   --
--                                                                   --
--                                                                   --
--           URL: http://mast.unican.es/umlmast/marte2mast           --
--                                                                   --
--  Authors: Alvaro Garcia Cuesta   alvaro@binarynonsense.com        --
--           Julio Medina           julio.medina@unican.es           --
--                                                                   --
-- This program is free software; you can redistribute it and/or     --
-- modify it under the terms of the GNU General Public               --
-- License as published by the Free Software Foundation; either      --
-- version 2 of the License, or (at your option) any later version.  --
--                                                                   --
-- This program is distributed in the hope that it will be useful,   --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of    --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU --
-- General Public License for more details.                          --
--                                                                   --
-- You should have received a copy of the GNU General Public         --
-- License along with this program; if not, write to the             --
-- Free Software Foundation, Inc., 59 Temple Place - Suite 330,      --
-- Boston, MA 02111-1307, USA.                                       --
--                                                                   --
-------------------------------------------------------------[/comment]
[module scheduler('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import helperfunctions/]
[import log/]

[template public scheduler(e : Element)]

[if self.hasStereotype('SaExecHost')]
Scheduler ([self.logElement2('SaExecHost')/][comment (TODO) see Log.java -> why logElement2?? /]
    Type   => Primary_Scheduler
,   Name   => [self.getElementShortName()/]_Scheduler
	[if self.getStereotypeProperty('SaExecHost', 'schedPolicy') <> null]
,   Policy => ([comment check priority type/]
		[if self.getStereotypeProperty('SaExecHost', 'schedPolicy').toString() = 'FixedPriority']
            
            Type                 => Fixed_Priority
			[if self.getStereotypeProperty('SaExecHost', 'cntxtSwT') <> null]
				[if (parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'best').toString() <> 'MALFORMED INPUT')
				and (parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'worst').toString() <> 'MALFORMED INPUT')]
,           Worst_Context_Switch => [parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'worst').toString()/]				
,           Best_Context_Switch  => [parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'best').toString()/]	
					[if (parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'value').toString() <> 'MALFORMED INPUT')]
,           Avg_Context_Switch   => [parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'value').toString()/]						
					[/if]			
				[elseif (parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'best').toString() <> 'MALFORMED INPUT')
				     or (parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'worst').toString() <> 'MALFORMED INPUT')][comment end if best and worst/]
					[if (parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'worst').toString() <> 'MALFORMED INPUT')]
,           Worst_Context_Switch => [parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'worst').toString()/]						
					[/if]	
					[if (parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'best').toString() <> 'MALFORMED INPUT')]
,           Best_Context_Switch  => [parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'best').toString()/]						
					[/if]	
					[if (parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'value').toString() <> 'MALFORMED INPUT')]
,           Avg_Context_Switch   => [parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'value').toString()/]						
					[/if]
				[else][comment end if best or worst/]
					[if (parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'value').toString() <> 'MALFORMED INPUT')]
,           Worst_Context_Switch => [parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'value').toString()/]						
					[/if]						
				[/if]
			[/if][comment end if cntxtSwT not null/]
			[if self.getStereotypeProperty('SaExecHost', 'schedPriRange') <> null]
,           Max_Priority         => [parseIntegerInterval(getStereotypeProperty('SaExecHost', 'schedPriRange').toString(), 'max')/]
,           Min_Priority         => [parseIntegerInterval(getStereotypeProperty('SaExecHost', 'schedPriRange').toString(), 'min')/]		
			[/if][comment end if schedPriRange not null/]
		[elseif self.getStereotypeProperty('SaExecHost', 'schedPolicy').toString() = 'EarliestDeadlineFirst'][comment end if fixedprio/]
            Type                 => EDF	
            [if self.getStereotypeProperty('SaExecHost', 'cntxtSwT') <> null]
            	[if (parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'value').toString() <> 'MALFORMED INPUT')]
,           Worst_Context_Switch => [parseNFP_Duration(getStereotypeProperty('SaExecHost', 'cntxtSwT').toString(), 'value').toString()/]						
				[/if]	
            [/if][comment end if cntxtSwT not null/]	
		[/if][comment end if earliestdeadlinefirst/]	
    )[comment end Policy/]	
	[/if] [comment end if schedPolicy not null/]
,   Host   => [self.getElementShortName()/]
);	
[/if][comment end if SaExecHost/]
[if self.hasStereotype('SaCommHost')]
Scheduler ([self.logElement2('SaCommHost')/]
    Type   => Primary_Scheduler
,   Name   => [self.getElementShortName()/]_Scheduler
	[if self.getStereotypeProperty('SaCommHost', 'schedPolicy') <> null]
,   Policy => (        
        Type                     => FP_Packet_Based[self.getPacketOverhead()/]
     -- Max_Priority             => Not available in MARTE,
     -- Min_Priority             => Not available in MARTE
    )[comment end Policy/]	
	[/if] [comment end if schedPolicy not null/]
,   Host   => [self.getElementShortName()/]
);	
[/if][comment end if SaCommHost/]
[/template]