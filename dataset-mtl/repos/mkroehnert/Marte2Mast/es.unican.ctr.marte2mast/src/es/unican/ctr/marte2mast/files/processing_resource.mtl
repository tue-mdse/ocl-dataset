[comment encoding = UTF-8 /]
[comment]--------------------------------------------------------------
--                           Marte2Mast                              --
--      Converter of Schedulability analysis models made with UML2   --
--   and The UML Profile for MARTE to MAST, the Analysis Suite for   --
--                      Real-Time Applications                       --
--                                                                   --
--                     Copyright (C) 2010-2011                       --
--                 Universidad de Cantabria, SPAIN                   --
--                                                                   --
--                                                                   --
--           URL: http://mast.unican.es/umlmast/marte2mast           --
--                                                                   --
--  Authors: Alvaro Garcia Cuesta   alvaro@binarynonsense.com        --
--           Julio Medina           julio.medina@unican.es           --
--                                                                   --
-- This program is free software; you can redistribute it and/or     --
-- modify it under the terms of the GNU General Public               --
-- License as published by the Free Software Foundation; either      --
-- version 2 of the License, or (at your option) any later version.  --
--                                                                   --
-- This program is distributed in the hope that it will be useful,   --
-- but WITHOUT ANY WARRANTY; without even the implied warranty of    --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU --
-- General Public License for more details.                          --
--                                                                   --
-- You should have received a copy of the GNU General Public         --
-- License along with this program; if not, write to the             --
-- Free Software Foundation, Inc., 59 Temple Place - Suite 330,      --
-- Boston, MA 02111-1307, USA.                                       --
--                                                                   --
-------------------------------------------------------------[/comment]
[module processing_resource('http://www.eclipse.org/uml2/3.0.0/UML')/]
[import helperfunctions/]
[import log/]

[template public processing_resource(e : Element)]

[if self.hasStereotype('SaExecHost')]
Processing_Resource ([self.logElement('SaExecHost')/]
    Type                   => Regular_Processor
,   Name                   => [self.getElementShortName()/]
    [if self.getStereotypeProperty('SaExecHost', 'speedFactor') <> null]
,   Speed_Factor           => [parseNFP_Real(getStereotypeProperty('SaExecHost', 'speedFactor').toString(), 'value').toString()/]    
    [/if]
    [if self.getStereotypeProperty('SaExecHost', 'ISRswitchT') <> null]
		[if (parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'best').toString() <> 'MALFORMED INPUT')
		and (parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'worst').toString() <> 'MALFORMED INPUT')]
			[if parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'worst').toString() <> 'MALFORMED INPUT']
,   Worst_ISR_Switch       => [parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'worst').toString()/]			
			[/if]
			[if parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'best').toString() <> 'MALFORMED INPUT']
,   Best_ISR_Switch        => [parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'best').toString()/]			
			[/if]
			[if parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'value').toString() <> 'MALFORMED INPUT']
,   Avg_ISR_Switch         => [parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'value').toString()/]			
			[/if]
		[elseif (parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'best').toString() <> 'MALFORMED INPUT')
		or (parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'worst').toString() <> 'MALFORMED INPUT')][comment end if best & worst/]	
			[if parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'worst').toString() <> 'MALFORMED INPUT']
,   Worst_ISR_Switch       => [parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'worst').toString()/]			
			[/if]
			[if parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'best').toString() <> 'MALFORMED INPUT']
,   Best_ISR_Switch        => [parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'best').toString()/]			
			[/if]
			[if parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'value').toString() <> 'MALFORMED INPUT']
,   Avg_ISR_Switch         => [parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'value').toString()/]			
			[/if]
		[elseif parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'value').toString() <> 'MALFORMED INPUT'][comment end if best or worst /]
,   Worst_ISR_Switch       => [parseNFP_Duration(getStereotypeProperty('SaExecHost', 'ISRswitchT').toString(), 'value').toString()/]		
		[/if] [comment end if only avg /]
	[/if][comment end if ISRswitchTr not null/]
	[if self.getStereotypeProperty('SaExecHost', 'ISRprioRange') <> null]	
,   Max_Interrupt_Priority => [parseIntegerInterval(getStereotypeProperty('SaExecHost', 'ISRprioRange').toString(), 'max')/]
,   Min_Interrupt_Priority => [parseIntegerInterval(getStereotypeProperty('SaExecHost', 'ISRprioRange').toString(), 'min')/]	
	[/if][comment end if ISRprioRange not null/]
);
[/if][comment end if SaExecHost/]
[if self.hasStereotype('SaCommHost')]
Processing_Resource ([self.logElement('SaCommHost')/]
    Type                         => Packet_Based_Network
,   Name                         => [self.getElementShortName()/]
    [if self.getStereotypeProperty('SaCommHost', 'speedFactor') <> null]
,   Speed_Factor                 => [parseNFP_Real(getStereotypeProperty('SaCommHost', 'speedFactor').toString(), 'value').toString()/]    
    [/if]
    [if self.getStereotypeProperty('SaCommHost', 'capacity') <> null]
,   Throughput                   => [parseNFP_DataTxRate(getStereotypeProperty('SaCommHost', 'capacity').toString(), 'value').toString()/]    
    [/if] 
    [if self.getStereotypeProperty('SaCommHost', 'transmMode') <> null]
		[if self.getStereotypeProperty('SaCommHost', 'transmMode').toString() = 'simplex']
,   Transmission                 => Simplex		
		[elseif self.getStereotypeProperty('SaCommHost', 'transmMode').toString() = 'halfDuplex']
,   Transmission                 => Half_Duplex		
		[elseif self.getStereotypeProperty('SaCommHost', 'transmMode').toString() = 'fullDuplex']
,   Transmission                 => Full_Duplex		
		[/if]
    [/if]  [comment end if transmMode not null/] 
    [if self.getStereotypeProperty('SaCommHost', 'blockT') <> null]
		[if parseNFP_Duration(getStereotypeProperty('SaCommHost', 'blockT').toString(), 'worst').toString() <> 'MALFORMED INPUT']
,   Max_Blocking                 => [parseNFP_Duration(getStereotypeProperty('SaCommHost', 'blockT').toString(), 'worst').toString()/]	
		[elseif parseNFP_Duration(getStereotypeProperty('SaCommHost', 'blockT').toString(), 'value').toString() <> 'MALFORMED INPUT']
,   Max_Blocking                 => [parseNFP_Duration(getStereotypeProperty('SaCommHost', 'blockT').toString(), 'value').toString()/]
		[elseif parseNFP_Duration(getStereotypeProperty('SaCommHost', 'blockT').toString(), 'best').toString() <> 'MALFORMED INPUT']
,   Max_Blocking                 => MALFORMED INPUT	
		[/if]
    [/if]  [comment end if transmMode not null/]
    [if self.getStereotypeProperty('SaCommHost', 'elementSize') <> null] [comment i.e. (value=2,statQ=min),(value=3,statQ=max)/]  
		[if parseNFP_Integer(getStereotypeProperty('SaCommHost', 'elementSize').toString(), 'value','max').toString() <> 'MALFORMED INPUT']
,   Max_Packet_Size              => [parseNFP_Integer(getStereotypeProperty('SaCommHost', 'elementSize').toString(), 'value','max').toString()/]
			[if parseNFP_Integer(getStereotypeProperty('SaCommHost', 'elementSize').toString(), 'value','min').toString() <> 'MALFORMED INPUT']
,   Min_Packet_Size              => [parseNFP_Integer(getStereotypeProperty('SaCommHost', 'elementSize').toString(), 'value','min').toString()/]			
			[/if]
		[elseif parseNFP_Integer(getStereotypeProperty('SaCommHost', 'elementSize').toString(), 'value','min').toString() <> 'MALFORMED INPUT']
,   Min_Packet_Size              => [parseNFP_Integer(getStereotypeProperty('SaCommHost', 'elementSize').toString(), 'value','min').toString()/]
		[elseif parseNFP_Integer(getStereotypeProperty('SaCommHost', 'elementSize').toString(), 'value').toString() <> 'MALFORMED INPUT']
,   Max_Packet_Size              => [parseNFP_Integer(getStereotypeProperty('SaCommHost', 'elementSize').toString(), 'value').toString()/]
,   Min_Packet_Size              => [parseNFP_Integer(getStereotypeProperty('SaCommHost', 'elementSize').toString(), 'value').toString()/]
		[/if]
    [/if]  [comment end if elementSize not null/] 
    [if self.getStereotypeProperty('SaCommHost', 'packetT') <> null]
		[if parseNFP_Duration(getStereotypeProperty('SaCommHost', 'packetT').toString(), 'worst').toString() <> 'MALFORMED INPUT']
,   Max_Packet_Transmission_Time => [parseNFP_Duration(getStereotypeProperty('SaCommHost', 'packetT').toString(), 'worst').toString()/]
			[if parseNFP_Duration(getStereotypeProperty('SaCommHost', 'packetT').toString(), 'best').toString() <> 'MALFORMED INPUT']
,   Min_Packet_Transmission_Time => [parseNFP_Duration(getStereotypeProperty('SaCommHost', 'packetT').toString(), 'best').toString()/]
			[elseif parseNFP_Duration(getStereotypeProperty('SaCommHost', 'packetT').toString(), 'value').toString() <> 'MALFORMED INPUT']
,   Min_Packet_Transmission_Time => [parseNFP_Duration(getStereotypeProperty('SaCommHost', 'packetT').toString(), 'value').toString()/]				
			[/if]	
		[elseif parseNFP_Duration(getStereotypeProperty('SaCommHost', 'packetT').toString(), 'best').toString() <> 'MALFORMED INPUT']
,   Min_Packet_Transmission_Time => [parseNFP_Duration(getStereotypeProperty('SaCommHost', 'packetT').toString(), 'best').toString()/]
			[if parseNFP_Duration(getStereotypeProperty('SaCommHost', 'packetT').toString(), 'value').toString() <> 'MALFORMED INPUT']
,   Max_Packet_Transmission_Time => [parseNFP_Duration(getStereotypeProperty('SaCommHost', 'packetT').toString(), 'value').toString()/]				
			[/if]
		[elseif parseNFP_Duration(getStereotypeProperty('SaCommHost', 'packetT').toString(), 'value').toString() <> 'MALFORMED INPUT']
,   Max_Packet_Transmission_Time => [parseNFP_Duration(getStereotypeProperty('SaCommHost', 'packetT').toString(), 'value').toString()/]	
,   Min_Packet_Transmission_Time => [parseNFP_Duration(getStereotypeProperty('SaCommHost', 'packetT').toString(), 'value').toString()/]
		[/if]
    [/if]  [comment end if packetT not null/]      
 -- List_of_Drivers              => () -- Not available in MARTE
);	    
[/if][comment end if SaCommHost/]
[/template]
