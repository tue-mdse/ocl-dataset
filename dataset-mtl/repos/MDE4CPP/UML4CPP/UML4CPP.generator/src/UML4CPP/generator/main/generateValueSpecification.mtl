[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateValueSpecification('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::helper /]

[template public generateValueSpecificationCreation(aValueSpecification : ValueSpecification)]
[aValueSpecification.memberName()/].reset(uml::UmlFactory::eInstance()->create[aValueSpecification.eClass().name/]());
[if (aValueSpecification.oclIsKindOf(LiteralSpecification))]
[aValueSpecification.memberName()/]->setValue([aValueSpecification.oclAsType(LiteralSpecification).generateLiteralValue()/]);
[/if]

[/template]

[template public generateLiteralValue( aLiteralspec : LiteralSpecification) ? (oclIsKindOf(LiteralInteger))]
[aLiteralspec.integerValue()/]
[/template]

[template public generateLiteralValue( aLiteralspec : LiteralSpecification) ? (oclIsKindOf(LiteralReal))]
[aLiteralspec.realValue()/]
[/template]

[template public generateLiteralValue( aLiteralspec : LiteralSpecification) ? (oclIsKindOf(LiteralBoolean))]
[aLiteralspec.booleanValue()/]
[/template]

[template public generateLiteralValue( aLiteralspec : LiteralSpecification) ? (oclIsKindOf(LiteralString))]
"[aLiteralspec.stringValue()/]"
[/template]

[template public generateLiteralValue( aLiteralspec : LiteralSpecification) ? (oclIsKindOf(LiteralUnlimitedNatural))]
[aLiteralspec.unlimitedValue()/]
[/template]