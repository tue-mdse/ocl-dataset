[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateClass('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::generateConstraint /]
[import UML4CPP::generator::main::generateType /]
[import UML4CPP::generator::main::helper /]

[template public generateClassCreate(aEClass : Class,impl : Boolean) ? (aEClass.isAbstract=false)]
virtual [aEClass.generateCppType(true)/]* create[aEClass.name/]()[abstractSufix(impl)/];

[/template]

[template public generateStaticClassID(aEClass : Class)]
static const int [aEClass.name.toUpperCase()/] = [aEClass._package.member->asOrderedSet()->indexOf(aEClass)/];
static const int [aEClass.name.toUpperCase()/]_FEATURE_COUNT = [aEClass.allFeatures()->size()/];
static const int [aEClass.name.toUpperCase()/]_OPERATION_COUNT = [aEClass.ownedOperation->size()/];

[/template]

[template public generateClassCreation(aEClass : Class)]
[memberName(aEClass)/].reset(uml::UmlFactory::eInstance()->createClass());
[memberName(aEClass)/]->setName("[aEClass.name/]");
[memberName(aEClass)/]->setIsAbstract([aEClass.isAbstract/]);
[memberName(aEClass)/]->setPackage([aEClass.ancestors(Package)->first().memberName()/]);
[aEClass.ancestors(Package)->first().memberName()/]->getPackagedElement()->push_back([memberName(aEClass)/]);

//constraints
[aEClass.ownedRule.generateConstraintCreation()/]

[/template]

[template public initSuperTypes(aClass : Class)]
[for (superClass : Class | aClass.superClass->asOrderedSet()->sortedBy(name))]
gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
gen->setGeneral([superClass.packageGetter(aClass)/]);
gen->setSpecific([aClass.packageGetter(aClass)/]);
[aClass.memberName()/]->getGeneralization()->push_back(gen);
[/for]

[/template]