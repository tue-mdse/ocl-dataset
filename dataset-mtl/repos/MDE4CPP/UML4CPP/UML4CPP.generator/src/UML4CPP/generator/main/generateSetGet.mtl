[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateSetGet('http://www.eclipse.org/uml2/5.0.0/UML')]


[import UML4CPP::generator::main::helper /]
[import UML4CPP::generator::main::generateType /]
[import UML4CPP::generator::main::generateAttribute /]

[query public hasSetter(aFeature : StructuralFeature) : Boolean = not (( not (aFeature.upper = 1) ) and (not aFeature.oclAsType(Property).isReadOnly)) /]

[template public generateeGetSetDel(aClass : Class,impl : Boolean)]
virtual boost::any get(std::shared_ptr<uml::Property> _property) const [abstractSufix(impl)/];
virtual void set(std::shared_ptr<uml::Property> _property,boost::any value) [abstractSufix(impl)/];
virtual void unset(std::shared_ptr<uml::Property> _property) [abstractSufix(impl)/];
[/template]

[template public generateGetSetMemeberInit(aClass : Class)]
std::map<std::string,std::function<boost::any()>> m_getterMap;
std::map<std::string,std::function<void(boost::any)>> m_setterMap;
std::map<std::string,std::function<void()>> m_unsetterMap;
[/template]

[template public generateGetSetInit(aClass : Class)]
//getter init
[for (prop : Property | aClass.allFeatures()->filter(Property)->asOrderedSet()->sortedBy(name))]
[if (prop.type.oclIsKindOf(PrimitiveType) or prop.type.oclIsKindOf(Enumeration))]
m_getterMap.insert(std::pair<std::string,std::function<boost::any()>>("[prop.qualifiedName/]",[ '[' /]this[ ']' /](){ return this->[prop.GetterName()/]();}));
[else][if (prop.upper=1)]
m_getterMap.insert(std::pair<std::string,std::function<boost::any()>>("[prop.qualifiedName/]",[ '[' /]this[ ']' /](){return this->[prop.GetterName()/]();}));
[else]
m_getterMap.insert(std::pair<std::string,std::function<boost::any()>>("[prop.qualifiedName/]",[ '[' /]this[ ']' /](){ return this->[prop.GetterName()/]();}));
[/if]
[/if]
[/for]

[for (aFeature : StructuralFeature | aClass.allFeatures()->filter(StructuralFeature)->asOrderedSet()->sortedBy(myQualifiedName())) ? (aFeature.hasSetter())]
m_setterMap.insert(std::pair<std::string,std::function<void(boost::any)>>("[aFeature.qualifiedName/]",[ '[' /]this[ ']' /](boost::any object){this->[aFeature.SetterName()/](any_cast<[if (aFeature.upper<>1)]std::shared_ptr<std::vector<[/if][aFeature.type.generateCppType()/][if (aFeature.upper<>1)]>>[/if]>(object));}));
[/for]

[for (prop : Property | aClass.allFeatures()->filter(Property)->asOrderedSet()->sortedBy(name)) ? (not(prop.type.oclIsKindOf(PrimitiveType) or prop.type.oclIsKindOf(Enumeration)))]
[if (prop.upper=1)]
m_unsetterMap.insert(std::pair<std::string,std::function<void()>>("[prop.qualifiedName/]",[ '[' /]this[ ']' /](){m_[prop.name/] = nullptr;}));
[else]
m_unsetterMap.insert(std::pair<std::string,std::function<void()>>("[prop.qualifiedName/]",[ '[' /]this[ ']' /](){m_[prop.name/]->clear();}));
[/if]
[/for]
[/template]

[template public generateeGetSetImpl(aClass : Class)]
boost::any [aClass.name.concat('Impl')/]::get(std::shared_ptr<uml::Property> _property) const
{
	//TODO: still two times run through map (contains and [ '[' /][ ']' /])
	std::string qName = _property->getQualifiedName();
	std::map<std::string,std::function<boost::any()>>::const_iterator iter = m_getterMap.find(qName);
    if(iter != m_getterMap.cend())
    {
        //invoke the getter function
        return iter->second();
    }
	return boost::any();
}

void [aClass.name.concat('Impl')/]::set(std::shared_ptr<uml::Property> _property,boost::any value)
{
	//TODO: still two times run through map (contains and [ '[' /][ ']' /])
	std::string qName = _property->getQualifiedName();
	std::map<std::string,std::function<void(boost::any)>>::iterator iter = m_setterMap.find(qName);
    if(iter != m_setterMap.end())
    {
        //invoke the getter function
        iter->second(value);
    }
}

void [aClass.name.concat('Impl')/]::unset(std::shared_ptr<uml::Property> _property)
{
	//TODO: still two times run through map (contains and [ '[' /][ ']' /])
	std::string qName = _property->getQualifiedName();
	std::map<std::string,std::function<void()>>::iterator iter = m_unsetterMap.find(qName);
    if(iter != m_unsetterMap.end())
    {
        //invoke the getter function
        iter->second();
    }
}
[/template]