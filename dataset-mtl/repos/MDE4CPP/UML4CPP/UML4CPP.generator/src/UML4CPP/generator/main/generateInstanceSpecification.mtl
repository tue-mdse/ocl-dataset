[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateInstanceSpecification('http://www.eclipse.org/uml2/5.0.0/UML')]
 
[import UML4CPP::generator::main::helper /]

[template public generateSlotCreation(aSlot : Slot, anInstSpec : InstanceSpecification)]
{
	std::shared_ptr<uml::Slot> slot(uml::UmlFactory::eInstance()->createSlot());
	slot->setDefiningFeature([memberName(aSlot.definingFeature)/]);
	[for (aValueSpec : ValueSpecification | aSlot.value->asOrderedSet()->sortedBy(myQualifiedName()))]slot->getValue()->push_back([aValueSpec.memberName()/]);[/for]
	[memberName(anInstSpec)/]->getSlot()->push_back(slot);
}
[/template]

[template public generateInstanceSpecificationCreation(anInstSpec : InstanceSpecification)]
[memberName(anInstSpec)/].reset(uml::UmlFactory::eInstance()->createInstanceSpecification());
[memberName(anInstSpec)/]->setName("[anInstSpec.name/]");
[for (aClassifer : Classifier | anInstSpec.classifier->asOrderedSet()->sortedBy(name))]
[memberName(anInstSpec)/]->getClassifier()->push_back([memberName(aClassifer)/]);

[for (aSlot : Slot | anInstSpec.slot->asOrderedSet()->sortedBy(myQualifiedName()))]
[aSlot.generateSlotCreation(anInstSpec)/]
[/for]
[/for]

[anInstSpec.ancestors(Package)->first().memberName()/]->getPackagedElement()->push_back([memberName(anInstSpec)/]);
[/template]

