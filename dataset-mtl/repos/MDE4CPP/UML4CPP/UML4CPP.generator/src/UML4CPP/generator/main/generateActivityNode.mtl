[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateActivityNode('http://www.eclipse.org/uml2/5.0.0/UML')]


[import UML4CPP::generator::main::generateType /]
[import UML4CPP::generator::main::helper /]

[template public generateActivityNodeCreation(anActivityNode : ActivityNode)]
[memberName(anActivityNode)/].reset(uml::UmlFactory::eInstance()->create[anActivityNode.eClass().name/]());
[memberName(anActivityNode)/]->setName("[anActivityNode.name/]");
[memberName(anActivityNode)/]->setActivity([anActivityNode.activity.oclAsType(NamedElement).memberName()/]);
[anActivityNode.generateActivityNodeSpecial()/]
[/template]

[template public generateActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(CallBehaviorAction) )]
//CallBehaviorAction [anActivityNode.name /]
[memberName(anActivityNode)/]->setBehavior([anActivityNode.oclAsType(CallBehaviorAction).behavior.oclAsType(NamedElement).memberName()/]);
[memberName(anActivityNode)/]->setIsSynchronous(true); //imposed by the fUML specification
[anActivityNode.oclAsType(CallBehaviorAction).input.generatePin()/]
[anActivityNode.oclAsType(CallBehaviorAction).output.generatePin()/]
[/template]

[template public generateActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(CallOperationAction) )]
//CallOperationAction [anActivityNode.name /]
[anActivityNode.oclAsType(CallOperationAction).input.generatePin()/]
[anActivityNode.oclAsType(CallOperationAction).output.generatePin()/]
[anActivityNode.oclAsType(CallOperationAction).operation.generateOperation()/]

[/template]

[template public generatePin(pin : Pin)]
[memberName(pin)/].reset(uml::UmlFactory::eInstance()->create[pin.eClass().name/]());
[memberName(pin)/]->setName("[pin.name/]");

[/template]

[template public generateOperation(operation : Operation)]
[memberName(operation)/].reset(uml::UmlFactory::eInstance()->createOperation());
[memberName(operation)/]->setName("[operation.name/]");

[/template]

[template public initializeActivityNode(anActivityNode : ActivityNode)]
[anActivityNode.activity.oclAsType(NamedElement).memberName()/]->getNode()->push_back([memberName(anActivityNode)/]);
[anActivityNode.initializeActivityNodeSpecial(anActivityNode)/]

[/template]

[template public initializeActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(ActivityParameterNode))]
[memberName(anActivityNode)/]->setParameter([memberName(anActivityNode.oclAsType(ActivityParameterNode).parameter)/]);

[/template]
 
[template public initializeActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(CallBehaviorAction))]
[memberName(anActivityNode)/]->setBehavior([anActivityNode.oclAsType(CallBehaviorAction).behavior.packageGetter()/]);
[anActivityNode.oclAsType(CallBehaviorAction).input.initializePin()/]
[anActivityNode.oclAsType(CallBehaviorAction).output.initializePin()/]

[/template]

[template public initializeActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(CallOperationAction))]
[memberName(anActivityNode)/]->setOperation([anActivityNode.oclAsType(CallOperationAction).operation.packageGetter()/]);
[anActivityNode.oclAsType(CallOperationAction).input.initializePin()/]
[anActivityNode.oclAsType(CallOperationAction).output.initializePin()/]
[memberName(anActivityNode)/]->setTarget([anActivityNode.oclAsType(CallOperationAction).target.packageGetter()/]);

[/template]

[template public initializeActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(DecisionNode))]
[if (not anActivityNode.oclAsType(DecisionNode).decisionInput.oclIsUndefined())]
[memberName(anActivityNode)/]->setDecisionInput([memberName(anActivityNode.oclAsType(DecisionNode).decisionInput)/]);
[/if]

[/template]

[template public initializePin(pin : Pin)]
[if (pin.oclIsKindOf(InputPin))]
[memberName(pin.owner.oclAsType(NamedElement))/]->getArgument()->push_back([memberName(pin)/]);[else]
[memberName(pin.owner.oclAsType(NamedElement))/]->getResult()->push_back([memberName(pin)/]);[/if]

[/template]