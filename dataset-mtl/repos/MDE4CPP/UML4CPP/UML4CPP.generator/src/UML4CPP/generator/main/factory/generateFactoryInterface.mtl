[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateFactoryInterface('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::generateClass /]
[import UML4CPP::generator::main::generateSingleton /]
[import UML4CPP::generator::main::helper /]

[template public generateFactoryInterface(aPackage : Package){packageName : String = aPackage.name.toUpperFirst().concat('Factory');}]
[file (aPackage.name.concat('/').concat(packageName).concat('.hpp'), false, 'UTF-8')]
[startGuard(aPackage,'Factory')/]

#include "Factory.hpp"

[comment  Generate Includes for the Factory/]
namespace [aPackage.name/] 
{
[for (elements : Class| aPackage.ownedMember->selectByKind(Class)->sortedBy(name)) separator ('\n')]
	class [elements.name/];[/for]

	class [aPackage.name.toUpperFirst().concat('Package')/];
	class [packageName/];
}

namespace [aPackage.name/]
{
	class [packageName/] : virtual public uml::Factory 
	{ 
		protected:
			//protected default construcotr
			[packageName/](){}

			//Singleton Instance and Getter
			[generateSingletonDecl(packageName)/]

			//Creator functions
			[(aPackage.ownedMember->selectByKind(Class))->sortedBy(name).generateClassCreate(false)/]

			//Package
			virtual std::shared_ptr<[aPackage.name.toUpperFirst().concat('Package')/]> get[aPackage.name.toUpperFirst().concat('Package')/]() = 0;
	};
}
[endGuard(aPackage,'Factory')/]
[/file]
[/template]