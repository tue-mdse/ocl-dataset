[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateBuildFile('http://www.eclipse.org/emf/2002/Ecore')]

[query public metaModelLibraries(anEPackage : EPackage) : Set(EPackage) = OrderedSet{anEPackage.eAllContents().eClass().ePackage,anEPackage.eAllContents(EClass).eAllSuperTypes.ePackage,anEPackage.eAllContents(EStructuralFeature).eType.ePackage,anEPackage.eAllContents(EParameter).eType.ePackage}->flatten()->sortedBy(name) /]

[template public generateBuildFile(aPackage : EPackage)]
[file (aPackage.name.concat('/').concat('build.gradle'), false, 'UTF-8')]
/*-------------------------------------------------
*
* Tasks created by ecore4CPP Generator 
*
*-------------------------------------------------
*/

apply plugin: 'cpp'

description 'C++ project of model [aPackage.name/].ecore, generated by Ecore4CPP'

File appendDebugSuffix(File binaryFile) {
	int extensionSeparatorIndex = binaryFile.path.lastIndexOf('.')
	return new File(binaryFile.path.substring(0, extensionSeparatorIndex) + "d" + binaryFile.path.substring(extensionSeparatorIndex))
}

task deliver[aPackage.name.toUpperFirst()/](dependsOn: ['['/]'deliver[aPackage.name.toUpperFirst()/]Headers','deliver[aPackage.name.toUpperFirst()/]DebugSharedLibrary', 'deliver[aPackage.name.toUpperFirst()/]ReleaseSharedLibrary'[']'/]) {
	description 'deliver [aPackage.name/] header, debug and release libraries to application folder (%MDE4CPP_HOME%/application)'
}

task deliver[aPackage.name.toUpperFirst()/]Headers(type: Copy) {
	description 'deliver [aPackage.name/] header to %MDE4CPP_HOME%/application/include/[aPackage.name/]'
	from "."
	into System.getenv('MDE4CPP_HOME')+"/application/include/[aPackage.name/]"
	include "**/*.hpp"
	exclude "build", ".gradle"
}

task deliver[aPackage.name.toUpperFirst()/]DebugSharedLibrary(type: Copy) {
	description 'deliver [aPackage.name/] debug libary to %MDE4CPP_HOME%/application/bin'
	from "build/libs/[aPackage.name/]/shared/debug"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "[aPackage.name/]d.dll"
}

task deliver[aPackage.name.toUpperFirst()/]ReleaseSharedLibrary(type: Copy) {
	description 'deliver [aPackage.name/] release libary to %MDE4CPP_HOME%/application/bin'
	from "build/libs/[aPackage.name/]/shared/release"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "[aPackage.name/].dll"
}

model {
    toolChains {
    	 gcc(Gcc) {
    	 	"g++"
    	 }
    }
	
    buildTypes {
        debug 
        release
    }
[if (aPackage.metaModelLibraries()->select(not(name = aPackage.name))->size() > 0)]
	repositories {
        libs(PrebuiltLibraries) {
			['['/] [for (pack : EPackage | aPackage.metaModelLibraries()) separator (',') ? (not(pack.name = aPackage.name))]"[pack.name/]"[/for] [']'/].each {
				delegate."$it" {
					def libraryName = "${name}"
					headers.srcDir System.getenv('MDE4CPP_HOME')+"/application/include/${libraryName}"
					binaries.withType(SharedLibraryBinary) {
						if(buildType == buildTypes.debug) {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}d.dll")
						} else {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}.dll")						
						}
					}
				}	
			}         
		}
	}
[/if]	

    components {
        [aPackage.name/](NativeLibrarySpec)
        {
        	sources {
                cpp {
                    source {
                        srcDirs "." [if (aPackage.name='uml')], System.getenv('MDE4CPP_HOME')+"/application/include/util"[/if]
[for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
						include "impl/[aClass.name/]Impl.cpp"
[/for]
						include	"impl/[aPackage.name.toUpperFirst()/]FactoryImpl.cpp"
						include	"[aPackage.name.toUpperFirst()/]Factory.cpp"
						include	"impl/[aPackage.name.toUpperFirst()/]PackageImpl.cpp"
						include	"[aPackage.name.toUpperFirst()/]Package.cpp"
[if (aPackage.name='uml')]
						include "util.cpp"
						include "registry.cpp"
						include "stereotypestorage.cpp"
[/if]
                    }
					exportedHeaders {
                        srcDirs ".", "../", System.getenv('MDE4CPP_HOME')+"/application/include"
[if (aPackage.name='uml')]
						srcDirs System.getenv('MDE4CPP_HOME')+"/application/include/util"
[/if]
                        include "**/*.hpp"
                    }
[if (aPackage.metaModelLibraries()->select(not(name = aPackage.name))->size() > 0)]
[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = aPackage.name))]
					lib library: "[pack.name/]"
[/for]
[/if]
                }
            }

			binaries.withType(StaticLibraryBinarySpec) {
				buildable = false
			}
        }
		
		withType(NativeComponentSpec) {
			binaries.withType(NativeBinarySpec) {
				if(buildType == buildTypes.debug) {
					if (it instanceof SharedLibraryBinarySpec) {
						sharedLibraryFile = appendDebugSuffix(sharedLibraryFile)
						sharedLibraryLinkFile = appendDebugSuffix(sharedLibraryLinkFile)
					} else if (it instanceof StaticLibraryBinarySpec) {
						staticLibraryFile = appendDebugSuffix(staticLibraryFile)
					} else {
						throw new GradleException("Unknown native library binary")
					}
				}
			}
        }
    }
    
    binaries {
        all {
        	cppCompiler.args '-std=c++11','-Wall', '-Wno-overloaded-virtual', '-Wdeprecated-declarations', '-pipe'
			if (buildType == buildTypes.debug) {
				cppCompiler.args '-g'
			}
			else {
[if (aPackage.name='uml')]
				cppCompiler.args '-O1', '-DNDEBUG'
[else]
				cppCompiler.args '-O3', '-DNDEBUG'
[/if]
			}
        }
    }
}

build.finalizedBy(deliver[aPackage.name.toUpperFirst()/])
[/file]
[/template]
