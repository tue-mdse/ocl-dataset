[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generatePackageImplementationHeader('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateAttribute /]
[import ecore4CPP::generator::main::generateClass /]
[import ecore4CPP::generator::main::generateDatatype /]
[import ecore4CPP::generator::main::generateOperation /]
[import ecore4CPP::generator::main::generateReference /]
[import ecore4CPP::generator::main::helper /]

[template public generatePackageImplHeader(anEPackage : EPackage)]
[file (anEPackage.name.concat('/impl/').concat(anEPackage.name.toUpperFirst()).concat('PackageImpl.hpp'), false, 'UTF-8')]
[startGuard(anEPackage,'PackageImpl')/]

#include <cassert>

[comment  Generate Includes for the Factory/]
[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
#include "[aClass.name.concat('Impl.hpp')/]"
[/for]

#include "[anEPackage.name.toUpperFirst().concat('Package')/].hpp"
#include "EcorePackage.hpp"
[if (not(anEPackage.name = 'ecore') )]
#include "impl/EPackageImpl.hpp"
[/if]

namespace [anEPackage.name/]
{
	class [anEPackage.name.toUpperFirst().concat('PackageImpl')/] : public [anEPackage.needNamespace('EPackageImpl')/] ,virtual public [anEPackage.name.toUpperFirst().concat('Package')/]
	{
		private:    
			[anEPackage.name.toUpperFirst().concat('PackageImpl')/]([anEPackage.name.toUpperFirst().concat('PackageImpl')/] const&) = delete;
			[anEPackage.name.toUpperFirst().concat('PackageImpl')/]& operator=([anEPackage.name.toUpperFirst().concat('PackageImpl')/] const&) = delete;

		protected:
			[anEPackage.name.toUpperFirst().concat('PackageImpl')/]();

		public:
			virtual ~[anEPackage.name.toUpperFirst().concat('PackageImpl')/]();

[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) separator ('\n')]
			// Begin Class [aClass.name/]
			//Class and Feature Getter
			[aClass.generateClassGetter(true)/]
			[aClass.eAttributes->sortedBy(name).generateAttributeGetter(true)/]
			[aClass.eReferences->sortedBy(name).generateReferenceGetter(true)/]
			[aClass.eOperations->sortedBy(name).generateOperationGetter(true)/]
			// End Class [aClass.name/]
[/for]

			[anEPackage.eAllContents(EDataType).generateEDatatype(true)/]

		private:
			[anEPackage.eAllContents(EClass)->sortedBy(name).generatePrivatePackageMember()/]
			[anEPackage.eAllContents(EDataType)->sortedBy(name).generatePrivatePackageMember()/]

			friend class [anEPackage.name.concat('Package').toUpperFirst()/];

			static bool isInited;
			static [anEPackage.name.concat('Package').toUpperFirst()/]* create();
			bool isInitialized = false;
 			bool isCreated = false;

			virtual void init();

		public:
			void initializePackageContents();
			void createPackageContents();
[if anEPackage.name.equalsIgnoreCase('ecore')]
	
	//prevent from hiding functions
	using EPackageImpl::getEAnnotation;
	using EPackageImpl::getEClassifier;
[/if]
	};
}
[endGuard(anEPackage,'PackageImpl')/]
[/file]
[/template]