[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateUnion('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateReference /]
[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::helper /]

[**
 * The documentation of the template generateElement.
 * @param anEReference
 */]
[template public generateUnionGetterCpp(aClass : EClass)]
[aClass.getUnionsReference().generateUnionGetterCpp(aClass)/]
[/template]

[template public generateUnionGetterCpp(aReference : EReference,aClass: EClass) ? (hasGetter() and aReference.isUnion() )]
[aReference.generateReferenceType()/] [aClass.name/]Impl::[aReference.GetterName()/]() const
{
	[aReference.generateReferenceType()/] _[aReference.name/][if (aReference.upperBound=1)] = nullptr [else](new std::vector<std::shared_ptr<[aReference.eGenericType.generateCppType()/]>>()) [/if];
	
[if (aReference.upperBound= 1 )]
	[for (ref : EReference | aClass.getSubsetsForUnion(aReference)->asOrderedSet()->sortedBy(name))]
	if([ref.GetterName()/]()!=nullptr)
	{
		_[aReference.name/] = [ref.GetterName()/]();
	}
	[/for]
[else]
	[for (ref : EReference | aClass.getSubsetsForUnion(aReference)->asOrderedSet()->sortedBy(name))]
	[if (ref.upperBound=1)]
	_[aReference.name/]->push_back([ref.GetterName()/]());
	[else]
	[ref.generateReferenceType()/] [ref.name/] = [ref.GetterName()/]();
	_[aReference.name/]->insert(_[aReference.name/]->end(), [ref.name/]->begin(), [ref.name/]->end());
	[/if]
	[/for]
[/if]

	return _[aReference.name/];
}

[/template]

[template public generateUnionGetterDeclaretaion(aClass : EClass, impl : EBoolean)]
[aClass.getUnionsReference().generateUnionGetterDeclaretaion(impl)/]
[/template]

[template public generateUnionGetterDeclaretaion(aReference : EReference, impl : EBoolean)? (hasGetter() and isUnion() )]
[aReference.generateDokumentation()/]
virtual [aReference.generateReferenceType()/] [aReference.GetterName()/]() const [abstractSufix(impl)/];
[/template]