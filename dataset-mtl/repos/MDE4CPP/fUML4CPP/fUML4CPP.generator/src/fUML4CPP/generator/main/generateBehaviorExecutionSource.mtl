[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateBehaviorExecutionSource('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fUML4CPP::generator::main::parameterHelper /]
[import UML4CPP::generator::main::generateType /]
[import UML4CPP::generator::main::helper /]

[template public generateBehaviorExecutionSource(anOpaqueBehavior : OpaqueBehavior, aPackage :Package){ className : String = anOpaqueBehavior.name.toUpperFirst().concat('Execution'); }]

[file (aPackage.getPackageName().concat('Exec/').concat(className).concat('.cpp'), false, 'UTF-8')]
#include "[className/].hpp"
#include <iostream>
#include <cassert>
#include "ParameterValue.hpp"

[if (aPackage.allOwnedElements()->filter(CallOperationAction)->select(operation.method.name->asOrderedSet()->first() = anOpaqueBehavior.name)->size()>0)]
[let cOpSet : CallOperationAction = aPackage.allOwnedElements()->filter(CallOperationAction)->select(operation.method.name->asOrderedSet()->first() = anOpaqueBehavior.name)->asOrderedSet()->first()]
[if (not cOpSet.oclIsUndefined())]
#include "[cOpSet.target.type.name/].hpp"
#include "[cOpSet.target.type.name/]Execution.hpp"
[/if]
[/let]
[/if]

[if (anOpaqueBehavior.ownedParameter->asSet()->parametersArePointers())]
#include "Reference.hpp"
[/if]
[for ( par : Parameter | anOpaqueBehavior.ownedParameter)]
[par.generateParameterInclude()/]
[/for]

using namespace [aPackage.name/];

[className/]::[className/]()
{
}

[className/]::~[className/]()
{
}

[className/]::[className/](const [className/] &obj)
:OpaqueBehaviorExecutionImpl(obj)
{
}

ecore::EObject* [className/]::copy() const
{
    return new [className/](*this);
}

void [className/]::doBody(std::shared_ptr<std::vector<std::shared_ptr<fUML::ParameterValue>>> inputParameters, std::shared_ptr<std::vector<std::shared_ptr<fUML::ParameterValue>>> outputParameters)
{
    DEBUG_MESSAGE(std::cout << "Printing from "<< this->getBehavior()->getName() << std::endl;)
    DEBUG_MESSAGE(std::cout << "__________________________" << std::endl;)

	[for ( par : Parameter | anOpaqueBehavior.ownedParameter)]
    [par.type.generateCppType()/] [par.name/];
	[/for]

	[for ( par : Parameter | anOpaqueBehavior.ownedParameter->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in)))]
    [par.generateInputParameter(anOpaqueBehavior.ownedParameter->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in))->asSequence()->indexOf(par)-1)/]

	[if (not par.supportedTypes())]
	[par.name/] = std::dynamic_pointer_cast<[par.type.namespace.name/]::[par.type.name/]Execution>([par.name/]Value->getReferent())->getUmlValue();
	assert([par.name/] != nullptr);
	[else]
	[par.name/] = [par.name/]Value->getValue();
	[/if]
	[/for]

	[if (aPackage.allOwnedElements()->filter(CallOperationAction)->select(operation.method.name->asOrderedSet()->first() = anOpaqueBehavior.name)->size()>0)]
	[comment]if it is a Call Operation Action[/comment]
	//Call Operation action target
	[for (cOpSet : CallOperationAction | aPackage.allOwnedElements()->filter(CallOperationAction)->select(operation.method.name->asOrderedSet()->first() = anOpaqueBehavior.name)->asOrderedSet()->first())]
	std::shared_ptr<[cOpSet.target.type.namespace.name/]::[cOpSet.target.type.name/]>target = std::dynamic_pointer_cast<[cOpSet.target.type.namespace.name/]::[cOpSet.target.type.name/]Execution>(this->getContext())->getUmlValue();
    assert(target != nullptr);
	[/for]
	[/if]

    //Body of the Opaquebehavior
    //Start ---------------------------
	[if(not aPackage.allOwnedElements()->filter(CallOperationAction)->select(operation.method.name->asOrderedSet()->first() = anOpaqueBehavior.name)->isEmpty())]
	[for (cOpSet : CallOperationAction | aPackage.allOwnedElements()->filter(CallOperationAction)->select(operation.method.name->asOrderedSet()->first() = anOpaqueBehavior.name)->asOrderedSet()->first())]
	
	//Calling the associated operation.
	[let retPar : Set(Parameter) = anOpaqueBehavior.ownedParameter->select(p :Parameter | (p.direction = ParameterDirectionKind::return))->asSet()]
	[if(not retPar->isEmpty())] [if (not retPar->asOrderedSet()->first().oclIsInvalid())][retPar.name/] = [/if][/if][/let]  target->[cOpSet.operation.name/]([for (sParameter : Parameter | anOpaqueBehavior.ownedParameter->select(p :Parameter | not (p.direction = ParameterDirectionKind::return))) separator (',')][sParameter.name/][/for]);
	[/for]
	[else]
		[if (anOpaqueBehavior.getAppliedStereotype('setBehaviour').oclIsUndefined() )]
		//Function Behaviour from a Call Behavior Action
   		[anOpaqueBehavior._body->first()/]
		[else]
		[anOpaqueBehavior.inputParameters()->selectByType(InputPin).name/]->set[anOpaqueBehavior.name/]([anOpaqueBehavior.inputParameters()->selectByType(ValuePin).value.oclAsType(LiteralInteger).value/]);
		[/if]
	[/if]
    //End -----------------------------

	//set return / out parameters
	[for ( par : Parameter | anOpaqueBehavior.ownedParameter->select((direction = ParameterDirectionKind::_out) or (direction = ParameterDirectionKind::return)))]
    [par.generateOutputParameter()/]
	[if (not par.supportedTypes())]
	[par.name/]UmlLinker->setUmlValue([par.name/]);
    [par.name/]UmlLinker->setLocus(this->getLocus());
    [par.name/]Value->setReferent([par.name/]UmlLinker);
	[else]
 	[par.name/]Value->setValue([par.name/]);
	[/if]
    outputParameters->at([anOpaqueBehavior.ownedParameter->select((direction = ParameterDirectionKind::_out) or (direction = ParameterDirectionKind::return))->asSequence()->indexOf(par)-1/])->getValues()->push_back([par.name/]Value);
	[/for]

	//set InOut parameters
	[for ( par : Parameter | anOpaqueBehavior.ownedParameter->asOrderedSet()->select(direction = ParameterDirectionKind::inout)->sortedBy(name))]
	[if (par.direction <> ParameterDirectionKind::inout or not par.supportedTypes())]
	[par.generateOutputParameter()/]
	[/if]
	[if (not par.supportedTypes())]
	//Pointer type
	[par.name/]UmlLinker->setUmlValue([par.name/]);
    [par.name/]UmlLinker->setLocus(this->getLocus());
    [par.name/]Value->setReferent([par.name/]UmlLinker);
	[else]
	//Simple type
 	[par.name/]Value->setValue([par.name/]);
	[/if]
    //outputParameters->push_back(inputParameters->at([anOpaqueBehavior.ownedParameter->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in))->asSequence()->indexOf(par)-1/]));
	[/for]
	DEBUG_MESSAGE(std::cout<< "^^^^^ FB [anOpaqueBehavior.name/] ends its execution ^^^^^" << std::endl;)
}
[/file]
[/template]