[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateActivityExecutionHeader('http://www.eclipse.org/uml2/5.0.0/UML')]
 
[import fUML4CPP::generator::main::parameterHelper /]
[import UML4CPP::generator::main::generateType /]
[import UML4CPP::generator::main::helper /]

[template public generateActivityExecutionHeader(aActivity : Activity)
{aPackage : Package = aActivity.ancestors()->filter(Package)->first(); 
className : String = aActivity.name.concat('Execution'); 
}]
[file (aPackage.getPackageName().concat('Exec/').concat(className).concat('.hpp'), false, 'UTF-8')]
[startGuard(aActivity,'Execution')/]

#define [aActivity.name.toUpperCase()/] 1
#include "impl/ActivityExecutionImpl.hpp"
[for ( par : Parameter | aActivity.ownedParameter)]
[par.generateParameterInclude()/]
[/for]

namespace [aPackage.name/] 
{
	class [className/] : public fUML::ActivityExecutionImpl 
	{
		public:
		    [className/](const [className/] &obj);
		    //constructor52
		    [className/]();
		    //destructor
		    virtual ~[className/]();
		
			virtual void terminate();
		    virtual void execute();
		    virtual ecore::EObject* copy() const;
			
			[let op : Operation = aActivity.specification.oclAsType(Operation)]		
			virtual [op.generateCppType()/] execute( [for (sParameter : Parameter | op.ownedParameter->select(p :Parameter | not (p.direction = ParameterDirectionKind::return))) separator (',')][sParameter.type.generateCppType()/] [sParameter.name/][/for]);
			[/let]
	};
}
[endGuard(aActivity,'Execution')/]
[/file]
[/template]
