[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateClassExecutionSource('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::helper /]

[query public supportedTypes(type : Type) : Boolean = (type.name = 'Integer') or (type.name = 'Boolean') /]

[template public generateClassExecutionSource(aClass : Class, aPackage:Package){ 
className : String = aClass.name.toUpperFirst().concat('Execution'); 
pointerName : String = aClass.name.toUpperFirst(); 
}]

[file (aPackage.getPackageName().concat('Exec/').concat(className).concat('.cpp'), false, 'UTF-8')]
#include "[className/].hpp"
#include <iostream>
#include <cassert>

using namespace [aPackage.name/];

[className/]::[className/](std::shared_ptr<[pointerName/]> _element):
	m_umlValue(_element)
{
}

[className/]::[className/]([className/] &obj):
	ObjectImpl(obj)
{
}

[className/]::[className/]()
{
}

[className/]::~[className/]()
{
}

ecore::EObject* [className/]::copy()
{
    return new [className/](*this);
}

std::shared_ptr<[pointerName/]> [className/]::getUmlValue() const
{
	return m_umlValue;
}

void [className/]::setUmlValue(std::shared_ptr<[pointerName/]> _element)
{
	m_umlValue = _element;
}
[/file]
[/template]