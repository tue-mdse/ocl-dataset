[comment encoding = UTF-8 /]
[module classHeaderElements('http://www.eclipse.org/uml2/4.0.0/UML')]
[import AUTCPP::header::files::associations /]
[import AUTCPP::header::files::classAttributes /]
[import AUTCPP::header::files::classOperations /]
[import AUTCPP::header::files::coreServices /]
[import AUTCPP::header::files::setgetMethods /]

[template public generateInheritance (aClass : Class)]
[for (aGeneralization : Generalization | generalization) before (':')separator(',')] [general.visibility /] [general.name /][/for]
[/template]

[template public generateAttributes(aClass : Class, aVisibility : VisibilityKind) post (trim())]
[for (aProperty: Property | orderByContents( attribute->select(visibility=aVisibility)->asSequence() ) )]
[if (association->size()>0)][getAssociationInfo(aProperty)/]
[else]
[if (isStatic)]static [/if][getPropertyInfo(aProperty)/]
[/if]
[/for]
[/template]

[template public generateOperations(aClass : Class, aVisibility : VisibilityKind)]
[for (aOperation: Operation | orderByContents( aClass.ownedOperation->select(visibility=aVisibility)->asSequence() ) )separator ('\n')]
[generateOperation(aOperation)/][/for]
[/template]

[template public generateSetMethods(aClass : Class) post(trim())]
[for (aProperty: Property |orderByContents(aClass.attribute->select(visibility=VisibilityKind::private and association->size()<=0)->asSequence() ))]
[generateSet(aProperty)/][/for]
[/template]

[template public generateSetMethodsForAssociations(aClass : Class) post(trim())]
[for (aProperty: Property |orderByContents(aClass.attribute->select( association->size()>0)->asSequence() ))]
[generateSetAssociations(aProperty)/][/for]
[/template]

[template public generateGetMethods(aClass : Class) post(trim())]
[for (aProperty: Property |orderByContents(aClass.attribute->select(visibility=VisibilityKind::private and association->size()<=0)->asSequence() ))]
[generateGet(aProperty)/][/for]
[/template]

[template public generateGetMethodsForAssociations(aClass : Class) post(trim())]
[for (aProperty: Property |orderByContents(aClass.attribute->select(association->size()>0)->asSequence() ))]
[generateGetAssociations(aProperty)/][/for]
[/template]