[comment encoding = UTF-8 /]
[module generateServices('http://www.xtext.org/grl/tgrl/TGRL')]
[import org::eclipse::acceleo::module::tgrl::java::services::generateModelFeatures /]

[template public getLinkSrc(grlSpec : GRLSpecification , inModel : Model ,inIntentionalElement : IntentionalElement) post(trim())]
linksSrc="[for (elementLink : ElementLink | getAllElementLinks(grlSpec,inModel).oclAsType(ElementLink))]
	[if (elementLink.oclIsTypeOf(NormalDecomposition))]
[for (end : DecompositionEnd |elementLink.oclAsType(NormalDecomposition).dest)][if (findSuperIntentionalElement(grlSpec,inModel, end.destName).name=inIntentionalElement.name)][end.id/]L [/if][/for]
	[elseif (elementLink.oclIsTypeOf(NormalContribution))]
[if (elementLink.oclAsType(NormalContribution).src=inIntentionalElement)][for (end : ContributionEnd |elementLink.oclAsType(NormalContribution).dest)][end.id/]L [/for][/if]
	[elseif (elementLink.oclIsTypeOf(NormalDependency))]
[if (elementLink.oclAsType(NormalDependency).src=inIntentionalElement)][for (end : DependencyEnd |elementLink.oclAsType(NormalDependency).dest)][end.id/]L [/for][/if]
[/if][/for]"
[/template]

[template public getLinksDest(grlSpec : GRLSpecification, inModel : Model ,inIntentionalElement : IntentionalElement) post(trim())]
linksDest="[for (elementLink : ElementLink | getAllElementLinks(inModel).oclAsType(ElementLink))]
	[if (elementLink.oclIsTypeOf(NormalDecomposition))]
[if (elementLink.oclAsType(NormalDecomposition).src=inIntentionalElement)][for (end : DecompositionEnd |elementLink.oclAsType(NormalDecomposition).dest)][end.id/]L [/for][/if]
	[elseif (elementLink.oclIsTypeOf(NormalContribution))]
[for (end : ContributionEnd |elementLink.oclAsType(NormalContribution).dest)][if (findSuperIntentionalElement(grlSpec,inModel, end.destName).name=inIntentionalElement.name)][end.id/]L [/if][/for]
	[elseif (elementLink.oclIsTypeOf(NormalDependency))]
[for (end : DependencyEnd |elementLink.oclAsType(NormalDependency).dest)][if (findSuperIntentionalElement(grlSpec,inModel, end.destName).name=inIntentionalElement.name)][end.id/]L [/if][/for]
[/if][/for]"
[/template]


[template public getSucc(grlSpec : GRLSpecification, inModel : Model ,inIntentionalElement : IntentionalElement) post(trim())]
succ="[for (elementLink : ElementLink | getAllElementLinks(inModel).oclAsType(ElementLink))]
	[if (elementLink.oclIsTypeOf(NormalDecomposition))]
[for (end : DecompositionEnd |elementLink.oclAsType(NormalDecomposition).dest)][if (findSuperIntentionalElement(grlSpec,inModel, end.destName).name=inIntentionalElement.name)]//@urndef/@specDiagrams.0/@connections.[end.id/] [/if][/for]
	[elseif (elementLink.oclIsTypeOf(NormalContribution))]
[if (elementLink.oclAsType(NormalContribution).src=inIntentionalElement)][for (end : ContributionEnd |elementLink.oclAsType(NormalContribution).dest)]//@urndef/@specDiagrams.0/@connections.[end.id/] [/for][/if]
	[elseif (elementLink.oclIsTypeOf(NormalDependency))]
[if (elementLink.oclAsType(NormalDependency).src=inIntentionalElement)][for (end : DependencyEnd |elementLink.oclAsType(NormalDependency).dest)]//@urndef/@specDiagrams.0/@connections.[end.id/] [/for][/if]
[/if][/for]"
[/template]

[template public getPred(grlSpec : GRLSpecification,inModel : Model ,inIntentionalElement : IntentionalElement) post(trim())]
pred="[for (elementLink : ElementLink | getAllElementLinks(inModel).oclAsType(ElementLink))]
	[if (elementLink.oclIsTypeOf(NormalDecomposition))]
[if (elementLink.oclAsType(NormalDecomposition).src=inIntentionalElement)][for (end : DecompositionEnd |elementLink.oclAsType(NormalDecomposition).dest)]//@urndef/@specDiagrams.0/@connections.[end.id/] [/for][/if]
	[elseif (elementLink.oclIsTypeOf(NormalContribution))]
[for (end : ContributionEnd |elementLink.oclAsType(NormalContribution).dest)][if (findSuperIntentionalElement(grlSpec,inModel, end.destName).name=inIntentionalElement.name)]//@urndef/@specDiagrams.0/@connections.[end.id/] [/if][/for]
	[elseif (elementLink.oclIsTypeOf(NormalDependency))]
[for (end : DependencyEnd |elementLink.oclAsType(NormalDependency).dest)][if (findSuperIntentionalElement(grlSpec,inModel, end.destName).name=inIntentionalElement.name)]//@urndef/@specDiagrams.0/@connections.[end.id/] [/if][/for]
[/if][/for]"
[/template]

[template public getType(inIntentionalElement : IntentionalElement) post(trim())]
[if (oclIsKindOf(Softgoal))]
[elseif (oclIsKindOf(Goal))]
type="Goal"
[elseif (oclIsKindOf(Task))]
type="Task"
[elseif (oclIsKindOf(Indicator))]
type="Indicator"
[elseif (oclIsKindOf(Resource))]
type="Ressource"
[/if]
[/template]

[comment][template public getLinkType(inConnection : Connection) post(trim())]
xsi:type="grl:[if (oclIsKindOf(DecompositionEnds))]
Decomposition"
[elseif (oclIsKindOf(DependencyEnds))]
Dependency"
[elseif (oclIsKindOf(ContributionEnds))]
Contribution" contribution="[inElementLink.oclAsType(Contribution).contribution/]" quantitativeContribution="[inElementLink.oclAsType(Contribution).quantitativeContribution/]" [if (inElementLink.oclAsType(Contribution).correlation->size()=0)]correlation="false"
[else]correlation="[inElementLink.oclAsType(Contribution).correlation.toString()/]"[/if]
[/if]
[/template][/comment]

[template public getNodes(inActor : Actor) post(trim())]
[if (elemets->selectByKind(SuperIntentionalElement)->size()>0)]
nodes="[for (elementLink : SuperIntentionalElement | elemets->selectByKind(SuperIntentionalElement))][id/]R [/for]"
[/if]	
[/template]

[template public getColor(inGRLElement : SuperIntentionalElement) ]
[if (Color.toString()='white')]
[elseif (fillColor.toString()='black')]
filled="true" fillColor="0,0,0"
[elseif (fillColor.toString()='blue')]
filled="true" fillColor="96,96,191"
[elseif (fillColor.toString()='green')]
filled="true" fillColor="96,191,96"
[elseif (fillColor.toString()='cyan')]
filled="true" fillColor="96,191,191"
[elseif (fillColor.toString()='red')]
filled="true" fillColor="191,96,96"
[elseif (fillColor.toString()='purple')]
filled="true" fillColor="191,96,191"
[elseif (fillColor.toString()='yellow')]
filled="true" fillColor="191,191,96"
[elseif (fillColor.toString()='gray')]
filled="true" fillColor="160,160,160"
[elseif (fillColor.toString()='lightGray')]
filled="true" fillColor="191,191,191"
[elseif (fillColor.toString()='lightBlue')]
filled="true" fillColor="160,160,255"
[elseif (fillColor.toString()='lightGreen')]
filled="true" fillColor="160,255,160"
[elseif (fillColor.toString()='lightCray')]
filled="true" fillColor="160,255,255"
[elseif (fillColor.toString()='lightRed')]
filled="true" fillColor="255,160,160"
[elseif (fillColor.toString()='lightPurple')]
filled="true" fillColor="255,160,255"
[elseif (fillColor.toString()='lightYellow')]
filled="true" fillColor="255,255,160" [/if]
[/template]

[template public getColor(inActor : Actor) ]
[if (Color.toString()='white')]
[elseif (fillColor.toString()='black')]
filled="true" fillColor="0,0,0"
[elseif (fillColor.toString()='blue')]
filled="true" fillColor="96,96,191"
[elseif (fillColor.toString()='green')]
filled="true" fillColor="96,191,96"
[elseif (fillColor.toString()='cyan')]
filled="true" fillColor="96,191,191"
[elseif (fillColor.toString()='red')]
filled="true" fillColor="191,96,96"
[elseif (fillColor.toString()='purple')]
filled="true" fillColor="191,96,191"
[elseif (fillColor.toString()='yellow')]
filled="true" fillColor="191,191,96"
[elseif (fillColor.toString()='gray')]
filled="true" fillColor="160,160,160"
[elseif (fillColor.toString()='lightGray')]
filled="true" fillColor="191,191,191"
[elseif (fillColor.toString()='lightBlue')]
filled="true" fillColor="160,160,255"
[elseif (fillColor.toString()='lightGreen')]
filled="true" fillColor="160,255,160"
[elseif (fillColor.toString()='lightCray')]
filled="true" fillColor="160,255,255"
[elseif (fillColor.toString()='lightRed')]
filled="true" fillColor="255,160,160"
[elseif (fillColor.toString()='lightPurple')]
filled="true" fillColor="255,160,255"
[elseif (fillColor.toString()='lightYellow')]
filled="true" fillColor="255,255,160" [/if]
[/template]

[template public getName(inSuperIntentionalElement : SuperIntentionalElement) post(trim())]
[if (label='')]
[HTMLCodeExchange(name.oclAsType(String))/][else][HTMLCodeExchange(label.oclAsType(String))/]
[/if]
[/template]
[template public PrintMetaData(inMetadata : Set(Metadata)) post(trim())]
[for (metadata : Metadata | inMetadata)]
<metadata name="[name/]" value="[HTMLCodeExchange(value.oclAsType(String))/]"/>
[/for]
[/template]

[template public PrintKPIHeader(grlSpec : GRLSpecification,inModel : Model) post(trim())]
[if (getAllQualitativeMappings(grlSpec,inModel)->size()>0)]xmlns:grl.kpimodel="http:///grl/kpimodel.ecore"[/if]
[/template]

[template public getIncludedStrategies (aStrategyGroup : StrategyGroup) post (trim()) ]
[if (strategies->size()>0)] strategies="[for (eStrategy : EvaluationStrategy | strategies)][eStrategy.id/] [/for]"[/if]
[/template]

[template public getIncludedContributions (aContributionGroup : ContributionGroup) ]
[if (contribs->size()>0)] contribs="[for (contributionC : ContributionContext | contribs)][contributionC.id/] [/for]"[/if]
[/template]

[template public getIncludedStrategies (aEvaluationStrategy : EvaluationStrategy) post (trim()) ]
[if (superStrategies->size()>0)] includedStrategies="[for (eStrategy : EvaluationStrategy | superStrategies)][eStrategy.id/] [/for]"[/if]
[/template]

[template public getIncludedContributions (aContributionContext : ContributionContext) ]
[if (superContributionContexts->size()>0)] includedContexts="[for (ContributionC : ContributionContext | superContributionContexts)][ContributionC.id/] [/for]"[/if]
[/template]

[template private getRawContributionGroups (grlSpec : GRLSpecification, aContributionContext : ContributionContext)  post (trim())]
[for (contributionGroup : ContributionGroup	 | grlSpec.grlElements->selectByType(ContributionGroup))]
[for (ContributionC : ContributionContext | contributionGroup.contribs)]
[if (ContributionC.name=aContributionContext.name)][contributionGroup.id /] [/if]
[/for]
[/for]
[/template]

[template public getContributionGroups (grlSpec : GRLSpecification, aContributionContext : ContributionContext)  post (trim())]
[let value : String = getRawContributionGroups(grlSpec,aContributionContext).toString()][if (value='')]2[else][value/][/if][/let]
[/template]

[template public getParentStrategies (grlSpec : GRLSpecification,inModel : Model ,aEvaluationStrategy : EvaluationStrategy) ]
[if (getAllParentStrategis(inModel,aEvaluationStrategy)->size()>0)] parentStrategies="[for (eStrategy : EvaluationStrategy | getAllParentStrategis(inModel,aEvaluationStrategy).oclAsType(EvaluationStrategy))][eStrategy.id/] [/for]"[/if]
[/template]


[template public getParentContributions (grlSpec : GRLSpecification,inModel : Model ,aContributionContext : ContributionContext) ]
[if (getAllParentContributionContexts(inModel,aContributionContext)->size()>0)] parentContexts="[for (ContributionC : ContributionContext | getAllParentContributionContexts(inModel,aContributionContext).oclAsType(ContributionContext))][ContributionC.id/] [/for]"[/if]
[/template]

[template public getImportance (inGRLElement : GRLElement) post (trim()) ]
[if (inGRLElement.oclIsTypeOf(Actor))][if (not (inGRLElement).oclAsType(Actor).importance.oclIsUndefined())] importance="[(inGRLElement).oclAsType(Actor).importance.toString().toUpperFirst()/]" [/if]
[else]
[if (not (inGRLElement).oclAsType(IntentionalElement).importance.oclIsUndefined())] importance="[(inGRLElement).oclAsType(IntentionalElement).importance.toString().toUpperFirst()/]" [/if][/if]
[/template]

[template public getImportanceQuantitative(inGRLElement : GRLElement) post (trim()) ]
[if (inGRLElement.oclIsTypeOf(Actor))][if (not (inGRLElement).oclAsType(Actor).importanceQuantitative.oclIsUndefined())] importanceQuantitative="[(inGRLElement).oclAsType(Actor).importanceQuantitative/]" [/if]
[else]
[if (not (inGRLElement).oclAsType(IntentionalElement).importanceQuantitative.oclIsUndefined())] importanceQuantitative="[(inGRLElement).oclAsType(IntentionalElement).importanceQuantitative/]" [/if][/if]
[/template]
[template public getContributionType (inContributionEnd : ContributionEnd) post (trim())]
contribution="[contribution.toString().toUpperFirst()/]" [if (inContributionEnd.quantitativeContribution.toString().equalsIgnoreCase(''))][getImplicitQuantitativeContribution(contribution)/][/if]
[/template]

[template public getImplicitQuantitativeContribution (inContributionType : ContributionType) ]
[if (inContributionType.toString().equalsIgnoreCase('make'))] quantitativeContribution = "100" 
[elseif (inContributionType.toString().equalsIgnoreCase('help'))] quantitativeContribution = "25" 
[elseif (inContributionType.toString().equalsIgnoreCase('somePositive'))] quantitativeContribution = "75" 
[elseif (inContributionType.toString().equalsIgnoreCase('unknown'))] quantitativeContribution = "0" 
[elseif (inContributionType.toString().equalsIgnoreCase('someNegative'))] quantitativeContribution = "-75" 
[elseif (inContributionType.toString().equalsIgnoreCase('hurt'))] quantitativeContribution = "-25" 
[elseif (inContributionType.toString().equalsIgnoreCase('break'))] quantitativeContribution = "-100" [/if]
[/template]
[template public getQuantitativeContribution (aContributionEnd : ContributionEnd) post (trim()) ]
[if (not aContributionEnd.quantitativeContribution.toString().equalsIgnoreCase(''))] quantitativeContribution ="[quantitativeContribution/]" [/if]
[/template]

[template public getValidName (element : SuperIntentionalElement) post (trim()) ]
[if (element.label.toString()='')]name="[ HTMLCodeExchange(element.name.oclAsType(String))/]" [else]name="[ HTMLCodeExchange(element.label.oclAsType(String))/]" [/if]
[/template]

[template public getValidName (element : Actor) post (trim()) ]
[if (element.label.toString()='')]name="[ HTMLCodeExchange(element.name.oclAsType(String))/]" [else]name="[HTMLCodeExchange(element.label.oclAsType(String))/]" [/if]
[/template]


[template public ApplyURNLink (grlSpec : GRLSpecification ,inGRLElement : GRLElement, inModel : Model) ]
[ApplyURNLinkFrom(grlSpec, inGRLElement, inModel)/] [ApplyURNLinkTo(grlSpec, inGRLElement, inModel)/] 
[/template]
[template public ApplyURNLinkFrom (grlSpec : GRLSpecification ,inGRLElement : GRLElement, inModel : Model) ]
fromLinks="[for (normalLink : NormalLink | getAllElementLinks(grlSpec,inModel)->selectByKind(NormalLink))][let baseIndex : Integer = i-2][if (normalLink.src.id=inGRLElement.id)][for (grlElementDest : GRLElement |normalLink.dest)]//@urnLinks.[i+baseIndex/] [/for][/if][/let][/for]" 
[/template]
[template public ApplyURNLinkTo (grlSpec : GRLSpecification ,inGRLElement : GRLElement, inModel : Model) ]
toLinks="[for (normalLink : NormalLink | getAllElementLinks(grlSpec,inModel)->selectByKind(NormalLink))][let baseIndex : Integer = i-2][for (grlElementDest : GRLElement |normalLink.dest)][if (grlElementDest.id=inGRLElement.id)]//@urnLinks.[i+baseIndex/] [/if][/for][/let][/for]" 
[/template]


[template public HTMLCodeExchange (value:String) ]
[value.replaceAll('&', '&amp;').replaceAll('<', '&lt;').replaceAll('>', '&gt;')/]
[/template]

[template public PrintEvaluation (aEvaluationStrategy : EvaluationStrategy) ]
[for (ev : Evaluation | aEvaluationStrategy.evaluations)]
<evaluations evaluation="[getQualitativeValue(ev)/]" intElement="[intentionalElement.id/]">
        <kpiEvalValueSet/>
		[if (evalRange <> null)]<evalRange start="[evalRange.start/]" end="[evalRange.end/]" step="[evalRange.step/]"/>[/if]
</evaluations>	
[/for]
[/template]

[template public PrintChanges (aContributionContext : ContributionContext) ]

[/template]

[template public getQualitativeValue (aEvaluation : Evaluation)  post (trim()) ]
[if (evaluation->isEmpty())]
[if (qualitativeEvaluation.toString().equalsIgnoreCase('satisfied'))]100
[elseif (qualitativeEvaluation.toString().equalsIgnoreCase('weaklysatisfied'))]50
[elseif (qualitativeEvaluation.toString().equalsIgnoreCase('none'))]0
[elseif (qualitativeEvaluation.toString().equalsIgnoreCase('weaklydenied'))]-50
[elseif (qualitativeEvaluation.toString().equalsIgnoreCase('denied'))]-100
[elseif (qualitativeEvaluation.toString().equalsIgnoreCase('conflict'))]-101
[elseif (qualitativeEvaluation.toString().equalsIgnoreCase('unknown'))]-101
[/if][else][evaluation/][/if]
[/template]

[template public getUngroupedStrategies (grlSpec : GRLSpecification) post (trim()) ]
[for (eStrategy : EvaluationStrategy | grlSpec.grlElements->selectByType(EvaluationStrategy))]
[for (sg : StrategyGroup | grlSpec.grlElements->selectByType(StrategyGroup))][if (not sg.strategies->exists(name=eStrategy.name))][eStrategy.id/][/if][/for]
[/for]
[/template]


[template public getUngroupedContributions(grlSpec : GRLSpecification) ]
[for (ContributionC : ContributionContext | grlSpec.grlElements->selectByType(ContributionContext))]
[for (cg : ContributionGroup | grlSpec.grlElements->selectByType(ContributionGroup))][if (not cg.contribs->exists(name=ContributionC.name))][ContributionC.id/] [/if][/for]
[/for]
[/template]

