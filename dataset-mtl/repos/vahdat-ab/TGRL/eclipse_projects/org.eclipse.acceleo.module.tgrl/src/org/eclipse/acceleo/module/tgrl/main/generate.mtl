[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module generate('http://www.xtext.org/grl/tgrl/TGRL')]
[import org::eclipse::acceleo::module::tgrl::java::services::generateFeatures /]
[import org::eclipse::acceleo::module::tgrl::services::generateServices /]
[import org::eclipse::acceleo::module::tgrl::java::services::generateModelFeatures /]

[**
 * The documentation of the template generateElement.
 * @param aModel
 */]
[template public generateElement(aModel : Model)]
[comment @main/]
[for (grlSpec : GRLSpecification | gRLspecifications)]
[file (grlSpec.name.toString()+'_m'+i+'.jucm', false, 'UTF-8')]
<?xml version="1.0" encoding="ISO-8859-1"?>
<urn:URNspec xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:grl="http:///grl.ecore" [PrintKPIHeader(aModel)/] xmlns:urn="http:///urn.ecore" name="URNspec" author="Vahdat" created="February 16, 2015 7:08:06 PM EST" modified="February 16, 2015 7:08:10 PM EST" specVersion="2" urnVersion="1.27" nextGlobalID="14">
  <ucmspec>
    <scenarioGroups name="ScenarioGroup5" id="5">
      <scenarios name="ScenarioDef6" id="6"/>
    </scenarioGroups>
  </ucmspec>
  <grlspec>

[comment]*****************************************Actor**********************************************[/comment]
[for (actor : Actor | grlSpec.grlElements->selectByKind(Actor))]
	<actors [getValidName(actor)/] id="[id/]" description="[description/]" [getImportance(actor)/] [getColor(actor)/] [getImportanceQuantitative(actor) /] contRefs="[id/]R"[if (metaData->size()>0)]>
	[PrintMetaData(metaData)/]
	</actors>
	[else]/>		
	[/if]	
[/for]
[comment]*****************************************Intentional Elements**********************************************[/comment]
[for (intentionalElement : IntentionalElement | getAllSuperIntentionalElements(aModel)->selectByKind(IntentionalElement))]
	<intElements [getValidName(intentionalElement)/] id="[id/]" description="[description/]" [getColor(intentionalElement)/] decompositionType = "[decompositionType.toString().toUpperFirst()/]" [getImportance(intentionalElement)/] [getImportanceQuantitative(intentionalElement)/] [getType(intentionalElement)/] [getLinkSrc(grlSpec,aModel, intentionalElement)/] [getLinksDest(grlSpec,aModel, intentionalElement)/] [ApplyURNLink(grlSpec, intentionalElement, aModel)/] refs="[id/]R"[if (metaData->size()>0)]>
	[PrintMetaData(metaData)/]
	</intElements>
	[else]/>		
	[/if]
[/for]
[comment]*****************************************ElementLink**********************************************[/comment]
[for (elementLink : ElementLink | getAllElementLinks(aModel).oclAsType(ElementLink))]
	[if (elementLink.oclIsTypeOf(NormalDecomposition))]
	[for (end : DecompositionEnd |elementLink.oclAsType(NormalDecomposition).dest)]	
	<links xsi:type="grl:Decomposition" name="" description="[description/]"  id="[end.id/]L" refs="//@urndef/@specDiagrams.0/@connections.[end.id/]" src="[end.destName.id/]" dest="[elementLink.oclAsType(NormalDecomposition).src.id/]"/>
    [/for]
	[elseif (elementLink.oclIsTypeOf(NormalContribution))]
	[for (end : ContributionEnd |elementLink.oclAsType(NormalContribution).dest)]	
	<links xsi:type="grl:Contribution" name="[name/]" [comment]description="[description/]"[/comment]  id="[end.id/]L" refs="//@urndef/@specDiagrams.0/@connections.[end.id/]" dest="[end.destName.id/]" src="[elementLink.oclAsType(NormalContribution).src.id/]" [getContributionType(end)/] [getQuantitativeContribution(end)/]/>
    [/for]
	[elseif (elementLink.oclIsTypeOf(NormalDependency))]
	[for (end : DependencyEnd |elementLink.oclAsType(NormalDependency).dest)]	
	<links xsi:type="grl:Dependency" name="" description="[description/]"  id="[end.id/]L" refs="//@urndef/@specDiagrams.0/@connections.[end.id/]" dest="[end.destName.id/]" src="[elementLink.oclAsType(NormalDependency).src.id/]"/>
    [/for]
	[/if]
[/for]
[comment]*****************************************ElementLink**********************************************[/comment]
[comment]*****************************************Strategy**********************************************[/comment]
<groups name="default" id="1" strategies="[getUngroupedStrategies().trim()/]"/>
[for (strategtGroup : StrategyGroup	 | grlSpec.grlElements->selectByType(StrategyGroup))]
	<groups name="[HTMLCodeExchange(name.oclAsType(String))/]" id="[id/]" [getIncludedStrategies(strategtGroup)/]/>
[/for]

[for (eStrategy : EvaluationStrategy	 | grlSpec.grlElements->selectByType(EvaluationStrategy))]
	<strategies name="[HTMLCodeExchange(name.oclAsType(String))/]" id="[id/]" [getIncludedStrategies(eStrategy)/] [getParentStrategies(grlSpec,aModel,eStrategy)/]  [if ( metaData->size()>0 or evaluations->size()>0)]>
	[PrintMetaData(metaData)/]
	[PrintEvaluation(eStrategy)/]	
	</strategies>
	[else]/>	
	[/if]	
[/for]

[comment]*****************************************Strategy**********************************************[/comment]
[comment]*****************************************Contribution**********************************************[/comment]
<contributionGroups name="default" id="2" contribs="[getUngroupedContributions().trim()/]"/>
[for (contributionGroup : ContributionGroup	 | grlSpec.grlElements->selectByType(ContributionGroup))]
	<contributionGroups name="[HTMLCodeExchange(name.oclAsType(String))/]" id="[id/]" [getIncludedContributions(contributionGroup)/]/>
[/for]

[for (contributionC : ContributionContext	 | grlSpec.grlElements->selectByType(ContributionContext))]
	<contributionContexts name="[HTMLCodeExchange(name.oclAsType(String))/]" id="[id/]" [getIncludedContributions(contributionC)/] [getParentContributions(grlSpec,aModel,contributionC)/] groups="[getContributionGroups(grlSpec,contributionC).trim()/]" [if ( metaData->size()>0 or changes->size()>0)]>
	[PrintMetaData(metaData)/]
	[PrintChanges(contributionC)/]	
	</contributionContexts>
	[else]/>	
	[/if]	
[/for]

[comment]*****************************************Contribution**********************************************[/comment]
    <impactModel/>
    <indicatorGroup name="Time" id="7" isRedesignCategory="true"/>
    <indicatorGroup name="Cost" id="8" isRedesignCategory="true"/>
    <indicatorGroup name="Quality" id="9" isRedesignCategory="true"/>
    <indicatorGroup name="Flexibility" id="10" isRedesignCategory="true"/>
	[for (qMapping : QualitativeMapping | getAllQualitativeMappings(aModel).oclAsType(QualitativeMapping))]
	<KPIConversion xsi:type="grl.kpimodel:QualitativeMappings" name="[HTMLCodeExchange(name.oclAsType(String))/]" id="[id/]">
	[PrintMetaData(metaData)/]
	[for (mapping : Mapping | mappings)]
		<mapping realWorldLabel="[HTMLCodeExchange(mapping.name.oclAsType(String))/]" evaluation="[evaluation/]" qualitativeEvaluation="[qualitativeEvaluation.toString().toUpperFirst()/]" exceeds="[exceeds/]"/>
	[/for]    
    </KPIConversion>
	[/for]


    <featureModel/>
  </grlspec>
  <urndef>
    <specDiagrams xsi:type="grl:GRLGraph" name="GRLGraph2" id="2">
[for (intentionalElement : IntentionalElement | getAllSuperIntentionalElements(aModel)->selectByKind(IntentionalElement))]
      <nodes xsi:type="grl:IntentionalElementRef" name="Int[id/]R" [getSucc(grlSpec,aModel, intentionalElement)/] [getPred(grlSpec,aModel, intentionalElement)/] id="[id/]R" def="[id/]">
        <metadata name="_height" value="45"/>
        <metadata name="_width" value="110"/>
      </nodes>
[/for]
[for (belief : Belief | getAllSuperIntentionalElements(aModel)->selectByKind(Belief))]
	 <nodes xsi:type="grl:Belief" [getValidName(belief)/] id="[id/]R" [getColor(belief)/] description="[description/]"[if (metaData->size()>0)]>
	[PrintMetaData(metaData)/]
	</nodes>
	[else]/>		
	[/if]	
[/for]

[comment]*****************************************************ElementLink*****************************************[/comment]
[for (elementLink : ElementLink | getAllElementLinks(aModel).oclAsType(ElementLink))]
	[if (elementLink.oclIsTypeOf(NormalDecomposition))]
	[for (end : DecompositionEnd |elementLink.oclAsType(NormalDecomposition).dest)]	
	<connections xsi:type="grl:LinkRef" target="[elementLink.oclAsType(NormalDecomposition).src.id/]R" source="[end.destName.id/]R" link="[end.id/]L"/>
    [/for]
	[elseif (elementLink.oclIsTypeOf(NormalContribution))]
	[for (end : ContributionEnd |elementLink.oclAsType(NormalContribution).dest)]	
	<connections xsi:type="grl:LinkRef" source="[elementLink.oclAsType(NormalContribution).src.id/]R" target="[end.destName.id/]R" link="[end.id/]L"/>
    [/for]
	[elseif (elementLink.oclIsTypeOf(NormalDependency))]
	[for (end : DependencyEnd |elementLink.oclAsType(NormalDependency).dest)]	
	<connections xsi:type="grl:LinkRef" source="[elementLink.oclAsType(NormalDependency).src.id/]R" target="[end.destName.id/]R" link="[end.id/]L"/>
    [/for]
	[/if]
[/for]
[comment]*****************************************************ElementLink*****************************************[/comment]
[for (actor : Actor | grlSpec.grlElements->selectByKind(Actor))]
      <contRefs xsi:type="grl:ActorRef" name="ActorRef[id/]R" id="[id/]R" [getNodes(actor)/] [ApplyURNLink(grlSpec, actor, aModel)/] width="200" height="200" contDef="[id/]">
        <label/>
      </contRefs>
[/for]
[for (grlcomment : Comment | grlSpec.grlElements->selectByKind(Comment))]
	<comments description="[HTMLCodeExchange(content.oclAsType(String))/]" x="10" y="10" width="200" height="100" fillColor="255,255,200"/>
[/for]
    </specDiagrams>
  </urndef>
[for (elementLink : ElementLink | getAllElementLinks(aModel)->selectByKind(NormalLink))]
	[for (grlElementDest : GRLElement |elementLink.oclAsType(NormalLink).dest)]	
	<urnLinks type="[elementLink.oclAsType(NormalLink).type.name/]" fromElem="[elementLink.oclAsType(NormalLink).src.id/]" toElem="[grlElementDest.id/]"/>
    [/for]
[/for]
  <metadata name="_Use0to100EvaluationRange" value="false"/>
[for (linkType : LinkType | grlSpec.grlElements->selectByType(LinkType))]
  <metadata name="UrnLinkType" value="[name/]"/>
[/for]
</urn:URNspec>
[/file]


[comment] End of the For command [/comment]
[/for]
[/template]
