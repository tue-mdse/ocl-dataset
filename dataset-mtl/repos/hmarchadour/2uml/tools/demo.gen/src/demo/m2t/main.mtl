[comment encoding = UTF-8 /]
[module main('http://www.eclipse.org/emf/2002/Ecore')/]

[template public main(any : ENamedElement)]
	[comment @main /]
	[file ('demo/'.concat('Fields.java'), false, 'UTF-8')]
[genFields()/]
	[/file]
	[file ('demo/'.concat('ArrayFields.java'), false, 'UTF-8')]
[genArrayFields()/]
	[/file]
	[file ('demo/'.concat('Methods.java'), false, 'UTF-8')]
[genMethods()/]
	[/file]
	[file ('demo/'.concat('Functions.java'), false, 'UTF-8')]
[genFunctions()/]
	[/file]
	[file ('demo/'.concat('PublicConstructors.java'), false, 'UTF-8')]
[genPublicConstructors()/]
	[/file]
	[file ('demo/'.concat('ProtectedConstructors.java'), false, 'UTF-8')]
[genProtectedConstructors()/]
	[/file]
	[file ('demo/'.concat('PrivateConstructors.java'), false, 'UTF-8')]
[genPrivateConstructors()/]
	[/file]
[/template]

[template public genFields(any : OclAny)]
package demo;

public class Fields {
[for (visibility : String | getJavaVisibilities())]
	[for (type2handle : String | getJavaTypes())]
	[visibility/] [type2handle/] [type2handle/][visibility.toUpperFirst()/]Field;
	[/for]

[/for]
}
[/template]

[template public genArrayFields(any : OclAny)]
package demo;

public class ArrayFields {
[for (visibility : String | getJavaVisibilities())]
	[for (type2handle : String | getJavaTypes())]
	[visibility/] [type2handle/]['[]'/] [type2handle/][visibility.toUpperFirst()/]ArrayField;
	[/for]

[/for]
}
[/template]

[template public genMethods(any : OclAny)]
package demo;

public class Methods {
[for (visibility : String | getJavaVisibilities())]

	[for (type2handle : String | getJavaTypes())]
	[visibility/] void set[visibility.toUpperFirst()/]Field([type2handle/] [visibility.toUpperFirst()/]Field) {}
	[/for]

	[for (type2handle : String | getJavaTypes())]
	[visibility/] void set[visibility.toUpperFirst()/]ArrayField([type2handle/]['[]'/] [visibility.toUpperFirst()/]Field) {}
	[/for]

[/for]
}
[/template]

[template public genFunctions(any : OclAny)]
package demo;

public class Functions {
[for (visibility : String | getJavaVisibilities())]
	[for (type2handle : String | getJavaObjectPrimitives())]
	[visibility/] [type2handle/] get[visibility.toUpperFirst()/][type2handle/]Field() { return null; }
	[/for]

	[for (type2handle : String | getJavaObjectPrimitives())]
	[visibility/] [type2handle/]['[]'/] get[visibility.toUpperFirst()/][type2handle/]ArrayField() {return null; }
	[/for]

[/for]
}
[/template]

[template public genPublicConstructors(any : OclAny)]
package demo;

public class PublicConstructors {
	public PublicConstructors() {}
[for (type2handle : String | getJavaTypes())]
	public PublicConstructors([type2handle/] [type2handle/]Arg) {}
[/for]
}
[/template]

[template public genProtectedConstructors(any : OclAny)]
package demo;

public class ProtectedConstructors {
	protected ProtectedConstructors() {}
[for (type2handle : String | getJavaTypes())]
	protected ProtectedConstructors([type2handle/] [type2handle/]Arg) {}
[/for]
}
[/template]

[template public genPrivateConstructors(any : OclAny)]
package demo;

public class PrivateConstructors {
	private PrivateConstructors() {}
[for (type2handle : String | getJavaTypes())]
	private PrivateConstructors([type2handle/] [type2handle/]Arg) {}
[/for]
}
[/template]

[query public getJavaTypes(any : OclAny) : OrderedSet(String) = OrderedSet{'Object', 'Boolean', 'Byte', 'Character', 'Double', 'Integer', 'Float', 'Long', 'Short', 'boolean', 'byte', 'char', 'double', 'int', 'float', 'long', 'short'} /]
[query public getJavaPrimitives(any : OclAny) : OrderedSet(String) = OrderedSet{'boolean', 'byte', 'char', 'double', 'int', 'float', 'long', 'short'} /]
[query public getJavaObjectPrimitives(any : OclAny) : OrderedSet(String) = OrderedSet{'Object', 'Boolean', 'Byte', 'Character', 'Double', 'Integer', 'Float'} /]
[query public getJavaVisibilities(any : OclAny) : OrderedSet(String) = OrderedSet{'', 'public', 'private', 'protected'} /]

