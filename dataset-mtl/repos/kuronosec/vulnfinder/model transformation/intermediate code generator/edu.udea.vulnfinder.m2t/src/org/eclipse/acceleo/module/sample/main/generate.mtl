[comment encoding = UTF-8 /]
[module generate('http://udea/vulnfinder/securityTest')]


[template public generateElement(aSecurityTest : Test)]
[comment @main/]
[file (aSecurityTest.id+'.s', false, 'UTF-8')]
(security-test {:name "[aSecurityTest.id/]" 
				:severity [aSecurityTest.severity/] 
				:roles ['['/][for (rol : String | aSecurityTest.authSetting.roles) separator (' ')]"[rol/]"[/for][']'/]
				:username-param "[aSecurityTest.authSetting.usernameParam/]"
				:password-param "[aSecurityTest.authSetting.passwordParam/]"
				:login-target-url "[aSecurityTest.authSetting.loginTargetURL/]"
				:login-message-pattern "[aSecurityTest.authSetting.loginMessagePattern/]"
				:logout-message-pattern "[aSecurityTest.authSetting.logoutMessagePattern/]"}
	(toes
	[for (toe : TargetOfEvaluation | aSecurityTest.scope)]
		(toe "[toe.domain/]"
[for (page : WebComponent | toe.components) separator('\n') ]			(page "[page.path/]"[if (page.inputs->isEmpty())])[else]['\n'/][/if][for (field : Input | page.inputs) separator('\n')]
				(field "[field.name/]" ['['/][for (attack : Attack | field.attacks) separator (' ')]"[attack.name/]"[/for][']'/])[/for][if (page.inputs->notEmpty())])[/if][/for])[/for])
	(attacks
	[for (attack : Attack | aSecurityTest.possibleAttacks) separator('\n')]
		(attack "[attack.name/]" {:severity [attack.severity/]})[/for]))
[/file]
[/template]
