[comment encoding = UTF-8 /]
[module javaCollectionContainsOperator('platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/AnnotationLayerStack.ecore', 'platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/AuthorizationPSMMetamodel.ecore', 'platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/PSMMetamodel.ecore')]


[template public javaCollectionContainsOperator(anAnnotationStack : AnnotationStack)]

[file (anAnnotationStack.hasCorePSM.name  + '/src/main/java/eu/fp7/scase/' + anAnnotationStack.hasCorePSM.name.toLowerCase() + '/utilities/authorization/operators/CollectionContainsOperator.java', false, 'UTF-8')]
package eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.operators;

import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.attr.AttributeValue;
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.attr.CollectionOfAttributes;
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.enums.OperatorEnum;

public class CollectionContainsOperator extends Operator {

	private final OperatorEnum operatorId;
	
	protected CollectionContainsOperator(OperatorEnum operatorId){
		this.operatorId = operatorId;
	}
	
	@Override
	public EvaluationResult evaluate(List<AttributeValue> inputs) {
		if (inputs.size() != 2){
			return new EvaluationResult("Wrong Number of inputs : " + inputs.size() + " instead of 2");
		}
		Collection<AttributeValue> col1;
		Collection<AttributeValue> col2;

		if (inputs.get(0).isCollection()){
			col1 = ((CollectionOfAttributes)inputs.get(0)).getValue();
		}else{
			Set<AttributeValue> set1 = new HashSet<AttributeValue>();
			set1.add(inputs.get(0));
			col1 = set1;			
		}

		if (inputs.get(1).isCollection()){
			col2 = ((CollectionOfAttributes)inputs.get(1)).getValue();
		}else{
			Set<AttributeValue> set2 = new HashSet<AttributeValue>();
			set2.add(inputs.get(1));
			col2 = set2;	
		}
		
		switch (operatorId){
		case SUBSET:
			return  EvaluationResult.getInstance(col2.containsAll(col1));
		case NOT_SUBSET:
			return EvaluationResult.getInstance(!col2.containsAll(col1));
		case SET_CONTAINS:
			return EvaluationResult.getInstance(col1.containsAll(col2));
		case SET_NOT_CONTAINS:
			return EvaluationResult.getInstance(!col1.containsAll(col2));
		default:
			return new EvaluationResult("Unsupported comparison operator");			
		}
	}

	@Override
	public OperatorEnum getOperatorId() {
		return operatorId;
	}

}

[/file]
[/template]
