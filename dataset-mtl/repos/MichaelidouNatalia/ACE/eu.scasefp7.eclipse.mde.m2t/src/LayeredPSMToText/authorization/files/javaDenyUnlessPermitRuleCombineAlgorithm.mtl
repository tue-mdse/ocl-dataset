[comment encoding = UTF-8 /]
[module javaDenyUnlessPermitRuleCombineAlgorithm('platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/AnnotationLayerStack.ecore', 'platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/AuthorizationPSMMetamodel.ecore', 'platform:/plugin/eu.scasefp7.eclipse.mde.m2m/Metamodels/PSMMetamodel.ecore')]


[template public javaDenyUnlessPermitRuleCombineAlgorithm(anAnnotationStack : AnnotationStack)]

[file (anAnnotationStack.hasCorePSM.name  + '/src/main/java/eu/fp7/scase/' + anAnnotationStack.hasCorePSM.name.toLowerCase() + '/utilities/authorization/combine/DenyUnlessPermitRuleCombAlgorithm.java', false, 'UTF-8')]

package eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.combine;

import java.util.Iterator;
import java.util.List;

import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.core.AbstractEvaluationContext;
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.core.ResourceAccessRule;
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.core.AuthorizationResult;
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.enums.AuthorizationResultCode;
import eu.fp7.scase.[anAnnotationStack.hasCorePSM.name.toLowerCase()/].utilities.authorization.enums.CombiningAlgorithmEnum;

public class DenyUnlessPermitRuleCombAlgorithm extends RuleCombiningAlgorithm{

	protected DenyUnlessPermitRuleCombAlgorithm() {
		super(CombiningAlgorithmEnum.DENY_UNLESS_PERMIT);
	}

	@Override
	public AuthorizationResult combine(AbstractEvaluationContext evaluationContext, List<?> rules) {
		Iterator<?> it = rules.iterator();
		
		 while (it.hasNext()) {
			 ResourceAccessRule rule = (ResourceAccessRule)it.next();
			 AuthorizationResult result = rule.evaluate(evaluationContext);
			 
			 if (result.getResultCode() == AuthorizationResultCode.PERMIT){
				 return result;
			 }		 
		 }
		 return new AuthorizationResult(AuthorizationResultCode.DENY);
	}

}
[/file]
[/template]
