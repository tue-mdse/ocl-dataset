(*
	FICHIER  	: Tracabilite.mtl
	CREATION 	: 13/11/2007
	AUTEUR		: R.CHAUMET
	
	------------------------------------------------------------------------------
	MODIF						DATE		Ind
	Ajout gestion du repertoire "nom du produit"	24/01/2008	@1
	Chgt du nom du fichier de capabilite		07/02/2008	@2
	Ajout mode d'enregistrement ds BDD dpku		07/02/2008	@3
	Integration du PCheck				16/10/2015	@4
	------------------------------------------------------------------------------

*)


(* Les variables *)

%nb_champs_enregistres=20; (*5 defauts fois 4 champs par defaut*)
%nb_defauts_enregistres=5;
%nb_mesure_defauts=400;

:ligne_data_defauts[1..nb_mesure_defauts] string;
:pas_de_test_defauts int;


:separateur,separateur2 string;
separateur:=";";
separateur2:=";";

:chemin_fichier_defauts string;
chemin_fichier_defauts:="D:/traces/";

:nom_fichier_defauts string;
nom_fichier_defauts:="resultats";

:extension_fichier_defauts string;
extension_fichier_defauts:=".csv";

:type_testeur string;
type_testeur:="ICT";

:code_operateur string;
code_operateur:="0000";

:Vers_Prg_test string;
Vers_Prg_test:="01";


(* CAPABILITE *)
:pas_de_test_capabilite int;
%nb_mesure=2000;
:ligne_data[1..nb_mesure] string;
:Capabilite boolean ;
:EtatCapabilite boolean ;
(* ********** *) 


(* ** UGS ************************************************************* *)
(* UGS - Variables							*)

:Buffer string;
(* !! C'est MTL qui reserve la mémoire pour la variable et non la DLL !! *)
Buffer :=  "                                                           .                                                                                 .                                                                   ." ;

(* DEFINI LE NOMBRE DE DEFAUT MAX RETOUNER A UGS *)
:NbMaxUgsDefault int ;
NbMaxUgsDefault := 2 ;

(* DEFINI LE NOMBRE DE CSE MAX *)
:NbMaxCse int;
NbMaxCse := 1;

:VarCSE int ;
:VarDef int;

:UgsNumCarteDsFormat int ;
UgsNumCarteDsFormat := 1 ;

(*@4*)
:UgsNipCodeFormat[10] string;

(* Sauvergarde du NIP de la carte *)
:UgsNipCode string ;

(******* VARIABLES DE CONFIGURATION BIBLIOTHEQUE ********)
(* @1 Sauvergarde de la famille du produit *)
:UgsTypeProduit string;

(* Nom du programme de test *)
:UgsNomProgram string;

(* defini si le repertoire de sauvegarde est divive par le nom du produit *)
:UgsTypeDirectory string;

(* @3 Mode d'enregistrement Suivit DPKU *)
%TypeModeSuivitDpku enum { UNDEF, TYPEPRODUIT, MODELEMID, PROGRAM }
:ModeSuivitDpku TypeModeSuivitDpku ;


(* Pour la gestion du retrie contacts, on enregistre le defaut de contact *)
(* mais on le passe a UGSLink, que si il n'y a pas d'autre defauts        *)
:UgsDefContacts string;

 (* Variable de gestion Time out *)
%UGSTIMEOUT=20s
:UgsTimeOutDeb int;

(* Les options de tests USG sont defini ds la fichier INI *)
:OptionUgs int ;


(* UGS - Fin Variables									*)


(********************************************************************************************************************************)
(********************************************************************************************************************************)
(**************** LES FONCTIONS *************************************************************************************************)
(********************************************************************************************************************************)
(********************************************************************************************************************************)

(********************************************************************************************************************************)
(* CAPABILITE 															*)
:init_capabilite( ) void
{
        pas_de_test_capabilite:=1;
}


:resultat_capabilite( ) void
{
	if ( ( (Test.type = _DIODE) || (Test.type = _TRAN) || (Test.type = _LED) || (Test.type = _FET) ) && (Test.mode = OFF) )
		return;

	if ( (Test.Type = _DISCHARGE) || (Test.type= _LINK) || (Test.type = _CONTACT) || (Test.type = _TRACK) || (Test.type = _TESTMODULE) ) 
		return;


        if ((result.inrange = 1) || (test.fail))
        {
   		ligne_data[pas_de_test_capabilite]:=sprintf ("%-10.10s %-8v %-8v %-10v\n",Test.Ident, Result.Lolimit, Result.Hilimit, Result.Measured) ;
        }
        else
        if ((result.outofrangehi = 1) && (test.pass))
        {
   		ligne_data[pas_de_test_capabilite]:=sprintf ("%-10.10s %-8v %-8v %-10v\n", Test.Ident, Result.Lolimit, Result.Hilimit, Result.hilimit) ;
        }
        else
        if ((result.outofrangelo = 1)  && (test.pass))
        {
   		ligne_data[pas_de_test_capabilite]:=sprintf ("%-10.10s %-8v %-8v %-10v\n",  Test.Ident, Result.Lolimit, Result.Hilimit, Result.lolimit) ;
        }

	pas_de_test_capabilite:=pas_de_test_capabilite+1;
}


:sauver_capabilite(nom_fichier string) void
{
	:i int;
	:PtrFic int ;
	:Modele string ;
	
	Modele := UgsNipCode[1] + UgsNipCode[2] ;
	
	(* Gestion MID/NIP *)
	if ( sizeof (UgsNipCode) > 8 )
	{
		Modele := Modele + UgsNipCode[3] ;
	}

	if (prog.faults=0)
	{
   		PtrFic := fopen (nom_fichier+"_"+Modele+".Capa","a");
   		for (i:=1; i<= pas_de_test_capabilite; i:=i+1)
        	{
        		fprintf(PtrFic,"%s",ligne_data[i]);
        	}
   		fclose(PtrFic);
	}

}
(********************************************************************************************************************************)


(*------------------------------------------------------------------------------------------------------------------------------*)
(* Pointeur sur la DLL *)
:Ptr_DLL_UGS DLL.Handle;

(* Definition des fonctions de la DLL *)
:UgsLink##'@DLL'(param1 @string, param2 @string) int;


(*------------------------------------------------------------------------------------------------------------------------------*)
(* UGS 				*)
(* Initialisation de la DLL 	*)
:InitDll_UGS ( ) void
{

	:Text string;
	:Buffer string;
	
	(* !! C'est MTL qui reserve la mémoire pour la variable et non la DLL !! *)
	Buffer :=  "                                                           .                                                                                 .                                                                   ." ;
	Text := Buffer ;
	
	(* Initialisation du pointeur sur la DLL *)
	if ( Ptr_DLL_UGS = 0 )
	{
		(*DLL.FreeLibrary(Ptr_DLL_UGS);*)
	
		Ptr_DLL_UGS := DLL.LoadLibrary("\\UGSLink\\UGSLink.dll");
	
		(* Initialisation des fonctions de la DLL*)
		DLL.BindProc(Ptr_DLL_UGS,"UgsLink", UgsLink);
	}
}

(*------------------------------------------------------------------------------------------------------------------------------*)
(* Liberation de la DLL *)
:FreeDll_UGS ( ) void
{
	:Text string;
	:Buffer string;

	Text := sprintf ( "%s", "QUIT" ) ;
	UgsLink ( @Text, @Buffer ) ;	

	DLL.FreeLibrary(Ptr_DLL_UGS);
}


(*------------------------------------------------------------------------------------------------------------------------------*)
(* retourne une chaine de caractere unite de mesure en fonction du test *)
:UgsAffecteUnite ( ) string
{
	:StrResultat	string;

	case (Test.Type)
	{
		_RES    :	StrResultat := "Ohms" ;
		_CAP    :	StrResultat := "Farads" ;
		_IND    :	StrResultat := "Henrys" ;
		_TRANSF :	StrResultat := "Ratio" ;
		_DIODE,_LED,_TRAN,_FET  :
		{	case (Test.Mode)
			{
				OFF :	StrResultat := "Amperes" ;
			 	ON  :	StrResultat := "Volts" ;
			 	RDS  :	StrResultat := "Ohms" ;
				else	StrResultat := "None" ;
			}
		}
		_ZENER,_OPTO,_ACV,_DCV :	StrResultat := "Volts" ;
		_DCI :	StrResultat := "Amperes" ;
		_PULSE  :	
		{	case (Test.Mode)
			{
				FREQ   : StrResultat := "Hz" ;
			 	PERIOD : StrResultat := "S" ;
			 	TIME   : StrResultat := "S" ;
				else	 StrResultat := "None" ;
			}
		}
	
		else
		{
			StrResultat := "None" ;
		}
	}


	return (StrResultat) ;
}

(*------------------------------------------------------------------------------------------------------------------------------*)
(* retourne une chaine de caractere formatee UGS template *)
:UgsAffecteResultat ( Type int ) string
{
	:StrResultat	string;
	:StrCmd		string ;
	
	:ValMesure		string ;
	:Unite		string;

	:i int ;
	:StrPin		string ;

	
	
	Unite := UgsAffecteUnite ( ) ;
			
	case(Test.type)
	{
		_RES.._DCI :
		{
			if ( Type = 1 ) StrCmd := "PUSHDEFANA# ICT# FAILED# None"
			else		StrCmd := "PUSHCSEANA# ICT# PASSED# CSE" ;

			if ( Result.OutofRange = false ) ValMesure := sprintf ( "%v", Result.Measured )
			else 				 ValMesure := sprintf ( "-900.000" ) ;
			
			
			(*Nom du test*)(*Valeur mesuree*)(*Limite basse*)(*Limite haute*)(*Valeur Cible*)(*Unitée*)
			StrResultat := sprintf ("%s# %s# %s# %!v# %!v# %!v# %s"	, StrCmd
										, Test.Ident
										, ValMesure
										, Result.Lolimit
										, Result.Hilimit
										, (Result.Hilimit+Result.Lolimit)/2
										, Unite );
		}
		_CONTACT :
		{
			if ( Type = 1 ) StrCmd := "PUSHDEFDIG# ICT# FAILED# None"
			else		StrCmd := "PUSHCSEDIG# ICT# PASSED# CSE" ;

			(* On met bout a bout les TPs *)
			ValMesure := "" ;
			for ( i:=1; i<=Test.Faults; i:=i+1 )
			{
				StrPin := sprintf ( "%p", Result.ContactFaults[i] ) ;
				if ( ValMesure = "" )
					ValMesure := StrPin[2..sizeof(StrPin)]
				else
					ValMesure := ValMesure +";"+ StrPin[2..sizeof(StrPin)]
			}
			
			(*Nom du test*)(*Valeur mesuree*)(*Valeur Cible*)
			StrResultat := sprintf ("%s# %s# %s# %d"	, StrCmd
									, Test.Ident		(* contact *)
									, ValMesure			(* le nom tp testeur *)
									, Test.Faults );		(* Nb defaut *)
		}
		_LINK :
		{
			if ( Type = 1 ) StrCmd := "PUSHDEFDIG# ICT# FAILED# None"
			else		StrCmd := "PUSHCSEDIG# ICT# PASSED# CSE" ;
			
			(*Nom du test*)(*Valeur mesuree*)(*Valeur Cible*)
			StrResultat := sprintf ("%s# %s# %p not linked to# %p"	, StrCmd
										, Test.Ident				(* contact *)
										, Result.LinkFaults[1]			(* le nom tp testeur *)
										, Result.LinkFaults[2] );		(* le nom tp testeur *)
		}
		_TRACK :
		{
			if ( Type = 1 ) StrCmd := "PUSHDEFDIG# ICT# FAILED# None"
			else		StrCmd := "PUSHCSEDIG# ICT# PASSED# CSE" ;
			
			(*Nom du test*)(*Valeur mesuree*)(*Valeur Cible*)
			StrResultat := sprintf ("%s# %s# %p linked to# %p"	, StrCmd
										, Test.Ident				(* contact *)
										, Result.TrackFaults[1][1]			(* le nom tp testeur *)
										, Result.TrackFaults[1][2] );		(* le nom tp testeur *)
		}

		
		else
		{
			if ( Type = 1 ) StrCmd := "PUSHDEFDIG# ICT# FAILED# None"
			else		StrCmd := "PUSHCSEDIG# ICT# PASSED# CSE" ;
			
			if ( Result.OutofRange = false ) ValMesure := sprintf ( "%v", Result.Measured )
			else 				 ValMesure := sprintf ( "-900.000" ) ;

			StrResultat := sprintf ("%s# %s# %s# None"	, StrCmd
											, Test.Ident
											, ValMesure ) ;
		}
	}
	
	return (StrResultat);
}

(*------------------------------------------------------------------------------------------------------------------------------*)
(* Definie la pile des enregistrements UGS en fonction du numero de carte ds le format *)
(* Attention la numerotation commence a 1 pour UGS *)
:UGS_NumCarteDsFormat (NumCarteDsFormat int ) int
{	
	:CodeRetour int ;
	:Text	string;
	:DecaleNumerotation int
	
	DecaleNumerotation := 0 ;
		
	if ( UgsNumCarteDsFormat < NumCarteDsFormat+DecaleNumerotation )
		UgsNumCarteDsFormat := NumCarteDsFormat+DecaleNumerotation ;
		
	Text := sprintf ( "%s %d", "ACTIVEPAGE#", NumCarteDsFormat+DecaleNumerotation ) ;
	CodeRetour := UgsLink ( @Text, @Buffer ) ;
	
	return (CodeRetour) ;
}

(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)
:UsgAskRoute ( ) int
{
	:Text string;
	:CodeRetour int;
	:SavBuffer string;

	UgsTimeOutDeb := time.elapsed ;

	CodeRetour := 0 ;
	
	if ( UgsTypeDirectory = "" )
		Text := sprintf ( "%s# %s", "ASKROUTE", UgsNipCode )
	else
		Text := sprintf ( "%s# %s# %s", "ASKROUTE", UgsTypeDirectory, UgsNipCode );
	
	CodeRetour := UgsLink ( @Text, @Buffer ) ;
	SavBuffer := Buffer ;
	if ( CodeRetour<>0 )
	{
		VERB ACTIVE "UGSLink" "RouteChecker" >0 {Result.measured := CodeRetour ; }
		fprintf(sys.print.channel,"-ASK RouteChecker\n");
		fprintf(sys.print.channel,"-Erreur : %s\n", SavBuffer);
		fflush(sys.print.channel);
	}
	
	return (CodeRetour ) ;

}

(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)
:UsgResRoute ( ) int
{
	:Text string;
	:CodeRetour int;
	:SavBuffer string;

	CodeRetour := 0 ;
	
	repeat
	{
		if ( UgsTypeDirectory = "" )
			Text := sprintf ( "%s# %s", "RESROUTE", UgsNipCode )
		else
			Text := sprintf ( "%s# %s# %s", "RESROUTE", UgsTypeDirectory, UgsNipCode );
			
		CodeRetour := UgsLink ( @Text, @Buffer ) ;
		(* Si CodeRetour = -75 c'est que le fichier ResRoute n'exste pas *)
	}
	until ( (time.Elapsed-UgsTimeOutDeb) > UGSTIMEOUT || CodeRetour = 0 || CodeRetour <> -75 ) 

	SavBuffer := Buffer ;
	if ( CodeRetour<>0 )
	{
		VERB ACTIVE "UGSLink" 100,100 {Result.measured := CodeRetour ; }
		fprintf(sys.print.channel,"-RES RouteChecker\n");
		if ( CodeRetour <>1 ) fprintf(sys.print.channel,"-Erreur : %s\n", SavBuffer)
		else fprintf(sys.print.channel,"-Erreur : Pas de reponse d'UGS.\n")
		fflush(sys.print.channel);
	}
	
	return (CodeRetour ) ;

}
(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)

(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)
(* @4 *)
:UgsAskPCheck ( ) int
{
	:Text string;
	:CodeRetour int;
	:SavBuffer string;
	:i int ;
	
	:RouteCheck int;
	RouteCheck := 0 ;
	
	i:=0;
	
	CodeRetour := 0 ;

   (* if ( OptionUgs = 10 || OptionUgs = 11 )
    {*)	
          UgsTimeOutDeb := time.elapsed ;
          
          Text := sprintf ( "%s", "ASKROUTEDEB" ) ;
	  CodeRetour := UgsLink ( @Text, @Buffer ) ;
          
          for ( i:=1; i<=UgsNumCarteDsFormat; i:=i+1 )
          {
              	Text := sprintf ( "%s %d", "ACTIVEPAGE#", i ) ;
		CodeRetour := UgsLink ( @Text, @Buffer ) ;
		
                Text := sprintf ( "%s# %s", "ASKROUTENIP", UgsNipCodeFormat[i] ) ;
                CodeRetour := UgsLink ( @Text, @Buffer ) ;  
                if ( CodeRetour != 0 ) RouteCheck := CodeRetour ;
          }(*du for *)

	  Text := sprintf ( "%s", "ASKROUTEFIN" ) ;
          CodeRetour := UgsLink ( @Text, @Buffer ) ;  
               
    	  if ( RouteCheck<>0 )
    	  {
    		VERB ACTIVE "UGSLink_PCheck_Ask" >0 {Result.measured := RouteCheck ; }
    		fprintf(sys.print.channel,"-ASK RouteChecker\n");
    		fprintf(sys.print.channel,"-Erreur : %s\n", SavBuffer);
    		fflush(sys.print.channel);
    	  }
    (*}*)
	return ( RouteCheck ) ;
}
(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)
(* @4 *)
:UgsResPCheck ( ) int
{
	:Text string;
	:CodeRetour int;
	:SavBuffer string;
	:SavRes int;
	:i int ;

	CodeRetour := 0 ;
	SavRes  := 0 ;
	
	(*if ( OptionUgs = 10 || OptionUgs = 11 )
    	{*)	
          for ( i:=1; i<=UgsNumCarteDsFormat; i:=i+1 )
          {

		UGS_NumCarteDsFormat ( i ) ;

		repeat
		{
			if ( UgsTypeDirectory = "" )
				Text := sprintf ( "%s# %d", "RESROUTE_PCHECK", i )
			else
				Text := sprintf ( "%s# %s# %d", "RESROUTE_PCHECK", UgsTypeDirectory, i );
			
			CodeRetour := UgsLink ( @Text, @Buffer ) ;

			if ( CodeRetour <> 0 ) SavRes := CodeRetour ;

			(* Si CodeRetour = -75 c'est que le fichier ResRoute n'exste pas *)
		}
		until ( (time.Elapsed-UgsTimeOutDeb) > UGSTIMEOUT || CodeRetour = 0 || CodeRetour <> -75 ) 

		SavBuffer := Buffer ;
		if ( CodeRetour <>0 )
		{
			(*VERB ACTIVE "UGSLink_PCheck_Res" 100,100 {Result.measured := CodeRetour ; }*)
			VERB ACTIVE "MAX_Recyclage" 100,100 {Result.measured := CodeRetour ; }
			fprintf(sys.print.channel,"-RES RouteChecker\n");
			if ( CodeRetour <>1 ) fprintf(sys.print.channel,"-Erreur : %s\n", SavBuffer)
			else fprintf(sys.print.channel,"-Erreur : Pas de reponse d'UGS.\n")
			fflush(sys.print.channel);
		}
	   }
	(*}*)
	
	return (SavRes) ;

}
(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)


(*------------------------------------------------------------------------------------------------------------------------------*)
(* Enregistrement du fichier USG *)
:UGS (CodeBarre string, IdProgramme string, CodeOperateur string) int
{
	:CodeRetour int ;

	:i int ;
	:Text	string;

	CodeRetour := 0 ;
	i := 0 ;

	(* Recupere la reponse à la demande de route *)
	if ( OptionUgs = 10 || OptionUgs = 11 || CodeRetour <0 )
		UsgResRoute ( ) ;

	Prog.Onfault:= void;
	Prog.OnTest := void ;


	if ( OptionUgs = 1 || OptionUGS = 11 || CodeRetour <0 )
	{
		(* Gestion du defait de contactage *)
		if ( VarDef < NbMaxUgsDefault )
		{
			if ( UgsDefContacts <> "" )
			{
				CodeRetour := UgsLink ( @UgsDefContacts , @Buffer ) ;
			}
		}

		(* Creation du fichier UGS ****************************************************************)
		if ( CodeRetour = 0 )
		{
			if ( UgsTypeDirectory = "" )
				Text := sprintf ( "%s# %s%s", "OPEN1", CodeBarre, ".XML" )
			else
				Text := sprintf ( "%s# %s# %s%s", "OPEN", UgsTypeDirectory, CodeBarre, ".XML" ) ;
				
			CodeRetour := UgsLink ( @Text, @Buffer ) ;
		}
		if ( CodeRetour = 0 )
		{
			Text := sprintf ( "%s %s", "BARCODE#", CodeBarre ) ;
			CodeRetour := UgsLink ( @Text, @Buffer ) ;
		}
		if ( CodeRetour = 0 )
		{
			Text := sprintf ( "%s %s", "TESTERPROGRAM#", IdProgramme ) ;
			CodeRetour := UgsLink ( @Text, @Buffer ) ;
		}
		if ( CodeRetour = 0 )
		{
			if ( prog.faults = 0 )
			{	
				Text := sprintf ( "%s %s", "STATUS#", "PASS" ) ;
				CodeRetour := UgsLink ( @Text, @Buffer ) ;
			}
			else
			{
				Text := sprintf ( "%s %s", "STATUS#", "FAILED" ) ;
				CodeRetour := UgsLink ( @Text, @Buffer ) ;
			}
		}
		if ( CodeRetour = 0 )
		{
			Text := sprintf ( "%s %s", "OPERATOR# ", CodeOperateur ) ;
			CodeRetour := UgsLink ( @Text, @Buffer ); 
		}
		if ( CodeRetour = 0 )
		{
			Text := sprintf ( "%s", "STARTTIME" ) ;
			CodeRetour := UgsLink ( @Text, @Buffer ) ;
		}
		if ( CodeRetour = 0 )
		{
			Text := sprintf ( "%s", "ENDTIME" ) ;
			CodeRetour := UgsLink ( @Text, @Buffer ); 
		}
		if ( CodeRetour = 0 )
		{
			Text := sprintf ( "%s", "TESTERNAME" ) ;
			CodeRetour := UgsLink ( @Text, @Buffer ) ;
		}
		if ( CodeRetour = 0 )
		{
			Text := sprintf ( "%s %s", "LOT#", CodeBarre ) ;
			CodeRetour := UgsLink ( @Text, @Buffer ) ;
		}
		if ( CodeRetour = 0 )
		{
			Text := sprintf ( "%s", "TESTSTEPS" ) ;
			CodeRetour := UgsLink ( @Text, @Buffer ) ;
		}
		if ( CodeRetour = 0 )
		{
			for ( i:=1; i<=UgsNumCarteDsFormat; i:=i+1 )
			{
				if ( prog.faults = 0 )
				{	
					(* Les CSE *)
					Text := sprintf ( "%s", "PULLCSEANA" ) ;
					CodeRetour := UgsLink ( @Text, @Buffer ) ;
					(* -91 : pile vide *)
					if ( CodeRetour = 0 || CodeRetour = -91 )
					{
						Text := sprintf ( "%s", "PULLCSEDIG" ) ;
						CodeRetour := UgsLink ( @Text, @Buffer ) ;
						if ( CodeRetour = -91 ) CodeRetour := 0 ;
					}
				}
				else
				{
					(* Les Defauts *)
					Text := sprintf ( "%s", "PULLDEFANA" ) ;
					CodeRetour := UgsLink ( @Text, @Buffer ) ;
					(* -91 : pile vide *)
					if ( CodeRetour = 0 || CodeRetour = -91 )
					{
						Text := sprintf ( "%s", "PULLDEFDIG" ) ;
						CodeRetour := UgsLink ( @Text, @Buffer ) ;
						if ( CodeRetour = -91 ) CodeRetour := 0 ;
					}
				}
			}
		}
		if ( CodeRetour = 0 )
		{
			Text := sprintf ( "%s", "CLOSETESTSTEPS" ) ;
			CodeRetour := UgsLink ( @Text, @Buffer ) ;
		}
		if ( CodeRetour = 0 )
		{
			Text := sprintf ( "%s", "CLOSE" ) ;
			CodeRetour := UgsLink ( @Text, @Buffer ) ;
		}
		if ( CodeRetour<>0 )
		{
			VERB ACTIVE "UGSLink" 1,1 {Result.measured := CodeRetour ; }
			fprintf(sys.print.channel,"-Erreur : %s\n", Buffer);
			fflush(sys.print.channel);
		}

	} (* if OptionUgs *)		

	return ( CodeRetour ) ;
}
(*************************************************************************************)



(* Tracabilite testing *)
(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)
:date_France(choix_date string) string
{
	:date_fab string;
	:jour, mois,annee,heure string;

	date_fab :="";

	if (time.ascii(time.current)[5..7]="Jan") { mois:="01" }
	if (time.ascii(time.current)[5..7]="Feb") { mois:="02" }
	if (time.ascii(time.current)[5..7]="Mar") { mois:="03" }
	if (time.ascii(time.current)[5..7]="Apr") { mois:="04" }
	if (time.ascii(time.current)[5..7]="May") { mois:="05" }
	if (time.ascii(time.current)[5..7]="Jun") { mois:="06" }
	if (time.ascii(time.current)[5..7]="Jul") { mois:="07" }
	if (time.ascii(time.current)[5..7]="Aug") { mois:="08" }
	if (time.ascii(time.current)[5..7]="Sep") { mois:="09" }
	if (time.ascii(time.current)[5..7]="Oct") { mois:="10" }
	if (time.ascii(time.current)[5..7]="Nov") { mois:="11" }
	if (time.ascii(time.current)[5..7]="Dec") { mois:="12" }

	jour:=time.ascii(time.current)[9..10];
	annee:=time.ascii(time.current)[21..24];
	heure:=time.ascii(time.current)[12..19];

	if(choix_date="pour interieur fichier")
	{
		date_fab := jour + "/" + mois + "/" + annee + separateur + heure;
	}
	if(choix_date="pour le nom du fichier")
	{
	date_fab := annee+"_"+mois+"_"+jour;
	}

	return(date_fab);
}
(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)



(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)
(* Surcharge de la fonction Prog.OnFault      *)
:resultat_defauts( ) void
{
	:OffsetOn int;
	OffsetOn := 0 ;

	:Text string;
	
	if ( pas_de_test_defauts <= nb_defauts_enregistres)
	{
		case(Test.type)
		{
			_DISCHARGE : ligne_data_defauts[pas_de_test_defauts]:=sprintf ("%s%-30.30s%s%s%s",separateur,Test.Ident,separateur2,separateur2,separateur2) ;
			_LINK : ligne_data_defauts[pas_de_test_defauts]:=sprintf ("%s%-30.30s%s%s%s",separateur,Test.Ident,separateur2,separateur2,separateur2) ;
			_CONTACT : ligne_data_defauts[pas_de_test_defauts]:=sprintf ("%s%-30.30s%s%d%s%d%s%p",separateur,Test.Ident,separateur2,Test.Faults,separateur2,Test.Faults,separateur2,Result.ContactFaults[Test.Faults]) ;
			_TRACK : ligne_data_defauts[pas_de_test_defauts]:=sprintf ("%s%-30.30s%s%s%s",separateur,Test.Ident,separateur2,separateur2,separateur2) ;
			_TESTMODULE : ligne_data_defauts[pas_de_test_defauts]:=sprintf ("%s%-30.30s%s%s%s",separateur,Test.Ident,separateur2,separateur2,separateur2) ;

			else
			ligne_data_defauts[pas_de_test_defauts]:=sprintf ("%s%-30.30s%s%-8v%s%-8v%s%-10v",separateur,Test.Ident,separateur2,Result.Lolimit,separateur2,Result.Hilimit,separateur2,Result.Measured) ;
		}

		pas_de_test_defauts:=pas_de_test_defauts+1;
	}
	
	
	(* Modif RC : ajout des defauts ds la table d'UGS -------------------------------------------------------------------*)
	if ( VarDef < NbMaxUgsDefault )
	{
		Text := UgsAffecteResultat (1) ;
		
		if ( Test.type = _CONTACT )
		{
			UgsDefContacts := Text;
		}
		else
		{
			UgsDefContacts := "" ;	
			UgsLink ( @Text, @Buffer );
			VarDef := VarDef + 1 ;
		}
	}
	(* Fin Modif RC ------------------------------------------------------------------------------------------------------*)

 }
(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)


(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)
(* Surcharge de la fonction Prog.OnTest      *)
:ResultatsTests ( ) void
{
	:i int ;
	:Text string ;
	:NbCSE int ;

	NbCse := VarCSE ;
		
	i := 1 ;

	(* Gestion de l'enregistrement des CSE par UGS *)	
	while ( (i <= Test.SubIDentCount) && ( VarCSE = NbCse ) )
	{
		(* sauvegarde des valeurs de CSE *)
		if ( Test.SubIdent[i] = "CSE" ) 
		{
			VarCSE  :=  VarCSE + 1 ;
			Text := UgsAffecteResultat (2) ;
			UgsLink ( @Text, @Buffer );
		}

		i := i + 1 ;		
	}
	
	(* Enregistrement des capabilite *)
	if ( EtatCapabilite = true )
		resultat_capabilite( );	
}
(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)


(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)
:Suivit_defauts(type_produit string,cote_posage string) void
{
	:i,j int;
	:PtrFic int;
	
	:code_barres string;
	code_barres := UgsNipCode ;
	
	
	if (chemin_fichier_defauts+nom_fichier_defauts+extension_fichier_defauts = findfile(nom_fichier_defauts+extension_fichier_defauts,chemin_fichier_defauts))
	{
		
   		PtrFic := fopen (chemin_fichier_defauts+nom_fichier_defauts+date_France("pour le nom du fichier")+extension_fichier_defauts,"a");
   	
   		fprintf (PtrFic,"%s%s%s%s%s%s%s%s%s%s%s%s%s",type_testeur,separateur,type_produit,separateur,code_barres,separateur,date_France("pour interieur fichier"),separateur,cote_posage,separateur,code_operateur,separateur,Vers_Prg_test) 
   	
   		if(Prog.Pass)    
			fprintf (PtrFic,"%s%s%s%s%s%s%s%s%s%s%s%s",separateur,"BON",separateur,code_barres,separateur,code_barres,separateur,code_barres,separateur,code_barres,separateur,code_barres) 
		else  
			fprintf (PtrFic,"%s%s%s%s%s%s%s%s%s%s%s%s",separateur,"MAUVAIS",separateur,code_barres,separateur,code_barres,separateur,code_barres,separateur,code_barres,separateur,code_barres) ;

   		if(Prog.Pass)
   		{
			(*enregistrement de 20 champs vide*)
	 		for (j:=1; j<=nb_champs_enregistres; j:=j+1)
	 		{
	 			fprintf (PtrFic,"%s",separateur) ;
	 		}
		}
		else
		{
			for (i:=1; i<= pas_de_test_defauts; i:=i+1)
	   		{
				fprintf(PtrFic,"%s",ligne_data_defauts[i]);
		 		ligne_data_defauts[i]:=""; (*effacement apres enregistrement*) 
			}

			(*enregistrement de 20 champs vide*)
	 		for (j:=((pas_de_test_defauts-1)*4); j<nb_champs_enregistres; j:=j+1) 
	 		{
	 			fprintf (PtrFic,"%s",separateur) ;
	 		}
		}
		
		fprintf (PtrFic,"\n");
		fclose(PtrFic);
	}
}
(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)



(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)
(* Fonctions de haut niveau 														     	     *)
(*	se sont les seules a etres appelees par le programme principal*)
(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)

(* Permet de stopper ou de reprendre l'enregistrement des capabilites *)
:Bascule_Capabilite ( Etat boolean ) void
{
	
	if ( Capabilite := true )
		EtatCapabilite := Etat ;
}


(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)	
:sauver_defauts(cote_posage string) int
{
		
	:CodeRetour int ;
	CodeRetour := 0 ;
		
	:Modele string ;
	:SuiviTypeProduit string ;
	
	
	(* Appel a la fonction de gestion UGS *)
	CodeRetour := UGS ( UgsNipCode, UgsNomProgram, code_operateur) ;
	
	(* @3 Suivit Dpku *)
	case (ModeSuivitDpku)
	{
		TYPEPRODUIT :	SuiviTypeProduit := UgsTypeProduit ;
		
		MODELEMID : 	{
					Modele := UgsNipCode[1] + UgsNipCode[2] ;

					if ( sizeof (UgsNipCode) > 8 )	Modele := Modele + UgsNipCode[3] ;

					SuiviTypeProduit := Modele ;
				}
				
		PROGRAM :	SuiviTypeProduit := UgsNomProgram ;
		
		else		SuiviTypeProduit := UgsTypeProduit ;
	}

	Suivit_defauts( SuiviTypeProduit , cote_posage ) ;
		
		
	(* Enregistement fichier des capabilites *)
	if ( EtatCapabilite ) 
	{
		sauver_capabilite( UgsNomProgram ) ;
	}
	
	return (CodeRetour) ;
}
(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)


(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)
:init_defauts( NipCode string ) void
{
	
	:Text string ;
	
	(* @3 Vérification des options (option par defaut si non definie ds le programme de test) *)
	if ( UgsTypeProduit = "" ) 	UgsTypeProduit  := "" ;			(* defini le type ou famille de produit *)
	if ( UgsTypeDirectory = "" )	UgsTypeDirectory:= "" ;
	if ( UgsNomProgram = "" )  	UgsNomProgram   := "NOPRG" ;		(* defini le nom du programme *)
	if ( ModeSuivitDpku = UNDEF )	ModeSuivitDpku  := PROGRAM ;		(* defini la valeur du champ 2 du fichier suivit Dpku *)
	if ( Capabilite <> true ) 	
		EtatCapabilite	:= false 
	else
		EtatCapabilite	:= true; 

	UgsNipCode := NipCode ;

	InitDll_UGS ( ) ;
	
	(* mise a zero du nombre de CSE enregistre *)
	VarCSE := 0 ;
	(* remise a 0 du nombre de defaut UGS *)
	VarDef := 0 ;
	
	(* Remise a zero le defauts de contactage *)
	UgsDefContacts := "";

	(* Mise à 1 du numero de la carte ds le format *)
	UgsNumCarteDsFormat := 1 ;
	
	(* Si pas d'erreur de lecture NIP  (Puisque l'appel a ini_defauts est fait juste aprés la verification du NIP) *)
	if ( Prog.faults = 0 )
	{	
		(* Initialisation de UGSLink *)
		Text := sprintf ( "%s", "INIT" ) ;
		UgsLink ( @Text, @Buffer ) ;
	
		(* Sauvegarde de la date et heure de debut *)
		Text := sprintf ( "%s", "SAVETIMESTART" ) ;
		UgsLink ( @Text, @Buffer ) ;

		Text := sprintf ( "%s", "ASKOPTIONS" ) ;
		OptionUgs := UgsLink ( @Text, @Buffer ) ;

		pas_de_test_defauts:=1;
		Prog.Onfault:=resultat_defauts;
        
        	(* Surcharge de la fonction Prog.OnTest pour la gestion des CSE *)
		Prog.OnTest := ResultatsTests ;

		if ( EtatCapabilite = true ) init_capabilite( ) ;

		(* On demmande a UGS la Route *)
		if ( OptionUgs = 10 || OptionUgs = 11 )	UsgAskRoute ( );
	}
	else
	{
		(* On force les options d'Ugs a 0 pour ne pas generer le fichier *)
		OptionUgs := 0 ;
	}

}
(* ------------------------------------------------------------------------------------------------------------------------------------------------- *)

(* ------------------------------------------------------------------------------------------------------------------------------------------------- 
Voici les exemples d'utilisation

(* Chargement de la librairie *)
library "\\UGSLink\\Tracabilite.mtl", UGSLink ;

(* Definition des options de tracabilite *)
with UGSLink
{
	UgsTypeProduit	 := TypeProduit ;
	UgsTypeDirectory := "" ;
	UgsNomProgram	 := Reference_du_produit ;
	ModeSuivitDpku	 := TYPEPRODUIT ;
	Capabilite	 := false ;
}

(* Initialisation *)
UGSLink.Init_Defauts ( MID ) ;

(* Envoi resultat des test a UGS *)
UGSLink.sauver_defauts ( "simple" ) ;

 ------------------------------------------------------------------------------------------------------------------------------------------------- *)
