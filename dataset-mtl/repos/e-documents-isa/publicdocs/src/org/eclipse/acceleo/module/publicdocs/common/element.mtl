[comment encoding = UTF-8 /]
[module element('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::eclipse::acceleo::module::publicdocs::common::util/]
[import org::eclipse::acceleo::module::publicdocs::common::annotation/]

[template public generateElements(class: Class, NDR: String){
pack : Package = class.owner.oclAsType(Package);}]
[for (property: Property | class.ownedAttribute)]
[if not property.hasStereotype('isa::xsdAttribute')]
[generatePropertyElement(property, pack, NDR)/][/if]
[/for]
[/template]

[template public generateAttributes(class: Class, NDR: String){
pack : Package = class.owner.oclAsType(Package);}]
[for (property: Property | class.ownedAttribute)]
[if property.hasStereotype('isa::xsdAttribute')]
[generatePropertyAttribute(property, pack, NDR)/]
[/if][/for]
[/template]


[template public generatePropertyElement(property : Property, pack: Package, NDR: String)]
[if NDR = 'CommentsOnly' or pack.getDependencies(property)->isEmpty()]
[if not property.type->isEmpty()]
[generateElementInternalOrExternal(property, pack, NDR)/]
[else][comment]Just a quick fix for properties not yet defined[/comment]
[generateElement(property, property.name.concat('Type'))/]
[/if]
[else]
[generateCoreVocsElement(property, pack, NDR)/]
[/if]
[/template]

[template public generatePropertyAttribute(property : Property, pack: Package, NDR: String)]
<[getNS('xs')/]:attribute name="[property.name/]" type="xs:[property.type.name/]" use="optional"/>
[/template]

[template public generateElementInternalOrExternal(property : Property, pack: Package, NDR: String){
type : PackageableElement = property.type;
typePackName: String = type.owner.oclAsType(Package).name;
isPrimitive: Boolean = property.type.oclIsTypeOf(PrimitiveType);
useUnqualifiedDataTypes: Boolean = true}]
[if not isLocal(type)]
	[if isPrimitive]
		[if typePackName=pack.name]
[generateElement(property, property.type.name)/]
		[else]
			[if useUnqualifiedDataTypes]
[generateElementWithUnqualifiedDataTypes2(property)/]
			[else]
[generateElement(property, typePackName.concat(':').concat(property.type.name))/]
			[/if]
		[/if]
	[else]
		[if typePackName=pack.name]
[generateElement(property, property.type.name.concat('Type'))/]
		[else]
[generateElement(property, typePackName.concat(':').concat(property.type.name.concat('Type')))/]
		[/if]
	[/if]
[else]
	[if typePackName=pack.name]
	[debug('samePack:'+property.name)/]
[generateElementWithLocalType(property, NDR)/]
	[else]
	[debug('diffPack:'+property.name)/]
		[if typePackName = 'pdc']
[generateElementWithLocalType(property, NDR)/]
		[else]
[generateElement(property, typePackName.concat(':').concat(property.type.name))/]
		[/if]
	[/if]
[/if]
[/template]

[template public generateElementWithLocalType(property: Property, NDR: String){
model: Model = property.getModel();
type: Type = property.type;
globalType: String = property.type.name.concat('Type');
}]
[if type.oclAsType(Class).ownedAttribute->isEmpty() and model.hasDerivations(type.oclAsType(Class))]
	[if(property.upper = -1)]
<[getNS('xs')/]:element name="[property.name/]" minOccurs="[property.lower/]" maxOccurs="unbounded" type="[globalType/]"/>
	[else]
<[getNS('xs')/]:element name="[property.name/]" minOccurs="[property.lower/]" maxOccurs="[property.upper/]" type="[globalType/]"/>
	[/if]
[else]
[if(property.upper = -1)]
<[getNS('xs')/]:element name="[property.name/]" minOccurs="[property.lower/]" maxOccurs="unbounded">[else]
<[getNS('xs')/]:element name="[property.name/]" minOccurs="[property.lower/]" maxOccurs="[property.upper/]">
[/if]
[if not  type.oclAsType(Class).ownedAttribute->isEmpty()]
<[getNS('xs')/]:complexType>
	[if isChoice(type.oclAsType(Class))]
	<[getNS('xs')/]:choice>
		[generateElements(type.oclAsType(Class), NDR)/]
	</[getNS('xs')/]:choice>
	[else]
	<[getNS('xs')/]:sequence>
		[generateElements(type.oclAsType(Class), NDR)/]
	</[getNS('xs')/]:sequence>
	[/if]
</[getNS('xs')/]:complexType>
[else]
<[getNS('xs')/]:complexType/>
[/if]
</[getNS('xs')/]:element>
[/if]
[/template]

[template public generateElementWithUnqualifiedDataTypes(property: Property, typeName: String)]
[if (typeName = 'xs:string')]
[generateElement(property, 'udt:TextType')/]
[else]
	[if (typeName = 'xs:date')]
[generateElement(property, 'udt:DateType')/]
	[else]
		[if (typeName = 'xs:boolean')]
[generateElement(property, 'udt:IndicatorType')/]
		[else]
			[if (typeName = 'xs:any')]
[generateElement(property, 'ext:UBLExtensionsType')/]
			[else]
[generateElement(property, typeName)/]
			[/if]
		[/if]
	[/if]
[/if]
[/template]


[template public generateUnqualifiedDataType(property: Property){
deps : Set(Dependency) =  getPropertyDependencies(property, property.type.name);
}]
[if deps->size()>0]
[for (sup : NamedElement | deps.supplier->any(true))]
[getFQDN2(sup)/]
[/for]
[else]
[getFQDN3(property)/]
[/if]
[/template]

[template public generateElementWithUnqualifiedDataTypes2(property: Property)
{deps : Set(Dependency) =  getPropertyDependencies(property, property.type.name);
}]
[if deps->size()>0]
[for (sup : NamedElement | deps.supplier->any(true))]
[generateElement(property, getFQDN2(sup))/]
[/for]
[else] 
[generateElement(property,  getFQDN3(property))/]
[/if]
[/template]

[template public generateElement(property: Property, typeName: String)]
[if (property.upper = -1)]
	[if (property.type.namespace.name.toString() <> 'pdc') and (property.type.namespace.name.toString() <> 'forms')]
<[getNS('xs')/]:element name="[property.name/]" type="[typeName/]" minOccurs="[property.lower/]" maxOccurs="unbounded">
	[generateAnnotation(property)/]
</[getNS('xs')/]:element>
	[else] 
<[getNS('xs')/]:element name="[property.name/]" type="[typeName/]" minOccurs="[property.lower/]" maxOccurs="unbounded"/>
	[/if]
[else]
	[if (property.type.namespace.name.toString() <> 'pdc') and (property.type.namespace.name.toString() <> 'forms')]
<[getNS('xs')/]:element name="[property.name/]" type="[typeName/]" minOccurs="[property.lower/]" maxOccurs="[property.upper/]" >
	[generateAnnotation(property)/]
</[getNS('xs')/]:element>
	[else] 
<[getNS('xs')/]:element name="[property.name/]" type="[typeName/]" minOccurs="[property.lower/]" maxOccurs="[property.upper/]"/>
	[/if]
[/if]
[/template]

[template public generateReference(property: Property, elementname: String)]
[if (property.upper = -1)]
<[getNS('xs')/]:element ref="[elementname/]" minOccurs="[property.lower/]" maxOccurs="unbounded"/>[else] 
<[getNS('xs')/]:element ref="[elementname/]" minOccurs="[property.lower/]" maxOccurs="[property.upper/]"/>[/if]
[/template]

[template public generateCoreVocsElement(prop: Property, pack : Package, NDR: String) 
{
	supplier             : Property      = pack.getDependencies(prop)->any(true).supplier->any(true).oclAsType(Property);
	supplierType         : Type          = supplier.type;
	supplierPackageName  : String        = supplier.type.owner.oclAsType(Package).name.toString();
 	elementname          : String        = supplier.namespace.name.concat(supplier.name);
	elementQualifiedname : String        = supplierPackageName.concat(':').concat(elementname);
}]
[if NDR = 'useCoreVocsElements']
[generateCoreVocsElementReference(prop, pack)/][else]
[if NDR = 'restrictCoreVocsTypes']
[generateElementWithRestrictedType(prop, pack)/][else]
[if NDR = 'useCoreVocsTypes']
[generateElementWithCoreVocsType(prop, pack)/][/if][/if][/if]
[/template]

[template public generateCoreVocsElementReference(prop: Property, pack : Package) 
{
	supplier             : Property      = pack.getDependencies(prop)->any(true).supplier->any(true).oclAsType(Property);
	supplierType         : Type          = supplier.type;
	supplierPackageName  : String        = supplier.type.owner.oclAsType(Package).name.toString();
 	elementname          : String        = supplier.namespace.name.concat(supplier.name);
	elementQualifiedname : String        = supplierPackageName.concat(':').concat(elementname);
}]
[if supplierType->isEmpty()][comment type not given, assume basic components/]
[generateReference(prop, 'cvb:'.concat(elementname))/][else]
[if supplierType.name = 'Location' or supplierType.name = 'Address'or supplierType.name = 'Business' or supplierType.name = 'Person' or supplierType.name = 'PublicService']
[generateReference(prop, elementQualifiedname.concat(getSuffix('core')).concat(supplierType.name))/][else]
[if supplierPackageName = 'cva'][comment aggregated components/]
[generateReference(prop, elementQualifiedname.concat(supplierType.name))/][else][comment basic components/]
[generateReference(prop, elementQualifiedname)/][/if][/if][/if]
[/template]

[template public generateElementWithCoreVocsType(prop: Property, pack : Package) 
{
	supplier             : Property      = pack.getDependencies(prop)->any(true).supplier->any(true).oclAsType(Property);
	supplierType         : Type          = supplier.type;
	supplierPackageName  : String        = supplier.type.owner.oclAsType(Package).name.toString();
 	elementname          : String        = supplier.namespace.name.concat(supplier.name);
	elementQualifiedname : String        = supplierPackageName.concat(':').concat(elementname);
}]
[if supplierType->isEmpty() or supplierPackageName = 'cvb'][comment if type not given, assume basic components/]
	[if supplierType->isEmpty()]
		[debug('CVB-Empty:'+prop.name)/]
	[else]
		[debug('CVB:'+prop.name)/]
	[/if]
[generateElement(prop, 'cvb:'.concat(elementname).concat('Type'))/]
[else]
	[if supplierType.name = 'Location' or supplierType.name = 'Address'or supplierType.name = 'Business' or supplierType.name = 'Person' or supplierType.name = 'PublicService']
[generateElement(prop, supplierPackageName.concat(':').concat(getSuffix('core')).concat(supplierType.name).concat('Type'))/]
	[else]
		[if supplierPackageName = 'cva'][comment aggregated components/]
[generateElement(prop, supplierPackageName.concat(':').concat(supplierType.name).concat('Type'))/]
		[/if]
	[/if]
[/if]
[/template]
[template public generateElementWithRestrictedType(prop: Property, pack : Package) 
{
	dependency           : Dependency    = pack.getDependencies(prop)->any(true);
	supplier             : Property      = dependency.supplier->any(true).oclAsType(Property);
	supplierType         : Type          = supplier.type;
	supplierPackageName  : String        = supplier.type.owner.oclAsType(Package).name.toString();
 	elementname          : String        = supplier.namespace.name.concat(supplier.name);
	elementQualifiedname : String        = supplierPackageName.concat(':').concat(elementname);
	client				 : Property		 = dependency.client->any(true).oclAsType(Property);
	class                : Class         = client.owner.oclAsType(Class);           
}]
[if supplierType->isEmpty() or supplierPackageName = 'cvb']
[generateElement(prop, 'pdcb:'.concat(class.name).concat(prop.name).concat('Type'))/][else]
[generateElement(prop, prop.type.name.concat('Type'))/][/if]
[/template]
