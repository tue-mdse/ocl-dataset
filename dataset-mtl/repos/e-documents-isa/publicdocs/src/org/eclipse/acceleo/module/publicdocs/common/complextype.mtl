[comment encoding = UTF-8 /]
[module complextype('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::eclipse::acceleo::module::publicdocs::common::util/]
[import org::eclipse::acceleo::module::publicdocs::common::annotation/]
[import org::eclipse::acceleo::module::publicdocs::common::element/]

[template public generateComplextype_ground(class : Class, NDR : String)]
[if not  class.ownedAttribute->isEmpty()]
<[getNS('xs')/]:complexType name="[class.name/]Type">
	[generateAnnotation(class)/]
[if isChoice(class)]
	<[getNS('xs')/]:choice>
		[generateElements(class, NDR)/]
	</[getNS('xs')/]:choice>
[else]
	<[getNS('xs')/]:sequence>
		[generateElements(class, NDR)/]
	</[getNS('xs')/]:sequence>
	[generateAttributes(class, NDR)/]
[/if]
</[getNS('xs')/]:complexType>
[else]
<[getNS('xs')/]:complexType/>
[/if]
[/template]

[template public generateComplextype(class : Class)]
<[getNS('xs')/]:complexType name="[class.name/]Type">
	[generateAnnotation(class)/]
</[getNS('xs')/]:complexType>
[/template]

[template public generateComplextype_restriction_complexcontent(class : Class, NDR : String)]
<[getNS('xs')/]:complexType name="[class.name/]Type">
	[generateAnnotation(class)/]
[for (base: Classifier | class.general)]
	<[getNS('xs')/]:complexContent>
		[if class.belongSamePackage(base.oclAsType(Class))]
			<[getNS('xs')/]:restriction base="[base.name/]Type">
			[else]
			[debug('Different:'+class.name+'-'+base.name)/]
			<[getNS('xs')/]:restriction base="[getFQDN(base.oclAsType(Class))/]Type">
		[/if]
[/for]
	[if not  class.ownedAttribute->isEmpty()]
		[if isChoice(class)]
			<[getNS('xs')/]:choice>
				[generateElements(class, NDR)/]
			</[getNS('xs')/]:choice>
		[else]
			<[getNS('xs')/]:sequence>
				[generateElements(class, NDR)/]
			</[getNS('xs')/]:sequence>
		[/if]
	[/if]
[for (base: Classifier | class.general)]
		</[getNS('xs')/]:restriction>
	</[getNS('xs')/]:complexContent>
[/for]
</[getNS('xs')/]:complexType>
[/template]

[template public generateComplextype_extension_complexcontent(class : Class, NDR : String)]
<[getNS('xs')/]:complexType name="[class.name/]Type">
	[generateAnnotation(class)/]
[for (base: Classifier | class.general)]
	<[getNS('xs')/]:complexContent>
		[if class.belongSamePackage(base.oclAsType(Class))]
			<[getNS('xs')/]:extension base="[base.name/]Type">
			[else]
			[debug('Different:'+class.name+'-'+base.name)/]
			<[getNS('xs')/]:extension base="[getFQDN(base.oclAsType(Class))/]Type">
		[/if]
[/for]
	[if not  class.ownedAttribute->isEmpty()]
		[if isChoice(class)]
			<[getNS('xs')/]:choice>
				[generateElements(class, NDR)/]
			</[getNS('xs')/]:choice>
		[else]
			<[getNS('xs')/]:sequence>
				[generateElements(class, NDR)/]
			</[getNS('xs')/]:sequence>
		[/if]
	[/if]
[for (base: Classifier | class.general)]
		</[getNS('xs')/]:extension>
	</[getNS('xs')/]:complexContent>
[/for]
</[getNS('xs')/]:complexType>
[/template]