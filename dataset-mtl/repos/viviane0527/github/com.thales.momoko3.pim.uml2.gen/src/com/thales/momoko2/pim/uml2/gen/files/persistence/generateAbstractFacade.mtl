[comment encoding = UTF-8 /]
[module generateAbstractFacade('http://www.eclipse.org/uml2/4.0.0/UML')]
[import com::thales::momoko2::pim::uml2::gen::request::name::fileNameQueries /]
[import com::thales::momoko2::pim::uml2::gen::common::imports::classImports/]

[**
 * This template generates the facade for a class.
 * @param aModel
 */]
[template public generateAbstractFacade(aModel : Model)]
[file ('src/main/java/'.concat(aModel.name.toLowerFirst()).concat('/persistence/AbstractFacade.java'), false, 'UTF-8')]
package [aModel.name.toLowerFirst()/].persistence;

import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.io.Serializable;

import javax.interceptor.Interceptors;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.primefaces.model.SortOrder;
import com.thales.momoko.querybuilder.QueryBuilder;

import [aModel.name.toLowerFirst()/].ws.tools.Utils;
import [aModel.name.toLowerFirst()/].ws.tools.QueryExecutor;
import [aModel.name.toLowerFirst()/].persistence.logs.LogBusinessMethodInterceptor;
import [aModel.name.toLowerFirst()/].persistence.logs.LogLifeCycleMethodInterceptor;


@Interceptors({ 
	LogLifeCycleMethodInterceptor.class,
	LogBusinessMethodInterceptor.class }
)

public abstract class AbstractFacade<T> implements Serializable {
    private Class<T> entityClass;
	private QueryBuilder qb;

	public AbstractFacade() { }

    public AbstractFacade(Class entityClass) {
        this.entityClass = entityClass;
		this.qb = QueryBuilder.getQueryBuilder();
    }

    protected abstract EntityManager getEntityManager();

    public void create(T entity) {
        getEntityManager().persist(entity);
        getEntityManager().flush();
        getEntityManager().refresh(entity);
    }

	public void edit(T entity) {
        getEntityManager().merge(entity);
    }

    public void remove(T entity) {
        getEntityManager().remove(getEntityManager().merge(entity));
    }

    public T find(Object id) {
        return (T) getEntityManager().find(entityClass, id);
    }

    public List<T> findAll() {
        javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery();
        cq.select(cq.from(entityClass));
        return getEntityManager().createQuery(cq).getResultList();
    }

    public List<T> findRange(int['[]'/] range) {
        javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery();
        cq.select(cq.from(entityClass));
        javax.persistence.Query q = getEntityManager().createQuery(cq);
        q.setMaxResults(range['[1]'/] - range['[0]'/]);
        q.setFirstResult(range['[0]'/]);
        return q.getResultList();
    }

    public int count() {
    	CriteriaBuilder cb = getEntityManager().getCriteriaBuilder();
        javax.persistence.criteria.CriteriaQuery cq = cb.createQuery();
        javax.persistence.criteria.Root<T> rt = cq.from(entityClass);
        cq.select(getEntityManager().getCriteriaBuilder().count(rt));
        javax.persistence.Query q = getEntityManager().createQuery(cq);
        return ((Long) q.getSingleResult()).intValue();
    }  
    
    public List<T> load(int first, int pageSize, String sortField,SortOrder sortOrder, Map<String,String> filters)
    {
    	List<T> result = null;
    	EntityManager entityManager =getEntityManager();
    	CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
    	CriteriaQuery criteriaQuery = criteriaBuilder.createQuery();
    	Root<T> entityRoot = criteriaQuery.from(entityClass);        		
    	Predicate predicate = criteriaBuilder.conjunction();
    	for(Iterator<String> it = filters.keySet().iterator(); it.hasNext();) { 
    		String filterProperty = it.next(); 
    		String filterValue = filters.get(filterProperty);
    		try {
				String fieldValue = String.valueOf(entityRoot.get(filterProperty));
				Predicate newPredicate = criteriaBuilder.like(entityRoot.<String>get(filterProperty), filterValue+"%");
				predicate = criteriaBuilder.and(predicate, newPredicate);
			} catch (IllegalArgumentException | SecurityException e) {
			}
    	}
        if(sortField != null){
            switch (sortOrder.toString()) {
                case "DESCENDING":
                    criteriaQuery.select(entityRoot).where(predicate).orderBy(criteriaBuilder.desc(entityRoot.get(sortField)));
                    break;
                case "ASCENDING":
                    criteriaQuery.select(entityRoot).where(predicate).orderBy(criteriaBuilder.asc(entityRoot.get(sortField)));
                    break;
            }
        }else
        {
        	criteriaQuery.select(entityRoot).where(predicate);
        }
        Query test = entityManager.createQuery(criteriaQuery);
        result = test.getResultList();
        return entityManager.createQuery(criteriaQuery)
        		.setFirstResult(first)
        		.setMaxResults(pageSize)
        		.getResultList();
    }

	public int count(Map<String, String> conditions) {
        qb.count().from(
                entityClass.getCanonicalName(),
                Utils.getTableAlias(entityClass, 1));

        if (conditions != null) {
            int i = 0;
            for (Map.Entry<String, String> entry : conditions.entrySet()) {
                if (i > 0) {
                    qb.and(qb.contain(entry.getKey(), entry.getValue().toString()));
                } else {
                    qb.contain(entry.getKey(), entry.getValue().toString());
                }
                i++;
            }
        }
        return (int) QueryExecutor.getSingleResult(qb, getEntityManager());
    }


	public List<T> searchRange(
            int['[]'/] range,
            Map<String, Object> conditions,
            Map<String, Object> orderBy) {

        // select from limit
        qb.select()
                .from(entityClass.getCanonicalName(), Utils.getTableAlias(entityClass, 1))
                .range(range['[0]'/], range['[1]'/] - range['[0]'/]);

        // where
        if (conditions != null) {
            boolean first = true;
            for (Map.Entry<String, Object> entry : conditions.entrySet()) {
                if (first) {
                    qb.and(qb.contain(entry.getKey(), entry.getValue().toString()));
                    first = false;
                } else {
                    qb.contain(entry.getKey(), entry.getValue().toString());
                }
            }
        }

        // order by
        if (orderBy != null) {
            if (orderBy.get("direction").toString().equalsIgnoreCase("asc")) {
                qb.orderAsc(orderBy.get("name").toString());
            } else {
                qb.orderDesc(orderBy.get("name").toString());
            }
        }

        return (List<T>) QueryExecutor.getResultList(qb, getEntityManager());
    }

    public List<T> searchRangeBySupLevel(
            int['[]'/] range,
            String['[]'/] inCollection,
            String linkedNodeName,
            String inFieldName,
            Map<String, Object> conditions,
            Map<String, Object> orderBy) {

        // select from limit
        qb.select()
                .from(entityClass.getCanonicalName(), Utils.getTableAlias(entityClass, 1))
                .range(range['[0]'/], range['[1]'/] - range['[0]'/])
                .innerJoin(linkedNodeName.substring(0, 2), linkedNodeName, inCollection, inFieldName);

        // where
        if (conditions != null) {
            boolean first = true;
            for (Map.Entry<String, Object> entry : conditions.entrySet()) {
                if (first) {
                    qb.and(qb.contain(entry.getKey(), entry.getValue().toString()));
                    first = false;
                } else {
                    qb.contain(entry.getKey(), entry.getValue().toString());
                }
            }
        }

        // order by
        if (orderBy != null) {
            if (orderBy.get("direction").toString().equalsIgnoreCase("asc")) {
                qb.orderAsc(orderBy.get("name").toString());
            } else {
                qb.orderDesc(orderBy.get("name").toString());
            }
        }

        return (List<T>) QueryExecutor.getResultList(qb, getEntityManager());
    }

    public Long countBySupLevel(String['[]'/] inCollection,
            String linkedNodeName,
            String inFieldName,
            Map<String, Object> conditions) {

        qb.count()
                .from(entityClass.getCanonicalName(), Utils.getTableAlias(entityClass, 1))
                .innerJoin(linkedNodeName.substring(0, 2), linkedNodeName, inCollection, inFieldName);

        // where
        if (conditions != null) {
            boolean first = true;
            for (Map.Entry<String, Object> entry : conditions.entrySet()) {
                if (first) {
                    qb.and(qb.contain(entry.getKey(), entry.getValue().toString()));
                    first = false;
                } else {
                    qb.contain(entry.getKey(), entry.getValue().toString());
                }
            }
        }

        return (Long) QueryExecutor.getSingleResult(qb, getEntityManager());
    }
}
[/file]
[/template]