[comment encoding = UTF-8 /]
[module generateGettersSetters('http://www.eclipse.org/uml2/4.0.0/UML')]
[import com::thales::momoko2::pim::uml2::gen::common::comments::operationComments /]
[import com::thales::momoko2::pim::uml2::gen::common::attributes::getterSetterAttributes /]
[import com::thales::momoko2::pim::uml2::gen::request::associationQueries /]
[import com::thales::momoko2::pim::uml2::gen::request::associationClassQueries/]
[import com::thales::momoko2::pim::uml2::gen::common::textprocessing::textProcessing /]
[import com::thales::momoko2::pim::uml2::gen::request::inheritanceQueries /]
[import com::thales::momoko2::pim::uml2::gen::common::attributes::declarationAttributes/]

[**
 *  This template generates the getters and setters operations for the features class
*/]
[template public generateGettersSetters(aClass : Class) post (generateTextProcessingBlock())]
[generateGettersSettersComment()/]
[for (aProperty : Property | aClass.attribute->asSequence()->sortedBy(name))]  
[generateGetterSetterOperationForSelfClass(aProperty)/]
[generateGetterSetterOperationForAssociationAttribute(aProperty)/]    
[generateGetterSetterOperationForFPClass(aProperty)/]
[/for]
[if (isAssociationClass())]
[for (aProperty : Property | aClass.oclAsType(AssociationClass).memberEnd->select(name.equalsIgnoreCase('')._not())->asSequence()->sortedBy(name)) ? (aProperty.name.equalsIgnoreCase('')._not())]
[generateGetterSetterOperation(aProperty.name, aProperty.type.name)/]
[/for]
[/if]
[if (hasSuperClass())]
[generateSuperclassGettersSetters(getSuperclass(aClass))/]
[/if]
[/template]

[**
 *  This template generates the superclass getters and setters operations for the features class
*/]
[template public generateSuperclassGettersSetters(aClass : Class) ? (aClass.isAbstract)]
[generateGettersSettersComment()/]
[for (aProperty : Property | aClass.attribute->asSequence()->sortedBy(name))]  
@Override
	public void set[aProperty.name.toUpperFirst()/]([generateType(aProperty)/] [aProperty.name/]){
		super.set[aProperty.name.toUpperFirst()/]([aProperty.name/]);
}

@Override
	public [generateType(aProperty)/] get[aProperty.name.toUpperFirst()/](){
		return super.get[aProperty.name.toUpperFirst()/]();
}
[/for]
[/template]