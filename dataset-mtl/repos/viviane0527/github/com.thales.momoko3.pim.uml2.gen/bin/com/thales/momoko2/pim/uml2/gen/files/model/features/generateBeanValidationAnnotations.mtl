[comment encoding = UTF-8 /]
[module generateBeanValidationAnnotations('http://www.eclipse.org/uml2/4.0.0/UML')]
[import com::thales::momoko2::pim::uml2::gen::common::textprocessing::textProcessing /]
[import com::thales::momoko2::pim::uml2::gen::request::propertyQueries /]
[import com::thales::momoko2::pim::uml2::gen::request::beanValidationQueries /]
[import com::thales::momoko2::pim::uml2::gen::services::uml2Queries /]
[import com::thales::momoko2::pim::uml2::gen::request::classQueries /]
[**
 * This template generates the beans validations annotations
*/]
[template public generateBeanValidationAnnotations(aClass : Class)  post (generateTextProcessingBlock())]
[generatePatternBean(aClass)/]
[generateSize(aClass)/]
[generateMaxBean(aClass)/]
[generateMinBean(aClass)/]
[generateFuture(aClass)/]
[generatePast(aClass)/]
[/template]


[**
 * Pattern annotation
*/]
[template private generatePatternBean(aClass : Class)?(isTextClass())]
@Pattern (regexp="[aClass.getValue(getStereotype(aClass, 'text'), 'pattern')/]")
[/template]


[**
 * Max annotation
*/]
[template private generateMaxBean(aClass : Class)?(isIntegerClass() or isRealClass() )]
[if isRealClass() ]@Max(value=[aClass.getValue(getStereotype(aClass, 'real'), 'max')/])[/if][if isIntegerClass()]@Max(value=[aClass.getValue(getStereotype(aClass, 'integer'), 'max')/])[/if] 
[/template]


[**
 * Min annotation
*/]
[template private generateMinBean(aClass : Class) ? (isIntegerClass() or isRealClass())]
[if aClass.isIntegerClass()]@Min(value=[aClass.getValue(getStereotype(aClass,'integer'), 'min')/])[/if]
[if aClass.isRealClass()]@Min(value=[aClass.getValue(getStereotype(aClass,'real'), 'min')/])[/if]
[/template]


[**
 * Future annotation
*/]
[template private generateFuture(aClass : Class)?(isDateClass())]
[if aClass.getValue(getStereotype(aClass, 'date'), 'inTheFuture').toString().equalsIgnoreCase('true')]
@Future[/if]
[/template]


[**
 * Past annotation
*/]
[template private generatePast(aClass : Class)?(isDateClass())]
[if aClass.getValue(getStereotype(aClass, 'date'), 'inThePast').toString().equalsIgnoreCase('true')]
@Past[/if]
[/template]


[**
 * Size annotation
*/]
[template private generateSize (aClass : Class)?(isTextClass())post (generateTextProcessingLine())]
@Size (min=[aClass.getValue(getStereotype(aClass, 'text'), 'minLength')/], max=[aClass.getValue(getStereotype(aClass, 'text'), 'maxLength')/])
[/template]


