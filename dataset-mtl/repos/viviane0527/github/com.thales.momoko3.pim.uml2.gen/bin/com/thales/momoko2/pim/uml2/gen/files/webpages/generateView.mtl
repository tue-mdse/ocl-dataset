[comment encoding = UTF-8 /]
[module generateView('http://www.eclipse.org/uml2/4.0.0/UML')]
[import com::thales::momoko2::pim::uml2::gen::request::classQueries /]
[import com::thales::momoko2::pim::uml2::gen::common::components::compositeComponent /]
[import com::thales::momoko2::pim::uml2::gen::request::propertyQueries /]
[import com::thales::momoko2::pim::uml2::gen::request::name::fileNameQueries /]
[import com::thales::momoko2::pim::uml2::gen::request::associationQueries /]
[import com::thales::momoko2::pim::uml2::gen::request::datatypeQueries /]
[**
 * This template generates the view web pages.
 * @param aClass
 */]
[template public generateView(aClass : Class) ? (isFeatureClass(aClass))]
[file (getWebPagesFileName(aClass, 'View'), false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:p="http://primefaces.org/ui">

    <ui:composition>

        <p:dialog id="[aClass.name/]ViewDlg" widgetVar="[aClass.name/]ViewDialog" modal="true" resizable="false" appendTo="@(body)" header="#{bundle.View[aClass.name/]Title}">
            <h:form id="[aClass.name/]ViewForm">
                <h:panelGroup id="display">


        			[generateViewPanel(aClass)/]


                    <p:commandButton value="#{bundle.Close}" onclick="[aClass.name/]ViewDialog.hide()"/>
                </h:panelGroup>
            </h:form>
        </p:dialog>

    </ui:composition>
</html>
[/file]
[/template]

[**
 * This template generates the panel view for a class
 * @param aClass
 * @param anInputValue
 * @param aFielsetId
 * @param aLegendKey
*/]
[template private generateViewPanel (aClass : Class) ]
<p:panel id="mainPanel" styleClass="mainPanel" header="#{bundle.View[aClass.name/]Title}"> 
	[generateFieldsetView(aClass, aClass.name.toLowerFirst().concat('Controller.selected'), 'mainFieldset', 'MainFieldsetTitle')/]
 </p:panel>
[/template]


[**
 * This template generates the fielset for a class
 * @param aClass
 * @param anInputValue
 * @param aFielsetId
 * @param aLegendKey
*/]
[template public generateFieldsetView (aClass : Class, anInputValue : String, aFieldsetId : String, aLegendKey :String) ]
[generateFields(aClass, anInputValue, aFieldsetId, aLegendKey)/]
[for (aProperty : Property | getOneAssociationObjectProperties(aClass))]
[generateFieldsetView(
	getDestinationClass(aProperty, aProperty.getAssociation()),  
	anInputValue.concat('.').concat(aProperty.name), 
	aProperty.name.concat('FieldsetView'), 
	aClass.name.concat('_').concat(aProperty.name))/]
[/for]
[for (aProperty : Property | getManyAssociationObjectProperties(aClass)) ]
[generateDataTable(aClass, anInputValue.concat('.').concat(aProperty.name),getDestinationClass(aProperty, aProperty.getAssociation()), aProperty)/]
[/for]
[for (aProperty : Property | aClass.getAllProperties()) 
? (isAssociationAttribute(aProperty) and getDestinationClass(aProperty, aProperty.association).isFeatureClass())]
[generateSelectDataTable(aClass, getDestinationClass(aProperty, aProperty.getAssociation()), aProperty, anInputValue.concat('.').concat(aProperty.name))/]
[/for]
[for (aProperty: Property | aClass.getAllProperties()) 
? (isFeature_partClass(aProperty.getDatatypeByProperty()))]
[generatePartFields(aClass, aProperty, anInputValue, aProperty.name.concat('Field'), aClass.name.concat('_').concat(aProperty.name))/]
[/for]
[/template]

[template private generateFields (aClass : Class, anInputValue : String, aFieldsetId : String, aLegendKey :String) ]
<p:fieldset id="[aFieldsetId/]" legend="#{bundle.[aLegendKey/]}"> 
	<h:panelGrid columns="2" styleClass="viewPanelGrid">
		[for (aProperty : Property | (aClass.getAllProperties())) 
		? (isAssociationAttribute(aProperty)._not())]
		<h:outputText value="#{bundle.[aProperty.class.name/]_[aProperty.name/]}"/>
		<h:outputText value="#{[anInputValue/].[aProperty.name/]}" title="#{bundle.[aProperty.class.name/]_[aProperty.name/]}"/>
	   	[/for]
	</h:panelGrid>
</p:fieldset>
[/template]

[**
 * This template generates the fields for a featurepart class
 * @param aClass
 * @param anInputValue
 * @param aTabId
 * @param aLegendKey
*/]
[template private generatePartFields (aClass : Class, aProperty : Property, anInputValue : String, aFieldId : String, aTitleKey :String) ]
<p:fieldset id="[aFieldId/]" legend="#{bundle.[aTitleKey/]}"> 
	<h:panelGrid columns="2" styleClass="viewPanelGrid">
[for (p : Property | getDatatypeByProperty(aProperty).getAllDatatypeAttributes())]
<h:outputLabel value="#{bundle.[aProperty.class.name/]_[p.name/]}" for="[aClass.name/][p.name/]" />
<h:outputText value="#{[anInputValue/].[p.name/]}" title="#{bundle.[p.class.name/]_[p.name/]}"/>
[/for]
	</h:panelGrid>  
</p:fieldset>
[/template]


[**
 * This template generates the editing table for the Many Object association
 * @param aSourceClass
 * @param aDestinationClass
 * @param aProperty
 * @param aFormType
*/]
[template private generateDataTable(aSourceClass : Class, anInputValue : String, aDestinationClass : Class, aProperty : Property)]
<p:fieldset id="[aProperty.name/]FieldsetView" legend="#{bundle.[aSourceClass.name/]_[aProperty.name/]}">  
    <h:outputText escape="false" value="#{bundle.List[aDestinationClass.name/]Empty}" rendered="#{empty [anInputValue/]}"/>
    <p:dataTable rendered="#{not empty [anInputValue/]}" var="item" value="#{[anInputValue/]}" >  
[for (p: Property | aDestinationClass.getAllProperties()) ? (isAssociationAttribute(p)._not())]
        <p:column headerText="#{bundle.[aDestinationClass.name/]_[p.name/]}">  
            <h:outputText value="#{item.[p.name/]}" />
        </p:column>
[/for] 		
    </p:dataTable> 
</p:fieldset>
[/template]

[**
 * This template generates the table for the Many or One Feature association
 * @param aSourceClass
 * @param aDestinationClass
 * @param aProperty
*/]
[template private generateSelectDataTable(aSourceClass : Class, aDestinationClass : Class, aProperty : Property, anInputValue :String)]
                    <p:fieldset id="[aProperty.name/]Field" legend="#{bundle.[aSourceClass.name/]_[aProperty.name/]}">  

                        <p:panel header="[aSourceClass.name/] Details">
                            <h:panelGrid columns="2" columnClasses="label, value" styleClass="grid">  
								[for (p: Property | aDestinationClass.getAllProperties()) ? (isAssociationAttribute(p)._not())]
                                <h:outputLabel value="#{bundle.[aDestinationClass.name/]_[p.name/]}" for="[aProperty.name.toLowerFirst()/][p.name/]" />
                                <h:outputText value="#{[anInputValue/].[p.name/]}" title="#{bundle.[p.class.name/]_[p.name/]}"/>
								[/for] 
                            </h:panelGrid>  
                        </p:panel>  
                    </p:fieldset> 
[/template]