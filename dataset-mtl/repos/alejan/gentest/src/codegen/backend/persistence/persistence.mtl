[comment encoding = UTF-8 /]
[module persistence('http://www.eclipse.org/uml2/5.0.0/UML')]
[import ::utils /]

[template public mainPersistence(c : Class, path : String)]
[c.genPersistence(path.concat('persistence/'))/]
[/template]

[template protected genPersistence(c : Class, path : String) {className : String = c.getPersistenceName();}]
[file (path.concat(className+'.java'), false, 'UTF-8')]
/*
[c.getModel().license()/]
*/
package [c.getModel().baseGroup()/].persistence;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import [c.getModel().baseGroup()/].entities.[c.getEntityName()/];
import co.edu.uniandes.csw.crud.spi.persistence.CrudPersistence;
[if (c.isChild())]
import java.util.List;
import javax.persistence.TypedQuery;
[/if]
[if(c.isGeneralization() and c.isChild()=false)]
import javax.persistence.TypedQuery;
[/if]

/**
 * @generated
 */
@Stateless
public class [className/] extends CrudPersistence<[c.getEntityName()/]> {

    @PersistenceContext(unitName="[c.getModel().getPUName()/]")
    protected EntityManager em;

    /**
     * @generated
     */
    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    /**
     * @generated
     */
    @Override
    protected Class<[c.getEntityName()/]> getEntityClass() {
        return [c.getEntityName()/].class;
    }

[if (c.isChild())]
    public [c.getEntityName()/] find(Long [c.getParentAttribute().getClass().getName()/]id, Long [c.getName()/]id) {
        [if(c.getParentAttribute().getClass().isGeneralization())]
        TypedQuery<[c.getEntityName()/]> q = em.createQuery("select p from [c.getEntityName()/] p where (p.[c.getParentAttribute().getClass().getGeneralizationClass().getName()/].id = :[c.getParentAttribute().getClass().getName()/]id) and (p.id = :[c.getName()/]id)", [c.getEntityName()/].class);
        [else]
        TypedQuery<[c.getEntityName()/]> q = em.createQuery("select p from [c.getEntityName()/] p where (p.[c.getParentAttribute().getClass().getName()/].id = :[c.getParentAttribute().getClass().getName()/]id) and (p.id = :[c.getName()/]id)", [c.getEntityName()/].class);
        [/if]
        q.setParameter("[c.getParentAttribute().getClass().getName()/]id", [c.getParentAttribute().getClass().getName()/]id);
        q.setParameter("[c.getName()/]id", [c.getName()/]id);
        return q.getSingleResult();
    }
    
    public List<[c.getEntityName()/]> findAll(Integer page, Integer maxRecords, Long [c.getParentAttribute().getClass().getName()/]id) {
        [if(c.getParentAttribute().getClass().isGeneralization())]
        TypedQuery<[c.getEntityName()/]> q = em.createQuery("select p from [c.getEntityName()/] p where (p.[c.getParentAttribute().getClass().getGeneralizationClass().getName()/].id = :[c.getParentAttribute().getClass().getName()/]id)", [c.getEntityName()/].class);
        [else]
        TypedQuery<[c.getEntityName()/]> q = em.createQuery("select p from [c.getEntityName()/] p where (p.[c.getParentAttribute().getClass().getName()/].id = :[c.getParentAttribute().getClass().getName()/]id)", [c.getEntityName()/].class);
        [/if]
        q.setParameter("[c.getParentAttribute().getClass().getName()/]id", [c.getParentAttribute().getClass().getName()/]id);
        if (page != null && maxRecords != null) {
            q.setFirstResult((page - 1) * maxRecords);
            q.setMaxResults(maxRecords);
        }
        return q.getResultList();
    }
[/if]

[if(c.isGeneralization())]
    @Override
    public [c.getEntityName()/] find(Long [c.generalization.general.name.toLowerCase()/]_id) {
        TypedQuery<[c.getEntityName()/]> q = em.createQuery("select p from [c.getEntityName()/] p where (p.id = :[c.generalization.general.name.toLowerCase()/]_id) ", [c.getEntityName()/].class);
        q.setParameter("[c.generalization.general.name.toLowerCase()/]_id", [c.generalization.general.name.toLowerCase()/]_id);
        return q.getSingleResult();
    }
[/if]

}
[/file]
[/template]