[comment encoding = UTF-8 /]
[module resolverGenerator('http://www.ustok.org/extgen/model/epmodel')]
[import org::ustok::extgen::core::codegen::util/]

[comment ----- extension resolver class template ----- /]

[template public resolverGenerator(model : EPModel)]

[comment @main /]
[file (toJavaClassPrefix(model).concat('ExtensionResolver').concat('.java'), false, 'UTF-8')]
// CHECKSTYLE:OFF
package [model.basePackage/].[model.id/];

import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.IExtension;
import org.eclipse.core.runtime.IExtensionPoint;
import org.eclipse.core.runtime.IExtensionRegistry;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.Status;

/**
 * The Extension resolver accesses the extension registry and fetches all extensions contributed to
 * the extension-points for which the resolver has been generated.
 *
 * @generated
 */
public class [toJavaClassPrefix(model)/]ExtensionResolver {

	public [toJavaClassPrefix(model)/]ExtensionResolver() {
	} 

	/**
	 * Resolves all extensions for extension-point "[id/]".
	 * 
	 * @return all extensions for point "[id/]". Never <code>null</code> but possibly empty.
	 * @throws CoreException if the extension point cannot be accessed.
	 */
	public List<[rootElement.toJavaClassName()/]> resolveExtensions() throws CoreException {
		IExtensionRegistry reg = Platform.getExtensionRegistry();
		IExtensionPoint point = reg.getExtensionPoint("[model.pluginName/].[model.id/]");
	
		if (point == null) {
			IStatus status = new Status(IStatus.ERROR, "[model.pluginName/]", "Unknown extension-point: \"[model.pluginName/].[model.id/]\"");
			throw new CoreException(status);
		}

		List<[rootElement.toJavaClassName()/]> result = new ArrayList<[rootElement.toJavaClassName()/]>();
		IExtension['[]'/] extensions = point.getExtensions();

		if (extensions != null) {
			for (IExtension ext : extensions) {
				[rootElement.toJavaClassName()/] resolvedExtension = doResolve[rootElement.name.toUpperFirst()/](ext);
				result.add(resolvedExtension);
			}
		}

		return result;
	}


[for (elmt : EPElement | elements)]
	[elmt.generateElementResolver()/]

[/for]
	[generateMethodFindElements()/]

}
[/file]
[/template]

[template public generateElementResolver(element : EPElement)]
[if (element.name.equalsIgnoreCase('extension'))]
[generateElementResolverExt(element)/]
[else]
[generateElementResolverCfgElmt(element)/]
[/if]
[/template]


[template public generateElementResolverExt(element : EPElement)]
/**
 * Resolves the given extension with its attributes and contained elements.
 *
 * @param pExtension the extension to resolve.
 * @return resolved extension element.
 */
private [toJavaClassName()/] doResolve[element.name.toUpperFirst()/](IExtension pExtension) {
	[element.toJavaClassName()/] result = new [element.toJavaClassName()/](null);

	[for (ref : EPRef | refs)]
	List<IConfigurationElement> children[ref.element.name.toUpperFirst()/] = findElements(pExtension, "[ref.element.name/]");
		[if (ref.isMulti())]
	List<[ref.element.toJavaClassName()/]> resolved[ref.element.name.toUpperFirst()/]s = new ArrayList<[ref.element.toJavaClassName()/]>();
	for (IConfigurationElement child : children[ref.element.name.toUpperFirst()/]) {
		[ref.element.toJavaClassName()/] resolvedChild = doResolve[ref.element.name.toUpperFirst()/](child);
		resolved[ref.element.name.toUpperFirst()/]s.add(resolvedChild);
	}
	result.set[ref.element.name.toUpperFirst()/]s(resolved[ref.element.name.toUpperFirst()/]s);
		[else]
	if (children[ref.element.name.toUpperFirst()/].size() > 0) {
		[ref.element.toJavaClassName()/] resolved[ref.element.name.toUpperFirst()/] = doResolve[ref.element.name.toUpperFirst()/](children[ref.element.name.toUpperFirst()/].get(0));
		result.set[ref.element.name.toUpperFirst()/](resolved[ref.element.name.toUpperFirst()/]);
	}
		[/if]

	[/for]

	String contributorName = pExtension.getContributor().getName();
	result.setContributor(contributorName);

	return result;
}
[/template]


[template public generateElementResolverCfgElmt(element : EPElement)]
/**
 * Resolves the given elements with its attributes and contained elements.
 *
 * @param pElement the configuration element to resolve.
 * @return resolved element.
 */
private [toJavaClassName()/] doResolve[name.toUpperFirst()/](IConfigurationElement pElement) {
	[toJavaClassName()/] result = new [toJavaClassName()/](pElement);
	
	// resolve attributes
	String rawAttribute;
	[for (attribute : EPAttribute | attributes)]
		[if ('Java' <> attribute.type.toString())]
	rawAttribute = pElement.getAttribute("[attribute.name/]");
	if (rawAttribute != null) {
		[attribute.generateAttributeSetter()/]
	}
		[/if]
	[/for]

	// resolve nested elements
	[for (ref : EPRef | refs)]
	IConfigurationElement['[]'/] children[ref.element.name.toUpperFirst()/] = pElement.getChildren("[ref.element.name/]");
		[if (ref.isMulti())]
	List<[ref.element.toJavaClassName()/]> resolved[ref.element.name.toUpperFirst()/]s = new ArrayList<[ref.element.toJavaClassName()/]>();
	for (IConfigurationElement child : children[ref.element.name.toUpperFirst()/]) {
		[ref.element.toJavaClassName()/] resolvedChild = doResolve[ref.element.name.toUpperFirst()/](child);
		resolved[ref.element.name.toUpperFirst()/]s.add(resolvedChild);
	}
	result.set[ref.element.name.toUpperFirst()/]s(resolved[ref.element.name.toUpperFirst()/]s);
		[else]
	if (children[ref.element.name.toUpperFirst()/].length > 0) {
		[ref.element.toJavaClassName()/] resolved[ref.element.name.toUpperFirst()/] = doResolve[ref.element.name.toUpperFirst()/](children[ref.element.name.toUpperFirst()/]['['/]0[']'/]);
		result.set[ref.element.name.toUpperFirst()/](resolved[ref.element.name.toUpperFirst()/]);
	}
		[/if]

	[/for]
	return result;
}
[/template]


[template private generateMethodFindElements(any : OclAny)]
/**
 * Returns all configuration elements with the given name from the given extension.
 *
 * @param pExtension the extension to return the elements from.
 * @param pName the name of the configuration elements to find. Cannot be <code>null</code>.
 * @return all elements with given name.
 */
private static List<IConfigurationElement> findElements(IExtension pExtension, String pName) {
	List<IConfigurationElement> list = new ArrayList<IConfigurationElement>();
	for (IConfigurationElement element : pExtension.getConfigurationElements()) {
		if (pName.equals(element.getName())) {
			list.add(element);
		}
	}
	return list;
}
[/template]


[template private generateAttributeSetter(attr : EPAttribute)]
result.set[attr.name.toUpperFirst()/]([toFieldAssignment(attr)/]);
[/template]


[comment ----- template methods ----- /]
