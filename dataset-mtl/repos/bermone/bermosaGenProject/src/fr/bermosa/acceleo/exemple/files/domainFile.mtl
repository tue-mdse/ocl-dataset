[comment encoding = UTF-8 /]
[module domainFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fr::bermosa::acceleo::exemple::common::common /]
[import fr::bermosa::acceleo::exemple::common::declaration /]
[import fr::bermosa::acceleo::exemple::common::imports /]
[import fr::bermosa::acceleo::exemple::common::type /]
[import fr::bermosa::acceleo::exemple::request::request /]
[import fr::bermosa::acceleo::exemple::files::commonFile /]
[import fr::bermosa::acceleo::exemple::services::commonServices /]
[import fr::bermosa::acceleo::exemple::services::rooServices /]


[template public genDomainFileBody(aClass : Class)]
[aClass.genPackageDeclaration()/]

[aClass.genAllImports()/]

// [protected ('(imports)')]

// [/protected]

[aClass.genBody()/]
[/template]

[template protected genAllImports(aClass : Class) post (trim())]
[aClass.genDomainImports()/]

[aClass.genImport().trim()/]
[/template]

[template protected genDomainImports(aClass : Class) post (trim())]
[if (hasCollections(aClass))]
import javax.persistence.ElementCollection;
[/if]
[if (hasManyToManyAssociation(aClass))]
import javax.persistence.ManyToMany;
[/if]
[if (hasManyToOneAssociation(aClass))]
import javax.persistence.ManyToOne;
[/if]
[if (hasOneToManyAssociation(aClass))]
import javax.persistence.OneToMany;
[/if]
[if (hasOneToOneAssociation(aClass))]
import javax.persistence.OneToOne;
[/if]
[if (hasOrderedCollections(aClass))]
import javax.persistence.OrderColumn;
[/if]
[if (hasAttributesConstraint(aClass, '@Max'))]
import javax.validation.constraints.Max;
[/if]
[if (hasAttributesConstraint(aClass, '@Min'))]
import javax.validation.constraints.Min;
[/if]
[if (hasAttributesConstraint(aClass, '@NotNull') or hasMandatoryAttribute(aClass))]
import javax.validation.constraints.NotNull;
[/if]
[if (hasAttributesConstraint(aClass, '@Pattern'))]
import javax.validation.constraints.Pattern;
[/if]
[if (hasAttributesConstraint(aClass, '@Size') or hasMandatoryCollectionSize(aClass))]
import javax.validation.constraints.Size;
[/if]

[if (aClass.hasStereotype('Clonable'))]
import com.github.lbroudoux.roo.addon.cloneable.FetchType;
import com.github.lbroudoux.roo.addon.cloneable.RooCloneable;
[/if]
[if (aClass.hasStereotype('Mergable'))]
import com.github.lbroudoux.roo.addon.mergeable.RooMergeable;
[/if]
[if (aClass.hasStereotype('Metadatable'))]
import com.github.lbroudoux.roo.addon.metadatable.RooMetadatable;
[/if]
[if (aClass.hasStereotype('Taggable'))]
import com.github.lbroudoux.roo.addon.taggable.RooTaggable;
[/if]
[if (aClass.hasStereotype('Audited'))]
import org.hibernate.envers.Audited;
[/if]
[if (aClass.hasStereotype('Indexed'))]
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.Field;
[/if]
import org.springframework.roo.addon.javabean.RooJavaBean;
import org.springframework.roo.addon.jpa.activerecord.RooJpaActiveRecord;
import org.springframework.roo.addon.tostring.RooToString;
[/template]

[template protected genBody(aClass : Class)]
[aClass.genDomainClassAnnotations()/]
[aClass.genVisibility()/][aClass.genAbstract()/][aClass.genFinal()/]class [aClass.genName()/][aClass.genInheritance()/][aClass.genInterfaceRealization()/] {

	[aClass.genDomainAttributes()/]

}
[/template]

[template protected genDomainClassAnnotations(aClass : Class) post (trim())]
[if (aClass.hasStereotype('Audited'))]
@Audited
[/if]
[if (aClass.hasStereotype('Indexed'))]
@Indexed
[/if]
[if (aClass.hasEAnnotation('@BusinessRulesConstraint'))]
@BusinessRulesConstraint
[/if]
@RooJavaBean
@RooToString[aClass.genToStringExclusions()/]
[if (aClass.hasStereotype('Taggable'))]
@RooTaggable
[/if]
[if (aClass.hasStereotype('Metadatable'))]
@RooMetadatable
[/if]
[if (aClass.hasStereotype('Mergable'))]
@RooMergeable
[/if]
[if (aClass.hasStereotype('Clonable'))]
@RooCloneable
// [protected ('(fetch)')]
(fetch = FetchType.lazy)
// [/protected]
[/if]
@RooJpaActiveRecord(sequenceName = "[aClass.genSequenceName()/]", finders = {
// [protected ('(finders)')]
// [/protected]
})
// [protected ('- annotations for '.concat(aClass.name))]
// [/protected]
[/template]

[template protected genDomainAttributes(aClass : Class) post (trim())]
[for (aProperty : Property | aClass.ownedAttribute->asSequence()->union(aClass.getOutgoingNavigableOwnedEnd()->asSequence()->sortedBy(name)))]

[if (aClass.hasStereotype('Indexed') and aProperty.association.oclIsUndefined() and aProperty.upper = 1)]
@Field
[/if]
[aProperty.genProperties()/]
// [protected ('- annotations for '.concat(aProperty.name))]
// ex: @JoinTable(name="CUST_PHONES")
// [/protected]
private [aProperty.genType()/] [aProperty.genName()/][aProperty.genDefaultValue()/];
[/for]
[/template]

[template private genProperties(aProperty : Property) post (trim())]
[aProperty.genPropertyAnnotations()/]
[if (not aProperty.association.oclIsUndefined())]
[aProperty.genJpaProperties()/]
[else]
	[if (aProperty.upper <> 1)]
@ElementCollection
	[/if]
[/if]
[/template]

[template  private genJpaProperties(aProperty : Property) post (trim())]
[aProperty.genJPACardinalityCheck()/]
[aProperty.genJPAPropertyAnnotations()/]
[/template]

[** Annotations are produced from the property's Name Expression *]
[template private genPropertyAnnotations(aProperty : Property) post (trim())]
[if (not aProperty.nameExpression.oclIsUndefined())]
[for (annotation : String | aProperty.nameExpression.name.tokenize(';'))]
[annotation.trim()/]
[/for]
[/if]
[if (not hasConstraint(aProperty, '@NotNull') and aProperty.lower > 0)]
@NotNull
[/if]
[if (aProperty.upper <> 1 and aProperty.isOrdered)]
@OrderColumn
[/if]
[/template]

[** Return true if at the property has the specified constraint *]
[query public hasConstraint(aProperty : Property, constraint : String) : Boolean
	= not aProperty.nameExpression.oclIsUndefined() and aProperty.nameExpression.name.contains(constraint) /]

[** Return true if at least one attribute has the specified constraint *]
[query public hasAttributesConstraint(aClass : Class, constraint : String) : Boolean
	= aClass.ownedAttribute->select(not nameExpression.oclIsUndefined() and nameExpression.name.contains(constraint))->size() > 0 /]

[query public hasOneToManyAssociation(aClass : Class) : Boolean
	= aClass.getOutgoingNavigableOwnedEnd()->select(upper <> 1 and getAssociationOtherEnd().upper = 1)->size() > 0 /]

[query public hasManyToManyAssociation(aClass : Class) : Boolean
	= aClass.getOutgoingNavigableOwnedEnd()->select(upper <> 1 and getAssociationOtherEnd().upper <> 1)->size() > 0 /]

[query public hasManyToOneAssociation(aClass : Class) : Boolean
	= aClass.getOutgoingNavigableOwnedEnd()->select(upper = 1 and getAssociationOtherEnd().upper <> 1)->size() > 0 /]

[query public hasOneToOneAssociation(aClass : Class) : Boolean
	= aClass.getOutgoingNavigableOwnedEnd()->select(upper = 1 and getAssociationOtherEnd().upper = 1)->size() > 0 /]

[** Return true if at least one attribute is mandatory *]
[query public hasMandatoryAttribute(aClass : Class) : Boolean
	= aClass.ownedAttribute->union(aClass.getOutgoingNavigableOwnedEnd())->select(lower = 1 and upper = 1)->size() > 0 /]

[** Return true if at least one attribute is mandatory *]
[query public hasMandatoryCollectionSize(aClass : Class) : Boolean
	= aClass.ownedAttribute->union(aClass.getOutgoingNavigableOwnedEnd())->select((lower > 0 or upper <> -1) and not (lower <= 1 and upper = 1))->size() > 0 /]

[** Return true if at least one attribute is a collection *]
[query public hasCollections(aClass : Class) : Boolean
	= aClass.ownedAttribute->select(upper <> 1)->size() > 0 /]

[** Return true if at least one attribute or relation is an ordered collection *]
[query public hasOrderedCollections(aClass : Class) : Boolean
	= aClass.ownedAttribute->union(aClass.getOutgoingNavigableOwnedEnd())->select(upper <> 1 and isOrdered)->size() > 0 /]

[template private genJPAPropertyAnnotations(aProperty : Property) post (trim())]
[if (aProperty.upper <> 1)]
	[if (not aProperty.association.oclIsUndefined() and getAssociationOtherEnd(aProperty).upper = 1)]
		@OneToMany[genJPAMappedByAttribute(aProperty)/]
	[else]
		@ManyToMany[genJPAMappedByAttributeIfNeeded(aProperty)/]
	[/if]
[else]
	[if (not aProperty.association.oclIsUndefined() and getAssociationOtherEnd(aProperty).upper = 1)]
		@OneToOne[genJPAMappedByAttributeIfNeeded(aProperty)/]
	[else]
		@ManyToOne
	[/if]
[/if]
[/template]

[template private genJPAMappedByAttribute(aProperty : Property) post (trim())]
[if (aProperty.owner.oclIsKindOf(Association) and aProperty.owner.oclAsType(Association).navigableOwnedEnd->size() = 2)]
	(mappedBy="[getAssociationOtherEnd(aProperty).name/]")
[/if]
[/template]

[template private genJPACardinalityCheck(aProperty : Property) post (trim())]
[if ((aProperty.lower > 0 and aProperty.upper <> -1) and not (aProperty.lower = 1 and aProperty.upper = 1))]
	@Size(min=[aProperty.lower/], max=[aProperty.upper/])
[/if]
[if (aProperty.lower > 0 and aProperty.upper = -1)]
	@Size(min=[aProperty.lower/])
[/if]
[if (aProperty.lower = 0 and aProperty.upper > 1)]
	@Size(max=[aProperty.upper/])
[/if]
[/template]

[** 
 * Add mappedBy attribute only if association is bidirectionnal and if we are on the non owning side 
 * (see http://docs.oracle.com/javaee/6/api/javax/persistence/ManyToMany.html).
 * We assume that the owning side is the one that starts the association name.
 * Ex: fichePersonnesToConseillers => FichePersonne class is the owning side, Conseiller is the non owning one.
 */]
[template private genJPAMappedByAttributeIfNeeded(aProperty : Property) post (trim())]
[if (aProperty.owner.oclIsKindOf(Association) and aProperty.owner.oclAsType(Association).navigableOwnedEnd->size() = 2)] 
	[if (aProperty.association.name.startsWith(aProperty.type.name.toLowerFirst()))]
		(mappedBy="[getAssociationOtherEnd(aProperty).name/]")
	[/if]
[/if]
[/template]

[query public getAssociationOtherEnd(aProperty : Property) : Property
	= aProperty.association.member->asSequence()->select(name <> aProperty.name)->first().oclAsType(Property) /]

[template protected genToStringExclusions(aClass : Class) post (trim())]
[if (aClass.getOutgoingNavigableOwnedEnd()->size() > 0)]
(excludeFields = { [aClass.genRelationPropertyStringList()/] })
[/if]
[/template]

[template protected genRelationPropertyStringList(aClass : Class) post (replaceAll('""', '", "'))]
[for (aProperty : Property | aClass.getOutgoingNavigableOwnedEnd()->asSequence()->sortedBy(name))]"[aProperty.genName()/]"[/for]
[/template]

[template protected genSequenceName(aClass : Class) post (trim())]
['SEQ_'.concat(aClass.genName()).truncateString(30).toUpper()/]
[/template]
