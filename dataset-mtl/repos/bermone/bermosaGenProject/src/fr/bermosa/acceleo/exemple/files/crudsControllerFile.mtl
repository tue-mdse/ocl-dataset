[comment encoding = UTF-8 /]
[module crudsControllerFile('http://www.eclipse.org/uml2/5.0.0/UML') extends fr::bermosa::acceleo::exemple::files::controllerFile]

[import fr::bermosa::acceleo::exemple::common::common /]
[import fr::bermosa::acceleo::exemple::common::declaration /]
[import fr::bermosa::acceleo::exemple::common::imports /]
[import fr::bermosa::acceleo::exemple::common::type /]
[import fr::bermosa::acceleo::exemple::services::commonServices /]
[import fr::bermosa::acceleo::exemple::files::controllerFile /]


[template public genCRUDSControllerFileBody(aClass : Class)]
[aClass.genControllerPackageDeclaration()/]
[aClass.genCRUDSControllerImports()/]
[aClass.genServiceImports()/]
[aClass.genImport()/]
// [protected ('(imports)')]

// [/protected]

[aClass.genCRUDSBody()/]
[/template]

[template protected genCRUDSControllerImports(aClass : Class)]

import java.io.IOException;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

[let view : Class = getTaggedValue('CRUDS', 'viewModelClass').oclAsType(Class)]
import [view.oclAsType(Class).importValue()/];
[/let]

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

[/template]

[template protected genCRUDSBody(aClass : Class)]
@Controller
@RequestMapping("/[aClass.genControllerMapping()/]")
[aClass.genVisibility()/][aClass.genAbstract()/][aClass.genFinal()/]class [aClass.genName()/] {
	[aClass.genCRUDSServiceReference()/]
	[aClass.genCRUDSControllerActions()/]  
}
[/template]

[template protected genCRUDSServiceReference(aClass : Class)]
[for (aProperty : Property | aClass.getAssociations().navigableOwnedEnd)]

@Autowired
private [aProperty.genType()/] service;
[/for]
[/template]

[template protected genCRUDSControllerActions(aClass : Class)]
[let view : Class = getTaggedValue('CRUDS', 'viewModelClass').oclAsType(Class)]

// [protected ('- annotations for create')]
// @Secured("ROLE_ADMIN")
// [/protected]
@RequestMapping(method = RequestMethod.POST)
public String create(@Valid [view.genName()/] [view.name.toLowerFirst()/], BindingResult bindingResult, Model modelMap, HttpServletResponse response) throws IOException {
	if (bindingResult.hasErrors()) {
		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	}

	[view.name.toLowerFirst()/] = service.create[view.genName()/]([view.name.toLowerFirst()/]);
	modelMap.addAttribute("[view.name.toLowerFirst()/]", [view.name.toLowerFirst()/]);

	// content of the return value is not handled by the content resolver
	return "redirect:/[aClass.genControllerMapping()/]/" + [view.name.toLowerFirst()/].getId();
}

// [protected ('- annotations for show')]
// @Secured("ROLE_ADMIN")
// [/protected]
@RequestMapping(value = "/{id}")
public String show(@PathVariable("id") Long id, Model modelMap) {
	modelMap.addAttribute("[view.name.toLowerFirst()/]", service.get[view.genName()/](id));
	return "[aClass.genControllerMapping()/]/show";
}

// [protected ('- annotations for update')]
// @Secured("ROLE_ADMIN")
// [/protected]
@RequestMapping(method = RequestMethod.PUT)
public String update(@Valid [view.genName()/] [view.name.toLowerFirst()/], BindingResult bindingResult, Model modelMap, HttpServletResponse response) throws IOException {
	if (bindingResult.hasErrors()) {
		response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
	}

	[view.name.toLowerFirst()/] = service.update[view.genName()/]([view.name.toLowerFirst()/]);
	modelMap.addAttribute("[view.name.toLowerFirst()/]", [view.name.toLowerFirst()/]);

	// content of the return value is not handled by the content resolver
	return "redirect:/[aClass.genControllerMapping()/]/" + [view.name.toLowerFirst()/].getId();
}

// [protected ('- annotations for list')]
// @Secured("ROLE_ADMIN")
// [/protected]
@RequestMapping()
public String list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model modelMap) {
	if (page != null || size != null) {
		int sizeNo = size == null ? 10 : size.intValue();
		final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
		modelMap.addAttribute("[view.genName()/]s", service.list[view.genName()/](firstResult, sizeNo));
	} else {
		modelMap.addAttribute("[view.genName()/]s", service.list[view.genName()/](0, 20));
	}
	return "[aClass.genControllerMapping()/]/list";
}

// [protected ('- annotations for delete')]
// @Secured("ROLE_ADMIN")
// [/protected]
@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
public String delete(@PathVariable("id") Long id, Model modelMap) {
	service.delete[view.genName()/](id);
	modelMap.asMap().clear();
	return "redirect:/[aClass.genControllerMapping()/]";
}
[/let]
[/template]
