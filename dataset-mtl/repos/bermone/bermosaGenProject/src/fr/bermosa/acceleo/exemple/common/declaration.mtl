[comment encoding = UTF-8 /]
[module declaration('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fr::bermosa::acceleo::exemple::common::common /]
[import fr::bermosa::acceleo::exemple::common::type /]
[import fr::bermosa::acceleo::exemple::request::request /]


[template public genMethodPrototype(anOperation : Operation)]
[genVisibility()/][genAbstract()/][genFinal()/][genStatic()/][genReturn()/] [genName()/]([genOperationParameters()/])[genOperationParameters()/]
[/template]

[template public genOperationParameters(anOperation : Operation)]
[anOperation.ownedParameter->select(param : Parameter | not (param.direction = ParameterDirectionKind::return)).genOperationParameter()->sep(', ')/]
[/template]

[template protected genOperationParameter(aParameter : Parameter)]
[aParameter.genType()/] [aParameter.genName()/]
[/template]

[template public genOperationExceptions(anOperation : Operation)]
[if (anOperation.raisedException->size() > 0)] throws [anOperation.raisedException.genName()->sep(', ')/][/if]
[/template]

[template public genInvokationParameters(anOperation : Operation)]
[anOperation.ownedParameter->select(param : Parameter | not (param.direction = ParameterDirectionKind::return)).genInvokationParameter()->sep(', ')/]
[/template]

[template protected genInvokationParameter(aParameter : Parameter)]
[aParameter.genName()/]
[/template]

[template public genVisibility(aNamedElement : NamedElement)]
[if (not (aNamedElement.visibility = VisibilityKind::_package))][aNamedElement.visibility/] [else]/*package*/ [/if]
[/template]

[template public genInheritance(aClassifier : Classifier)]
[if (aClassifier.general->size() > 0)] extends [for (extendedClassifier : Classifier | aClassifier.general)][extendedClassifier.genName()/][/for][/if]
[/template]

[template public genInterfaceRealization(aClass : Class)]
[if (not aClass.clientDependency->filter(Realization)->isEmpty())] implements [for (namedElement : NamedElement | aClass.getAllInterfaces()) separator(', ')][namedElement.genName()/][/for][/if]
[/template]

[template public genAbstract(aClass : Class)]
[if (aClass.isAbstract)]abstract [/if]
[/template]

[template public genAbstract(anOperation : Operation)]
[if (anOperation.isAbstract)]abstract [/if]
[/template]

[template public genFinal(aRedefinableElement : RedefinableElement)]
[if (aRedefinableElement.isLeaf)]final [/if]
[/template]

[template public genFinal(aProperty : Property)]
[if (aProperty.isLeaf)]final [/if]
[/template]

[template public genStatic(aFeature : Feature)]
[if (aFeature.isStatic)]static [/if]
[/template]

[template public genDefaultValue(aProperty : Property)]
[let computedDefault : String = aProperty.computeDefault()][if (computedDefault.size() > 0)] = [computedDefault/][/if][/let]
[/template]

[template protected computeDefault(aProperty : Property) post(trim())]
[if (aProperty.upper = 1)]
	[if (not aProperty.default.oclIsUndefined())]
		[if (''.equalsIgnoreCase(aProperty.default) or aProperty.default = null)]
			[if (aProperty.getUserDefaultValue().equalsIgnoreCase(''))][aProperty.default/][else][aProperty.getUserDefaultValue()/][/if]
		[else]
			[if ('String'.equalsIgnoreCase(aProperty.type.genName()))][aProperty.default.addQuotes()/][else][aProperty.default/][/if]
		[/if]
	[else]
		[aProperty.getUserDefaultValue()/]
	[/if]
[else]
	[if (not aProperty.default.oclIsUndefined())]
		new [aProperty.genImplType()/]()
	[else]
		new [aProperty.genImplType()/]()
	[/if]
[/if]
[/template]

[template protected addQuotes(aString : String)]
"[aString/]"
[/template]

[template protected getUserDefaultValue(aTypedElement : TypedElement) post(trim())]
[if (not getProperty('java.defaultvalue.' + aTypedElement.type.name).size().oclIsUndefined() and (getProperty('java.defaultvalue.' + aTypedElement.type.name).size() > 0) and not ''.equalsIgnoreCase(getProperty('java.defaultvalue.' + aTypedElement.type.name)))]
	[getProperty('java.defaultvalue.' + aTypedElement.type.name)/]
[/if]
[/template]

[template public genServiceMethodPrototype(anOperation : Operation)]
[genVisibility()/][genAbstract()/][genFinal()/][genStatic()/][genReturn()/] [genName()/]([genServiceOperationParameters()/])[genOperationExceptions()/]
[/template]

[template public genServiceOperationParameters(anOperation : Operation)]
[anOperation.ownedParameter->select(param : Parameter | not (param.direction = ParameterDirectionKind::return)).genServiceOperationParameter()->sep(', ')/]
[/template]

[template protected genServiceOperationParameter(aParameter : Parameter)]
@WebParam(name="[aParameter.genName()/]") [aParameter.genType()/] [aParameter.genName()/]
[/template]
