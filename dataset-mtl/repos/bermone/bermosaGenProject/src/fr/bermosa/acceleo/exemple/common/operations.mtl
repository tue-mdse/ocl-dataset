[comment encoding = UTF-8 /]
[module operations('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fr::bermosa::acceleo::exemple::common::declaration /]
[import fr::bermosa::acceleo::exemple::common::common /]
[import fr::bermosa::acceleo::exemple::common::type /]
[import fr::bermosa::acceleo::exemple::services::rooServices /]


[template public genOperations (anInterface : Interface) ]
[for (anOperation : Operation | anInterface.ownedOperation)]

[anOperation.genMethodPrototype()/];
[/for]
[/template]

[template public genServiceOperations(anInterface : Interface)]
[for (anOperation : Operation | anInterface.ownedOperation)]

[anOperation.genServiceMethodPrototype()/];
[/for]
[/template]

[template public genServiceImplOperations(anInterface : Interface)]
[for (anOperation : Operation | anInterface.ownedOperation)]

[anOperation.genServiceImplMethod()/]
[/for]
[/template]

[template public genServiceImplMethod(anOperation : Operation)]
// [protected ('- annotations for '.concat(genName()).concat('(').concat(genOperationParameters()).concat(')'))] 
// ex: @Secured("ROLE_ADMIN")
// [/protected]
[genVisibility()/][genAbstract()/][genFinal()/][genStatic()/][genReturn()/] [genName()/]([genOperationParameters()/])[genOperationExceptions()/] {
	// [protected ('- implementation for '.concat(genName()).concat('(').concat(genOperationParameters()).concat(')'))]
	[if (not genReturn().equalsIgnoreCase('void'))]
	return null;
	[/if]
	// [/protected]
}
[/template]

[template public genServiceEndpointOperations(anInterface : Interface)]
[for (anOperation : Operation | anInterface.ownedOperation)]

[anOperation.genServiceEndpointMethod()/]
[/for]
[/template]

[template public genServiceEndpointMethod(anOperation : Operation)]
@WebMethod
[genVisibility()/][genAbstract()/][genFinal()/][genStatic()/][genReturn()/] [genName()/]([genOperationParameters()/])[genOperationExceptions()/] {
[if (genReturn().equalsIgnoreCase('void'))]
	service.[genName()/]([genInvokationParameters()/]);
[else]
	return service.[genName()/]([genInvokationParameters()/]);
[/if]
}
[/template]

[template public genServiceWSAspectOperations(anInterface : Interface)]
[for (anOperation : Operation | anInterface.ownedOperation)]

[anOperation.genServiceWSAspectMethod()/]
[/for]
[/template]

[template public genServiceWSAspectMethod(anOperation : Operation)]
declare @method: * [anOperation.interface.genName()/].[genName()/]([genOperationParameterTypes()/]): @WebResult(name="[getWebResultName(genName())/]");
[/template]

[template private genOperationParameterTypes(anOperation : Operation)]
[anOperation.ownedParameter->select(param : Parameter | not (param.direction = ParameterDirectionKind::return)).genType()->sep(', ')/]
[/template]
