[comment encoding = UTF-8 /]
[module crudsServiceFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fr::bermosa::acceleo::exemple::common::common /]
[import fr::bermosa::acceleo::exemple::common::declaration /]
[import fr::bermosa::acceleo::exemple::common::imports /]
[import fr::bermosa::acceleo::exemple::files::commonFile /]
[import fr::bermosa::acceleo::exemple::services::commonServices /]
[import fr::bermosa::acceleo::exemple::files::extend::interfaceFile /]
[import fr::bermosa::acceleo::exemple::services::rooServices /]


[template public genCRUDSFileBody(anInterface : Interface)]
[anInterface.genPackageDeclaration()/]
[anInterface.genCRUDSServiceImports()/]
[anInterface.genImport()/]
[anInterface.genBody()/]
[/template]

[template public genCRUDSServiceImports(anInterface : Interface)]

import [getTaggedValue('CRUDS', 'viewModelClass').oclAsType(Class).importValue()/];
import [getTaggedValue('CRUDS', 'viewModelClass').oclAsType(Class).importValue()/]List;

[let view : Class = getTaggedValue('CRUDS', 'viewModelClass').oclAsType(Class)]
[let domain : Class = view.getTaggedValue('ViewModel', 'domainClass').oclAsType(Class)]
[if (domain.hasStereotype('Audited'))]
import fr.covea.troisma.soja.changes.Changeset;

import java.util.Date;
import java.util.List;
[/if]
[/let]
[/let]

import javax.jws.WebParam;

[/template]

[template public genBody(anInterface : Interface)]
[anInterface.genVisibility()/]interface [anInterface.genName()/] [anInterface.genInheritance()/]{

	[anInterface.genCRUDSServiceOperations()/]

}
[/template]

[template public genCRUDSServiceOperations(anInterface : Interface) post (trim())]
[let view : Class = getTaggedValue('CRUDS', 'viewModelClass').oclAsType(Class)]
[view.genCreateOperationPrototype(true)/];
[view.genRetrieveOperationPrototype(true)/];
[view.genUpdateOperationPrototype(true)/];
[view.genDeleteOperationPrototype(true)/];
[view.genListOperationPrototype(true)/];

[let domain : Class = view.getTaggedValue('ViewModel', 'domainClass').oclAsType(Class)]
[if (domain.hasStereotype('Indexed'))]
[view.genSearchOperationPrototype(true)/];
[/if]

[if (domain.hasStereotype('Audited'))]
[view.genTempSituationOperationPrototype(true)/];
[view.genChangesOperationPrototype(true)/];
[/if]
[/let]
[/let]
[/template]

[template public genCRUDSServiceImplFileBody(anInterface : Interface)]
[anInterface.genPackageDeclaration()/]
[anInterface.genCRUDSServiceImplImports()/]
[anInterface.genImport()/]
// [protected ('(imports)')]

// [/protected]

[anInterface.genCRUDSServiceImplBody()/]
[/template]

[template protected genCRUDSServiceImplImports(anInterface : Interface)]

[let view : Class = getTaggedValue('CRUDS', 'viewModelClass').oclAsType(Class)]
[let domain : Class = view.getTaggedValue('ViewModel', 'domainClass').oclAsType(Class)]
import [view.oclAsType(Class).importValue()/];
import [view.oclAsType(Class).importValue()/]List;
import [domain.oclAsType(Class).importValue()/];
[for (viewProperty : Property | view.ownedAttribute->intersection(view.getAssociations().memberEnd->asOrderedSet()))]
	[for (domainProperty : Property | domain.ownedAttribute->union(domain.inheritedMember->asOrderedSet()))]
		[if (domainProperty.name.equalsIgnoreCase(viewProperty.name))]
import [domainProperty.type.importValue()/];
		[/if]
	[/for]
[/for]

[if (domain.hasStereotype('Audited'))]
import fr.covea.troisma.soja.audit.AuditUtil;
import fr.covea.troisma.soja.changes.Changeset;
[/if]
[if (domain.hasStereotype('Indexed'))]
import fr.covea.troisma.soja.search.SearchUtil;
[/if]

import org.dozer.Mapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

[if (domain.hasStereotype('Audited'))]
import java.util.Date;
[/if]
import java.util.List;
[/let]
[/let]
[/template]

[template public genCRUDSServiceImplBody(anInterface : Interface)]
@Service("[anInterface.name.toLowerFirst()/]")
public class [anInterface.genServiceImplName()/] implements [anInterface.name/] {

	@Autowired
	private Mapper mapper;

	// [protected ('(attributes)')]

	// [/protected]

[let view : Class = getTaggedValue('CRUDS', 'viewModelClass').oclAsType(Class)]
[let domain : Class = view.getTaggedValue('ViewModel', 'domainClass').oclAsType(Class)]
	// [protected ('(create service)')]
	// ex: @Secured("ROLE_ADMIN")
	// [/protected]
	[view.genCreateOperationPrototype(false)/] {
		[domain.genName()/] domain = mapper.map(view, [domain.genName()/].class);
		[for (viewProperty : Property | view.ownedAttribute->intersection(view.getAssociations().memberEnd->asOrderedSet()))]
			[for (domainProperty : Property | domain.ownedAttribute->union(domain.inheritedMember->asOrderedSet()))]
				[if (domainProperty.name.equalsIgnoreCase(viewProperty.name))]
					[if (domainProperty.lower = 1 and domainProperty.upper = 1)]
		domain.set[viewProperty.name.toUpperFirst()/]([domainProperty.type.genName()/].find[domainProperty.type.genName()/](view.get[viewProperty.name.toUpperFirst()/]().getId()));
					[else]
		if (view.get[viewProperty.name.toUpperFirst()/]() != null) {
			domain.set[viewProperty.name.toUpperFirst()/]([domainProperty.type.genName()/].find[domainProperty.type.genName()/](view.get[viewProperty.name.toUpperFirst()/]().getId()));
		}
					[/if]
				[/if]
			[/for]
		[/for]
		domain.persist();
		return mapper.map(domain, [view.genName()/].class);
	}

	// [protected ('(get service)')]
	// ex: @Secured("ROLE_ADMIN")
	// [/protected]
	[view.genRetrieveOperationPrototype(false)/] {
		[domain.genName()/] domain = [domain.genName()/].find[domain.genName()/](id);
		return mapper.map(domain, [view.genName()/].class);
	}

	// [protected ('(update service)')]
	// ex: @Secured("ROLE_ADMIN")
	// [/protected]
	[view.genUpdateOperationPrototype(false)/] {
		[domain.genName()/] domain = [domain.genName()/].find[domain.genName()/](view.getId());
		if (domain != null) {
			mapper.map(view, domain);
			domain = domain.merge();
		}
		return mapper.map(domain, [view.genName()/].class);
	}

	// [protected ('(delete service)')]
	// ex: @Secured("ROLE_ADMIN")
	// [/protected]
	[view.genDeleteOperationPrototype(false)/] {
		[domain.genName()/] domain = [domain.genName()/].find[domain.genName()/](id);
		if (domain != null) {
			domain.remove();
		}
	}

	// [protected ('(list service)')]
	// ex: @Secured("ROLE_ADMIN")
	// [/protected]
	[view.genListOperationPrototype(false)/] {
		List<[domain.genName()/]> domains = [domain.genName()/].find[domain.genName()/]Entries(firstResult, maxResults);
		[view.genName()/]List result = new [view.genName()/]List();
		for ([domain.genName()/] domain : domains) {
			result.add[view.genName()/](mapper.map(domain, [view.genName()/].class));
		}
		return result;
	}

	[if (domain.hasStereotype('Indexed'))]
	// [protected ('(search service)')]
	// ex: @Secured("ROLE_ADMIN")
	// [/protected]
	[view.genSearchOperationPrototype(false)/] {
		List<[domain.genName()/]> domains = SearchUtil.searchEntities([domain.genName()/].entityManager(), [domain.genName()/].class, properties, terms, matching);
		[view.genName()/]List result = new [view.genName()/]List();
		for ([domain.genName()/] domain : domains) {
			result.add[view.genName()/](mapper.map(domain, [view.genName()/].class));
		}
		return result;
	}
	[/if]

	[if (domain.hasStereotype('Audited'))]
	// [protected ('(getAtDate service)')]
	// ex: @Secured("ROLE_ADMIN")
	// [/protected]
	[view.genTempSituationOperationPrototype(false)/] {
		[domain.genName()/] domain = [domain.genName()/].find[domain.genName()/](id);
		return mapper.map(AuditUtil.getAtDate([domain.genName()/].entityManager(), domain, domain.getId(), date), [view.genName()/].class);
	}

	// [protected ('(getChanges service)')]
	// ex: @Secured("ROLE_ADMIN")
	// [/protected]
	[view.genChangesOperationPrototype(false)/] {
		[domain.genName()/] domain = [domain.genName()/].find[domain.genName()/](id);
		return AuditUtil.getChanges([domain.genName()/].entityManager(), domain, domain.getId(), startDate, endDate);
	}
	[/if]
[/let]
[/let]

}
[/template]

[template public genCRUDSServiceEndpointFileBody(anInterface : Interface)]
[anInterface.genPackageDeclaration()/]
[anInterface.genCRUDSServiceEndpointImports()/]
[anInterface.genImport()/]
[anInterface.genCRUDSServiceEndpointBody()/]
[/template]

[template protected genCRUDSServiceEndpointImports(anInterface : Interface)]

[let view : Class = getTaggedValue('CRUDS', 'viewModelClass').oclAsType(Class)]
[let domain : Class = view.getTaggedValue('ViewModel', 'domainClass').oclAsType(Class)]
import [view.oclAsType(Class).importValue()/];
import [view.oclAsType(Class).importValue()/]List;

[if (domain.hasStereotype('Audited'))]
import fr.covea.troisma.soja.changes.Changeset;

import java.util.Date;
import java.util.List;
[/if]

import javax.jws.WebMethod;
import javax.jws.WebService;

import org.springframework.beans.factory.annotation.Autowired;
[/let]
[/let]
[/template]

[template public genCRUDSServiceEndpointBody(anInterface : Interface)]
@WebService(serviceName="[anInterface.name/]", targetNamespace="[getTargetNamespace(genPackagePath())/]")
public class [anInterface.genServiceEndpointName()/] implements [anInterface.name/] {

	@Autowired
	private [anInterface.name/] service;

[let view : Class = getTaggedValue('CRUDS', 'viewModelClass').oclAsType(Class)]
	@WebMethod
	[view.genCreateOperationPrototype(false)/] {
		return service.create[view.genName()/](view);
	}

	@WebMethod
	[view.genRetrieveOperationPrototype(false)/] {
		return service.get[view.genName()/](id);
	}

	@WebMethod
	[view.genUpdateOperationPrototype(false)/] {
		return service.update[view.genName()/](view);
	}

	@WebMethod
	[view.genDeleteOperationPrototype(false)/] {
		service.delete[view.genName()/](id);
	}

	@WebMethod
	[view.genListOperationPrototype(false)/] {
		return service.list[view.genName()/](firstResult, maxResults);
	}

	[let domain : Class = view.getTaggedValue('ViewModel', 'domainClass').oclAsType(Class)]
	[if (domain.hasStereotype('Indexed'))]
	@WebMethod
	[view.genSearchOperationPrototype(false)/] {
		return service.search[view.genName()/](properties, terms, matching);
	}
	[/if]

	[if (domain.hasStereotype('Audited'))]
	@WebMethod
	[view.genTempSituationOperationPrototype(false)/] {
		return service.get[view.genName()/]AtDate(id, date);
	}

	@WebMethod
	[view.genChangesOperationPrototype(false)/] {
		return service.get[view.genName()/]Changes(id, startDate, endDate);
	}
	[/if]
	[/let]
[/let]

}
[/template]

[template public genCRUDSServiceWSAspectFileBody(anInterface : Interface)]
[anInterface.genPackageDeclaration()/]
[anInterface.genCRUDSServiceWSAspectImports()/]
[anInterface.genImport()/]
[anInterface.genCRUDSServiceWSAspectBody()/]
[/template]

[template protected genCRUDSServiceWSAspectImports(anInterface : Interface)]

[let view : Class = getTaggedValue('CRUDS', 'viewModelClass').oclAsType(Class)]
[let domain : Class = view.getTaggedValue('ViewModel', 'domainClass').oclAsType(Class)]
import [view.oclAsType(Class).importValue()/];
[if (domain.hasStereotype('Audited'))]

import java.util.Date;
[/if]
[/let]
[/let]

import javax.jws.WebResult;
import javax.jws.WebService;

[/template]

[template public genCRUDSServiceWSAspectBody(anInterface : Interface)]
privileged aspect [anInterface.genServiceWSAspectName()/] {

	declare @type: [anInterface.genName()/]: @WebService(targetNamespace="[getTargetNamespace(genPackagePath())/]");

[let view : Class = getTaggedValue('CRUDS', 'viewModelClass').oclAsType(Class)]
	declare @method: * [anInterface.genName()/].create[view.genName()/]([view.genName()/]): @WebResult(name="[getWebResultName('create'.concat(view.genName()))/]");
	declare @method: * [anInterface.genName()/].get[view.genName()/](Long): @WebResult(name="[getWebResultName('get'.concat(view.genName()))/]");
	declare @method: * [anInterface.genName()/].update[view.genName()/]([view.genName()/]): @WebResult(name="[getWebResultName('update'.concat(view.genName()))/]");
	declare @method: * [anInterface.genName()/].delete[view.genName()/](Long): @WebResult(name="[getWebResultName('delete'.concat(view.genName()))/]");
	declare @method: * [anInterface.genName()/].list[view.genName()/](int, int): @WebResult(name="[getWebResultName('list'.concat(view.genName()))/]");

	[let domain : Class = view.getTaggedValue('ViewModel', 'domainClass').oclAsType(Class)]
	[if (domain.hasStereotype('Indexed'))]
	declare @method: * [anInterface.genName()/].search[view.genName()/](String['['/][']'/], String['['/][']'/], float): @WebResult(name="[getWebResultName('search'.concat(view.genName()))/]");
	[/if]

	[if (domain.hasStereotype('Audited'))]
	declare @method: * [anInterface.genName()/].get[view.genName()/]AtDate(Long, Date): @WebResult(name="[getWebResultName('get'.concat(view.genName()).concat('AtDate'))/]");
	declare @method: * [anInterface.genName()/].get[view.genName()/]Changes(Long, Date, Date): @WebResult(name="[getWebResultName('get'.concat(view.genName()).concat('Changes'))/]");
	[/if]
	[/let]
[/let]

}
[/template]


[template protected genCreateOperationPrototype(aViewModel : Class, tagParams : Boolean) post(trim()) ]
	public [aViewModel.genName()/] create[aViewModel.genName()/]([if (tagParams)]@WebParam(name="view") [/if][aViewModel.genName()/] view)
[/template]

[template protected genRetrieveOperationPrototype(aViewModel : Class, tagParams : Boolean) post(trim()) ]
	public [aViewModel.genName()/] get[aViewModel.genName()/]([if (tagParams)]@WebParam(name="id") [/if]Long id)
[/template]

[template protected genUpdateOperationPrototype(aViewModel : Class, tagParams : Boolean) post(trim()) ]
	public [aViewModel.genName()/] update[aViewModel.genName()/]([if (tagParams)]@WebParam(name="view") [/if][aViewModel.genName()/] view)
[/template]

[template protected genDeleteOperationPrototype(aViewModel : Class, tagParams : Boolean) post(trim()) ]
	public void delete[aViewModel.genName()/]([if (tagParams)]@WebParam(name="id") [/if]Long id)
[/template]

[template protected genListOperationPrototype(aViewModel : Class, tagParams : Boolean) post(trim()) ]
	public [aViewModel.genName()/]List list[aViewModel.genName()/]([if (tagParams)]@WebParam(name="firstResult") [/if]int firstResult, [if (tagParams)]@WebParam(name="maxResults") [/if]int maxResults)
[/template]

[template protected genSearchOperationPrototype(aViewModel : Class, tagParams : Boolean) post(trim()) ]
	public [aViewModel.genName()/]List search[aViewModel.genName()/]([if (tagParams)]@WebParam(name="properties") [/if]String['['/][']'/] properties, [if (tagParams)]@WebParam(name="terms") [/if]String['['/][']'/] terms, [if (tagParams)]@WebParam(name="matching") [/if]float matching)
[/template]

[template protected genTempSituationOperationPrototype(aViewModel : Class, tagParams : Boolean) post(trim()) ]
	public [aViewModel.genName()/] get[aViewModel.genName()/]AtDate([if (tagParams)]@WebParam(name="id") [/if]Long id, [if (tagParams)]@WebParam(name="date") [/if]Date date)
[/template]

[template protected genChangesOperationPrototype(aViewModel : Class, tagParams : Boolean) post(trim()) ]
	public List<Changeset> get[aViewModel.genName()/]Changes([if (tagParams)]@WebParam(name="id") [/if]Long id, [if (tagParams)]@WebParam(name="startDate") [/if]Date startDate, [if (tagParams)]@WebParam(name="endDate") [/if]Date endDate)
[/template]
