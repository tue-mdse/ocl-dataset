[comment encoding = UTF-8 /]
[module imports('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fr::bermosa::acceleo::exemple::common::common /]
[import fr::bermosa::acceleo::exemple::common::properties /]


[template public genImport(aClassifier : Classifier)]
[if (not aClassifier.isArray())]
	[if (aClassifier.orderedUniqueMultiplicityElements()->size() > 0)]
import [aClassifier.getOrderedUniqueCollectionImplClassPath()/];
import [aClassifier.getOrderedUniqueCollectionClassPath()/];
	[/if]
	[if (aClassifier.notOrderedNotUniqueMultiplicityElements()->size() > 0)]
import [aClassifier.getNotOrderedNotUniqueCollectionImplClassPath()/];
import [aClassifier.getNotOrderedNotUniqueCollectionClassPath()/];
	[/if]
	[if (aClassifier.notOrderedUniqueMultiplicityElements()->size() > 0)]
import [aClassifier.getNotOrderedUniqueCollectionImplClassPath()/];
import [aClassifier.getNotOrderedUniqueCollectionClassPath()/];
	[/if]
	[if (aClassifier.orderedNotUniqueMultiplicityElements()->size() > 0)]
import [aClassifier.getOrderedNotUniqueCollectionImplClassPath()/];
import [aClassifier.getOrderedNotUniqueCollectionClassPath()/];
	[/if]
[/if]
[if (aClassifier.oclIsKindOf(Class) and (aClassifier.oclAsType(Class).getTypeList()->size() > 0))]
	[for (aType : Type | aClassifier.oclAsType(Class).getTypeList())]
		[if (not aType.importValue().equalsIgnoreCase(''))]
			[if (aType.genPackagePath().strcmp(aClassifier.genPackagePath()) <> 0)]
import [aType.importValue()/];
			[/if]
		[/if]
		[if (aType.name = 'Date')]
import java.util.Date;
		[/if]
	[/for]
[elseif (aClassifier.oclIsKindOf(Interface) and (aClassifier.oclAsType(Interface).getTypeList()->size() > 0))]
	[for (aType : Type | aClassifier.oclAsType(Interface).getTypeList())]
		[if (not aType.importValue().equalsIgnoreCase(''))]
			[if (aType.genPackagePath().strcmp(aClassifier.genPackagePath()) <> 0)]
import [aType.importValue()/];
			[/if]
		[/if]
		[if (aType.name = 'Date')]
import java.util.Date;
		[/if]
	[/for]
[/if]
[/template]

[query public importValue(aType : Type) : String = if (''.equalsIgnoreCase(aType.genPackagePath())) then getProperty(aType.name) else aType.genPackagePath() + '.' + aType.name endif /]

[query protected orderedUniqueMultiplicityElements(aClassifier : Classifier) : Collection(MultiplicityElement) = 
	aClassifier.multiplicityElements()->select(elem : MultiplicityElement | (elem.upper = -1 or elem.upper > 1) and elem.isOrdered and elem.isUnique)
/]

[query protected orderedNotUniqueMultiplicityElements(aClassifier : Classifier) : Collection(MultiplicityElement) = 
	aClassifier.multiplicityElements()->select(elem : MultiplicityElement | (elem.upper = -1 or elem.upper > 1) and elem.isOrdered and not elem.isUnique)
/]

[query protected notOrderedUniqueMultiplicityElements(aClassifier : Classifier) : Collection(MultiplicityElement) = 
	aClassifier.multiplicityElements()->select(elem : MultiplicityElement | (elem.upper = -1 or elem.upper > 1) and not elem.isOrdered and elem.isUnique)
/]

[query protected notOrderedNotUniqueMultiplicityElements(aClassifier : Classifier) : Collection(MultiplicityElement) = 
	aClassifier.multiplicityElements()->select(elem : MultiplicityElement | (elem.upper = -1 or elem.upper > 1) and not elem.isOrdered and not elem.isUnique)
/]

[query protected multiplicityElements(aClassifier : Classifier) : Collection(MultiplicityElement) = 
	ownedMember->filter(Operation).ownedParameter.oclAsType(MultiplicityElement)->union(ownedMember->filter(Property).oclAsType(MultiplicityElement))->union(getAssociations().navigableOwnedEnd)
 /]

[template public genImportPath(aType : Type) post(trim())]
[if (not getProperty('java.typeconversion.' + name).oclIsUndefined() and (getProperty('java.typeconversion.' + name).size() > 0))]
[getProperty('java.typeconversion.' + name)/]
[else]
[aType.importValue()/]
[/if]
[/template]

[query protected getTypeList(aClass : Class) : Sequence(Type) = 
   if (aClass.getGeneralTypes()->size() > 0) then 
      Sequence(Type){}
      ->merge(aClass.getOwnedAttributesTypeList())
      ->merge(aClass.getAssociationsTypeList())
      ->merge(aClass.getOwnedOperationsParametersTypeList())
      ->merge(aClass.getOwnedOperationsExceptionsTypeList())
      ->merge(aClass.getNestedClassifiersTypeList())
      ->including(aClass.getGeneralTypes()->first())
      ->reject(oclIsUndefined())->asOrderedSet()->asSequence()
   else
      Sequence(Type){}
      ->merge(aClass.getOwnedAttributesTypeList())
      ->merge(aClass.getAssociationsTypeList())
      ->merge(aClass.getOwnedOperationsParametersTypeList())
      ->merge(aClass.getOwnedOperationsExceptionsTypeList())
      ->merge(aClass.getNestedClassifiersTypeList())
      ->reject(oclIsUndefined())->asOrderedSet()->asSequence()
   endif
/]

[query private getOwnedAttributesTypeList(aClass : Class) : Sequence(Type) = 
	if ownedAttribute->size() > 0 then ownedAttribute.type else Sequence(Type){} endif
/]

[query private getAssociationsTypeList(aClass : Class) : Sequence(Type) = 
	if getAssociations()->size() > 0 and (getAssociations().navigableOwnedEnd->size() > 0) then getAssociations().navigableOwnedEnd.type->asSequence() else Sequence(Type){} endif
/]

[query private getOwnedOperationsParametersTypeList(aClass : Class) : Sequence(Type) = 
	if ownedOperation-> size() > 0 and (ownedOperation.ownedParameter->size() > 0) then ownedOperation.ownedParameter.type else Sequence(Type){} endif
/]

[query private getOwnedOperationsExceptionsTypeList(aClass : Class) : Sequence(Type) =
	if ownedOperation-> size() > 0 and (ownedOperation.raisedException->size() > 0) then ownedOperation.raisedException else Sequence(Type){} endif
/]

[query private getNestedClassifiersTypeList(aClass : Class) : Sequence(Type) = 
	if nestedClassifier->size() > 0 and (nestedClassifier->filter(Class)->size() > 0) then nestedClassifier->filter(Class).getTypeList() else Sequence(Type){} endif
/]

[query private merge(firstSequence : Sequence(T), secondSequence : Sequence(T)) : Sequence(Type) = 
	if not (firstSequence->size() = 0) then
		firstSequence->union(secondSequence)
	else if not (secondSequence->size() = 0) then
			secondSequence
		else
			Sequence(Type){} 
		endif
	endif
/]

[query protected getTypeList(anInterface : Interface) : Sequence(Type) =
	if (anInterface.getGeneralTypes()->size() > 0) then 
		Sequence(Type){}
		->merge(anInterface.getOwnedAttributesTypeList())
		->merge(anInterface.getAssociationsTypeList())
		->merge(anInterface.getOwnedOperationsParametersTypeList())
		->merge(anInterface.getNestedClassifiersTypeList())
		->including(anInterface.getGeneralTypes()->first())
		->asOrderedSet()->asSequence()
	else
		Sequence(Type){}
		->merge(anInterface.getOwnedAttributesTypeList())
		->merge(anInterface.getAssociationsTypeList())
		->merge(anInterface.getOwnedOperationsParametersTypeList())
		->merge(anInterface.getNestedClassifiersTypeList())
		->asOrderedSet()->asSequence()
	endif
/]


[query private getOwnedAttributesTypeList(anInterface : Interface) : Sequence(Type) = 
	if ownedAttribute->size() > 0 then ownedAttribute.type else Sequence(Type){} endif
/]

[query private getAssociationsTypeList(anInterface : Interface) : Sequence(Type) = 
	if getAssociations()->size() > 0 and (getAssociations().navigableOwnedEnd->size() > 0) then getAssociations().navigableOwnedEnd.type->asSequence() else Sequence(Type){} endif
/]

[query private getOwnedOperationsParametersTypeList(anInterface : Interface) : Sequence(Type) = 
	if ownedOperation->size() > 0 and (ownedOperation.ownedParameter->size() > 0) and (ownedOperation.ownedParameter.type->size() > 0)then ownedOperation.ownedParameter.type else Sequence(Type){} endif
/]

[query private getNestedClassifiersTypeList(anInterface : Interface) : Sequence(Type) = 
	if nestedClassifier->filter(Class)->size() > 0 then nestedClassifier->filter(Class).getTypeList()->asSequence() else Sequence(Type){} endif
/]

[query private getGeneralTypes(aClassifier : Classifier) : Sequence(Type) = 
	if general->size() > 0 then general->asSequence() else Sequence(Type){} endif
/]
