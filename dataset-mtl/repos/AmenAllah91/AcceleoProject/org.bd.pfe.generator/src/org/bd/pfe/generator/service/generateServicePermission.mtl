[comment encoding = UTF-8 /]
[module generateServicePermission('http://www.businessdecision.fr/Generator')]
[import org::bd::pfe::generator::persistance::packagePath /]

[template public generateServicePermission(persistance :PersistanceObject){packageName : String = persistance.eContainer(Application)._package;}]

[file(persistance.eContainer(Application).name.concat('-service/src/main/java/').concat(packageName.convertPackageToPath().concat('/service/')).concat('PermissionService.java'),false,'UTF-8')]
package [packageName.concat('.service')/];

import java.util.List;
import [packageName.concat('.persistance').concat('.Permission')/];
import [packageName.concat('.persistance').concat('.Privilege')/];

import [packageName.concat('.persistance')/].[persistance.name.toUpperFirst()/];
import [packageName.concat('.exception')/].BDException;

/**
 * The Interface  PermissionService .
 *
 * @author Business & Decision
 *
 */

public interface PermissionService {
	

       /**
         *
         * This method populates our database with a new record of permission.
         * @param permission the instance of Permission to be recorded.
         * @return indicates whether the create method succeds or fails.
         */ 
	     Boolean createPermission(Permission permission)throws  BDException;
	    
         /**
         *
         * This method updates existing data permission.
         * @param permission the record of Permission to be updated.
         * @return indicates whether the update method succeds or fails.
         */


         Boolean updatePermission(Permission permission)throws  BDException;
	    
         /**
         *
         * This method removes data permission from the database.
         * @param permission the record of Permission to be removed.
         * @return indicates whether the delete method succeds or fails
         */

         Boolean deletePermission(Permission permission);
	     
         /**
         *
         * This method returns all the exsisting records of permission from the database.
         * @return the list of the existing records of permission. 
         */
         List<Permission> findAll(); 
	     
         /**
         *
         * This method returns the one record of permission by [persistance.name.toUpperFirst()/].
         * @param id 
		 * @return the record of Permission having the id value retrieved from the database.
         */

          Permission findPermissionById (Long id)throws  BDException;

         /**
         *
         * This method returns the one record of permission by [persistance.name.toUpperFirst()/] and privilege.
         * @param [persistance.name.toLowerFirst()/]
         * @param privilege
		 * @return the record of Permission having the [persistance.name.toUpperFirst()/] value and privilege value retrieved from the database.
         */

        Permission findPermissionBy[persistance.name.toUpperFirst()/]AndPrivilege([persistance.name.toUpperFirst()/] [persistance.name.toLowerFirst()/], 	Privilege privilege);
       
        
         /**
         *
         * This method creates a permission for a user.
         * @param [persistance.name.toLowerFirst()/]
         * @param privilege
         * @param create permission
         * @param update permission
         * @param delete permission
         */
       
        void addPermissionToUserEtPrivilege([persistance.name.toUpperFirst()/] [persistance.name.toLowerFirst()/], Privilege privilege, boolean create, boolean update, boolean delete);
        
         /**
         *
         * This method returns list of permission by [persistance.name.toLowerFirst()/].
         * @param [persistance.name.toLowerFirst()/]
		 * @return the record of Permission having the [persistance.name.toUpperFirst()/] value retrieved from the database.
         */

        List <Permission> allUserPermissions([persistance.name.toUpperFirst()/] [persistance.name.toLowerFirst()/]) ;

        //[protected (' : you can write your own code')]
			
		//[/protected]
     
}

[/file]
[/template]
