[comment encoding = UTF-8 /]
[module generatePermission('http://www.businessdecision.fr/Generator')]
[import org::bd::pfe::generator::persistance::packagePath /]


[template public generatePermission(persistence :PersistanceObject){packageName : String = persistence.eContainer(Application)._package;}]

[file(persistence.eContainer(Application).name.concat('-domaine/src/main/java/').concat(packageName.convertPackageToPath().concat('/persistance/')).concat('Permission.java'),false,'UTF-8')]
package [packageName.concat('.persistance')/];



import java.io.Serializable;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * The Class  Permission .
 *
 * @author Business & Decision
 *
 */

@Entity

public class Permission implements Serializable {
	
    /** The Constant serialVersionUID. */
    private static final long serialVersionUID = 1L;
	

	private PermissionPK  permissionPK;
  
    
    private Boolean create=false;
    
    
    private Boolean update=false;
    
    
    private Boolean delete=false;
    
    
	private  Privilege privilege ;
    
 
   
	private User user;
/**
	 * Instantiates a new Permission.
**/

	public Permission() {
		super(); 
	}
 
/**
	 * Gets the user.
	 *
	 * @return the  user
	 */

    @ManyToOne
    @JoinColumn(name="id_User",referencedColumnName="id",insertable=false,updatable=false)
	public User getUser() {
		return user;
	}
/**
	 * Sets the user.
	 *
	 * @param user
	 *            the new user
	 */
	public void setUser(User user) {
		this.user = user;
	}
/**
	 * Gets the privilege.
	 *
	 * @return the  privilege
	 */
 
    @ManyToOne
    @JoinColumn(name="id_Privilege",referencedColumnName="id",insertable=false,updatable=false)
	public Privilege getPrivilege() {
		return privilege;
	}

/**
	 * Sets the privilege.
	 *
	 * @param privilege
	 *            the new privilege
	 */

	public void setPrivilege(Privilege privilege) {
		this.privilege = privilege;
	}

/**
	 * Gets the create.
	 *
	 * @return the  create
	 */

   @Column(name = "CREATE_PER")
	public Boolean getCreate() {
		return create;
	}
/**
	 * Sets the create.
	 *
	 * @param create
	 *            the new create
	 */
	public void setCreate(Boolean create) {
		this.create = create;
	}

/**
	 * Gets the update.
	 *
	 * @return the  update
	 */
   @Column(name = "UPDATE_PER")
	public Boolean getUpdate() {
		return update;
	}
/**
	 * Sets the update.
	 *
	 * @param create
	 *            the new create
	 */
	public void setUpdate(Boolean update) {
		this.update = update;
	}
/**
	 * Gets the delete.
	 *
	 * @return the  delete
	 */
    @Column(name = "DELETE_PER")
	public Boolean getDelete() {
		return delete;
	}
/**
	 * Sets the delete.
	 *
	 * @param delete
	 *            the new delete
	 */
	public void setDelete(Boolean delete) {
		this.delete = delete;
	}
/**
	 * Gets the permissionPK.
	 *
	 * @return the permissionPK
	 */
   @EmbeddedId
	public PermissionPK getPermissionPK() {
		return permissionPK;
	}
/**
	 * Sets the permissionPK.
	 *
	 * @param permissionPK
	 *            the new permissionPK
	 */

	public void setPermissionPK(PermissionPK permissionPK) {
		this.permissionPK = permissionPK;
	}


 

	@Override
	public String toString() {
		return "{"+create+"  "+update+"   "+delete+ "}" ;
	}
/**
*
* hashCode() returns a hash code value for the object.
* This method is supported for the benefit of hash tables such as those provided by HashMap.
*
*/

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((create == null) ? 0 : create.hashCode());
		result = prime * result + ((delete == null) ? 0 : delete.hashCode());
		result = prime * result
				+ ((permissionPK == null) ? 0 : permissionPK.hashCode());
		result = prime * result
				+ ((privilege == null) ? 0 : privilege.hashCode());
		result = prime * result + ((update == null) ? 0 : update.hashCode());
		result = prime * result + ((user == null) ? 0 : user.hashCode());
		return result;
	}

/**
*
* This methode indicates whether some other object is "equal to" this one.
*
*/

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Permission other = (Permission) obj;
		if (create == null) {
			if (other.create != null)
				return false;
		} else if (!create.equals(other.create))
			return false;
		if (delete == null) {
			if (other.delete != null)
				return false;
		} else if (!delete.equals(other.delete))
			return false;
		if (permissionPK == null) {
			if (other.permissionPK != null)
				return false;
		} else if (!permissionPK.equals(other.permissionPK))
			return false;
		if (privilege == null) {
			if (other.privilege != null)
				return false;
		} else if (!privilege.equals(other.privilege))
			return false;
		if (update == null) {
			if (other.update != null)
				return false;
		} else if (!update.equals(other.update))
			return false;
		if (user == null) {
			if (other.user != null)
				return false;
		} else if (!user.equals(other.user))
			return false;
		return true;
	}

}


[/file]
[/template]

[template public generatePermissionPK(persistence :PersistanceObject){packageName : String = persistence.eContainer(Application)._package;}]

[file(persistence.eContainer(Application).name.concat('-domaine/src/main/java/').concat(packageName.convertPackageToPath() .concat('/persistance/')).concat('PermissionPK.java'),false,'UTF-8')]
package [packageName.concat('.persistance')/];

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Embeddable;

/**
 * The Class  PermissionPK .
 *
 * @author Business & Decision
 *
 */
@Embeddable
public class PermissionPK    implements Serializable{

  /** The Constant serialVersionUID. */
    private static final long serialVersionUID = 1L;
	

/**
	 * Instantiates a new PermissionPK.
**/
public PermissionPK ()
{
	}



private Long idUser ;

private Long idPrivilege ;

/**
	 * Gets the idUser.
	 *
	 * @return the  idUser
	 */
@Column(name="id_User")
public Long getIdUser() {
	return idUser;
}
/**
	 * Sets the idUser.
	 *
	 * @param  idUser
	 *            the new  idUser
	 */
public void setIdUser(Long idUser) {
	this.idUser = idUser;
}
/**
	 * Gets the idPrivilege.
	 *
	 * @return the  idPrivilege
	 */
@Column(name="id_Privilege")
public Long  getIdPrivilege() {
	return idPrivilege;
}

/**
	 * Sets the idPrivilege.
	 *
	 * @param  idPrivilege
	 *            the new  idPrivilege
	 */
public void setIdPrivilege(Long idPrivilege) {
	this.idPrivilege = idPrivilege;
}

/**
*
* hashCode() returns a hash code value for the object.
* This method is supported for the benefit of hash tables such as those provided by HashMap.
*
*/

@Override
public int hashCode() {
	final int prime = 31;
	int result = 1;
	result = prime * result
			+ ((idPrivilege == null) ? 0 : idPrivilege.hashCode());
	result = prime * result + ((idUser == null) ? 0 : idUser.hashCode());
	return result;
}

/**
*
*  This methode indicates whether some other object is "equal to" this one.
*
*/
@Override
public boolean equals(Object obj) {
	if (this == obj)
		return true;
	if (obj == null)
		return false;
	if (getClass() != obj.getClass())
		return false;
	PermissionPK other = (PermissionPK) obj;
	if (idPrivilege == null) {
		if (other.idPrivilege != null)
			return false;
	} else if (!idPrivilege.equals(other.idPrivilege))
		return false;
	if (idUser == null) {
		if (other.idUser != null)
			return false;
	} else if (!idUser.equals(other.idUser))
		return false;
	return true;
}
 
public PermissionPK(Long idUser, Long idPrivilege) {
	super();
	this.idUser = idUser;
	this.idPrivilege = idPrivilege;
}
 
 

}


[/file]
[/template]
