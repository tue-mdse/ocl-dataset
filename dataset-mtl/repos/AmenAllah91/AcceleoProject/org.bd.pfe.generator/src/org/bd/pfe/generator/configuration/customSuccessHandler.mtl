[comment encoding = UTF-8 /]
[**
 * The documentation of the module customSuccessHandler.
 */]
[module customSuccessHandler('http://www.businessdecision.fr/Generator')]
[import org::bd::pfe::generator::persistance::packagePath /]
[**
 * The documentation of the template generateElement.
 * @param anApplication
 */]
[template public generateCustomSuccessHandler(persistentObject : PersistanceObject) {packageName : String = persistentObject.eContainer(Application)._package;}]
[file ('/pfe-web/src/main/java/'.concat(persistentObject.eContainer(PersistanceModel).eContainer(Application)._package.convertPackageToPath().concat('/securityConfiguration/').concat('CustomSuccessHandler.java')), false, 'utf-8')]
package [packageName/].securityConfiguration;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.DefaultRedirectStrategy;
import org.springframework.security.web.RedirectStrategy;
import org.springframework.security.web.WebAttributes;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.stereotype.Component;

import [packageName/].persistance.[persistentObject.name.toUpperFirst()/];
import [packageName/].service.[persistentObject.name.toUpperFirst()/]Service;

@Component
public class CustomSuccessHandler implements AuthenticationSuccessHandler {

	@Autowired
	private [persistentObject.name.toUpperFirst()/]Service [persistentObject.name.toLowerFirst()/]Service;
	
	private RedirectStrategy redirectStrategy = new DefaultRedirectStrategy();
	
	public void onAuthenticationSuccess(HttpServletRequest request,
			HttpServletResponse response, Authentication authentication) throws IOException,
			ServletException {
		handle(request, response, authentication);
        clearAuthenticationAttributes(request);
	}
	
	protected void handle(HttpServletRequest request, 
		      HttpServletResponse response, Authentication authentication) throws IOException {
		        String targetUrl = determineTargetUrl(authentication);
		        redirectStrategy.sendRedirect(request, response, targetUrl);
		    }
	
	protected String determineTargetUrl(Authentication authentication) {
		String target = null;
		String username = null;
		Object principal = authentication.getPrincipal();
        if (principal instanceof UserDetails) {
        	username = ((UserDetails) principal).getUsername();
        }
        [persistentObject.name.toUpperFirst()/] [persistentObject.name.toLowerFirst()/] = [persistentObject.name.toLowerFirst()/]Service.findUserByLogin(username);
        if ([persistentObject.name.toLowerFirst()/].getFirstLogin() == true) {
        	target = "/public/changePassword.jsf?faces-redirect=true";
        } else 
       {
        	target = "/securePages/gestionRoles.jsf?faces-redirect=true";
        }
        
		return target;
    }
 
    protected void clearAuthenticationAttributes(HttpServletRequest request) {
        HttpSession session = request.getSession(false);
        if (session == null) {
            return;
        }
        session.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);
    }
 
    public void setRedirectStrategy(RedirectStrategy redirectStrategy) {
        this.redirectStrategy = redirectStrategy;
    }
    protected RedirectStrategy getRedirectStrategy() {
        return redirectStrategy;
    }

	public [persistentObject.name.toUpperFirst()/]Service get[persistentObject.name.toUpperFirst()/]Service() {
		return [persistentObject.name.toLowerFirst()/]Service;
	}

	public void set[persistentObject.name.toUpperFirst()/]Service([persistentObject.name.toUpperFirst()/]Service [persistentObject.name.toLowerFirst()/]Service) {
		this.[persistentObject.name.toLowerFirst()/]Service = [persistentObject.name.toLowerFirst()/]Service;
	}
}
[/file]
[/template]
