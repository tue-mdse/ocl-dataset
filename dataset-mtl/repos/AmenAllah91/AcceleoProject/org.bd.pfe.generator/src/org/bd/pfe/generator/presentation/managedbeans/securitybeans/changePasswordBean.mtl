[comment encoding = UTF-8 /]
[module changePasswordBean('http://www.businessdecision.fr/Generator')]


[template public generateChangePasswordBean(aPersistanceObject : PersistanceObject) {packageName : String = aPersistanceObject.eContainer(Application)._package;
																					 projectName : String = aPersistanceObject.eContainer(Application).name;}]

[file ('pfe-web/src/main/java/'.concat(packageName.replaceAll('\\.','/')).concat('/managedBeans/ChangePasswordBean.java'), false, 'UTF-8')]
package [packageName/].managedBeans;

import java.util.UUID;
import  [packageName.concat('.exception')/].BDException;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.context.FacesContext;
import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.mail.javamail.MimeMessagePreparator;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import [packageName/].persistance.[aPersistanceObject.name.toUpperFirst()/];
import [packageName/].service.[aPersistanceObject.name.toUpperFirst()/]Service;

@ManagedBean
public class ChangePasswordBean {

	@ManagedProperty(value = "#{loginBean}")
	private LoginBean loginBean;
	
	@ManagedProperty(value = "#{[aPersistanceObject.name.toLowerFirst()/]ServiceImplement}")
	private [aPersistanceObject.name.toUpperFirst()/]Service [aPersistanceObject.name.toLowerFirst()/]Service;
	
	@ManagedProperty(value = "#{passwordEncoder}")
	private BCryptPasswordEncoder passwordEncoder;
	
	@ManagedProperty(value = "#{javaMailSenderImpl}")
	private JavaMailSender mailSender;
	
	private String email;
	private String token;
	private String oldPassword;
	private String password;
	private String confirmPassword;
	    private [aPersistanceObject.name.toUpperFirst()/]	loggedUser = ([aPersistanceObject.name.toUpperFirst()/]) SecurityContextHolder.getContext() .getAuthentication().getPrincipal();

	@PostConstruct
	public void init() {
		email = null;
		token = null;
		oldPassword = null;
		password = null;
		confirmPassword = null;
	}
	
	public void sendResetPasswordToken() {
		final [aPersistanceObject.name.toUpperFirst()/] [aPersistanceObject.name.toLowerFirst()/] = [aPersistanceObject.name.toLowerFirst()/]Service.find[aPersistanceObject.name.toUpperFirst()/]ByEmail(email);
		if ([aPersistanceObject.name.toLowerFirst()/] != null) {
			final String token = UUID.randomUUID().toString();
		    [aPersistanceObject.name.toLowerFirst()/]Service.createPasswordResetTokenFor[aPersistanceObject.name.toUpperFirst()/]([aPersistanceObject.name.toLowerFirst()/], token);
		    
		    [aPersistanceObject.name.toLowerFirst()/].setPwd(passwordEncoder.encode(token));
		    [aPersistanceObject.name.toLowerFirst()/].setFirstLogin(true);
            try {
				 [aPersistanceObject.name.toLowerFirst()/]Service.update[aPersistanceObject.name.toUpperFirst()/]([aPersistanceObject.name.toLowerFirst()/]);
			} catch (BDException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		   
		    
		    mailSender.send(new MimeMessagePreparator() {
				  public void prepare(MimeMessage mimeMessage) throws MessagingException {
				    MimeMessageHelper message = new MimeMessageHelper(mimeMessage, true, "UTF-8");
				    message.setTo(email);
				    message.setSubject("Change Password");
				    String mail = "Dear "+[aPersistanceObject.name.toLowerFirst()/].getLogin()+" , <br/>here is your token: <b>"+token+"</b><br/>Please click on the link below and log in using this token as your password:<br/>";
					String url = "<a href=\"http://localhost:8080/[projectName/]-web/Webapp/template1/public/login.jsf\">Change password</a>";
				    message.setText(mail+url, true);
				  }
				});
		    
		    String success = "Un email indiquant quoi faire pour changer votre mot de passe vous a été envoyé. S'il ne figure pas dans votre boite de réception, veuillez vérifier votre dossier Spam.";
			FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, success, null);
			FacesContext.getCurrentInstance().addMessage(null, message);
		} else {
			FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "This is not a valid account email !", null);
			FacesContext.getCurrentInstance().addMessage(null, message);
		}
	}
	
	public void changePassword() {
		if (!([aPersistanceObject.name.toLowerFirst()/]Service.checkIfValidOldPassword(loggedUser, oldPassword)))
if (!([aPersistanceObject.name.toLowerFirst()/]Service.checkIfValidOldPassword(loggedUser,   oldPassword )))
 {
			FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Old Password is invalid !", null);
			FacesContext.getCurrentInstance().addMessage(null, message);
		} else if (password.compareTo(confirmPassword) != 0) {
			FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Password and Confirm Password aren't matching !", null);
			FacesContext.getCurrentInstance().addMessage(null, message);
		} else if (([aPersistanceObject.name.toLowerFirst()/]Service.checkIfValidOldPassword(loggedUser, oldPassword)) && (password.compareTo(confirmPassword) == 0)) {
			[aPersistanceObject.name.toUpperFirst()/] [aPersistanceObject.name.toLowerFirst()/] = [aPersistanceObject.name.toLowerFirst()/]Service.find[aPersistanceObject.name.toUpperFirst()/]ByLogin(loginBean.getLogin());
	    	loggedUser.setPwd(passwordEncoder.encode(password));
			loggedUser.setFirstLogin(false);

            try {
				[aPersistanceObject.name.toLowerFirst()/]Service.update[aPersistanceObject.name.toUpperFirst()/](loggedUser);
			} catch (BDException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Your password has been changed successfully !", null);
			FacesContext.getCurrentInstance().addMessage(null, message);
		}
	}

	public LoginBean getLoginBean() {
		return loginBean;
	}

	public void setLoginBean(LoginBean loginBean) {
		this.loginBean = loginBean;
	}

	public [aPersistanceObject.name.toUpperFirst()/]Service get[aPersistanceObject.name.toUpperFirst()/]Service() {
		return [aPersistanceObject.name.toLowerFirst()/]Service;
	}

	public void set[aPersistanceObject.name.toUpperFirst()/]Service([aPersistanceObject.name.toUpperFirst()/]Service [aPersistanceObject.name.toUpperFirst()/]Service) {
		this.[aPersistanceObject.name.toLowerFirst()/]Service = [aPersistanceObject.name.toUpperFirst()/]Service;
	}
	
	public BCryptPasswordEncoder getPasswordEncoder() {
		return passwordEncoder;
	}

	public void setPasswordEncoder(BCryptPasswordEncoder passwordEncoder) {
		this.passwordEncoder = passwordEncoder;
	}

	public JavaMailSender getMailSender() {
		return mailSender;
	}

	public void setMailSender(JavaMailSender mailSender) {
		this.mailSender = mailSender;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getToken() {
		return token;
	}

	public void setToken(String token) {
		this.token = token;
	}

	public String getOldPassword() {
		return oldPassword;
	}

	public void setOldPassword(String oldPassword) {
		this.oldPassword = oldPassword;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getConfirmPassword() {
		return confirmPassword;
	}

	public void setConfirmPassword(String confirmPassword) {
		this.confirmPassword = confirmPassword;
	}	

	public [aPersistanceObject.name.toUpperFirst()/] getLoggedUser() {
		return loggedUser;
	}

	public void setLoggedUser([aPersistanceObject.name.toUpperFirst()/] loggedUser) {
		this.loggedUser = loggedUser;
	}	
}
[/file]
[/template]
