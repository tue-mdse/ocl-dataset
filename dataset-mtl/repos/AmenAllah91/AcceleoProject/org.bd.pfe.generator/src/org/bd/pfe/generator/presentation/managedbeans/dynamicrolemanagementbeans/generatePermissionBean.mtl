[comment encoding = UTF-8 /]
[module generatePermissionBean('http://www.businessdecision.fr/Generator')]
[import org::bd::pfe::generator::persistance::packagePath /]

[template public generatePermissionBean(persistance :PersistanceObject){packageName : String = persistance.eContainer(Application)._package;}]

[file ('/pfe-web/src/main/java/'.concat(persistance.eContainer(PersistanceModel).eContainer(Application)._package.convertPackageToPath() .concat('/managedBeans/')).concat('PermissionBean.java'),false,'UTF-8')]
package [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.managedBeans')/];



import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpServletRequest;
import org.springframework.security.core.context.SecurityContextHolder;
import  [packageName.concat('.exception')/].BDException;
import  [packageName/].persistance.Permission;
import  [packageName/].persistance.PermissionPK;
import  [packageName/].persistance.Privilege;
import  [packageName/].persistance.User;
import [packageName/].service.PermissionService;
import  [packageName/].service.PrivilegeService;
import  [packageName/].service.UserService;

     @ManagedBean
     @SessionScoped
     public class PermissionBean {

	
	@ManagedProperty("#{permissionServiceImplement}")
	private     PermissionService permissionService ;
	
	@ManagedProperty("#{privilegeServiceImplement}")
	private    PrivilegeService privilegeService;
	
	@ManagedProperty("#{ [persistance.name.toLowerFirst()/]ServiceImplement}")
	private      [persistance.name.toUpperFirst()/]Service  [persistance.name.toLowerFirst()/]Service ;
	
	private    Boolean hasPrivilege ;
	private    Boolean  form ;
	private    Permission permission ;
	private    [persistance.name.toUpperFirst()/] loggedUser  ;
	private    [persistance.name.toUpperFirst()/] user   ;
	private    Privilege privilege  ;
	private    String nomPrivilege ;
	private    List < [persistance.name.toUpperFirst()/]>  [persistance.name.toLowerFirst()/]s ; 
	private    List  <Permission> userPermissions  ;
	
 
		@PostConstruct
	    public void init() 
		{
		      form=false;
		      hasPrivilege=false ;
	          users =  userService.findAll() ;
	          user =new User() ;
	          permission= new Permission() ;
	          loggedUser = ( [persistance.name.toUpperFirst()/]) SecurityContextHolder.getContext() .getAuthentication().getPrincipal();
	     	  userPermissions=new ArrayList<Permission>() ;
	     	  definePermissions() ;
	   }
	 
		
		
		
		
	 public 	void initPermissions( [persistance.name.toUpperFirst()/]  user)
	 {
            form=true ;
		    userPermissions= permissionService.allUserPermissions(user) ;
          }
	 
	 
		
	 public void  savePermissions()
		{
		 
           for(Permission p : userPermissions)
            {
        	    try {
					permissionService.createPermission(p);
				} catch (BDException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
           }
        }
	 
 
	 public Boolean hasThisPriv()
	 {
		   HttpServletRequest origRequest = (HttpServletRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();
		   String url = origRequest.getRequestURL().toString()  ;
		   String nom ;
		   nom=url.replace("http://localhost:8080/Project_Web/securePages/privileges/", "") ;
		   privilege=privilegeService.findPrivilegeByUrl(nom) ;
		   
		   if(loggedUser.getRole().getPrivileges() .contains(privilege))
		   {
			   hasPrivilege=true;
		   }
		   else
		   {
			   hasPrivilege=false ;
		   }
		    return hasPrivilege ;
	 }
		
	 
	 
	 
	 
	public Privilege  returnPrivilege()
{
   HttpServletRequest origRequest = (HttpServletRequest)FacesContext.getCurrentInstance().getExternalContext().getRequest();
   String url = origRequest.getRequestURL().toString()  ;
   String nom ;
   nom=url.replace("http://localhost:8080/Project_Web/securePages/privileges/", "") ;
   privilege=privilegeService.findPrivilegeByUrl(nom) ;
   return privilege ;
 
}

	
public	Permission definePermissions()
{  
	privilege= returnPrivilege() ;
    Permission p= permissionService.findPermissionByUserAndPrivilege(loggedUser, privilege) ;
 
    if(p==null)
    {
    	PermissionPK  pk = new PermissionPK(loggedUser.getId(), privilege.getId()) ;
    	p= new Permission() ;
    	p.setPermissionPK(pk);
    	p.setPrivilege(privilege);
    	p.setUser(loggedUser);
    	p.setCreate (false);
    	p.setUpdate(false);
    	p.setDelete (false);
    }
  
	return p ;
}
	
 
	public PermissionService getPermissionService() {
		return permissionService;
	}
	public void setPermissionService(PermissionService permissionService) {
		this.permissionService = permissionService;
	}
	public PrivilegeService getPrivilegeService() {
		return privilegeService;
	}
	public void setPrivilegeService(PrivilegeService privilegeService) {
		this.privilegeService = privilegeService;
	}
	public Privilege getPrivilege() {
		return privilege;
	}
	public void setPrivilege(Privilege privilege) {
		this.privilege = privilege;
	}
	public String getNomPrivilege() {
		return nomPrivilege;
	}
	public void setNomPrivilege(String nomPrivilege) {
		this.nomPrivilege = nomPrivilege;
	}

 	public Permission getPermission() {
		return permission;
	}

 public void setPermission(Permission permission) {
		this.permission = permission;
	}
 
 public  [persistance.name.toUpperFirst()/] getLoggedUser() {
		return loggedUser;
	}


	public void setLoggedUser( [persistance.name.toUpperFirst()/] loggedUser) {
		this.loggedUser = loggedUser;
	}


	public  [persistance.name.toUpperFirst()/]Service get[persistance.name.toLowerFirst()/]Service() {
		return userService;
	}


	public void setUserService( [persistance.name.toUpperFirst()/]Service  [persistance.name.toLowerFirst()/]Service) {
		this.userService = userService;
	}


	public List< [persistance.name.toUpperFirst()/]> getUsers() {
		return users;
	}


	public void setUsers(List< [persistance.name.toUpperFirst()/]> users) {
		this.users = users;
	}


	public  [persistance.name.toUpperFirst()/] getUser() {
		return user;
	}


	public void setUser( [persistance.name.toUpperFirst()/] user) {
		this.user = user;
	}


	public Boolean getForm() {
		return form;
	}


	public void setForm(Boolean form) {
		this.form = form;
	}


	public List<Permission> getUserPermissions() {
		return userPermissions;
	}


	public void setUserPermissions(List<Permission> userPermissions) {
		this.userPermissions = userPermissions;
	}




	public PermissionBean() {
		super();
	}


	public Boolean getHasPrivilege() {
		return hasPrivilege;
	}


	public void setHasPrivilege(Boolean hasPrivilege) {
		this.hasPrivilege = hasPrivilege;
	}
	
	
}


[/file]
[/template]
