[comment encoding = UTF-8 /]
[module generateJavaConfig('http://www.businessdecision.fr/Generator')]
[import org::bd::pfe::generator::persistance::packagePath /]


[template public generateJavaConfig(application : Application)]
 	
[file('/pfe-service/src/main/java/'.concat(application._package.convertPackageToPath() .concat('/configuration/')).concat( 'JavaConfig.java'),false,'UTF-8')]
package [application._package.toString().concat('.configuration')/];
import java.util.Properties;
import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;
@Configuration
@EnableTransactionManagement
@EnableJpaRepositories(basePackages = { "[application._package.toString()/]"})
@ComponentScan(basePackages = {  "[application._package.toString()/]"})
/**
 * The Class JavaConfig.
 */

public class JavaConfig  
{
   @Bean
   public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
      LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean();
      em.setDataSource(dataSource());
      em.setPackagesToScan(new String['[]'/]{"[application._package.concat('.persistance')/]"});
      em.setPersistenceUnitName("unitName");
      JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
      em.setJpaVendorAdapter(vendorAdapter);
      em.setJpaProperties(additionalProperties());
 
      return em;
   }
 

  @Bean
   public DataSource dataSource(){
      DriverManagerDataSource dataSource = new DriverManagerDataSource();
      dataSource.setDriverClassName("com.mysql.jdbc.Driver");
      dataSource.setUrl("jdbc:mysql://localhost:3306/dbagen");
      dataSource.setUsername( "root" );
      dataSource.setPassword( "root" );
      return dataSource;
   }
  
   @Bean
   public PlatformTransactionManager transactionManager(EntityManagerFactory emf)
   {
        JpaTransactionManager transactionManager = new JpaTransactionManager();
        transactionManager.setEntityManagerFactory(emf);
        return transactionManager;
   }

   
   @Bean
   public JavaMailSenderImpl javaMailSenderImpl() 
   {
       final JavaMailSenderImpl mailSenderImpl = new JavaMailSenderImpl();
       mailSenderImpl.setHost("smtp.gmail.com");
       mailSenderImpl.setPort(587);
       mailSenderImpl.setUsername("bd.projet.poc@gmail.com");
       mailSenderImpl.setPassword("bdprojetpoc");
       final Properties javaMailProps = new Properties();
       javaMailProps.put("mail.smtp.auth", true);
       javaMailProps.put("mail.smtp.starttls.enable", true);
       mailSenderImpl.setJavaMailProperties(javaMailProps);
       return mailSenderImpl;
   } 
 
   
   
   @Bean
   public PasswordEncoder passwordEncoder() 
   {
   	PasswordEncoder encoder = new BCryptPasswordEncoder();
   	return encoder;
   }
 
  Properties additionalProperties()
      {
      Properties properties = new Properties();
      properties.setProperty("hibernate.hbm2ddl.auto", "update");
      properties.setProperty("hibernate.cache.provider_class", "org.hibernate.cache.NoCacheProvider") ;
      properties.setProperty("hibernate.current_session_context_class", "thread") ;
      properties.setProperty("hibernate.show_sql", "false") ;
      properties.setProperty("hibernate.format_sql", "false") ;
      properties.setProperty("hibernate.show_comments", "true") ;
      return properties;
   }

}
[/file]
[/template]