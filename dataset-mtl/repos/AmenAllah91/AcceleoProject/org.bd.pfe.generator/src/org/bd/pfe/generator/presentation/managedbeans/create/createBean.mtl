[comment encoding = UTF-8 /]
[module createBean('http://www.businessdecision.fr/Generator')]
[import org::bd::pfe::generator::persistance::packagePath /]

[template public generateCreateBean(create : Create){packageName : String = create.eContainer(SubProcess).eContainer(Process).eContainer(Application)._package;}]

[file(create.eContainer(Application).name.concat('-web/src/main/java/').concat(packageName.convertPackageToPath().concat('/managedBeans/')).concat(create.name.toUpperFirst()).concat('Bean.java'),false,'UTF-8')]

package [packageName.concat('.managedBeans')/];
import java.util.ArrayList;
import java.util.List;

import  [packageName.concat('.exception')/].BDException;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.*;
import javax.faces.context.FacesContext;
[if (create.target.isAuthentification)]
import javax.servlet.http.Part;
import org.apache.commons.io.IOUtils;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import java.util.Set;
import java.io.IOException;
[/if]
import [create.eContainer(SubProcess).eContainer(Process).eContainer(Application)._package.concat('.service')/].*;
import [create.eContainer(SubProcess).eContainer(Process).eContainer(Application)._package.concat('.persistance')/].*;
@SessionScoped
@ManagedBean
public class [create.name.toUpperFirst().concat('Bean')/] {

@ManagedProperty("#{[create.target.name.toLowerFirst().concat('ServiceImplement')/]}")
         [create.target.name.toUpperFirst().concat('Service')/] [create.target.name.toLowerFirst().concat('Service')/] ;

         private List<[create.target.name.toUpperFirst()/]> [create.target.name.toLowerFirst()/]s = new ArrayList<[create.target.name.toUpperFirst()/]>();
	     private [create.target.name.toUpperFirst()/] [create.target.name.toLowerFirst()/] = new [create.target.name.toUpperFirst()/]();

         public List<[create.target.name.toUpperFirst()/]> get[create.target.name.toUpperFirst()/]s() {
		          return [create.target.name.toLowerFirst()/]s ;
	     }

	     public void set[create.target.name.toUpperFirst()/]s(List<[create.target.name.toUpperFirst()/]> [create.target.name.toLowerFirst()/]s) {
		      this.[create.target.name.toLowerFirst()/]s = [create.target.name.toLowerFirst()/]s;
	     }

         public [create.target.name.toUpperFirst()/] get[create.target.name.toUpperFirst()/]() {
		        return [create.target.name.toLowerFirst()/];
	      }

	     public void set[create.target.name.toUpperFirst()/]([create.target.name.toUpperFirst()/] [create.target.name.toLowerFirst()/]) {
		      this.[create.target.name.toLowerFirst()/] = [create.target.name.toLowerFirst()/];
	     }
[for (it : Config | create.associations)]
[if ((create.target.name).equalsIgnoreCase(it.reference.name)= false)]
	
	@ManagedProperty("#{[it.reference.name.toLowerFirst().concat('ServiceImplement')/]}")
         [it.reference.name.toUpperFirst().concat('Service')/] [it.reference.name.toLowerFirst().concat('Service')/] ;
         private [it.reference.name.toUpperFirst()/] [it.reference.name.toLowerFirst()/] = new [it.reference.name.toUpperFirst()/]();
         private List<[it.reference.name.toUpperFirst()/]> [it.reference.name.toLowerFirst()/]s = new ArrayList<[it.reference.name.toUpperFirst()/]>();

         public  [it.reference.name.toUpperFirst()/] get[it.reference.name.toUpperFirst()/]() {
		        return [it.reference.name.toLowerFirst()/];
	      }

	     public void set[it.reference.name.toUpperFirst()/]([it.reference.name.toUpperFirst()/] [it.reference.name.toLowerFirst()/]) {
		      this.[it.reference.name.toLowerFirst()/] = [it.reference.name.toLowerFirst()/];
	     }

         public List<[it.reference.name.toUpperFirst()/]> get[it.reference.name.toUpperFirst()/]s() {
		          return [it.reference.name.toLowerFirst()/]s ;
	     }

	     public void set[it.reference.name.toUpperFirst()/]s(List<[it.reference.name.toUpperFirst()/]> [it.reference.name.toLowerFirst()/]s) {
		      this.[it.reference.name.toLowerFirst()/]s = [it.reference.name.toLowerFirst()/]s;
	     }
[/if]
[/for]

      [if (create.target.isAuthentification)]
       @ManagedProperty("#{permissionServiceImplement}")
	   private PermissionService permissionService;

       public void setPermissionService(PermissionService permissionService) {
		this.permissionService = permissionService;
	   }

	   public PermissionService getPermissionService() {
		return permissionService;
	    }





       @ManagedProperty(value = "#{passwordEncoder}")
	   private BCryptPasswordEncoder passwordEncoder;



	    public BCryptPasswordEncoder getPasswordEncoder() {
		       return passwordEncoder;
	     }

	    public void setPasswordEncoder(BCryptPasswordEncoder passwordEncoder) {
		this.passwordEncoder = passwordEncoder;
	     }

      	private Part part;
       
        public Part getPart() {
		     return part;
	    }

	    public void setPart(Part part) {
		     this.part = part;
	    }
      [/if] 
        

 @PostConstruct
	    public void init() {
		 [create.target.name.toLowerFirst()/] = new [create.target.name.toUpperFirst()/]();
		
	 }
 [if (create.target.isAuthentification)]

public String doCreate()
	{
		Set<Privilege> allPrivs = (Set<Privilege>) [create.target.name.toLowerFirst()/].getRole().getPrivileges();
		try {
			[create.target.name.toLowerFirst()/].setPwd(passwordEncoder.encode([create.target.name.toLowerFirst()/].getPwd()));
			[create.target.name.toLowerFirst()/].setAcountActivated(true);
			[create.target.name.toLowerFirst()/].setAcountBloqued(false);
			[create.target.name.toLowerFirst().concat('Service')/].create[create.target.name.toUpperFirst()/]([create.target.name.toLowerFirst()/]);
			for (Privilege p : allPrivs) {
				PermissionPK pk = new PermissionPK();
                pk.setId[create.target.name.toUpperFirst()/]([create.target.name.toLowerFirst()/].getId());
                pk.setIdPrivilege(p.getId());
				Permission per = new Permission();
				per.setPermissionPK(pk);
				per.setPrivilege(p);
				per.set[create.target.name.toUpperFirst()/](user);
				per.setCreate(false);
				per.setUpdate(false);
				per.setDelete(false);
				permissionService.createPermission(per);
			}

			init();
			FacesContext.getCurrentInstance().addMessage(null,
					new FacesMessage("User added successfully"));

		}

		catch (Exception e) {
			e.printStackTrace();
			FacesContext.getCurrentInstance().addMessage(
					null,
					new FacesMessage(
							"Add New User' did not complete successfully "));
		}
		return null;
	}


      	public String uplod() throws IOException
	    {
		['byte'.concat('[]')/] photo = IOUtils.toByteArray(part.getInputStream());
		[create.target.name.toLowerFirst()/].setPhoto(photo);
        
        try {
			[create.target.name.toLowerFirst().concat('Service')/].update[create.target.name.toUpperFirst()/]([create.target.name.toLowerFirst()/]);
		} catch (BDException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return null;
	    }
	
     [else]
 public String doCreate(){
		 try {
			
			  [create.target.name.toLowerFirst().concat('Service')/].create[create.target.name.toUpperFirst()/]([create.target.name.toLowerFirst()/]);
			  init();
			  FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Successfully done") );
			  return null;
		} catch (Exception e) {
			e.printStackTrace();
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("something went wrong please try again") );
		}
		
		return null;
		}
 [/if] 

         //[protected (' : you can write your own code')]
			
		//[/protected]
}
[/file]
[/template]
