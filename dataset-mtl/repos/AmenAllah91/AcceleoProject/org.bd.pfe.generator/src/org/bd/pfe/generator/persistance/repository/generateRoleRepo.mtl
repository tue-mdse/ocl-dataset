[comment encoding = UTF-8 /]
[module generateRoleRepo('http://www.businessdecision.fr/Generator')]
[import org::bd::pfe::generator::persistance::packagePath /]


[template public generateRoleRepo(persistance :PersistanceObject)]

[file('/pfe-domaine/src/main/java/'.concat(persistance.eContainer(PersistanceModel).eContainer(Application)._package.convertPackageToPath() .concat('/repository/')).concat('RoleRepository.java'),false,'UTF-8')]
package [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.repository')/];
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.persistance')/].Role;
import [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.persistance')/].[persistance.name.toUpperFirst()/];
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;

@Repository
public interface RoleRepository extends JpaRepository<Role, Long> {
    
    @Query("select u from User u where u.role.role = :role")
	public List<User> findUsersByRole(@Param("role") String role);
    
    public Role  findRoleByRole(String role) ;
}
[/file]
[/template]
[template public generatePrivRepo(persistance :PersistanceObject)]

[file('/pfe-domaine/src/main/java/'.concat(persistance.eContainer(PersistanceModel).eContainer(Application)._package.convertPackageToPath() .concat('/repository/')).concat('PrivilegeRepository.java'),false,'UTF-8')]
package [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.repository')/];
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;
import [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.persistance')/].Privilege;
import [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.persistance')/].[persistance.name.toUpperFirst()/];

@Repository
public interface PrivilegeRepository extends JpaRepository<Privilege, Long> {
    Privilege findPrivilegeByName(String name) ;
	Privilege findPrivilegeByUrl(String url) ;
}
[/file]
[/template]

[template public generatePermissionRepo(persistance :PersistanceObject)]

[file('/pfe-domaine/src/main/java/'.concat(persistance.eContainer(PersistanceModel).eContainer(Application)._package.convertPackageToPath() .concat('/repository/')).concat('PermissionRepository.java'),false,'UTF-8')]
package [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.repository')/];
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;
import [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.persistance')/].Permission;
import [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.persistance')/].Privilege;
import [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.persistance')/].[persistance.name.toUpperFirst()/];

@Repository
public interface PermissionRepository extends JpaRepository<Permission, Long> {
    
	@Query("select p from Permission p where p.user=:user and p.privilege=:privilege")
	Permission findPermissionByUserAndPrivilege(@Param("[persistance.name.toLowerFirst()/]")[persistance.name.toUpperFirst()/] [persistance.name.toLowerFirst()/], @Param("privilege")	Privilege privilege) ;

	@Query("select p from Permission p where p.user=:user")
    List <Permission> findPermissionsBy[persistance.name.toUpperFirst()/](@Param("[persistance.name.toLowerFirst()/]")[persistance.name.toUpperFirst()/] user) ;
	
}
[/file]
[/template]