[comment encoding = UTF-8 /]
[module confirmInscriptionBean('http://www.businessdecision.fr/Generator')]


[template public generateConfirmInscriptionBean(aPersistanceObject : PersistanceObject) {packageName : String = aPersistanceObject.eContainer(Application)._package;
																					     projectName : String = aPersistanceObject.eContainer(Application).name;}]

[file ('pfe-web/src/main/java/'.concat(packageName.replaceAll('\\.','/')).concat('/managedBeans/ConfirmInscriptionBean.java'), false, 'UTF-8')]
package [packageName/].managedBeans;

import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.RequestScoped;
import javax.faces.context.FacesContext;
import [packageName/].persistance.[aPersistanceObject.name.toUpperFirst()/];
import [packageName/].persistance.VerificationToken;
import [packageName/].service.[aPersistanceObject.name.toUpperFirst()/]Service;
import  [packageName.concat('.exception')/].BDException;
@ManagedBean
@RequestScoped
public class ConfirmInscriptionBean {

	@ManagedProperty(value = "#{[aPersistanceObject.name.toLowerFirst()/]ServiceImplement}")
	private [aPersistanceObject.name.toUpperFirst()/]Service [aPersistanceObject.name.toLowerFirst()/]Service;
	
	private String email;
	private String token;
	
	@PostConstruct
	public void init() {
		email = null;
		token = null;
	}
	
	public void confirmRegistration() {
		VerificationToken verificationToken = [aPersistanceObject.name.toLowerFirst()/]Service.getVerificationToken(token);
		if (verificationToken != null) 
		{
			[aPersistanceObject.name.toUpperFirst()/] [aPersistanceObject.name.toLowerFirst()/] = verificationToken.get[aPersistanceObject.name.toUpperFirst()/]();
			[aPersistanceObject.name.toLowerFirst()/].setAcountActivated(true);
			[aPersistanceObject.name.toLowerFirst()/].setAcountBloqued(false);
            try {
				[aPersistanceObject.name.toLowerFirst()/]Service.update[aPersistanceObject.name.toUpperFirst()/]([aPersistanceObject.name.toLowerFirst()/]);
			} catch (BDException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_INFO, "Dear "+[aPersistanceObject.name.toLowerFirst()/].getLogin()+", your account has been successfully activated !", null);
			FacesContext.getCurrentInstance().addMessage(null, message);
		} 
		else 
		{
			FacesMessage message = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Invalid token !", null);
			FacesContext.getCurrentInstance().addMessage(null, message);
		}
	}
	
	public UserService getUserService() {
		return [aPersistanceObject.name.toLowerFirst()/]Service;
	}
	public void set[aPersistanceObject.name.toUpperFirst()/]Service([aPersistanceObject.name.toUpperFirst()/]Service [aPersistanceObject.name.toLowerFirst()/]Service) {
		this.[aPersistanceObject.name.toLowerFirst()/]Service = [aPersistanceObject.name.toLowerFirst()/]Service;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getToken() {
		return token;
	}
	public void setToken(String token) {
		this.token = token;
	}	
}
[/file]
[/template]
