[comment encoding = UTF-8 /]
[module implementServicePermission('http://www.businessdecision.fr/Generator')]
[import org::bd::pfe::generator::persistance::packagePath /]

[template public generateImplementServicePermission(persistance :PersistanceObject){packageName : String = persistance.eContainer(Application)._package;}]

[file(persistance.eContainer(Application).name.concat('-service/src/main/java/').concat(packageName.convertPackageToPath().concat('/implement/')).concat('PermissionServiceImplement').concat('.java'),false,'UTF-8')]
package [packageName.concat('.implement')/];

import java.util.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import [packageName.concat('.repository').concat('.PermissionRepository')/];
import [packageName.concat('.persistance').concat('.Permission')/];
import [packageName.concat('.persistance').concat('.PermissionPK')/];
import [packageName.concat('.persistance').concat('.Privilege')/];
import [packageName.concat('.persistance.').concat(persistance.name.toUpperFirst())/];
import [packageName.concat('.service')/].PermissionService;
import [packageName.concat('.exception')/].BDException;

@Service
public class PermissionServiceImplement implements PermissionService {

@Autowired
	PermissionRepository permissionRepository;


	public PermissionServiceImplement () {
		super();
	}
    
    Permission permission = new Permission() ;
	
    @Autowired
	PermissionRepository repository ;

    @Transactional
	public Boolean createPermission(Permission permission)throws  BDException {
		if((permissionRepository.save(permission)!=null)){
		return true;
        }else
        throw new BDException("");
	}
	
	@Transactional
	public Boolean updatePermission(Permission permission) throws  BDException{
		if(permissionRepository.save(permission)!=null){
		return true;
        }else 
        throw new BDException("");
	}
	
	@Transactional
	 public Boolean deletePermission(Permission permission){
        permissionRepository.delete(permission);
		return true; 
	}
	@Transactional
	public List<Permission> findAll(){
		return permissionRepository.findAll();
	}
	@Transactional
	public Permission findPermissionById (Long id) throws  BDException{
       if(permissionRepository.findOne(id)!= null){
		    return permissionRepository.findOne(id);
          
        }else
           throw new BDException(""); 
	}
	
	


	
	public Permission findPermissionBy[persistance.name.toUpperFirst()/]AndPrivilege([persistance.name.toUpperFirst()/] [persistance.name.toLowerFirst()/], Privilege privilege) 
	{
	  return repository.findPermissionBy[persistance.name.toUpperFirst()/]AndPrivilege([persistance.name.toLowerFirst()/], privilege) ;
	}
 
 

	
	public void addPermissionTo[persistance.name.toUpperFirst()/]EtPrivilege([persistance.name.toUpperFirst()/] [persistance.name.toLowerFirst()/], Privilege privilege, boolean create, boolean update, boolean delete) {
    	 
		 PermissionPK pk = new PermissionPK() ;
		 pk.setIdPrivilege(privilege.getId());
		 pk.setId[persistance.name.toUpperFirst()/]([persistance.name.toLowerFirst()/].getId());
		 permission.setPermissionPK(pk);
		 permission.setCreate(create);
 		 permission.setDelete(delete);
 		 permission.setUpdate(update);
 		 permission.set[persistance.name.toUpperFirst()/]([persistance.name.toLowerFirst()/]);
 		 permission.setPrivilege(privilege);
 		
 		 repository.save(permission) ;
 		   
	}



	
	public List<Permission> all[persistance.name.toUpperFirst()/]Permissions([persistance.name.toUpperFirst()/] [persistance.name.toLowerFirst()/])
{
	 Set <Privilege> privileges = [persistance.name.toLowerFirst()/].getRole().getPrivileges() ;
	 Set <Privilege> prvs=new HashSet<Privilege>() ;
	List <Permission> permissions= new ArrayList<Permission>() ; 
	for(Privilege p:privileges) prvs.add(p) ;
	 for (Privilege p : prvs)
	   {
		 if(p.getPrivilegeSup()!=null)  permissions.add(findPermissionBy[persistance.name.toUpperFirst()/]AndPrivilege([persistance.name.toLowerFirst()/], p)) ;
	    }
	 return permissions ;
	}


         //[protected (' : you can write your own code')]
			
		//[/protected]

	
}


[/file]
[/template]
