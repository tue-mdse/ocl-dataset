[comment encoding = UTF-8 /]
[module associationPK('http://www.businessdecision.fr/Generator')]
[import org::bd::pfe::generator::persistance::typeAttributes /]
[import org::bd::pfe::generator::persistance::packagePath /]
[import org::bd::pfe::generator::persistance::heritageAtt /]

[template public generatePK(persistance : AssociationClass){packageName : String = persistance.eContainer(Application)._package;}]
[file(persistance.eContainer(Application).name.concat('-domaine/src/main/java/').concat(packageName.convertPackageToPath().concat('/persistance/')).concat(persistance.name.toUpperFirst()).concat('PK.java'),false,'UTF-8')]
package [packageName.concat('.persistance')/];

import java.io.Serializable;

import javax.persistence.Embeddable;
import javax.persistence.Column;
[for (att : Attributes | persistance.attributes)]
	[if (type.toString().equalsIgnoreCase('Date')) ]
import java.util.Date;

[/if]
[/for]
/**
 * The Class [persistance.name.toUpperFirst()/].
 * 
 * @author Business & Decision
 *
 */
 
@Embeddable
public class [persistance.name.toUpperFirst()/]PK implements Serializable {
	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/**
	 * Instantiates a new [persistance.name.toLowerFirst()/].
	 */
	public [persistance.name.toUpperFirst()/]PK (){
	}
[for (att : Attributes | persistance.attributes)]
[if (id)]
	private [type.toString().convertToAttributes()/]  [name.toLowerFirst()/];
[/if]
[/for]

[for (att : Attributes | assoctiation.source.attributes)]
[if (id)]
	private [type.toString().convertToAttributes()/]  [name.toLowerFirst()/][persistance.assoctiation.source.name.toUpperFirst()/];
[/if]
[/for]
[for (att : Attributes | assoctiation.target.attributes)]
[if (id)]
	private [type.toString().convertToAttributes()/]  [name.toLowerFirst()/][persistance.assoctiation.target.name.toUpperFirst()/];
[/if]
[/for]

[for (att : Attributes | persistance.attributes)]
[if (id)]
/**
	 * Gets the  [name.toLowerFirst()/].
	 *
	 * @return the  [name.toLowerFirst()/]
	 */
	public [type.toString().convertToAttributes()/]  get[name.toUpperFirst()/](){
	return 	[name.toLowerFirst()/];
}

	public void  set[name.toUpperFirst()/]([type.toString().convertToAttributes()/] [name.toLowerFirst()/]){
		this.[name.toLowerFirst()/]=[name.toLowerFirst()/];
	}

[/if]

[/for]


[for (att : Attributes | assoctiation.source.attributes)]
[if (id)]
/**
	 * Gets the  [name.toLowerFirst()/].
	 *
	 * @return the  [name.toLowerFirst()/]
	 */
@Column(name="[name.toLowerFirst()/]_[persistance.assoctiation.source.name.toLowerFirst()/]")
	public [type.toString().convertToAttributes()/]  get[name.toUpperFirst()/][persistance.assoctiation.source.name.toUpperFirst()/](){
	return 	[name.toLowerFirst()/][persistance.assoctiation.source.name.toUpperFirst()/];
}
/**
	 * Sets the [name.toLowerFirst()/].
	 *
	 * @param [name.toLowerFirst()/]
	 *            the new [name.toLowerFirst()/]
	 */
	public void  set[name.toUpperFirst()/][persistance.assoctiation.source.name.toUpperFirst()/]([type.toString().convertToAttributes()/] [name.toLowerFirst()/][persistance.assoctiation.source.name.toUpperFirst()/]){
		this.[name.toLowerFirst()/][persistance.assoctiation.source.name.toUpperFirst()/]=[name.toLowerFirst()/][persistance.assoctiation.source.name.toUpperFirst()/];
	}

[/if]

[/for]

[for (att : Attributes | assoctiation.target.attributes)]
[if (id)]
/**
	 * Gets the  [name.toLowerFirst()/].
	 *
	 * @return the  [name.toLowerFirst()/]
	 */
@Column(name="[name.toLowerFirst()/]_[persistance.assoctiation.target.name.toLowerFirst()/]")
	public [type.toString().convertToAttributes()/]  get[name.toUpperFirst()/][persistance.assoctiation.target.name.toUpperFirst()/](){
	return 	[name.toLowerFirst()/][persistance.assoctiation.target.name.toUpperFirst()/];
}

/**
	 * Sets the [name.toLowerFirst()/].
	 *
	 * @param [name.toLowerFirst()/]
	 *            the new [name.toLowerFirst()/]
	 */
	public void  set[name.toUpperFirst()/][persistance.assoctiation.target.name.toUpperFirst()/]([type.toString().convertToAttributes()/] [name.toLowerFirst()/][persistance.assoctiation.target.name.toUpperFirst()/]){
		this.[name.toLowerFirst()/][persistance.assoctiation.target.name.toUpperFirst()/]=[name.toLowerFirst()/][persistance.assoctiation.target.name.toUpperFirst()/];
	}

[/if]

[/for]
/**
*
* hashCode() returns a hash code value for the object.
* This method is supported for the benefit of hash tables such as those provided by HashMap.
*
*/
@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
[for (att : Attributes | assoctiation.target.attributes)]
[if (id)]
result = prime * result + (([name.toLowerFirst()/][persistance.assoctiation.target.name.toUpperFirst()/] == null) ? 0 : [name.toLowerFirst()/][persistance.assoctiation.target.name.toUpperFirst()/].hashCode());
[/if]
[/for]
[for (att : Attributes | assoctiation.source.attributes)]
[if (id)]
result = prime * result + (([name.toLowerFirst()/][persistance.assoctiation.source.name.toUpperFirst()/] == null) ? 0 : [name.toLowerFirst()/][persistance.assoctiation.source.name.toUpperFirst()/].hashCode());
[/if]
[/for]
[for (att : Attributes | persistance.attributes)]
[if (id)]
result = prime * result + (([name.toLowerFirst()/] == null) ? 0 : [name.toLowerFirst()/].hashCode());
[/if]

[/for]	
		return result;
	}
/**
*
*This methode indicates whether some other object is "equal to" this one.
*
*/
@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
	[name.toUpperFirst()/]PK other = ([name.toUpperFirst()/]PK) obj;
[for (att : Attributes | persistance.attributes)]
[if (id)]
if ([name.toLowerFirst()/] == null) {
		if (other.[name.toLowerFirst()/] != null)
			return false;
	} else if (![name.toLowerFirst()/].equals(other.[name.toLowerFirst()/]))
		return false;
[/if]
[/for]

[for (att : Attributes | assoctiation.source.attributes)]
[if (id)]
if ([name.toLowerFirst()/][persistance.assoctiation.source.name.toUpperFirst()/]== null) {
if (other.[name.toLowerFirst()/][persistance.assoctiation.source.name.toUpperFirst()/] != null)
			return false;
	} else if (![name.toLowerFirst()/][persistance.assoctiation.source.name.toUpperFirst()/].equals(other.[name.toLowerFirst()/][persistance.assoctiation.source.name.toUpperFirst()/]))
		return false;
[/if]
[/for]

[for (att : Attributes | assoctiation.target.attributes)]
[if (id)]
if ([name.toLowerFirst()/][persistance.assoctiation.target.name.toUpperFirst()/] == null) {
if (other.[name.toLowerFirst()/][persistance.assoctiation.target.name.toUpperFirst()/] != null)
			return false;
	} else if (![name.toLowerFirst()/][persistance.assoctiation.target.name.toUpperFirst()/].equals(other.[name.toLowerFirst()/][persistance.assoctiation.target.name.toUpperFirst()/]))
		return false;
[/if]
[/for]
return true;


}
         //[protected (' : you can write your own code')]
			
		//[/protected]
}
[/file]
[/template]
