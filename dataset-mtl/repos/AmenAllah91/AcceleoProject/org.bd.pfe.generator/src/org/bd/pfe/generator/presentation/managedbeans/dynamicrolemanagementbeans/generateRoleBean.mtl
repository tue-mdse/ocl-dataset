[comment encoding = UTF-8 /]
[module generateRoleBean('http://www.businessdecision.fr/Generator')]

[import org::bd::pfe::generator::persistance::packagePath /]
[template public generateRoleBean(persistance :PersistanceObject){packageName : String = persistance.eContainer(Application)._package;}]
[file ('/pfe-web/src/main/java/'.concat(persistance.eContainer(PersistanceModel).eContainer(Application)._package.convertPackageToPath() .concat('/managedBeans/')).concat('RoleBean.java'),false,'UTF-8')]

package [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.managedBeans')/];
 
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import org.primefaces.model.DualListModel;

import  [packageName.concat('.exception')/].BDException;
import [packageName/].persistance.Privilege;
import [packageName/].persistance.Role;
import [packageName/].service.PrivilegeService;
import [packageName/].service.RoleService;

@SessionScoped
@ManagedBean
public class RoleBean {
 
 
	@ManagedProperty( value = "#{privilegeServiceImplement}")
	   private        PrivilegeService privilegeService;
	
	@ManagedProperty( value = "#{roleServiceImplement}")
	   private        RoleService roleService;
	
	   private Role role = new Role();
	   private List<Role> roles           = new ArrayList<Role>();
       private  Set <Privilege> privileges          = new HashSet<Privilege>();
       private Set<Privilege> privilegesRole    = new HashSet<Privilege>();
	   private  Privilege privilege; 
	   private  Boolean form;
	   private Set<Privilege>  privilegesNonAffectes = new HashSet<Privilege>();
	   private Set<Privilege>  privilegesAffectes ;
	   private DualListModel<Privilege> privilegesDualList = new DualListModel<Privilege>();
      private Role roleToUpdate = new Role();
      private  Boolean updateRole=  false ;
	
	 public String doCreate(){
		 try {
			
			 roleService.createRole(role);
			 init();
			 FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Successfully done") );
				return null;
		} catch (Exception e) {
			e.printStackTrace();
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("something went wrong please try again") );
		}
		
		return null;
		}
	 
	 @PostConstruct
	    public void init()
	 {
		 form = false;
		 role = new Role();
		 roles= (List<Role>) roleService.findAll();
 
		 for(Privilege p : privilegeService .findAll())
		 {
			 privileges.add(p) ;
		 }
		 privilegesRole=  role.getPrivileges();
		 
	 }
	 
  
	public String initialiser() {
			form = true;
			role= new Role();
			return null;
		}
	
 
	 public String doDelete(Role role) {
		 try {
			 roleService.deleteRole(role);
			 init();
			 FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Successfully done") );
			
		} catch (Exception e) {
			e.printStackTrace();
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("something went wrong please try again") );
		}
			
		 return null;
	}
	 
	 
	 
	 
	 
	 
	 public String doUpdate(Role role) {
		 try {
			 roleService.createRole(role);
				init();
				FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Successfully done") );
		} catch (Exception e) {
			e.printStackTrace();
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("something went wrong please try again") );
		}
		
			return null;
		}

	 
	 
		public void initPickList(Role role)
		
		{
	    updateRole=true ;
		roleToUpdate =role;
		
		Set <Privilege> rolePrivs  = role.privilegesFils() ;
		Set<Privilege>allPrivs=   new HashSet<Privilege>() ;
		for(Privilege p:privilegeService.findPrivilegeFils())  allPrivs.add(p) ;

		allPrivs.removeAll(rolePrivs) ;
		System.out.println(allPrivs);
		
		List<Privilege> source = new ArrayList<Privilege>() ;
	    List<Privilege> target = new ArrayList<Privilege>() ;
	    
		for(Privilege p:allPrivs) source.add(p) ;
		for(Privilege p:rolePrivs) target.add(p) ;
		
 
		
        privilegesDualList=new DualListModel<Privilege>(source, target) ;
        
	    }
		
	 
		 
		 
		 public  void doAssignPrivilegesToRole(Role role)
		 {
			 Set  <Privilege> rolePrivileges =new HashSet<Privilege>();
			
			 for(Privilege p :privilegesDualList.getTarget())
			 {
				 rolePrivileges.add(p);
			 }
		
			 for(Privilege p :privilegesDualList.getSource())
			 {
				 rolePrivileges.remove(p) ;
			 }
			 
			 Set  <Privilege> rolePrivileges2 =new HashSet<Privilege>();
			 
 			 for(Privilege p : rolePrivileges)
 			 {
 				 rolePrivileges2.add(p.getPrivilegeSup()) ;
 			 }
 			 rolePrivileges2.addAll(rolePrivileges) ;
 			 role.setPrivileges(rolePrivileges2);
			 try {
				roleService.updateRole(role) ;
			} catch (BDException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			 updateRole=false ;
		 }
	 
 
	 public String doGet(Role role)
	 {
		 role= getRole();
		 roleToUpdate=role ;
		return null;
	}

	public Set<Privilege> getPrivileges()
	{
		return privileges;
	}

	public void setPrivileges(Set<Privilege> privileges) 
	{
		this.privileges = privileges;
	}

	public Set<Privilege> getPrivilegesRole() {
		return privilegesRole;
	}

	public void setPrivilegesRole(Set<Privilege> privilegesRole) {
		this.privilegesRole = privilegesRole;
	}
	

	
	public Boolean getForm() {
		return form;
	}

	public void setForm(Boolean form) {
		this.form = form;
	}

	public List<Role> getRoles() {
		return roles;
	}

	public void setRoles(List<Role> roles) {
		this.roles = roles;
	}

	public Privilege getPrivilege() {
		return privilege;
	}

	public void setPrivilege(Privilege privilege) {
		this.privilege = privilege;
	}
 
	public Role getRole() {
		return role;
	}
  
	public void setRole(Role role)
	{
		this.role = role;
	}

	public RoleService getRoleService() {
		return roleService;
	}

	public void setRoleService(RoleService roleService) {
		this.roleService = roleService;
	}

	public PrivilegeService getPrivilegeService() {
		return privilegeService;
	}

	public void setPrivilegeService(PrivilegeService privilegeService) {
		this.privilegeService = privilegeService;
	}

	public DualListModel<Privilege> getPrivilegesDualList() {
		return privilegesDualList;
	}

	public void setPrivilegesDualList(DualListModel<Privilege> privilegesDualList) {
		this.privilegesDualList = privilegesDualList;
	}

	public Set<Privilege> getPrivilegesNonAffectes() {
		return privilegesNonAffectes;
	}

	public void setPrivilegesNonAffectes(Set<Privilege> privilegesNonAffectes) {
		this.privilegesNonAffectes = privilegesNonAffectes;
	}

	public Set<Privilege> getPrivilegesAffectes() {
		return privilegesAffectes;
	}

	public void setPrivilegesAffectes(Set<Privilege> privilegesAffectes) {
		this.privilegesAffectes = privilegesAffectes;
	}

	public Role getRoleToUpdate() {
		return roleToUpdate;
	}

	public void setRoleToUpdate(Role roleToUpdate) {
		this.roleToUpdate = roleToUpdate;
	}

	public Boolean getUpdateRole() {
		return updateRole;
	}

	public void setUpdateRole(Boolean updateRole) {
		this.updateRole = updateRole;
	}
	
	
	 }


[/file]
[/template]
