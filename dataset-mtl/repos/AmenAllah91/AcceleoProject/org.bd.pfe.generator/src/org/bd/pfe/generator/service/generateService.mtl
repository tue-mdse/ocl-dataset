[comment encoding = UTF-8 /]
[module generateService('http://www.businessdecision.fr/Generator')]
[import org::bd::pfe::generator::persistance::packagePath /]
[import org::bd::pfe::generator::service::generateServicePermission /]
[import org::bd::pfe::generator::service::generateServicePrivilege /]
[import org::bd::pfe::generator::service::generateServiceRole /]

[template public generateService(persistance :PersistanceObject){packageName : String = persistance.eContainer(Application)._package;}]

[file(persistance.eContainer(Application).name.concat('-service/src/main/java/').concat(packageName.convertPackageToPath() .concat('/service/')).concat(persistance.name.toUpperFirst().concat('Service.java')),false,'UTF-8')]
package [packageName.concat('.service')/];
import java.util.List;

import [packageName.concat('.persistance')/].*;
import [packageName.concat('.exception')/].BDException;

[if(persistance.isAuthentification)]
import [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.persistance')/].PasswordResetToken;
import [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.persistance')/].VerificationToken;
[/if]

/**
 * The Interface  [persistance.name.toUpperFirst().concat('Service')/] .
 *
 * @author Business & Decision
 *
 */
public interface [persistance.name.toUpperFirst().concat('Service')/]{

         /**
         *
         * This method populates our database with a new record of [persistance.name.toLowerFirst()/].
         * @param [persistance.name.toLowerFirst()/] the instance of [persistance.name.toUpperFirst()/] to be recorded.
         * @return indicates whether the create method succeds or fails.
         */ 

	     Boolean create[persistance.name.toUpperFirst()/]([persistance.name.toUpperFirst()/] [persistance.name.toLowerFirst()/])throws  BDException;

         /**
         *
         * This method updates existing data [persistance.name.toLowerFirst()/].
         * @param [persistance.name.toLowerFirst()/] the record of [persistance.name.toUpperFirst()/] to be updated.
         * @return indicates whether the update method succeds or fails.
         */
	     Boolean update[persistance.name.toUpperFirst()/]([persistance.name.toUpperFirst()/] [persistance.name.toLowerFirst()/])throws  BDException;
         
         /**
         *
         * This method removes data [persistance.name.toLowerFirst()/] from the database.
         * @param [persistance.name.toLowerFirst()/] the record of [persistance.name.toUpperFirst()/] to be removed.
         * @return indicates whether the delete method succeds or fails
         */
	     Boolean delete[persistance.name.toUpperFirst()/]([persistance.name.toUpperFirst()/] [persistance.name.toLowerFirst()/])throws  BDException;
        
         /**
         *
         * This method returns all the exsisting records of [persistance.name.toLowerFirst()/] from the database.
         * @return the list of the existing records of [persistance.name.toLowerFirst()/]  
         */
	     List<[persistance.name.toUpperFirst()/]> findAll(); 

         /**
         *
         * This method returns the one record of [persistance.name.toLowerFirst()/] by ID.
         * @param id 
		 * @return the record of [persistance.name.toUpperFirst()/] having the id value retrieved from the database.
         */
	     [persistance.name.toUpperFirst()/] find[persistance.name.toUpperFirst()/]ById (Long id)throws  BDException; 
         

         [if(persistance.isAuthentification)]
         /**
         *
         * This method returns the one record of [persistance.name.toLowerFirst()/] by lOGIN.
         * @param login
		 * @return the record of [persistance.name.toUpperFirst()/] having the login value retrieved from the database.
         */
         public [persistance.name.toUpperFirst()/] find[persistance.name.toUpperFirst()/]ByLogin(String login) ;
	   
     
	    /**
         *
         * This method returns the one record of [persistance.name.toLowerFirst()/] by Email.
         * @param email
		 * @return the record of [persistance.name.toUpperFirst()/] having the email value retrieved from the database.
         *
	     public [persistance.name.toUpperFirst()/] find[persistance.name.toUpperFirst()/]ByEmail(String email);
         
         /**
         *
         * This method retrieves the one record of [persistance.name.toUpperFirst()/] which verification token is the method parameter verificationToken from the database  
         * @param verificationToken
		 * @return the one record of [persistance.name.toUpperFirst()/] retrieved from the database. 
         */
	     [persistance.name.toUpperFirst()/] get[persistance.name.toUpperFirst()/](String verificationToken);

         /**
         *
         * This method creates a new instance of VerificationToken to be affected to [persistance.name.toUpperFirst()/]. 
         * @param [persistance.name.toLowerFirst()/]
		 * @param token
         */
	     void createVerificationTokenFor[persistance.name.toUpperFirst()/] ([persistance.name.toUpperFirst()/] [persistance.name.toLowerFirst()/], String token);
	     
         /**
         *
         * This method retrieves the VerificationToken record which token value equals the method parameter. 
         * @param verificationToken the value of the token property
		 * @return the VerificationToken record retrieved from the database.
         */
         VerificationToken getVerificationToken(String verificationToken);
	  
         /**
         *
         * This method creates a new instance of PasswordResetToken to be affected to [persistance.name.toUpperFirst()/]. 
         * @param [persistance.name.toLowerFirst()/].
		 * @param token.
         *
         */
	     void createPasswordResetTokenForUser([persistance.name.toUpperFirst()/] [persistance.name.toLowerFirst()/], String token);
	     
  
	     /**
         *
         * This method returns user based on user 's email. 
         * @param email.
		 * @return indicates if the method succeeds or fails.
         */
	     public [persistance.name.toUpperFirst()/] find[persistance.name.toUpperFirst()/]ByEmail(String email);
	     

         /**
         * 
	     * This method retrieves the PasswordResetToken record which token value equals the method parameter. 
         * @param token the value of the token property.
         * @return the PasswordResetToken record retrieved from the database. 
		 *
         */ 
         PasswordResetToken getPasswordResetToken(String token);
	     
         /**
         *
         * This method retrieves the [persistance.name.toUpperFirst()/] which password reset token value equals the method parameter.
         * @param token.
		 * @return the one record of [persistance.name.toUpperFirst()/] retrieved from the database.
         */
         [persistance.name.toUpperFirst()/] get[persistance.name.toUpperFirst()/]ByPasswordResetToken(String token);
	     
         /**
         *
         * This method changes the [persistance.name.toUpperFirst()/]'s password.
         * @param [persistance.name.toLowerFirst()/].
	     * @param password.
         */
        void change[persistance.name.toUpperFirst()/]Password([persistance.name.toUpperFirst()/] [persistance.name.toLowerFirst()/], String password);
         
         /**
         *
         * This method checks if the password of the [persistance.name.toLowerFirst()/] requesting a password change is authentic. 
         * @param [persistance.name.toLowerFirst()/].
		 * @param password.
		 * @return indicates if the method succeeds or fails.
         */
	     Boolean checkIfValidOldPassword([persistance.name.toUpperFirst()/] [persistance.name.toLowerFirst()/], String password);
         [/if]
		//[protected (' : you can write your own code')]
			
		//[/protected]
}
[/file]
[/template]
[template public generateServiceAssociation(classe :AssociationClass){packageName : String = classe.eContainer(Application)._package;}]

[file(classe.eContainer(Application).name.concat('-service/src/main/java/').concat(packageName.convertPackageToPath() .concat('/service/')).concat(classe.name.toUpperFirst().concat('Service.java')),false,'UTF-8')]
package [packageName.concat('.service')/];
import [packageName .concat('.persistance')/].[classe.name/];
import [packageName.concat('.exception')/].BDException;
import java.util.List;


public interface [classe.name.toUpperFirst().concat('Service')/]{

		/**
         *
         * This method populates our database with a new record of [classe.name.toLowerFirst()/].
         * @param [classe.name.toLowerFirst()/] the instance of [classe.name.toUpperFirst()/] to be recorded.
         * @return indicates whether the create method succeds or fails.
         */ 
	     Boolean create[classe.name.toUpperFirst()/]([classe.name.toUpperFirst()/] [classe.name.toLowerFirst()/])throws  BDException;

		/**
         *
         * This method updates existing data [classe.name.toLowerFirst()/].
         * @param [classe.name.toLowerFirst()/] the record of [classe.name.toUpperFirst()/] to be updated.
         * @return indicates whether the update method succeds or fails.
         */
	     Boolean update[classe.name.toUpperFirst()/]([classe.name.toUpperFirst()/] [classe.name.toLowerFirst()/])throws  BDException;
		
		/**
         *
         * This method removes data [classe.name.toLowerFirst()/] from the database.
         * @param [classe.name.toLowerFirst()/] the record of [classe.name.toUpperFirst()/] to be removed.
         * @return indicates whether the delete method succeds or fails
         */
	     Boolean delete[classe.name.toUpperFirst()/]([classe.name.toUpperFirst()/] [classe.name.toLowerFirst()/]);

		/**
         *
         * This method returns all the exsisting records of [classe.name.toLowerFirst()/] from the database.
         * @return the list of the existing records of [classe.name.toLowerFirst()/]  
         */
	     List<[classe.name.toUpperFirst()/]> findAll(); 

		/**
         *
         * This method returns the one record of [classe.name.toLowerFirst()/] by ID.
         * @param id 
		 * @return the record of [classe.name.toUpperFirst()/] having the id value retrieved from the database.
         */
	     [classe.name.toUpperFirst()/] find[classe.name.toUpperFirst()/]ById (Long id)throws  BDException; 



         //[protected (' : you can write your own code')]
			
		//[/protected]
}
[/file]
[/template]

