[comment encoding = UTF-8 /]
[module generateServiceRole('http://www.businessdecision.fr/Generator')]
[import org::bd::pfe::generator::persistance::packagePath /]

[template public generateServiceRole(persistance :PersistanceObject){packageName : String = persistance.eContainer(Application)._package;}]

[file(persistance.eContainer(Application).name.concat('-service/src/main/java/').concat(packageName.convertPackageToPath().concat('/service/')).concat('RoleService.java'),false,'UTF-8')]
package [packageName.concat('.service')/];
import java.util.List;
import [packageName.concat('.persistance').concat('.Role')/];
import [packageName.concat('.persistance').concat('.Privilege')/];
import [packageName.concat('.exception')/].BDException;

/**
 * The Interface   RoleService .
 *
 * @author Business & Decision
 *
 */
public interface RoleService {

         /**
         *
         * This method populates our database with a new record of role.
         * @param role the instance of Role to be recorded.
         * @return indicates whether the create method succeds or fails.
         */ 
         Boolean createRole(Role role)throws  BDException;

         /**
         *
         * This method updates existing data role.
         * @param privilege the record of Role to be updated.
         * @return indicates whether the update method succeds or fails.
         */
	     Boolean updateRole(Role role)throws  BDException;

        /**
         *
         * This method removes data privilege from the database.
         * @param privilege the record of Privilege to be removed.
         * @return indicates whether the delete method succeds or fails
         */
	     Boolean deleteRole(Role role)throws  BDException;
         
         /**
         *
         * This method returns all the exsisting records of roles from the database.
         * @return the list of the existing records of privilege. 
         */

	     List<Role> findAll(); 
         
         /**
         *
         * This method returns the one record of permission by ID.
         * @param id 
		 * @return the record of Permission having the id value retrieved from the database.
         */

	     Role findRoleById (Long id)throws  BDException;
 
         /**
         *
         * This method returns the one record of permission by role.
         * @param role 
		 * @return the record of Permission having the id value retrieved from the database.
         */
         Role  findRoleByRole(String role) ;
         
         /**
         *
         * This method asseign privilege to role.
         * @param role 
         * @param privilege
		 *  @return indicates whether the asseign method succeds or fails..
         */
	     Boolean asseignPrivilegeToRole(Role role,Privilege privilege);
         

         
        //[protected (' : you can write your own code')]
			
		//[/protected]
}
[/file]
[/template]
