[comment encoding = UTF-8 /]
[module securityConfig('http://www.businessdecision.fr/Generator')]
[import org::bd::pfe::generator::persistance::packagePath /]

[template public generateSecurityConfig(anApplication : Application) {packageName : String = anApplication._package;}]
[file ('/pfe-web/src/main/java/'.concat(anApplication._package.convertPackageToPath().concat('/securityConfiguration/')).concat( 'SecurityConfig.java'), false, 'utf-8')]
package [packageName/].securityConfiguration;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;

import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;




@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	private CustomSuccessHandler customSuccessHandler;
	
 	@Autowired
    UserDetailsService userDetailsService;
 
 	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception { 
		auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder()) ; 
	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.csrf().disable()
		.authorizeRequests()
       
        .antMatchers("/securePages/**").authenticated()   
		.and()
		.formLogin()
 		.loginPage("/public/login.jsf")
 		.successHandler(customSuccessHandler)
		.loginProcessingUrl("/j_spring_security_check")
 		.usernameParameter("username")
 		.passwordParameter("password") 
		.permitAll()
        .and()
		.logout()
		.invalidateHttpSession(true).logoutUrl("/j_spring_security_logout")
		.logoutSuccessUrl("/public/login.jsf?logout")
		.deleteCookies("JSESSIONID")
		.permitAll();
	 }
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		PasswordEncoder encoder = new BCryptPasswordEncoder();
		return encoder;
	}
}
[/file]
[/template]