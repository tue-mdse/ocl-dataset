[
  {
    "operations": {
      "<>": 1,
      "size": 1
    },
    "body": "Set {getDatatypeByProperty(aProperty)}->size().<>(0)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "size": 1
    },
    "body": "Set {aProperty.association}->size().<>(0)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["association"]
  },
  {
    "operations": {},
    "body": "aProperty.name",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getValue": 6,
      "or": 5,
      "toString": 6,
      "equalsIgnoreCase": 6
    },
    "body": "if getDatatypeByProperty(aProperty).getValue(getStereotype(getDatatypeByProperty(aProperty),'text'), 'mandatory').toString().equalsIgnoreCase('true').or(getDatatypeByProperty(aProperty).getValue(getStereotype(getDatatypeByProperty(aProperty),'real'), 'mandatory').toString().equalsIgnoreCase('true')).or(getDatatypeByProperty(aProperty).getValue(getStereotype(getDatatypeByProperty(aProperty),'integer'), 'mandatory').toString().equalsIgnoreCase('true')).or(getDatatypeByProperty(aProperty).getValue(getStereotype(getDatatypeByProperty(aProperty),'time'), 'mandatory').toString().equalsIgnoreCase('true')).or(getDatatypeByProperty(aProperty).getValue(getStereotype(getDatatypeByProperty(aProperty),'date'), 'mandatory').toString().equalsIgnoreCase('true')).or(getDatatypeByProperty(aProperty).getValue(getStereotype(getDatatypeByProperty(aProperty),'enumerate'), 'mandatory').toString().equalsIgnoreCase('true')) then false else true endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 12,
      "OperationCallExpImpl": 23,
      "QueryInvocationSpec": 18,
      "StringLiteralExpImpl": 18,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "aClass.attribute->select(temp1 : Property | isMandatoryProperty(temp1))->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["attribute"]
  },
  {
    "operations": {
      "getValue": 2,
      "toString": 2,
      "equalsIgnoreCase": 2
    },
    "body": "if hasStereotype(aClass,'feature') then if aClass.getValue(getStereotype(aClass,'feature'), 'tableName').toString().equalsIgnoreCase('null') then false else if aClass.getValue(getStereotype(aClass,'feature'), 'tableName').toString().equalsIgnoreCase('invalid') then false else true endif endif else true endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 6,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 7,
      "IfExpImpl": 3,
      "BooleanLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "if generateSchemaName(aPackage).toString().equalsIgnoreCase('') then false else true endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "getValue": 2,
      "toString": 2,
      "equalsIgnoreCase": 2
    },
    "body": "if hasStereotype(aClass,'feature_part') then if aClass.getValue(getStereotype(aClass,'feature_part'), 'tableName').toString().equalsIgnoreCase('null') then false else if aClass.getValue(getStereotype(aClass,'feature_part'), 'tableName').toString().equalsIgnoreCase('invalid') then false else true endif endif else true endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 7,
      "IfExpImpl": 3,
      "BooleanLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "if aProperty.isComposite then if isObjectClass(getDestinationClass(aProperty,getAssociation(aProperty))) then true else false endif else false endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 3,
      "IfExpImpl": 2,
      "BooleanLiteralExpImpl": 3,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isComposite"]
  },
  {
    "operations": {
      "getValue": 1,
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "if hasStereotype(aClass,'enumerate') then if aClass.getValue(getStereotype(aClass,'enumerate'), 'asString').toString().equalsIgnoreCase('true') then true else false endif else false endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 2,
      "BooleanLiteralExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {
      "contains": 1,
      "toString": 3,
      "equalsIgnoreCase": 1,
      "getAssociations": 1,
      "oclAsType": 1,
      "first": 1,
      "tokenize": 1,
      "asSequence": 1
    },
    "body": "aClass.getAssociations()->collect(temp1 : Association | temp1.endType)->collect(temp2 : Type | temp2.oclAsType(uml::Class))->collect(temp3 : Class | temp3.attribute)->collect(temp4 : Property | temp4.aggregation)->asSequence()->collect(temp5 : AggregationKind | temp5.toString())->collect(temp6 : String | temp6.contains('shared'))->collect(temp7 : Boolean | temp7.toString())->collect(temp8 : String | temp8.tokenize('false'))->first().toString().equalsIgnoreCase('tru')",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 8,
      "VariableExpImpl": 9,
      "OperationCallExpImpl": 10,
      "StringLiteralExpImpl": 3,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "endType",
      "aggregation",
      "attribute"
    ]
  },
  {
    "operations": {},
    "body": "if isEmbedded(aProperty) then if isShared(getDestinationClass(aProperty,getAssociation(aProperty))) then true else false endif else false endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 4,
      "IfExpImpl": 2,
      "BooleanLiteralExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {
      "eContainer": 1,
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "generateSchemaAutitable(aClass.eContainer(uml::Package)).toString().equalsIgnoreCase('true')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "eContainer": 1,
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "generateSchemaHistory(aClass.eContainer(uml::Package)).toString().equalsIgnoreCase('true')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getAllAttributes": 1,
      "asOrderedSet": 1
    },
    "body": "aClass.getAllAttributes()->asOrderedSet()->sortedBy(temp1 : Property | temp1.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  }
]
