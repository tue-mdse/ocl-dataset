[
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('moreco.service.UML2Service', 'hasStereotype(org.eclipse.uml2.uml.Element, java.lang.String)', Sequence {arg0, arg1})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('moreco.service.UML2Service', 'toPath(org.eclipse.uml2.uml.Namespace)', Sequence {arg0})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('moreco.service.UML2Service', 'convertToMultiLineString(java.lang.String)', Sequence {arg0})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('moreco.service.UML2Service', 'getRealParameters(org.eclipse.uml2.uml.Operation)', Sequence {arg0})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "class.ownedOperation->collect(temp1 : Operation | temp1.ownedParameter)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedOperation",
      "ownedParameter"
    ]
  },
  {
    "operations": {
      "filter": 1,
      "not": 8,
      "and": 7,
      "asOrderedSet": 1,
      "endsWith": 7,
      "asSequence": 1,
      "startsWith": 1
    },
    "body": "operationsParameters(class)->collect(temp1 : Parameter | temp1.type)->filter(uml::Classifier)->select(temp2 : Classifier | temp2.name.endsWith('String').not().and(temp2.name.endsWith('Integer').not()).and(temp2.name.endsWith('Float').not()).and(temp2.name.endsWith('Long').not()).and(temp2.name.endsWith('Double').not()).and(temp2.name.endsWith('Boolean').not()).and(temp2.name.startsWith('byte').not()).and(temp2.name.endsWith('Object').not()))->asOrderedSet()->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 26,
      "VariableExpImpl": 10,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 8,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 9
    },
    "properties": [
      "name",
      "type"
    ]
  }
]
