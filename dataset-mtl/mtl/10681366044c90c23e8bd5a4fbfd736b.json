[
  {
    "operations": {
      "or": 10,
      "size": 1,
      ">": 1
    },
    "body": "if call.arguments->size().>(0) then true else let callName : String = call.name in isEObjectService(callName).or(isRequestService(callName)).or(isResourceService(callName)).or(isStringService(callName)).or(isSystemService(callName)).or(isXPathService(callName)).or(isENodeService(call)).or(isContextService(callName)).or(isPropertiesService(callName)).or(isScriptCall(call)).or(isServiceCall(call)) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 13,
      "OperationCallExpImpl": 12,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 11,
      "IntegerLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "arguments",
      "name"
    ]
  },
  {
    "operations": {
      "last": 1,
      "includes": 1,
      "ancestors": 1
    },
    "body": "allScripts(call.ancestors()->last())->collect(temp1 : Script | temp1.descriptor.name)->includes(call.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "descriptor",
      "name"
    ]
  },
  {
    "operations": {
      "last": 1,
      "includes": 1,
      "ancestors": 1
    },
    "body": "allMethods(call.ancestors()->last())->collect(temp1 : Method | temp1.name)->includes(call.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "name"
    ]
  },
  {
    "operations": {
      "last": 1,
      "ancestors": 1,
      "asSet": 1,
      "=": 1
    },
    "body": "allMethods(call.ancestors()->last())->select(temp1 : Method | temp1.name.=(call.name))->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "name"
    ]
  },
  {
    "operations": {"eAllContents": 1},
    "body": "root.eAllContents(mt::core::Script)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "root.eAllContents(mt::core::Method)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 3},
    "body": "method.name.concat('(').concat(parametersSignature(self)).concat(')')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "concat": 1,
      "oclAsType": 1,
      "sep": 1
    },
    "body": "let parameters : Sequence(String) = method.parameters->collect(temp1 : Parameter | temp1.type)->sep(', ')->collect(temp2 : OclAny | temp2.oclAsType(oclstdlib::String)) in parameters->iterate(param : String; res : String = '' | res.concat(param))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 3,
      "LetExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 1,
      "IterateExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "parameters",
      "type"
    ]
  },
  {
    "operations": {"includes": 1},
    "body": "let serviceNames : Sequence(String) = Sequence {'eAllContents', 'eClass', 'eContainer', 'eContainingFeature', 'eContainmentFeature', 'eContents', 'eCrossReferences', 'eResource', 'eResourceName', 'getRootContainer', 'load'} in serviceNames->includes(callName)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "LetExpImpl": 1,
      "StringLiteralExpImpl": 11,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"includes": 1},
    "body": "let serviceNames : Sequence(String) = Sequence {'select', 'delete', 'evaluate'} in serviceNames->includes(callName)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "LetExpImpl": 1,
      "StringLiteralExpImpl": 3,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"includes": 1},
    "body": "let serviceNames : Sequence(String) = Sequence {'getFileContent', 'getChainPath'} in serviceNames->includes(callName)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "LetExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"includes": 1},
    "body": "let serviceNames : Sequence(String) = Sequence {'length', 'toUpperCase', 'toLowerCase', 'toU1Case', 'toL1Case', 'substring', 'replaceAll', 'replaceFirst', 'trim', 'startsWith', 'endsWith', 'equalsIgnoreCase', 'matches', 'charAt', 'indexOf', 'lastIndexOf', 'split', 'indentSpace', 'indentTab'} in serviceNames->includes(callName)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "LetExpImpl": 1,
      "StringLiteralExpImpl": 19,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"includes": 1},
    "body": "let serviceNames : Sequence(String) = Sequence {'i', 'args'} in serviceNames->includes(callName)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "LetExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"includes": 1},
    "body": "let serviceNames : Sequence(String) = Sequence {'ancestor', 'parent', 'self', 'child', 'descendant', 'precedingSibling', 'preceding', 'followingSibling', 'following'} in serviceNames->includes(callName)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "LetExpImpl": 1,
      "StringLiteralExpImpl": 9,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "and": 1,
      "isEmpty": 1,
      "includes": 2
    },
    "body": "let serviceNamesNoArg : Sequence(String) = Sequence {'current', 'debug', 'trace', 'nPut', 'nPeek', 'nPop', 'nPush', 'nMinimize', 'minimize', 'nFirst', 'nLast', 'nReverse', 'reverse', 'nSize', 'nSort', 'sort', 'sep', 'sepStr', 'toString'} in let serviceNamesArg : Sequence(String) = Sequence {'adapt', 'cast', 'filter', 'nContains', 'nGet', 'sep', 'sepStr', 'until'} in if serviceNamesNoArg->includes(call.name) then true else if serviceNamesArg->includes(call.name).and(call.arguments->isEmpty().not()) then true else false endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 5,
      "LetExpImpl": 2,
      "StringLiteralExpImpl": 27,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 3,
      "BooleanLiteralExpImpl": 3
    },
    "properties": [
      "arguments",
      "name"
    ]
  },
  {
    "operations": {"includes": 1},
    "body": "let serviceNames : Sequence(String) = Sequence {'adapt', 'cast', 'filter', 'current', 'debug', 'trace', 'nPut', 'nGet', 'nPeek', 'nPop', 'nPush', 'nMinimize', 'minimize', 'nContains', 'nFirst', 'nLast', 'nReverse', 'reverse', 'nSize', 'nSort', 'sort', 'sep', 'sepStr', 'toString', 'until'} in serviceNames->includes(callName)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "LetExpImpl": 1,
      "StringLiteralExpImpl": 25,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"includes": 1},
    "body": "let serviceNames : Sequence(String) = Sequence {'get', 'peek', 'pop', 'push', 'put'} in serviceNames->includes(callName)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "LetExpImpl": 1,
      "StringLiteralExpImpl": 5,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"includes": 1},
    "body": "let serviceNames : Sequence(String) = Sequence {'getBestProperty', 'getProperty'} in serviceNames->includes(callName)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "LetExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  }
]
