[
  {
    "operations": {"=": 1},
    "body": "if impl.=(false) then '= 0' else '' endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "if feature.eType.name.=('EBoolean') then 'is' else 'get' endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "eType",
      "name"
    ]
  },
  {
    "operations": {
      "notEmpty": 1,
      "=": 1
    },
    "body": "self.eAnnotations->select(temp1 : EAnnotation | temp1.source.=('http://sse.tu-ilmenau.de/codegen'))->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "source",
      "eAnnotations"
    ]
  },
  {
    "operations": {
      "=": 1,
      "first": 1
    },
    "body": "self.eAnnotations->select(temp1 : EAnnotation | temp1.source.=('http://sse.tu-ilmenau.de/codegen'))->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "source",
      "eAnnotations"
    ]
  },
  {
    "operations": {
      "notEmpty": 1,
      "=": 1
    },
    "body": "if hasSourceGen(aModelElement) then SourceGen(aModelElement).details->select(temp1 : EStringToStringMapEntry | temp1.key.=(aKey))->notEmpty() else false endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "details",
      "key"
    ]
  },
  {
    "operations": {
      "=": 1,
      "first": 1
    },
    "body": "SourceGen(aModelElement).details->select(temp1 : EStringToStringMapEntry | temp1.key.=(aKey))->first().value",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "value",
      "details",
      "key"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "if hasKey(aModelElement,'implOnly') then valueKey(aModelElement,'implOnly').=('true') else false endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "if hasKey(aModelElement,'implSetterOnly') then valueKey(aModelElement,'implSetterOnly').=('true') else false endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "if hasKey(self,'SetterName') then valueKey(self,'SetterName') else 'set'.concat(self.name.toUpperFirst()) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "if hasKey(self,'GetterName') then valueKey(self,'GetterName') else getterPrefix(self).concat(self.name.toUpperFirst()) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "concat": 2
    },
    "body": "if self.oclIsUndefined() then 'nullptr' else getterPrefix(self).concat(memberName(self)).concat('()') endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "'get'.concat(memberName(self)).concat('()')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "indexOf": 1,
      "-": 1,
      "asSequence": 1
    },
    "body": "self.eContainingClass.eAttributes->asSequence()->indexOf(aAttribute).-(1)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "eAttributes",
      "eContainingClass"
    ]
  },
  {
    "operations": {
      "size": 1,
      "+": 1,
      "-": 1,
      "indexOf": 1,
      "asSequence": 1
    },
    "body": "self.eContainingClass.eReferences->asSequence()->indexOf(aReference).+(self.eContainingClass.eAttributes->size()).-(1)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "eReferences",
      "eAttributes",
      "eContainingClass"
    ]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 2
    },
    "body": "self.eContainingClass.name.concat('_'.concat(aStructural.name.toUpperFirst()))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "eContainingClass"
    ]
  },
  {
    "operations": {"toUpperCase": 1},
    "body": "memberName(self).toUpperCase()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 2,
      "concat": 4,
      "=": 1
    },
    "body": "if aStructural.eContainingClass.ePackage.=(aClass.ePackage) then aStructural.eContainingClass.ePackage.name.concat('Package').toUpperFirst() else aStructural.eContainingClass.ePackage.name.concat('::').concat(aStructural.eContainingClass.ePackage.name.concat('Package').toUpperFirst()) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 7,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 12
    },
    "properties": [
      "name",
      "ePackage",
      "eContainingClass"
    ]
  },
  {
    "operations": {},
    "body": "packageGetter(aEClassifier,aStruct.eContainingClass)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["eContainingClass"]
  },
  {
    "operations": {"oclAsType": 2},
    "body": "packageGetter(supertype.oclAsType(ecore::EClassifier),aEClass.oclAsType(ecore::EClassifier))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"concat": 3},
    "body": "needMetaModelPackageGetter(aEClassifier1,aEClassifier2).concat('get').concat(aEClassifier1.name).concat('()')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 4,
      "=": 1
    },
    "body": "if aClassifier1.ePackage.name.=(aClassifier2.ePackage.name) then '' else aClassifier1.ePackage.nsPrefix.concat('::').concat(aClassifier1.ePackage.name.toUpperFirst()).concat('Package').concat('::eInstance()->') endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 4,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "name",
      "nsPrefix",
      "ePackage"
    ]
  },
  {
    "operations": {
      "concat": 2,
      "=": 1,
      "eClass": 4
    },
    "body": "if aStructuralFeature.eContainingClass.ePackage.=(aStructuralFeature.eClass().ePackage) then generateTypeClass(aStructuralFeature.eClass()) else aStructuralFeature.eClass().ePackage.name.concat('::').concat(generateTypeClass(aStructuralFeature.eClass())) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 7,
      "TemplateInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "name",
      "ePackage",
      "eContainingClass"
    ]
  },
  {
    "operations": {
      "concat": 2,
      "=": 1,
      "eClass": 4
    },
    "body": "if aOperation.eContainingClass.ePackage.=(aOperation.eClass().ePackage) then generateTypeClass(aOperation.eClass()) else aOperation.eClass().ePackage.name.concat('::').concat(generateTypeClass(aOperation.eClass())) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 5,
      "TemplateInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "name",
      "ePackage",
      "eContainingClass"
    ]
  },
  {
    "operations": {
      "concat": 2,
      "=": 1,
      "eClass": 4
    },
    "body": "if aClass.ePackage.=(aClass.eClass().ePackage) then generateTypeClass(aClass.eClass()) else aClass.eClass().ePackage.name.concat('::').concat(generateTypeClass(aClass.eClass())) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 7,
      "TemplateInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "name",
      "ePackage"
    ]
  },
  {
    "operations": {
      "not": 1,
      "concat": 1,
      "=": 1
    },
    "body": "if anPackage.name.=('ecore').not() then 'ecore::'.concat(str) else str endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "concat": 2,
      "=": 1
    },
    "body": "if aClass.ePackage.name.=(base.ePackage.name) then base.name else base.ePackage.name.concat('::').concat(base.name) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 5,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "name",
      "ePackage"
    ]
  },
  {
    "operations": {},
    "body": "namedelement",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "''",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "eContainer": 1,
      "not": 1,
      "oclIsUndefined": 1
    },
    "body": "namedelement.eContainer().oclIsUndefined().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperCase": 1,
      "concat": 2
    },
    "body": "namedelement.name.concat(sufix).concat('_hpp').toUpperCase()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperCase": 1,
      "concat": 2
    },
    "body": "namedelement.name.concat(sufix).concat('_hpp').toUpperCase()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "eContainer": 1,
      "toUpperCase": 1,
      "concat": 4,
      "oclAsType": 1
    },
    "body": "namedelement.eContainer().oclAsType(ecore::EPackage).name.concat('_').concat(namedelement.name).concat(sufix).concat('_hpp').toUpperCase()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "eContainer": 1,
      "toUpperCase": 1,
      "concat": 4,
      "oclAsType": 1
    },
    "body": "namedelement.eContainer().oclAsType(ecore::EPackage).name.concat('_').concat(namedelement.name).concat(sufix).concat('_hpp').toUpperCase()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "namedelement",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "''",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "eContainer": 1,
      "not": 1,
      "oclIsUndefined": 1
    },
    "body": "namedelement.eContainer().oclIsUndefined().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperCase": 1,
      "concat": 2
    },
    "body": "namedelement.name.concat(sufix).concat('_hpp').toUpperCase()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "eContainer": 1,
      "toUpperCase": 1,
      "concat": 4,
      "oclAsType": 1
    },
    "body": "namedelement.eContainer().oclAsType(ecore::EPackage).name.concat('_').concat(namedelement.name).concat(sufix).concat('_hpp').toUpperCase()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "notEmpty": 1,
      "=": 1
    },
    "body": "self.eAnnotations->select(temp1 : EAnnotation | temp1.source.=('http://www.eclipse.org/emf/2002/GenModel'))->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "source",
      "eAnnotations"
    ]
  },
  {
    "operations": {
      "=": 1,
      "first": 1
    },
    "body": "self.eAnnotations->select(temp1 : EAnnotation | temp1.source.=('http://www.eclipse.org/emf/2002/GenModel'))->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "source",
      "eAnnotations"
    ]
  },
  {
    "operations": {
      "notEmpty": 1,
      "=": 1
    },
    "body": "if hasDocumentationnAnnotation(aModelElement) then DocumentationAnnotation(aModelElement).details->select(temp1 : EStringToStringMapEntry | temp1.key.=('documentation'))->notEmpty() else false endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "details",
      "key"
    ]
  },
  {
    "operations": {
      "=": 1,
      "first": 1
    },
    "body": "DocumentationAnnotation(aModelElement).details->select(temp1 : EStringToStringMapEntry | temp1.key.=('documentation'))->first().value",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "value",
      "details",
      "key"
    ]
  },
  {
    "operations": {},
    "body": "hasDocKey(aElement)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aElement",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "notEmpty": 1,
      "=": 1
    },
    "body": "self.eAnnotations->select(temp1 : EAnnotation | temp1.source.=('subsets'))->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "source",
      "eAnnotations"
    ]
  },
  {
    "operations": {
      "=": 1,
      "first": 1
    },
    "body": "self.eAnnotations->select(temp1 : EAnnotation | temp1.source.=('subsets'))->first().references",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "references",
      "source",
      "eAnnotations"
    ]
  },
  {
    "operations": {
      "notEmpty": 1,
      "=": 1
    },
    "body": "self.eAnnotations->select(temp1 : EAnnotation | temp1.source.=('ignore'))->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "source",
      "eAnnotations"
    ]
  },
  {
    "operations": {
      "notEmpty": 1,
      "=": 1
    },
    "body": "self.eAnnotations->select(temp1 : EAnnotation | temp1.source.=('union'))->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "source",
      "eAnnotations"
    ]
  },
  {
    "operations": {"flatten": 1},
    "body": "OrderedSet {getSubsetedUnionsReference(aClass), aClass.eReferences->select(temp1 : EReference | isUnion(temp1))}->flatten()->sortedBy(temp2 : EReference | temp2.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "eReferences"
    ]
  },
  {
    "operations": {
      "not": 2,
      "asOrderedSet": 1,
      "oclAsType": 2
    },
    "body": "aClass.eAllReferences->select(temp1 : EReference | if hasSubset(temp1) then Subset(temp1)->forAll(e : EObject | isUnion(e.oclAsType(ecore::EModelElement)).not()).not() else false endif)->collect(temp2 : EReference | Subset(temp2))->collect(temp3 : EObject | temp3.oclAsType(ecore::EReference))->asOrderedSet()->sortedBy(temp4 : EReference | temp4.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 5,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 7,
      "QueryInvocationSpec": 4,
      "TypeExpImpl": 2,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "eAllReferences",
      "name"
    ]
  },
  {
    "operations": {
      "not": 2,
      "asOrderedSet": 1,
      "=": 1,
      "oclAsType": 2
    },
    "body": "aClass.eAllReferences->select(temp1 : EReference | if hasSubset(temp1) then Subset(temp1)->forAll(e : EObject | e.oclAsType(ecore::EReference).=(union).not()).not() else false endif)->collect(temp2 : EReference | temp2.oclAsType(ecore::EReference))->asOrderedSet()->sortedBy(temp3 : EReference | temp3.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 7,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "eAllReferences",
      "name"
    ]
  }
]
