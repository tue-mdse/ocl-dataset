[
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "trim": 1,
      "concat": 1
    },
    "body": "c.name.concat('.sh').trim()",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"getOwnedMembers": 1},
    "body": "c.getOwnedMembers()",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"toLower": 1},
    "body": "e.name.toLower()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "<>": 1,
      "toLower": 1
    },
    "body": "c.name.toLower().<>('user')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "'/jhipster/'.concat(c.name).concat('.json')",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "size": 1,
      "getAssociations": 1,
      ">": 1
    },
    "body": "c.getAssociations()->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "','",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "navigableProperties",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "<>": 2,
      "and": 4,
      "<": 2,
      "isNavigable": 1,
      "-": 2
    },
    "body": "e.isNavigable().and(e.opposite.upper.<(2).and(e.opposite.upper.<>(1.-()))).and(e.upper.<(2).and(e.upper.<>(1.-())))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 11,
      "VariableExpImpl": 5,
      "IntegerLiteralExpImpl": 4,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "opposite",
      "upper"
    ]
  },
  {
    "operations": {},
    "body": "e",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"indexOf": 1},
    "body": "navigableProperties->indexOf(e)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'one-to-one'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "and": 4,
      "<": 1,
      "isNavigable": 2,
      "=": 1,
      "-": 2,
      ">": 1
    },
    "body": "e.isNavigable().and(e.opposite.upper.>(1).or(e.opposite.upper.=(1.-()))).and(e.upper.<(2).and(e.upper.<>(1.-()))).and(e.isNavigable())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 13,
      "VariableExpImpl": 6,
      "IntegerLiteralExpImpl": 4,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "opposite",
      "upper"
    ]
  },
  {
    "operations": {},
    "body": "e",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"indexOf": 1},
    "body": "navigableProperties->indexOf(e)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'many-to-one'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "and": 4,
      "<": 1,
      "-": 2,
      "isNavigable": 2,
      "=": 1,
      ">": 1
    },
    "body": "e.isNavigable().and(e.opposite.upper.<(2).and(e.opposite.upper.<>(1.-()))).and(e.upper.>(1).or(e.upper.=(1.-()))).and(e.isNavigable())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 13,
      "VariableExpImpl": 6,
      "IntegerLiteralExpImpl": 4,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "opposite",
      "upper"
    ]
  },
  {
    "operations": {},
    "body": "e",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"indexOf": 1},
    "body": "navigableProperties->indexOf(e)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'one-to-many'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "or": 2,
      "and": 3,
      "-": 2,
      "isNavigable": 2,
      "=": 2,
      ">": 2
    },
    "body": "e.isNavigable().and(e.opposite.upper.>(1).or(e.opposite.upper.=(1.-()))).and(e.upper.>(1).or(e.upper.=(1.-()))).and(e.isNavigable())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 13,
      "VariableExpImpl": 6,
      "IntegerLiteralExpImpl": 4,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "opposite",
      "upper"
    ]
  },
  {
    "operations": {},
    "body": "e",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"indexOf": 1},
    "body": "navigableProperties->indexOf(e)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'many-to-many'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'\t,\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c.attribute",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["attribute"]
  },
  {
    "operations": {},
    "body": "e",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "indexOf": 1,
      "asSequence": 1
    },
    "body": "c.attribute->asSequence()->indexOf(e)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["attribute"]
  },
  {
    "operations": {},
    "body": "id",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"toLower": 1},
    "body": "a.name.toLower()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "a.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toLower": 1},
    "body": "a.name.toLower()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toLower": 1},
    "body": "a.type.name.toLower()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "qualifier",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "a.type.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "and": 2,
      "isNavigable": 1,
      "=": 1
    },
    "body": "qualifier.=('one-to-many').and(a.opposite.<>(null)).and(a.opposite.isNavigable())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["opposite"]
  },
  {
    "operations": {
      "not": 1,
      "or": 1,
      "and": 1,
      "=": 2,
      "isNavigable": 1
    },
    "body": "qualifier.=('one-to-many').and(a.opposite.=(null).or(a.opposite.isNavigable().not()))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 3,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["opposite"]
  },
  {
    "operations": {"=": 1},
    "body": "qualifier.=('many-to-one')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 2,
      "<>": 1,
      "isComposite": 2,
      "or": 1,
      "and": 5,
      "isNavigable": 2,
      "=": 2
    },
    "body": "qualifier.=('many-to-many').or(qualifier.=('one-to-one')).and(a.opposite.<>(null).and(a.opposite.isNavigable()).and(a.isNavigable()).and(a.isComposite().not()).and(a.opposite.isComposite().not()))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 15,
      "VariableExpImpl": 7,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": ["opposite"]
  },
  {
    "operations": {"<": 1},
    "body": "a.opposite.name.<(a.name)",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "opposite",
      "name"
    ]
  },
  {
    "operations": {
      "or": 1,
      "and": 1,
      "=": 3
    },
    "body": "qualifier.=('many-to-many').or(qualifier.=('one-to-one')).and(a.opposite.=(null))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 5,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["opposite"]
  },
  {
    "operations": {
      "<>": 1,
      "not": 1,
      "or": 1,
      "and": 2,
      "=": 2,
      "isNavigable": 1
    },
    "body": "qualifier.=('many-to-many').or(qualifier.=('one-to-one')).and(a.opposite.<>(null).and(a.opposite.isNavigable().not()))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["opposite"]
  },
  {
    "operations": {
      "<>": 1,
      "isComposite": 2,
      "or": 2,
      "and": 4,
      "=": 2,
      "isNavigable": 2
    },
    "body": "qualifier.=('many-to-many').or(qualifier.=('one-to-one')).and(a.opposite.<>(null).and(a.opposite.isNavigable()).and(a.isNavigable()).and(a.isComposite().or(a.opposite.isComposite())))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 13,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": ["opposite"]
  },
  {
    "operations": {},
    "body": "a.isComposite",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isComposite"]
  },
  {
    "operations": {
      "or": 1,
      "=": 2
    },
    "body": "qualifier.=('many-to-one').or(qualifier.=('one-to-one'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "id",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"toLower": 1},
    "body": "a.name.toLower()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "toType(a.type.name).trim()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "a.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toLower": 1},
    "body": "a.name.toLower()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('Integer')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "s",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('Boolean')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('ByteArray')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('Date')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('LocalDate')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('Real')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('UnlimitedNatural')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 2,
      "equalsIgnoreCase": 3
    },
    "body": "s.equalsIgnoreCase('Long').or(s.equalsIgnoreCase('String')).or(s.equalsIgnoreCase('Char'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "s",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  }
]
