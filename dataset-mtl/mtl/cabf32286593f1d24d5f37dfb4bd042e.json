[
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "getAllElementLinks(grlSpec,inModel)->collect(temp1 : OclAny | temp1.oclAsType(tGRL::ElementLink))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "elementLink.oclIsTypeOf(tGRL::NormalDecomposition)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "elementLink.oclIsTypeOf(tGRL::NormalContribution)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "=": 1,
      "oclAsType": 1
    },
    "body": "elementLink.oclAsType(tGRL::NormalContribution).src.=(inIntentionalElement)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["src"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementLink.oclAsType(tGRL::NormalContribution).dest",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["dest"]
  },
  {
    "operations": {},
    "body": "end.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "elementLink.oclIsTypeOf(tGRL::NormalDependency)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "=": 1,
      "oclAsType": 1
    },
    "body": "elementLink.oclAsType(tGRL::NormalDependency).src.=(inIntentionalElement)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["src"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementLink.oclAsType(tGRL::NormalDependency).dest",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["dest"]
  },
  {
    "operations": {},
    "body": "end.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementLink.oclAsType(tGRL::NormalDecomposition).dest",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["dest"]
  },
  {
    "operations": {"=": 1},
    "body": "findSuperIntentionalElement(grlSpec,inModel,end.destName).name.=(inIntentionalElement.name)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "destName"
    ]
  },
  {
    "operations": {},
    "body": "end.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "getAllElementLinks(self,inModel)->collect(temp1 : OclAny | temp1.oclAsType(tGRL::ElementLink))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "elementLink.oclIsTypeOf(tGRL::NormalDecomposition)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "elementLink.oclIsTypeOf(tGRL::NormalContribution)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementLink.oclAsType(tGRL::NormalContribution).dest",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["dest"]
  },
  {
    "operations": {"=": 1},
    "body": "findSuperIntentionalElement(grlSpec,inModel,end.destName).name.=(inIntentionalElement.name)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "destName"
    ]
  },
  {
    "operations": {},
    "body": "end.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "elementLink.oclIsTypeOf(tGRL::NormalDependency)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementLink.oclAsType(tGRL::NormalDependency).dest",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["dest"]
  },
  {
    "operations": {"=": 1},
    "body": "findSuperIntentionalElement(grlSpec,inModel,end.destName).name.=(inIntentionalElement.name)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "destName"
    ]
  },
  {
    "operations": {},
    "body": "end.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {
      "oclAsType": 1,
      "=": 1
    },
    "body": "elementLink.oclAsType(tGRL::NormalDecomposition).src.=(inIntentionalElement)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["src"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementLink.oclAsType(tGRL::NormalDecomposition).dest",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["dest"]
  },
  {
    "operations": {},
    "body": "end.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "getAllElementLinks(self,inModel)->collect(temp1 : OclAny | temp1.oclAsType(tGRL::ElementLink))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "elementLink.oclIsTypeOf(tGRL::NormalDecomposition)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "elementLink.oclIsTypeOf(tGRL::NormalContribution)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "=": 1,
      "oclAsType": 1
    },
    "body": "elementLink.oclAsType(tGRL::NormalContribution).src.=(inIntentionalElement)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["src"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementLink.oclAsType(tGRL::NormalContribution).dest",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["dest"]
  },
  {
    "operations": {},
    "body": "end.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "elementLink.oclIsTypeOf(tGRL::NormalDependency)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclAsType": 1,
      "=": 1
    },
    "body": "elementLink.oclAsType(tGRL::NormalDependency).src.=(inIntentionalElement)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["src"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementLink.oclAsType(tGRL::NormalDependency).dest",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["dest"]
  },
  {
    "operations": {},
    "body": "end.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementLink.oclAsType(tGRL::NormalDecomposition).dest",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["dest"]
  },
  {
    "operations": {"=": 1},
    "body": "findSuperIntentionalElement(grlSpec,inModel,end.destName).name.=(inIntentionalElement.name)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "destName"
    ]
  },
  {
    "operations": {},
    "body": "end.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "getAllElementLinks(self,inModel)->collect(temp1 : OclAny | temp1.oclAsType(tGRL::ElementLink))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "elementLink.oclIsTypeOf(tGRL::NormalDecomposition)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "elementLink.oclIsTypeOf(tGRL::NormalContribution)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementLink.oclAsType(tGRL::NormalContribution).dest",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["dest"]
  },
  {
    "operations": {"=": 1},
    "body": "findSuperIntentionalElement(grlSpec,inModel,end.destName).name.=(inIntentionalElement.name)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "destName"
    ]
  },
  {
    "operations": {},
    "body": "end.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "elementLink.oclIsTypeOf(tGRL::NormalDependency)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementLink.oclAsType(tGRL::NormalDependency).dest",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["dest"]
  },
  {
    "operations": {"=": 1},
    "body": "findSuperIntentionalElement(grlSpec,inModel,end.destName).name.=(inIntentionalElement.name)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "destName"
    ]
  },
  {
    "operations": {},
    "body": "end.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {
      "=": 1,
      "oclAsType": 1
    },
    "body": "elementLink.oclAsType(tGRL::NormalDecomposition).src.=(inIntentionalElement)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["src"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementLink.oclAsType(tGRL::NormalDecomposition).dest",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["dest"]
  },
  {
    "operations": {},
    "body": "end.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "self.oclIsKindOf(tGRL::Softgoal)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "self.oclIsKindOf(tGRL::Goal)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "self.oclIsKindOf(tGRL::Task)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "self.oclIsKindOf(tGRL::Indicator)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "self.oclIsKindOf(tGRL::Resource)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "selectByKind": 1,
      "size": 1,
      ">": 1
    },
    "body": "self.elemets->selectByKind(tGRL::SuperIntentionalElement)->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["elemets"]
  },
  {
    "operations": {"selectByKind": 1},
    "body": "self.elemets->selectByKind(tGRL::SuperIntentionalElement)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["elemets"]
  },
  {
    "operations": {},
    "body": "self.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "tGRL::Color.toString().=('white')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('black')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('blue')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('green')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('cyan')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('red')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('purple')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('yellow')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('gray')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('lightGray')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('lightBlue')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('lightGreen')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('lightCray')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('lightRed')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('lightPurple')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('lightYellow')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "tGRL::Color.toString().=('white')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('black')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('blue')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('green')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('cyan')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('red')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('purple')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('yellow')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('gray')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('lightGray')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('lightBlue')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('lightGreen')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('lightCray')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('lightRed')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('lightPurple')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "self.fillColor.toString().=('lightYellow')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["fillColor"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "self.label.=('')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["label"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "self.label.oclAsType(oclstdlib::String)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["label"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "self.name.oclAsType(oclstdlib::String)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "inMetadata",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "self.value.oclAsType(oclstdlib::String)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "getAllQualitativeMappings(grlSpec,inModel)->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "self.strategies->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["strategies"]
  },
  {
    "operations": {},
    "body": "self.strategies",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["strategies"]
  },
  {
    "operations": {},
    "body": "eStrategy.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "self.contribs->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["contribs"]
  },
  {
    "operations": {},
    "body": "self.contribs",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["contribs"]
  },
  {
    "operations": {},
    "body": "contributionC.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "self.superStrategies->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["superStrategies"]
  },
  {
    "operations": {},
    "body": "self.superStrategies",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["superStrategies"]
  },
  {
    "operations": {},
    "body": "eStrategy.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "self.superContributionContexts->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["superContributionContexts"]
  },
  {
    "operations": {},
    "body": "self.superContributionContexts",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["superContributionContexts"]
  },
  {
    "operations": {},
    "body": "ContributionC.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"selectByType": 1},
    "body": "grlSpec.grlElements->selectByType(tGRL::ContributionGroup)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["grlElements"]
  },
  {
    "operations": {},
    "body": "contributionGroup.contribs",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["contribs"]
  },
  {
    "operations": {"=": 1},
    "body": "ContributionC.name.=(aContributionContext.name)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "contributionGroup.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "value.=('')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "value",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "getAllParentStrategis(self,inModel,aEvaluationStrategy)->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "getAllParentStrategis(self,inModel,aEvaluationStrategy)->collect(temp1 : OclAny | temp1.oclAsType(tGRL::EvaluationStrategy))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "eStrategy.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "getAllParentContributionContexts(self,inModel,aContributionContext)->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "getAllParentContributionContexts(self,inModel,aContributionContext)->collect(temp1 : OclAny | temp1.oclAsType(tGRL::ContributionContext))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "ContributionC.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "inGRLElement.oclIsTypeOf(tGRL::Actor)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "oclAsType": 1
    },
    "body": "inGRLElement.oclAsType(tGRL::IntentionalElement).importance.oclIsUndefined().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["importance"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "toString": 1,
      "oclAsType": 1
    },
    "body": "inGRLElement.oclAsType(tGRL::IntentionalElement).importance.toString().toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["importance"]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "oclAsType": 1
    },
    "body": "inGRLElement.oclAsType(tGRL::Actor).importance.oclIsUndefined().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["importance"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "toString": 1,
      "oclAsType": 1
    },
    "body": "inGRLElement.oclAsType(tGRL::Actor).importance.toString().toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["importance"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "inGRLElement.oclIsTypeOf(tGRL::Actor)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "oclAsType": 1
    },
    "body": "inGRLElement.oclAsType(tGRL::IntentionalElement).importanceQuantitative.oclIsUndefined().not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 3,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["importanceQuantitative"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "inGRLElement.oclAsType(tGRL::IntentionalElement).importanceQuantitative",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["importanceQuantitative"]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "oclAsType": 1
    },
    "body": "inGRLElement.oclAsType(tGRL::Actor).importanceQuantitative.oclIsUndefined().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["importanceQuantitative"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "inGRLElement.oclAsType(tGRL::Actor).importanceQuantitative",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["importanceQuantitative"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "toString": 1
    },
    "body": "self.contribution.toString().toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["contribution"]
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "inContributionEnd.quantitativeContribution.toString().equalsIgnoreCase('')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["quantitativeContribution"]
  },
  {
    "operations": {},
    "body": "self.contribution",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["contribution"]
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "inContributionType.toString().equalsIgnoreCase('make')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "inContributionType.toString().equalsIgnoreCase('help')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "inContributionType.toString().equalsIgnoreCase('somePositive')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "inContributionType.toString().equalsIgnoreCase('unknown')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "inContributionType.toString().equalsIgnoreCase('someNegative')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "inContributionType.toString().equalsIgnoreCase('hurt')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "inContributionType.toString().equalsIgnoreCase('break')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "aContributionEnd.quantitativeContribution.toString().equalsIgnoreCase('').not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["quantitativeContribution"]
  },
  {
    "operations": {},
    "body": "self.quantitativeContribution",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["quantitativeContribution"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "element.label.toString().=('')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["label"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "element.label.oclAsType(oclstdlib::String)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["label"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "element.name.oclAsType(oclstdlib::String)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "element.label.toString().=('')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["label"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "element.label.oclAsType(oclstdlib::String)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["label"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "element.name.oclAsType(oclstdlib::String)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "grlSpec",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "inGRLElement",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "inModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grlSpec",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "inGRLElement",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "inModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"selectByKind": 1},
    "body": "getAllElementLinks(grlSpec,inModel)->selectByKind(tGRL::NormalLink)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "normalLink.src.id.=(inGRLElement.id)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "src",
      "id"
    ]
  },
  {
    "operations": {},
    "body": "normalLink.dest",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["dest"]
  },
  {
    "operations": {"+": 1},
    "body": "i.+(baseIndex)",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"selectByKind": 1},
    "body": "getAllElementLinks(grlSpec,inModel)->selectByKind(tGRL::NormalLink)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "normalLink.dest",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["dest"]
  },
  {
    "operations": {"=": 1},
    "body": "grlElementDest.id.=(inGRLElement.id)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["id"]
  },
  {
    "operations": {"+": 1},
    "body": "i.+(baseIndex)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"replaceAll": 3},
    "body": "value.replaceAll('&', '&amp;').replaceAll('<', '&lt;').replaceAll('>', '&gt;')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 6
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aEvaluationStrategy.evaluations",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["evaluations"]
  },
  {
    "operations": {},
    "body": "ev",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self.intentionalElement.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "intentionalElement",
      "id"
    ]
  },
  {
    "operations": {"<>": 1},
    "body": "self.evalRange.<>(null)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["evalRange"]
  },
  {
    "operations": {},
    "body": "self.evalRange.start",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "evalRange",
      "start"
    ]
  },
  {
    "operations": {},
    "body": "self.evalRange.end",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "evalRange",
      "end"
    ]
  },
  {
    "operations": {},
    "body": "self.evalRange.step",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "evalRange",
      "step"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"isEmpty": 1},
    "body": "Set {self.evaluation}->isEmpty()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["evaluation"]
  },
  {
    "operations": {},
    "body": "self.evaluation",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["evaluation"]
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "self.qualitativeEvaluation.toString().equalsIgnoreCase('satisfied')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualitativeEvaluation"]
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "self.qualitativeEvaluation.toString().equalsIgnoreCase('weaklysatisfied')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualitativeEvaluation"]
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "self.qualitativeEvaluation.toString().equalsIgnoreCase('none')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualitativeEvaluation"]
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "self.qualitativeEvaluation.toString().equalsIgnoreCase('weaklydenied')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualitativeEvaluation"]
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "self.qualitativeEvaluation.toString().equalsIgnoreCase('denied')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualitativeEvaluation"]
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "self.qualitativeEvaluation.toString().equalsIgnoreCase('conflict')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualitativeEvaluation"]
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "self.qualitativeEvaluation.toString().equalsIgnoreCase('unknown')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualitativeEvaluation"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"selectByType": 1},
    "body": "grlSpec.grlElements->selectByType(tGRL::EvaluationStrategy)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["grlElements"]
  },
  {
    "operations": {"selectByType": 1},
    "body": "grlSpec.grlElements->selectByType(tGRL::StrategyGroup)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["grlElements"]
  },
  {
    "operations": {
      "not": 1,
      "=": 1
    },
    "body": "sg.strategies->exists(temp1 : EvaluationStrategy | temp1.name.=(eStrategy.name)).not()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "strategies"
    ]
  },
  {
    "operations": {},
    "body": "eStrategy.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {"selectByType": 1},
    "body": "grlSpec.grlElements->selectByType(tGRL::ContributionContext)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["grlElements"]
  },
  {
    "operations": {"selectByType": 1},
    "body": "grlSpec.grlElements->selectByType(tGRL::ContributionGroup)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["grlElements"]
  },
  {
    "operations": {
      "not": 1,
      "=": 1
    },
    "body": "cg.contribs->exists(temp1 : ContributionContext | temp1.name.=(ContributionC.name)).not()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "contribs",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "ContributionC.id",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  }
]
