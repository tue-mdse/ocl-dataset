[
  {
    "operations": {
      "<>": 1,
      "equalsIgnoreCase": 1
    },
    "body": "p.name.equalsIgnoreCase('datatypes').<>(true)",
    "type": "TemplateGuard",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "oclIsTypeOf": 2,
      "=": 2
    },
    "body": "p.ownedElement->exists(temp1 : Element | temp1.oclIsTypeOf(uml::Interface)).=(true).or(p.ownedElement->exists(temp2 : Element | temp2.oclIsTypeOf(uml::Class)).=(true))",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 4,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "p.name.concat('.umap')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"filter": 1},
    "body": "p.ownedElement->filter(uml::Interface)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {},
    "body": "int.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "int.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {
      "trim": 1,
      "toString": 1
    },
    "body": "generateInterfaceDefinition(int).toString().trim()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"filter": 1},
    "body": "p.ownedElement->filter(uml::Class)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {},
    "body": "c.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "c",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {
      "trim": 1,
      "toString": 1
    },
    "body": "generateClassDefinition(c).toString().trim()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  }
]
