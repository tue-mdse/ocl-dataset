[
  {
    "operations": {
      "oclIsUndefined": 1,
      "or": 1,
      "isEmpty": 1,
      "toString": 1,
      "getEAnnotation": 3,
      "=": 2,
      "first": 1
    },
    "body": "if e.getEAnnotation('http://www.topcased.org/documentation').oclIsUndefined().or(e.getEAnnotation('http://www.topcased.org/documentation').details->select(temp1 : EStringToStringMapEntry | temp1.key.=('documentation'))->isEmpty()) then '' else e.getEAnnotation('http://www.topcased.org/documentation').details->select(temp2 : EStringToStringMapEntry | temp2.key.=('documentation'))->first().value.toString() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 10,
      "StringLiteralExpImpl": 6,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "value",
      "details",
      "key"
    ]
  },
  {
    "operations": {
      "excluding": 1,
      "first": 1,
      "asSequence": 1
    },
    "body": "p.association.memberEnd->excluding(p)->asSequence()->first()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "association",
      "memberEnd"
    ]
  },
  {
    "operations": {
      "not": 2,
      "oclIsUndefined": 1,
      "oclIsInvalid": 1,
      "and": 1
    },
    "body": "p.association.oclIsUndefined().not().and(getOppositeProperty(p).oclIsInvalid().not())",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["association"]
  },
  {
    "operations": {
      "getModel": 1,
      "=": 1,
      "eAllContents": 1
    },
    "body": "c.getModel().eAllContents(uml::Class)->exists(oneClass : Class | baseClass(oneClass).=(c))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getModel": 1,
      "eAllContents": 1,
      "=": 1
    },
    "body": "c.getModel().eAllContents(uml::Class)->select(oneClass : Class | baseClass(oneClass).=(c))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "asOrderedSet": 1,
      "eAllContents": 1
    },
    "body": "m.eAllContents(uml::Class)->select(c : Class | hasChildClass(c).not())->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "asOrderedSet": 2,
      "union": 1
    },
    "body": "classes->asOrderedSet()->union(getClassesOrdreByDependency(classes->select(temp1 : Class | hasBaseClass(temp1))->collect(temp2 : Class | baseClass(temp2))->asOrderedSet()))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 3
    },
    "properties": []
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "asSequence": 1
    },
    "body": "classes->select(temp1 : Class | hasBaseClass(temp1))->collect(temp2 : Class | baseClass(temp2))->asOrderedSet()->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "classes->exists(temp1 : Class | hasBaseClass(temp1))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "flatten": 1,
      "size": 1,
      "union": 1,
      ">": 1
    },
    "body": "if classes->size().>(0) then let children : Sequence(Class) = classes->collect(temp1 : Class | getChildClasses(temp1))->flatten() in classes->union(getChildClassesRecursive(children)) else classes endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 6,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "eAllContents": 1
    },
    "body": "m.eAllContents(uml::Class)->select(temp1 : Class | hasBaseClass(temp1).not())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"reverse": 1},
    "body": "getChildClassesRecursive(getAllBaseClasses(m))->reverse()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {
      "excluding": 1,
      "reverse": 1,
      "asSequence": 1
    },
    "body": "getChildClassesRecursive(Set {c}->asSequence())->reverse()->excluding(c)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "eAllContents": 1,
      "asSequence": 1
    },
    "body": "m.eAllContents(uml::Class)->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "first": 1,
      "asSequence": 1
    },
    "body": "c.general->select(cl : Classifier | cl.oclIsTypeOf(uml::Class))->asSequence()->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["general"]
  },
  {
    "operations": {},
    "body": "if hasBaseClass(c) then rootClass(baseClass(c)) else c endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 3,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "union": 1,
      "asSequence": 1
    },
    "body": "if hasBaseClass(c) then baseClasses(baseClass(c))->union(Set {baseClass(c)}->asSequence()) else Sequence {} endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 4,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "c.general->isEmpty().not()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["general"]
  },
  {
    "operations": {"eAllContents": 1},
    "body": "m.eAllContents(uml::Association)->select(a : Association | isManyToManyRelation(a))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "a.memberEnd->forAll(p : Property | p.upper.<>(1))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "memberEnd",
      "upper"
    ]
  },
  {
    "operations": {
      "and": 1,
      "=": 2
    },
    "body": "p.upper.=(1).and(p.opposite.upper.=(1))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "opposite",
      "upper"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "and": 1,
      "=": 1
    },
    "body": "p.upper.=(1).and(p.opposite.upper.<>(1))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "opposite",
      "upper"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "and": 1,
      "=": 1
    },
    "body": "p.upper.<>(1).and(p.opposite.upper.=(1))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "opposite",
      "upper"
    ]
  },
  {
    "operations": {"<>": 1},
    "body": "p.association.memberEnd->forAll(temp1 : Property | temp1.upper.<>(1))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "association",
      "memberEnd",
      "upper"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "and": 1,
      "=": 1
    },
    "body": "p.type.oclIsKindOf(uml::PrimitiveType).and(p.upper.=(1))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "type",
      "upper"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "and": 1,
      "=": 1
    },
    "body": "p.type.oclIsKindOf(uml::PrimitiveType).and(p.upper.=(1))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "type",
      "upper"
    ]
  },
  {
    "operations": {},
    "body": "properties(c)->select(p : Property | isSimplePrimitive(p))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {"union": 1},
    "body": "if hasBaseClass(c) then allSimplePrimitiveAttributes(baseClass(c))->union(simplePrimitiveAttributes(c)) else simplePrimitiveAttributes(c) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 5,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"not": 1},
    "body": "properties(c)->select(p : Property | isSimplePrimitive(p).not())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {"union": 1},
    "body": "if hasBaseClass(c) then allComplexProperties(baseClass(c))->union(complexProperties(c)) else complexProperties(c) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 5,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "c.ownedOperation->isEmpty().not()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedOperation"]
  },
  {
    "operations": {
      "<>": 1,
      "asSequence": 1
    },
    "body": "op.ownedParameter->select(param : Parameter | param.direction.<>(uml::ParameterDirectionKind::return))->asSequence()->sortedBy(temp1 : Parameter | temp1.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "direction",
      "ownedParameter"
    ]
  },
  {
    "operations": {
      "last": 2,
      "asOrderedSet": 1,
      "union": 2,
      "=": 2,
      "getAssociations": 2,
      "first": 2,
      "asSequence": 1
    },
    "body": "c.attribute->union(c.getAssociations()->select(a : Association | a.memberEnd->first().type.=(c))->collect(a : Association | a.memberEnd->last())->union(c.getAssociations()->select(a : Association | a.memberEnd->last().type.=(c))->collect(a : Association | a.memberEnd->first())))->asOrderedSet()->asSequence()->sortedBy(temp1 : Property | temp1.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 5,
      "VariableExpImpl": 10,
      "OperationCallExpImpl": 12,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "name",
      "attribute",
      "type",
      "memberEnd"
    ]
  },
  {
    "operations": {"union": 1},
    "body": "if hasBaseClass(c) then properties(baseClass(c))->union(properties(c)) else properties(c) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 5,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "oclIsTypeOf": 1,
      "toLower": 1,
      "toString": 1,
      "reverse": 1,
      "ancestors": 1,
      "tokenize": 1,
      "sep": 1
    },
    "body": "e.ancestors(uml::Package)->select(temp1 : Package | temp1.oclIsTypeOf(uml::Model).not())->collect(temp2 : Package | temp2.name.toLower())->reverse()->sep('.')->collect(temp3 : OclAny | temp3.toString())->collect(temp4 : String | temp4.tokenize('.'))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "flatten": 1,
      "getAssociations": 1
    },
    "body": "c.getAssociations()->collect(a : Association | a.memberEnd->collect(temp1 : Property | temp1.type))->flatten()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "type",
      "memberEnd"
    ]
  },
  {
    "operations": {
      "<>": 2,
      "union": 1,
      "asSet": 1
    },
    "body": "getAssociationsEndTypes(c)->select(e : Type | e.owner.<>(c.owner))->union(c.general->select(base : Classifier | base.owner.<>(c.owner))->asSet())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "owner",
      "general"
    ]
  }
]
