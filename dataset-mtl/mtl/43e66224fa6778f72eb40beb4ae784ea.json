[
  {
    "operations": {"flatten": 1},
    "body": "Set {aClass.ownedAttribute->collect(temp1 : Property | temp1.type)}->flatten()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedAttribute",
      "type"
    ]
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "self.oclIsKindOf(uml::Stereotype)",
    "type": "TemplateGuard",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "oclIsKindOf": 1
    },
    "body": "self.oclIsKindOf(uml::Stereotype).not()",
    "type": "TemplateGuard",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 3},
    "body": "getPackageName(aPackage).concat('/').concat(aClass.name).concat('.hpp')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "not": 1,
      "isEmpty": 1
    },
    "body": "aClass.owner.ownedElement->filter(uml::Usage)->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "owner",
      "ownedElement"
    ]
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "asOrderedSet": 1
    },
    "body": "aClass.owner.ownedElement->filter(uml::Usage)->asOrderedSet()->sortedBy(temp1 : Usage | myQualifiedName(temp1))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "owner",
      "ownedElement"
    ]
  },
  {
    "operations": {
      "not": 1,
      "asOrderedSet": 1,
      "toString": 1,
      "=": 1,
      "first": 1
    },
    "body": "usages.supplier->collect(temp1 : NamedElement | temp1.name)->asOrderedSet()->first().=(aClass.name.toString()).not()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 5,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "supplier",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "usages.supplier->collect(temp1 : NamedElement | temp1.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "supplier",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "asOrderedSet": 1
    },
    "body": "includes(aClass)->asOrderedSet()->filter(uml::Class)->sortedBy(temp1 : Class | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "element.namespace",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["namespace"]
  },
  {
    "operations": {},
    "body": "element.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "asOrderedSet": 1
    },
    "body": "includes(aClass)->filter(uml::Interface)->asOrderedSet()->sortedBy(temp1 : Interface | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "element.namespace",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["namespace"]
  },
  {
    "operations": {},
    "body": "element.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"asOrderedSet": 1},
    "body": "aClass.superClass->asOrderedSet()->sortedBy(temp1 : Class | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "superClass"
    ]
  },
  {
    "operations": {"concat": 1},
    "body": "elements.name.concat('.hpp')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "aClass.interfaceRealization->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["interfaceRealization"]
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"asOrderedSet": 1},
    "body": "aClass.interfaceRealization->asOrderedSet()->sortedBy(temp1 : InterfaceRealization | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "interfaceRealization"
    ]
  },
  {
    "operations": {},
    "body": "realizations.supplier->collect(temp1 : NamedElement | temp1.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "supplier",
      "name"
    ]
  },
  {
    "operations": {"isEmpty": 1},
    "body": "aClass.superClass->isEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["superClass"]
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "aClass.oclIsKindOf(uml::Stereotype)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "selectByKind": 1,
      "asOrderedSet": 1
    },
    "body": "includes(aClass)->selectByKind(uml::Enumeration)->asOrderedSet()->sortedBy(temp1 : Enumeration | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "elements.name.concat('.hpp')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"asOrderedSet": 1},
    "body": "aClass.ownedOperation->asOrderedSet()->sortedBy(temp1 : Operation | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedOperation",
      "name"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "and": 2,
      "asOrderedSet": 2,
      "notEmpty": 2,
      "oclAsType": 1,
      "first": 2
    },
    "body": "aOperation.method->notEmpty().and(aOperation.method->asOrderedSet()->first().oclIsKindOf(uml::OpaqueBehavior)).and(aOperation.method->asOrderedSet()->first().oclAsType(uml::OpaqueBehavior).language->notEmpty())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 10,
      "VariableExpImpl": 3,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "language",
      "method"
    ]
  },
  {
    "operations": {
      "size": 1,
      "asOrderedSet": 2,
      "=": 1,
      "oclAsType": 1,
      "first": 1
    },
    "body": "aOperation.method->asOrderedSet()->first().oclAsType(uml::OpaqueBehavior).body->asOrderedSet()->size().=(2)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "method",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "aOperation.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "at": 1,
      "asOrderedSet": 2,
      "oclAsType": 1,
      "first": 1
    },
    "body": "aOperation.method->asOrderedSet()->first().oclAsType(uml::OpaqueBehavior).body->asOrderedSet()->at(2)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 5,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "method",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "aPackage.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aClass.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"isEmpty": 1},
    "body": "aClass.superClass->isEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["superClass"]
  },
  {
    "operations": {},
    "body": "':'",
    "type": "ForBefore",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "','",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"asOrderedSet": 1},
    "body": "aClass.superClass->asOrderedSet()->sortedBy(temp1 : Class | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "superClass"
    ]
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "sClass",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "','",
    "type": "ForBefore",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "','",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "asOrderedSet": 1
    },
    "body": "aClass.ownedElement->filter(uml::InterfaceRealization)->asOrderedSet()->sortedBy(temp1 : InterfaceRealization | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "ownedElement"
    ]
  },
  {
    "operations": {"oclIsInvalid": 1},
    "body": "interfaceR.namespace.oclIsInvalid()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["namespace"]
  },
  {
    "operations": {},
    "body": "interfaceR.supplier->collect(temp1 : NamedElement | temp1.namespace)->collect(temp2 : Namespace | ns(temp2))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "supplier",
      "namespace"
    ]
  },
  {
    "operations": {},
    "body": "interfaceR.supplier->collect(temp1 : NamedElement | temp1.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "supplier",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "interfaceR.supplier->collect(temp1 : NamedElement | temp1.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "supplier",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "aClass.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aClass.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aClass.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aClass.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aClass.ownedAttribute->sortedBy(temp1 : Property | temp1.name)->collect(temp2 : Property | generateAttributeAccessorsDecl(temp2,false))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "ownedAttribute",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "aClass.ownedOperation->sortedBy(temp1 : Operation | temp1.name)->collect(temp2 : Operation | generateOperationDecl(temp2,false))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "ownedOperation",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "aClass.ownedAttribute->sortedBy(temp1 : Property | temp1.name)->collect(temp2 : Property | generateAttributeProtectedMember(temp2))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedAttribute",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  }
]
