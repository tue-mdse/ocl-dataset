[
  {
    "operations": {},
    "body": "getPrimaryTypeName(anEntity,false)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 2,
      "oclIsTypeOf": 1,
      "getPKAttribute": 2,
      "notEmpty": 1,
      "=": 2,
      "oclAsType": 1,
      "first": 7,
      "asSequence": 7
    },
    "body": "if getPKAttribute(anEntity)->size().=(0) then if isPrimaryTypeWrapper then defaultPKTypeWrapper(anEntity) else defaultPKType(anEntity) endif else if getPKAttribute(anEntity)->size().=(1) then if Set {getPKAttribute(anEntity)->asSequence()->first().class}->notEmpty() then if Set {getPKAttribute(anEntity)->asSequence()->first().type}->asSequence()->first().oclIsTypeOf(uml::PrimitiveType) then convertToJavaWrapperType(Set {anEntity.getPKAttribute()->asSequence()->first().type}->asSequence()->first().oclAsType(uml::PrimitiveType)) else convertToJavaType(Set {anEntity.getPKAttribute()->asSequence()->first().class}->asSequence()->first()) endif else if isPrimaryTypeWrapper then defaultPKTypeWrapper(anEntity) else defaultPKType(anEntity) endif endif else getCompositeKeyClass(anEntity).name endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 13,
      "OperationCallExpImpl": 23,
      "TemplateInvocationSpec": 6,
      "QueryInvocationSpec": 5,
      "IntegerLiteralExpImpl": 2,
      "TypeExpImpl": 2,
      "CollectionLiteralExpImpl": 4,
      "IfExpImpl": 6,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "class",
      "name",
      "type"
    ]
  }
]
