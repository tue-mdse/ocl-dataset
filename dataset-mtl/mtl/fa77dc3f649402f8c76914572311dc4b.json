[
  {
    "operations": {},
    "body": "'https://drive.google.com/folderview?id=0B-2xhhL1p3OtVWVLMHRBN1Bwc1k&usp=sharing'",
    "type": "QueryExpression",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "getEAnnotation": 1,
      "=": 1
    },
    "body": "m.getEAnnotation('genmymodel').details->exists(temp1 : EStringToStringMapEntry | temp1.key.=(p))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "details",
      "key"
    ]
  },
  {
    "operations": {
      "getEAnnotation": 1,
      "=": 1
    },
    "body": "if hasProperty(m,p) then m.getEAnnotation('genmymodel').details->any(temp1 : EStringToStringMapEntry | temp1.key.=(p)).value else null endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 5,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "value",
      "details",
      "key"
    ]
  },
  {
    "operations": {"+": 1},
    "body": "self.+(1)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "c.body",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["body"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "c.ownedComment->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {},
    "body": "prefix",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "+": 1,
      "sep": 1
    },
    "body": "c.ownedComment->collect(temp1 : Comment | genBody(temp1,prefix))->sep('\n '.+(prefix))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {},
    "body": "prefix",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "+": 4,
      "replaceAll": 6
    },
    "body": "genBody(c,prefix).replaceAll('\n', '\n'.+(prefix).+(' ')).replaceAll('<div>', '\n'.+(prefix).+(' ')).replaceAll('<\/div>', '').replaceAll('<br>', '\n').replaceAll('<[^>]*>', '').replaceAll('&nbsp;', ' ')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 10,
      "VariableExpImpl": 4,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 14
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "c.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "inherited->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "inherited",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "cl.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "c.ownedComment->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {},
    "body": "c.ownedComment->collect(temp1 : Comment | genComment(temp1,''))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "c.ownedOperation->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedOperation"]
  },
  {
    "operations": {},
    "body": "c.ownedOperation",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedOperation"]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "indexOf": 1
    },
    "body": "c.ownedOperation->asOrderedSet()->indexOf(ops)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedOperation"]
  },
  {
    "operations": {},
    "body": "ops.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "i.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "inherited->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "inherited",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "cl.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "i.ownedComment->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {},
    "body": "i.ownedComment->collect(temp1 : Comment | genComment(temp1,''))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "'upwork_post_'.concat(e.name.concat('.py'))",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "e",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"filter": 1},
    "body": "e.ownedElement->filter(uml::Package)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {},
    "body": "m",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "asOrderedSet": 1,
      "indexOf": 1
    },
    "body": "e.ownedElement->asOrderedSet()->filter(uml::Package)->indexOf(m)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {"and": 1},
    "body": "hasProperty(m,'budget').and(hasProperty(m,'jobtitle'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "m.ownedComment->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {},
    "body": "m",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "m.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "m",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'jobtitle'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "m.name.concat('.py')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "m",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "m.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "m",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "m.name.concat('.py')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "m.name.concat('.py')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "m.ownedComment->collect(temp1 : Comment | genComment(temp1,' '))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {
      "not": 1,
      "oclIsKindOf": 1
    },
    "body": "nonInherit->sortedBy(temp1 : Classifier | temp1.oclIsKindOf(uml::Enumeration).not())",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "e",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "getAllUsedInterfaces": 1,
      "filter": 1,
      "excludes": 1,
      "getGenerals": 1,
      "size": 1,
      "union": 1
    },
    "body": "m.ownedElement->filter(uml::Classifier)->select(c : Classifier | nonInherit->excludes(c))->sortedBy(temp1 : Classifier | temp1.getAllUsedInterfaces()->union(temp1.getGenerals())->size())",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 6,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {},
    "body": "e",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "m",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "m",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'budget'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "hasProperty(m,'skills')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "m",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'skills'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "m",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "m.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toString": 1,
      "+": 2
    },
    "body": "'1.'.+(getIndex(_p).+(1).toString())",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toString": 2,
      "+": 4
    },
    "body": "'1.'.+(getIndex(_c.package).+(1).toString()).+('.').+(getIndex(_c).toString())",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["package"]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "eContents": 1,
      "indexOf": 1
    },
    "body": "_c.package.eContents(uml::Classifier)->reject(temp1 : Classifier | temp1.oclIsKindOf(uml::Association))->indexOf(_c)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["package"]
  },
  {
    "operations": {
      "<>": 1,
      "siblings": 1,
      "last": 1,
      "oclIsKindOf": 2,
      "sum": 3,
      "+": 2,
      "precedingSiblings": 1,
      "size": 2,
      "and": 1,
      "eContents": 1,
      "ancestors": 2,
      "eAllContents": 2,
      "=": 1,
      "indexOf": 1
    },
    "body": "if _p.nestingPackage.=(null) then 0 else _p.nestingPackage.eContents(uml::Package)->indexOf(_p).+(_p.ancestors(uml::Package)->collect(temp1 : Package | getIndex(temp1))->sum()).+(if _p.nestingPackage.<>(null).and(_p.nestingPackage.oclIsKindOf(uml::Model)) then Set {_p.siblings(uml::Package)->collect(temp2 : Package | temp2.eAllContents(uml::Package))->size()}->sum() else Set {_p.ancestors(uml::Package)->reject(temp3 : Package | temp3.oclIsKindOf(uml::Model))->last().precedingSiblings(uml::Package)->collect(temp4 : Package | temp4.eAllContents(uml::Package))->size()}->sum() endif) endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "VariableExpImpl": 12,
      "OperationCallExpImpl": 21,
      "NullLiteralExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 9,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 4
    },
    "properties": ["nestingPackage"]
  }
]
