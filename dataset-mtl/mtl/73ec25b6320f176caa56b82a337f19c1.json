[
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "and": 1,
      "index": 1,
      "eAllContents": 1,
      "-": 1,
      "=": 2,
      "eClass": 1
    },
    "body": "self.eAllContents(uml::Property)->select(temp1 : Property | temp1.eClass().name.index('Property').<>(1.-()).and(temp1.default.=(null).or(temp1.default.=(''))))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 4,
      "NullLiteralExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "default",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genDefaultValueMessage(self)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "=": 1,
      "eAllContents": 1,
      "-": 1
    },
    "body": "self.eAllContents(uml::Property)->select(temp1 : Property | temp1.upper.=(1.-()))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["upper"]
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'The size of an array has to be finite'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "self.eAllContents(uml::NamedElement)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"filter": 1},
    "body": "getEmptyStereotypeAttribute(self)->filter(uml::NamedElement)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genEmptyStereotypeMessage(self,anElement)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "self.eAllContents(uml::Port)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getAllInterfaces(self)->select(temp1 : Interface | isAsynchronous(temp1))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {"not": 1},
    "body": "isPortInfo(aPort).not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'A port has to be stereotyped with PortInfo when its interface is stereotyped Asynchronous'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "eAllContents": 1
    },
    "body": "self.eAllContents(uml::Class)->select(temp1 : Class | isAperiodic(temp1).or(isSporadic(temp1)))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 2,
      "and": 1,
      "notEmpty": 1
    },
    "body": "isBufferInfo(self).not().and(self.ownedPort->select(temp1 : Port | isPortInfo(temp1).not())->notEmpty())",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedPort"]
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'A sporadic or aperiodic class must have a stereotype BufferInfo and at least a port stereotyped PortInfo'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "not": 1,
      "eAllContents": 1
    },
    "body": "self.eAllContents(uml::Interface)->select(temp1 : Interface | isAsynchronous(temp1))->collect(temp2 : Interface | temp2.attribute)->collect(temp3 : Property | temp3.type)->filter(uml::Class)->select(temp4 : Class | isMessage(temp4).not())",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 4,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "attribute",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'A class referenced in an asynchronous interface has to be stereotyped Message'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "size": 1,
      "eAllContents": 1
    },
    "body": "self.eAllContents(uml::Class)->select(temp1 : Class | isRoot(temp1))->size().<>(1)",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'The model must have one and only one class stereotyped Root'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "self.eAllContents(uml::Class)->select(temp1 : Class | isThreadInfo(temp1))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "getAppliedStereotypes": 1,
      ">": 1
    },
    "body": "self.getAppliedStereotypes()->select(temp1 : Stereotype | isThreadInfoStereotype(temp1))->size().>(1)",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'The ThreadInfo stereotypes are exclusive'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "self.eAllContents(uml::Port)->select(temp1 : Port | isPortInfo(temp1))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "getAppliedStereotypes": 1,
      ">": 1
    },
    "body": "self.getAppliedStereotypes()->select(temp1 : Stereotype | isPortInfoStereotype(temp1))->size().>(1)",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'The PortInfo stereotypes are exclusive'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "self.eAllContents(uml::Class)->select(temp1 : Class | isBufferInfo(temp1))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "getAppliedStereotypes": 1,
      ">": 1
    },
    "body": "self.getAppliedStereotypes()->select(temp1 : Stereotype | isBufferInfoStereotype(temp1))->size().>(1)",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'The BufferInfo stereotypes are exclusive'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "self.eAllContents(uml::Port)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 2,
      "<>": 1,
      "or": 2,
      "size": 1,
      "isEmpty": 1,
      "notEmpty": 1,
      "=": 1
    },
    "body": "self.end->isEmpty().or(self.end->collect(temp1 : ConnectorEnd | temp1.owner)->filter(uml::Connector)->collect(temp2 : Connector | temp2.end)->size().<>(2)).or(self.end->collect(temp3 : ConnectorEnd | temp3.owner)->filter(uml::Connector)->collect(temp4 : Connector | temp4.end)->select(temp5 : ConnectorEnd | temp5.partWithPort.=(null))->notEmpty())",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 5,
      "VariableExpImpl": 8,
      "OperationCallExpImpl": 9,
      "NullLiteralExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "partWithPort",
      "end",
      "owner",
      "end"
    ]
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'A port has to be connected to another port'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "self.eAllContents(uml::Port)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "union": 1,
      "=": 1
    },
    "body": "self.clientDependency->collect(temp1 : Dependency | temp1.supplier)->union(self.provided)->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "supplier",
      "provided",
      "clientDependency"
    ]
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'The port must require or provide an interface'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "eAllContents": 1,
      "=": 1
    },
    "body": "self.eAllContents(uml::Pseudostate)->select(temp1 : Pseudostate | temp1.kind.=(uml::PseudostateKind::choice))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["kind"]
  },
  {
    "operations": {
      "eContainer": 1,
      "not": 1,
      "eAllContents": 1,
      "=": 1
    },
    "body": "exclusiveChoice(self,minimize(self,self.eContainer(uml::Region).eAllContents(uml::Transition)->select(temp1 : Transition | temp1.source.=(choice)))).not()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["source"]
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genExclusivePseudostateMessage(self)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "self.eAllContents(uml::Port)->select(temp1 : Port | isPortInfo(temp1))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "notEmpty": 1
    },
    "body": "getAllInterfaces(self)->select(temp1 : Interface | isAsynchronous(temp1).not())->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'A port stereotypes PortInfo must require or provide an interface stereotypes Asynchronous'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "self.eAllContents(uml::Interface)->select(temp1 : Interface | isAsynchronous(temp1))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "or": 1,
      "size": 2,
      "=": 1,
      ">": 1
    },
    "body": "self.nestedClassifier->filter(uml::Signal)->size().=(0).or(self.ownedOperation->size().>(0))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 6,
      "IntegerLiteralExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "nestedClassifier",
      "ownedOperation"
    ]
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'An interface port stereotyped Asynchronous requires at least one signal and should define any operation'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "anElement",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"eContainer": 1},
    "body": "self.eContainer(uml::StateMachine)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  }
]
