[
  {
    "operations": {
      "or": 2,
      "notEmpty": 3
    },
    "body": "self.sensors->collect(temp1 : Sensor | temp1.inputs)->notEmpty().or(self.effector.inputs->notEmpty()).or(self.transmitters->collect(temp2 : Transmitter | temp2.inputs)->notEmpty())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 5,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "sensors",
      "transmitters",
      "effector",
      "inputs"
    ]
  },
  {
    "operations": {
      "or": 2,
      "notEmpty": 3
    },
    "body": "self.sensors->collect(temp1 : Sensor | temp1.outputs)->notEmpty().or(self.effector.outputs->notEmpty()).or(self.transmitters->collect(temp2 : Transmitter | temp2.outputs)->notEmpty())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 5,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "sensors",
      "transmitters",
      "outputs",
      "effector"
    ]
  },
  {
    "operations": {
      "eContainer": 1,
      "oclIsTypeOf": 3,
      "+": 8,
      "oclAsType": 2
    },
    "body": "let m : EObject = buffer.eContainer() in if m.oclIsTypeOf(multirobotsystem::Effector) then 'Effector_'.+(buffer.name) else if m.oclIsTypeOf(multirobotsystem::Sensor) then 'Sensor_'.+(m.oclAsType(multirobotsystem::Sensor).name).+('_').+(buffer.name) else if m.oclIsTypeOf(multirobotsystem::Transmitter) then 'Transmitter_'.+(m.oclAsType(multirobotsystem::Transmitter).name).+('_').+(buffer.name) else 'UNKNOWN_'.+(buffer.name) endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 10,
      "OperationCallExpImpl": 14,
      "LetExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 6,
      "IfExpImpl": 3,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "name",
      "name",
      "name"
    ]
  },
  {
    "operations": {
      "eContainer": 1,
      "oclIsTypeOf": 3,
      "+": 8,
      "oclAsType": 2
    },
    "body": "let m : EObject = buffer.eContainer() in if m.oclIsTypeOf(multirobotsystem::Effector) then 'effector.'.+(buffer.name) else if m.oclIsTypeOf(multirobotsystem::Sensor) then 'sensors.'.+(m.oclAsType(multirobotsystem::Sensor).name).+('.').+(buffer.name) else if m.oclIsTypeOf(multirobotsystem::Transmitter) then 'transmitters.'.+(m.oclAsType(multirobotsystem::Transmitter).name).+('.').+(buffer.name) else 'UNKNOWN_'.+(buffer.name) endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 14,
      "VariableExpImpl": 10,
      "LetExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "TypeExpImpl": 5,
      "IfExpImpl": 3,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "name",
      "name",
      "name"
    ]
  },
  {
    "operations": {
      "eContainer": 1,
      "oclIsTypeOf": 3,
      "+": 11,
      "oclAsType": 2
    },
    "body": "let m : EObject = buffer.eContainer() in if m.oclIsTypeOf(multirobotsystem::Effector) then 'effector.inputs.'.+(buffer.name).+('.Data_Type') else if m.oclIsTypeOf(multirobotsystem::Sensor) then 'sensors.'.+(m.oclAsType(multirobotsystem::Sensor).name).+('.inputs.').+(buffer.name).+('.Data_Type') else if m.oclIsTypeOf(multirobotsystem::Transmitter) then 'transmitters.'.+(m.oclAsType(multirobotsystem::Transmitter).name).+('.inputs.').+(buffer.name).+('.Data_Type') else 'UNKNOWN_'.+(buffer.name) endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 10,
      "OperationCallExpImpl": 17,
      "LetExpImpl": 1,
      "StringLiteralExpImpl": 9,
      "TypeExpImpl": 5,
      "IfExpImpl": 3,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "name",
      "name",
      "name"
    ]
  },
  {
    "operations": {
      "union": 3,
      "notEmpty": 1,
      "oclAsType": 5
    },
    "body": "if Set {self.effector}->notEmpty() then Set {self.effector.oclAsType(multirobotsystem::IOElement)}->union(self.sensors->collect(temp1 : Sensor | temp1.oclAsType(multirobotsystem::IOElement)))->union(self.transmitters->collect(temp2 : Transmitter | temp2.oclAsType(multirobotsystem::IOElement)))->collect(temp3 : IOElement | temp3.inputs) else self.sensors->collect(temp4 : Sensor | temp4.oclAsType(multirobotsystem::IOElement))->union(self.transmitters->collect(temp5 : Transmitter | temp5.oclAsType(multirobotsystem::IOElement)))->collect(temp6 : IOElement | temp6.inputs) endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 6,
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 12,
      "TypeExpImpl": 5,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "sensors",
      "transmitters",
      "effector",
      "inputs"
    ]
  },
  {
    "operations": {
      "union": 3,
      "notEmpty": 1,
      "oclAsType": 5
    },
    "body": "if Set {self.effector}->notEmpty() then Set {self.effector.oclAsType(multirobotsystem::IOElement)}->union(self.sensors->collect(temp1 : Sensor | temp1.oclAsType(multirobotsystem::IOElement)))->union(self.transmitters->collect(temp2 : Transmitter | temp2.oclAsType(multirobotsystem::IOElement)))->collect(temp3 : IOElement | temp3.outputs) else self.sensors->collect(temp4 : Sensor | temp4.oclAsType(multirobotsystem::IOElement))->union(self.transmitters->collect(temp5 : Transmitter | temp5.oclAsType(multirobotsystem::IOElement)))->collect(temp6 : IOElement | temp6.outputs) endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 6,
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 12,
      "TypeExpImpl": 5,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "sensors",
      "outputs",
      "transmitters",
      "effector"
    ]
  },
  {
    "operations": {"oclIsTypeOf": 3},
    "body": "if element.oclIsTypeOf(multirobotsystem::Sensor) then 'sensors' else if element.oclIsTypeOf(multirobotsystem::Effector) then 'effector' else if element.oclIsTypeOf(multirobotsystem::Transmitter) then 'transmitters' else 'UNKNOWN' endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "TypeExpImpl": 3,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 3
    },
    "properties": []
  }
]
