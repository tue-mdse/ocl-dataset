[
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "+": 1,
      "equalsIgnoreCase": 1
    },
    "body": "aModel.nestedPackage->collect(temp1 : Package | temp1.nestedPackage)->select(ifPack : Package | ifPack.name.equalsIgnoreCase('Interfaces'))->collect(temp2 : Package | getElementPath(temp2))->+('/Interfaces/rte.c')",
    "type": "FileUrl",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "nestedPackage"
    ]
  },
  {
    "operations": {
      "filter": 1,
      "equalsIgnoreCase": 1
    },
    "body": "aModel.nestedPackage->collect(temp1 : Package | temp1.nestedPackage)->filter(uml::Package)->select(ifPack : Package | ifPack.name.equalsIgnoreCase('Interfaces'))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "nestedPackage"
    ]
  },
  {
    "operations": {
      "filter": 1,
      "includes": 1,
      "equalsIgnoreCase": 1
    },
    "body": "pack.ownedElement->filter(uml::Interface)->select(iface : Interface | iface.generalization->collect(temp1 : Generalization | temp1.general)->collect(temp2 : Classifier | temp2.name)->collect(temp3 : String | temp3.equalsIgnoreCase('SenderReceiverInterface'))->includes(true))->sortedBy(temp4 : Interface | temp4.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 5,
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 3,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 5,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "general",
      "name",
      "ownedElement",
      "generalization"
    ]
  },
  {
    "operations": {"filter": 1},
    "body": "SRIf.ownedElement->filter(uml::Property)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {},
    "body": "SRIf.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "SRIf.generalization->collect(temp1 : Generalization | temp1.general)->collect(temp2 : Classifier | temp2.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "general",
      "name",
      "generalization"
    ]
  },
  {
    "operations": {},
    "body": "prop.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "prop.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "SRIf.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "prop.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "filter": 1,
      "equalsIgnoreCase": 1
    },
    "body": "aModel.nestedPackage->collect(temp1 : Package | temp1.nestedPackage)->filter(uml::Package)->select(ifPack : Package | ifPack.name.equalsIgnoreCase('Interfaces'))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "nestedPackage"
    ]
  },
  {
    "operations": {
      "filter": 1,
      "includes": 1,
      "equalsIgnoreCase": 1
    },
    "body": "pack.ownedElement->filter(uml::Interface)->select(iface : Interface | iface.generalization->collect(temp1 : Generalization | temp1.general)->collect(temp2 : Classifier | temp2.name)->collect(temp3 : String | temp3.equalsIgnoreCase('SenderReceiverInterface'))->includes(true))->sortedBy(temp4 : Interface | temp4.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 5,
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 3,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "general",
      "name",
      "ownedElement",
      "generalization"
    ]
  },
  {
    "operations": {"filter": 1},
    "body": "SRIf.ownedElement->filter(uml::Property)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {},
    "body": "SRIf.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "SRIf.generalization->collect(temp1 : Generalization | temp1.general)->collect(temp2 : Classifier | temp2.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "general",
      "name",
      "generalization"
    ]
  },
  {
    "operations": {},
    "body": "prop.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "SRIf.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "prop.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "prop.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "SRIf.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "prop.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"filter": 1},
    "body": "SRIf.ownedElement->filter(uml::Property)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {},
    "body": "SRIf.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "SRIf.generalization->collect(temp1 : Generalization | temp1.general)->collect(temp2 : Classifier | temp2.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "general",
      "name",
      "generalization"
    ]
  },
  {
    "operations": {},
    "body": "prop.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "SRIf.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "prop.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "prop.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "SRIf.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "prop.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  }
]
