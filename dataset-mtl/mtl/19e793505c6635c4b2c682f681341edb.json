[
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "uType.name.=('String')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "uType.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "uType.name.=('Integer')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "uType.name.=('Boolean')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "uType.name.=('Real')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "Sequence {'string', 'int', 'bool', 'float'}->exists(s : String | s.=(aString))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 4,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "Sequence {'Countable', 'OuterIterator', 'RecursiveIterator', 'SeekableIterator', 'SplObserver', 'SplSubject', 'Traversable', 'Iterator', 'IteratorAggregate', 'ArrayAccess', 'Serializable', 'Closure', 'Generator'}->exists(s : String | s.=(aInterface.name))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 13,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 2,
      "and": 1,
      "isEmpty": 1,
      "=": 1
    },
    "body": "Set {aParameter.type.owningTemplateParameter}->isEmpty().not().and(aParameter.upper.=(*).not())",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 5,
      "UnlimitedNaturalLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "owningTemplateParameter",
      "type",
      "upper"
    ]
  },
  {
    "operations": {
      "getOperations": 1,
      "<>": 1,
      "notEmpty": 1
    },
    "body": "aClass.getOperations()->reject(o : Operation | o.name.<>(aClass.name))->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getOperations": 1,
      "<>": 1,
      "first": 1,
      "asSequence": 1
    },
    "body": "aClass.getOperations()->reject(o : Operation | o.name.<>(aClass.name))->asSequence()->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 4,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 2,
      "or": 1,
      "isEmpty": 2,
      "getAllImplementedInterfaces": 1
    },
    "body": "Set {aClass.ownedTemplateSignature}->isEmpty().not().or(aClass.getAllImplementedInterfaces()->forAll(it : Interface | Set {it.ownedTemplateSignature}->isEmpty()).not())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 3,
      "CollectionLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["ownedTemplateSignature"]
  },
  {
    "operations": {
      "<>": 6,
      "getOperations": 2,
      "or": 4,
      "getGenerals": 2,
      "oclIsKindOf": 10,
      "isEmpty": 8,
      "oclAsType": 6,
      "asSequence": 2,
      "isTemplateParameter": 4,
      "filter": 13,
      "not": 8,
      "getAllOperations": 2,
      "addAll": 8,
      "and": 2,
      "oclAsSet": 2,
      "asSet": 1,
      "getImplementedInterfaces": 6
    },
    "body": "Sequence {}->addAll(if aClass.attribute->isEmpty().not() then aClass.attribute->reject(temp1 : Property | temp1.type.isTemplateParameter())->collect(temp2 : Property | temp2.type)->filter(uml::Classifier)->select(c : Classifier | c.oclIsKindOf(uml::Class).or(c.oclIsKindOf(uml::Interface)))->select(c : Classifier | getNamespacePath(c).<>(getNamespacePath(aClass))) else Sequence {} endif)->addAll(if aClass.getOperations()->collect(temp3 : Operation | temp3.ownedParameter)->isEmpty().not() then aClass.getOperations()->collect(temp4 : Operation | temp4.ownedParameter)->reject(temp5 : Parameter | self.isTemplateParameter())->collect(temp6 : Parameter | temp6.type)->filter(uml::Classifier)->select(c : Classifier | c.oclIsKindOf(uml::Class).or(c.oclIsKindOf(uml::Interface)))->select(c : Classifier | getNamespacePath(c).<>(getNamespacePath(aClass))) else Sequence {} endif)->addAll(if aClass.clientDependency->collect(temp7 : Dependency | temp7.target)->collect(temp8 : Element | temp8.oclAsSet())->asSequence()->isEmpty().not() then aClass.clientDependency->collect(temp9 : Dependency | temp9.target)->collect(temp10 : Element | temp10.oclAsSet())->asSequence()->filter(uml::Classifier)->select(c : Classifier | getNamespacePath(c).<>(getNamespacePath(aClass))) else Sequence {} endif)->addAll(if aClass.getGenerals()->filter(uml::Classifier)->isEmpty().not() then aClass.getGenerals()->filter(uml::Classifier)->select(c : Classifier | getNamespacePath(c).<>(getNamespacePath(aClass))) else Sequence {} endif)->addAll(if aClass.oclIsKindOf(uml::Class).and(aClass.oclAsType(uml::Class).getImplementedInterfaces()->filter(uml::Interface)->isEmpty().not()) then Sequence {}->addAll(if aClass.oclAsType(uml::Class).getImplementedInterfaces()->filter(uml::Interface)->collect(temp11 : Interface | temp11.getAllOperations())->collect(temp12 : Operation | temp12.ownedParameter)->isEmpty().not() then aClass.oclAsType(uml::Class).getImplementedInterfaces()->filter(uml::Interface)->collect(temp13 : Interface | temp13.getAllOperations())->collect(temp14 : Operation | temp14.ownedParameter)->reject(temp15 : Parameter | self.isTemplateParameter())->collect(temp16 : Parameter | temp16.type)->filter(uml::Classifier)->select(c : Classifier | c.oclIsKindOf(uml::Class).or(c.oclIsKindOf(uml::Interface)))->select(c : Classifier | getNamespacePath(c).<>(getNamespacePath(aClass))) else Sequence {} endif) else Sequence {} endif)->addAll(if aClass.oclIsKindOf(uml::Class).and(aClass.oclAsType(uml::Class).getImplementedInterfaces()->filter(uml::Interface)->isEmpty().not()) then Sequence {}->addAll(if aClass.oclAsType(uml::Class).getImplementedInterfaces()->filter(uml::Interface)->collect(temp17 : Interface | temp17.attribute)->isEmpty().not() then aClass.oclAsType(uml::Class).getImplementedInterfaces()->filter(uml::Interface)->collect(temp18 : Interface | temp18.attribute)->reject(temp19 : Property | temp19.type.isTemplateParameter())->collect(temp20 : Property | temp20.type)->filter(uml::Classifier)->select(c : Classifier | c.oclIsKindOf(uml::Class).or(c.oclIsKindOf(uml::Interface)))->select(c : Classifier | getNamespacePath(c).<>(getNamespacePath(aClass))) else Sequence {} endif) else Sequence {} endif)->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 30,
      "VariableExpImpl": 56,
      "OperationCallExpImpl": 86,
      "QueryInvocationSpec": 12,
      "TypeExpImpl": 29,
      "CollectionLiteralExpImpl": 11,
      "IfExpImpl": 8,
      "PropertyCallExpImpl": 18
    },
    "properties": [
      "attribute",
      "type",
      "target",
      "clientDependency",
      "ownedParameter"
    ]
  },
  {
    "operations": {
      "filter": 1,
      "not": 2,
      "addAll": 2,
      "isEmpty": 2,
      "getAllImplementedInterfaces": 2,
      "asSequence": 2
    },
    "body": "Sequence {}->addAll(if Set {aClass.ownedTemplateSignature}->isEmpty().not() then aClass.ownedTemplateSignature.ownedParameter->asSequence() else Sequence {} endif)->addAll(if aClass.getAllImplementedInterfaces()->forAll(it : Interface | Set {it.ownedTemplateSignature}->isEmpty()).not() then aClass.getAllImplementedInterfaces()->collect(temp1 : Interface | temp1.ownedTemplateSignature)->filter(uml::TemplateSignature)->collect(temp2 : TemplateSignature | temp2.ownedParameter)->asSequence() else Sequence {} endif)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 11,
      "VariableExpImpl": 7,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 5,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "ownedParameter",
      "ownedTemplateSignature"
    ]
  },
  {
    "operations": {
      "getProperty": 1,
      "concat": 6
    },
    "body": "'src/'.concat(self.getProperty('project')).concat('/').concat(getSlashSeparatedPackagePath(aClassifier)).concat('/').concat(aClassifier.name).concat('.php')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 5,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getProperty": 2,
      "concat": 4
    },
    "body": "self.getProperty('vendor').concat('\\').concat(self.getProperty('project')).concat('\\').concat(getAntiSlashSeparatedPackagePath(aClassifier))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {
      "getProperty": 1,
      "concat": 6
    },
    "body": "'tests/'.concat(self.getProperty('project')).concat('/Tests/').concat(getSlashSeparatedPackagePath(aClassifier)).concat('/').concat(aClassifier.name).concat('Test.php')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 5,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getProperty": 2,
      "concat": 4
    },
    "body": "self.getProperty('vendor').concat('\\').concat(self.getProperty('project')).concat('\\Tests\\').concat(getAntiSlashSeparatedPackagePath(aClassifier))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "getNamespacePath(aClassifier).concat('\\').concat(aClassifier.name)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "drop": 1,
      "ancestors": 1,
      "reverse": 1,
      "sep": 1
    },
    "body": "aClassifier.ancestors(uml::Package)->collect(temp1 : Package | temp1.name)->reverse()->drop(1)->sep('/')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "drop": 1,
      "reverse": 1,
      "ancestors": 1,
      "sep": 1
    },
    "body": "aClassifier.ancestors(uml::Package)->collect(temp1 : Package | temp1.name)->reverse()->drop(1)->sep('\\')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "aProperty.upper.=(*)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "UnlimitedNaturalLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["upper"]
  },
  {
    "operations": {},
    "body": "aProperty.type",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aProperty.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "aProperty.upper.=(*)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "UnlimitedNaturalLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["upper"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "aProperty.default.<>(null)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["default"]
  },
  {
    "operations": {"=": 1},
    "body": "aProperty.type.name.=('String')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "aProperty.default",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["default"]
  },
  {
    "operations": {"=": 1},
    "body": "aProperty.type.name.=('String')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "aProperty.association.<>(null)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["association"]
  },
  {
    "operations": {},
    "body": "aProperty.visibility",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {},
    "body": "aProperty.association.visibility",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "association",
      "visibility"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "aParameter.upper.=(*)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "UnlimitedNaturalLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["upper"]
  },
  {
    "operations": {},
    "body": "aParameter.type",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "aProperty.ownedComment->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {"substituteAll": 1},
    "body": "aProperty.ownedComment->collect(temp1 : Comment | temp1.body)->collect(temp2 : String | temp2.substituteAll('\n', '\n * '))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "aProperty.isReadOnly",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isReadOnly"]
  },
  {
    "operations": {},
    "body": "aProperty",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aProperty.isReadOnly",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isReadOnly"]
  },
  {
    "operations": {},
    "body": "aProperty",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "aProperty.isStatic.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["isStatic"]
  },
  {
    "operations": {},
    "body": "aProperty",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "pDefaultValue.<>('')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "pDefaultValue",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"toUpperCase": 1},
    "body": "genName(aProperty).toUpperCase()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "pDefaultValue.<>('')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "pDefaultValue",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "pPhpType",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aProperty",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "aProperty.isStatic.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["isStatic"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "pName.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "aProperty.isStatic.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["isStatic"]
  },
  {
    "operations": {},
    "body": "pName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "pName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "pPhpType",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "pName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aProperty",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "aProperty.isStatic.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isStatic"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "pName.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"not": 1},
    "body": "isPhpScalar(pPhpType).not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "pPhpType",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "pName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "aProperty.isStatic.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isStatic"]
  },
  {
    "operations": {},
    "body": "pName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "pName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "pName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "pName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getTemplateParameters(aClass)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"selectByType": 1},
    "body": "aParameter.ownedElement->selectByType(uml::Class)->collect(temp1 : Class | temp1.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "ownedElement"
    ]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "aOperation.ownedComment->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "substituteAll": 1
    },
    "body": "aOperation.ownedComment->collect(temp1 : Comment | temp1.body)->collect(temp2 : String | temp2.toUpperFirst())->collect(temp3 : String | temp3.substituteAll('\n', '\n * '))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {
      "size": 2,
      "and": 1,
      ">": 2
    },
    "body": "aOperation.ownedComment->size().>(0).and(aOperation.ownedParameter->size().>(0))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 5,
      "IntegerLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "ownedParameter"
    ]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "op.direction.toString().=('in')",
    "type": "ForGuard",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["direction"]
  },
  {
    "operations": {},
    "body": "aOperation.ownedParameter",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedParameter"]
  },
  {
    "operations": {},
    "body": "op",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "op.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "op.direction.toString().=('return')",
    "type": "ForGuard",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["direction"]
  },
  {
    "operations": {},
    "body": "aOperation.ownedParameter",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedParameter"]
  },
  {
    "operations": {},
    "body": "op",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "op.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aOperation.visibility",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {"=": 1},
    "body": "aOperation.isStatic.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["isStatic"]
  },
  {
    "operations": {},
    "body": "aOperation.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aOperation",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toString": 1,
      "=": 1
    },
    "body": "op.direction.toString().=('in')",
    "type": "ForGuard",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["direction"]
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aOperation.ownedParameter",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedParameter"]
  },
  {
    "operations": {
      "not": 2,
      "and": 1
    },
    "body": "isPhpScalar(genPhpType(op)).not().and(isTemplateParameter(op).not())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "op",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "op.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "op.lower.=(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["lower"]
  },
  {
    "operations": {
      "and": 1,
      "toString": 1,
      "=": 1
    },
    "body": "op.direction.toString().=('in').and(isTemplateParameter(op))",
    "type": "ForGuard",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["direction"]
  },
  {
    "operations": {},
    "body": "aOperation.ownedParameter",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedParameter"]
  },
  {
    "operations": {},
    "body": "op.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "op.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toString": 1,
      "notEmpty": 1,
      "=": 1
    },
    "body": "aOperation.ownedParameter->select(temp1 : Parameter | temp1.direction.toString().=('return'))->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "direction",
      "ownedParameter"
    ]
  },
  {
    "operations": {
      "toString": 1,
      "=": 1,
      "first": 1
    },
    "body": "aOperation.ownedParameter->select(temp1 : Parameter | temp1.direction.toString().=('return'))->first().name",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "direction",
      "ownedParameter"
    ]
  }
]
