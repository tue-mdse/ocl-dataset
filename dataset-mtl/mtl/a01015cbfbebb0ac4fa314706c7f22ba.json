[
  {
    "operations": {
      "getValue": 1,
      "not": 1,
      "oclIsUndefined": 1,
      "getAppliedStereotype": 1
    },
    "body": "let stereotype : Stereotype = stereotypedElement.getAppliedStereotype(stereotypeName) in if stereotype.oclIsUndefined().not() then stereotypedElement.getValue(stereotype, propertyName) else null endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 4,
      "LetExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "=": 1,
      "first": 1
    },
    "body": "stereotypedElement.attribute->select(a : Property | a.name.=(propertyName))->asOrderedSet()->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "attribute"
    ]
  },
  {
    "operations": {
      "getAppliedStereotypes": 1,
      "=": 1
    },
    "body": "self.getAppliedStereotypes()->exists(e : Stereotype | e.name.=(name))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "getAppliedStereotypes": 1,
      "=": 1,
      "first": 1
    },
    "body": "self.getAppliedStereotypes()->select(e : Stereotype | e.name.=(name))->asOrderedSet()->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getAllAttributes": 1,
      "isEmpty": 1,
      "first": 1,
      "asSequence": 1
    },
    "body": "let a : Set(Property) = aClass.getAllAttributes()->select(aProp : Property | hasStereotypeQuery(aProp,'Id')) in if a->isEmpty() then null else a->asSequence()->first() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 4,
      "LetExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  }
]
