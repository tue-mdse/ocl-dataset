[
  {
    "operations": {
      "oclIsTypeOf": 1,
      "eContents": 1
    },
    "body": "m.eContents()->select(e : T | e.oclIsTypeOf(uml::Class))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"allAttributes": 1},
    "body": "c.allAttributes()->reject(temp1 : Property | isID(temp1))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"allAttributes": 1},
    "body": "c.allAttributes()->any(temp1 : Property | isID(temp1))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getClasses(m)->reject(temp1 : Class | isChild(temp1))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 2,
      "and": 4,
      "getOtherEnd": 2,
      "=": 2,
      "isNavigable": 1,
      "getUpper": 2
    },
    "body": "a.isNavigable().and(a.getUpper().<>(1)).and(a.aggregation.=(uml::AggregationKind::none)).and(a.getOtherEnd().getUpper().<>(1)).and(a.getOtherEnd().aggregation.=(uml::AggregationKind::none))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 13,
      "VariableExpImpl": 5,
      "EnumLiteralExpImpl": 2,
      "IntegerLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["aggregation"]
  },
  {
    "operations": {
      "and": 2,
      "getOtherEnd": 1,
      "=": 2,
      "isNavigable": 1,
      "getUpper": 2
    },
    "body": "a.isNavigable().and(a.getUpper().=(1)).and(a.getOtherEnd().getUpper().=(1))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "and": 2,
      "getOtherEnd": 1,
      "isNavigable": 1,
      "=": 1,
      "getUpper": 2
    },
    "body": "a.isNavigable().and(a.getUpper().<>(1)).and(a.getOtherEnd().getUpper().=(1))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "and": 3,
      "getOtherEnd": 1,
      "isNavigable": 1,
      "=": 2,
      "getUpper": 2
    },
    "body": "a.isNavigable().and(a.getUpper().=(1)).and(a.aggregation.=(uml::AggregationKind::none)).and(a.getOtherEnd().getUpper().<>(1))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 10,
      "VariableExpImpl": 4,
      "IntegerLiteralExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["aggregation"]
  },
  {
    "operations": {
      "<>": 3,
      "isComposite": 1,
      "getAllAttributes": 1,
      "and": 7,
      "getOtherEnd": 5,
      "implies": 3,
      "asSet": 1,
      "=": 5,
      "isNavigable": 2,
      "getAssociations": 1,
      "getUpper": 3
    },
    "body": "c.getAssociations()->collect(asc : Association | asc.getAllAttributes()->select(a : Property | a.isNavigable().and(a.getUpper().<>(0)).and(a.getOtherEnd().type.=(c)).and(a.aggregation.<>(uml::AggregationKind::none).implies(a.getOtherEnd().getUpper().=(1).and(a.getOtherEnd().aggregation.=(uml::AggregationKind::none)))).and(a.getOtherEnd().aggregation.<>(uml::AggregationKind::none).implies(a.getUpper().=(1).and(a.aggregation.=(uml::AggregationKind::none)))).and(a.isComposite().implies(a.getOtherEnd().isNavigable()))))->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 32,
      "VariableExpImpl": 14,
      "IntegerLiteralExpImpl": 3,
      "EnumLiteralExpImpl": 4,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "aggregation",
      "type"
    ]
  },
  {
    "operations": {"notEmpty": 1},
    "body": "getRelationshipAttributes(c)->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "isComposite": 1,
      "and": 1,
      "asOrderedSet": 1,
      "getOtherEnd": 1,
      "implies": 1,
      "=": 1,
      "getUpper": 1
    },
    "body": "getRelationshipAttributes(c)->select(a : Property | a.getUpper().=(1).and(a.getOtherEnd().isComposite().implies(includeParent)))->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "asSet": 1,
      "getUpper": 1
    },
    "body": "getRelationshipAttributes(c)->select(temp1 : Property | temp1.getUpper().<>(1))->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "isComposite": 1,
      "notEmpty": 1
    },
    "body": "getReferences(c,includeParent)->reject(temp1 : Property | temp1.isComposite())->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "getCollectionAttributes(c)->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"isComposite": 1},
    "body": "getCollectionAttributes(c)->select(temp1 : Property | temp1.isComposite())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"isComposite": 1},
    "body": "getCollectionAttributes(c)->reject(temp1 : Property | temp1.isComposite())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "isComposite": 1,
      "notEmpty": 1
    },
    "body": "getRelationshipAttributes(c)->select(temp1 : Property | temp1.isComposite())->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "getCompositeCollectionAttributes(c)->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "getNonCompositeCollectionAttributes(c)->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "getParentAttribute(c).<>(null)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getReferences(c,true)->any(temp1 : Property | isParentAttribute(temp1))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "isComposite": 1,
      "getOtherEnd": 1
    },
    "body": "a.getOtherEnd().isComposite()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "and": 1,
      "=": 1
    },
    "body": "Set {'String', 'Boolean', 'Date', 'Long', 'Integer', 'Image'}->exists(t : String | a.type.<>(null).and(t.=(a.type.name)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "and": 1,
      "notEmpty": 1,
      "=": 1
    },
    "body": "getRelationshipAttributes(cl)->select(a2 : Property | a2.name.<>(a.name).and(getClass(a2).name.=(getClass(a).name)))->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 3,
      "PropertyCallExpImpl": 4
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "<>": 1,
      "and": 1,
      "notEmpty": 2,
      "=": 1
    },
    "body": "getRelationshipAttributes(cl)->select(a : Property | getRelationshipAttributes(cl)->select(a2 : Property | a.name.<>(a2.name).and(getClass(a2).name.=(getClass(a).name)))->notEmpty())->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 4,
      "PropertyCallExpImpl": 4
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "and": 1,
      "allInstances": 1,
      "notEmpty": 2,
      "=": 1
    },
    "body": "uml::Class.allInstances()->select(c : Class | isGeneralization(c).and(c.generalization->select(g : Generalization | g.general.name.=(cl.name))->notEmpty()))->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "general",
      "name",
      "generalization"
    ]
  },
  {
    "operations": {"notEmpty": 1},
    "body": "cl.generalization->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["generalization"]
  },
  {
    "operations": {"allAttributes": 1},
    "body": "c.allAttributes()->exists(temp1 : Property | isDate(temp1))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "a.type.name.=('Date')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "a.type.name.=('Computed')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "a.name.=('id')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "a.name.=('name')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "'get'.concat(a.name.toUpperFirst())",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "'set'.concat(a.name.toUpperFirst())",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "allInstances": 1,
      "=": 1
    },
    "body": "uml::Class.allInstances()->any(c : Class | c.name.=(a.type.name))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "allInstances": 1,
      "notEmpty": 1,
      "=": 1,
      "first": 1,
      "asSequence": 1
    },
    "body": "uml::Class.allInstances()->select(c : Class | cl.generalization->select(g : Generalization | g.general.name.=(c.name))->notEmpty())->asSequence()->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 5,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "general",
      "name",
      "generalization"
    ]
  },
  {
    "operations": {
      "getLower": 1,
      ">": 1
    },
    "body": "self.getLower().>(0)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "or": 3,
      "and": 2,
      "getOtherEnd": 2,
      "<": 1,
      "isNavigable": 2
    },
    "body": "a.isNavigable().and(a.getOtherEnd().isNavigable().not().or(isMany2One(a)).or(isMany2Many(a).or(isOne2One(a)).and(a.name.<(a.getOtherEnd().name))))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 11,
      "QueryInvocationSpec": 3,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "<>": 1,
      "union": 1
    },
    "body": "Sequence {c}->union(if getParentAttribute(c).<>(null) then getHierarchy(getClass(getParentAttribute(c))) else Sequence {} endif)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 4,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getEAnnotation": 1,
      "=": 1
    },
    "body": "m.getEAnnotation('genmymodel').details->exists(temp1 : EStringToStringMapEntry | temp1.key.=(p))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "details",
      "key"
    ]
  },
  {
    "operations": {
      "getEAnnotation": 1,
      "=": 1
    },
    "body": "if hasProperty(m,p) then m.getEAnnotation('genmymodel').details->any(temp1 : EStringToStringMapEntry | temp1.key.=(p)).value else null endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "value",
      "details",
      "key"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "a.type.name.=('Image')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "a.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"getModel": 1},
    "body": "c.getModel().name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "getName(c).concat('Ctrl')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getName(c).concat('Model')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getName(c).concat('Module')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "isChild(c)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getName(c).concat('s')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getOtherEnd": 1,
      "toLowerFirst": 1
    },
    "body": "getParentAttribute(c).getOtherEnd().name.toLowerFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toLowerFirst": 1},
    "body": "c.name.toLowerFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "c.name.toUpperFirst().concat('DTO')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "c.name.toUpperFirst().concat('DTO')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "c.name.toUpperFirst().concat('DetailDTO')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "c.name.toUpperFirst().concat('FullDTO')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 2},
    "body": "'I'.concat(c.name).concat('Logic')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "c.name.concat('Entity')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "c.name.concat('Persistence')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toLowerCase": 1,
      "concat": 1
    },
    "body": "'co.edu.uniandes.csw.'.concat(m.name.toLowerCase())",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "concat": 2,
      "replaceAll": 1
    },
    "body": "'/src/main/java/'.concat(baseGroup(m).replaceAll('[.]', '/')).concat('/')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {
      "concat": 2,
      "replaceAll": 1
    },
    "body": "'/src/test/java/'.concat(baseGroup(m).replaceAll('[.]', '/')).concat('/')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {
      "getModel": 1,
      "+": 1,
      "concat": 2,
      "toLowerFirst": 1
    },
    "body": "baseGroup(c.getModel()).concat('.'.+(c.name.toLowerFirst())).concat(suffix)",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "m.name.concat('.logic')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "m.name.concat('.api')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "m.name.concat('.api')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toLowerCase": 1,
      "replace": 1,
      "replaceAll": 2
    },
    "body": "s.replace('^\\W+', '').replaceAll('(?!^)([A-Z])', '-$1').replaceAll('\\W+', '-').toLowerCase()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 6
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "m.name",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "getBackendProjectName(m)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getApiProjectName(m)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getWebProjectName(m)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "m.name.concat('_pool')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "'java:app/jdbc/'.concat(m.name)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "m.name.concat('PU')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "getLogicArtifactId(m).concat('/src/main/resources/META-INF/')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getLogicArtifactId(m).concat('/src/test/resources/META-INF/')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getApiArtifactId(m).concat('/src/test/resources/META-INF/')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getApiArtifactId(m).concat('/src/test/resources/')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "path.concat('beans.xml')",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "replace": 1,
      "replaceAll": 2
    },
    "body": "s.replace('^\\W+', '').replaceAll('(?!^)([A-Z])', ' $1').replaceAll('\\W+', ' ').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 6
    },
    "properties": []
  }
]
