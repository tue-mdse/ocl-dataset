[
  {
    "operations": {
      "eContainer": 1,
      "oclIsUndefined": 1
    },
    "body": "aModel.eContainer().oclIsUndefined()",
    "type": "TemplateGuard",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "aModel.eAllContents(uml::Enumeration)->collect(temp1 : Enumeration | generateEnumeration(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "aModel.eAllContents(uml::Interface)->collect(temp1 : Interface | generateInterface(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "not": 1,
      "oclIsUndefined": 1,
      "oclIsKindOf": 1,
      "and": 1,
      "notEmpty": 1,
      "oclAsType": 1,
      "eAllContents": 1
    },
    "body": "minimize(self,aModel.eAllContents(uml::Port)->select(p : Port | p.type.oclIsUndefined().not().and(p.type.oclIsKindOf(uml::Interface)))->collect(temp1 : Port | temp1.type)->collect(temp2 : Type | temp2.oclAsType(uml::Interface))->collect(temp3 : Interface | getAllBehavioralFeature(temp3)))->filter(uml::BehavioralFeature)->select(aBehavioralFeature : BehavioralFeature | getParams(aBehavioralFeature)->notEmpty())->collect(temp4 : BehavioralFeature | generateParams(temp4))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 6,
      "VariableExpImpl": 9,
      "OperationCallExpImpl": 8,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 3,
      "TypeExpImpl": 4,
      "PropertyCallExpImpl": 3
    },
    "properties": ["type"]
  },
  {
    "operations": {"eAllContents": 1},
    "body": "aModel.eAllContents(uml::Class)->collect(temp1 : Class | generateClass(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "aModel.eAllContents(uml::Port)->select(itPort : Port | isProviderSync(itPort))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getInterfacesPortProvider(aPort)->collect(temp1 : Interface | generateSyncProvider(temp1,aPort))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "aModel.eAllContents(uml::Port)->select(itPort : Port | isUserSync(itPort))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getInterfacesPortUser(aPort)->collect(temp1 : Interface | generateSyncUser(temp1,aPort))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "aModel.eAllContents(uml::Port)->select(itPort : Port | isProviderASync(itPort))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getInterfacesPortProvider(aPort)->collect(temp1 : Interface | generateAsyncProvider(temp1,aPort))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "aModel.eAllContents(uml::Port)->select(itPort : Port | isUserASync(itPort))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getInterfacesPortUser(aPort)->collect(temp1 : Interface | generateAsyncUser(temp1,aPort))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "aModel.eAllContents(uml::Port)->select(itPort : Port | isEmitter(itPort))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getInterfacesPortUser(aPort)->collect(temp1 : Interface | generateEmitter(temp1,aPort))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "aModel.eAllContents(uml::Port)->select(itPort : Port | isReceiver(itPort))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getInterfacesPortProvider(aPort)->collect(temp1 : Interface | generateReceiver(temp1,aPort))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  }
]
