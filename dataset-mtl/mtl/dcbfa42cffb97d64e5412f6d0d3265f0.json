[
  {
    "operations": {"eContainer": 1},
    "body": "aServiceProvider.eContainer(adaptorinterface::AdaptorInterface)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "not": 2,
      "oclIsUndefined": 1,
      "size": 1,
      "and": 1,
      "concat": 2,
      "equalsIgnoreCase": 1,
      "toLowerFirst": 1,
      "=": 1,
      "oclAsType": 1,
      "sep": 1
    },
    "body": "let name : String = if containingAdaptorInterface(aServiceProvider).serviceProviderCatalog.serviceProviders->size().=(1) then 'ServiceProvider' else if aServiceProvider.serviceNamespace.oclIsUndefined().not().and(aServiceProvider.serviceNamespace.equalsIgnoreCase('').not()) then javaString(aServiceProvider.serviceNamespace,true).concat('ServiceProvider') else concatenate(servicedResources(aServiceProvider)->collect(temp1 : Resource | javaName(temp1,true))->sep('', 'And', '')->collect(temp2 : OclAny | temp2.oclAsType(oclstdlib::String))).concat('ServiceProvider') endif endif in if toUpperFirst then name.toUpperFirst() else name.toLowerFirst() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 13,
      "VariableExpImpl": 10,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 5,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 7,
      "TypeExpImpl": 1,
      "IfExpImpl": 3,
      "PropertyCallExpImpl": 5,
      "BooleanLiteralExpImpl": 2
    },
    "properties": [
      "serviceNamespace",
      "serviceProviders",
      "serviceProviderCatalog"
    ]
  },
  {
    "operations": {
      "flatten": 1,
      "asSet": 1
    },
    "body": "aServiceProvider.services->collectNested(aService : Service | servicedResources(aService))->flatten()->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["services"]
  },
  {
    "operations": {
      "flatten": 1,
      "asSet": 1
    },
    "body": "aServiceProvider.services->collectNested(aService : Service | relevantResources(aService))->flatten()->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["services"]
  },
  {
    "operations": {
      "flatten": 1,
      "asSet": 1
    },
    "body": "aServiceProvider.services->collectNested(aService : Service | relevantDomainSpecifications(aService))->flatten()->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["services"]
  },
  {
    "operations": {
      "union": 4,
      "asSet": 5
    },
    "body": "aService.creationFactories->collect(temp1 : CreationFactory | temp1.resourceTypes)->asSet()->union(aService.queryCapabilities->collect(temp2 : QueryCapability | temp2.resourceTypes)->asSet())->union(aService.basicCapabilities->collect(temp3 : BasicCapability | temp3.resourceTypes)->asSet())->union(aService.creationDialogs->collect(temp4 : Dialog | temp4.resourceTypes)->asSet())->union(aService.selectionDialogs->collect(temp5 : Dialog | temp5.resourceTypes)->asSet())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 5,
      "VariableExpImpl": 10,
      "OperationCallExpImpl": 9,
      "PropertyCallExpImpl": 10
    },
    "properties": [
      "resourceTypes",
      "queryCapabilities",
      "creationDialogs",
      "resourceTypes",
      "resourceTypes",
      "creationFactories",
      "resourceTypes",
      "basicCapabilities",
      "selectionDialogs"
    ]
  },
  {
    "operations": {
      "flatten": 1,
      "union": 1,
      "asSet": 1
    },
    "body": "servicedResources(aService)->union(servicedResources(aService)->collect(temp1 : Resource | allRelatedResources(temp1)))->flatten()->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 3
    },
    "properties": []
  },
  {
    "operations": {
      "flatten": 1,
      "union": 2,
      "asSet": 2
    },
    "body": "relevantResources(aService)->collectNested(aResource : Resource | Set {definingDomainSpecification(aResource)}->union(allProperties(aResource)->asSet()->collectNested(aResourceProperty : ResourceProperty | definingDomainSpecification(aResourceProperty))))->flatten()->asSet()->union(Set {aService.domainSpecification})",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 4,
      "CollectionLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["domainSpecification"]
  },
  {
    "operations": {"concat": 1},
    "body": "javaClassBaseNamespace(containingAdaptorInterface(aServiceProvider)).concat('.services')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "javaName(aServiceProvider,true).concat('Service')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "javaClassPackageNameForService(aServiceProvider).concat('.').concat(javaClassNameForService(aServiceProvider))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "substituteAll": 1,
      "concat": 3
    },
    "body": "concatenatePaths(javaFilesBasePath(containingAdaptorInterface(aServiceProvider)),javaClassPackageNameForService(aServiceProvider).substituteAll('.', '/')).concat('/').concat(javaClassNameForService(aServiceProvider)).concat('.java')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 5,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "javaClassBaseNamespace(containingAdaptorInterface(aServiceProvider))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "javaName(aServiceProvider,true).concat('Info')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "javaClassPackageName(aServiceProvider).concat('.').concat(javaClassName(aServiceProvider))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "substituteAll": 1,
      "concat": 3
    },
    "body": "concatenatePaths(javaFilesBasePath(containingAdaptorInterface(aServiceProvider)),javaClassPackageName(aServiceProvider).substituteAll('.', '/')).concat('/').concat(javaClassName(aServiceProvider)).concat('.java')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 5,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "javaClassBaseNamespace(containingAdaptorInterface(aServiceProvider)).concat('.servlet')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "javaName(aServiceProvider,true).concat('sFactory')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "javaClassPackageNameForFactory(aServiceProvider).concat('.').concat(javaClassNameForFactory(aServiceProvider))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "substituteAll": 1,
      "concat": 3
    },
    "body": "concatenatePaths(javaFilesBasePath(containingAdaptorInterface(aServiceProvider)),javaClassPackageNameForFactory(aServiceProvider).substituteAll('.', '/')).concat('/').concat(javaClassNameForFactory(aServiceProvider)).concat('.java')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 5,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {
      "not": 2,
      "oclIsUndefined": 1,
      "size": 1,
      "and": 1,
      "toString": 1,
      "concat": 1,
      "equalsIgnoreCase": 1,
      "indexOf": 1,
      "=": 1
    },
    "body": "if aServiceProvider.serviceNamespace.oclIsUndefined().not().and(aServiceProvider.serviceNamespace.equalsIgnoreCase('').not()) then aServiceProvider.serviceNamespace else if containingAdaptorInterface(aServiceProvider).serviceProviderCatalog.serviceProviders->size().=(1) then 'serviceProviders' else 'serviceProviders'.concat(containingAdaptorInterface(aServiceProvider).serviceProviderCatalog.serviceProviders->indexOf(aServiceProvider).toString()) endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 10,
      "VariableExpImpl": 6,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 7
    },
    "properties": [
      "serviceNamespace",
      "serviceProviders",
      "serviceProviderCatalog"
    ]
  },
  {
    "operations": {},
    "body": "''",
    "type": "QueryExpression",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "JAXRSConcatURISegments(serviceBaseURI(aServiceProvider),collectionURISegment(aServiceProvider))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 3
    },
    "properties": []
  },
  {
    "operations": {
      "not": 2,
      "oclIsUndefined": 1,
      "and": 1,
      "equalsIgnoreCase": 1
    },
    "body": "if aServiceProvider.instanceID.oclIsUndefined().not().and(aServiceProvider.instanceID.equalsIgnoreCase('').not()) then aServiceProvider.instanceID else '{serviceProviderId}' endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": ["instanceID"]
  },
  {
    "operations": {},
    "body": "JAXRSConcatURISegments(serviceBaseURI(aServiceProvider),instanceURISegment(aServiceProvider))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 3
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "JAXRSPathParameters(instanceURI(aServiceProvider))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "JAXRSPathParameters(instanceURI(aServiceProvider))",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aPathParameter",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aPathParameter",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "instanceCompositeID(aServiceProvider)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "instanceCompositeID",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "instanceCompositeID(aServiceProvider)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "instanceCompositeID",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  }
]
