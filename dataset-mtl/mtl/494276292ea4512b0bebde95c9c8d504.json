[
  {
    "operations": {
      "not": 1,
      "asSequence": 1
    },
    "body": "seq->select(op : Operation | op.isAbstract.not())->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isAbstract"]
  },
  {
    "operations": {"asSequence": 1},
    "body": "seq->select(op : Operation | op.isAbstract)->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isAbstract"]
  },
  {
    "operations": {"asSequence": 1},
    "body": "seq->select(op : Operation | op.isStatic)->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isStatic"]
  },
  {
    "operations": {
      "not": 1,
      "asSequence": 1
    },
    "body": "seq->select(op : Operation | op.isStatic.not())->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isStatic"]
  },
  {
    "operations": {"=": 1},
    "body": "self.visibility.=(uml::VisibilityKind::private)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {"=": 1},
    "body": "self.visibility.=(uml::VisibilityKind::public)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {"asSequence": 1},
    "body": "seq->select(op : Operation | isPrivate(op))->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "asSequence": 1
    },
    "body": "seq->select(op : Operation | isPrivate(op).not())->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"asSequence": 1},
    "body": "seq->select(op : Operation | isPublic(op))->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "asSequence": 1
    },
    "body": "seq->select(op : Operation | isPublic(op).not())->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsUndefined": 1},
    "body": "if self.type.oclIsUndefined() then 'void' else getType(self.type) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "if hasStereotype(o,'embedded_C::Inline') then true else false endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "if hasStereotype(o,'embedded_C::asm') then true else false endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"asSequence": 1},
    "body": "seq->select(op : Operation | isInline(op))->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "asSequence": 1
    },
    "body": "seq->select(op : Operation | isInline(op).not())->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getValue": 1,
      "not": 1,
      "oclAsType": 1,
      "=": 1,
      "getAppliedStereotype": 1
    },
    "body": "if hasStereotype(o,'embedded_C::Inline') then o.getValue(o.getAppliedStereotype('embedded_C::Inline'), 'Condition').oclAsType(uml::EnumerationLiteral).name.=('None').not() else true endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 4,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getValue": 1,
      "oclAsType": 1,
      "getAppliedStereotype": 1
    },
    "body": "if hasStereotype(o,'embedded_C::Inline') then o.getValue(o.getAppliedStereotype('embedded_C::Inline'), 'Condition').oclAsType(uml::EnumerationLiteral).name else '' endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 4,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getValue": 1,
      "getAppliedStereotype": 1
    },
    "body": "if hasStereotype(o,'embedded_C::Inline') then o.getValue(o.getAppliedStereotype('embedded_C::Inline'), 'Value') else o.name endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"asSequence": 1},
    "body": "seq->select(op : Operation | isVirtual(op))->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "asSequence": 1
    },
    "body": "seq->select(op : Operation | isVirtual(op).not())->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "if o.isLeaf then false else true endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 2
    },
    "properties": ["isLeaf"]
  }
]
