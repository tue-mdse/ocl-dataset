[
  {
    "operations": {},
    "body": "self.region",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["region"]
  },
  {
    "operations": {
      "filter": 1,
      "=": 1
    },
    "body": "self.subvertex->filter(uml::Pseudostate)->select(temp1 : Pseudostate | temp1.kind.=(uml::PseudostateKind::initial))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "kind",
      "subvertex"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "aRegion.transition->select(temp1 : Transition | temp1.source.=(aPsuedostate))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "transition",
      "source"
    ]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "aRegion.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "self.target.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "target"
    ]
  },
  {
    "operations": {},
    "body": "aStateMachine.region",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["region"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "aClass.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "self.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "self.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "self.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "self.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "self.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aRegion",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStateMachine.region",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["region"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "aClass.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aRegion.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "aClass.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "self.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "self.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "filter": 1,
      "not": 1,
      "or": 1,
      "isEmpty": 3,
      "=": 2
    },
    "body": "self.subvertex->filter(uml::State)->select(temp1 : State | Set {temp1.entry}->isEmpty().=(false).or(Set {temp1.doActivity}->isEmpty().=(false)))->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 3,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 2,
      "PropertyCallExpImpl": 3,
      "BooleanLiteralExpImpl": 2
    },
    "properties": [
      "entry",
      "doActivity",
      "subvertex"
    ]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "self.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "filter": 1,
      "or": 1,
      "asOrderedSet": 1,
      "isEmpty": 2,
      "=": 2
    },
    "body": "self.subvertex->filter(uml::State)->select(temp1 : State | Set {temp1.entry}->isEmpty().=(false).or(Set {temp1.doActivity}->isEmpty().=(false)))->asOrderedSet()",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 3,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 2,
      "PropertyCallExpImpl": 3,
      "BooleanLiteralExpImpl": 2
    },
    "properties": [
      "entry",
      "doActivity",
      "subvertex"
    ]
  },
  {
    "operations": {},
    "body": "self.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "Set {aState.entry}->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["entry"]
  },
  {
    "operations": {},
    "body": "aState.entry.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "entry",
      "name"
    ]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "Set {aState.doActivity}->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["doActivity"]
  },
  {
    "operations": {},
    "body": "aState.doActivity.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "doActivity"
    ]
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "PureTransitions(aStateMachine)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "aClass.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStateMachine.region",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["region"]
  },
  {
    "operations": {
      "size": 1,
      "oclIsTypeOf": 1,
      "and": 1,
      "=": 1,
      ">": 1
    },
    "body": "self.transition->select(temp1 : Transition | temp1.name.=(transName).and(temp1.source.oclIsTypeOf(uml::State)))->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 5,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "transition",
      "name",
      "source"
    ]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "aRegion.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aRegion.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "aRegion.transition->select(temp1 : Transition | temp1.name.=(transName))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "transition",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "aTransition.source.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "source"
    ]
  },
  {
    "operations": {"notEmpty": 1},
    "body": "Set {aTransition.guard}->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["guard"]
  },
  {
    "operations": {"trim": 1},
    "body": "generateMixiedConstraint(aTransition.guard).trim()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["guard"]
  },
  {
    "operations": {
      "notEmpty": 1,
      "oclAsType": 1
    },
    "body": "Set {aTransition.source.oclAsType(uml::State).exit}->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "source",
      "exit"
    ]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "aTransition.source.oclAsType(uml::State).exit.name",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "source",
      "exit"
    ]
  },
  {
    "operations": {
      "filter": 1,
      "notEmpty": 1
    },
    "body": "aTransition.ownedElement->filter(uml::Behavior)->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {"filter": 1},
    "body": "aTransition.ownedElement->filter(uml::Behavior)->collect(temp1 : Behavior | temp1.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "ownedElement"
    ]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "aRegion.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aTransition.target.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "target"
    ]
  },
  {
    "operations": {"notEmpty": 1},
    "body": "Set {aTransition.guard}->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["guard"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "aConstraint.specification.oclIsTypeOf(uml::LiteralBoolean)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["specification"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "aConstraint.specification.oclIsTypeOf(uml::LiteralInteger)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["specification"]
  },
  {
    "operations": {},
    "body": "aConstraint.specification.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "specification"
    ]
  },
  {
    "operations": {"integerValue": 1},
    "body": "aConstraint.specification.integerValue()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["specification"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "aConstraint.specification.oclIsTypeOf(uml::LiteralReal)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["specification"]
  },
  {
    "operations": {},
    "body": "aConstraint.specification.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "specification"
    ]
  },
  {
    "operations": {"realValue": 1},
    "body": "aConstraint.specification.realValue()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["specification"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "aConstraint.specification.oclIsTypeOf(uml::LiteralString)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["specification"]
  },
  {
    "operations": {},
    "body": "aConstraint.specification.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "specification"
    ]
  },
  {
    "operations": {"stringValue": 1},
    "body": "aConstraint.specification.stringValue()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["specification"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "aConstraint.specification.oclIsTypeOf(uml::LiteralNull)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["specification"]
  },
  {
    "operations": {},
    "body": "aConstraint.specification.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "specification"
    ]
  },
  {
    "operations": {},
    "body": "aConstraint.specification.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "specification"
    ]
  },
  {
    "operations": {"booleanValue": 1},
    "body": "aConstraint.specification.booleanValue()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["specification"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStateMachine.region",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["region"]
  },
  {
    "operations": {
      "filter": 1,
      "size": 1,
      "isEmpty": 1,
      "=": 1,
      ">": 1
    },
    "body": "self.subvertex->filter(uml::State)->select(temp1 : State | Set {temp1.doActivity}->isEmpty().=(false))->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "doActivity",
      "subvertex"
    ]
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "isEmpty": 1,
      "=": 1
    },
    "body": "aRegion.subvertex->filter(uml::State)->select(temp1 : State | Set {temp1.doActivity}->isEmpty().=(false))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "doActivity",
      "subvertex"
    ]
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aState.doActivity",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["doActivity"]
  },
  {
    "operations": {},
    "body": "aClass.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aBehavior.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStateMachine.region",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["region"]
  },
  {
    "operations": {
      "filter": 1,
      "size": 1,
      "isEmpty": 1,
      "=": 1,
      ">": 1
    },
    "body": "self.subvertex->filter(uml::State)->select(temp1 : State | Set {temp1.entry}->isEmpty().=(false))->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 5,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "entry",
      "subvertex"
    ]
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "isEmpty": 1,
      "=": 1
    },
    "body": "aRegion.subvertex->filter(uml::State)->select(temp1 : State | Set {temp1.entry}->isEmpty().=(false))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "entry",
      "subvertex"
    ]
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aState.entry",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["entry"]
  },
  {
    "operations": {},
    "body": "aClass.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aBehavior.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStateMachine.region",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["region"]
  },
  {
    "operations": {
      "filter": 1,
      "size": 1,
      "isEmpty": 1,
      "=": 1,
      ">": 1
    },
    "body": "aRegion.subvertex->filter(uml::State)->select(temp1 : State | Set {temp1.exit}->isEmpty().=(false))->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "subvertex",
      "exit"
    ]
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "isEmpty": 1,
      "=": 1
    },
    "body": "aRegion.subvertex->filter(uml::State)->select(temp1 : State | Set {temp1.exit}->isEmpty().=(false))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "subvertex",
      "exit"
    ]
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aState.exit",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["exit"]
  },
  {
    "operations": {},
    "body": "aClass.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aBehavior.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  }
]
