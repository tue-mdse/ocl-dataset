[
  {
    "operations": {},
    "body": "if impl then '' else '= 0' endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "if feature.type.name.=('Boolean') then 'is' else 'get' endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "'set'.concat(self.name.toUpperFirst())",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "getterPrefix(self).concat(self.name.toUpperFirst())",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "if self.oclIsKindOf(uml::Pin) then myInputPinName(self) else myElementQualifiedName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "concat": 2
    },
    "body": "if self.oclIsKindOf(uml::InputPin) then 'InputPin'.concat('_').concat(myElementQualifiedName(anElement)) else myOutputPinName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "concat": 2
    },
    "body": "if self.oclIsKindOf(uml::OutputPin) then 'OutputPin'.concat('_').concat(myElementQualifiedName(anElement)) else myElementQualifiedName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 3,
      "oclIsUndefined": 4,
      "or": 1,
      "and": 3,
      "concat": 1,
      "oclAsType": 2,
      "=": 1
    },
    "body": "if self.namespace.oclIsUndefined().or(''.=(self.namespace)).and(self.owner.oclIsUndefined().not()).and(self.owner.oclAsType(uml::NamedElement).qualifiedName.oclIsUndefined().not()).and(self.qualifiedName.oclIsUndefined().not()) then self.owner.oclAsType(uml::NamedElement).qualifiedName.concat(self.qualifiedName) else myLiteralSpecificationName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 15,
      "VariableExpImpl": 8,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 9
    },
    "properties": [
      "qualifiedName",
      "namespace",
      "owner"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "and": 1,
      "concat": 2
    },
    "body": "if self.oclIsKindOf(uml::LiteralSpecification).and(true) then myValuSpecName(self).concat('_').concat(mySlotName(self.owner)) else myValuSpecName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 3,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["owner"]
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "oclAsType": 1
    },
    "body": "if self.oclIsTypeOf(uml::Slot) then self.oclAsType(uml::Slot).definingFeature.name else myOwnerName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "definingFeature",
      "name"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "eContainingFeature": 1,
      "concat": 4,
      "eClass": 1
    },
    "body": "if self.oclIsKindOf(uml::ValueSpecification) then myOwnerName(self.owner).concat('_').concat(self.eContainingFeature().name).concat('_').concat(anElement.eClass().name) else myParameterReturnName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "owner"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "oclAsType": 1
    },
    "body": "if self.oclIsKindOf(uml::NamedElement) then myQualifiedName(self.oclAsType(uml::NamedElement)) else myOwnerName(self.owner) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["owner"]
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "or": 1,
      "oclIsKindOf": 1,
      "and": 2,
      "concat": 1,
      "oclAsType": 2,
      "=": 2
    },
    "body": "if self.oclIsKindOf(uml::Parameter).and(self.name.oclIsUndefined().or(''.=(self.name))).and(self.oclAsType(uml::Parameter).direction.=(uml::ParameterDirectionKind::return)) then myQualifiedName(self.owner.oclAsType(uml::NamedElement)).concat('_return') else myParameterName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 10,
      "VariableExpImpl": 6,
      "QueryInvocationSpec": 2,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "owner",
      "name",
      "direction"
    ]
  },
  {
    "operations": {
      "not": 1,
      "oclIsKindOf": 1,
      "and": 1,
      "concat": 2,
      "=": 1,
      "oclAsType": 2
    },
    "body": "if self.oclIsKindOf(uml::Parameter).and(self.oclAsType(uml::Parameter).direction.=(uml::ParameterDirectionKind::return).not()) then myQualifiedName(self.owner.oclAsType(uml::NamedElement)).concat('_').concat(myName(self)) else myAssociationName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 3,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "owner",
      "direction"
    ]
  },
  {
    "operations": {
      "or": 1,
      "oclIsUndefined": 1,
      "last": 1,
      "oclIsKindOf": 1,
      "and": 1,
      "concat": 3,
      "oclAsType": 2,
      "=": 1,
      "first": 1
    },
    "body": "if self.oclIsKindOf(uml::Association).and(self.name.oclIsUndefined().or(''.=(self.name))) then 'A_'.concat(myPropetyName(self.oclAsType(uml::Association).memberEnd->first())).concat('_').concat(myPropetyName(self.oclAsType(uml::Association).memberEnd->last())) else myObjectFlowName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 12,
      "QueryInvocationSpec": 3,
      "TypeExpImpl": 3,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "name",
      "memberEnd"
    ]
  },
  {
    "operations": {
      "or": 1,
      "oclIsUndefined": 1,
      "oclIsKindOf": 1,
      "and": 1,
      "concat": 3,
      "oclAsType": 2,
      "=": 1
    },
    "body": "if self.oclIsKindOf(uml::ObjectFlow).and(self.name.oclIsUndefined().or(''.=(self.name))) then 'OF_'.concat(myQualifiedName(self.oclAsType(uml::ObjectFlow).source)).concat('_').concat(myQualifiedName(self.oclAsType(uml::ObjectFlow).target)) else myControlFlowName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 10,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 3,
      "TypeExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "name",
      "target",
      "source"
    ]
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "or": 1,
      "oclIsKindOf": 1,
      "and": 1,
      "concat": 3,
      "=": 1,
      "oclAsType": 2
    },
    "body": "if self.oclIsKindOf(uml::ControlFlow).and(self.name.oclIsUndefined().or(''.=(self.name))) then 'CF_'.concat(myQualifiedName(self.oclAsType(uml::ControlFlow).source)).concat('_').concat(myQualifiedName(self.oclAsType(uml::ControlFlow).target)) else myExtensionEndName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 10,
      "VariableExpImpl": 6,
      "QueryInvocationSpec": 3,
      "TypeExpImpl": 3,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "name",
      "target",
      "source"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "concat": 4,
      "oclAsType": 1
    },
    "body": "if self.oclIsKindOf(uml::ExtensionEnd) then 'ExtensionEnd'.concat('_').concat(self.name).concat('_').concat(myQualifiedName(self.oclAsType(uml::ExtensionEnd).type)) else myAssOwnedPropName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 6,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 2,
      "or": 1,
      "oclIsKindOf": 1,
      "and": 2,
      "concat": 2,
      "oclAsType": 3,
      "=": 1,
      "toLowerFirst": 1
    },
    "body": "if self.oclIsKindOf(uml::Property).and(self.name.oclIsUndefined().or(''.=(self.name))).and(self.oclAsType(uml::Property).association.oclIsUndefined().not()) then myQualifiedName(self.oclAsType(uml::Property).association).concat('_').concat(self.oclAsType(uml::Property).type.name.toLowerFirst()) else myOperationName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 14,
      "VariableExpImpl": 7,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 4,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "association",
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "concat": 2,
      "oclAsType": 2
    },
    "body": "if self.oclIsKindOf(uml::Operation) then myName(self.oclAsType(uml::Operation)).concat('_').concat(genParameterTypeList(self.oclAsType(uml::Operation))) else myRedefinedTemplateSignature(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 5,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 3,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "oclIsKindOf": 1,
      "and": 1,
      "concat": 1,
      "oclAsType": 1
    },
    "body": "if self.oclIsKindOf(uml::RedefinableTemplateSignature).and(self.owner.oclIsUndefined().not()) then myQualifiedName(self.owner.oclAsType(uml::NamedElement)).concat('_RedefinableTemplateSignature') else myInterfaceRelationName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 6,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["owner"]
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "or": 1,
      "oclIsKindOf": 1,
      "and": 1,
      "asOrderedSet": 1,
      "concat": 3,
      "=": 1,
      "oclAsType": 2,
      "first": 1
    },
    "body": "if self.oclIsKindOf(uml::InterfaceRealization).and(self.name.oclIsUndefined().or(''.=(self.name))) then 'IR_'.concat(myQualifiedName(self.oclAsType(uml::InterfaceRealization).contract)).concat('_').concat(myQualifiedName(self.oclAsType(uml::InterfaceRealization).client->asOrderedSet()->first())) else myDependencyName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 6,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 3,
      "TypeExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "contract",
      "name",
      "client"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "asOrderedSet": 2,
      "concat": 3,
      "oclAsType": 2,
      "first": 2
    },
    "body": "if self.oclIsKindOf(uml::Dependency) then 'Dependency_'.concat(myQualifiedName(self.oclAsType(uml::Dependency).client->asOrderedSet()->first())).concat('_').concat(myQualifiedName(self.oclAsType(uml::Dependency).supplier->asOrderedSet()->first())) else myName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 10,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 3,
      "TypeExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "supplier",
      "client"
    ]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 2,
      "or": 1,
      "and": 1,
      "concat": 2,
      "=": 1,
      "oclAsType": 1
    },
    "body": "if self.qualifiedName.oclIsUndefined().or(''.=(self.qualifiedName)).and(self.name.oclIsUndefined().not()) then myQualifiedName(self.oclAsType(uml::Property).type).concat('_').concat(anElement.name) else anElement.qualifiedName endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 6,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "qualifiedName",
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "or": 3,
      "oclIsUndefined": 2,
      "=": 2,
      "toLowerFirst": 1
    },
    "body": "if self.name.oclIsUndefined().or(self.qualifiedName.oclIsUndefined()).or(''.=(self.name)).or(''.=(self.qualifiedName)) then self.type.qualifiedName.toLowerFirst() else myName(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 8,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "qualifiedName",
      "name",
      "type"
    ]
  },
  {
    "operations": {"toLowerFirst": 1},
    "body": "sanitize(myQualifiedName(anElement)).toLowerFirst()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {"toUpperCase": 1},
    "body": "memberName(self).toUpperCase()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpperCase": 1},
    "body": "aEClass.name.toUpperCase()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "substituteAll": 1,
      "concat": 3
    },
    "body": "if self.oclIsUndefined() then 'nullptr' else needMetaModelPackageGetter(anElement1,anElement2).concat('get_').concat(myQualifiedName(anElement1).substituteAll('::', '_')).concat('()') endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 5,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "concat": 3
    },
    "body": "if self.oclIsUndefined() then 'nullptr' else MetaModelPackageGetter(anElement1).concat('get_').concat(sanitize(myQualifiedName(anElement1))).concat('()') endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "getNearestPackage": 2,
      "concat": 4
    },
    "body": "anElement1.getNearestPackage().name.concat('::').concat(anElement1.getNearestPackage().name.toUpperFirst()).concat('Package').concat('::eInstance()->')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 3,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "getNearestPackage": 4,
      "concat": 4,
      "=": 1
    },
    "body": "if anElement1.getNearestPackage().=(anElement2.getNearestPackage()) then '' else anElement1.getNearestPackage().name.concat('::').concat(anElement1.getNearestPackage().name.toUpperFirst()).concat('Package').concat('::eInstance()->') endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 10,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {"eClass": 2},
    "body": "OrderedSet {aClass.eClass().eAllSuperTypes, aClass.eClass()}",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["eAllSuperTypes"]
  },
  {
    "operations": {
      "filter": 1,
      "concat": 2,
      "ancestors": 1,
      "=": 1,
      "first": 1,
      "eClass": 2
    },
    "body": "if aClass.ancestors()->filter(uml::Package)->first().name.=(aClass.eClass().ePackage.name) then aBaseName else aClass.eClass().ePackage.name.concat('::').concat(aBaseName) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 8,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "name",
      "ePackage",
      "name"
    ]
  },
  {
    "operations": {
      "getNearestPackage": 1,
      "concat": 2,
      "=": 1,
      "eClass": 4
    },
    "body": "if anElement.getNearestPackage().name.=(anElement.eClass().ePackage.name) then generateTypeClass(anElement.eClass()) else anElement.eClass().ePackage.name.concat('::').concat(generateTypeClass(anElement.eClass())) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 5,
      "TemplateInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "name",
      "ePackage",
      "name"
    ]
  },
  {
    "operations": {
      "concat": 2,
      "=": 1
    },
    "body": "if ns(aClass.namespace).=(ns(base.namespace)) then base.name else ns(base.namespace).concat('::').concat(base.name) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 5,
      "TemplateInvocationSpec": 3,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "namespace",
      "name"
    ]
  },
  {
    "operations": {"concat": 3},
    "body": "metaModelFactory(aType).concat('create').concat(aType.name).concat('()')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getNearestPackage": 2,
      "concat": 3
    },
    "body": "aType.getNearestPackage().name.concat('::').concat(aType.getNearestPackage().name).concat('Factory::eInstance()->')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "or": 2,
      "toLowerCase": 1,
      "concat": 1,
      "=": 3
    },
    "body": "if pack.name.=('UML').or(pack.name.=('Ecore')).or(pack.name.=('PrimitiveTypes')) then pack.name.toLowerCase().concat('Reflection') else pack.name endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 5,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": ["name"]
  },
  {
    "operations": {"replaceAll": 3},
    "body": "str.replaceAll(' ', '_').replaceAll('-', '_').replaceAll('::', '_')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 6
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "namedelement",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "''",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "toUpperCase": 1,
      "concat": 3
    },
    "body": "sanitize(myQualifiedName(namedelement)).concat('_').concat(sufix).concat('_hpp').toUpperCase()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperCase": 1,
      "concat": 3
    },
    "body": "sanitize(myQualifiedName(namedelement)).concat('_').concat(sufix).concat('_hpp').toUpperCase()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "anElement",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "anElement",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "anElement",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "impl",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "anElement",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "getNearestPackage": 1
    },
    "body": "anElement.getNearestPackage().name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "anElement",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "anElement",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "anElement",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "anElement",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "anElement",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "namedelement",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "''",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "toUpperCase": 1,
      "substituteAll": 1,
      "concat": 3
    },
    "body": "myQualifiedName(namedelement).substituteAll('::', '_').concat('_').concat(sufix).concat('_hpp').toUpperCase()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'_'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "=": 1
    },
    "body": "anOperation.ownedParameter->select(p : Parameter | p.direction.=(uml::ParameterDirectionKind::return).not())",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "direction",
      "ownedParameter"
    ]
  },
  {
    "operations": {},
    "body": "sParameter.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  }
]
