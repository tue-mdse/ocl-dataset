[
  {
    "operations": {
      "includes": 1,
      "append": 1
    },
    "body": "lb->iterate(ei : Participant; acci : OrderedSet(Participant) = la | if acci->includes(ei) then acci else acci->append(ei) endif)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 2,
      "IterateExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "includes": 1,
      "append": 1
    },
    "body": "if e.oclIsUndefined().not() then if acc->includes(e) then acc else osunion(acc,dependency(e))->append(e) endif else acc endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 8,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 2,
      "IfExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsTypeOf": 2,
      "oclIsKindOf": 1,
      "oclAsType": 3
    },
    "body": "if e.oclIsKindOf(sml::Participant) then e.oclAsType(sml::Participant) else if e.oclIsTypeOf(sml::AttributeReference) then e.oclAsType(sml::AttributeReference).entity else if e.oclIsTypeOf(sml::SituationParameterReference) then e.oclAsType(sml::SituationParameterReference).situation else null endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 6,
      "NullLiteralExpImpl": 1,
      "TypeExpImpl": 6,
      "IfExpImpl": 3,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "situation",
      "entity"
    ]
  },
  {
    "operations": {},
    "body": "e.sourceRelation->iterate(r : ComparativeRelation; acc : OrderedSet(Participant) = OrderedSet {} | add_dep(acc,participant(r.target)))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "CollectionLiteralExpImpl": 1,
      "IterateExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "target",
      "sourceRelation"
    ]
  },
  {
    "operations": {},
    "body": "e.reference->collect(temp1 : AttributeReference | temp1.sourceRelation)->iterate(r : ComparativeRelation; acc : OrderedSet(Participant) = OrderedSet {} | add_dep(acc,participant(r.target)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 2,
      "CollectionLiteralExpImpl": 1,
      "IterateExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "reference",
      "target",
      "sourceRelation"
    ]
  },
  {
    "operations": {},
    "body": "e.parameter->collect(temp1 : SituationParameterReference | temp1.sourceRelation)->iterate(r : ComparativeRelation; acc : OrderedSet(Participant) = OrderedSet {} | add_dep(acc,participant(r.target)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 2,
      "CollectionLiteralExpImpl": 1,
      "IterateExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "target",
      "sourceRelation",
      "parameter"
    ]
  },
  {
    "operations": {},
    "body": "e.links->iterate(l : Link; acc : OrderedSet(Participant) = OrderedSet {} | add_dep(acc,l.entity))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "CollectionLiteralExpImpl": 1,
      "IterateExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "entity",
      "links"
    ]
  },
  {
    "operations": {
      "oclIsTypeOf": 2,
      "oclIsKindOf": 1,
      "oclAsType": 6
    },
    "body": "if e.oclIsTypeOf(sml::RelatorParticipant) then osunion(relational_dependency(e.oclAsType(sml::RelatorParticipant)),attribute_formal_dependency(e.oclAsType(sml::RelatorParticipant))) else if e.oclIsTypeOf(sml::EntityParticipant) then osunion(participant_formal_dependency(e.oclAsType(sml::EntityParticipant)),attribute_formal_dependency(e.oclAsType(sml::EntityParticipant))) else if e.oclIsKindOf(sml::SituationParticipant) then osunion(participant_formal_dependency(e.oclAsType(sml::SituationParticipant)),situation_formal_dependency(e.oclAsType(sml::SituationParticipant))) else OrderedSet {} endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 9,
      "OperationCallExpImpl": 9,
      "QueryInvocationSpec": 9,
      "TypeExpImpl": 9,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "origin->iterate(e : Participant; acc : OrderedSet(Participant) = OrderedSet {} | add_dep(acc,e))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "CollectionLiteralExpImpl": 1,
      "IterateExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "n.oclIsTypeOf(sml::SituationType)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "oclAsType": 1
    },
    "body": "n.oclAsType(sml::SituationType).name.toUpperFirst()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "n.oclIsTypeOf(sml::EntityParticipant)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "oclAsType": 1
    },
    "body": "n.oclAsType(sml::EntityParticipant).isOfType.name.toUpperFirst()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "isOfType"
    ]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "n.oclIsTypeOf(sml::RelatorParticipant)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "oclAsType": 1
    },
    "body": "n.oclAsType(sml::RelatorParticipant).isOfType.name.toUpperFirst()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "isOfType"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"replaceAll": 1},
    "body": "name.replaceAll('\\s+', '_')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsUndefined": 1},
    "body": "rel.oclIsUndefined()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "oclIsTypeOf": 1
    },
    "body": "rel.oclIsTypeOf(ctx::PrimitiveFormalRelation).not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "self.name.=('equals')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "rel.name",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "self.name.=('greater than')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "self.name.=('less than')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "rel.name",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "filter": 1,
      "=": 1,
      "first": 1
    },
    "body": "a.sourceRelation->collect(temp1 : ComparativeRelation | temp1.target)->filter(sml::Literal)->select(l : Literal | l.dataType.name.=('Time'))->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "name",
      "target",
      "dataType",
      "sourceRelation"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"replaceAll": 2},
    "body": "l.value.replaceAll(' ', '').replaceAll('days|day', 'd')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 4,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "=": 1,
      "append": 1,
      "first": 1
    },
    "body": "f.function.parameter->iterate(q : QualitativeParameter; acc : OrderedSet(Parameter) = OrderedSet {} | acc->append(f.parameter->select(p : Parameter | p.parameter.=(q))->first()))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 3,
      "IterateExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "function",
      "parameter",
      "parameter",
      "parameter"
    ]
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "including": 2,
      "includes": 1,
      "union": 1
    },
    "body": "self->iterate(e : EntityClass; acc : Set(EntityClass) = Set {} | if acc->includes(e) then acc else if e.superclass.oclIsUndefined() then acc->including(e) else acc->including(e)->union(superclasses(Set {e.superclass})) endif endif)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 10,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 1,
      "IterateExpImpl": 1,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["superclass"]
  },
  {
    "operations": {
      "filter": 1,
      "eContainer": 1,
      "or": 1,
      "=": 2
    },
    "body": "self.eContainer(ctx::ContextModel).elements->filter(ctx::Association)->select(a : Association | a.source.=(p).or(a.target.=(p)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 5,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "target",
      "elements",
      "source"
    ]
  }
]
