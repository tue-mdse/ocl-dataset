[
  {
    "operations": {"notEmpty": 1},
    "body": "getManyAssociationsProperties(self)->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "getAllAttributes": 1,
      "and": 2,
      "asOrderedSet": 1,
      "equalsIgnoreCase": 1
    },
    "body": "aClass.getAllAttributes()->select(aProperty : Property | aProperty.name.equalsIgnoreCase('').not().and(isAssociationAttribute(aProperty)).and(isListProperty(aProperty)))->asOrderedSet()->sortedBy(temp1 : Property | temp1.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 6,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "first": 1,
      "asSequence": 1
    },
    "body": "if isAssociationAttribute(self) then Set {aDestinationProperty.association}->asSequence()->first() else null endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 1,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["association"]
  },
  {
    "operations": {
      "not": 1,
      "toString": 1,
      "equalsIgnoreCase": 1,
      "first": 1
    },
    "body": "p.association.memberEnd->select(temp1 : Property | temp1.name.toString().equalsIgnoreCase(p.name).not())->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "association",
      "name",
      "memberEnd"
    ]
  },
  {
    "operations": {
      "not": 2,
      "getAllAttributes": 1,
      "and": 4,
      "asOrderedSet": 1,
      "equalsIgnoreCase": 1
    },
    "body": "aClass.getAllAttributes()->select(aProperty : Property | aProperty.name.equalsIgnoreCase('').not().and(isAssociationAttribute(aProperty)).and(isListProperty(aProperty)).and(isObjectClass(getDatatypeByProperty(aProperty))).and(getDatatypeByProperty(aProperty).isAbstract.not()))->asOrderedSet()->sortedBy(temp1 : Property | temp1.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 9,
      "QueryInvocationSpec": 5,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "isAbstract",
      "name"
    ]
  },
  {
    "operations": {
      "not": 3,
      "getAllAttributes": 1,
      "and": 4,
      "asOrderedSet": 1,
      "equalsIgnoreCase": 1
    },
    "body": "aClass.getAllAttributes()->select(aProperty : Property | aProperty.name.equalsIgnoreCase('').not().and(isAssociationAttribute(aProperty)).and(isListProperty(aProperty).not()).and(isObjectClass(getDatatypeByProperty(aProperty))).and(getDatatypeByProperty(aProperty).isAbstract.not()))->asOrderedSet()->sortedBy(temp1 : Property | temp1.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 10,
      "QueryInvocationSpec": 5,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "isAbstract",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "isAssociationClass(aDestinationProperty.association)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["association"]
  },
  {
    "operations": {},
    "body": "isAssociationClass(aClass)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 2,
      "and": 3,
      "=": 2
    },
    "body": "isAssociationClass(aDestinationProperty.association).not().and(isAssociationClass(aClass).not()).and(aDestinationProperty.upper.=(1).and(aSourceProperty.upper.=(1)))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "association",
      "upper"
    ]
  },
  {
    "operations": {
      "not": 2,
      "and": 3,
      "-": 1,
      "=": 2
    },
    "body": "isAssociationClass(aDestinationProperty.association).not().and(isAssociationClass(aClass).not()).and(aDestinationProperty.upper.=(1.-())).and(aSourceProperty.upper.=(1))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "association",
      "upper"
    ]
  },
  {
    "operations": {
      "not": 2,
      "and": 3,
      "=": 2,
      "-": 1
    },
    "body": "isAssociationClass(aDestinationProperty.association).not().and(isAssociationClass(aClass).not()).and(aDestinationProperty.upper.=(1)).and(aSourceProperty.upper.=(1.-()))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "association",
      "upper"
    ]
  },
  {
    "operations": {
      "not": 2,
      "and": 3,
      "-": 2,
      "=": 2
    },
    "body": "isAssociationClass(aDestinationProperty.association).not().and(isAssociationClass(aClass).not()).and(aDestinationProperty.upper.=(1.-())).and(aSourceProperty.upper.=(1.-()))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "association",
      "upper"
    ]
  },
  {
    "operations": {},
    "body": "if isAssociationClass(anAssociation) then getAssociationClassByProperty(aDestinationProperty) else getDatatypeByProperty(aDestinationProperty) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 3,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "isAssociationClass(getDestinationClass(aDestinationProperty,anAssociation))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {"or": 1},
    "body": "isAssociationClass(aDestinationProperty.association).or(isObjectClass(getDatatypeByProperty(aDestinationProperty)))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 3,
      "PropertyCallExpImpl": 1
    },
    "properties": ["association"]
  },
  {
    "operations": {},
    "body": "getDatatypeByProperty(aDestinationProperty).isAbstract",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isAbstract"]
  },
  {
    "operations": {
      "not": 1,
      "and": 1
    },
    "body": "isAssociationClass(aDestinationProperty.association).not().and(isFeatureClass(getDatatypeByProperty(aDestinationProperty)))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 3,
      "PropertyCallExpImpl": 1
    },
    "properties": ["association"]
  },
  {
    "operations": {
      "<>": 1,
      "size": 1
    },
    "body": "Set {aProperty.association}->size().<>(0)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["association"]
  },
  {
    "operations": {
      "not": 3,
      "<>": 2,
      "or": 1,
      "and": 1
    },
    "body": "if isAssociationAttribute(aProperty).not() then aProperty.upper.<>(1) else isAssociationClass(aProperty.association).not().or(isAssociationClass(aProperty.class).not()).and(aProperty.upper.<>(1)) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 3,
      "IntegerLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "class",
      "association",
      "upper"
    ]
  },
  {
    "operations": {
      "and": 1,
      "isNavigable": 2
    },
    "body": "aDestinationProperty.isNavigable().and(aSourceProperty.isNavigable())",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3
    },
    "properties": []
  }
]
