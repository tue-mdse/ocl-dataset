[
  {
    "operations": {},
    "body": "aModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'checklistNewStates.json'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getAllStateMachine(aModel)->sortedBy(temp1 : StateMachine | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "selectByType": 1,
      "and": 1,
      "isEmpty": 2
    },
    "body": "asm.region->collect(temp1 : Region | getAllVertex(temp1))->selectByType(uml::State)->select(temp2 : State | temp2.region->isEmpty().and(Set {temp2.submachine}->isEmpty()))->sortedBy(temp3 : State | temp3.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "region",
      "name",
      "region",
      "submachine"
    ]
  },
  {
    "operations": {},
    "body": "is",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "specState",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "isNotNullCheck(specState->at(4))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "specState->at(4)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "specState->at(3)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "otherEscapeText(specState->at(4))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "otherEscapeText(specState->at(3))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "is",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "asm",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "condition",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "is",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aModel",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'1'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "is",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "outgoings",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "=": 1
    },
    "body": "outgoings->select(temp1 : Transition | checkTransition(temp1))->select(temp2 : Transition | temp2.visibility.<>(uml::VisibilityKind::private).or(temp2.visibility.=(null)))->select(temp3 : Transition | filterTrans(temp3))->sortedBy(temp4 : Transition | temp4.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 4,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 6,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 2,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "visibility"
    ]
  },
  {
    "operations": {
      "not": 1,
      "and": 1,
      "=": 1,
      "containingStateMachine": 1
    },
    "body": "condition.and(it.containingStateMachine().=(asm).not())",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "otherEscapeText(it.name)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "checkSameNameTransExist(it.name)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "is.oclIsTypeOf(uml::State)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "isNotNullCheck(ils.name)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "ils.name",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "isNotNullCheck(transImage)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "transImage",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "it",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'info'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "and": 1,
      "=": 1,
      "containingStateMachine": 1
    },
    "body": "condition.and(it.containingStateMachine().=(asm).not())",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "it",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'info'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "asm",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "it.source.=(it.target)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "target",
      "source"
    ]
  },
  {
    "operations": {},
    "body": "it",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "asm",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "is",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "''",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "it.name",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transInfo",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "is.oclIsTypeOf(uml::State)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "isNotNullCheck(ils.name)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"at": 1},
    "body": "transInfo->at(2)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "ils.name",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "isNotNullCheck(transImage)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "transInfo->at(2)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "transImage",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "isNotNullCheck(getOwnedRuleConstraintName(it,'info'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "otherEscapeText(transInfo->at(3))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "it",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'info'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "and": 1,
      "=": 1,
      "containingStateMachine": 1
    },
    "body": "condition.and(it.containingStateMachine().=(asm).not())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "isNotNullCheck(getOwnedRuleConstraintValue(it,'info'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "otherEscapeText(transInfo->at(4))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "it",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'info'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "genOperationInfo(self,asm).<>('')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "otherEscapeText(transInfo->at(4))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "asm",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "it.source.=(it.target)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "target",
      "source"
    ]
  },
  {
    "operations": {},
    "body": "it",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "asm",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "is",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "escapeTextForOperAndCL(otherEscapeText(transInfo->at(9)))",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "states->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "states",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "Set {curTrans}->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "otherEscapeText(curTrans.name)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "checkSameNameTransExist(curTrans.name)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "otherEscapeText(sms.name)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "is.oclIsTypeOf(uml::State)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "isNotNullCheck(ils.name)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "ils.name",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "isNotNullCheck(transImage)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "transImage",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "curTrans",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'info'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "curTrans",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'info'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "curTrans.source.=(curTrans.target)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "target",
      "source"
    ]
  },
  {
    "operations": {},
    "body": "curTrans",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "asm",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "is",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "''",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "curTrans.name",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transInfo",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "otherEscapeText(sms.name)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "is.oclIsTypeOf(uml::State)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "isNotNullCheck(ils.name)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"at": 1},
    "body": "transInfo->at(2)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "ils.name",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "isNotNullCheck(transImage)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "transInfo->at(2)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "transImage",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "isNotNullCheck(getOwnedRuleConstraintName(curTrans,'info'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "otherEscapeText(transInfo->at(3))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "curTrans",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'info'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "isNotNullCheck(getOwnedRuleConstraintValue(curTrans,'info'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "otherEscapeText(transInfo->at(4))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "curTrans",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'info'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "curTrans.source.=(curTrans.target)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "target",
      "source"
    ]
  },
  {
    "operations": {},
    "body": "curTrans",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "asm",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "is",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "escapeTextForOperAndCL(otherEscapeText(transInfo->at(9)))",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "Set {transition.target}->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["target"]
  },
  {
    "operations": {},
    "body": "isExitPoint(transition.target)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["target"]
  },
  {
    "operations": {},
    "body": "transition",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "null",
    "type": "TemplateInvocationArgument",
    "constructs": {"NullLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "asm",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "is",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "includes": 1,
      "containingStateMachine": 1
    },
    "body": "transition.containingStateMachine().submachineState->collect(temp1 : State | temp1.connection)->select(temp2 : ConnectionPointReference | temp2.exit->includes(transition.target))->collect(temp3 : ConnectionPointReference | temp3.outgoing)->select(temp4 : Transition | checkTransition(temp4))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 4,
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "submachineState",
      "exit",
      "outgoing",
      "target",
      "connection"
    ]
  },
  {
    "operations": {},
    "body": "it",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "it",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "asm",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "is",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "isChioce(transitionEnd.target)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["target"]
  },
  {
    "operations": {},
    "body": "transitionEnd.target.outgoing->select(temp1 : Transition | checkTransition(temp1))->select(temp2 : Transition | filterTrans(temp2))->sortedBy(temp3 : Transition | temp3.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "outgoing",
      "name",
      "target"
    ]
  },
  {
    "operations": {},
    "body": "it",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "first_transition",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "asm",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "is",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "otherEscapeText(it.name)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "checkSameNameTransExist(it.name)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "is.oclIsTypeOf(uml::State)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "isNotNullCheck(ils.name)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "ils.name",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "isNotNullCheck(transImage)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "transImage",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "it",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'info'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "it",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'info'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "it.source.=(it.target)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "target",
      "source"
    ]
  },
  {
    "operations": {},
    "body": "it",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "asm",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "is",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "''",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "it.name",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transInfo",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "is.oclIsTypeOf(uml::State)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "isNotNullCheck(ils.name)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"at": 1},
    "body": "transInfo->at(2)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "ils.name",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "isNotNullCheck(transImage)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "transInfo->at(2)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "transImage",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "isNotNullCheck(getOwnedRuleConstraintName(it,'info'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "otherEscapeText(transInfo->at(3))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "it",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'info'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "isNotNullCheck(getOwnedRuleConstraintValue(it,'info'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "otherEscapeText(transInfo->at(4))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "it",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'info'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "it.source.=(it.target)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "target",
      "source"
    ]
  },
  {
    "operations": {},
    "body": "it",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "asm",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "is",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "escapeTextForOperAndCL(otherEscapeText(transInfo->at(9)))",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "and": 1,
      "=": 1,
      "oclAsType": 1
    },
    "body": "vertex.oclIsTypeOf(uml::Pseudostate).and(vertex.oclAsType(uml::Pseudostate).kind.=(uml::PseudostateKind::exitPoint))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["kind"]
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "and": 1,
      "=": 1,
      "oclAsType": 1
    },
    "body": "vertex.oclIsTypeOf(uml::Pseudostate).and(vertex.oclAsType(uml::Pseudostate).kind.=(uml::PseudostateKind::choice))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["kind"]
  },
  {
    "operations": {
      "<>": 1,
      "size": 2,
      "and": 1,
      "asSet": 1,
      "=": 1,
      "oclAsType": 1,
      ">": 2
    },
    "body": "transtions->size().>(1).and(transtions->collect(temp1 : Transition | temp1.ownedRule)->select(temp2 : Constraint | temp2.name.=('info'))->collect(temp3 : Constraint | temp3.specification)->collect(temp4 : ValueSpecification | temp4.oclAsType(uml::LiteralString))->select(temp5 : LiteralString | temp5.value.<>(null))->collect(temp6 : LiteralString | temp6.value)->collect(temp7 : String | escapeTextForOperAndCL(temp7))->asSet()->size().>(1))",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 7,
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 9,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "value",
      "name",
      "ownedRule",
      "specification"
    ]
  },
  {
    "operations": {},
    "body": "it",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'info'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "transtions",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"containingStateMachine": 1},
    "body": "transition.containingStateMachine().name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "it",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'info'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "and": 1,
      "union": 2,
      "notEmpty": 3,
      "containingStateMachine": 2
    },
    "body": "if Set {state.container}->notEmpty().and(Set {state.container.state}->notEmpty()) then state.outgoing->union(getOutGoings(state.container.state)) else if state.containingStateMachine().submachineState->notEmpty() then state.outgoing->union(state.containingStateMachine().submachineState->collect(temp1 : State | getOutGoings(temp1))) else state.outgoing endif endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 9,
      "OperationCallExpImpl": 8,
      "QueryInvocationSpec": 2,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 10
    },
    "properties": [
      "container",
      "state",
      "submachineState",
      "outgoing"
    ]
  },
  {
    "operations": {
      "at": 1,
      "and": 1,
      "excluding": 1,
      "notEmpty": 3,
      "=": 1,
      "asSequence": 1
    },
    "body": "let sequence : Sequence(Transition) = state.outgoing->select(temp1 : Transition | temp1.name.=(it.name))->asSequence()->excluding(null) in if sequence->notEmpty() then sequence->at(1) else if Set {state.container}->notEmpty().and(Set {state.container.state}->notEmpty()) then getOutGoingSameWithIt(state.container.state,it) else null endif endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 9,
      "LetExpImpl": 1,
      "NullLiteralExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "container",
      "state",
      "outgoing",
      "name"
    ]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "it2.target.oclIsTypeOf(uml::State)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["target"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "it2.target.oclIsTypeOf(uml::Pseudostate)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["target"]
  },
  {
    "operations": {},
    "body": "isChioce(it2.target)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["target"]
  },
  {
    "operations": {},
    "body": "isNotNullCheck(escapeTextForOperAndCL(otherEscapeText(getExpectValue(it2))))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 4
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "defaultTagVlu",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "otherEscapeText(getExpectValue(it2))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "otherEscapeText(getTargetName(it2))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "it",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "asm",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "is",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "isNotNullCheck(getTransSpecValue(it))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "defaultTagVlu",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "it",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "otherEscapeText(getTargetName(it2))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('com.iauto.mist.spec.m2t.uml2html.util.utils', 'genOutgoings(org.eclipse.uml2.uml.State,java.lang.String, java.util.List)', Sequence {is, icontext, list})",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('com.iauto.mist.spec.m2t.uml2html.util.utils', 'genOutgoingsForStateListExtend(org.eclipse.uml2.uml.Vertex, java.util.List, java.lang.String)', Sequence {is, list, 'false'})",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 3,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('com.iauto.mist.spec.common.plugin.util.AtlDataTracker', 'getSingleStateDataByPage(org.eclipse.uml2.uml.State, java.util.List)', Sequence {is, list})",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('com.iauto.mist.spec.common.plugin.util.AtlDataTracker', 'getCommonQueryMajorName(org.eclipse.uml2.uml.State)', Sequence {is})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsTypeOf": 5,
      "and": 3,
      "=": 3,
      "oclAsType": 5
    },
    "body": "if it.target.oclIsTypeOf(uml::State) then let is : State = it.target.oclAsType(uml::State) in getMajorNameByPageFile(is) else if it.target.oclIsTypeOf(uml::Pseudostate).and(it.target.oclAsType(uml::Pseudostate).kind.=(uml::PseudostateKind::shallowHistory)) then it.target.name else if it.target.oclIsTypeOf(uml::Pseudostate).and(it.target.oclAsType(uml::Pseudostate).kind.=(uml::PseudostateKind::terminate)) then 'アプリ終了' else if it.target.oclIsTypeOf(uml::Pseudostate).and(it.target.oclAsType(uml::Pseudostate).kind.=(uml::PseudostateKind::choice)) then it.target.name else if it.target.oclIsTypeOf(uml::ConnectionPointReference) then let is : State = it.target.oclAsType(uml::ConnectionPointReference).state in getMajorNameByPageFile(is) else null endif endif endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 14,
      "OperationCallExpImpl": 16,
      "LetExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 2,
      "EnumLiteralExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 10,
      "IfExpImpl": 5,
      "PropertyCallExpImpl": 18
    },
    "properties": [
      "kind",
      "state",
      "name",
      "target"
    ]
  },
  {
    "operations": {
      "or": 2,
      "and": 1,
      "notEmpty": 2,
      "equalsIgnoreCase": 1,
      "startsWith": 4
    },
    "body": "if Set {it}->notEmpty().and(Set {it.name}->notEmpty()) then let itName : String = it.name in if itName.startsWith('interrupt_').or(itName.startsWith('INT@')) then false else if itName.startsWith('HDKey_').or(itName.startsWith('HDK@')) then if itName.equalsIgnoreCase('HDK@back') then true else false endif else true endif endif else false endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 8,
      "OperationCallExpImpl": 10,
      "LetExpImpl": 1,
      "StringLiteralExpImpl": 5,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 4,
      "BooleanLiteralExpImpl": 5,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('com.iauto.mist.spec.common.plugin.util.AtlDataTracker', 'getStatePageTriggerTransitonImage(org.eclipse.uml2.uml.State, org.eclipse.uml2.uml.Transition)', Sequence {is, it})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('com.iauto.mist.spec.m2t.uml2html.util.utils', 'delCoverTransFromDefault(java.lang.String, java.util.List, org.eclipse.uml2.uml.Model)', Sequence {transName, transInfo, aModel})",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('com.iauto.mist.spec.m2t.uml2html.util.utils', 'initJsObjLoad(org.eclipse.uml2.uml.Model)', Sequence {aModel})",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  }
]
