[
  {
    "operations": {
      "or": 1,
      "getAppliedStereotypes": 2,
      "=": 2
    },
    "body": "c.getAppliedStereotypes()->exists(temp1 : Stereotype | temp1.name.=('Entity')).or(c.getAppliedStereotypes()->exists(temp2 : Stereotype | temp2.name.=('CRUD')))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getAppliedStereotypes": 1,
      "=": 1
    },
    "body": "p.getAppliedStereotypes()->exists(temp1 : Stereotype | temp1.name.=('Validity'))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getValue": 1,
      "<>": 1,
      "oclAsType": 1,
      "getAppliedStereotype": 2
    },
    "body": "if p.getAppliedStereotype('GeneratorProfile::Validity').<>(null) then p.getValue(p.getAppliedStereotype('GeneratorProfile::Validity'), 'min').oclAsType(oclstdlib::Integer) else null endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "NullLiteralExpImpl": 2,
      "StringLiteralExpImpl": 3,
      "TypeExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getValue": 1,
      "<>": 1,
      "oclAsType": 1,
      "getAppliedStereotype": 2
    },
    "body": "if p.getAppliedStereotype('GeneratorProfile::Validity').<>(null) then p.getValue(p.getAppliedStereotype('GeneratorProfile::Validity'), 'max').oclAsType(oclstdlib::Integer) else null endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 5,
      "NullLiteralExpImpl": 2,
      "StringLiteralExpImpl": 3,
      "TypeExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getValue": 1,
      "<>": 1,
      "and": 1,
      "=": 1,
      "oclAsType": 1,
      "getAppliedStereotype": 2
    },
    "body": "p.getAppliedStereotype('GeneratorProfile::confidentiality').<>(null).and(p.getValue(p.getAppliedStereotype('GeneratorProfile::confidentiality'), 'acknowledgement').oclAsType(uml::EnumerationLiteral).name.=('Nobody'))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 3,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 4,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getAppliedStereotypes": 1,
      "=": 1
    },
    "body": "c.getAppliedStereotypes()->exists(temp1 : Stereotype | temp1.name.=('Entity'))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "profile_isEntity(c)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "a.memberEnd->forAll(temp1 : Property | profile_isEntity(temp1.type))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "type",
      "memberEnd"
    ]
  },
  {
    "operations": {},
    "body": "e.classifier->collect(temp1 : Classifier | profile_isEntity(temp1))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["classifier"]
  },
  {
    "operations": {
      "or": 1,
      "getAppliedStereotypes": 1,
      "=": 1
    },
    "body": "profile_isEntity(c).or(c.getAppliedStereotypes()->exists(temp1 : Stereotype | temp1.name.=('ValueObject')))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"eAllContents": 1},
    "body": "m.eAllContents(uml::Class)->select(temp1 : Class | profile_isEntity(temp1))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "eAllContents": 1
    },
    "body": "m.eAllContents(uml::Class)->select(temp1 : Class | profile_isEntity(temp1).or(profile_isValueObject(temp1)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "oclIsKindOf": 1
    },
    "body": "properties(c)->select(temp1 : Property | temp1.type.oclIsKindOf(uml::PrimitiveType).or(profile_isEntity(temp1.type)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["type"]
  },
  {
    "operations": {
      "or": 1,
      "oclIsKindOf": 1
    },
    "body": "properties(c)->select(temp1 : Property | temp1.type.oclIsKindOf(uml::PrimitiveType).or(profile_isValueObject(temp1.type)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["type"]
  }
]
