[
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'main.arnoldc'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "oclAsType": 1
    },
    "body": "a.ownedElement->select(temp1 : Element | temp1.oclIsTypeOf(uml::Activity))->collect(temp2 : Element | temp2.oclAsType(uml::Activity))->collect(temp3 : Activity | genInitCall(temp3))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "oclAsType": 1
    },
    "body": "a.ownedElement->select(temp1 : Element | temp1.oclIsTypeOf(uml::Activity))->collect(temp2 : Element | temp2.oclAsType(uml::Activity))->collect(temp3 : Activity | genActivity(temp3))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 4,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'stateLib.arnoldc'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "a.name.concat('.arnoldc')",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "a.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "initNode.outgoing->collect(temp1 : ActivityEdge | splitParams(temp1))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["outgoing"]
  },
  {
    "operations": {"trim": 1},
    "body": "var.trim()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "initNode.outgoing->select(temp1 : ActivityEdge | temp1.activity.<>(null))->collect(temp2 : ActivityEdge | genCall(temp2))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "outgoing",
      "activity"
    ]
  },
  {
    "operations": {
      "not": 1,
      "oclIsTypeOf": 1
    },
    "body": "a.ownedNode->select(temp1 : ActivityNode | temp1.oclIsTypeOf(uml::JoinNode).not())",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedNode"]
  },
  {
    "operations": {},
    "body": "a",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "oclAsType": 1
    },
    "body": "a.ownedNode->select(temp1 : ActivityNode | temp1.oclIsTypeOf(uml::JoinNode))->collect(temp2 : ActivityNode | temp2.oclAsType(uml::JoinNode))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedNode"]
  },
  {
    "operations": {},
    "body": "j",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "i",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "or": 2,
      "oclIsKindOf": 3
    },
    "body": "self.oclIsKindOf(uml::Action).or(self.oclIsKindOf(uml::ForkNode)).or(self.oclIsKindOf(uml::MergeNode))",
    "type": "TemplateGuard",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "TypeExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "a",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "vars",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "var.trim()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "a.oclIsKindOf(uml::Action)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "a",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "flatten": 1,
      "stringValue": 1,
      "includes": 1
    },
    "body": "a.outgoing->collect(temp1 : ActivityEdge | temp1.guard)->collect(temp2 : ValueSpecification | temp2.stringValue())->collect(temp3 : String | splitVars(temp3))->flatten()->reject(e : String | vars->includes(e))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 4,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 6,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "outgoing",
      "guard"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "var.trim()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "a.outgoing->select(temp1 : ActivityEdge | temp1.target.activity.<>(null))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "activity",
      "outgoing",
      "target"
    ]
  },
  {
    "operations": {},
    "body": "ae",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "d",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "vars",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "var.trim()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "d.incoming->collect(temp1 : ActivityEdge | genCall(temp1,'predicateFor','',false))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["incoming"]
  },
  {
    "operations": {
      "<>": 1,
      "stringValue": 1,
      "contains": 1,
      "and": 1,
      "replaceAll": 1
    },
    "body": "d.outgoing->select(temp1 : ActivityEdge | temp1.activity.<>(null).and(temp1.guard.stringValue().replaceAll(' ', '').contains('true->')))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 3,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "outgoing",
      "guard",
      "activity"
    ]
  },
  {
    "operations": {},
    "body": "ae",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "stringValue": 1,
      "contains": 1,
      "<>": 1,
      "and": 1,
      "replaceAll": 1
    },
    "body": "d.outgoing->select(temp1 : ActivityEdge | temp1.activity.<>(null).and(temp1.guard.stringValue().replaceAll(' ', '').contains('false->')))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 3,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "outgoing",
      "guard",
      "activity"
    ]
  },
  {
    "operations": {},
    "body": "ae",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "d",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "vars",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "var.trim()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "f",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "vars",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "var.trim()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "f.incoming->collect(temp1 : ActivityEdge | temp1.source)->collect(temp2 : ActivityNode | genName(temp2))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "incoming",
      "source"
    ]
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "f.oclIsKindOf(uml::FlowFinalNode)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "j",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "-": 1
    },
    "body": "Sequence {0..vars->size().-(1)}",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "i",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "id",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "id",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "size": 1
    },
    "body": "j.incoming->select(temp1 : ActivityEdge | temp1.activity.<>(null))->collect(temp2 : ActivityEdge | temp2.source)->size()",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "incoming",
      "source",
      "activity"
    ]
  },
  {
    "operations": {},
    "body": "j.outgoing",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["outgoing"]
  },
  {
    "operations": {},
    "body": "ae",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "ae",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "''",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "''",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "true",
    "type": "TemplateInvocationArgument",
    "constructs": {"BooleanLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "prefix",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "ae.target",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["target"]
  },
  {
    "operations": {},
    "body": "postfix",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "asState",
    "type": "IfExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"not": 1},
    "body": "isBoolVal(ae.guard).not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["guard"]
  },
  {
    "operations": {},
    "body": "' '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"stringValue": 1},
    "body": "splitVars(ae.guard.stringValue())",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["guard"]
  },
  {
    "operations": {"trim": 1},
    "body": "var.trim()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "a.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "stringValue": 1,
      "<>": 1,
      "not": 1
    },
    "body": "i.outgoing->select(temp1 : ActivityEdge | temp1.activity.<>(null))->collect(temp2 : ActivityEdge | temp2.guard)->select(temp3 : ValueSpecification | isBoolVal(temp3).not())->collect(temp4 : ValueSpecification | temp4.stringValue())->collect(temp5 : String | splitVars(temp5))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 5,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 6,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "outgoing",
      "guard",
      "activity"
    ]
  },
  {
    "operations": {
      "stringValue": 2,
      "or": 1,
      "=": 2
    },
    "body": "v.stringValue().=('true').or(v.stringValue().=('false'))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 2
    },
    "body": "a.name.concat('From').concat(a.activity.name.toUpperFirst())",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "activity",
      "name"
    ]
  },
  {
    "operations": {
      "not": 3,
      "stringValue": 1,
      "or": 1,
      "isEmpty": 1,
      "replaceAll": 3,
      "=": 2,
      "tokenize": 1
    },
    "body": "if Set {a.guard}->select(temp1 : ValueSpecification | isBoolVal(temp1).not())->isEmpty().not() then Set {a.guard}->select(temp2 : ValueSpecification | isBoolVal(temp2).not())->any(temp3 : ValueSpecification | true).stringValue().replaceAll(' ', '').replaceAll('true->', '').replaceAll('false->', '').tokenize(',')->reject(e : String | e.=('true').or(e.=('false'))) else Sequence {} endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 12,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 9,
      "CollectionLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["guard"]
  },
  {
    "operations": {
      "or": 1,
      "replaceAll": 3,
      "=": 2,
      "tokenize": 1
    },
    "body": "s.replaceAll(' ', '').replaceAll('true->', '').replaceAll('false->', '').tokenize(',')->reject(e : String | e.=('true').or(e.=('false')))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 9
    },
    "properties": []
  }
]
