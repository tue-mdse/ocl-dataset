[
  {
    "operations": {
      "filter": 3,
      "flatten": 1,
      "not": 1,
      "oclIsUndefined": 1,
      "getNearestPackage": 3,
      "allOwnedElements": 2,
      "getAppliedStereotypes": 1
    },
    "body": "OrderedSet {aPackage.allOwnedElements()->filter(uml::TypedElement)->select(temp1 : TypedElement | temp1.type.oclIsUndefined().not())->collect(temp2 : TypedElement | temp2.type)->collect(temp3 : Type | temp3.getNearestPackage()), aPackage.allOwnedElements()->filter(uml::CallBehaviorAction)->collect(temp4 : CallBehaviorAction | temp4.behavior)->collect(temp5 : Behavior | temp5.getNearestPackage()), aPackage.member->filter(uml::Element)->collect(temp6 : Element | temp6.getAppliedStereotypes())->collect(temp7 : Stereotype | temp7.getNearestPackage())}->flatten()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 7,
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 10,
      "TypeExpImpl": 3,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "member",
      "behavior",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 3},
    "body": "getPackageName(aPackage).concat('/impl/').concat(packageName).concat('.cpp')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "packageName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "allOwnedElements": 1,
      "asOrderedSet": 1,
      "eClass": 1
    },
    "body": "aPackage.allOwnedElements()->collect(temp1 : Element | temp1.eClass())->asOrderedSet()->sortedBy(temp2 : EClass | temp2.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "nE.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "filter": 1,
      "isEmpty": 1,
      "=": 1,
      "eAllContents": 1
    },
    "body": "aPackage.eAllContents()->filter(ecore::EAnnotation)->select(temp1 : EAnnotation | temp1.source.=('PackageOnly'))->isEmpty()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["source"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "aPackage.name.toUpperFirst().concat('Factory')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "=": 1
    },
    "body": "pack.=(aPackage).not()",
    "type": "ForGuard",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "metaModelIncludes(aPackage)->sortedBy(temp1 : Package | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "or": 1,
      "=": 2
    },
    "body": "aPackage.name.=('Ecore').or(aPackage.name.=('PrimitiveTypes')).not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "or": 2,
      "=": 3
    },
    "body": "pack.name.=('UML').or(pack.name.=('Ecore')).or(pack.name.=('PrimitiveTypes'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 3,
      "PropertyCallExpImpl": 3
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "=": 1
    },
    "body": "pack.name.=('StandardProfile').not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "pack.name.concat('Package').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "pack",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "pack.name.concat('Package').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "or": 3,
      "=": 4
    },
    "body": "pack.name.=('UML').or(pack.name.=('Ecore')).or(pack.name.=('PrimitiveTypes')).or(pack.name.=('StandardProfile')).not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "StringLiteralExpImpl": 4,
      "PropertyCallExpImpl": 4
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "pack.name.concat('Factory').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "filter": 1,
      "asOrderedSet": 1,
      "getAppliedStereotypes": 1
    },
    "body": "aPackage.member->filter(uml::Class)->collect(temp1 : Class | temp1.attribute)->collect(temp2 : Property | temp2.getAppliedStereotypes())->asOrderedSet()->sortedBy(temp3 : Stereotype | temp3.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 4,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "member",
      "name",
      "attribute"
    ]
  },
  {
    "operations": {},
    "body": "stereo.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "filter": 1,
      "asOrderedSet": 1,
      "getAppliedStereotypes": 1
    },
    "body": "aPackage.member->filter(uml::Dependency)->collect(temp1 : Dependency | temp1.getAppliedStereotypes())->asOrderedSet()->sortedBy(temp2 : Stereotype | myQualifiedName(temp2))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["member"]
  },
  {
    "operations": {},
    "body": "stereo.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aPackage.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "packageName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "packageName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "packageName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "packageName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "packageName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "aPackage.name.concat('Package').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "packageName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "aPackage.name.concat('Package').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "packageName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "packageName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "packageName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "packageName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "packageName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "packageName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aPackage",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "packageName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "allOwnedElements": 1
    },
    "body": "aPackage.allOwnedElements()->filter(uml::ValueSpecification)->sortedBy(temp1 : ValueSpecification | myQualifiedName(temp1))->collect(temp2 : ValueSpecification | generateValueSpecificationCreation(temp2))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "=": 1
    },
    "body": "aPackage.name.=('UML').not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "asOrderedSet": 1
    },
    "body": "aPackage.ownedMember->filter(uml::Interface)->asOrderedSet()->sortedBy(temp1 : Interface | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedMember",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "aInterface",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aInterface.ownedAttribute->collect(temp1 : Property | generateAttributeCreation(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedAttribute"]
  },
  {
    "operations": {},
    "body": "aInterface.ownedOperation->collect(temp1 : Operation | generateOperationCreation(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedOperation"]
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 3,
      "asOrderedSet": 1,
      "-": 2
    },
    "body": "aPackage.ownedMember->filter(uml::Class)->-(aPackage.ownedMember->filter(uml::Stereotype))->-(aPackage.ownedMember->filter(uml::Behavior))->asOrderedSet()->sortedBy(temp1 : Class | myQualifiedName(temp1))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 6,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 3,
      "PropertyCallExpImpl": 3
    },
    "properties": ["ownedMember"]
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass.ownedAttribute->sortedBy(temp1 : Property | temp1.name)->collect(temp2 : Property | generateAttributeCreation(temp2))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedAttribute",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "aClass.ownedOperation->sortedBy(temp1 : Operation | temp1.name)->collect(temp2 : Operation | generateOperationCreation(temp2))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedOperation",
      "name"
    ]
  },
  {
    "operations": {"filter": 1},
    "body": "aClass.ownedBehavior->filter(uml::FunctionBehavior)->collect(temp1 : FunctionBehavior | generateFunctionBehaviorCreation(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedBehavior"]
  },
  {
    "operations": {
      "filter": 1,
      "asOrderedSet": 1
    },
    "body": "aClass.ownedElement->filter(uml::InterfaceRealization)->asOrderedSet()->sortedBy(temp1 : InterfaceRealization | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "ownedElement"
    ]
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "interfaceR.supplier->collect(temp1 : NamedElement | temp1.oclAsType(uml::Interface))->collect(temp2 : Interface | temp2.ownedAttribute)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "supplier",
      "ownedAttribute"
    ]
  },
  {
    "operations": {
      "size": 1,
      "=": 2
    },
    "body": "aClass.ownedAttribute->select(temp1 : Property | temp1.name.=(aAttribute.name))->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "ownedAttribute",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "aAttribute",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "asOrderedSet": 1
    },
    "body": "aPackage.ownedMember->filter(uml::InstanceSpecification)->asOrderedSet()->sortedBy(temp1 : InstanceSpecification | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedMember",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "anInstSpec",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "asOrderedSet": 1
    },
    "body": "aPackage.ownedMember->filter(uml::Stereotype)->asOrderedSet()->sortedBy(temp1 : Stereotype | myQualifiedName(temp1))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedMember"]
  },
  {
    "operations": {},
    "body": "aStereotype",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStereotype.ownedAttribute->sortedBy(temp1 : Property | temp1.name)->sortedBy(temp2 : Property | temp2.name)->collect(temp3 : Property | generateAttributeCreation(temp3))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 4,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "ownedAttribute",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "aStereotype.ownedOperation->sortedBy(temp1 : Operation | temp1.name)->sortedBy(temp2 : Operation | temp2.name)->collect(temp3 : Operation | generateOperationCreation(temp3))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 4,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "ownedOperation",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "allOwnedElements": 1,
      "asOrderedSet": 1
    },
    "body": "aPackage.allOwnedElements()->filter(uml::Activity)->asOrderedSet()->sortedBy(temp1 : Activity | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "anActivity",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "anActivity.ownedNode->sortedBy(temp1 : ActivityNode | temp1.name)->collect(temp2 : ActivityNode | generateActivityNodeCreation(temp2))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedNode",
      "name"
    ]
  },
  {
    "operations": {
      "getProperty": 1,
      "asOrderedSet": 1
    },
    "body": "anActivity.edge->asOrderedSet()->sortedBy(temp1 : ActivityEdge | temp1.source.getProperty('name'))->collect(temp2 : ActivityEdge | generateActivityEdgeCreation(temp2))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "edge",
      "source"
    ]
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "oclIsTypeOf": 1,
      "allOwnedElements": 1,
      "asOrderedSet": 1
    },
    "body": "aPackage.allOwnedElements()->filter(uml::Dependency)->reject(temp1 : Dependency | temp1.oclIsTypeOf(uml::InterfaceRealization))->asOrderedSet()->sortedBy(temp2 : Dependency | myQualifiedName(temp2))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aDependency",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aDependency.ownedElement->sortedBy(temp1 : Element | self.name)->collect(temp2 : Element | generateStereotypeApplication(temp2))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "ownedElement"
    ]
  },
  {
    "operations": {"filter": 1},
    "body": "aPackage.ownedMember->filter(uml::PrimitiveType)->collect(temp1 : PrimitiveType | generatePrimitiveTypeCreation(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedMember"]
  },
  {
    "operations": {
      "filter": 1,
      "size": 1,
      ">": 1
    },
    "body": "aPackage.ownedMember->filter(uml::Enumeration)->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedMember"]
  },
  {
    "operations": {"filter": 1},
    "body": "aPackage.ownedMember->filter(uml::Enumeration)->collect(temp1 : Enumeration | generateEnumerationCreation(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedMember"]
  },
  {
    "operations": {},
    "body": "packageName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "packageName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aPackage",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "packageName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"filter": 1},
    "body": "aPackage.ownedMember->filter(uml::Class)->collect(temp1 : Class | initSuperTypes(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedMember"]
  },
  {
    "operations": {"filter": 1},
    "body": "aPackage.ownedMember->filter(uml::Class)->collect(temp1 : Class | temp1.ownedOperation)->collect(temp2 : Operation | initalizeOperation(temp2))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedOperation",
      "ownedMember"
    ]
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "allOwnedElements": 1,
      "asOrderedSet": 1
    },
    "body": "aPackage.allOwnedElements()->filter(uml::Activity)->asOrderedSet()->sortedBy(temp1 : Activity | myQualifiedName(temp1))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "anActivity.node->collect(temp1 : ActivityNode | initializeActivityNode(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["node"]
  },
  {
    "operations": {},
    "body": "anActivity.edge->collect(temp1 : ActivityEdge | initializeEdge(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["edge"]
  },
  {
    "operations": {
      "filter": 2,
      "allOwnedElements": 2,
      "-": 1
    },
    "body": "aPackage.allOwnedElements()->filter(uml::NamedElement)->-(aPackage.allOwnedElements()->filter(uml::ValueSpecification))->sortedBy(temp1 : NamedElement | myQualifiedName(temp1))->collect(temp2 : NamedElement | generateGetterImpl(temp2))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 4,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 2
    },
    "properties": []
  }
]
