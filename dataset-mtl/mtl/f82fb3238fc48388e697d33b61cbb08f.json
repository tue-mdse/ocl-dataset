[
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "aFeatureModel.name.concat('.quality')",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aFeatureModel",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "trim": 1,
      "substitute": 1
    },
    "body": "self.substitute('},\n}', '}\n}').trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1
    },
    "body": "aFeatureModel.root.oclIsUndefined().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["root"]
  },
  {
    "operations": {},
    "body": "rootFeature",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aFeature.attributes",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["attributes"]
  },
  {
    "operations": {},
    "body": "aFeature.id",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {},
    "body": "anAttribute",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "hasANDGroup(aFeature)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aFeature.features",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["features"]
  },
  {
    "operations": {},
    "body": "anChildFeature",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"or": 1},
    "body": "hasORGroup(aFeature).or(hasXORGroup(aFeature))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {"first": 1},
    "body": "aFeature.groups->first().features",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "features",
      "groups"
    ]
  },
  {
    "operations": {},
    "body": "anChildFeature",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "anAttribute.qualityAttribute",
    "type": "TemplateGuard",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualityAttribute"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "removeDuplicates",
    "type": "IfExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "feature_id",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "anAttribute",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"not": 1},
    "body": "hasBeenAlreadySerialized(anAttribute).not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "feature_id",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "anAttribute",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "feature_id",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "anAttribute.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "anAttribute.type",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "anAttribute.minRangeValue",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["minRangeValue"]
  },
  {
    "operations": {},
    "body": "anAttribute.maxRangeValue",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["maxRangeValue"]
  },
  {
    "operations": {},
    "body": "anAttribute.weight",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["weight"]
  },
  {
    "operations": {},
    "body": "anAttribute.minimize",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["minimize"]
  },
  {
    "operations": {},
    "body": "anAttribute.objectiveFunctionAggregator",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["objectiveFunctionAggregator"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "aFeature.features->isEmpty().not()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["features"]
  },
  {
    "operations": {
      "not": 1,
      "and": 1,
      "isEmpty": 1,
      "first": 1
    },
    "body": "aFeature.groups->isEmpty().not().and(aFeature.groups->first().or)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "or",
      "groups"
    ]
  },
  {
    "operations": {
      "not": 1,
      "and": 1,
      "isEmpty": 1,
      "first": 1
    },
    "body": "aFeature.groups->isEmpty().not().and(aFeature.groups->first().xor)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "xor",
      "groups"
    ]
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('eu.supersede.dynadapt.feature.serializer.helpers.AttributeSerializationHelper', 'attributeHasBeenSerialized(java.lang.String)', Sequence {anAttribute.name})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "theAttributes",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aFeature.id",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {},
    "body": "anAttribute",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "false",
    "type": "TemplateInvocationArgument",
    "constructs": {"BooleanLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"union": 1},
    "body": "aFeature.attributes->union(childFeatures(aFeature)->collect(childFeature : Feature | allNestedAttributes(childFeature)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["attributes"]
  },
  {
    "operations": {
      "or": 1,
      "first": 1
    },
    "body": "if hasANDGroup(aFeature) then aFeature.features else if hasORGroup(aFeature).or(hasXORGroup(aFeature)) then aFeature.groups->first().features else Sequence {} endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 3,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "features",
      "groups",
      "features"
    ]
  }
]
