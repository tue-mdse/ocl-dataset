[
  {
    "operations": {
      "not": 1,
      "or": 4,
      "oclIsUndefined": 1,
      "and": 1,
      "=": 5
    },
    "body": "self.oclIsUndefined().not().and(self.eType.name.=('EBool')).or(self.eType.name.=('EBoolean')).or(self.eType.name.=('Boolean')).or(self.eType.name.=('boolean')).or(self.eType.name.=('EBooleanObject'))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 6,
      "StringLiteralExpImpl": 5,
      "PropertyCallExpImpl": 10
    },
    "properties": [
      "eType",
      "name"
    ]
  },
  {
    "operations": {
      "not": 1,
      "or": 2,
      "oclIsUndefined": 1,
      "and": 1,
      "=": 3
    },
    "body": "self.oclIsUndefined().not().and(self.eType.name.=('EString')).or(self.eType.name.=('String')).or(self.eType.instanceClassName.=('java.lang.String'))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "StringLiteralExpImpl": 3,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "eType",
      "name",
      "instanceClassName"
    ]
  },
  {
    "operations": {
      "not": 1,
      "or": 4,
      "oclIsUndefined": 1,
      "and": 1,
      "=": 5
    },
    "body": "self.oclIsUndefined().not().and(self.eType.name.=('EInteger')).or(self.eType.name.=('Integer')).or(self.eType.name.=('EInt')).or(self.eType.instanceClassName.=('int')).or(self.eType.instanceClassName.=('java.lang.Integer'))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 12,
      "StringLiteralExpImpl": 5,
      "PropertyCallExpImpl": 10
    },
    "properties": [
      "eType",
      "name",
      "instanceClassName"
    ]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "or": 3,
      "and": 1,
      "=": 4
    },
    "body": "self.oclIsUndefined().not().and(self.eType.name.=('EShort')).or(self.eType.name.=('Short')).or(self.eType.instanceClassName.=('java.lang.Short')).or(self.eType.instanceClassName.=('short'))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 10,
      "VariableExpImpl": 5,
      "StringLiteralExpImpl": 4,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "eType",
      "name",
      "instanceClassName"
    ]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "oclIsKindOf": 1,
      "and": 1
    },
    "body": "self.oclIsUndefined().not().and(self.eType.oclIsKindOf(ecore::EEnum))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["eType"]
  },
  {
    "operations": {
      "not": 1,
      "or": 1,
      "oclIsUndefined": 1,
      "and": 1,
      "=": 2
    },
    "body": "self.oclIsUndefined().not().and(self.eType.name.=('ELong')).or(self.eType.name.=('Long'))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "eType",
      "name"
    ]
  },
  {
    "operations": {
      "not": 1,
      "or": 1,
      "oclIsUndefined": 1,
      "and": 1,
      "=": 2
    },
    "body": "self.oclIsUndefined().not().and(self.eType.name.=('EDouble')).or(self.eType.name.=('Double'))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "eType",
      "name"
    ]
  },
  {
    "operations": {
      "not": 1,
      "or": 7,
      "oclIsUndefined": 1,
      "and": 1,
      "=": 8
    },
    "body": "self.oclIsUndefined().not().and(self.eType.instanceClassName.=('byte')).or(self.eType.instanceClassName.=('short')).or(self.eType.instanceClassName.=('int')).or(self.eType.instanceClassName.=('long')).or(self.eType.instanceClassName.=('float')).or(self.eType.instanceClassName.=('double')).or(self.eType.instanceClassName.=('char')).or(self.eType.instanceClassName.=('boolean'))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 9,
      "OperationCallExpImpl": 18,
      "StringLiteralExpImpl": 8,
      "PropertyCallExpImpl": 16
    },
    "properties": [
      "eType",
      "instanceClassName"
    ]
  }
]
