[
  {
    "operations": {
      "not": 1,
      "or": 1,
      "oclIsTypeOf": 1,
      "and": 2,
      "isEmpty": 1,
      "oclAsType": 3,
      "=": 2
    },
    "body": "pack.packagedElement->select(temp1 : PackageableElement | temp1.oclIsTypeOf(uml::Dependency).and(temp1.oclAsType(uml::Dependency).client->any(temp2 : NamedElement | true).=(prop).or(prop.owner.oclAsType(uml::Class).general->isEmpty().not().and(temp1.oclAsType(uml::Dependency).client->any(temp3 : NamedElement | true).=(getParentProperty(prop))))))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 11,
      "VariableExpImpl": 7,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 4,
      "PropertyCallExpImpl": 5,
      "BooleanLiteralExpImpl": 2
    },
    "properties": [
      "packagedElement",
      "general",
      "owner",
      "client"
    ]
  },
  {
    "operations": {
      "getModel": 1,
      "oclIsTypeOf": 1,
      "and": 1,
      "oclAsType": 1,
      "=": 1
    },
    "body": "getPackageWithName(prop.getModel(),getNS('xs')).packagedElement->select(temp1 : PackageableElement | temp1.oclIsTypeOf(uml::Dependency).and(temp1.oclAsType(uml::Dependency).client->any(temp2 : NamedElement | true).name.=(type)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 3,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "packagedElement",
      "name",
      "client"
    ]
  },
  {
    "operations": {
      "allOwnedElements": 1,
      "oclIsTypeOf": 1,
      "and": 1,
      "=": 1,
      "oclAsType": 1
    },
    "body": "model.allOwnedElements()->select(temp1 : Element | temp1.oclIsTypeOf(uml::Generalization).and(temp1.oclAsType(uml::Generalization).target->any(temp2 : Element | true).=(elt)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 4,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["target"]
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "and": 1,
      "oclAsType": 1,
      "=": 1
    },
    "body": "pack.packagedElement->select(temp1 : PackageableElement | temp1.oclIsTypeOf(uml::Dependency).and(temp1.oclAsType(uml::Dependency).client->any(temp2 : NamedElement | true).=(elt)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 4,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "packagedElement",
      "client"
    ]
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "and": 1,
      "oclAsType": 1,
      "=": 1
    },
    "body": "model.packagedElement->select(temp1 : PackageableElement | temp1.oclIsTypeOf(uml::Package).and(temp1.name.=(namePackage)))->any(temp2 : PackageableElement | true).oclAsType(uml::Package)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 4,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "packagedElement",
      "name"
    ]
  },
  {
    "operations": {
      "oclAsType": 3,
      "=": 1
    },
    "body": "prop.owner.oclAsType(uml::Class).general->any(temp1 : Classifier | true).oclAsType(uml::Class).ownedAttribute->select(temp2 : Property | temp2.name.=(prop.name))->any(temp3 : Property | true).oclAsType(uml::Property)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 4,
      "TypeExpImpl": 3,
      "PropertyCallExpImpl": 5,
      "BooleanLiteralExpImpl": 2
    },
    "properties": [
      "ownedAttribute",
      "owner",
      "general",
      "name"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "class1.namespace.name.=(class2.namespace.name)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "namespace",
      "name"
    ]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "getDerivationsOf(model,elt)->size().>(0)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "notEmpty": 1,
      "getAppliedStereotype": 1
    },
    "body": "Set {packageableElement.getAppliedStereotype(name)}->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "hasStereotype(packageableElement,'isa::xsdSchema')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "notEmpty": 1,
      "getAppliedStereotype": 1
    },
    "body": "Set {property.getAppliedStereotype(name)}->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"startsWith": 1},
    "body": "property.name.startsWith('_')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "notEmpty": 1,
      "getAppliedStereotype": 1
    },
    "body": "Set {class.getAppliedStereotype('isa::xsdChoice')}->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "notEmpty": 1,
      "getAppliedStereotype": 1
    },
    "body": "Set {class.getAppliedStereotype('isa::xsdGlobalElement')}->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "oclIsTypeOf": 1,
      "and": 1,
      "isEmpty": 1,
      "oclAsType": 2
    },
    "body": "type.oclIsTypeOf(uml::Class).and(isChoice(type.oclAsType(uml::Class)).or(type.oclAsType(uml::Class).ownedAttribute->isEmpty()))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 6,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 3,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedAttribute"]
  },
  {
    "operations": {"concat": 3},
    "body": "name.concat(suffix).concat(version).concat(extension)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getConf(path).concat(getFilename(name,suffix,version,extension))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "getConf(path).concat(name).concat('.htm')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 4},
    "body": "getConf(path).concat(name).concat('/').concat(pack).concat('.htm')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getFullFilename(path,name,suffix,version,'.xsd')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "class.namespace.name.concat(':').concat(class.name)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "namespace",
      "name"
    ]
  },
  {
    "operations": {"concat": 2},
    "body": "el.namespace.name.concat(':').concat(el.name)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "namespace",
      "name"
    ]
  },
  {
    "operations": {
      "concat": 2,
      "oclAsType": 1
    },
    "body": "prop.type.owner.oclAsType(uml::Package).name.concat(':').concat(prop.type.name)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "owner",
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "getDate(format)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getConfig(config)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getConf('url_'.concat(packname))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getConf('path_'.concat(packname))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getConf('suffix_'.concat(type))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getConf('version_'.concat(name))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getConf('name_'.concat(name))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getConf('email_'.concat(name))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getConf('ndr_'.concat(name))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getConf('ns_'.concat(name))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'stdout'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "text",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  }
]
