[
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "m.name.concat('.py')",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "m.ownedComment->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {},
    "body": "m.ownedComment->collect(temp1 : Comment | genComment(temp1,' '))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {
      "filter": 1,
      "not": 1,
      "<>": 2,
      "allOwnedElements": 1,
      "and": 2,
      "isEmpty": 1,
      "=": 1
    },
    "body": "m.allOwnedElements()->filter(uml::TypedElement)->select(temp1 : TypedElement | temp1.type.<>(null).and(temp1.type.name.<>(null)).and(temp1.type.name.=('Date')))->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 4,
      "NullLiteralExpImpl": 2,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "size": 1
    },
    "body": "m.ownedType->filter(uml::Classifier)->sortedBy(temp1 : Classifier | getAllRelations(temp1)->size())",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedType"]
  },
  {
    "operations": {"trim": 1},
    "body": "genClassif(e).trim()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "c.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "inherited->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "inherited",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "cl.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "c.ownedComment->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {},
    "body": "c.ownedComment->collect(temp1 : Comment | genComment(temp1,' '))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "c.nestedClassifier->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["nestedClassifier"]
  },
  {
    "operations": {},
    "body": "c.nestedClassifier->collect(temp1 : Classifier | genClassif(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["nestedClassifier"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "c.ownedOperation->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedOperation"]
  },
  {
    "operations": {"=": 1},
    "body": "c.ownedOperation->reject(temp1 : Operation | temp1.name.=('__init__'))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedOperation",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "ops",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "i.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "inherited->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "inherited",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "cl.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "i.ownedComment->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {},
    "body": "i.ownedComment->collect(temp1 : Comment | genComment(temp1,' '))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {"isEmpty": 1},
    "body": "i.ownedOperation->isEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedOperation"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "i.nestedClassifier->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["nestedClassifier"]
  },
  {
    "operations": {},
    "body": "i.nestedClassifier->collect(temp1 : Classifier | genClassif(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["nestedClassifier"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "i.ownedOperation->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedOperation"]
  },
  {
    "operations": {},
    "body": "i.ownedOperation",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedOperation"]
  },
  {
    "operations": {},
    "body": "ops",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "hasConstructor(c)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "addAll": 1,
      "notEmpty": 1
    },
    "body": "c.ownedAttribute->addAll(getAssociationsProps(c))->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedAttribute"]
  },
  {
    "operations": {"addAll": 1},
    "body": "c.ownedAttribute->addAll(getAssociationsProps(c))",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedAttribute"]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "p",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"isEmpty": 1},
    "body": "c.ownedOperation->isEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedOperation"]
  },
  {
    "operations": {
      "size": 1,
      "-": 1,
      "=": 1,
      "first": 1
    },
    "body": "c.ownedOperation->select(temp1 : Operation | temp1.name.=('__init__'))->sortedBy(o : Operation | o.ownedParameterSet->size().-())->first()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "ownedOperation",
      "ownedParameterSet",
      "name"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "self.name.=('__init__')",
    "type": "TemplateGuard",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "nself",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForBefore",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getParameters(o)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"addAll": 1},
    "body": "o.class.ownedAttribute->addAll(getAssociationsProps(o.class))",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "ownedAttribute",
      "class"
    ]
  },
  {
    "operations": {"includes": 1},
    "body": "getParameters(o)->collect(temp1 : Parameter | temp1.name)->includes(p.name)",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "p",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "e.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "e.ownedComment->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {},
    "body": "e.ownedComment->collect(temp1 : Comment | genComment(temp1,' '))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "e.ownedLiteral->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedLiteral"]
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "e.ownedLiteral",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedLiteral"]
  },
  {
    "operations": {},
    "body": "lit.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"size": 1},
    "body": "e.ownedLiteral->size()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedLiteral"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "p.ownedComment->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {},
    "body": "p.ownedComment->collect(temp1 : Comment | genComment(temp1,'#'))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {"=": 1},
    "body": "p.visibility.=(uml::VisibilityKind::private)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "p",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "o",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "o.ownedComment->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {},
    "body": "o.ownedComment->collect(temp1 : Comment | genComment(temp1,' '))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {},
    "body": "o",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "o.visibility.=(uml::VisibilityKind::private)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {},
    "body": "o.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForBefore",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "excluding": 1,
      "getReturnResult": 1
    },
    "body": "o.ownedParameter->excluding(o.getReturnResult())",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedParameter"]
  },
  {
    "operations": {},
    "body": "param.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "<>": 2,
      "and": 1,
      "getReturnResult": 2
    },
    "body": "o.getReturnResult().<>(null).and(o.getReturnResult().type.<>(null))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "NullLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"getReturnResult": 1},
    "body": "o.getReturnResult()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "isMany(m)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "m.oclIsKindOf(uml::TypedElement)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "m.oclAsType(uml::TypedElement).type",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "t.=(null)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "NullLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('String')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('UnlimitedNatural')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('Double')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('Real')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('Float')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('Long')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('Integer')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('Short')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('Byte')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('ByteArray')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('Boolean')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('Date')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('Char')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "t.oclIsKindOf(uml::Enumeration)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1,
      "oclAsType": 1
    },
    "body": "t.oclAsType(uml::Enumeration).ownedLiteral->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedLiteral"]
  },
  {
    "operations": {},
    "body": "t.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "at": 1,
      "oclAsType": 1
    },
    "body": "t.oclAsType(uml::Enumeration).ownedLiteral->at(1).name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedLiteral",
      "name"
    ]
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "t.oclIsKindOf(uml::Classifier)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "prefix",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "+": 2,
      "replaceAll": 1
    },
    "body": "format(genBody(c,prefix)).replaceAll('\n', '\n'.+(prefix).+(' '))",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "c.body",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["body"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "c.ownedComment->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {},
    "body": "prefix",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "+": 1,
      "sep": 1
    },
    "body": "c.ownedComment->collect(temp1 : Comment | genBody(temp1,prefix))->sep('\n '.+(prefix))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {
      "or": 2,
      "=": 1,
      "-": 1,
      ">": 2
    },
    "body": "s.lower.>(1).or(s.upper.=(1.-())).or(s.upper.>(1))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 3,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "lower",
      "upper"
    ]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1
    },
    "body": "p.association.oclIsUndefined().not()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["association"]
  },
  {
    "operations": {"=": 1},
    "body": "c.ownedOperation->exists(temp1 : Operation | temp1.name.=('__init__'))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedOperation",
      "name"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 2,
      "excluding": 1,
      "oclAsType": 2
    },
    "body": "if c.oclIsKindOf(uml::Class) then getAllClassRelations(c.oclAsType(uml::Class)) else if c.oclIsKindOf(uml::Interface) then getAllInterfaceRelations(c.oclAsType(uml::Interface)) else Set {c}->excluding(c) endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 4,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "getGenerals": 1,
      "union": 1,
      "getAllImplementedInterfaces": 1
    },
    "body": "c.getAllImplementedInterfaces()->union(c.getGenerals())",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"getGenerals": 1},
    "body": "c.getGenerals()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "=": 1,
      "getReturnResult": 1
    },
    "body": "o.ownedParameter->reject(e : Parameter | e.=(o.getReturnResult()))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedParameter"]
  },
  {
    "operations": {
      "<>": 1,
      "and": 1,
      "asOrderedSet": 1,
      "allInstances": 1,
      "getOpposite": 2,
      "=": 1
    },
    "body": "uml::Association.allInstances()->collect(temp1 : Association | temp1.ownedEnd)->select(p : Property | p.type.=(c).and(p.getOpposite().<>(null)))->collect(temp2 : Property | temp2.getOpposite())->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 5,
      "NullLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedEnd",
      "type"
    ]
  },
  {
    "operations": {
      "<>": 2,
      "trim": 2,
      "and": 1,
      "replaceAll": 25
    },
    "body": "if s.<>(null).and(s.trim().<>('')) then s.trim().replaceAll('\\n', '\n').replaceAll('<\/?b>', '*').replaceAll('<div><br><\/div>', '\n').replaceAll('(<\/div>([^<$]))+', '\n$2').replaceAll('(<\/div>)+', '').replaceAll('(^<div[^>]*>)+', '').replaceAll('([^^])(<div[^>]*>)+', '$1\n').replaceAll('<\/?i>', '_').replaceAll('<\/?u>', '').replaceAll('<p>', '').replaceAll('<\/p>', '\n').replaceAll('<ul[^>]*>', '\n\n').replaceAll('<\/ul>', '\n').replaceAll('<ol[^>]*>', '\n\n').replaceAll('<\/ol>', '\n').replaceAll('<li[^>]*>', '* ').replaceAll('<\/li>', '\n').replaceAll('&nbsp;', ' ').replaceAll('<br>', '\n').replaceAll('<span[^>]*>', '').replaceAll('<\/span>', '').replaceAll('\\+\\s*$', '.').replaceAll('([^.?!])$', '$1.').replaceAll('&lt;', '<').replaceAll('&gt;', '>') else '' endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 30,
      "VariableExpImpl": 3,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 52,
      "IfExpImpl": 1
    },
    "properties": []
  }
]
