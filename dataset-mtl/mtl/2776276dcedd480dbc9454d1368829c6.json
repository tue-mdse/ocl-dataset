[
  {
    "operations": {},
    "body": "javaString(aProperty.name)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "javaString(aProperty.name,toUpperFirst)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "includes": 1,
      "toString": 1
    },
    "body": "Sequence {'URI'}->includes(aProperty.valueType.toString()).not()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["valueType"]
  },
  {
    "operations": {"concat": 2},
    "body": "'@OslcName(\"'.concat(javaName(aProperty,false)).concat('\")')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 6},
    "body": "'@OslcPropertyDefinition('.concat(javaInterfaceNameForAdaptorConstants(anAdaptorInterface)).concat('.').concat(domainSpecificationNamespaceConstantName(definingDomainSpecification(aProperty))).concat(' + \"').concat(javaName(aProperty,false)).concat('\")')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 4,
      "StringLiteralExpImpl": 4,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "concat": 2
    },
    "body": "if aProperty.description.oclIsUndefined().not() then '@OslcDescription(\"'.concat(aProperty.description).concat('\")') else '' endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["description"]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "=": 4
    },
    "body": "if aProperty.occurs.oclIsUndefined().not() then if aProperty.occurs.=(adaptorinterface::ResourcePropertyOccurs::exactlyOne) then '@OslcOccurs(Occurs.ExactlyOne)' else if aProperty.occurs.=(adaptorinterface::ResourcePropertyOccurs::zeroOrOne) then '@OslcOccurs(Occurs.ZeroOrOne)' else if aProperty.occurs.=(adaptorinterface::ResourcePropertyOccurs::zeroOrMany) then '@OslcOccurs(Occurs.ZeroOrMany)' else if aProperty.occurs.=(adaptorinterface::ResourcePropertyOccurs::oneOrMany) then '@OslcOccurs(Occurs.OneOrMany)' else '' endif endif endif endif else '' endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 6,
      "EnumLiteralExpImpl": 4,
      "StringLiteralExpImpl": 6,
      "IfExpImpl": 5,
      "PropertyCallExpImpl": 5
    },
    "properties": ["occurs"]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "toString": 1,
      "concat": 2
    },
    "body": "if aProperty.valueType.oclIsUndefined().not() then if hasOSLCSupportedValueType(aProperty) then '@OslcValueType(ValueType.'.concat(aProperty.valueType.toString()).concat(')') else '' endif else '' endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["valueType"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "not": 3,
      "oclIsUndefined": 1,
      "toString": 3,
      "concat": 2,
      "equalsIgnoreCase": 2
    },
    "body": "if aProperty.representation.oclIsUndefined().not() then if aProperty.representation.toString().equalsIgnoreCase('n_a').not() then if aProperty.representation.toString().equalsIgnoreCase('either').not() then '@OslcRepresentation(Representation.'.concat(aProperty.representation.toString().toUpperFirst()).concat(')') else '' endif else '' endif else '' endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 4,
      "StringLiteralExpImpl": 7,
      "IfExpImpl": 3,
      "PropertyCallExpImpl": 4
    },
    "properties": ["representation"]
  },
  {
    "operations": {
      "size": 1,
      "concat": 4,
      ">": 1
    },
    "body": "if aProperty.range->size().>(0) then '@OslcRange({'.concat(concatenate(aProperty.range->collect(aRange : Resource | javaInterfaceNameForAdaptorConstants(anAdaptorInterface).concat('.').concat(resourceTypeConstantName(aRange))),', ')).concat('})') else '' endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 5,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["range"]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "toString": 1,
      "concat": 2
    },
    "body": "if aProperty.readOnly.oclIsUndefined().not() then '@OslcReadOnly('.concat(aProperty.readOnly.toString()).concat(')') else '' endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["readOnly"]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "concat": 2
    },
    "body": "if aProperty.title.oclIsUndefined().not() then '@OslcTitle(\"'.concat(aProperty.title).concat('\")') else '' endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["title"]
  },
  {
    "operations": {
      "toString": 2,
      "equalsIgnoreCase": 2
    },
    "body": "if aProperty.isMemberProperty.toString().equalsIgnoreCase('true') then '@OslcMemberProperty(true)' else if aProperty.isMemberProperty.toString().equalsIgnoreCase('false') then '@OslcMemberProperty(false)' else '' endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 5,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["isMemberProperty"]
  },
  {
    "operations": {
      "size": 1,
      "concat": 2,
      ">": 1,
      "asSequence": 1
    },
    "body": "if aProperty.allowedValue->size().>(0) then '@OslcAllowedValue({\"'.concat(concatenate(aProperty.allowedValue->asSequence(),'\", \"')).concat('\"})') else '' endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["allowedValue"]
  },
  {
    "operations": {"concat": 2},
    "body": "definingDomainSpecification(aProperty).namespaceURI.concat('#').concat(javaName(aProperty,false))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["namespaceURI"]
  },
  {
    "operations": {
      "or": 1,
      "includes": 2,
      "toString": 2
    },
    "body": "Sequence {'Resource', 'LocalResource'}->includes(aProperty.valueType.toString()).or(Sequence {'zeroOrMany', 'oneOrMany'}->includes(aProperty.occurs.toString()))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 4,
      "CollectionLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "occurs",
      "valueType"
    ]
  },
  {
    "operations": {
      "size": 1,
      "toString": 10,
      "+": 20,
      "=": 11,
      "first": 1
    },
    "body": "if aProperty.valueType.toString().=('String') then variable else if aProperty.valueType.toString().=('XMLLiteral') then variable else if aProperty.valueType.toString().=('DateTime') then 'new SimpleDateFormat(\"M/D/y\").parse('.+(variable).+(')') else if aProperty.valueType.toString().=('URI') then 'new URI('.+(variable).+(')') else if aProperty.valueType.toString().=('Boolean') then 'new Boolean('.+(variable).+(')') else if aProperty.valueType.toString().=('Double') then 'Double.valueOf('.+(variable).+(')') else if aProperty.valueType.toString().=('Float') then 'Float.valueOf('.+(variable).+(')') else if aProperty.valueType.toString().=('Integer') then 'Integer.valueOf('.+(variable).+(')') else if aProperty.valueType.toString().=('Resource') then 'new Link(new URI('.+(variable).+('))') else if aProperty.valueType.toString().=('LocalResource') then if aProperty.range->size().=(1) then 'new '.+(javaClassName(aProperty.range->first())).+('(new URI(').+(variable).+('))') else 'new Link(new URI('.+(variable).+('))') endif else '' endif endif endif endif endif endif endif endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 23,
      "OperationCallExpImpl": 43,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 30,
      "IfExpImpl": 11,
      "PropertyCallExpImpl": 12
    },
    "properties": [
      "valueType",
      "range"
    ]
  },
  {
    "operations": {
      "includes": 2,
      "toString": 2,
      "concat": 2
    },
    "body": "if Sequence {'zeroOrMany', 'oneOrMany'}->includes(aProperty.occurs.toString()) then 'HashSet<' else '' endif.concat(javaAttributeBaseType(aProperty)).concat(if Sequence {'zeroOrMany', 'oneOrMany'}->includes(aProperty.occurs.toString()) then '>' else '' endif)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 6,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 8,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["occurs"]
  },
  {
    "operations": {
      "size": 1,
      "toString": 10,
      "=": 11,
      "first": 1
    },
    "body": "if aProperty.valueType.toString().=('String') then 'String' else if aProperty.valueType.toString().=('XMLLiteral') then 'String' else if aProperty.valueType.toString().=('DateTime') then 'Date' else if aProperty.valueType.toString().=('URI') then 'URI' else if aProperty.valueType.toString().=('Boolean') then 'Boolean' else if aProperty.valueType.toString().=('Double') then 'Double' else if aProperty.valueType.toString().=('Float') then 'Float' else if aProperty.valueType.toString().=('Integer') then 'Integer' else if aProperty.valueType.toString().=('Resource') then 'Link' else if aProperty.valueType.toString().=('LocalResource') then if aProperty.range->size().=(1) then javaClassName(aProperty.range->first()) else 'Link' endif else '' endif endif endif endif endif endif endif endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 12,
      "OperationCallExpImpl": 23,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 21,
      "IfExpImpl": 11,
      "PropertyCallExpImpl": 12
    },
    "properties": [
      "valueType",
      "range"
    ]
  },
  {
    "operations": {
      "count": 1,
      "concat": 1,
      "=": 1
    },
    "body": "if allProperties(aResource)->collect(p : ResourceProperty | javaName(p,false))->count(javaName(aProperty,false)).=(1) then javaName(aProperty,false) else definingDomainSpecification(aProperty).namespacePrefix.name.concat(javaName(aProperty,true)) endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 6,
      "IntegerLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 4,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "namespacePrefix",
      "name"
    ]
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "toString": 1,
      "concat": 2,
      "indexOf": 1
    },
    "body": "javaAttributeName(aProperty,aResource).concat('ToHtmlForCreation').concat(if aCreationDialog.oclIsUndefined() then '' else creationDialogs(containingAdaptorInterface(aCreationDialog),aResource)->indexOf(aCreationDialog).toString() endif)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 6,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1
    },
    "properties": []
  }
]
