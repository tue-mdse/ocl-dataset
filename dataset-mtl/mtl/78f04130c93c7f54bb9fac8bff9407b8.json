[
  {
    "operations": {},
    "body": "getGenPackage(ePackage)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "ePackage.nsURI.=('http://www.eclipse.org/emf/2003/XMLType')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["nsURI"]
  },
  {
    "operations": {},
    "body": "getGenPackage(ePackage)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getGenPackage(ePackage)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getGenPackage(eClassifier.ePackage)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ePackage"]
  },
  {
    "operations": {},
    "body": "getGenPackage(ePackage).prefix",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["prefix"]
  },
  {
    "operations": {
      "lastIndex": 1,
      "+": 1,
      "substring": 1
    },
    "body": "let qualifiedName : String = qualifiedName(eClassifier) in qualifiedName.substring(qualifiedName.lastIndex('.').+(1))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "+": 2,
      "oclAsType": 1
    },
    "body": "if eClassifier.oclIsTypeOf(ecore::EClass) then let genClass : GenClass = getGenClass(eClassifier.oclAsType(ecore::EClass)) in getQualifiedInterfaceName(genClass) else completePackage(eClassifier.ePackage).+('.').+(eClassifier.name) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 5,
      "TemplateInvocationSpec": 1,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "ePackage"
    ]
  },
  {
    "operations": {"eInverse": 1},
    "body": "eClassifier.eInverse(genmodel::GenClassifier)->collect(temp1 : GenClassifier | getQualifiedClassifierAccessor(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "self.ePackage.nsURI.=('http://www.eclipse.org/emf/2003/XMLType')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "nsURI",
      "ePackage"
    ]
  },
  {
    "operations": {},
    "body": "getGenDataType(eDataType)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "eDataType",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getGenClass(eClass)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getGenFeature(e)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getGenFeature(e)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "toString": 1,
      "eInverse": 1,
      "oclAsType": 1,
      "first": 1
    },
    "body": "eClass.eInverse(genmodel::GenClassifier)->collect(temp1 : GenClassifier | temp1.oclAsType(genmodel::GenClassifier))->collect(temp2 : GenClassifier | temp2.genPackage)->collect(temp3 : GenPackage | temp3.genModel)->first().toString().<>(getImportGenModel(eClass))",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 5,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "genPackage",
      "genModel"
    ]
  },
  {
    "operations": {},
    "body": "eClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "eInverse": 1,
      "oclAsType": 1,
      "first": 1
    },
    "body": "eClass.eInverse(genmodel::GenClassifier)->collect(temp1 : GenClassifier | temp1.oclAsType(genmodel::GenClassifier))->collect(temp2 : GenClassifier | temp2.genPackage)->collect(temp3 : GenPackage | temp3.genModel)->first()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 3,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "genPackage",
      "genModel"
    ]
  },
  {
    "operations": {},
    "body": "''",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "''",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"eInverse": 1},
    "body": "eClass.eInverse(genmodel::GenClassifier)->collect(temp1 : GenClassifier | getQualifiedClassifierAccessor(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "eClassifier.oclIsTypeOf(ecore::EClass)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "isMapEntry(genClass)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "genClass.genPackage",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["genPackage"]
  },
  {
    "operations": {},
    "body": "genClass",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genClass.genPackage",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["genPackage"]
  },
  {
    "operations": {},
    "body": "genClass",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getGenFeature(e)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('org.eclipse.emf.eef.codegen.services.EcoreService', 'getEcoreGenModel(org.eclipse.emf.ecore.EObject)', Sequence {arg0})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "eInverse": 1,
      "=": 1,
      "first": 2
    },
    "body": "if ePackage.nsURI.=('http://www.eclipse.org/emf/2002/Ecore') then getEcoreGenModel(self).genPackages->first() else self.eInverse(genmodel::GenPackage)->first() endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "nsURI",
      "genPackages"
    ]
  },
  {
    "operations": {
      "eInverse": 1,
      "=": 2,
      "first": 2
    },
    "body": "if self.eContainingClass.ePackage.nsURI.=('http://www.eclipse.org/emf/2002/Ecore') then getGenClass(self.eContainingClass).genFeatures->select(temp1 : GenFeature | temp1.ecoreFeature.name.=(eStructuralFeature.name))->first() else self.eInverse(genmodel::GenFeature)->first() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "name",
      "genFeatures",
      "ecoreFeature",
      "nsURI",
      "ePackage",
      "eContainingClass"
    ]
  },
  {
    "operations": {
      "eInverse": 1,
      "=": 2,
      "first": 2
    },
    "body": "if self.ePackage.nsURI.=('http://www.eclipse.org/emf/2002/Ecore') then getGenPackage(self.ePackage).genClasses->select(temp1 : GenClass | temp1.ecoreClass.name.=(eClass.name))->first() else self.eInverse(genmodel::GenClass)->first() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 7
    },
    "properties": [
      "name",
      "nsURI",
      "ePackage",
      "genClasses",
      "ecoreClass"
    ]
  },
  {
    "operations": {
      "eInverse": 1,
      "=": 2,
      "first": 2
    },
    "body": "if self.ePackage.nsURI.=('http://www.eclipse.org/emf/2002/Ecore') then getGenPackage(self.ePackage).genDataTypes->select(temp1 : GenDataType | temp1.ecoreDataType.name.=(eDataType.name))->first() else self.eInverse(genmodel::GenDataType)->first() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 7
    },
    "properties": [
      "name",
      "nsURI",
      "ePackage",
      "ecoreDataType",
      "genDataTypes"
    ]
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('org.eclipse.emf.eef.codegen.services.EcoreService', 'getFormattedName(java.lang.String)', Sequence {e.name})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  }
]
