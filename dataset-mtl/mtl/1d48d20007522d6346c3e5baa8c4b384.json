[
  {
    "operations": {
      "not": 1,
      "contains": 1
    },
    "body": "aGrammar.name.contains('Terminals').not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "grammarName.concat('Impl.java')",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "aGrammar.eAllContents(xtext::TerminalRule)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 3,
      "and": 2,
      "toUpper": 3,
      "equalsIgnoreCase": 3
    },
    "body": "rule.name.toUpper().equalsIgnoreCase('NUMBER').<>(true).and(rule.name.toUpper().equalsIgnoreCase('STRING').<>(true)).and(rule.name.toUpper().equalsIgnoreCase('CHARACTER').<>(true))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 11,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 3,
      "PropertyCallExpImpl": 3,
      "BooleanLiteralExpImpl": 3
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "rule.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Impl').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "aGrammar.eAllContents(xtext::EnumRule)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpper": 1},
    "body": "enum.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"eAllContents": 1},
    "body": "aGrammar.eAllContents(xtext::ParserRule)->collect(temp1 : ParserRule | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "<>": 3,
      "and": 2,
      "toUpper": 3,
      "equalsIgnoreCase": 3
    },
    "body": "nameRule.toUpper().equalsIgnoreCase('NUMBER').<>(true).and(nameRule.toUpper().equalsIgnoreCase('STRING').<>(true)).and(nameRule.toUpper().equalsIgnoreCase('CHARACTER').<>(true))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 11,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 3,
      "BooleanLiteralExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {
      "or": 2,
      "last": 3,
      "size": 1,
      "and": 1,
      "toUpper": 3,
      "equalsIgnoreCase": 3,
      "=": 4,
      "eAllContents": 4,
      "-": 1
    },
    "body": "i.=(aGrammar.eAllContents(xtext::ParserRule)->size().-(1)).and(aGrammar.eAllContents(xtext::ParserRule)->last().name.toUpper().equalsIgnoreCase('NUMBER').=(true).or(aGrammar.eAllContents(xtext::ParserRule)->last().name.toUpper().equalsIgnoreCase('STRING').=(true)).or(aGrammar.eAllContents(xtext::ParserRule)->last().name.toUpper().equalsIgnoreCase('CHARACTER').=(true)))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 22,
      "VariableExpImpl": 5,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 4,
      "StringLiteralExpImpl": 3,
      "PropertyCallExpImpl": 3,
      "BooleanLiteralExpImpl": 3
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpper": 1},
    "body": "nameRule.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "size": 1,
      "=": 1,
      "eAllContents": 1
    },
    "body": "i.=(aGrammar.eAllContents(xtext::ParserRule)->size()).not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpper": 1},
    "body": "nameRule.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpper": 1},
    "body": "nameRule.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Impl').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "grammarName.concat('Configuration')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "at": 1,
      "toUpper": 1
    },
    "body": "aGrammar.rules->at(1).name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rules"
    ]
  },
  {
    "operations": {"eAllContents": 1},
    "body": "aGrammar.eAllContents(xtext::TerminalRule)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "terminal.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "and": 1,
      "=": 2
    },
    "body": "terminal.type.classifier.name.=('EString').and(terminal.name.=('ID'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "type",
      "name",
      "name",
      "classifier"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "and": 1,
      "=": 1
    },
    "body": "terminal.type.classifier.name.=('EString').and(terminal.name.<>('ID'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "type",
      "name",
      "name",
      "classifier"
    ]
  },
  {
    "operations": {"eAllContents": 1},
    "body": "aGrammar.eAllContents(xtext::EnumRule)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpper": 1},
    "body": "enum.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"eAllContents": 1},
    "body": "enum.eAllContents(xtext::EnumLiteralDeclaration)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpper": 1},
    "body": "renameKeywordWithSpecialCharacterTemplate(literal.literal.value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "value",
      "literal"
    ]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpper": 1},
    "body": "renameKeywordWithSpecialCharacterTemplate(literal.literal.value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "value",
      "literal"
    ]
  },
  {
    "operations": {
      "size": 1,
      "eAllContents": 1,
      "=": 1
    },
    "body": "i.=(enum.eAllContents(xtext::EnumLiteralDeclaration)->size())",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpper": 1},
    "body": "renameKeywordWithSpecialCharacterTemplate(literal.literal.value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "value",
      "literal"
    ]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpper": 1},
    "body": "renameKeywordWithSpecialCharacterTemplate(literal.literal.value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "value",
      "literal"
    ]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpper": 1},
    "body": "renameKeywordWithSpecialCharacterTemplate(literal.literal.value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "value",
      "literal"
    ]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpper": 1},
    "body": "renameKeywordWithSpecialCharacterTemplate(literal.literal.value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "value",
      "literal"
    ]
  },
  {
    "operations": {"eAllContents": 1},
    "body": "aGrammar.eAllContents(xtext::ParserRule)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 6,
      "size": 2,
      "and": 7,
      "toUpper": 5,
      "=": 2,
      "eAllContents": 2
    },
    "body": "i.<>(1).and(rule.eAllContents(xtext::RuleCall)->size().=(1)).and(rule.eAllContents(xtext::Keyword)->size().=(0)).and(rule.name.toUpper().<>('ESTRING')).and(rule.name.toUpper().<>('NUMBER')).and(rule.name.toUpper().<>('STRING')).and(rule.name.toUpper().<>('EINT')).and(rule.name.toUpper().<>('EFLOAT'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 24,
      "VariableExpImpl": 8,
      "IntegerLiteralExpImpl": 3,
      "StringLiteralExpImpl": 5,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 5
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "<>": 5,
      "and": 4,
      "toUpper": 5
    },
    "body": "rule.name.toUpper().<>('ESTRING').and(rule.name.toUpper().<>('NUMBER')).and(rule.name.toUpper().<>('STRING')).and(rule.name.toUpper().<>('EINT')).and(rule.name.toUpper().<>('EFLOAT'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 14,
      "VariableExpImpl": 5,
      "StringLiteralExpImpl": 5,
      "PropertyCallExpImpl": 5
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpper": 1},
    "body": "rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "at": 1,
      "size": 3,
      "oclIsKindOf": 3,
      "and": 4,
      "+": 1,
      "eAllContents": 6,
      "=": 2,
      ">": 2,
      "first": 2
    },
    "body": "rule.eAllContents(xtext::AbstractElement)->first().oclIsKindOf(xtext::Alternatives).=(false).and(rule.eAllContents(xtext::AbstractElement)->size().>(1).and(rule.eAllContents(xtext::AbstractElement)->first().oclIsKindOf(xtext::Assignment).and(rule.eAllContents(xtext::AbstractElement)->at(2).oclIsKindOf(xtext::Alternatives))).=(false)).and(rule.eAllContents(xtext::Keyword)->size().+(rule.eAllContents(xtext::RuleCall)->size()).>(1))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 24,
      "VariableExpImpl": 6,
      "IntegerLiteralExpImpl": 3,
      "TypeExpImpl": 9,
      "BooleanLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "rule.eAllContents(xtext::AbstractElement)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 3,
      "oclIsKindOf": 1,
      "and": 6,
      "ancestors": 3,
      "oclAsType": 6,
      "=": 6,
      "eAllContents": 2,
      "first": 2,
      ">=": 2
    },
    "body": "element.oclIsKindOf(xtext::Group).and(element.oclAsType(xtext::Group).cardinality.=('?')).and(element.oclAsType(xtext::Group).ancestors(xtext::Alternatives)->size().=(0)).and(element.oclAsType(xtext::Group).ancestors(xtext::Group)->size().>=(1).and(element.oclAsType(xtext::Group).ancestors(xtext::Group)->first().cardinality.=('?')).=(false).and(element.oclAsType(xtext::Group).eAllContents(xtext::Group)->size().>=(1).and(element.oclAsType(xtext::Group).eAllContents(xtext::Group)->first().cardinality.=(null)).=(false)))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 31,
      "VariableExpImpl": 7,
      "NullLiteralExpImpl": 1,
      "IntegerLiteralExpImpl": 3,
      "TypeExpImpl": 12,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 3,
      "BooleanLiteralExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "or": 2,
      "size": 3,
      "oclIsKindOf": 4,
      "and": 7,
      "ancestors": 5,
      "oclAsType": 8,
      "=": 7,
      "first": 2
    },
    "body": "element.oclIsKindOf(xtext::Alternatives).and(element.oclAsType(xtext::Alternatives).ancestors()->first().oclIsKindOf(xtext::Group).and(element.oclAsType(xtext::Alternatives).ancestors()->first().oclAsType(xtext::Group).cardinality.=('*')).=(false)).and(element.oclAsType(xtext::Alternatives).ancestors(xtext::Alternatives)->size().=(0)).or(element.oclIsKindOf(xtext::Group).and(element.oclAsType(xtext::Group).cardinality.=('*')).and(element.oclAsType(xtext::Group).ancestors(xtext::Alternatives)->size().=(0)).or(element.oclIsKindOf(xtext::Group).and(element.oclAsType(xtext::Group).cardinality.=('+')).and(element.oclAsType(xtext::Group).ancestors(xtext::Alternatives)->size().=(0))))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 38,
      "VariableExpImpl": 10,
      "IntegerLiteralExpImpl": 3,
      "TypeExpImpl": 15,
      "StringLiteralExpImpl": 3,
      "PropertyCallExpImpl": 3,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"eAllContents": 1},
    "body": "element.eAllContents(xtext::AbstractElement)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "and": 1,
      "=": 1
    },
    "body": "i.=(1).and(element.oclIsKindOf(xtext::Alternatives))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "and": 2,
      "=": 2,
      "oclAsType": 1
    },
    "body": "i.=(1).and(element.oclIsKindOf(xtext::Group).and(element.oclAsType(xtext::Group).cardinality.=('*')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "and": 2,
      "=": 2,
      "oclAsType": 1
    },
    "body": "i.=(1).and(element.oclIsKindOf(xtext::Group).and(element.oclAsType(xtext::Group).cardinality.=('+')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "and": 1,
      "=": 1,
      "oclAsType": 1
    },
    "body": "elementAux.oclIsKindOf(xtext::Group).and(elementAux.oclAsType(xtext::Group).cardinality.=('?'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "elementAux.oclIsKindOf(xtext::RuleCall)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "elementAux.oclIsKindOf(xtext::Keyword)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "contains": 2,
      "and": 1,
      "oclAsType": 2
    },
    "body": "compareKeywordTemplate(elementAux.oclAsType(xtext::Keyword).value).contains('true').and(noValidCharactersTemplate(elementAux.oclAsType(xtext::Keyword).value).contains('false'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 2,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "contains": 2,
      "and": 1,
      "oclAsType": 2
    },
    "body": "compareKeywordTemplate(elementAux.oclAsType(xtext::Keyword).value).contains('false').and(noValidCharactersTemplate(elementAux.oclAsType(xtext::Keyword).value).contains('false'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 2,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "or": 1,
      "at": 2,
      "size": 2,
      "and": 2,
      "ancestors": 4,
      "oclAsType": 4,
      "=": 2,
      ">": 2
    },
    "body": "elementAux.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->size().>(0).and(elementAux.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->at(1).cardinality.=('*')).or(elementAux.oclAsType(xtext::Keyword).ancestors(xtext::Alternatives)->size().>(0).and(elementAux.oclAsType(xtext::Keyword).ancestors(xtext::Alternatives)->at(1).cardinality.=('*')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 19,
      "VariableExpImpl": 4,
      "IntegerLiteralExpImpl": 4,
      "TypeExpImpl": 8,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "renameKeywordWithSpecialCharacterTemplate(elementAux.oclAsType(xtext::Keyword).value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "renameKeywordWithSpecialCharacterTemplate(elementAux.oclAsType(xtext::Keyword).value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "last": 1,
      "size": 1,
      "and": 1,
      "eAllContents": 2,
      "=": 3
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 8,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "=": 2,
      "eAllContents": 1
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "at": 2,
      "or": 1,
      "size": 2,
      "and": 2,
      "ancestors": 4,
      "=": 2,
      "oclAsType": 4,
      ">": 2
    },
    "body": "elementAux.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->size().>(0).and(elementAux.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->at(1).cardinality.=('*')).or(elementAux.oclAsType(xtext::Keyword).ancestors(xtext::Alternatives)->size().>(0).and(elementAux.oclAsType(xtext::Keyword).ancestors(xtext::Alternatives)->at(1).cardinality.=('*')))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 19,
      "IntegerLiteralExpImpl": 4,
      "TypeExpImpl": 8,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "renameKeywordWithSpecialCharacterTemplate(elementAux.oclAsType(xtext::Keyword).value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "renameKeywordWithSpecialCharacterTemplate(elementAux.oclAsType(xtext::Keyword).value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "last": 1,
      "and": 1,
      "eAllContents": 2,
      "=": 3
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "=": 2,
      "eAllContents": 1
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "renameKeywordWithSpecialCharacterTemplate(elementAux.oclAsType(xtext::Keyword).value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "renameKeywordWithSpecialCharacterTemplate(elementAux.oclAsType(xtext::Keyword).value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "last": 1,
      "and": 1,
      "eAllContents": 2,
      "=": 3
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "=": 2,
      "eAllContents": 1
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "at": 2,
      "size": 2,
      "and": 2,
      "ancestors": 4,
      "oclAsType": 4,
      "=": 2,
      ">": 2
    },
    "body": "elementAux.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->size().>(0).and(elementAux.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->at(1).cardinality.=('*')).or(elementAux.oclAsType(xtext::Keyword).ancestors(xtext::Alternatives)->size().>(0).and(elementAux.oclAsType(xtext::Keyword).ancestors(xtext::Alternatives)->at(1).cardinality.=('*')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 19,
      "VariableExpImpl": 4,
      "IntegerLiteralExpImpl": 4,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 8,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Punctuator').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementAux.oclAsType(xtext::Keyword).value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Punctuator').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementAux.oclAsType(xtext::Keyword).value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "last": 1,
      "size": 1,
      "and": 1,
      "=": 3,
      "eAllContents": 2
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 8,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "=": 2,
      "eAllContents": 1
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "at": 2,
      "size": 2,
      "and": 2,
      "ancestors": 4,
      "oclAsType": 4,
      "=": 2,
      ">": 2
    },
    "body": "elementAux.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->size().>(0).and(elementAux.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->at(1).cardinality.=('*')).or(elementAux.oclAsType(xtext::Keyword).ancestors(xtext::Alternatives)->size().>(0).and(elementAux.oclAsType(xtext::Keyword).ancestors(xtext::Alternatives)->at(1).cardinality.=('*')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 19,
      "VariableExpImpl": 4,
      "IntegerLiteralExpImpl": 4,
      "TypeExpImpl": 8,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Punctuator').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementAux.oclAsType(xtext::Keyword).value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Punctuator').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementAux.oclAsType(xtext::Keyword).value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "last": 1,
      "and": 1,
      "eAllContents": 2,
      "=": 3
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "eAllContents": 1,
      "=": 2
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Punctuator').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementAux.oclAsType(xtext::Keyword).value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Punctuator').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "elementAux.oclAsType(xtext::Keyword).value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "last": 1,
      "and": 1,
      "=": 3,
      "eAllContents": 2
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "eAllContents": 1,
      "=": 2
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "at": 1,
      "or": 1,
      "size": 2,
      "eContents": 1,
      "and": 1,
      "toUpper": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 1,
      ">": 1
    },
    "body": "elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).eContents(xtext::CrossReference)->size().>(0)).or(elementAux.oclAsType(xtext::RuleCall).rule.name.toUpper().=('ID'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 15,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 3,
      "TypeExpImpl": 6,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "at": 2,
      "or": 1,
      "size": 2,
      "and": 2,
      "ancestors": 4,
      "oclAsType": 4,
      "=": 2,
      ">": 2
    },
    "body": "elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().>(0).and(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).cardinality.=('*')).or(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Alternatives)->size().>(0).and(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Alternatives)->at(1).cardinality.=('*')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 19,
      "VariableExpImpl": 4,
      "IntegerLiteralExpImpl": 4,
      "TypeExpImpl": 8,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "elementAux.oclAsType(xtext::RuleCall).rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "last": 1,
      "and": 1,
      "=": 3,
      "eAllContents": 2
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "=": 2,
      "eAllContents": 1
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "at": 2,
      "size": 2,
      "and": 2,
      "ancestors": 4,
      "oclAsType": 4,
      "=": 2,
      ">": 2
    },
    "body": "elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().>(0).and(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).cardinality.=('+')).or(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Alternatives)->size().>(0).and(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Alternatives)->at(1).cardinality.=('+')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 19,
      "VariableExpImpl": 4,
      "IntegerLiteralExpImpl": 4,
      "TypeExpImpl": 8,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "elementAux.oclAsType(xtext::RuleCall).rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "last": 1,
      "size": 1,
      "and": 1,
      "=": 3,
      "eAllContents": 2
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "eAllContents": 1,
      "=": 2
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "elementAux.oclAsType(xtext::RuleCall).rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "last": 1,
      "and": 1,
      "=": 3,
      "eAllContents": 2
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 8,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "=": 2,
      "eAllContents": 1
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1,
      "=": 1
    },
    "body": "elementAux.oclAsType(xtext::RuleCall).rule.name.toUpper().=('ESTRING')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "or": 1,
      "at": 2,
      "size": 2,
      "and": 2,
      "ancestors": 4,
      "oclAsType": 4,
      "=": 2,
      ">": 2
    },
    "body": "elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().>(0).and(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).cardinality.=('*')).or(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Alternatives)->size().>(0).and(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Alternatives)->at(1).cardinality.=('*')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 19,
      "VariableExpImpl": 4,
      "IntegerLiteralExpImpl": 4,
      "TypeExpImpl": 8,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "last": 1,
      "size": 1,
      "and": 1,
      "eAllContents": 2,
      "=": 3
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "=": 2,
      "eAllContents": 1
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "at": 2,
      "size": 2,
      "and": 2,
      "ancestors": 4,
      "=": 2,
      "oclAsType": 4,
      ">": 2
    },
    "body": "elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().>(0).and(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).cardinality.=('+')).or(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Alternatives)->size().>(0).and(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Alternatives)->at(1).cardinality.=('+')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 19,
      "VariableExpImpl": 4,
      "IntegerLiteralExpImpl": 4,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 8,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "last": 1,
      "and": 1,
      "=": 3,
      "eAllContents": 2
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "=": 2,
      "eAllContents": 1
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "last": 1,
      "size": 1,
      "and": 1,
      "eAllContents": 2,
      "=": 3
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "eAllContents": 1,
      "=": 2
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 3,
      "toUpper": 4,
      "oclAsType": 4,
      "=": 4
    },
    "body": "elementAux.oclAsType(xtext::RuleCall).rule.name.toUpper().=('EINT').or(elementAux.oclAsType(xtext::RuleCall).rule.name.toUpper().=('EFLOAT')).or(elementAux.oclAsType(xtext::RuleCall).rule.name.toUpper().=('INT')).or(elementAux.oclAsType(xtext::RuleCall).rule.name.toUpper().=('FLOAT'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 15,
      "VariableExpImpl": 4,
      "TypeExpImpl": 4,
      "StringLiteralExpImpl": 4,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "at": 2,
      "or": 1,
      "size": 2,
      "and": 2,
      "ancestors": 4,
      "oclAsType": 4,
      "=": 2,
      ">": 2
    },
    "body": "elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().>(0).and(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).cardinality.=('*')).or(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Alternatives)->size().>(0).and(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Alternatives)->at(1).cardinality.=('*')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 19,
      "VariableExpImpl": 4,
      "IntegerLiteralExpImpl": 4,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 8,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "last": 1,
      "size": 1,
      "and": 1,
      "=": 3,
      "eAllContents": 2
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "=": 2,
      "eAllContents": 1
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "at": 2,
      "or": 1,
      "size": 2,
      "and": 2,
      "ancestors": 4,
      "=": 2,
      "oclAsType": 4,
      ">": 2
    },
    "body": "elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().>(0).and(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).cardinality.=('+')).or(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Alternatives)->size().>(0).and(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Alternatives)->at(1).cardinality.=('+')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 19,
      "VariableExpImpl": 4,
      "IntegerLiteralExpImpl": 4,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 8,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "last": 1,
      "and": 1,
      "eAllContents": 2,
      "=": 3
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 8,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "=": 2,
      "eAllContents": 1
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "last": 1,
      "size": 1,
      "and": 1,
      "=": 3,
      "eAllContents": 2
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 8,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "=": 2,
      "eAllContents": 1
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "at": 2,
      "or": 1,
      "size": 2,
      "and": 2,
      "ancestors": 4,
      "=": 2,
      "oclAsType": 4,
      ">": 2
    },
    "body": "elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().>(0).and(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).cardinality.=('*')).or(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Alternatives)->size().>(0).and(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Alternatives)->at(1).cardinality.=('*')))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 19,
      "IntegerLiteralExpImpl": 4,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 8,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "last": 1,
      "and": 1,
      "eAllContents": 2,
      "=": 3
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 8,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "=": 2,
      "eAllContents": 1
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "at": 2,
      "size": 2,
      "and": 2,
      "ancestors": 4,
      "oclAsType": 4,
      "=": 2,
      ">": 2
    },
    "body": "elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().>(0).and(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).cardinality.=('+')).or(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Alternatives)->size().>(0).and(elementAux.oclAsType(xtext::RuleCall).ancestors(xtext::Alternatives)->at(1).cardinality.=('+')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 19,
      "VariableExpImpl": 4,
      "IntegerLiteralExpImpl": 4,
      "TypeExpImpl": 8,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "last": 1,
      "and": 1,
      "eAllContents": 2,
      "=": 3
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 8,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "=": 2,
      "eAllContents": 1
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChildAux.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "i.=(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "last": 1,
      "size": 1,
      "and": 1,
      "=": 3,
      "eAllContents": 2
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).and(rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).=(false))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "=": 2,
      "eAllContents": 1
    },
    "body": "i.=(element.eAllContents(xtext::AbstractElement)->size()).=(false)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "element.oclIsKindOf(xtext::Alternatives)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "oclIsKindOf": 2,
      "and": 2,
      "=": 2,
      "oclAsType": 2
    },
    "body": "element.oclIsKindOf(xtext::Group).and(element.oclAsType(xtext::Group).cardinality.=('*')).or(element.oclIsKindOf(xtext::Group).and(element.oclAsType(xtext::Group).cardinality.=('+')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 4,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 4,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "last": 1,
      "eAllContents": 1,
      "=": 1
    },
    "body": "rule.eAllContents(xtext::AbstractElement)->last().=(elementAux)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "last": 1,
      "size": 1,
      "and": 2,
      "ancestors": 2,
      "eAllContents": 3,
      "=": 3,
      "first": 3
    },
    "body": "rule.eAllContents(xtext::AbstractElement)->last().=(elementAux).and(rule.eAllContents(xtext::AbstractElement)->first().=(element).or(element.ancestors(xtext::Assignment)->size().<>(0).and(rule.eAllContents(xtext::AbstractElement)->first().=(element.ancestors(xtext::Assignment)->first()))))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 17,
      "VariableExpImpl": 7,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5
    },
    "properties": []
  },
  {
    "operations": {
      "last": 1,
      "eAllContents": 1,
      "=": 1
    },
    "body": "rule.eAllContents(xtext::AbstractElement)->last().=(elementAux)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "oclIsKindOf": 7,
      "and": 11,
      "ancestors": 15,
      "oclAsType": 8,
      "=": 9,
      "first": 14
    },
    "body": "element.oclIsKindOf(xtext::Keyword).and(element.ancestors(xtext::Alternatives)->size().=(0)).and(element.ancestors()->first().oclIsKindOf(xtext::Group).and(element.ancestors()->first().oclAsType(xtext::Group).cardinality.=('*')).=(false)).and(element.ancestors()->first().oclIsKindOf(xtext::Group).and(element.ancestors()->first().oclAsType(xtext::Group).cardinality.=('+')).=(false)).and(element.ancestors()->first().oclIsKindOf(xtext::Assignment).and(element.ancestors()->first().oclAsType(xtext::Assignment).ancestors()->first().oclIsKindOf(xtext::Group)).and(element.ancestors()->first().oclAsType(xtext::Assignment).ancestors()->first().oclAsType(xtext::Group).cardinality.=('*')).=(false)).and(element.ancestors()->first().oclIsKindOf(xtext::Assignment).and(element.ancestors()->first().oclAsType(xtext::Assignment).ancestors()->first().oclIsKindOf(xtext::Group)).and(element.ancestors()->first().oclAsType(xtext::Assignment).ancestors()->first().oclAsType(xtext::Group).cardinality.=('+')).=(false))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 65,
      "VariableExpImpl": 12,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 16,
      "StringLiteralExpImpl": 4,
      "PropertyCallExpImpl": 4,
      "BooleanLiteralExpImpl": 4
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::Keyword).cardinality.=('?').or(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->size().<>(0)).and(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->first().cardinality.=('?'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 12,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "contains": 2,
      "and": 1,
      "oclAsType": 2
    },
    "body": "compareKeywordTemplate(element.oclAsType(xtext::Keyword).value).contains('true').and(noValidCharactersTemplate(element.oclAsType(xtext::Keyword).value).contains('false'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 2,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "contains": 2,
      "and": 1,
      "oclAsType": 2
    },
    "body": "compareKeywordTemplate(element.oclAsType(xtext::Keyword).value).contains('false').and(noValidCharactersTemplate(element.oclAsType(xtext::Keyword).value).contains('false'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 2,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "or": 1,
      "at": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      ">": 1
    },
    "body": "element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->size().>(0).and(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->at(1).cardinality.=('*')).or(element.oclAsType(xtext::Keyword).cardinality.=('*'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 2,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "renameKeywordWithSpecialCharacterTemplate(element.oclAsType(xtext::Keyword).value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "renameKeywordWithSpecialCharacterTemplate(element.oclAsType(xtext::Keyword).value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::Keyword).cardinality.=('?').or(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->size().<>(0)).and(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->first().cardinality.=('?'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "at": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      ">": 1
    },
    "body": "element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->size().>(0).and(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->at(1).cardinality.=('+')).or(element.oclAsType(xtext::Keyword).cardinality.=('+'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 2,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "renameKeywordWithSpecialCharacterTemplate(element.oclAsType(xtext::Keyword).value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "renameKeywordWithSpecialCharacterTemplate(element.oclAsType(xtext::Keyword).value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "=": 2,
      "oclAsType": 3,
      "first": 1
    },
    "body": "element.oclAsType(xtext::Keyword).cardinality.=('?').or(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->size().<>(0)).and(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->first().cardinality.=('?'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 12,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "renameKeywordWithSpecialCharacterTemplate(element.oclAsType(xtext::Keyword).value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Keyword').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "renameKeywordWithSpecialCharacterTemplate(element.oclAsType(xtext::Keyword).value).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::Keyword).cardinality.=('?').or(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->size().<>(0)).and(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->first().cardinality.=('?'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "at": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      ">": 1
    },
    "body": "element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->size().>(0).and(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->at(1).cardinality.=('*')).or(element.oclAsType(xtext::Keyword).cardinality.=('*'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 2,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Punctuator').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "element.oclAsType(xtext::Keyword).value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Punctuator').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "element.oclAsType(xtext::Keyword).value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "=": 2,
      "oclAsType": 3,
      "first": 1
    },
    "body": "element.oclAsType(xtext::Keyword).cardinality.=('?').or(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->size().<>(0)).and(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->first().cardinality.=('?'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "at": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "=": 2,
      "oclAsType": 3,
      ">": 1
    },
    "body": "element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->size().>(0).and(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->at(1).cardinality.=('+')).or(element.oclAsType(xtext::Keyword).cardinality.=('+'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 2,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Punctuator').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "element.oclAsType(xtext::Keyword).value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Punctuator').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "element.oclAsType(xtext::Keyword).value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::Keyword).cardinality.=('?').or(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->size().<>(0)).and(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->first().cardinality.=('?'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Punctuator').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "element.oclAsType(xtext::Keyword).value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "grammarName.concat('Punctuator').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "element.oclAsType(xtext::Keyword).value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::Keyword).cardinality.=('?').or(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->size().<>(0)).and(element.oclAsType(xtext::Keyword).ancestors(xtext::Assignment)->first().cardinality.=('?'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 12,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 5,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "oclIsKindOf": 7,
      "and": 11,
      "ancestors": 15,
      "=": 9,
      "oclAsType": 8,
      "first": 14
    },
    "body": "element.oclIsKindOf(xtext::RuleCall).and(element.ancestors(xtext::Alternatives)->size().=(0)).and(element.ancestors()->first().oclIsKindOf(xtext::Group).and(element.ancestors()->first().oclAsType(xtext::Group).cardinality.=('*')).=(false)).and(element.ancestors()->first().oclIsKindOf(xtext::Group).and(element.ancestors()->first().oclAsType(xtext::Group).cardinality.=('+')).=(false)).and(element.ancestors()->first().oclIsKindOf(xtext::Assignment).and(element.ancestors()->first().oclAsType(xtext::Assignment).ancestors()->first().oclIsKindOf(xtext::Group)).and(element.ancestors()->first().oclAsType(xtext::Assignment).ancestors()->first().oclAsType(xtext::Group).cardinality.=('*')).=(false)).and(element.ancestors()->first().oclIsKindOf(xtext::Assignment).and(element.ancestors()->first().oclAsType(xtext::Assignment).ancestors()->first().oclIsKindOf(xtext::Group)).and(element.ancestors()->first().oclAsType(xtext::Assignment).ancestors()->first().oclAsType(xtext::Group).cardinality.=('+')).=(false))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 65,
      "VariableExpImpl": 12,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 16,
      "StringLiteralExpImpl": 4,
      "PropertyCallExpImpl": 4,
      "BooleanLiteralExpImpl": 4
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "=": 2,
      "oclAsType": 3,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "<>": 1,
      "size": 1,
      "ancestors": 1,
      "oclAsType": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1,
      "=": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).rule.name.toUpper().=('ID')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "=": 1,
      "oclAsType": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('*')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "=": 1,
      "oclAsType": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('+')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 5,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 12,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 3,
      "size": 1,
      "and": 1,
      "toUpper": 4,
      "ancestors": 1,
      "=": 5,
      "oclAsType": 4
    },
    "body": "element.oclAsType(xtext::RuleCall).rule.name.toUpper().=('EINT').or(element.oclAsType(xtext::RuleCall).rule.name.toUpper().=('EFLOAT')).or(element.oclAsType(xtext::RuleCall).rule.name.toUpper().=('INT')).or(element.oclAsType(xtext::RuleCall).rule.name.toUpper().=('FLOAT')).and(element.ancestors(xtext::Alternatives)->size().=(0))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 19,
      "VariableExpImpl": 5,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 4,
      "TypeExpImpl": 5,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "oclAsType": 1,
      "=": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('*')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "=": 1,
      "oclAsType": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('+')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "and": 1,
      "toUpper": 1,
      "ancestors": 1,
      "=": 2,
      "oclAsType": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).rule.name.toUpper().=('ESTRING').and(element.ancestors(xtext::Alternatives)->size().=(0))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "oclAsType": 1,
      "=": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('*')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "oclAsType": 1,
      "=": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('+')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 12,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "=": 2,
      "oclAsType": 3,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 12,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclAsType": 1,
      "=": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "at": 1,
      "size": 1,
      "eContents": 1,
      "toUpper": 1,
      "ancestors": 1,
      "=": 1,
      "oclAsType": 2,
      ">": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).eContents(xtext::CrossReference)->size().>(0).or(element.oclAsType(xtext::RuleCall).rule.name.toUpper().=('ID'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 10,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 2,
      "TypeExpImpl": 4,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "or": 1,
      "at": 1,
      "ancestors": 1,
      "=": 2,
      "oclAsType": 2
    },
    "body": "element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).cardinality.=('*').or(element.oclAsType(xtext::RuleCall).cardinality.=('*'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 3,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 5,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "at": 1,
      "ancestors": 1,
      "=": 2,
      "oclAsType": 2
    },
    "body": "element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).cardinality.=('+').or(element.oclAsType(xtext::RuleCall).cardinality.=('+'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 3,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 12,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpper": 1,
      "oclAsType": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "=": 2,
      "oclAsType": 3,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 3,
      "size": 1,
      "and": 1,
      "toUpper": 4,
      "ancestors": 1,
      "oclAsType": 4,
      "=": 5
    },
    "body": "element.oclAsType(xtext::RuleCall).rule.name.toUpper().=('EINT').or(element.oclAsType(xtext::RuleCall).rule.name.toUpper().=('EFLOAT')).or(element.oclAsType(xtext::RuleCall).rule.name.toUpper().=('INT')).or(element.oclAsType(xtext::RuleCall).rule.name.toUpper().=('FLOAT')).and(element.ancestors(xtext::Alternatives)->size().=(0))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 19,
      "VariableExpImpl": 5,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 4,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "or": 1,
      "at": 1,
      "ancestors": 1,
      "oclAsType": 2,
      "=": 2
    },
    "body": "element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).cardinality.=('*').or(element.oclAsType(xtext::RuleCall).cardinality.=('*'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "oclAsType": 1,
      "=": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "at": 1,
      "or": 1,
      "ancestors": 1,
      "oclAsType": 2,
      "=": 2
    },
    "body": "element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).cardinality.=('+').or(element.oclAsType(xtext::RuleCall).cardinality.=('+'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 3,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "=": 2,
      "oclAsType": 3,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "and": 1,
      "toUpper": 1,
      "ancestors": 1,
      "=": 2,
      "oclAsType": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).rule.name.toUpper().=('ESTRING').and(element.ancestors(xtext::Alternatives)->size().=(0))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "at": 1,
      "or": 1,
      "ancestors": 1,
      "oclAsType": 2,
      "=": 2
    },
    "body": "element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).cardinality.=('*').or(element.oclAsType(xtext::RuleCall).cardinality.=('*'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 3,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "at": 1,
      "ancestors": 1,
      "oclAsType": 2,
      "=": 2
    },
    "body": "element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).cardinality.=('+').or(element.oclAsType(xtext::RuleCall).cardinality.=('+'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 3,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "=": 2,
      "oclAsType": 3,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "=": 2,
      "oclAsType": 3,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "at": 1,
      "ancestors": 1,
      "=": 2,
      "oclAsType": 2
    },
    "body": "element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).cardinality.=('*').or(element.oclAsType(xtext::RuleCall).cardinality.=('*'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "=": 2,
      "oclAsType": 3,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "at": 1,
      "or": 1,
      "ancestors": 1,
      "oclAsType": 2,
      "=": 2
    },
    "body": "element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->at(1).cardinality.=('+').or(element.oclAsType(xtext::RuleCall).cardinality.=('+'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "oclAsType": 3,
      "=": 2,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "size": 1,
      "and": 1,
      "ancestors": 2,
      "=": 2,
      "oclAsType": 3,
      "first": 1
    },
    "body": "element.oclAsType(xtext::RuleCall).cardinality.=('?').or(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->size().<>(0).and(element.oclAsType(xtext::RuleCall).ancestors(xtext::Assignment)->first().cardinality.=('?')))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["cardinality"]
  },
  {
    "operations": {"=": 1},
    "body": "isOptionalLastChild.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(size)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "at": 1,
      "size": 4,
      "last": 1,
      "oclIsKindOf": 3,
      "and": 5,
      "+": 1,
      "ancestors": 1,
      "eAllContents": 7,
      "=": 3,
      ">": 2,
      "first": 2
    },
    "body": "rule.eAllContents(xtext::AbstractElement)->first().oclIsKindOf(xtext::Alternatives).=(false).and(rule.eAllContents(xtext::AbstractElement)->size().>(1).and(rule.eAllContents(xtext::AbstractElement)->first().oclIsKindOf(xtext::Assignment).and(rule.eAllContents(xtext::AbstractElement)->at(2).oclIsKindOf(xtext::Alternatives))).=(false)).and(rule.eAllContents(xtext::Keyword)->size().+(rule.eAllContents(xtext::RuleCall)->size()).>(1)).and(rule.eAllContents(xtext::AbstractElement)->last().ancestors(xtext::Alternatives)->size().=(0))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 30,
      "VariableExpImpl": 7,
      "IntegerLiteralExpImpl": 4,
      "TypeExpImpl": 11,
      "BooleanLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "size": 2,
      "+": 1,
      "=": 1,
      "eAllContents": 2
    },
    "body": "rule.eAllContents(xtext::Keyword)->size().+(rule.eAllContents(xtext::RuleCall)->size()).=(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 6,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "at": 1,
      "toUpper": 1,
      "=": 1,
      "eAllContents": 1
    },
    "body": "rule.eAllContents(xtext::RuleCall)->at(1).rule.name.toUpper().=('ESTRING')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "at": 1,
      "oclIsKindOf": 1,
      "eAllContents": 1
    },
    "body": "rule.eAllContents(xtext::RuleCall)->at(1).rule.oclIsKindOf(xtext::TerminalRule)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["rule"]
  },
  {
    "operations": {"toUpper": 1},
    "body": "rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "at": 1,
      "toUpper": 1,
      "eAllContents": 1
    },
    "body": "rule.eAllContents(xtext::RuleCall)->at(1).rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {"toUpper": 1},
    "body": "rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "at": 1,
      "toUpper": 1,
      "eAllContents": 1
    },
    "body": "rule.eAllContents(xtext::RuleCall)->at(1).rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "at": 1,
      "toUpper": 1,
      "eAllContents": 1
    },
    "body": "rule.eAllContents(xtext::RuleCall)->at(1).rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {
      "or": 2,
      "at": 3,
      "toUpper": 3,
      "=": 3,
      "eAllContents": 3
    },
    "body": "rule.eAllContents(xtext::RuleCall)->at(1).rule.name.toUpper().=('EINT').or(rule.eAllContents(xtext::RuleCall)->at(1).rule.name.toUpper().=('NUMBER')).or(rule.eAllContents(xtext::RuleCall)->at(1).rule.name.toUpper().=('EFLOAT'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 14,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 3,
      "TypeExpImpl": 3,
      "StringLiteralExpImpl": 3,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {"toUpper": 1},
    "body": "rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "at": 1,
      "toUpper": 1,
      "=": 1,
      "eAllContents": 1
    },
    "body": "rule.eAllContents(xtext::RuleCall)->at(1).rule.name.toUpper().=('ID')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rule"
    ]
  },
  {
    "operations": {"toUpper": 1},
    "body": "rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpper": 1},
    "body": "rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"lineSeparator": 1},
    "body": "self.lineSeparator()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "grammarName.concat('Keyword.java')",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "grammarName.concat('Keyword')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "asSet": 1,
      "eAllContents": 1
    },
    "body": "aGrammar.eAllContents(xtext::Keyword)->collect(temp1 : Keyword | temp1.value)->asSet()",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "contains": 2,
      "and": 1
    },
    "body": "compareKeywordTemplate(keyword).contains('false').and(noValidCharactersTemplate(keyword).contains('false'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "TemplateInvocationSpec": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "size": 1,
      "asSet": 1,
      "eAllContents": 1,
      "=": 1
    },
    "body": "i.=(aGrammar.eAllContents(xtext::Keyword)->collect(temp1 : Keyword | temp1.value)->asSet()->size()).not()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 5,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {"toUpper": 1},
    "body": "renameKeywordWithSpecialCharacterTemplate(keyword).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "keyword",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"toUpper": 1},
    "body": "renameKeywordWithSpecialCharacterTemplate(keyword).toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "keyword",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "grammarName.concat('Keyword')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "grammarName.concat('Keyword')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "grammarName.concat('Keyword')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "grammarName.concat('.java')",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "aGrammar.eAllContents(xtext::ParserRule)->collect(temp1 : ParserRule | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpper": 1},
    "body": "nameRule.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "at": 1,
      "toUpper": 1
    },
    "body": "aGrammar.rules->at(1).name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rules"
    ]
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "grammarName.concat('Punctuator.java')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "grammarName.concat('Punctuator')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "asSet": 1,
      "eAllContents": 1
    },
    "body": "aGrammar.eAllContents(xtext::Keyword)->collect(temp1 : Keyword | temp1.value)->asSet()",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "contains": 2,
      "and": 1
    },
    "body": "compareKeywordTemplate(keyword).contains('true').and(noValidCharactersTemplate(keyword).contains('false'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "size": 1,
      "asSet": 1,
      "eAllContents": 1,
      "=": 1
    },
    "body": "i.=(aGrammar.eAllContents(xtext::Keyword)->collect(temp1 : Keyword | temp1.value)->asSet()->size()).not()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 5,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {},
    "body": "keyword",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "keyword",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "grammarName.concat('Punctuator')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "grammarName.concat('TokenType.java')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "aGrammar.eAllContents(xtext::TerminalRule)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 3,
      "and": 2,
      "toUpper": 3,
      "equalsIgnoreCase": 3
    },
    "body": "rule.name.toUpper().equalsIgnoreCase('NUMBER').<>(true).and(rule.name.toUpper().equalsIgnoreCase('STRING').<>(true)).and(rule.name.toUpper().equalsIgnoreCase('CHARACTER').<>(true))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 11,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 3,
      "PropertyCallExpImpl": 3,
      "BooleanLiteralExpImpl": 3
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpper": 1},
    "body": "rule.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "grammarName.concat('AstScanner.java')",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "grammarName.concat('ParseErrorLoggerVisitor.java')",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "at": 1,
      "toUpper": 1
    },
    "body": "aGrammar.rules->at(1).name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rules"
    ]
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "grammarName.concat('CommentLinesVisitor.java')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammarName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  }
]
