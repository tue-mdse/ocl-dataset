[
  {
    "operations": {},
    "body": "specification.automationLayer.basePackage",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "basePackage",
      "automationLayer"
    ]
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"substituteAll": 1},
    "body": "getAutomationPackage(specification).substituteAll('.', '/')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "type",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"substituteAll": 1},
    "body": "getContextsPackage(specification).substituteAll('.', '/')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"substituteAll": 1},
    "body": "getFeaturePackage(object,type).substituteAll('.', '/')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "object.oclIsTypeOf(specification::Specification)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "eContainer": 1,
      "+": 2
    },
    "body": "getBasePackage(object.eContainer(specification::Specification)).+('.').+(type)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "object.oclIsTypeOf(specification::Story)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "eContainer": 1,
      "+": 2
    },
    "body": "getBasePackage(object.eContainer(specification::Specification)).+('.').+(type)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "object.oclIsTypeOf(specification::Scenario)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "eContainer": 1,
      "+": 2
    },
    "body": "getBasePackage(object.eContainer(specification::Specification)).+('.').+(type)",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "eContainer": 1,
      "toLowerCase": 1,
      "substituteAll": 1
    },
    "body": "object.eContainer(specification::Story).name.substituteAll(' ', '').toLowerCase()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "+": 2,
      "oclAsType": 1
    },
    "body": "getBasePackage(object.oclAsType(specification::Specification)).+('.').+(type)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsTypeOf": 2,
      "asSet": 3,
      "oclAsType": 3
    },
    "body": "if namedElement.oclIsTypeOf(specification::Specification) then getTestTypeFeatures(namedElement.oclAsType(specification::Specification),type)->asSet() else if namedElement.oclIsTypeOf(specification::Feature) then getTestTypeStories(namedElement.oclAsType(specification::Feature),type)->asSet() else getTestTypeContexts(namedElement.oclAsType(specification::Story),type)->asSet() endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 8,
      "OperationCallExpImpl": 8,
      "QueryInvocationSpec": 3,
      "TypeExpImpl": 5,
      "IfExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "=": 1,
      "eAllContents": 1,
      ">": 1
    },
    "body": "specification.features->select(element : Feature | element.stories->collect(temp1 : Story | temp1.scenarios)->collect(temp2 : Scenario | temp2.eAllContents(specification::TestGenerationNote))->select(note : TestGenerationNote | note.type.=(type))->size().>(0))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 6,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "scenarios",
      "type",
      "stories",
      "features"
    ]
  },
  {
    "operations": {
      "size": 1,
      "=": 1,
      "eAllContents": 1,
      ">": 1
    },
    "body": "feature.stories->select(element : Story | element.scenarios->collect(temp1 : Scenario | temp1.eAllContents(specification::TestGenerationNote))->select(note : TestGenerationNote | note.type.=(type))->size().>(0))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 5,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "scenarios",
      "type",
      "stories"
    ]
  },
  {
    "operations": {
      "size": 1,
      "eAllContents": 1,
      "=": 1,
      ">": 1
    },
    "body": "story.scenarios->select(element : Scenario | element.eAllContents(specification::TestGenerationNote)->select(note : TestGenerationNote | note.type.=(type))->size().>(0))->collect(temp1 : Scenario | temp1.given)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 5,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "given",
      "scenarios",
      "type"
    ]
  },
  {
    "operations": {
      "size": 1,
      "eInverse": 1,
      "=": 1,
      "eAllContents": 1,
      ">": 1
    },
    "body": "contxt.eInverse(specification::Scenario)->select(element : Scenario | element.eAllContents(specification::TestGenerationNote)->select(note : TestGenerationNote | note.type.=(type))->size().>(0))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 5,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {
      "size": 1,
      "=": 1,
      "eAllContents": 1,
      ">": 1
    },
    "body": "story.scenarios->select(element : Scenario | element.eAllContents(specification::TestGenerationNote)->select(note : TestGenerationNote | note.type.=(type))->size().>(0))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 4,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "scenarios",
      "type"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "testClass.oclIsTypeOf(specification::Scenario)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "toString": 1,
      "+": 1
    },
    "body": "getCamelCaseName(testClass).+(type.toString().toUpperFirst())",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "testClass",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('fr.obeo.intent.spec2test.services.NamedElementUtils', 'getCamelCaseName(fr.obeo.intent.specification.NamedElement)', Sequence {namedElement})",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('fr.obeo.intent.spec2test.services.StoryUtils', 'getContexts(fr.obeo.intent.specification.Story)', Sequence {story})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  }
]
