[
  {
    "operations": {"=": 1},
    "body": "c.attribute->select(temp1 : Property | temp1.visibility.=(uml::VisibilityKind::public))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "visibility",
      "attribute"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "c.ownedOperation->select(temp1 : Operation | temp1.visibility.=(uml::VisibilityKind::public))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedOperation",
      "visibility"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "c.attribute->select(temp1 : Property | temp1.visibility.=(uml::VisibilityKind::private))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "visibility",
      "attribute"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "c.ownedOperation->select(temp1 : Operation | temp1.visibility.=(uml::VisibilityKind::private))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedOperation",
      "visibility"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "c.attribute->select(temp1 : Property | temp1.visibility.=(v))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "visibility",
      "attribute"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "c.ownedOperation->select(temp1 : Operation | temp1.visibility.=(v))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedOperation",
      "visibility"
    ]
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "att.type.oclIsKindOf(uml::Class)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"notEmpty": 1},
    "body": "Set {pr.association}->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["association"]
  },
  {
    "operations": {
      "or": 1,
      "oclIsKindOf": 2
    },
    "body": "pa.type.oclIsKindOf(uml::Class).or(pa.type.oclIsKindOf(uml::Interface))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["type"]
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "op.ownedParameter->exists(temp1 : Parameter | temp1.direction.toString().equalsIgnoreCase(direct))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "direction",
      "ownedParameter"
    ]
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1
    },
    "body": "pa->select(temp1 : Parameter | temp1.direction.toString().equalsIgnoreCase(direct))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["direction"]
  },
  {
    "operations": {
      "getAppliedStereotypes": 1,
      "=": 1
    },
    "body": "c.getAppliedStereotypes()->exists(temp1 : Stereotype | temp1.name.=('baseException'))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getAppliedStereotypes": 1,
      "=": 1
    },
    "body": "c.getAppliedStereotypes()->exists(temp1 : Stereotype | temp1.name.=('exception'))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "or": 1,
      "getAppliedStereotypes": 1,
      "=": 1
    },
    "body": "pr.getAppliedStereotypes()->exists(temp1 : Stereotype | temp1.name.=('readOnly')).or(pr.isReadOnly)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "isReadOnly",
      "name"
    ]
  }
]
