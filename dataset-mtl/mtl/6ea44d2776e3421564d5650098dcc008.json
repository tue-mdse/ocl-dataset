[
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('org.eclipse.acceleo.module.sample.DateFormatter', 'formatDate(java.util.Date, java.lang.String)', Sequence {d.value, s})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'twitter.json'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aDeckSet.deck",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["deck"]
  },
  {
    "operations": {},
    "body": "d",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "d.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "d.initFilters->size().>(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["initFilters"]
  },
  {
    "operations": {},
    "body": "d.initFilters",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["initFilters"]
  },
  {
    "operations": {},
    "body": "ins",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "i",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "eContainer": 2,
      "size": 2,
      "and": 1,
      "<": 1,
      ">": 1
    },
    "body": "i.<(ins.eContainer(twitterRESTAPI::Deck).initFilters->size()).and(ins.eContainer(twitterRESTAPI::Deck).initFilters->size().>(1))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["initFilters"]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "d.initFilters->size().>(1)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["initFilters"]
  },
  {
    "operations": {
      "size": 1,
      "followingSiblings": 1,
      ">": 1
    },
    "body": "d.followingSiblings()->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 2,
      "and": 1,
      "<": 1,
      ">": 1
    },
    "body": "i.<(ins.previous->collect(temp1 : Instruction | temp1.next)->size()).and(ins.previous->collect(temp2 : Instruction | temp2.next)->size().>(1))",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 5,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "previous",
      "next"
    ]
  },
  {
    "operations": {},
    "body": "ins.isNot",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isNot"]
  },
  {
    "operations": {
      "=": 1,
      "eClass": 1
    },
    "body": "ins.eClass().name.=('User')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"current": 1},
    "body": "ins.current(twitterRESTAPI::User).value",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "=": 1,
      "eClass": 1
    },
    "body": "ins.eClass().name.=('Word')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"current": 1},
    "body": "ins.current(twitterRESTAPI::Word).value",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "=": 1,
      "eClass": 1
    },
    "body": "ins.eClass().name.=('Hashtag')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"current": 1},
    "body": "ins.current(twitterRESTAPI::Hashtag).value",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "=": 1,
      "eClass": 1
    },
    "body": "ins.eClass().name.=('Date')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "size": 2,
      "and": 1,
      "=": 2
    },
    "body": "ins.next->size().=(0).and(ins.previous->size().=(0))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "previous",
      "next"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "ins.unOp.=(twitterRESTAPI::UnOp::lessThan)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["unOp"]
  },
  {
    "operations": {"current": 1},
    "body": "ins.current(twitterRESTAPI::Date)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'untilsince'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"current": 1},
    "body": "ins.current(twitterRESTAPI::Date)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'untilsince'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "ins.unOp.=(twitterRESTAPI::UnOp::upperThan)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["unOp"]
  },
  {
    "operations": {"current": 1},
    "body": "ins.current(twitterRESTAPI::Date)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'since'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"current": 1},
    "body": "ins.current(twitterRESTAPI::Date)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'until'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "=": 1,
      "eClass": 1
    },
    "body": "ins.eClass().name.=('Retweet')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "ins.next",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["next"]
  },
  {
    "operations": {},
    "body": "j",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "i",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 2,
      "and": 1,
      "<": 1,
      ">": 1
    },
    "body": "i.<(j.previous->collect(temp1 : Instruction | temp1.next)->size()).and(j.previous->collect(temp2 : Instruction | temp2.next)->size().>(1))",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 5,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "previous",
      "next"
    ]
  },
  {
    "operations": {
      "size": 2,
      "and": 1,
      "=": 1,
      ">": 1
    },
    "body": "i.=(ins.previous->collect(temp1 : Instruction | temp1.next)->size()).and(ins.previous->collect(temp2 : Instruction | temp2.next)->size().>(1))",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 5,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "previous",
      "next"
    ]
  }
]
