[
  {
    "operations": {"=": 4},
    "body": "if aType.name.=('Integer') then 'int' else if aType.name.=('Boolean') then 'char' else if aType.name.=('Real') then 'float' else if aType.name.=('String') then 'string' else aType.name endif endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 4,
      "StringLiteralExpImpl": 8,
      "IfExpImpl": 4,
      "PropertyCallExpImpl": 5
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 3},
    "body": "if aType.name.=('Integer') then 'INT' else if aType.name.=('Boolean') then 'BOOL' else if aType.name.=('String') then 'STRING' else aType.name endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 3,
      "StringLiteralExpImpl": 6,
      "IfExpImpl": 3,
      "PropertyCallExpImpl": 4
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "=": 4
    },
    "body": "if aType.name.=('Integer') then true else if aType.name.=('Boolean') then true else if aType.name.=('Real') then true else if aType.name.=('String') then true else if aType.oclIsKindOf(uml::PrimitiveType) then true else false endif endif endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 5,
      "StringLiteralExpImpl": 4,
      "TypeExpImpl": 1,
      "IfExpImpl": 5,
      "BooleanLiteralExpImpl": 6,
      "PropertyCallExpImpl": 4
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "or": 1,
      "oclIsKindOf": 2,
      "and": 1,
      "=": 1
    },
    "body": "if aType.oclIsKindOf(uml::Enumeration).or(aType.oclIsKindOf(uml::DataType).and(q_getDataType(aType).attribute->exists(p : Property | p.isStatic.=(true)))) then true else false endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 3
    },
    "properties": [
      "attribute",
      "isStatic"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "and": 1,
      "=": 1
    },
    "body": "if aType.oclIsKindOf(uml::DataType).and(q_getDataType(aType).attribute->exists(p : Property | p.isStatic.=(false))) then true else false endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 3
    },
    "properties": [
      "attribute",
      "isStatic"
    ]
  },
  {
    "operations": {},
    "body": "if q_getAttributes(aType)->exists(attr : Property | attr.isStatic) then true else false endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 2
    },
    "properties": ["isStatic"]
  },
  {
    "operations": {},
    "body": "if hasStereotype(aType,'SysML::PortAndFlows::FlowSpecification') then true else false endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "if aType.oclIsKindOf(uml::Interface) then if q_IsFlowSpecType(q_getFlowSpec(aType)) then true else false endif else false endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 1,
      "IfExpImpl": 2,
      "BooleanLiteralExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {
      "last": 1,
      "size": 1,
      "ancestors": 2,
      "=": 3,
      "eAllContents": 2,
      "first": 2
    },
    "body": "if aType.ancestors()->size().=(0) then aType.eAllContents(uml::DataType)->select(aDataType : DataType | aDataType.name.=(aType.name))->first() else aType.ancestors()->last().eAllContents(uml::DataType)->select(aDataType : DataType | aDataType.name.=(aType.name))->first() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 11,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "size": 1,
      "last": 1,
      "and": 2,
      "ancestors": 2,
      "=": 3,
      "eAllContents": 2,
      "first": 2
    },
    "body": "if aType.ancestors()->size().=(0) then aType.eAllContents(uml::Interface)->select(aFlowSpec : Interface | q_IsFlowSpecType(aFlowSpec).and(aFlowSpec.name.=(aType.name)))->first() else aType.ancestors()->last().eAllContents(uml::Interface)->select(aFlowSpec : Interface | q_IsFlowSpecType(aFlowSpec).and(aFlowSpec.name.=(aType.name)))->first() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 13,
      "VariableExpImpl": 9,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": ["name"]
  },
  {
    "operations": {"asOrderedSet": 1},
    "body": "aClassifier.attribute->asOrderedSet()->sortedBy(temp1 : Property | temp1.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "attribute"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "asOrderedSet": 2,
      "union": 1,
      "concat": 3,
      "oclAsType": 1
    },
    "body": "if aClassifier.oclIsKindOf(uml::Class) then q_getBlockLocalAttributes(aClassifier)->collect(temp1 : Property | temp1.type)->reject(aType : Type | q_isPrimitiveType(aType))->collect(temp2 : Type | temp2.name.concat('.h'))->union(q_getFinalFlowPort(aClassifier.oclAsType(uml::Class))->collect(temp3 : Port | temp3.type)->reject(aType : Type | q_isPrimitiveType(aType))->collect(temp4 : Type | temp4.name.concat('.h')))->asOrderedSet() else q_getBlockLocalAttributes(aClassifier)->collect(temp5 : Property | temp5.type)->reject(aType : Type | q_isPrimitiveType(aType))->collect(temp6 : Type | temp6.name.concat('.h'))->asOrderedSet() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 9,
      "VariableExpImpl": 13,
      "OperationCallExpImpl": 8,
      "QueryInvocationSpec": 6,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "flatten": 1,
      "asOrderedSet": 1
    },
    "body": "q_getBlockList(aElement)->collect(temp1 : Class | q_getDataFileList(temp1))->flatten()->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {
      "flatten": 1,
      "asOrderedSet": 1
    },
    "body": "q_getBlockList(aElement)->collect(temp1 : Class | q_getBlockFSM(temp1))->flatten()->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {"asOrderedSet": 1},
    "body": "q_getBlockList(aElement)->collect(temp1 : Class | temp1.name)->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "flatten": 1,
      "eContents": 1,
      "asOrderedSet": 1
    },
    "body": "aPackage.eContents(uml::Class)->flatten()->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "'#include \"'.concat(aString).concat('\"')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "concat": 8,
      "=": 2
    },
    "body": "if aProperty.type.name.=('Integer') then 'ensures ('.concat(aProperty.name).concat('>-2147483648) && (').concat(aProperty.name).concat('<2147483647)') else if aProperty.type.name.=('Boolean') then 'ensures ('.concat(aProperty.name).concat('==0) || (').concat(aProperty.name).concat('==1)') else '' endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 10,
      "StringLiteralExpImpl": 9,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"or": 1},
    "body": "if q_isPrimitiveType(aType).or(q_IsEnum(aType)) then false else true endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"asOrderedSet": 1},
    "body": "if q_isStructType(aProp.type) then if q_IsFlowSpecType(aProp.type) then q_getAttributes(q_getFlowSpec(aProp.type))->collect(temp1 : Property | q_getFields(temp1)) else q_getAttributes(q_getDataType(aProp.type))->collect(temp2 : Property | q_getFields(temp2)) endif else Set {aProp}->asOrderedSet() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 8,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 4
    },
    "properties": ["type"]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "concat": 2
    },
    "body": "if q_isStructType(aProp.type) then if q_IsFlowSpecType(aProp.type) then q_getAttributes(q_getFlowSpec(aProp.type))->collect(temp1 : Property | q_getNamedFields_recursive(temp1,aPropName.concat('_'),temp1.name)) else q_getAttributes(q_getDataType(aProp.type))->collect(temp2 : Property | q_getNamedFields_recursive(temp2,aPropName.concat('_'),temp2.name)) endif else Set {aProp.name}->asOrderedSet() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 11,
      "QueryInvocationSpec": 8,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 7
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "concat": 3
    },
    "body": "if q_isStructType(aProp.type) then if q_IsFlowSpecType(aProp.type) then q_getAttributes(q_getFlowSpec(aProp.type))->collect(temp1 : Property | q_getNamedFields_recursive(temp1,addPrefix(aPropName,prefix).concat('_'),temp1.name)) else q_getAttributes(q_getDataType(aProp.type))->collect(temp2 : Property | q_getNamedFields_recursive(temp2,addPrefix(aPropName,prefix).concat('_'),temp2.name)) endif else Set {prefix.concat(aProp.name)}->asOrderedSet() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 14,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 10,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 7
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"=": 3},
    "body": "if aType.name.=('Integer') then '0' else if aType.name.=('Boolean') then 'FALSE' else if aType.name.=('String') then '' else aType.name endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 3,
      "StringLiteralExpImpl": 6,
      "IfExpImpl": 3,
      "PropertyCallExpImpl": 4
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "last": 1,
      "size": 1,
      "asOrderedSet": 2,
      "ancestors": 2,
      "eAllContents": 2,
      "=": 1
    },
    "body": "if aElement.ancestors()->size().=(0) then aElement.eAllContents(uml::Classifier)->select(aClassifier : Classifier | q_IsEnum(aClassifier))->asOrderedSet() else aElement.ancestors()->last().eAllContents(uml::Classifier)->select(aClassifier : Classifier | q_IsEnum(aClassifier))->asOrderedSet() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 9,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "IfExpImpl": 1
    },
    "properties": []
  }
]
