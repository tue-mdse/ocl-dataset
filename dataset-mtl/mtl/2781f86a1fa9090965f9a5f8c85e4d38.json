[
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "and": 1,
      "isEmpty": 1,
      "oclAsType": 1
    },
    "body": "aType.oclIsTypeOf(uml::Class).and(aType.oclAsType(uml::Class).superClass->isEmpty())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["superClass"]
  },
  {
    "operations": {"+": 4},
    "body": "pack.name.+('.').+(getUtilsNamespace(pack)).+('.').+(getBaseBean(pack))",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 4,
      "TemplateInvocationSpec": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getAllAttributes": 1,
      "or": 1,
      "-": 1,
      "=": 1,
      ">": 1
    },
    "body": "aType.getAllAttributes()->exists(property : Property | property.upper.=(1.-()).or(property.upper.>(1)))",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["upper"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "aType.oclIsTypeOf(uml::Class)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "aType.oclIsTypeOf(uml::Interface)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "obterTodosOsTipo(aType.oclAsType(uml::Interface))->collect(temp1 : Type | genElementsImportGeneric(temp1,aType))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "obterTodosOsTipo(aClass)->collect(temp1 : Type | genElementsImportGeneric(temp1,aType))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "aType.oclIsTypeOf(uml::DataType)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aType",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aPai",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "getProperty": 1
    },
    "body": "self.getProperty(aType.name).<>('')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"getProperty": 1},
    "body": "self.getProperty(aType.name)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "<>": 2,
      "and": 1
    },
    "body": "genPackageValue(aClass).<>(genPackageValue(aPai)).and(genPackageValue(aClass).<>(''))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 3,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"+": 3},
    "body": "genPackageValue(aClass).+('.').+(aClass.name).+(getEntitySuffix(aClass))",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"+": 3},
    "body": "genPackageEnum(anEnum).+('.').+(anEnum.name).+(getEnumSuffix(anEnum))",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "TemplateInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "hasStereotypeQuery(aClass,'Entity')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "getOperations": 1,
      "getAllAttributes": 1,
      "oclIsTypeOf": 1,
      "asOrderedSet": 1,
      "union": 2,
      "getImplementedInterfaces": 1
    },
    "body": "aClass.getAllAttributes()->collect(s : Property | s.type)->union(aClass.getOperations()->union(aClass.getImplementedInterfaces()->collect(temp1 : Interface | temp1.ownedOperation))->collect(temp2 : Operation | temp2.ownedParameter)->collect(c : Parameter | c.type))->reject(tipo : Type | tipo.oclIsTypeOf(uml::PrimitiveType))->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 5,
      "VariableExpImpl": 8,
      "OperationCallExpImpl": 7,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "type",
      "ownedOperation",
      "ownedParameter"
    ]
  },
  {
    "operations": {
      "getOperations": 1,
      "getAllAttributes": 1,
      "oclIsTypeOf": 1,
      "asOrderedSet": 1,
      "union": 1
    },
    "body": "aInterface.getAllAttributes()->collect(s : Property | s.type)->union(aInterface.getOperations()->collect(temp1 : Operation | temp1.ownedParameter)->collect(c : Parameter | c.type))->reject(tipo : Type | tipo.oclIsTypeOf(uml::PrimitiveType))->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 6,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "type",
      "ownedParameter"
    ]
  }
]
