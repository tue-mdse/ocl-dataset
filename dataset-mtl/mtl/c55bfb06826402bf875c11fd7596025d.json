[
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "classFilename(c)",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c.isAbstract",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isAbstract"]
  },
  {
    "operations": {},
    "body": "c.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"notEmpty": 1},
    "body": "c.generalization->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["generalization"]
  },
  {
    "operations": {},
    "body": "c.generalization->collect(temp1 : Generalization | temp1.general)->collect(temp2 : Classifier | temp2.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "general",
      "name",
      "generalization"
    ]
  },
  {
    "operations": {"notEmpty": 1},
    "body": "c.interfaceRealization->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["interfaceRealization"]
  },
  {
    "operations": {"sep": 1},
    "body": "c.interfaceRealization->collect(temp1 : InterfaceRealization | temp1.contract)->collect(temp2 : Interface | temp2.name)->sep(', ')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "contract",
      "name",
      "interfaceRealization"
    ]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "c.ownedAttribute->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedAttribute"]
  },
  {
    "operations": {},
    "body": "c.ownedAttribute",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedAttribute"]
  },
  {
    "operations": {},
    "body": "prop",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "c.ownedOperation->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedOperation"]
  },
  {
    "operations": {},
    "body": "c.ownedOperation",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedOperation"]
  },
  {
    "operations": {},
    "body": "ops",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "interfaceFilename(i)",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "i",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "i",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "i.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"notEmpty": 1},
    "body": "i.generalization->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["generalization"]
  },
  {
    "operations": {},
    "body": "i.generalization->collect(temp1 : Generalization | temp1.general)->collect(temp2 : Classifier | temp2.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "general",
      "name",
      "generalization"
    ]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "i.ownedAttribute->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedAttribute"]
  },
  {
    "operations": {},
    "body": "i.ownedAttribute",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedAttribute"]
  },
  {
    "operations": {},
    "body": "prop",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "i.ownedOperation->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedOperation"]
  },
  {
    "operations": {},
    "body": "i.ownedOperation",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedOperation"]
  },
  {
    "operations": {},
    "body": "ops",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "allNamespaces": 1,
      "reverse": 1
    },
    "body": "c.allNamespaces()->reverse()",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "n",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"getModel": 1},
    "body": "c.getModel()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "n",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "<>": 2,
      "getModel": 1,
      "and": 1
    },
    "body": "n.name.<>(c.getModel().name).and(n.name.<>(c.package.name))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 4,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "name",
      "package"
    ]
  },
  {
    "operations": {
      "allNamespaces": 1,
      "reverse": 1
    },
    "body": "c.allNamespaces()->reverse()",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "n",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"getModel": 1},
    "body": "c.getModel()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "n",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getModel": 1,
      "<>": 2,
      "and": 1
    },
    "body": "n.name.<>(c.getModel().name).and(n.name.<>(c.package.name))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 4,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "name",
      "package"
    ]
  },
  {
    "operations": {
      "excluding": 1,
      "getReturnResult": 1
    },
    "body": "o.ownedParameter->excluding(o.getReturnResult())",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedParameter"]
  },
  {
    "operations": {},
    "body": "p",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "<>": 2,
      "and": 1,
      "getReturnResult": 2
    },
    "body": "o.getReturnResult().<>(null).and(o.getReturnResult().type.<>(null))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "NullLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"getReturnResult": 1},
    "body": "o.getReturnResult()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "o.isAbstract.=(true)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isAbstract"]
  },
  {
    "operations": {},
    "body": "o",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "o",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "excluding": 1,
      "getReturnResult": 1
    },
    "body": "o.ownedParameter->excluding(o.getReturnResult())",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedParameter"]
  },
  {
    "operations": {},
    "body": "p",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "<>": 2,
      "and": 1,
      "getReturnResult": 2
    },
    "body": "o.getReturnResult().<>(null).and(o.getReturnResult().type.<>(null))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "NullLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"getReturnResult": 1},
    "body": "o.getReturnResult()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "o",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "o",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "excluding": 1,
      "getReturnResult": 1
    },
    "body": "o.ownedParameter->excluding(o.getReturnResult())",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedParameter"]
  },
  {
    "operations": {},
    "body": "p",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "o",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "excluding": 1,
      "getReturnResult": 1
    },
    "body": "o.ownedParameter->excluding(o.getReturnResult())",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedParameter"]
  },
  {
    "operations": {},
    "body": "p",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "o.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "o.isAbstract.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["isAbstract"]
  },
  {
    "operations": {},
    "body": "o.visibility",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {"=": 1},
    "body": "o.isStatic.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["isStatic"]
  },
  {
    "operations": {},
    "body": "o.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "p.oclIsKindOf(uml::TypedElement)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "p.type",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "m.oclIsKindOf(uml::TypedElement)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "m.oclAsType(uml::TypedElement).type",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "t.oclIsTypeOf(uml::PrimitiveType)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "t.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "t",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "false",
    "type": "TemplateInvocationArgument",
    "constructs": {"BooleanLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "t.oclIsTypeOf(uml::PrimitiveType)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "t.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "t",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "true",
    "type": "TemplateInvocationArgument",
    "constructs": {"BooleanLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "and": 1,
      "=": 2
    },
    "body": "t.name.=('String').and(isComment.=(true))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "and": 1,
      "=": 2
    },
    "body": "t.name.=('Boolean').and(isComment.=(true))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "and": 1,
      "=": 2
    },
    "body": "t.name.=('Integer').and(isComment.=(true))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "and": 1,
      "=": 2
    },
    "body": "t.name.=('Double').and(isComment.=(true))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('Double')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "and": 1,
      "=": 2
    },
    "body": "t.name.=('Real').and(isComment.=(true))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('Real')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "and": 1,
      "=": 2
    },
    "body": "t.name.=('Float').and(isComment.=(true))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('Float')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('Integer')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('ByteArray')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('Date')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "t.name.=('Char')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "p.oclIsKindOf(uml::TypedElement)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "p.type",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "prop.type",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "prop.visibility",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {},
    "body": "prop.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "allNamespaces": 1,
      "reverse": 1
    },
    "body": "c.allNamespaces()->reverse()",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "n",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"getModel": 1},
    "body": "c.getModel()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "n",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "n.name.<>(model.name)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "n.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "<>": 2,
      "getModel": 1,
      "and": 1
    },
    "body": "n.name.<>(c.getModel().name).and(n.name.<>(c.package.name))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 4,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "name",
      "package"
    ]
  },
  {
    "operations": {
      "allNamespaces": 1,
      "reverse": 1
    },
    "body": "inter.allNamespaces()->reverse()",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "n",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"getModel": 1},
    "body": "inter.getModel()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "n",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "inter",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "<>": 2,
      "getModel": 1,
      "and": 1
    },
    "body": "n.name.<>(i.getModel().name).and(n.name.<>(i.package.name))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 4,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "name",
      "package"
    ]
  }
]
