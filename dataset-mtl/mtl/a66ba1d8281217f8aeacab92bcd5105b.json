[
  {
    "operations": {},
    "body": "self",
    "type": "QueryExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "endsWith": 21,
      "replace": 1,
      "toString": 22,
      "+": 2
    },
    "body": "if p.type.toString().endsWith('UMLPrimitiveTypes.library.uml#String)') then 'java.lang.String' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EByte)') then 'byte' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EByteObject)') then 'java.lang.Byte' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EByteArray)') then 'byte[]' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EBooleanObject)') then 'java.lang.Booelan' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EBoolean)') then 'boolean' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EIntegerObject)') then 'java.lang.Integer' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EInt)') then 'int' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EDoubleObject)') then 'java.lang.Double' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EDouble)') then 'double' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EBigDecimal)') then 'java.math.BigDecimal' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EBigInteger)') then 'java.math.BigInteger' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EFloat)') then 'float' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EFloatObject)') then 'java.lang.Float' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#ELong)') then 'long' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EEnumerator)') then 'enum' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EDate)') then 'java.lang.Date' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EChar)') then 'char' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#ECharacterObject)') then 'java.lang.Character' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EEList)') then 'java.util.List' else if p.type.toString().endsWith('UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EFeatureMap)') then 'java.util.Map' else p.type.package.qualifiedName.toString().replace('model::', '').+('.').+(p.type.name) endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 23,
      "OperationCallExpImpl": 46,
      "StringLiteralExpImpl": 45,
      "IfExpImpl": 21,
      "PropertyCallExpImpl": 26
    },
    "properties": [
      "qualifiedName",
      "name",
      "type",
      "package"
    ]
  }
]
