[
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "m.name.concat('.txt')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "sms",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "sm.name.equalsIgnoreCase('StateMachine_Sensor')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "sm.region->collect(temp1 : Region | temp1.subvertex)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "region",
      "subvertex"
    ]
  },
  {
    "operations": {
      "not": 3,
      "oclIsKindOf": 3,
      "and": 2,
      "oclAsType": 1
    },
    "body": "s.oclIsKindOf(uml::FinalNode).not().and(s.oclAsType(uml::Pseudostate).oclIsKindOf(uml::InitialNode).not()).and(s.oclIsKindOf(uml::PseudostateKind).not())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 3,
      "TypeExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "s.outgoing->collect(temp1 : Transition | temp1.guard)->collect(temp2 : Constraint | temp2.constrainedElement)->collect(temp3 : Element | temp3.oclAsType(uml::LiteralInteger))->collect(temp4 : LiteralInteger | temp4.value)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "constrainedElement",
      "outgoing",
      "guard",
      "value"
    ]
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "sm.name.equalsIgnoreCase('ActuatorStateMachine')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "sm.region->collect(temp1 : Region | temp1.subvertex)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "subvertex",
      "region"
    ]
  },
  {
    "operations": {
      "not": 3,
      "oclIsKindOf": 3,
      "and": 2,
      "oclAsType": 1
    },
    "body": "s.oclIsKindOf(uml::FinalNode).not().and(s.oclAsType(uml::Pseudostate).oclIsKindOf(uml::InitialNode).not()).and(s.oclIsKindOf(uml::PseudostateKind).not())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 3,
      "TypeExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "s.outgoing->collect(temp1 : Transition | temp1.guard)->collect(temp2 : Constraint | temp2.constrainedElement)->collect(temp3 : Element | temp3.oclAsType(uml::LiteralInteger))->collect(temp4 : LiteralInteger | temp4.value)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "constrainedElement",
      "outgoing",
      "guard",
      "value"
    ]
  },
  {
    "operations": {},
    "body": "sms",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "sm.region->collect(temp1 : Region | temp1.subvertex)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "region",
      "subvertex"
    ]
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "sm.name.equalsIgnoreCase('CarteStateMachine')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 3,
      "oclIsKindOf": 3,
      "and": 2
    },
    "body": "s.oclIsKindOf(uml::FinalNode).not().and(s.oclIsKindOf(uml::InitialNode).not()).and(s.oclIsKindOf(uml::Transition).not())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 3,
      "TypeExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "s.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "s.outgoing->collect(temp1 : Transition | temp1.guard)->collect(temp2 : Constraint | temp2.specification)->collect(temp3 : ValueSpecification | temp3.oclAsType(uml::OpaqueExpression))->collect(temp4 : OpaqueExpression | temp4.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "body",
      "outgoing",
      "guard",
      "specification"
    ]
  },
  {
    "operations": {},
    "body": "s.outgoing->collect(temp1 : Transition | temp1.target)->collect(temp2 : Vertex | temp2.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "outgoing",
      "name",
      "target"
    ]
  },
  {
    "operations": {},
    "body": "s.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  }
]
