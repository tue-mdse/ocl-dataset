[
  {
    "operations": {},
    "body": "isFunctionPointerTypeDefDataType(self)",
    "type": "TemplateGuard",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "self.ownedOperation->any(temp1 : Operation | temp1.name.=(e.name))",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "ownedOperation",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "isSimpleTypeDefDataType(self)",
    "type": "TemplateGuard",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "first": 1,
      "asSequence": 1
    },
    "body": "self.redefinedClassifier->asSequence()->first().name",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "redefinedClassifier",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "self.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 2,
      "oclIsUndefined": 2,
      "and": 1
    },
    "body": "self.nameExpression.oclIsUndefined().not().and(self.nameExpression.symbol.oclIsUndefined().not())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "nameExpression",
      "symbol"
    ]
  },
  {
    "operations": {},
    "body": "self.nameExpression.symbol",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "nameExpression",
      "symbol"
    ]
  },
  {
    "operations": {
      "getType": 1,
      "replaceAll": 1
    },
    "body": "e.getType().name.replaceAll('\\*', '')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "self.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "<>": 1,
      "sep": 1
    },
    "body": "e.ownedParameter->select(temp1 : Parameter | temp1.direction.<>(uml::ParameterDirectionKind::return))->collect(temp2 : Parameter | gen(temp2))->sep(', ')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "EnumLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "direction",
      "ownedParameter"
    ]
  },
  {
    "operations": {"or": 1},
    "body": "isTypeDefStruct(self).or(isTypeDefEnum(self))",
    "type": "TemplateGuard",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  }
]
