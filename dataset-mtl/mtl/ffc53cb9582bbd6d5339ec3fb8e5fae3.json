[
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"+": 1},
    "body": "getVariableName(sketch).+('.ino')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "asOrderedSet": 1,
      "eAllContents": 1
    },
    "body": "sketch.eAllContents(arduino::ModuleAssignment)->collect(temp1 : ModuleAssignment | temp1.module)->select(temp2 : Module | temp2.library.<>(arduino::Library::none))->collect(temp3 : Module | temp3.library)->asOrderedSet()",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 4,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "module",
      "library"
    ]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "toString": 1
    },
    "body": "library.toString().toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "eAllContents": 1
    },
    "body": "sketch.eAllContents(arduino::ModuleInstruction)->collect(temp1 : ModuleInstruction | temp1.module)->asOrderedSet()",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["module"]
  },
  {
    "operations": {"<>": 1},
    "body": "mod.library.<>(arduino::Library::music)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["library"]
  },
  {
    "operations": {},
    "body": "mod",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "sketch",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "mod",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "asOrderedSet": 1,
      "eAllContents": 1
    },
    "body": "sketch.eAllContents(arduino::ModuleAssignment)->collect(temp1 : ModuleAssignment | temp1.module)->select(temp2 : Module | temp2.library.<>(arduino::Library::none))->asOrderedSet()",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "module",
      "library"
    ]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "toString": 1
    },
    "body": "mod.library.toString().toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["library"]
  },
  {
    "operations": {},
    "body": "mod",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "asOrderedSet": 1,
      "eAllContents": 1
    },
    "body": "sketch.eAllContents(arduino::ModuleGet)->collect(temp1 : ModuleGet | temp1.module)->select(m : Module | m.oclIsKindOf(arduino::Sensor))->asOrderedSet()",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["module"]
  },
  {
    "operations": {},
    "body": "mod.image",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["image"]
  },
  {
    "operations": {},
    "body": "mod",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "sketch",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "mod",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getRepeatInstructions(sketch)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"eContainer": 1},
    "body": "self.eContainer(arduino::Sketch)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "instruction",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "sketch.eAllContents(arduino::VariableDeclaration)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "instruction.variable.oclIsTypeOf(arduino::IntegerVariable)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["variable"]
  },
  {
    "operations": {},
    "body": "instruction.variable.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "variable",
      "name"
    ]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "instruction.variable.oclIsTypeOf(arduino::BooleanVariable)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["variable"]
  },
  {
    "operations": {},
    "body": "instruction.variable.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "variable",
      "name"
    ]
  },
  {
    "operations": {
      "size": 1,
      "asOrderedSet": 1,
      "=": 1,
      "eAllContents": 1,
      ">=": 1
    },
    "body": "sketch.eAllContents(arduino::ModuleAssignment)->collect(temp1 : ModuleAssignment | temp1.module)->collect(temp2 : Module | temp2.library)->select(lib : Library | lib.=(arduino::Library::music))->asOrderedSet()->size().>=(1)",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 5,
      "IntegerLiteralExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "module",
      "library"
    ]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "eAllContents": 1
    },
    "body": "sketch.eAllContents(arduino::ModuleAssignment)->collect(temp1 : ModuleAssignment | temp1.module)->asOrderedSet()",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["module"]
  },
  {
    "operations": {"<>": 1},
    "body": "mod.library.<>(arduino::Library::music)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["library"]
  },
  {
    "operations": {},
    "body": "mod",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "asOrderedSet": 1,
      "eAllContents": 1
    },
    "body": "sketch.eAllContents(arduino::ModuleAssignment)->collect(temp1 : ModuleAssignment | temp1.module)->select(temp2 : Module | temp2.library.<>(arduino::Library::none))->asOrderedSet()",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "module",
      "library"
    ]
  },
  {
    "operations": {},
    "body": "mod",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "sketch",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "mod",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"eAllContents": 1},
    "body": "sketch.eAllContents(arduino::VariableDeclaration)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "instruction.variable.oclIsTypeOf(arduino::IntegerVariable)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["variable"]
  },
  {
    "operations": {},
    "body": "instruction.variable.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "variable",
      "name"
    ]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "instruction.variable.oclAsType(arduino::IntegerVariable).initialValue",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "variable",
      "initialValue"
    ]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "instruction.variable.oclIsTypeOf(arduino::BooleanVariable)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["variable"]
  },
  {
    "operations": {},
    "body": "instruction.variable.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "variable",
      "name"
    ]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "instruction.variable.oclAsType(arduino::BooleanVariable).initialValue",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "variable",
      "initialValue"
    ]
  },
  {
    "operations": {"first": 1},
    "body": "sketch.instructions->first()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["instructions"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "i",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "not": 3,
      "oclIsInvalid": 2,
      "oclIsKindOf": 1,
      "and": 2
    },
    "body": "i.oclIsInvalid().not().and(i.next.oclIsInvalid().not()).and(i.next.oclIsKindOf(arduino::Sketch).not())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 3,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["next"]
  },
  {
    "operations": {},
    "body": "i.next",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["next"]
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'Makefile'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "asOrderedSet": 1,
      "eAllContents": 1
    },
    "body": "sketch.eAllContents(arduino::ModuleAssignment)->collect(temp1 : ModuleAssignment | temp1.module)->select(temp2 : Module | temp2.library.<>(arduino::Library::none))->collect(temp3 : Module | temp3.library)->asOrderedSet()",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 4,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "module",
      "library"
    ]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "toString": 1
    },
    "body": "library.toString().toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "instruction.value",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "instruction.module.library.=(arduino::Library::music)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "module",
      "library"
    ]
  },
  {
    "operations": {},
    "body": "instruction.module",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["module"]
  },
  {
    "operations": {},
    "body": "instruction",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "and": 1,
      "=": 1,
      "oclAsType": 1
    },
    "body": "instruction.operand.oclIsTypeOf(arduino::BooleanConstant).and(instruction.operand.oclAsType(arduino::BooleanConstant).value.=(false))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 2,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "operand",
      "value"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "instruction.module",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["module"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "oclIsInvalid": 1,
      "oclIsTypeOf": 1,
      "and": 1
    },
    "body": "instruction.operand.oclIsInvalid().not().and(instruction.operand.oclIsTypeOf(arduino::BooleanConstant))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["operand"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "instruction.operand.oclIsTypeOf(arduino::IntegerConstant)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["operand"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "instruction.operand.oclIsTypeOf(arduino::ModuleGet)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["operand"]
  },
  {
    "operations": {},
    "body": "instruction",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "instruction.operand.oclAsType(arduino::IntegerConstant).value",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "value",
      "operand"
    ]
  },
  {
    "operations": {
      "=": 1,
      "oclAsType": 1
    },
    "body": "instruction.operand.oclAsType(arduino::BooleanConstant).value.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "operand",
      "value"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "instruction.module.kind.=(arduino::ModuleKind::digital)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "kind",
      "module"
    ]
  },
  {
    "operations": {},
    "body": "instruction.module",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["module"]
  },
  {
    "operations": {},
    "body": "instruction.module",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["module"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "index",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "index",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "instruction.iteration",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["iteration"]
  },
  {
    "operations": {},
    "body": "index",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"first": 1},
    "body": "instruction.instructions->first()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["instructions"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "instruction",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "instruction.condition",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["condition"]
  },
  {
    "operations": {"first": 1},
    "body": "instruction.instructions->first()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["instructions"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "instruction",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "instruction.condition",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["condition"]
  },
  {
    "operations": {"first": 1},
    "body": "instruction.instructions->first()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["instructions"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "oclIsInvalid": 1,
      "oclIsKindOf": 1,
      "and": 1
    },
    "body": "instruction.condition.oclIsInvalid().not().and(instruction.condition.oclIsKindOf(arduino::ModuleGet))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["condition"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "instruction.condition.oclAsType(arduino::ModuleGet).module",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "module",
      "condition"
    ]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "instruction.condition.oclAsType(arduino::ModuleGet).module",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "module",
      "condition"
    ]
  },
  {
    "operations": {
      "not": 1,
      "oclIsInvalid": 1,
      "oclIsKindOf": 2,
      "and": 2,
      "oclAsType": 1
    },
    "body": "instruction.condition.oclIsInvalid().not().and(instruction.condition.oclIsKindOf(arduino::BinaryBooleanExpression).and(instruction.condition.oclAsType(arduino::BinaryBooleanExpression).left.oclIsKindOf(arduino::ModuleGet)))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 3,
      "TypeExpImpl": 3,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "left",
      "condition"
    ]
  },
  {
    "operations": {"oclAsType": 2},
    "body": "instruction.condition.oclAsType(arduino::BinaryBooleanExpression).left.oclAsType(arduino::ModuleGet).module",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "left",
      "module",
      "condition"
    ]
  },
  {
    "operations": {"oclAsType": 2},
    "body": "instruction.condition.oclAsType(arduino::BinaryBooleanExpression).left.oclAsType(arduino::ModuleGet).module",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "left",
      "module",
      "condition"
    ]
  },
  {
    "operations": {
      "not": 1,
      "oclIsInvalid": 1,
      "oclIsKindOf": 2,
      "and": 2,
      "oclAsType": 1
    },
    "body": "instruction.condition.oclIsInvalid().not().and(instruction.condition.oclIsKindOf(arduino::BinaryBooleanExpression).and(instruction.condition.oclAsType(arduino::BinaryBooleanExpression).right.oclIsKindOf(arduino::ModuleGet)))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 3,
      "TypeExpImpl": 3,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "condition",
      "right"
    ]
  },
  {
    "operations": {"oclAsType": 2},
    "body": "instruction.condition.oclAsType(arduino::BinaryBooleanExpression).right.oclAsType(arduino::ModuleGet).module",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "module",
      "condition",
      "right"
    ]
  },
  {
    "operations": {"oclAsType": 2},
    "body": "instruction.condition.oclAsType(arduino::BinaryBooleanExpression).right.oclAsType(arduino::ModuleGet).module",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "module",
      "condition",
      "right"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "oclIsInvalid": 1,
      "oclIsKindOf": 1,
      "and": 1
    },
    "body": "instruction.condition.oclIsInvalid().not().and(instruction.condition.oclIsKindOf(arduino::ModuleGet))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["condition"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "instruction.condition.oclAsType(arduino::ModuleGet).module",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "condition",
      "module"
    ]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "instruction.condition.oclAsType(arduino::ModuleGet).module",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "condition",
      "module"
    ]
  },
  {
    "operations": {
      "not": 1,
      "oclIsInvalid": 1,
      "oclIsKindOf": 2,
      "and": 2,
      "oclAsType": 1
    },
    "body": "instruction.condition.oclIsInvalid().not().and(instruction.condition.oclIsKindOf(arduino::BinaryBooleanExpression).and(instruction.condition.oclAsType(arduino::BinaryBooleanExpression).left.oclIsKindOf(arduino::ModuleGet)))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 3,
      "TypeExpImpl": 3,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "condition",
      "left"
    ]
  },
  {
    "operations": {"oclAsType": 2},
    "body": "instruction.condition.oclAsType(arduino::BinaryBooleanExpression).left.oclAsType(arduino::ModuleGet).module",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "condition",
      "left",
      "module"
    ]
  },
  {
    "operations": {"oclAsType": 2},
    "body": "instruction.condition.oclAsType(arduino::BinaryBooleanExpression).left.oclAsType(arduino::ModuleGet).module",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "condition",
      "left",
      "module"
    ]
  },
  {
    "operations": {
      "not": 1,
      "oclIsInvalid": 1,
      "oclIsKindOf": 2,
      "and": 2,
      "oclAsType": 1
    },
    "body": "instruction.condition.oclIsInvalid().not().and(instruction.condition.oclIsKindOf(arduino::BinaryBooleanExpression).and(instruction.condition.oclAsType(arduino::BinaryBooleanExpression).right.oclIsKindOf(arduino::ModuleGet)))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 3,
      "TypeExpImpl": 3,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "condition",
      "right"
    ]
  },
  {
    "operations": {"oclAsType": 2},
    "body": "instruction.condition.oclAsType(arduino::BinaryBooleanExpression).right.oclAsType(arduino::ModuleGet).module",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "condition",
      "module",
      "right"
    ]
  },
  {
    "operations": {"oclAsType": 2},
    "body": "instruction.condition.oclAsType(arduino::BinaryBooleanExpression).right.oclAsType(arduino::ModuleGet).module",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "condition",
      "module",
      "right"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "instruction",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "instruction",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "expression.variable.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "variable",
      "name"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "expression.left",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["left"]
  },
  {
    "operations": {},
    "body": "expression.operator",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["operator"]
  },
  {
    "operations": {},
    "body": "expression.right",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["right"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "expression.left",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["left"]
  },
  {
    "operations": {},
    "body": "expression.operator",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["operator"]
  },
  {
    "operations": {},
    "body": "expression.right",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["right"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "expression.module",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["module"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "instruction.value",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "instruction.value",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "expression",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "instruction",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "=": 1,
      "first": 1
    },
    "body": "sketch.hardware.connectors->select(c : Connector | c.module.=(mod))->first().pin.id",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "pin",
      "id",
      "connectors",
      "hardware",
      "module"
    ]
  },
  {
    "operations": {"replaceAll": 1},
    "body": "element.name.replaceAll(' ', '')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "eAllContents": 1
    },
    "body": "sketch.eAllContents(arduino::Repeat)->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  }
]
