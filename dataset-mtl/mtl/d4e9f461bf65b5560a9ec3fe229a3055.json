[
  {
    "operations": {"toLowerCase": 1},
    "body": "elem.name.toLowerCase()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "notEmpty": 1,
      "getAppliedStereotype": 1
    },
    "body": "Set {elem.getAppliedStereotype(stereotype_name)}->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "notEmpty": 1,
      "getAppliedStereotype": 1
    },
    "body": "Set {elem.getAppliedStereotype(stereotype_name)}->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "notEmpty": 1,
      "getAppliedStereotype": 1
    },
    "body": "Set {abst.getAppliedStereotype(stereotype_name)}->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getValue": 1,
      "getAppliedStereotype": 1
    },
    "body": "elem.getValue(elem.getAppliedStereotype(stereotype_name), property_name)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "getValue": 1,
      "getAppliedStereotype": 1
    },
    "body": "elem.getValue(elem.getAppliedStereotype(stereotype_name), property_name)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "getValue": 1,
      "oclAsType": 1,
      "getAppliedStereotype": 1
    },
    "body": "elem.getValue(elem.getAppliedStereotype(stereotype_name), property_name).oclAsType(uml::EnumerationLiteral).name",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 4,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "oclAsType": 1,
      "=": 1,
      "first": 1
    },
    "body": "conn_set->select(c : Connector | c.end->first().role.oclAsType(uml::Property).class.=(source_class))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "class",
      "role",
      "end"
    ]
  },
  {
    "operations": {
      "=": 1,
      "oclAsType": 3,
      "first": 2,
      "asSequence": 2
    },
    "body": "abst->select(a : Abstraction | a.oclAsType(uml::Abstraction).supplier->asSequence()->first().oclAsType(uml::Property).type.oclAsType(uml::Class).=(elem))->asSequence()->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 8,
      "TypeExpImpl": 3,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "supplier",
      "type"
    ]
  },
  {
    "operations": {
      "=": 1,
      "oclAsType": 3,
      "first": 1,
      "asSequence": 1
    },
    "body": "abst->select(a : Abstraction | a.oclAsType(uml::Abstraction).client->asSequence()->first().oclAsType(uml::Property).type.oclAsType(uml::Class).=(elem))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 3,
      "TypeExpImpl": 3,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "type",
      "client"
    ]
  },
  {
    "operations": {
      "=": 1,
      "first": 1
    },
    "body": "pkgs->select(p : Package | p.name.=(pack_name))->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "=": 1,
      "first": 1
    },
    "body": "pkgs->collect(temp1 : PackageImport | temp1.importedPackage)->select(p : Package | p.name.=(pack_name))->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "importedPackage"
    ]
  },
  {
    "operations": {
      "=": 1,
      "first": 1
    },
    "body": "classes->select(c : Class | c.name.=(class_name))->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "oclAsType": 1,
      "first": 1
    },
    "body": "conn.end->first().partWithPort.type.oclAsType(uml::Class)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "partWithPort",
      "end",
      "type"
    ]
  },
  {
    "operations": {
      "last": 1,
      "oclAsType": 1
    },
    "body": "conn.end->last().partWithPort.type.oclAsType(uml::Class)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "partWithPort",
      "end",
      "type"
    ]
  },
  {
    "operations": {
      "oclAsType": 2,
      "first": 1,
      "asSequence": 1
    },
    "body": "abst.client->collect(temp1 : NamedElement | temp1.oclAsType(uml::Property))->asSequence()->first().type.oclAsType(uml::Class)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "type",
      "client"
    ]
  },
  {
    "operations": {
      "oclAsType": 2,
      "first": 1,
      "asSequence": 1
    },
    "body": "abst.supplier->collect(temp1 : NamedElement | temp1.oclAsType(uml::Property))->asSequence()->first().type.oclAsType(uml::Class)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "supplier",
      "type"
    ]
  }
]
