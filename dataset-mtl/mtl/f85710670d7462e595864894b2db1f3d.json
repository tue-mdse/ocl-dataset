[
  {
    "operations": {"asSequence": 1},
    "body": "seq->select(c : Constraint | hasStereotype(c,'embedded_C::Requirement'))->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getValue": 1,
      "getAppliedStereotype": 1
    },
    "body": "c.getValue(c.getAppliedStereotype('embedded_C::Requirement'), 'Parent')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1,
      "matches": 1,
      "oclAsType": 1,
      "asSequence": 1
    },
    "body": "seq->select(e : Element | e.oclAsType(uml::NamedElement).name.matches(el.name))->asSequence()->isEmpty().not()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "size": 1,
      "isEmpty": 1,
      "oclAsType": 1,
      "=": 1,
      "asSequence": 2
    },
    "body": "seq->select(c : Constraint | matchesInSequence(el,c.constrainedElement->asSequence()->reject(temp1 : Element | Set {temp1.oclAsType(uml::NamedElement).name}->size().=(0))))->asSequence()->isEmpty().not()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "constrainedElement",
      "name"
    ]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1,
      "eAllContents": 1
    },
    "body": "m.eAllContents(uml::Constraint)->select(c : Constraint | Set {c.name}->isEmpty().not())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "seqC->sortedBy(temp1 : Constraint | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "size": 1,
      "oclAsType": 1,
      "=": 1,
      "asSequence": 1
    },
    "body": "matchesInSequence(e,c.constrainedElement->asSequence()->reject(temp1 : Element | Set {temp1.oclAsType(uml::NamedElement).name}->size().=(0)))",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "constrainedElement",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "s",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  }
]
