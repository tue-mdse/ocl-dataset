[
  {
    "operations": {
      "flatten": 2,
      "<>": 2,
      "last": 1,
      "size": 1,
      "eContents": 4,
      "and": 2,
      "asOrderedSet": 2,
      "notEmpty": 2,
      "ancestors": 2,
      "=": 1,
      "eAllContents": 2
    },
    "body": "if aElement.ancestors()->size().=(0) then aElement.eAllContents(uml::Package)->select(p : Package | p.name.<>('Requirements').and(p.eContents(uml::Class)->notEmpty()))->collect(temp1 : Package | temp1.eContents(uml::Class))->flatten()->asOrderedSet() else aElement.ancestors()->last().eAllContents(uml::Package)->select(p : Package | p.name.<>('Requirements').and(p.eContents(uml::Class)->notEmpty()))->collect(temp2 : Package | temp2.eContents(uml::Class))->flatten()->asOrderedSet() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "OperationCallExpImpl": 21,
      "VariableExpImpl": 9,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 6,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "concat": 1
    },
    "body": "q_getUsedBlocks(aClass)->collect(temp1 : Class | temp1.name.concat('.h'))->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"asOrderedSet": 1},
    "body": "q_getFinalFlowPortIN(aClass)->collect(temp1 : Port | q_PrevFinalFlowPorts2(temp1))->collect(temp2 : Port | temp2.class)->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["class"]
  },
  {
    "operations": {"asOrderedSet": 1},
    "body": "q_getPartorRefConnectorEnds(aPart)->collect(temp1 : ConnectorEnd | q_getPartRefBlock(self))->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {
      "flatten": 1,
      "and": 1,
      "asOrderedSet": 1,
      "oclAsType": 2
    },
    "body": "q_getPartorRefConnectorEnds(aPart)->select(aEnd : ConnectorEnd | q_FlowPortDirIN(aEnd.role.oclAsType(uml::Port)).and(q_isFinalFlowPort(aEnd.role.oclAsType(uml::Port))))->collect(temp1 : ConnectorEnd | q_PrevFinalConnectorEnd(temp1))->flatten()->collect(temp2 : ConnectorEnd | temp2.partWithPort)->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 4,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "partWithPort",
      "role"
    ]
  },
  {
    "operations": {
      "filter": 1,
      "asOrderedSet": 1
    },
    "body": "aClass.ownedBehavior->filter(uml::StateMachine)->asOrderedSet()->sortedBy(temp1 : StateMachine | temp1.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "ownedBehavior"
    ]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "=": 1
    },
    "body": "q_getAllParts(aClass)->select(aPart : Property | q_getPartRefBlock(aPart).=(aClass))->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {"asOrderedSet": 1},
    "body": "q_getBlockList(aElement)->collect(temp1 : Class | q_getBlockParts(temp1))->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 2,
      "<>": 1,
      "or": 2,
      "size": 1,
      "oclIsKindOf": 2,
      "asOrderedSet": 1,
      ">": 1
    },
    "body": "if aClass.ownedElement->filter(uml::Property)->size().>(0) then aClass.ownedElement->filter(uml::Property)->reject(aProp : Property | aProp.oclIsKindOf(uml::Port).or(aProp.oclIsKindOf(uml::Operation)).or(aProp.association.<>(null)))->asOrderedSet()->sortedBy(temp1 : Property | temp1.name) else null endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 10,
      "VariableExpImpl": 6,
      "NullLiteralExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 4,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "association",
      "name",
      "ownedElement"
    ]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "tokenize": 1
    },
    "body": "aAttribute.default.tokenize(';')->asOrderedSet()->sortedBy(temp1 : String | self.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "default",
      "name"
    ]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "union": 1,
      "asSequence": 1
    },
    "body": "q_getDefaultValueContent(aAttribute)->collect(temp1 : String | replaceStringList(temp1,q_getBlockLocalAttributes(aClass)->union(q_getFinalFlowPortOUT(aClass))->collect(temp2 : Property | temp2.name)->asSequence(),Prefix))->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 4,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"asOrderedSet": 1},
    "body": "aClass.ownedRule->asOrderedSet()->sortedBy(temp1 : Constraint | temp1.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "ownedRule"
    ]
  },
  {
    "operations": {
      "eContents": 1,
      "asOrderedSet": 1
    },
    "body": "aRule.eContents(uml::OpaqueExpression)->collect(temp1 : OpaqueExpression | temp1.body)->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["body"]
  },
  {
    "operations": {"asOrderedSet": 1},
    "body": "q_getBlockRules(aClass)->collect(temp1 : Constraint | q_getRuleContents(temp1))->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "union": 1,
      "asSequence": 1
    },
    "body": "q_getBlockRulesContents(aClass)->collect(temp1 : String | replaceStringList(temp1,q_getBlockLocalAttributes(aClass)->union(q_getFinalFlowPortOUT(aClass))->collect(temp2 : Property | temp2.name)->asSequence(),Prefix))->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 4,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "eContainer": 1,
      "contains": 1,
      "asOrderedSet": 1
    },
    "body": "q_getBlockRules(aProp.eContainer(uml::Class))->select(aConstraint : Constraint | q_getRuleContents(aConstraint)->exists(aRule : String | aRule.contains(aProp.name)))->asOrderedSet()->sortedBy(temp1 : Constraint | temp1.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {"asOrderedSet": 1},
    "body": "q_getBlockRule(aProp)->collect(temp1 : Constraint | q_getRuleContents(temp1))->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {
      "eContainer": 2,
      "asOrderedSet": 1,
      "union": 1,
      "asSequence": 1
    },
    "body": "q_getBlockRuleContent(aProp)->collect(temp1 : String | replaceStringList(temp1,q_getBlockLocalAttributes(aProp.eContainer(uml::Class))->union(q_getFinalFlowPortOUT(aProp.eContainer(uml::Class)))->collect(temp2 : Property | temp2.name)->asSequence(),Prefix))->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 6,
      "QueryInvocationSpec": 4,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  }
]
