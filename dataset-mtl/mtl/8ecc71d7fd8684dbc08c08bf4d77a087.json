[
  {
    "operations": {
      "getProperty": 1,
      "=": 1
    },
    "body": "self.getProperty('gen.annotations').=('true')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aStateMachine",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStateMachine",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStateMachine",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "getProperty": 1,
      "=": 1
    },
    "body": "self.getProperty('gen.annotations').=('true')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aStateMachine",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStateMachine",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStateMachine",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStateMachine",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStateMachine",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"filter": 1},
    "body": "get(aStateMachine,'ownedAttribute')->filter(uml::Property)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "prop",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"filter": 1},
    "body": "get(aStateMachine,'ownedOperation')->filter(uml::Operation)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "op",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStateMachine",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStateMachine",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStateMachine",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"eContainer": 1},
    "body": "self.eContainer(uml::Class)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "null",
    "type": "TemplateInvocationArgument",
    "constructs": {"NullLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "getInitial(aStateMachine)->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "getInitialTransitionMode(aStateMachine,getInitial(aStateMachine))->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getInitialTransitionMode(aStateMachine,getInitial(aStateMachine))->collect(temp1 : Vertex | genName(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 2,
      "asSequence": 1
    },
    "body": "get(aStateMachine,'region')->filter(uml::Region)->collect(temp1 : Region | get(temp1,'subvertex'))->filter(uml::State)->asSequence()",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "getProperty": 1,
      "=": 1
    },
    "body": "self.getProperty('gen.annotations').=('true')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "notEmpty": 1
    },
    "body": "get(aState,'region')->filter(uml::Region)->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 2,
      "asSequence": 1
    },
    "body": "get(aState,'region')->filter(uml::Region)->collect(temp1 : Region | get(temp1,'subvertex'))->filter(uml::State)->asSequence()",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStatemachine",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStatemachine",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getAllSignals(aStatemachine)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "s",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 2,
      "<>": 1
    },
    "body": "call(aStatemachine,'getAssociations')->filter(uml::Association)->collect(temp1 : Association | get(temp1,'navigableOwnedEnd'))->filter(uml::Property)->select(aProp : Property | aProp.type.<>(aStatemachine))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "p",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 2,
      "or": 2,
      "=": 3
    },
    "body": "get(aStatemachine,'region')->filter(uml::Region)->collect(temp1 : Region | get(temp1,'subvertex'))->filter(uml::Pseudostate)->select(state : Pseudostate | state.kind.=(uml::PseudostateKind::junction).or(state.kind.=(uml::PseudostateKind::fork)).or(state.kind.=(uml::PseudostateKind::join)))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 7,
      "QueryInvocationSpec": 2,
      "EnumLiteralExpImpl": 3,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": ["kind"]
  },
  {
    "operations": {
      "filter": 3,
      "asSequence": 1
    },
    "body": "minimizeByName(aStatemachine,get(aStatemachine,'region')->filter(uml::Region)->collect(temp1 : Region | get(temp1,'subvertex'))->filter(uml::State)->asSequence())->filter(uml::State)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "state",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStatemachine",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aState",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 2,
      "notEmpty": 1
    },
    "body": "Set {aState.owner}->filter(uml::Region)->collect(temp1 : Region | temp1.owner)->filter(uml::StateMachine)->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "TypeExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["owner"]
  },
  {
    "operations": {},
    "body": "aState",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "oclAsType": 1
    },
    "body": "Set {aState.owner}->filter(uml::Region)->collect(temp1 : Region | temp1.owner)->collect(temp2 : Element | temp2.oclAsType(uml::NamedElement))->collect(temp3 : NamedElement | genName(temp3))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["owner"]
  },
  {
    "operations": {},
    "body": "aState",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "oclAsType": 1
    },
    "body": "Set {aState.owner}->filter(uml::Region)->collect(temp1 : Region | temp1.owner)->collect(temp2 : Element | temp2.oclAsType(uml::NamedElement))->collect(temp3 : NamedElement | genName(temp3))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["owner"]
  },
  {
    "operations": {"notEmpty": 1},
    "body": "Set {aState.submachine}->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["submachine"]
  },
  {
    "operations": {},
    "body": "aState.submachine",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["submachine"]
  },
  {
    "operations": {},
    "body": "aState",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 2,
      "=": 1
    },
    "body": "getTransition(aState)->select(aTransition : Transition | aTransition.source.=(aState))->collect(temp1 : Transition | get(temp1,'trigger'))->filter(uml::Trigger)->collect(temp2 : Trigger | temp2.event)->filter(uml::SignalEvent)->collect(temp3 : SignalEvent | temp3.signal)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 4,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 6,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "signal",
      "source",
      "event"
    ]
  },
  {
    "operations": {},
    "body": "currentSignal",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"filter": 1},
    "body": "get(currentSignal,'attribute')->filter(uml::Property)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "p",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "p",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "currentSignal",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "currentSignal",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "currentSignal",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "currentSignal",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "sep": 1
    },
    "body": "get(currentSignal,'attribute')->filter(uml::Property)->collect(temp1 : Property | genAttributeProperty(temp1))->sep(', ')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "getChoice(currentSignal,aState)->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 2,
      "and": 1,
      "=": 2,
      "first": 1,
      "asSequence": 1
    },
    "body": "getTransition(aState)->select(aTransition : Transition | aTransition.source.=(aState).and(get(aTransition,'trigger')->filter(uml::Trigger)->collect(temp1 : Trigger | temp1.event)->filter(uml::SignalEvent)->collect(temp2 : SignalEvent | temp2.signal)->asSequence()->first().=(currentSignal)))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 7,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "signal",
      "source",
      "event"
    ]
  },
  {
    "operations": {"filter": 1},
    "body": "Set {t.effect.specification}->filter(uml::Operation)->collect(temp1 : Operation | genName(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "effect",
      "specification"
    ]
  },
  {
    "operations": {
      "filter": 3,
      "sep": 1
    },
    "body": "get(t,'trigger')->filter(uml::Trigger)->collect(temp1 : Trigger | get(temp1,'event'))->filter(uml::SignalEvent)->collect(temp2 : SignalEvent | temp2.signal)->collect(temp3 : Signal | get(temp3,'attribute'))->filter(uml::Property)->collect(temp4 : Property | genName(temp4))->sep(', ')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 4,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 4,
      "TypeExpImpl": 3,
      "PropertyCallExpImpl": 1
    },
    "properties": ["signal"]
  },
  {
    "operations": {"<>": 1},
    "body": "t.target.<>(t.source)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "target",
      "source"
    ]
  },
  {
    "operations": {},
    "body": "t",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "t",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 2,
      "eContainer": 1,
      "=": 1,
      "first": 1
    },
    "body": "sortByCondition(minimize(self,getTransition(aState)->collect(temp1 : Transition | temp1.eContainer(uml::Region))->collect(temp2 : Region | get(temp2,'transition'))->filter(uml::Transition)->select(t : Transition | t.source.=(getChoice(currentSignal,aState)->first()))))->filter(uml::Transition)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 5,
      "TypeExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["source"]
  },
  {
    "operations": {"<>": 1},
    "body": "t.target.<>(null)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["target"]
  },
  {
    "operations": {
      "not": 1,
      "equalsIgnoreCase": 1,
      "first": 1
    },
    "body": "getBody(t)->first().equalsIgnoreCase('else').not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "t",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "t",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "i.<>(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "t",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "t",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "t",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "Set {aState.submachine}->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["submachine"]
  },
  {
    "operations": {},
    "body": "aState",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aState",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "aStateMachine.oclAsType(uml::NamedElement)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "aStateMachine.oclAsType(uml::NamedElement)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "aStateMachine.oclAsType(uml::NamedElement)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "Set {aState.exit}->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["exit"]
  },
  {
    "operations": {"notEmpty": 1},
    "body": "Set {aState.doActivity}->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["doActivity"]
  },
  {
    "operations": {
      "filter": 1,
      "notEmpty": 1
    },
    "body": "get(aState,'region')->filter(uml::Region)->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 2,
      "asSequence": 1
    },
    "body": "get(aState,'region')->filter(uml::Region)->collect(temp1 : Region | get(temp1,'subvertex'))->filter(uml::State)->asSequence()",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aStateMachine",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"isEmpty": 1},
    "body": "self.submachineState->isEmpty()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["submachineState"]
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "self.submachineState->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["submachineState"]
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aState",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aState",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "self.target.=(null)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["target"]
  },
  {
    "operations": {},
    "body": "self.target",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["target"]
  },
  {
    "operations": {},
    "body": "self.target",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["target"]
  },
  {
    "operations": {
      "filter": 1,
      "first": 1,
      "asSequence": 1
    },
    "body": "Set {self.target}->filter(uml::State)->asSequence()->first().isSubmachineState",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 3,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "target",
      "isSubmachineState"
    ]
  },
  {
    "operations": {"notEmpty": 1},
    "body": "getInitial(self)->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 2,
      "=": 1,
      "first": 1
    },
    "body": "get(self,'region')->filter(uml::Region)->collect(temp1 : Region | get(temp1,'transition'))->filter(uml::Transition)->select(temp2 : Transition | temp2.source.=(getInitial(self)->first()))->collect(temp3 : Transition | temp3.target)->collect(temp4 : Vertex | genName(temp4))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 4,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 3,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "target",
      "source"
    ]
  },
  {
    "operations": {
      "union": 1,
      "asSequence": 1
    },
    "body": "aState.incoming->union(aState.outgoing)->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "outgoing",
      "incoming"
    ]
  },
  {
    "operations": {
      "filter": 2,
      "and": 1,
      "=": 3,
      "first": 1,
      "asSequence": 2
    },
    "body": "getTransition(aState)->select(temp1 : Transition | temp1.source.=(aState).and(temp1.trigger->collect(temp2 : Trigger | temp2.event)->filter(uml::SignalEvent)->collect(temp3 : SignalEvent | temp3.signal)->asSequence()->first().=(currentSignal)))->collect(temp4 : Transition | temp4.target)->filter(uml::Pseudostate)->select(temp5 : Pseudostate | temp5.kind.=(uml::PseudostateKind::choice))->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 5,
      "VariableExpImpl": 9,
      "OperationCallExpImpl": 9,
      "QueryInvocationSpec": 1,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "kind",
      "trigger",
      "signal",
      "target",
      "event",
      "source"
    ]
  },
  {
    "operations": {
      "filter": 2,
      "eContainer": 2,
      "oclIsUndefined": 1,
      "union": 1,
      "asSequence": 1
    },
    "body": "getAllSignals(self.eContainer(uml::Class))->union(get(self.eContainer(uml::Class),'generalization')->filter(uml::Generalization)->collect(temp1 : Generalization | temp1.general)->asSequence()->select(c : Classifier | c.isAbstract)->filter(uml::Class)->collect(temp2 : Class | getAllSignals(temp2)))->reject(temp3 : Signal | temp3.oclIsUndefined())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 7,
      "QueryInvocationSpec": 3,
      "TypeExpImpl": 4,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "isAbstract",
      "general"
    ]
  },
  {
    "operations": {"filter": 2},
    "body": "get(self,'ownedRule')->filter(uml::Constraint)->collect(temp1 : Constraint | temp1.specification)->filter(uml::OpaqueExpression)->collect(temp2 : OpaqueExpression | get(temp2,'body'))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["specification"]
  },
  {
    "operations": {
      "filter": 2,
      "=": 1,
      "asSequence": 1
    },
    "body": "get(self,'region')->filter(uml::Region)->collect(temp1 : Region | get(temp1,'subvertex'))->filter(uml::Pseudostate)->select(temp2 : Pseudostate | temp2.kind.=(uml::PseudostateKind::initial))->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "EnumLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["kind"]
  },
  {
    "operations": {
      "filter": 2,
      "=": 1,
      "first": 1,
      "asSequence": 1
    },
    "body": "get(self,'region')->filter(uml::Region)->collect(temp1 : Region | get(temp1,'transition'))->filter(uml::Transition)->select(temp2 : Transition | temp2.source.=(pseudoStates->first()))->collect(temp3 : Transition | temp3.target)->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "target",
      "source"
    ]
  }
]
