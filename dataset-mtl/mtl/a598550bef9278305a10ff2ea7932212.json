[
  {
    "operations": {"concat": 1},
    "body": "inheritances(class).concat(implementedInterfaces(class))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {
      "concat": 1,
      "notEmpty": 1,
      "first": 1,
      "asSequence": 1
    },
    "body": "if class.superClass->notEmpty() then ' extends '.concat(class.superClass->asSequence()->first().name) else ' ' endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "superClass"
    ]
  },
  {
    "operations": {
      "filter": 1,
      "toString": 1,
      "concat": 1,
      "notEmpty": 1,
      "sep": 1
    },
    "body": "if class.interfaceRealization->notEmpty() then ' implements '.concat(class.interfaceRealization->collect(temp1 : InterfaceRealization | temp1.target)->filter(uml::Interface)->collect(temp2 : Interface | temp2.name)->sep(', ')->toString()) else ' ' endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 5,
      "StringLiteralExpImpl": 3,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "name",
      "target",
      "interfaceRealization"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"sep": 1},
    "body": "aFinderOperation.ownedParameter->collect(temp1 : Parameter | temp1.name)->sep(', ')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "ownedParameter"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "prefix",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "aFinderOperation.owner.oclAsType(uml::Class).name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "owner",
      "name"
    ]
  },
  {
    "operations": {
      "toLowerFirst": 1,
      "oclAsType": 1
    },
    "body": "aFinderOperation.owner.oclAsType(uml::Class).name.toLowerFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "owner",
      "name"
    ]
  },
  {
    "operations": {
      "toLowerFirst": 1,
      "oclAsType": 1,
      "sep": 1
    },
    "body": "aFinderOperation.ownedParameter->collect(temp1 : Parameter | generateQLSampleTemplate(temp1,aFinderOperation.owner.oclAsType(uml::Class).name.toLowerFirst()))->sep(' and ')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "owner",
      "name",
      "ownedParameter"
    ]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1,
      "toLowerFirst": 2,
      "startsWith": 1
    },
    "body": "if aFinderOperation.name.toLowerFirst().startsWith('find') then aFinderOperation.name.toLowerFirst() else 'find'.concat(aFinderOperation.name.toUpperFirst()) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": ["name"]
  }
]
