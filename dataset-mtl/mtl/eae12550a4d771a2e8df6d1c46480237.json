[
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"+": 1},
    "body": "srcDir.+('/generator.log')",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "s",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "oclAsType": 1,
      "asSequence": 1
    },
    "body": "c.ownedAttribute->asSequence()->select(a : Property | a.isComposite)->select(a : Property | a.type.oclIsKindOf(uml::Class))->select(a : Property | a.type.oclAsType(uml::Class).isActive)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 4,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "ownedAttribute",
      "isComposite",
      "isActive",
      "type"
    ]
  },
  {
    "operations": {
      "allInstances": 1,
      "includes": 1
    },
    "body": "uml::Port.allInstances()->collect(temp1 : Port | temp1.type)->includes(self)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"oclAsSet": 1},
    "body": "self.generalization->collect(temp1 : Generalization | temp1.general)->oclAsSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "general",
      "generalization"
    ]
  },
  {
    "operations": {
      "flatten": 1,
      "oclAsSet": 1,
      "allParents": 1,
      "union": 1
    },
    "body": "self.allParents()->collect(temp1 : Classifier | temp1.ownedElement)->union(self.ownedElement)->flatten()->collect(temp2 : Element | temp2.oclAsSet())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 4,
      "PropertyCallExpImpl": 2
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "if hasStereotype(self,'ThalesProfile::Versionable') then getTaggedValue(self,'ThalesProfile::Versionable','version') else 'unknown' endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "lowerBound": 1,
      "=": 1
    },
    "body": "pr.lowerBound().=(0)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "upperBound": 1
    },
    "body": "pr.upperBound().<>(1)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "pr.qualifier->isEmpty().not()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualifier"]
  },
  {
    "operations": {
      "<>": 1,
      "upperBound": 1
    },
    "body": "pr.upperBound().<>(1)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 2,
      "isEmpty": 1,
      "subSequence": 1,
      "+": 1,
      "=": 1,
      "first": 2
    },
    "body": "if seq->isEmpty() then '' else if 1.=(seq->size()) then seq->first() else seq->first().+(concat(seq->subSequence(2, seq->size()))) endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 8,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"includes": 1},
    "body": "let basicTypeNames : Set(String) = Set {'Boolean', 'Real', 'Integer', 'PositiveInteger', 'String', 'BitString'} in basicTypeNames->includes(t.name)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "LetExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "filter": 2,
      "not": 1,
      "oclIsUndefined": 1,
      "isEmpty": 1,
      "oclAsType": 4
    },
    "body": "if arg.oclAsType(uml::Classifier).generalization->collect(temp1 : Generalization | temp1.general)->isEmpty() then arg.oclAsType(uml::PrimitiveType) else let t : PrimitiveType = arg.oclAsType(uml::Classifier).generalization->collect(temp2 : Generalization | temp2.general)->filter(uml::PrimitiveType)->any(t : PrimitiveType | isBasicType(t)) in if t.oclIsUndefined().not() then t else arg.oclAsType(uml::Classifier).generalization->collect(temp3 : Generalization | temp3.general)->filter(uml::PrimitiveType)->collect(temp4 : PrimitiveType | basePType(temp4))->any(temp5 : PrimitiveType | true) endif endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 6,
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 11,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 6,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 6,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "general",
      "generalization"
    ]
  },
  {
    "operations": {
      "union": 1,
      "asSet": 1
    },
    "body": "c.ownedAttribute->collect(temp1 : Property | temp1.type)->union(c.ownedOperation->collect(temp2 : Operation | temp2.ownedParameter)->collect(temp3 : Parameter | temp3.type))->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "ownedAttribute",
      "ownedOperation",
      "type",
      "ownedParameter"
    ]
  },
  {
    "operations": {
      "filter": 2,
      "asSet": 1
    },
    "body": "t.clientDependency->filter(uml::Usage)->collect(temp1 : Usage | temp1.supplier)->filter(uml::Type)->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "supplier",
      "clientDependency"
    ]
  },
  {
    "operations": {"filter": 1},
    "body": "c.ownedMember->filter(uml::Operation)->select(op : Operation | hasStereotype(op,'Standard::Create'))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedMember"]
  },
  {
    "operations": {
      "includes": 1,
      "oclAsType": 1
    },
    "body": "op.method->collect(temp1 : Behavior | temp1.oclAsType(uml::OpaqueBehavior))->collect(temp2 : OpaqueBehavior | temp2.language)->includes(tgt)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "language",
      "method"
    ]
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "+": 2
    },
    "body": "if ne.namespace.oclIsTypeOf(uml::Model) then if isQualifying(ne) then nonKeyWordName(ne) else '' endif else if isQualifying(ne) then qualifiedName(ne.namespace,separator).+(separator).+(nonKeyWordName(ne)) else qualifiedName(ne.namespace,separator) endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 10,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 6,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 3,
      "PropertyCallExpImpl": 3
    },
    "properties": ["namespace"]
  },
  {
    "operations": {},
    "body": "ne.name",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "or": 1,
      "oclIsKindOf": 1,
      "=": 1,
      "toLowerFirst": 1
    },
    "body": "me.oclIsKindOf(uml::Package).not().or(me.name.toLowerFirst().=(me.name))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "filter": 1,
      "sep": 1
    },
    "body": "concat(qualifiedNames(ne)->collect(temp1 : NamedElement | temp1.name)->sep(separator)->filter(oclstdlib::String))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "filter": 2,
      "oclIsUndefined": 1,
      "ancestors": 1,
      "isQualifying": 1,
      "sep": 1
    },
    "body": "if ne.oclIsUndefined() then Sequence {} else concat(ne.ancestors()->filter(uml::NamedElement)->select(temp1 : NamedElement | temp1.isQualifying())->collect(temp2 : NamedElement | temp2.name)->sep(separator)->filter(oclstdlib::String)) endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "filter": 1,
      "including": 1,
      "oclIsUndefined": 1,
      "reverse": 1,
      "ancestors": 1,
      "asSequence": 1
    },
    "body": "if ne.oclIsUndefined() then Sequence {} else ne.ancestors()->asSequence()->reverse()->including(ne)->filter(uml::NamedElement)->select(temp1 : NamedElement | isQualifying(temp1)) endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "or": 1,
      "oclIsTypeOf": 1,
      "oclIsKindOf": 1,
      "union": 1,
      "oclAsType": 1
    },
    "body": "if pe.namespace.oclIsTypeOf(uml::Model).or(pe.namespace.oclIsKindOf(uml::PackageableElement).not()) then Sequence {pe.name} else qualifiedNames(pe.namespace.oclAsType(uml::PackageableElement))->union(Sequence {pe.name}) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 3,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "namespace",
      "name"
    ]
  },
  {
    "operations": {
      "not": 1,
      "or": 1,
      "oclIsTypeOf": 1,
      "oclIsKindOf": 1,
      "union": 1,
      "oclAsType": 1
    },
    "body": "if pe.namespace.oclIsTypeOf(uml::Model).or(pe.namespace.oclIsKindOf(uml::PackageableElement).not()) then Sequence {pe.name} else qualifiedNames(pe.namespace.oclAsType(uml::PackageableElement))->union(Sequence {pe.name}) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 6,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 3,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "namespace",
      "name"
    ]
  },
  {
    "operations": {
      "getAppliedStereotypes": 1,
      "=": 1
    },
    "body": "e.getAppliedStereotypes()->exists(s : Stereotype | stereotypeName.=(s.qualifiedName))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualifiedName"]
  },
  {
    "operations": {
      "getValue": 1,
      "not": 1,
      "oclIsUndefined": 1,
      "getAppliedStereotype": 1
    },
    "body": "let stereotype : Stereotype = stereotypedElement.getAppliedStereotype(stereotypeName) in if stereotype.oclIsUndefined().not() then stereotypedElement.getValue(stereotype, propertyName) else null endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 4,
      "LetExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  }
]
