[
  {
    "operations": {
      "filter": 2,
      "not": 1
    },
    "body": "get(self.package,'clientDependency')->filter(uml::Dependency)->collect(temp1 : Dependency | temp1.supplier)->filter(uml::Package)->select(pak : Package | isOnlyEthernetPackage(pak).not())",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "supplier",
      "package"
    ]
  },
  {
    "operations": {
      "filter": 1,
      "oclIsTypeOf": 1,
      "union": 1,
      "ancestors": 1,
      "reverse": 1,
      "sep": 1
    },
    "body": "Sequence {p}->union(p.ancestors()->filter(uml::Package)->select(pack : Package | pack.oclIsTypeOf(uml::Package)))->collect(temp1 : Package | normalizeName(temp1))->reverse()->sep('.')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 4,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 2,
      "including": 1
    },
    "body": "get(self.package,'clientDependency')->filter(uml::Dependency)->collect(temp1 : Dependency | temp1.supplier)->filter(uml::Package)->including(self.package)->select(pak : Package | isEthernetPackage(pak))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "supplier",
      "package"
    ]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "first": 1
    },
    "body": "getEthernetClasses(p)->collect(temp1 : Class | getRootComponents(temp1))->asOrderedSet()->first()",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "prop",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "getProperty": 1,
      "=": 1
    },
    "body": "self.getProperty('gen.annotations').=('true')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  }
]
