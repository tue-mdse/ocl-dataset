[
  {
    "operations": {
      "union": 1,
      "asSequence": 1
    },
    "body": "getMixinGenFeatures(e)->union(self.genFeatures->asSequence())",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["genFeatures"]
  },
  {
    "operations": {
      "union": 1,
      "asSequence": 1
    },
    "body": "getMixinGenOperations(e)->union(self.genOperations->asSequence())",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["genOperations"]
  },
  {
    "operations": {
      "not": 2,
      "or": 1,
      "including": 1,
      "isEmpty": 2,
      "asSequence": 1
    },
    "body": "getMixinGenClasses(e)->including(e)->collect(temp1 : GenClass | temp1.ecoreClass)->select(eClass : EClass | eClass.eStructuralFeatures->isEmpty().not().or(eClass.eOperations->isEmpty().not()))->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 7,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "eOperations",
      "ecoreClass",
      "eStructuralFeatures"
    ]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1
    },
    "body": "allGenFeatures(self)->select(gf : GenFeature | gf.ecoreFeature.eType.oclIsUndefined().not())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "eType",
      "ecoreFeature"
    ]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1
    },
    "body": "allGenOperations(self)->select(gf : GenOperation | gf.ecoreOperation.eType.oclIsUndefined().not())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "eType",
      "ecoreOperation"
    ]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1
    },
    "body": "allGenOperations(self)->collect(temp1 : GenOperation | temp1.genParameters)->select(gp : GenParameter | gp.ecoreParameter.eType.oclIsUndefined().not())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "eType",
      "genParameters",
      "ecoreParameter"
    ]
  },
  {
    "operations": {
      "filter": 1,
      "includes": 1
    },
    "body": "e.ePackage.eClassifiers->filter(ecore::EClass)->select(subclass : EClass | subclass.eAllSuperTypes->includes(e))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "ePackage",
      "eClassifiers",
      "eAllSuperTypes"
    ]
  },
  {
    "operations": {"including": 1},
    "body": "eAllSubClasses(self)->including(e)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('org.eclipse.emf.ecore.util.EcoreUtil', 'getDocumentation(org.eclipse.emf.ecore.EModelElement)', Sequence {e})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "sep": 1
    },
    "body": "if getDocumentation_(self).oclIsUndefined() then getDocumentation_(self) else split(getDocumentation_(self),80)->sep('\n * ') endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 4,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('org.eclipselabs.emfpath.gen.StringUtils', 'split(java.lang.String, int)', Sequence {toSplit, limit})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  }
]
