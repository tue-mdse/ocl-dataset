[
  {
    "operations": {},
    "body": "anAdaptorInterface.javaClassBaseNamespace",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["javaClassBaseNamespace"]
  },
  {
    "operations": {},
    "body": "anAdaptorInterface.javaFilesBasePath",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["javaFilesBasePath"]
  },
  {
    "operations": {},
    "body": "anAdaptorInterface.jspFilesBasePath",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["jspFilesBasePath"]
  },
  {
    "operations": {},
    "body": "anAdaptorInterface.javascriptFilesBasePath",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["javascriptFilesBasePath"]
  },
  {
    "operations": {
      "substituteAll": 1,
      "concat": 1
    },
    "body": "'/'.concat(javaClassBaseNamespace(anAdaptorInterface)).substituteAll('.', '/')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {
      "concat": 4,
      "oclAsType": 1,
      "sep": 1
    },
    "body": "concatenate(parameters->collect(aParameter : String | if forJAXRSMethod then '@PathParam(\"'.concat(aParameter).concat('\") final String ').concat(aParameter) else 'final String '.concat(aParameter) endif)->sep(', ')->collect(temp1 : OclAny | temp1.oclAsType(oclstdlib::String)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 6,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclAsType": 1,
      "sep": 1
    },
    "body": "concatenate(parameters->sep(', ')->collect(temp1 : OclAny | temp1.oclAsType(oclstdlib::String)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "concat": 2,
      ">=": 1
    },
    "body": "if pathAnnotation.size().>=(1) then '@Path(\"'.concat(pathAnnotation).concat('\")') else '' endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "index": 2,
      "+": 1,
      "-": 1,
      "substring": 1,
      "tokenize": 1
    },
    "body": "uriSegment.tokenize('}')->select(token : String | token.index('{').<>(1.-()))->collect(token : String | token.substring(token.index('{').+(1)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 7,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {
      "size": 3,
      "endsWith": 2,
      "-": 1,
      "=": 2,
      "substring": 1
    },
    "body": "if URISegment.size().=(0) then URISegment else if URISegment.size().=(1) then if URISegment.endsWith('/') then '' else URISegment endif else URISegment.substring(1, URISegment.size().-(if URISegment.endsWith('/') then 1 else 0 endif)) endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 8,
      "OperationCallExpImpl": 9,
      "IntegerLiteralExpImpl": 5,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {
      "size": 3,
      "=": 2,
      "substring": 1,
      "startsWith": 2
    },
    "body": "if URISegment.size().=(0) then URISegment else if URISegment.size().=(1) then if URISegment.startsWith('/') then '' else URISegment endif else URISegment.substring(if URISegment.startsWith('/') then 2 else 1 endif, URISegment.size()) endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 8,
      "OperationCallExpImpl": 8,
      "IntegerLiteralExpImpl": 4,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "concatenatePaths(leftURISegment,rightURISegment)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 2,
      "concat": 2,
      "=": 2
    },
    "body": "if stripURISegmentEnd(leftSegment).size().=(0) then stripURISegmentStart(rightSegment) else if stripURISegmentStart(rightSegment).size().=(0) then stripURISegmentEnd(leftSegment) else stripURISegmentEnd(leftSegment).concat('/').concat(stripURISegmentStart(rightSegment)) endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 6,
      "QueryInvocationSpec": 6,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "size": 2,
      "and": 2,
      "concat": 2,
      ">": 2
    },
    "body": "if prependIfNotEmpty.and(commaSeparatedString.size().>(0)) then ', ' else '' endif.concat(commaSeparatedString).concat(if appendIfNotEmpty.and(commaSeparatedString.size().>(0)) then ' ,' else '' endif)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 5,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperCase": 1,
      "replaceAll": 1,
      "oclAsType": 1,
      "tokenize": 1,
      "sep": 1
    },
    "body": "concatenate(aString.replaceAll('\\W+', '_').tokenize('_')->sep('_')->collect(temp1 : OclAny | temp1.oclAsType(oclstdlib::String))).toUpperCase()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 4,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "replaceAll": 1,
      "tokenize": 1
    },
    "body": "concatenate(aString.replaceAll('\\W+', ' ').tokenize(' ')->collect(s : String | s.toUpperFirst()))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "toLowerFirst": 1
    },
    "body": "if toUpperFirst then javaString(aString).toUpperFirst() else javaString(aString).toLowerFirst() endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "at": 5,
      "size": 4,
      "concat": 3,
      "subSequence": 1,
      "=": 3
    },
    "body": "if aStringSequence->size().=(0) then '' else if aStringSequence->size().=(1) then aStringSequence->at(1) else if aStringSequence->size().=(2) then aStringSequence->at(1).concat(aStringSequence->at(2)) else aStringSequence->at(1).concat(aStringSequence->at(2)).concat(concatenate(aStringSequence->subSequence(3, aStringSequence->size()))) endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 16,
      "VariableExpImpl": 10,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 9,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {
      "oclAsType": 1,
      "sep": 1
    },
    "body": "concatenate(aStringSequence->sep(separatorString)->collect(temp1 : OclAny | temp1.oclAsType(oclstdlib::String)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  }
]
