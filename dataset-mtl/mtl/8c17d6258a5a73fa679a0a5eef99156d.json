[
  {
    "operations": {},
    "body": "aBundle",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "checkstyleXmlTestFile(aBundle)",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"eContainer": 1},
    "body": "aBundle.eContainer(eclipse::Application).applicationID",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["applicationID"]
  },
  {
    "operations": {"eContainer": 1},
    "body": "aBundle.eContainer(eclipse::Application)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "eContainer": 1,
      "toUpperFirst": 1,
      "replaceAll": 1
    },
    "body": "aBundle.eContainer(eclipse::Application).applicationID.replaceAll(' ', '').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["applicationID"]
  },
  {
    "operations": {"eContainer": 1},
    "body": "aBundle.eContainer(eclipse::Application).applicationID",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["applicationID"]
  },
  {
    "operations": {
      "toString": 1,
      "matches": 1
    },
    "body": "aBundle.basedOn.toString().matches('Ecore')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["basedOn"]
  }
]
