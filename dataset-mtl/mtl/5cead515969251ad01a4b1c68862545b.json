[
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "a.name.concat('.gtranslate')",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "a.ownedNode->collect(temp1 : ActivityNode | genFirstCall(temp1,mainState))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedNode"]
  },
  {
    "operations": {
      "not": 1,
      "oclIsTypeOf": 1
    },
    "body": "a.ownedNode->select(temp1 : ActivityNode | temp1.oclIsTypeOf(uml::JoinNode).not())",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedNode"]
  },
  {
    "operations": {},
    "body": "a",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "oclAsType": 1
    },
    "body": "a.ownedNode->select(temp1 : ActivityNode | temp1.oclIsTypeOf(uml::JoinNode))->collect(temp2 : ActivityNode | temp2.oclAsType(uml::JoinNode))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedNode"]
  },
  {
    "operations": {},
    "body": "j",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "i",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "or": 2,
      "oclIsKindOf": 3
    },
    "body": "self.oclIsKindOf(uml::Action).or(self.oclIsKindOf(uml::ForkNode)).or(self.oclIsKindOf(uml::MergeNode))",
    "type": "TemplateGuard",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "TypeExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "a.oclIsKindOf(uml::Action)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "a.outgoing->collect(temp1 : ActivityEdge | temp1.target)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "outgoing",
      "target"
    ]
  },
  {
    "operations": {
      "stringValue": 1,
      "=": 1
    },
    "body": "d.outgoing->select(temp1 : ActivityEdge | temp1.guard.stringValue().=('true'))->collect(temp2 : ActivityEdge | temp2.target)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "outgoing",
      "guard",
      "target"
    ]
  },
  {
    "operations": {
      "stringValue": 1,
      "=": 1
    },
    "body": "d.outgoing->select(temp1 : ActivityEdge | temp1.guard.stringValue().=('false'))->collect(temp2 : ActivityEdge | temp2.target)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "outgoing",
      "guard",
      "target"
    ]
  },
  {
    "operations": {},
    "body": "j.outgoing->collect(temp1 : ActivityEdge | temp1.target)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "outgoing",
      "target"
    ]
  }
]
