[
  {
    "operations": {},
    "body": "syntax.grammars",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["grammars"]
  },
  {
    "operations": {},
    "body": "grammar",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammar",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammar",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"+": 1},
    "body": "syntaxName.+('KWLexer.gi')",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "syntaxName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammar.syntax",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["syntax"]
  },
  {
    "operations": {},
    "body": "syntaxName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self.syntax.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "syntax"
    ]
  },
  {
    "operations": {},
    "body": "getKWValues(self.syntax)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["syntax"]
  },
  {
    "operations": {},
    "body": "keywordValue",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'|\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getKWValues(self.syntax)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["syntax"]
  },
  {
    "operations": {"replaceAll": 1},
    "body": "keywordValue.replaceAll('\\w', '$0 ')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "keywordValue",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"+": 1},
    "body": "syntaxName.+('Lexer.gi')",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "syntaxName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammar.syntax",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["syntax"]
  },
  {
    "operations": {},
    "body": "syntaxName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "syntaxName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "syntaxName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"asSet": 1},
    "body": "getTerminalRules(self.syntax)->collect(temp1 : TerminalRule | temp1.name)->asSet()->sortedBy(n : String | n)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "syntax",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "text",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getPunctValues(self.syntax)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["syntax"]
  },
  {
    "operations": {},
    "body": "keywordValue",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "' '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "alphas",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "puncts",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getPunctValues(self.syntax)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["syntax"]
  },
  {
    "operations": {},
    "body": "' '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "charSeq(keywordValue)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "keywordValue",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"asSet": 1},
    "body": "getTerminalRules(self.syntax)->collect(temp1 : TerminalRule | temp1.name)->asSet()->sortedBy(n : String | n)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "syntax",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "text",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "text",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "grammar",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"+": 1},
    "body": "syntaxName.+('.g')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "syntaxName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "parser.syntax",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["syntax"]
  },
  {
    "operations": {},
    "body": "syntaxName",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "parser.goals",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["goals"]
  },
  {
    "operations": {},
    "body": "rule.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"asSet": 1},
    "body": "getTerminalRules(parser.syntax)->collect(temp1 : TerminalRule | temp1.name)->asSet()->sortedBy(n : String | n)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "syntax",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "text",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getPunctValues(parser.syntax)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["syntax"]
  },
  {
    "operations": {},
    "body": "keywordValue",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "keywordValue",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "asSet": 1
    },
    "body": "parser.rules->reject(temp1 : TypedRule | temp1.oclIsKindOf(XBNF::TerminalRule))->collect(temp2 : TypedRule | temp2.name)->asSet()->sortedBy(n : String | n)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rules"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "parser.rules->select(r : TypedRule | r.name.=(name))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "rules"
    ]
  },
  {
    "operations": {},
    "body": "rule",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "rule",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "rule.subrules->sortedBy(temp1 : UntypedRule | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "subrules"
    ]
  },
  {
    "operations": {},
    "body": "subrule",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "oclAsType": 1
    },
    "body": "rule.element.oclAsType(XBNF::Disjunction).conjunctions->sortedBy(temp1 : Conjunction | temp1.elements->size())",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "conjunctions",
      "elements",
      "element"
    ]
  },
  {
    "operations": {},
    "body": "rule.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"isEmpty": 1},
    "body": "conjunction.elements->isEmpty()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["elements"]
  },
  {
    "operations": {},
    "body": "conjunction.elements",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["elements"]
  },
  {
    "operations": {},
    "body": "element",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "rule.element.oclAsType(XBNF::Disjunction).conjunctions",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "conjunctions",
      "element"
    ]
  },
  {
    "operations": {},
    "body": "rule.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "conjunction.elements",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["elements"]
  },
  {
    "operations": {},
    "body": "element",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"eClass": 1},
    "body": "element.eClass().name",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "element.referredRule.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "referredRule"
    ]
  },
  {
    "operations": {},
    "body": "element.referredRule.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "referredRule"
    ]
  },
  {
    "operations": {},
    "body": "element.value",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {},
    "body": "element.value",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "asSet": 1,
      "eAllContents": 1
    },
    "body": "self.eAllContents(XBNF::Keyword)->collect(temp1 : Keyword | temp1.value)->asSet()->sortedBy(n : String | n)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "asSet": 1,
      "eAllContents": 1
    },
    "body": "syntax.eAllContents(XBNF::TerminalRule)->asSet()->sortedBy(temp1 : TerminalRule | temp1.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"matches": 1},
    "body": "getKeywordValues(syntax)->select(temp1 : String | temp1.matches('[a-zA-Z]+'))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"matches": 1},
    "body": "getKeywordValues(syntax)->reject(temp1 : String | temp1.matches('[a-zA-Z]+'))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "substituteAll": 24,
      "toString": 1,
      "+": 2,
      "matches": 2
    },
    "body": "if keywordValue.matches('[0-9a-zA-Z]*') then keywordValue else let label : String = keywordValue.substituteAll('&', 'AND').substituteAll('@', 'AT').substituteAll('|', 'BAR').substituteAll('^', 'CARET').substituteAll(':', 'COLON').substituteAll(',', 'COMMA').substituteAll('.', 'DOT').substituteAll('=', 'EQUALS').substituteAll('#', 'HASH').substituteAll('<', 'LANGLE').substituteAll('{', 'LBRACE').substituteAll('(', 'LPAREN').substituteAll('[', 'LSQUARE').substituteAll('-', 'MINUS').substituteAll('!', 'PLING').substituteAll('+', 'PLUS').substituteAll('?', 'QUERY').substituteAll('>', 'RANGLE').substituteAll('}', 'RBRACE').substituteAll(')', 'RPAREN').substituteAll(']', 'RSQUARE').substituteAll(';', 'SEMICOLON').substituteAll('/', 'SLASH').substituteAll('*', 'STAR') in if label.matches('[a-zA-Z]*') then label else codePoints(keywordValue)->iterate(c : Integer; acc : String = '' | acc.+('_').+(c.toString())) endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 29,
      "VariableExpImpl": 8,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 52,
      "IterateExpImpl": 1,
      "IfExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "lastIndex": 1,
      "+": 1,
      "substring": 1,
      ">": 1
    },
    "body": "let name : String = syntax.name in let lastDot : Integer = name.lastIndex('.') in let firstCharacter : Integer = if lastDot.>(0) then lastDot.+(1) else 1 endif in name.substring(firstCharacter, name.size())",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 5,
      "LetExpImpl": 3,
      "IntegerLiteralExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "size": 1,
      "lastIndex": 1,
      "-": 1,
      "substring": 1,
      ">": 1
    },
    "body": "let name : String = syntax.name in let lastDot : Integer = name.lastIndex('.') in let lastCharacter : Integer = if lastDot.>(0) then lastDot.-(1) else name.size() endif in name.substring(1, lastCharacter)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 5,
      "LetExpImpl": 3,
      "IntegerLiteralExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('org.eclipse.ocl.examples.build.acceleo.NameQueries', 'convertStrings(java.lang.String)', Sequence {s})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('org.eclipse.ocl.examples.build.acceleo.NameQueries', 'codePoints(java.lang.String)', Sequence {s})",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  }
]
