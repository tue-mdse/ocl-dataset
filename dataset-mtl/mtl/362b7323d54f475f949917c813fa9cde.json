[
  {
    "operations": {
      "replace": 1,
      "substring": 1
    },
    "body": "eClass.name.replace('a', 'b').substring(1, 2)",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "replaceAll": 1,
      "substring": 1
    },
    "body": "eClass.name.replaceAll('a', 'b').substring(1, 2)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "substituteAll": 1,
      "substring": 1
    },
    "body": "eClass.name.substituteAll('a', 'b').substring(1, 2)",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "trim": 1,
      "substring": 1
    },
    "body": "eClass.name.trim().substring(1, 2)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "trim": 1,
      "tokenize": 1
    },
    "body": "eClass.name.tokenize('a')->collect(temp1 : String | temp1.trim())",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "trim": 1,
      "substring": 1
    },
    "body": "eClass.name.substring(1).trim()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "trim": 1,
      "tokenize": 1
    },
    "body": "eClass.name.tokenize()->collect(temp1 : String | temp1.trim())",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "tokenizeLine": 1,
      "trim": 1
    },
    "body": "eClass.name.tokenizeLine()->collect(temp1 : String | temp1.trim())",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "trim": 1,
      "prefix": 1
    },
    "body": "eClass.name.prefix('a').trim()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"filter": 1},
    "body": "eClass.eAllAttributes->filter(ecore::EAttribute)->collect(temp1 : EAttribute | temp1.eAttributeType)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "eAllAttributes",
      "eAttributeType"
    ]
  },
  {
    "operations": {"addAll": 1},
    "body": "eClass.eAllAttributes->addAll(eClass.eAllAttributes)",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["eAllAttributes"]
  },
  {
    "operations": {"removeAll": 1},
    "body": "eClass.eAllAttributes->removeAll(eClass.eAllAttributes)",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["eAllAttributes"]
  },
  {
    "operations": {"addAll": 1},
    "body": "eClass.eAllAttributes->addAll(eClass.eAllAttributes)->collect(temp1 : EAttribute | temp1.eAttributeType)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "eAllAttributes",
      "eAttributeType"
    ]
  },
  {
    "operations": {"removeAll": 1},
    "body": "eClass.eAllAttributes->removeAll(eClass.eAllAttributes)->collect(temp1 : EAttribute | temp1.eAttributeType)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "eAllAttributes",
      "eAttributeType"
    ]
  },
  {
    "operations": {"asSequence": 1},
    "body": "eClass.eAllAttributes->asSequence()->collect(temp1 : EAttribute | temp1.eAttributeType)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "eAllAttributes",
      "eAttributeType"
    ]
  },
  {
    "operations": {
      "reverse": 1,
      "asSequence": 1
    },
    "body": "eClass.eAllAttributes->asSequence()->reverse()->collect(temp1 : EAttribute | temp1.eAttributeType)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "eAllAttributes",
      "eAttributeType"
    ]
  },
  {
    "operations": {
      "drop": 1,
      "asSequence": 1
    },
    "body": "eClass.eAllAttributes->asSequence()->drop(2)->collect(temp1 : EAttribute | temp1.eAttributeType)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "eAllAttributes",
      "eAttributeType"
    ]
  },
  {
    "operations": {
      "dropRight": 1,
      "asSequence": 1
    },
    "body": "eClass.eAllAttributes->asSequence()->dropRight(2)->collect(temp1 : EAttribute | temp1.eAttributeType)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "eAllAttributes",
      "eAttributeType"
    ]
  },
  {
    "operations": {"asOrderedSet": 1},
    "body": "eClass.eAllAttributes->asOrderedSet()->collect(temp1 : EAttribute | temp1.eAttributeType)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "eAllAttributes",
      "eAttributeType"
    ]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "reverse": 1
    },
    "body": "eClass.eAllAttributes->asOrderedSet()->reverse()->collect(temp1 : EAttribute | temp1.eAttributeType)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "eAllAttributes",
      "eAttributeType"
    ]
  },
  {
    "operations": {
      "drop": 1,
      "asOrderedSet": 1
    },
    "body": "eClass.eAllAttributes->asOrderedSet()->drop(2)->collect(temp1 : EAttribute | temp1.eAttributeType)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "eAllAttributes",
      "eAttributeType"
    ]
  },
  {
    "operations": {
      "dropRight": 1,
      "asOrderedSet": 1
    },
    "body": "eClass.eAllAttributes->asOrderedSet()->dropRight(2)->collect(temp1 : EAttribute | temp1.eAttributeType)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "eAllAttributes",
      "eAttributeType"
    ]
  }
]
