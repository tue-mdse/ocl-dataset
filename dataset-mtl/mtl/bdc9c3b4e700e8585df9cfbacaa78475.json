[
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1
    },
    "body": "cf.typeParameters->select(temp1 : TypeParameter | temp1.genericType.oclIsUndefined().not())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "typeParameters",
      "genericType"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "c.associationEnds->select(temp1 : AssociationEnd | temp1.navigable.=(true))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "navigable",
      "associationEnds"
    ]
  },
  {
    "operations": {
      "not": 1,
      "<>": 1,
      "oclIsUndefined": 1,
      "and": 1
    },
    "body": "ae.upperBound.oclIsUndefined().not().and(ae.upperBound.<>(1))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["upperBound"]
  },
  {
    "operations": {
      "<>": 2,
      "oclIsUndefined": 1,
      "or": 2,
      "oclIsKindOf": 1,
      "oclAsType": 1,
      "filter": 1,
      "eContainer": 1,
      "not": 3,
      "size": 1,
      "and": 3,
      "asSet": 1,
      "=": 2,
      ">": 1
    },
    "body": "op.eContainer(ram::Aspect).messageViews->filter(ram::MessageView)->select(temp1 : MessageView | temp1.specification.oclIsUndefined().not())->collect(temp2 : MessageView | temp2.specification)->collect(temp3 : Interaction | temp3.messages)->select(temp4 : Message | temp4.signature.=(op).and(temp4.selfMessage.not()).and(temp4.messageSort.<>(ram::MessageSort::reply)).and(getMessageFragments(temp4)->select(f : InteractionFragment | f.oclIsKindOf(ram::MessageEnd).not().or(let m : Message = f.oclAsType(ram::MessageEnd).message in m.messageSort.<>(ram::MessageSort::reply).or(f.=(m.receiveEvent))))->size().>(0)))->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 5,
      "OperationCallExpImpl": 20,
      "VariableExpImpl": 14,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 1,
      "EnumLiteralExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 4,
      "PropertyCallExpImpl": 10
    },
    "properties": [
      "messageSort",
      "selfMessage",
      "signature",
      "message",
      "receiveEvent",
      "messages",
      "messageViews",
      "specification"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "oclIsKindOf": 1,
      "includes": 1,
      "+": 1,
      "oclAsType": 2,
      "-": 1,
      "filter": 1,
      "not": 2,
      "size": 4,
      "and": 5,
      "subOrderedSet": 2,
      "<": 1,
      "indexOf": 4,
      "=": 4,
      "first": 1,
      ">": 2
    },
    "body": "if m.selfMessage.not() then let lifelineFragments : OrderedSet(InteractionFragment) = getFragmentsOverLifeline(getTargetLifeline(m)) in if lifelineFragments->filter(ram::MessageEnd)->collect(temp1 : MessageEnd | temp1.message)->includes(m).and(lifelineFragments->indexOf(m.receiveEvent).<(lifelineFragments->size())) then let nextFragments : OrderedSet(InteractionFragment) = lifelineFragments->subOrderedSet(lifelineFragments->indexOf(m.receiveEvent).+(1), lifelineFragments->size()) in let separatorFragments : OrderedSet(InteractionFragment) = nextFragments->select(f : InteractionFragment | f.oclIsKindOf(ram::MessageEnd).and(let m : Message = f.oclAsType(ram::MessageEnd).message in m.messageSort.=(ram::MessageSort::reply).and(f.=(m.sendEvent)).or(m.messageSort.<>(ram::MessageSort::reply).and(m.selfMessage.not()).and(f.=(m.receiveEvent))))) in let lastIndex : Integer = if separatorFragments->size().>(0) then let first : InteractionFragment = separatorFragments->first() in if first.oclAsType(ram::MessageEnd).message.messageSort.=(ram::MessageSort::reply) then nextFragments->indexOf(first) else nextFragments->indexOf(first).-(1) endif else nextFragments->size() endif in if lastIndex.>(0) then nextFragments->subOrderedSet(1, lastIndex) else OrderedSet {} endif else OrderedSet {} endif else OrderedSet {} endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 34,
      "VariableExpImpl": 33,
      "LetExpImpl": 6,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 5,
      "EnumLiteralExpImpl": 3,
      "TypeExpImpl": 4,
      "CollectionLiteralExpImpl": 3,
      "IfExpImpl": 5,
      "PropertyCallExpImpl": 12
    },
    "properties": [
      "messageSort",
      "selfMessage",
      "message",
      "receiveEvent",
      "sendEvent"
    ]
  },
  {
    "operations": {
      "first": 1,
      "asSequence": 1
    },
    "body": "f.covered->asSequence()->first()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["covered"]
  },
  {
    "operations": {
      "eContainer": 1,
      "includes": 1
    },
    "body": "lifeline.eContainer(ram::Interaction).fragments->select(temp1 : InteractionFragment | temp1.covered->includes(lifeline))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "fragments",
      "covered"
    ]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "getLifelineForFragment(m.receiveEvent.oclAsType(ram::InteractionFragment))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["receiveEvent"]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1
    },
    "body": "m.arguments->select(temp1 : ParameterValueMapping | temp1.value.oclIsUndefined().not())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "arguments",
      "value"
    ]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "and": 1,
      "=": 1
    },
    "body": "m.messageSort.=(ram::MessageSort::reply).and(m.returns.oclIsUndefined().not())",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "messageSort",
      "returns"
    ]
  },
  {
    "operations": {"<>": 1},
    "body": "m.messageSort.<>(ram::MessageSort::reply)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["messageSort"]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1
    },
    "body": "m.assignTo.oclIsUndefined().not()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["assignTo"]
  },
  {
    "operations": {"=": 1},
    "body": "m.messageSort.=(ram::MessageSort::createMessage)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["messageSort"]
  },
  {
    "operations": {"=": 1},
    "body": "m.signature.operationType.=(ram::OperationType::Constructor)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "signature",
      "operationType"
    ]
  },
  {
    "operations": {
      "trim": 1,
      "toLowerCase": 1,
      "=": 1
    },
    "body": "language.toLowerCase().trim().=(expected)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "trim": 1,
      "toLowerCase": 1,
      "replace": 1,
      "replaceAll": 1
    },
    "body": "self.trim().toLowerCase().replaceAll('[^a-z0-9]+', '_').replace('^[0-9]+', '_')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {"replaceAll": 1},
    "body": "self.replaceAll('(\r\n|\n)', '')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"replaceAll": 1},
    "body": "self.replaceAll('(\r\n|\n){2,}', '\n')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"replaceAll": 1},
    "body": "self.replaceAll('[ (\r\n|\n)\t]+', ' ')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"+": 2},
    "body": "s.+(input).+(s)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "+": 2,
      "replaceAll": 1
    },
    "body": "self.replaceAll('^((.|(\r\n|\n))+)$', s.+('$1').+(s))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "+": 1,
      "replaceAll": 1
    },
    "body": "self.replaceAll(marker.+('(\r\n|\n)+'), '')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "endsWith": 1,
      "+": 1
    },
    "body": "if input.endsWith(s) then input else input.+(s) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 2,
      "IfExpImpl": 1
    },
    "properties": []
  }
]
