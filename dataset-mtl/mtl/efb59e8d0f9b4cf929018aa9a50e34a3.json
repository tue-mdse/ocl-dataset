[
  {
    "operations": {
      "or": 1,
      "=": 2
    },
    "body": "self.direction.=(uml::ParameterDirectionKind::return).or(self.name.=('return'))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "direction"
    ]
  },
  {
    "operations": {
      "<>": 2,
      "and": 1
    },
    "body": "self.direction.<>(uml::ParameterDirectionKind::return).and(self.name.<>('return'))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "direction"
    ]
  },
  {
    "operations": {"asSequence": 1},
    "body": "seq->select(p : Parameter | isReturnParam(p))->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getValue": 1,
      "oclAsType": 1,
      "getAppliedStereotype": 1
    },
    "body": "if hasStereotype(p,'embedded_C::Pointer') then p.getValue(p.getAppliedStereotype('embedded_C::Pointer'), 'Pointer').oclAsType(uml::EnumerationLiteral).name else '' endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 4,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "getPointerKind(self).=('Simple')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "getPointerKind(self).=('Double')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getValue": 1,
      "oclAsType": 1,
      "=": 1,
      "getAppliedStereotype": 1
    },
    "body": "if hasStereotype(p,'embedded_C::Pointer') then p.getValue(p.getAppliedStereotype('embedded_C::Pointer'), 'ConstantPointer').oclAsType(uml::EnumerationLiteral).name.=('Yes') else false endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getValue": 1,
      "oclAsType": 1,
      "=": 1,
      "getAppliedStereotype": 1
    },
    "body": "if hasStereotype(p,'embedded_C::Pointer') then p.getValue(p.getAppliedStereotype('embedded_C::Pointer'), 'ConstantData').oclAsType(uml::EnumerationLiteral).name.=('Yes') else false endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 4,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "self.direction.=(uml::ParameterDirectionKind::inout)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["direction"]
  },
  {
    "operations": {},
    "body": "self.direction",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["direction"]
  }
]
