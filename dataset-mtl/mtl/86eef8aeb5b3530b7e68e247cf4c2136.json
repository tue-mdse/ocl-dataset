[
  {
    "operations": {
      "=": 1,
      "eAllContents": 1,
      "eClass": 1
    },
    "body": "root.eAllContents()->select(temp1 : OclAny | temp1.eClass().name.=(eclass.name))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "or": 1,
      "=": 2,
      "eAllContents": 1,
      "eClass": 2
    },
    "body": "root.eAllContents()->select(temp1 : OclAny | temp1.eClass().name.=(eclass.name).or(temp1.eClass().eAllSuperTypes->exists(temp2 : EClass | temp2.name.=(eclass.name))))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 6,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "name",
      "eAllSuperTypes"
    ]
  },
  {
    "operations": {"=": 2},
    "body": "if eclass.eAnnotations->exists(temp1 : EAnnotation | temp1.source.=('gmf.node')) then 'node' else if eclass.eAnnotations->exists(temp2 : EAnnotation | temp2.source.=('gmf.link')) then 'edge' else null endif endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "source",
      "eAnnotations"
    ]
  },
  {
    "operations": {"eAllContents": 1},
    "body": "root.eAllContents(mavo::MAVOElement)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "=": 1,
      "eClass": 1
    },
    "body": "getMAVOElements(root)->select(temp1 : MAVOElement | getGraphFunction(temp1.eClass()).=('node'))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "=": 1,
      "eClass": 1
    },
    "body": "getMAVOElements(root)->select(temp1 : MAVOElement | getGraphFunction(temp1.eClass()).=('edge'))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "objects->collect(temp1 : OclAny | temp1.oclAsType(mavo::MAVOElement))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "or": 1,
      "and": 2,
      "=": 3,
      "eAllContents": 1
    },
    "body": "mavoRootEClass.ePackage.eAllContents(ecore::EClass)->select(temp1 : EClass | temp1.abstract.not().and(temp1.eAllSuperTypes->exists(super : EClass | super.name.=('MAVOElement'))).and(temp1.eAnnotations->exists(temp2 : EAnnotation | temp2.source.=('gmf.node').or(temp2.source.=('gmf.link')))))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 7,
      "StringLiteralExpImpl": 3,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 7
    },
    "properties": [
      "name",
      "source",
      "ePackage",
      "abstract",
      "eAnnotations",
      "eAllSuperTypes"
    ]
  },
  {
    "operations": {
      "union": 1,
      "=": 1,
      "eClass": 2
    },
    "body": "getMetamodelMAVOClasses(mavoRoot.eClass())->union(mavoRoot.eClass().eAllSuperTypes->reject(super : EClass | super.name.=('MAVOModel'))->collect(super : EClass | getMetamodelMAVOClasses(super)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "eAllSuperTypes"
    ]
  },
  {
    "operations": {
      "size": 2,
      "subSequence": 1,
      "indexOf": 1,
      "-": 1
    },
    "body": "getMetamodelAndSuperMetamodelsMAVOClasses(mavoRoot)->subSequence(1, getMetamodelAndSuperMetamodelsMAVOClasses(mavoRoot)->indexOf(currentMAVOClass))->collect(eclass : EClass | getObjectsOfType(mavoRoot,eclass))->size().-(getObjectsOfType(mavoRoot,currentMAVOClass)->size())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 4,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "and": 1,
      "union": 1,
      "=": 3
    },
    "body": "Set {eclass}->union(eclass.eAllSuperTypes)->collect(temp1 : EClass | temp1.eAnnotations)->any(temp2 : EAnnotation | temp2.source.=('gmf.link').and(temp2.details->exists(temp3 : EStringToStringMapEntry | temp3.key.=(annotation)))).details->any(temp4 : EStringToStringMapEntry | temp4.key.=(annotation)).value",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 9,
      "StringLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "value",
      "source",
      "details",
      "key",
      "eAllSuperTypes",
      "eAnnotations"
    ]
  },
  {
    "operations": {},
    "body": "getEdgeFeatureName(eclass,'source')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getEdgeFeatureName(eclass,'target')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('edu.toronto.cs.se.mmint.mavo.library.MAVOUtils', 'getMergeableFormulaVars(edu.toronto.cs.se.mavo.MAVORoot, edu.toronto.cs.se.mavo.MAVOElement)', Sequence {mavoRoot, mavoModelObj})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('edu.toronto.cs.se.mmint.mavo.library.MAVOUtils', 'getUnmergeableFormulaVars(edu.toronto.cs.se.mavo.MAVORoot, edu.toronto.cs.se.mavo.MAVOElement)', Sequence {mavoRoot, mavoModelObj})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "+": 1,
      "=": 2
    },
    "body": "if eclass.name.=('Node').or(eclass.name.=('Edge')) then eclass.name.+('_') else eclass.name endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 4,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": ["name"]
  },
  {
    "operations": {"asOrderedSet": 1},
    "body": "mayDecision.alternatives->collect(temp1 : MAVOCollection | temp1.mavoElements)->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "mavoElements",
      "alternatives"
    ]
  },
  {
    "operations": {},
    "body": "getMetamodelAndSuperMetamodelsMAVOClasses(mavoRoot)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpperCase": 1},
    "body": "getMAVOClassName(eclass).toUpperCase()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "function.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpperCase": 1},
    "body": "getMAVOClassName(eclass).toUpperCase()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "i",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getMAVONodes(mavoRoot)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "mavoNode.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "mavoNode.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {"+": 1},
    "body": "numTypes.+(i)",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getMAVOEdges(mavoRoot)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "mavoEdge.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "mavoEdge.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {"+": 2},
    "body": "numTypes.+(numNodes).+(i)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getMAVOElements(mavoRoot)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "function",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {
      "toUpperCase": 1,
      "eClass": 1
    },
    "body": "getMAVOClassName(mavoElement.eClass()).toUpperCase()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "function.=('edge')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "srcMavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "tgtMavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "srcMavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "tgtMavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {">": 1},
    "body": "numNodes.>(0)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"+": 1},
    "body": "numTypes.+(1)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"+": 1},
    "body": "numTypes.+(numNodes)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {">": 1},
    "body": "numEdges.>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"+": 2},
    "body": "numTypes.+(numNodes).+(1)",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"+": 2},
    "body": "numTypes.+(numNodes).+(numEdges)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getMAVOElements(mavoRoot)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"not": 1},
    "body": "mavoElement.may.not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["may"]
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "function",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "oclAsType": 1
    },
    "body": "mavoRoot.decisions->select(temp1 : MAVODecision | temp1.oclIsTypeOf(mavo::MayDecision))->collect(temp2 : MAVODecision | temp2.oclAsType(mavo::MayDecision))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["decisions"]
  },
  {
    "operations": {},
    "body": "mayDecision.alternatives",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["alternatives"]
  },
  {
    "operations": {},
    "body": "mayDecision.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "mayAlternative.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "mayAlternative.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "mayAlternative.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "getMayDecisionElements(mayDecision)->size().>(1)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getMayDecisionElements(mayDecision)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "includes": 1
    },
    "body": "mayAlternative.mavoElements->includes(mavoElement).not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["mavoElements"]
  },
  {
    "operations": {"eClass": 1},
    "body": "mavoElement.eClass()",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {
      "not": 1,
      "includes": 1
    },
    "body": "mayAlternative.mavoElements->includes(mavoElement).not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["mavoElements"]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "getMayDecisionElements(mayDecision)->size().>(1)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "mayDecision.alternatives->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["alternatives"]
  },
  {
    "operations": {},
    "body": "mayDecision.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "mayDecision.alternatives->size().>(1)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["alternatives"]
  },
  {
    "operations": {"at": 1},
    "body": "mayDecision.alternatives->at(1).formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "alternatives",
      "formulaVariable"
    ]
  },
  {
    "operations": {
      "toLower": 1,
      "toString": 1
    },
    "body": "mayDecision.logic.toString().toLower()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["logic"]
  },
  {
    "operations": {},
    "body": "mayDecision.alternatives",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["alternatives"]
  },
  {
    "operations": {},
    "body": "mayAlternative.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "getMetamodelAndSuperMetamodelsMAVOClasses(mavoRoot)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "eclass",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "function",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "function.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "eclass",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "function.=('node')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "function.=('edge')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "eclass",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "eclass",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getMetamodelAndSuperMetamodelsMAVOClasses(mavoRoot)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"isSuperTypeOf": 1},
    "body": "srcEclass.isSuperTypeOf(endpointEclass)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "eclass",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "endpointEclass",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"isSuperTypeOf": 1},
    "body": "tgtEclass.isSuperTypeOf(endpointEclass)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "eclass",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "endpointEclass",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"toUpperCase": 1},
    "body": "getMAVOClassName(eclass).toUpperCase()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpperCase": 1},
    "body": "getMAVOClassName(eclass).toUpperCase()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "i",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getMetamodelAndSuperMetamodelsMAVOClasses(mavoRoot)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "asMAVOElements(getObjectsOfType(mavoRoot,eclass))",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "function.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {"+": 2},
    "body": "numTypes.+(numPreviousTypes).+(i)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getMAVOEdges(mavoRoot)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"eClass": 1},
    "body": "mavoElement.eClass()",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {"toUpperCase": 1},
    "body": "getMAVOClassName(srcEclass).toUpperCase()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpperCase": 1},
    "body": "getMAVOClassName(tgtEclass).toUpperCase()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "srcMavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "srcEclass",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "tgtMavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "tgtEclass",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getMetamodelAndSuperMetamodelsMAVOClasses(mavoRoot)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "eclassMavoElements->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "function.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "eclass",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "function",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"+": 2},
    "body": "numTypes.+(numPreviousTypes).+(1)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "+": 2
    },
    "body": "numTypes.+(numPreviousTypes).+(eclassMavoElements->size())",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getMAVOElements(mavoRoot)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"not": 1},
    "body": "mavoElement.may.not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["may"]
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "sort",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "function",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {"not": 1},
    "body": "mavoElement.set.not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["set"]
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "sort",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "sort",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "function",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "function",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "unmergeableFormulaVars->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "mavoElement.var",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["var"]
  },
  {
    "operations": {},
    "body": "sort",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "function",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "unmergeableFormulaVars",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "function",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "unmergeableFormulaVar",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "mavoRoot.decisions",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["decisions"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "mavoDecision.oclIsTypeOf(mavo::MayDecision)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "mavoDecision.oclIsTypeOf(mavo::VarDecision)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "varDecision.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "varDomain.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "varDomain.mavoElements",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["mavoElements"]
  },
  {
    "operations": {"eClass": 1},
    "body": "mavoElement.eClass()",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"eClass": 1},
    "body": "mavoElement.eClass()",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "mergeableFormulaVars",
    "type": "ForIter",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "includes": 1
    },
    "body": "domainFormulaVars->includes(mergeableFormulaVar).not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"eClass": 1},
    "body": "mavoElement.eClass()",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "mergeableFormulaVar",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "mayDecision.alternatives",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["alternatives"]
  },
  {
    "operations": {},
    "body": "mayDecision.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "mayAlternative.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "mayAlternative.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {},
    "body": "mayAlternative.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "getMayDecisionElements(mayDecision)->size().>(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getMayDecisionElements(mayDecision)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "includes": 1
    },
    "body": "mayAlternative.mavoElements->includes(mavoElement).not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["mavoElements"]
  },
  {
    "operations": {"eClass": 1},
    "body": "mavoElement.eClass()",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"eClass": 1},
    "body": "mavoElement.eClass()",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "mavoElement.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {
      "not": 1,
      "includes": 1
    },
    "body": "mayAlternative.mavoElements->includes(mavoElement).not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["mavoElements"]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "getMayDecisionElements(mayDecision)->size().>(1)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "mayDecision.alternatives->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["alternatives"]
  },
  {
    "operations": {},
    "body": "mayDecision.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "mayDecision.alternatives->size().>(1)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["alternatives"]
  },
  {
    "operations": {"at": 1},
    "body": "mayDecision.alternatives->at(1).formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "alternatives",
      "formulaVariable"
    ]
  },
  {
    "operations": {
      "toLower": 1,
      "toString": 1
    },
    "body": "mayDecision.logic.toString().toLower()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["logic"]
  },
  {
    "operations": {},
    "body": "mayDecision.alternatives",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["alternatives"]
  },
  {
    "operations": {},
    "body": "mayAlternative.formulaVariable",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["formulaVariable"]
  }
]
