[
  {
    "operations": {"=": 1},
    "body": "aComponent.type2.=(robmod::ComponentType::Deployment)",
    "type": "TemplateGuard",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type2"]
  },
  {
    "operations": {},
    "body": "aComponent",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "aComponent.name.concat('.lua')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"allInstances": 1},
    "body": "robmod::Component.allInstances()",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "c.type2.=(robmod::ComponentType::Component)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type2"]
  },
  {
    "operations": {},
    "body": "c",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c.type",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "c",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c.period",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["period"]
  },
  {
    "operations": {},
    "body": "c",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "c",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"allInstances": 1},
    "body": "robmod::Component.allInstances()",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "c.type2.=(robmod::ComponentType::Component)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type2"]
  },
  {
    "operations": {},
    "body": "c.outputPorts",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["outputPorts"]
  },
  {
    "operations": {},
    "body": "resolveOutputPort(p)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "allInstances": 1,
      "includes": 1,
      "first": 1
    },
    "body": "robmod::Component.allInstances()->select(temp1 : Component | temp1.inputPorts->includes(ip))->asOrderedSet()->first()",
    "type": "QueryInvocationArgument",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["inputPorts"]
  },
  {
    "operations": {},
    "body": "ip.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "resolveOutputPortExt(p)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "xp.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"allInstances": 1},
    "body": "robmod::InputPort.allInstances()->select(temp1 : InputPort | temp1.external)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["external"]
  },
  {
    "operations": {
      "allInstances": 2,
      "includes": 1,
      "notEmpty": 1
    },
    "body": "robmod::InputPort.allInstances()->select(p : InputPort | robmod::Component.allInstances()->select(temp1 : Component | temp1.inputPorts->includes(p))->collect(temp2 : Component | temp2.handlers)->notEmpty())->select(p : InputPort | isConnected(p,xp))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 4,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "inputPorts",
      "handlers"
    ]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "allInstances": 1,
      "includes": 1,
      "first": 1
    },
    "body": "robmod::Component.allInstances()->select(temp1 : Component | temp1.inputPorts->includes(ip))->asOrderedSet()->first()",
    "type": "QueryInvocationArgument",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["inputPorts"]
  },
  {
    "operations": {},
    "body": "ip.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "xp.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "eContainer": 2,
      "toString": 1,
      "concat": 2,
      "=": 1
    },
    "body": "if c.eContainer(robmod::Component).type2.=(robmod::ComponentType::Deployment) then c.name.toString() else getFullName(c.eContainer(robmod::Component)).concat('_').concat(c.name) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 1,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "type2"
    ]
  },
  {
    "operations": {
      "allInstances": 2,
      "includes": 1,
      "notEmpty": 1
    },
    "body": "robmod::InputPort.allInstances()->select(p : InputPort | robmod::Component.allInstances()->select(temp1 : Component | temp1.inputPorts->includes(p))->collect(temp2 : Component | temp2.handlers)->notEmpty())->select(p : InputPort | isConnected(p,op))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "inputPorts",
      "handlers"
    ]
  },
  {
    "operations": {"allInstances": 1},
    "body": "robmod::OutputPort.allInstances()->select(p : OutputPort | p.external)->select(p : OutputPort | isConnected(p,op))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["external"]
  },
  {
    "operations": {"=": 1},
    "body": "if ip.=(xp) then true else xp.delegation->exists(p : OutputPort | isConnected(ip,p)) endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["delegation"]
  },
  {
    "operations": {"or": 1},
    "body": "xp.connection->exists(p : InputPort | isConnected(ip,p)).or(xp.delegation->exists(p : OutputPort | isConnected(ip,p)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "connection",
      "delegation"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "if ip.=(xp) then true else xp.propagation->exists(p : InputPort | isConnected(ip,p)) endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["propagation"]
  }
]
