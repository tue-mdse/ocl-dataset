[
  {
    "operations": {
      "filter": 1,
      "oclIsUndefined": 2,
      "asOrderedSet": 1
    },
    "body": "if aMain.instructions->oclIsUndefined() then OrderedSet {} else let a : Set(Arbitrator) = aMain.instructions->filter(mindstorms::Arbitrator) in if a->oclIsUndefined() then OrderedSet {} else a->asOrderedSet() endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 4,
      "LetExpImpl": 1,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["instructions"]
  },
  {
    "operations": {
      "filter": 1,
      "oclIsUndefined": 3,
      "asOrderedSet": 1
    },
    "body": "if aMain.instructions->oclIsUndefined() then OrderedSet {} else let a : Collection(Arbitrator) = aMain.instructions->filter(mindstorms::Arbitrator) in if a->oclIsUndefined() then OrderedSet {} else if a->collect(temp1 : Arbitrator | temp1.behaviors)->oclIsUndefined() then OrderedSet {} else a->collect(temp2 : Arbitrator | temp2.behaviors)->asOrderedSet() endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 5,
      "LetExpImpl": 1,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 3,
      "IfExpImpl": 3,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "behaviors",
      "instructions"
    ]
  },
  {
    "operations": {
      "oclIsUndefined": 5,
      "and": 1,
      "asOrderedSet": 3,
      "union": 1
    },
    "body": "if aArbitrator.oclIsUndefined() then OrderedSet {} else if aArbitrator.behaviors->oclIsUndefined().and(aArbitrator.reuse->oclIsUndefined()) then OrderedSet {} else if aArbitrator.behaviors->oclIsUndefined() then aArbitrator.reuse->asOrderedSet() else if aArbitrator.reuse->oclIsUndefined() then aArbitrator.behaviors->asOrderedSet() else aArbitrator.behaviors->union(aArbitrator.reuse)->asOrderedSet() endif endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 10,
      "VariableExpImpl": 9,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 4,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "reuse",
      "behaviors"
    ]
  }
]
