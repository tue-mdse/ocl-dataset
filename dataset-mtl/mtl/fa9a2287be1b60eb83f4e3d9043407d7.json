[
  {
    "operations": {
      "<>": 1,
      "allAttributes": 1
    },
    "body": "c.allAttributes()->select(a : Property | a.name.<>('id'))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "allAttributes": 1,
      "=": 1,
      "first": 1
    },
    "body": "c.allAttributes()->select(a : Property | a.name.=('id'))->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"filter": 1},
    "body": "m.packagedElement->filter(uml::Class)->sortedBy(c : Class | c.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "packagedElement",
      "name"
    ]
  },
  {
    "operations": {"not": 1},
    "body": "getClasses(m)->select(c : Class | isChild(c).not())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {
      "getAllAttributes": 1,
      "and": 2,
      "asOrderedSet": 1,
      "getOtherEnd": 1,
      "<": 1,
      "=": 1,
      "isNavigable": 1,
      "first": 1,
      "getUpper": 1
    },
    "body": "asc.getAllAttributes()->select(a : Property | a.isNavigable().and(a.getUpper().<(0)).and(a.getOtherEnd().type.=(c)))->asOrderedSet()->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 10,
      "VariableExpImpl": 5,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "allAttributes": 1,
      "union": 1
    },
    "body": "c.allAttributes()->union(getReferences(c,false))->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "asOrderedSet": 1,
      "getOtherEnd": 7,
      "isNavigable": 3,
      "getAssociations": 1,
      "getUpper": 2,
      "flatten": 1,
      "not": 1,
      "isComposite": 1,
      "getAllAttributes": 1,
      "and": 8,
      "<": 1,
      "=": 3,
      ">": 1
    },
    "body": "c.getAssociations()->collect(temp1 : Association | temp1.getAllAttributes()->select(a : Property | a.isNavigable().and(a.getUpper().>(0)).and(a.getOtherEnd().type.=(c)).and(a.getOtherEnd().aggregation.=(uml::AggregationKind::none)).and(a.getOtherEnd().isNavigable().not()).or(a.getOtherEnd().isNavigable().and(a.getOtherEnd().getUpper().<(0)).and(a.getOtherEnd().type.=(c)).and(a.getOtherEnd().isComposite()).and(includeParent))))->flatten()->sortedBy(a : Property | a.name)->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 32,
      "VariableExpImpl": 15,
      "IntegerLiteralExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "aggregation",
      "name",
      "type"
    ]
  },
  {
    "operations": {"notEmpty": 1},
    "body": "getReferences(c,includeParent)->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "isComposite": 1,
      "getAllAttributes": 1,
      "and": 3,
      "getOtherEnd": 1,
      "notEmpty": 1,
      "<": 1,
      "=": 1,
      "getAssociations": 1,
      "isNavigable": 1,
      "getUpper": 1
    },
    "body": "c.getAssociations()->select(asc : Association | asc.getAllAttributes()->select(a : Property | a.isNavigable().and(a.getUpper().<(0)).and(a.getOtherEnd().type.=(c)).and(a.isComposite()))->notEmpty())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 12,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {
      "not": 1,
      "isComposite": 1,
      "getAllAttributes": 1,
      "and": 3,
      "getOtherEnd": 1,
      "<": 1,
      "notEmpty": 1,
      "getAssociations": 1,
      "isNavigable": 1,
      "=": 1,
      "getUpper": 1
    },
    "body": "c.getAssociations()->select(asc : Association | asc.getAllAttributes()->select(a : Property | a.isNavigable().and(a.getUpper().<(0)).and(a.getOtherEnd().type.=(c)).and(a.isComposite().not()))->notEmpty())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 13,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {
      "getAllAttributes": 1,
      "and": 2,
      "getOtherEnd": 1,
      "notEmpty": 1,
      "<": 1,
      "=": 1,
      "getAssociations": 1,
      "isNavigable": 1,
      "getUpper": 1
    },
    "body": "c.getAssociations()->select(asc : Association | asc.getAllAttributes()->select(a : Property | a.isNavigable().and(a.getUpper().<(0)).and(a.getOtherEnd().type.=(c)))->notEmpty())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 10,
      "VariableExpImpl": 6,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"notEmpty": 1},
    "body": "getCompositeAssociations(c)->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "getSharedAssociations(c)->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "getMasterAssociations(c)->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "flatten": 1,
      "getAllAttributes": 1,
      "isComposite": 1,
      "and": 3,
      "getOtherEnd": 4,
      "notEmpty": 1,
      "<": 1,
      "getAssociations": 1,
      "isNavigable": 1,
      "=": 1,
      "getUpper": 1
    },
    "body": "c.getAssociations()->collect(temp1 : Association | temp1.getAllAttributes()->select(a : Property | a.getOtherEnd().isNavigable().and(a.getOtherEnd().getUpper().<(0)).and(a.getOtherEnd().type.=(c)).and(a.getOtherEnd().isComposite())))->flatten()->notEmpty()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 16,
      "VariableExpImpl": 7,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {
      "flatten": 1,
      "isComposite": 1,
      "getAllAttributes": 1,
      "and": 3,
      "asOrderedSet": 1,
      "getOtherEnd": 4,
      "<": 1,
      "=": 1,
      "isNavigable": 1,
      "getAssociations": 1,
      "first": 1,
      "getUpper": 1
    },
    "body": "c.getAssociations()->collect(temp1 : Association | temp1.getAllAttributes()->select(a : Property | a.getOtherEnd().isNavigable().and(a.getOtherEnd().getUpper().<(0)).and(a.getOtherEnd().type.=(c)).and(a.getOtherEnd().isComposite())))->flatten()->asOrderedSet()->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 17,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {
      "<>": 1,
      "and": 1,
      "=": 1
    },
    "body": "Set {'String', 'Boolean', 'Date', 'Long', 'Integer', 'Image'}->exists(t : String | a.type.<>(null).and(t.=(a.type.name)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"allAttributes": 1},
    "body": "c.allAttributes()->exists(a : Property | isDate(a))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "a.type.name.=('Date')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "a.type.name.=('Computed')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "a.name.=('id')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "a.name.=('name')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "'get'.concat(a.name.toUpperFirst())",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "'set'.concat(a.name.toUpperFirst())",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "allInstances": 1,
      "=": 1,
      "first": 1
    },
    "body": "uml::Class.allInstances()->select(c : Class | c.name.=(a.type.name))->asOrderedSet()->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "a.name.toUpperFirst()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "upperBound": 1,
      ">": 1
    },
    "body": "self.upperBound().>(0)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "a.type.name.=('Image')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "a.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"getModel": 1},
    "body": "c.getModel().name",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "getName(c).concat('Ctrl')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getName(c).concat('Service')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getName(c).concat('Model')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getName(c).concat('Module')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getName(c).concat('Module')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getName(c).concat('Service')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getName(c).concat('Context')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getName(c).concat('Ctrl')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getName(c).concat('Context')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getName(c).concat('s')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "getName(c).concat('s').concat('/master')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"toLowerFirst": 1},
    "body": "c.name.toLowerFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "c.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "concat": 1
    },
    "body": "c.name.toUpperFirst().concat('DTO')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "c.name.concat('Service')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "c.name.concat('MasterService')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 2},
    "body": "'I'.concat(c.name).concat('Logic')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "c.name.concat('Logic')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "c.name.concat('Entity')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "c.name.concat('Persistence')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "c.name.concat('Converter')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "c.name.concat('LogicTest')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "c.name.concat('PersistenceTest')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toLowerCase": 1,
      "concat": 1
    },
    "body": "'co.edu.uniandes.csw.'.concat(m.name.toLowerCase())",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "concat": 2,
      "replaceAll": 1
    },
    "body": "'/src/main/java/'.concat(baseGroup(m).replaceAll('[.]', '/')).concat('/')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {
      "concat": 2,
      "replaceAll": 1
    },
    "body": "'/src/test/java/'.concat(baseGroup(m).replaceAll('[.]', '/')).concat('/')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {
      "getModel": 1,
      "+": 1,
      "concat": 2,
      "toLowerFirst": 1
    },
    "body": "baseGroup(c.getModel()).concat('.'.+(c.name.toLowerFirst())).concat(suffix)",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "m.name.concat('.logic')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "m.name.concat('.web')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "getWebProjectName(m).concat('/src/main/webapp/')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "m.name.concat('_pool')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "'java:app/jdbc/'.concat(m.name)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "m.name.concat('PU')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"concat": 1},
    "body": "getBackendProjectName(m).concat('/src/main/resources/META-INF/')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getBackendProjectName(m).concat('/src/test/resources/META-INF/')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "c.name.concat('ServiceTest')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  }
]
