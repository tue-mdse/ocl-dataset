[
  {
    "operations": {
      "not": 1,
      "getAllAttributes": 1,
      "asOrderedSet": 1
    },
    "body": "self.getAllAttributes()->select(temp1 : Property | isAssociationAttribute(temp1).not())->asOrderedSet()->sortedBy(temp2 : Property | temp2.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"asOrderedSet": 1},
    "body": "aClass.attribute->select(temp1 : Property | isAssociationAttribute(temp1))->asOrderedSet()->sortedBy(temp2 : Property | temp2.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "attribute"
    ]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "getDatatypeAttributes(aClass)->isEmpty().not()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "getAllDatatypeAttributes(aClass)->isEmpty().not()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "if hasStereotype(aClass,'datatype') then 'String' else if hasStereotype(aClass,'text') then 'String' else if hasStereotype(aClass,'number') then 'String' else if hasStereotype(aClass,'lob') then 'byte[]' else if hasStereotype(aClass,'temporal') then 'Date' else if hasStereotype(aClass,'time') then 'Date' else if hasStereotype(aClass,'date') then 'Date' else if hasStereotype(aClass,'integer') then 'int' else if hasStereotype(aClass,'real') then 'double' else if hasStereotype(aClass,'enumerate') then aClass.name else 'String' endif endif endif endif endif endif endif endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 11,
      "QueryInvocationSpec": 10,
      "StringLiteralExpImpl": 20,
      "IfExpImpl": 10,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "getDatatypeType(getDatatypeByProperty(aProperty))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  }
]
