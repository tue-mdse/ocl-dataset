[
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "boundPackageRef(implementsInterface(operation)).qualifiedName",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualifiedName"]
  },
  {
    "operations": {},
    "body": "self.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "boundPackageRef(implementsInterface(operation))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'SignalEvents'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "+": 1,
      "oclAsType": 1
    },
    "body": "'SIG_'.+(trigger.event.oclAsType(uml::SignalEvent).signal.name)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "signal",
      "event"
    ]
  },
  {
    "operations": {},
    "body": "state.outgoing",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["outgoing"]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "first": 1,
      "asSequence": 1
    },
    "body": "transition.trigger->asSequence()->first().event.oclIsKindOf(uml::TimeEvent)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "trigger",
      "event"
    ]
  },
  {
    "operations": {},
    "body": "self.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "oclAsType": 2,
      "first": 2,
      "asSequence": 2
    },
    "body": "transition.trigger->asSequence()->first().event.oclAsType(uml::TimeEvent).when.expr.oclAsType(uml::OpaqueExpression).body->asSequence()->first()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "body",
      "expr",
      "trigger",
      "when",
      "event"
    ]
  },
  {
    "operations": {
      "oclAsType": 2,
      "first": 1,
      "asSequence": 1
    },
    "body": "self.trigger->collect(temp1 : Trigger | temp1.event)->collect(temp2 : Event | temp2.oclAsType(uml::TimeEvent))->collect(temp3 : TimeEvent | temp3.when)->collect(temp4 : TimeExpression | temp4.expr)->collect(temp5 : ValueSpecification | temp5.oclAsType(uml::OpaqueExpression))->collect(temp6 : OpaqueExpression | temp6.body)->asSequence()->first()",
    "type": "QueryInvocationArgument",
    "constructs": {
      "IteratorExpImpl": 6,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 7,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "body",
      "expr",
      "trigger",
      "when",
      "event"
    ]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "state.region->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["region"]
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "state.region->collect(temp1 : Region | temp1.subvertex)->select(temp2 : Vertex | temp2.oclIsKindOf(uml::State))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "region",
      "subvertex"
    ]
  },
  {
    "operations": {},
    "body": "substate",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "state.outgoing",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["outgoing"]
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "trigger.event.oclIsKindOf(uml::TimeEvent)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["event"]
  },
  {
    "operations": {},
    "body": "transition.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transition.target.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "target"
    ]
  },
  {
    "operations": {
      "not": 1,
      "=": 1
    },
    "body": "transition.effect.=(null).not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["effect"]
  },
  {
    "operations": {"containingStateMachine": 1},
    "body": "state.containingStateMachine().name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transition.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transition.effect.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "effect",
      "name"
    ]
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "trigger.event.oclIsKindOf(uml::CallEvent)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["event"]
  },
  {
    "operations": {},
    "body": "self.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "trigger.event.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "event"
    ]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "trigger.event.oclAsType(uml::CallEvent).operation.name",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "operation",
      "name",
      "event"
    ]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "trigger.event.oclAsType(uml::CallEvent).operation",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "operation",
      "event"
    ]
  },
  {
    "operations": {},
    "body": "transition.target.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "target"
    ]
  },
  {
    "operations": {
      "not": 1,
      "=": 1
    },
    "body": "transition.effect.=(null).not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["effect"]
  },
  {
    "operations": {"containingStateMachine": 1},
    "body": "state.containingStateMachine().name",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transition.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transition.effect.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "effect",
      "name"
    ]
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "trigger.event.oclIsKindOf(uml::SignalEvent)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["event"]
  },
  {
    "operations": {},
    "body": "self.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "signalEvent.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "signalEvent.signal.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "signal"
    ]
  },
  {
    "operations": {},
    "body": "trigger",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "transition.target.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "target"
    ]
  },
  {
    "operations": {
      "not": 1,
      "=": 1
    },
    "body": "transition.effect.=(null).not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["effect"]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "signalEvent.signal.attribute->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "signal",
      "attribute"
    ]
  },
  {
    "operations": {"containingStateMachine": 1},
    "body": "state.containingStateMachine().name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transition.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transition.effect.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "effect",
      "name"
    ]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "signalEvent.signal.attribute->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "signal",
      "attribute"
    ]
  },
  {
    "operations": {},
    "body": "state.outgoing",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["outgoing"]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "first": 1,
      "asSequence": 1
    },
    "body": "transition.trigger->asSequence()->first().event.oclIsKindOf(uml::TimeEvent)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "trigger",
      "event"
    ]
  },
  {
    "operations": {},
    "body": "transition.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transition.target.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "target"
    ]
  },
  {
    "operations": {
      "not": 1,
      "=": 1
    },
    "body": "transition.effect.=(null).not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["effect"]
  },
  {
    "operations": {"containingStateMachine": 1},
    "body": "state.containingStateMachine().name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transition.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transition.effect.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "effect",
      "name"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "first": 1,
      "asSequence": 1
    },
    "body": "transition.trigger->asSequence()->first().event.oclIsKindOf(uml::CallEvent)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "trigger",
      "event"
    ]
  },
  {
    "operations": {},
    "body": "self.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "transition.trigger->collect(temp1 : Trigger | temp1.event)->collect(temp2 : Event | temp2.oclAsType(uml::CallEvent))->collect(temp3 : CallEvent | temp3.operation)->collect(temp4 : Operation | temp4.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "operation",
      "trigger",
      "name",
      "event"
    ]
  },
  {
    "operations": {
      "oclAsType": 1,
      "first": 1,
      "asSequence": 1
    },
    "body": "transition.trigger->asSequence()->first().event.oclAsType(uml::CallEvent).operation",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "operation",
      "trigger",
      "event"
    ]
  },
  {
    "operations": {},
    "body": "transition.target.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "target"
    ]
  },
  {
    "operations": {
      "not": 1,
      "=": 1
    },
    "body": "transition.effect.=(null).not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["effect"]
  },
  {
    "operations": {"containingStateMachine": 1},
    "body": "state.containingStateMachine().name",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transition.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transition.effect.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "effect",
      "name"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "first": 1,
      "asSequence": 1
    },
    "body": "transition.trigger->asSequence()->first().event.oclIsKindOf(uml::SignalEvent)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "trigger",
      "event"
    ]
  },
  {
    "operations": {},
    "body": "self.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "transition.trigger->collect(temp1 : Trigger | temp1.event)->collect(temp2 : Event | temp2.oclAsType(uml::SignalEvent))->collect(temp3 : SignalEvent | temp3.signal)->collect(temp4 : Signal | temp4.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 5,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "trigger",
      "name",
      "signal",
      "event"
    ]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "transition.trigger->collect(temp1 : Trigger | temp1.event)->collect(temp2 : Event | temp2.oclAsType(uml::SignalEvent))->collect(temp3 : SignalEvent | temp3.signal)->collect(temp4 : Signal | temp4.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "trigger",
      "name",
      "signal",
      "event"
    ]
  },
  {
    "operations": {},
    "body": "transition.target.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "target"
    ]
  },
  {
    "operations": {
      "not": 1,
      "=": 1
    },
    "body": "transition.effect.=(null).not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["effect"]
  },
  {
    "operations": {"containingStateMachine": 1},
    "body": "state.containingStateMachine().name",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transition.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "transition.effect.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "effect",
      "name"
    ]
  }
]
