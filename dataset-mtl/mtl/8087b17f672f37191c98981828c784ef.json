[
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 2,
      "and": 1
    },
    "body": "propValue.<>(null).and(propValue.<>(''))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "propValue",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getProperty": 1,
      "=": 1
    },
    "body": "self.getProperty('useEntityPackage').=('no')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "type",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "type",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "type",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'business.package'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "type.package",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["package"]
  },
  {
    "operations": {
      "getProperty": 1,
      "=": 1
    },
    "body": "self.getProperty('use.functional.disposition').=('true')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "type",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "type",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "type.package",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["package"]
  },
  {
    "operations": {},
    "body": "type",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'business.package'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "type.package",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["package"]
  },
  {
    "operations": {},
    "body": "type",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "type",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "getProperty": 2,
      "or": 1,
      "and": 1,
      "oclAsType": 1,
      "=": 1
    },
    "body": "self.getProperty('useDtoPackage').=('no').or(isEntity(type.oclAsType(uml::Classifier)).and(self.getProperty('generate.dto.per.entity').<>('yes')))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 7,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 4,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "type",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "type",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "type",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'business.package'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "type.package",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["package"]
  },
  {
    "operations": {
      "getProperty": 1,
      "=": 1
    },
    "body": "self.getProperty('use.functional.disposition').=('true')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "type",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "type",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "type.package",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["package"]
  },
  {
    "operations": {},
    "body": "type",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'business.package'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "type.package",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["package"]
  },
  {
    "operations": {},
    "body": "type",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "type",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"getProperty": 1},
    "body": "self.getProperty('path.to.main.java')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"getProperty": 1},
    "body": "self.getProperty('path.to.test.java')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"getProperty": 1},
    "body": "self.getProperty('path.to.main.resources')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"getProperty": 1},
    "body": "self.getProperty('path.to.test.resources')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"getProperty": 1},
    "body": "self.getProperty('path.to.main.webapp')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"getProperty": 1},
    "body": "self.getProperty('path.to.test.webapp')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"getProperty": 1},
    "body": "self.getProperty('path.to.generated.main.java')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "hasPrimaryKey(class)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"filter": 1},
    "body": "getPKAttribute(class)->filter(uml::Property)->collect(temp1 : Property | temp1.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "hasPrimaryKey(class)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "class",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"filter": 1},
    "body": "getPKAttribute(class)->filter(uml::Property)->collect(temp1 : Property | temp1.type)->collect(temp2 : Type | convertToJavaType(temp2))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "property",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "property",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "property",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "self.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "self.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "property",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "property",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "property",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "property",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "property",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "property",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "property",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "property",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "property",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "property",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "property",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "operation",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "operation",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "operation.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "operation",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "appendPathSeparator(basedPath).concat(appendPathSeparator(packagePath)).concat(classFileName)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "size": 1,
      "and": 1,
      "concat": 1,
      ">": 1
    },
    "body": "if path.oclIsUndefined().not().and(path.size().>(0)) then path.concat('/') else path endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 6,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  }
]
