[
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "fileName",
    "type": "FileUrl",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData.cfgs",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cfgs"]
  },
  {
    "operations": {"replaceAll": 1},
    "body": "cfg.name.replaceAll('@_', '')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "cfg",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "cfg",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "cfg",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "cfg.locations",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["locations"]
  },
  {
    "operations": {},
    "body": "loc",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData.parameterMappings",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["parameterMappings"]
  },
  {
    "operations": {"=": 1},
    "body": "map.cfg.=(cfg)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cfg"]
  },
  {
    "operations": {},
    "body": "map.function.parameter.params",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "params",
      "function",
      "parameter"
    ]
  },
  {
    "operations": {},
    "body": "p.value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "last": 1
    },
    "body": "map.function.parameter.params->last().<>(p)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "params",
      "function",
      "parameter"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "map.needsReturnValue.=(true)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["needsReturnValue"]
  },
  {
    "operations": {},
    "body": "genData.parameterMappings",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["parameterMappings"]
  },
  {
    "operations": {"=": 1},
    "body": "map.cfg.=(cfg)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cfg"]
  },
  {
    "operations": {},
    "body": "map.varNamesInFunction",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["varNamesInFunction"]
  },
  {
    "operations": {},
    "body": "name",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "last": 1
    },
    "body": "map.varNamesInFunction->last().<>(name)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["varNamesInFunction"]
  },
  {
    "operations": {},
    "body": "genData.locationLabels",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["locationLabels"]
  },
  {
    "operations": {"=": 1},
    "body": "l.controlFlowLocation.=(cfg.start)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "controlFlowLocation",
      "start"
    ]
  },
  {
    "operations": {"substring": 1},
    "body": "l.name.substring(1, 1)",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "l.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "genData.locationLabels",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["locationLabels"]
  },
  {
    "operations": {
      "size": 1,
      "and": 1,
      "=": 2
    },
    "body": "l.controlFlowLocation.=(loc).and(loc.outgoing->size().=(1))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "outgoing",
      "controlFlowLocation"
    ]
  },
  {
    "operations": {
      "size": 1,
      "and": 1,
      "=": 1,
      ">": 1
    },
    "body": "l.controlFlowLocation.=(loc).and(loc.outgoing->size().>(1))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "outgoing",
      "controlFlowLocation"
    ]
  },
  {
    "operations": {},
    "body": "l.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "loc.outgoing",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["outgoing"]
  },
  {
    "operations": {},
    "body": "t",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "t",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "t",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "l.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "loc.outgoing",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["outgoing"]
  },
  {
    "operations": {},
    "body": "t",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "t",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "t",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData.locationLabels",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["locationLabels"]
  },
  {
    "operations": {"=": 1},
    "body": "l.controlFlowLocation.=(t.target)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "controlFlowLocation",
      "target"
    ]
  },
  {
    "operations": {},
    "body": "l.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "genData.phiMappings",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["phiMappings"]
  },
  {
    "operations": {"=": 1},
    "body": "mapping.transition.=(t)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["transition"]
  },
  {
    "operations": {},
    "body": "mapping.phi",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["phi"]
  },
  {
    "operations": {},
    "body": "phi.result",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["result"]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "phi.cases",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cases"]
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "case.label.equalsIgnoreCase(mapping.blockLabelToUse)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "blockLabelToUse",
      "label"
    ]
  },
  {
    "operations": {},
    "body": "case.value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "t.instruction",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["instruction"]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "t.source.buffer.addressValuePairs->collect(temp1 : AddressValuePair | temp1.address)->collect(temp2 : Parameter | temp2.value)->collect(temp3 : Value | valueToString(temp3,genData))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 5,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "addressValuePairs",
      "buffer",
      "source",
      "value",
      "address"
    ]
  },
  {
    "operations": {},
    "body": "t.source.buffer.addressValuePairs->collect(temp1 : AddressValuePair | temp1.value)->collect(temp2 : Parameter | temp2.value)->collect(temp3 : Value | valueToString(temp3,genData))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 5,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "addressValuePairs",
      "buffer",
      "value",
      "source",
      "value"
    ]
  },
  {
    "operations": {},
    "body": "e",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"+": 7},
    "body": "addressToString(e.result,genData).+(' = ').+(valueToString(e.value1,genData)).+(' ').+(arithmeticOp(e.operation)).+(' ').+(valueToString(e.value2,genData)).+(';')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 7,
      "TemplateInvocationSpec": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 4,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "value2",
      "value1",
      "operation",
      "result"
    ]
  },
  {
    "operations": {
      "or": 3,
      "equalsIgnoreCase": 8
    },
    "body": "if s.equalsIgnoreCase('add') then '+' else if s.equalsIgnoreCase('sub').or(s.equalsIgnoreCase('ashr')) then '-' else if s.equalsIgnoreCase('mul') then '*' else if s.equalsIgnoreCase('udiv').or(s.equalsIgnoreCase('sdiv')) then '/' else if s.equalsIgnoreCase('urem').or(s.equalsIgnoreCase('srem')) then '%' else '// UNHANDLED' endif endif endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 11,
      "VariableExpImpl": 8,
      "StringLiteralExpImpl": 14,
      "IfExpImpl": 5
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "e.result",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["result"]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "e.value1",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value1"]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "e.operation",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["operation"]
  },
  {
    "operations": {},
    "body": "e.value2",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value2"]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "equalsIgnoreCase": 6
    },
    "body": "if s.equalsIgnoreCase('shl') then '<<' else if s.equalsIgnoreCase('lshr').or(s.equalsIgnoreCase('ashr')) then '>>' else if s.equalsIgnoreCase('and') then '&' else if s.equalsIgnoreCase('or') then '|' else if s.equalsIgnoreCase('xor') then '^' else '// UNHANDLED' endif endif endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 7,
      "StringLiteralExpImpl": 12,
      "IfExpImpl": 5
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "e.result",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["result"]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "e.value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "e",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"+": 8},
    "body": "'getelementptr('.+(dereferencedPtrSize(e.aggerate.type)).+(', ').+(valueToString(e.aggerate.value,genData)).+(', ').+(offset(e,1,genData)).+(', ').+(addressToString(e.result,genData)).+(');')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 8,
      "TemplateInvocationSpec": 2,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 5,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "type",
      "aggerate",
      "result",
      "value"
    ]
  },
  {
    "operations": {
      "at": 1,
      "oclIsTypeOf": 1,
      "ancestors": 1,
      "oclAsType": 2
    },
    "body": "if e.oclIsTypeOf(llvm::AddressUse) then structSize(e.oclAsType(llvm::AddressUse).address.ancestors()->at(1).oclAsType(llvm::TypeDefinition).struct) else typeSize(e) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "struct",
      "address"
    ]
  },
  {
    "operations": {
      "at": 1,
      "oclIsTypeOf": 1,
      "ancestors": 1,
      "oclAsType": 2
    },
    "body": "if e.oclIsTypeOf(llvm::AddressUse) then e.oclAsType(llvm::AddressUse).address.ancestors()->at(1).oclAsType(llvm::TypeDefinition).struct else e endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 5,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "struct",
      "address"
    ]
  },
  {
    "operations": {
      "at": 2,
      "size": 1,
      "+": 6,
      "<": 1
    },
    "body": "if index.<(e.indizies->size()) then index(e.indizies->at(index),genData).+(' * ').+(dereferencedPtrSize(e.aggerate.type)).+(subOffset(e,dereferencedPtrType(e.aggerate.type),index.+(1),genData)) else index(e.indizies->at(index),genData).+(' * ').+(dereferencedPtrSize(e.aggerate.type)) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 14,
      "OperationCallExpImpl": 10,
      "QueryInvocationSpec": 6,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 9
    },
    "properties": [
      "type",
      "aggerate",
      "indizies"
    ]
  },
  {
    "operations": {
      "at": 1,
      "oclIsTypeOf": 4,
      "ancestors": 1,
      "oclAsType": 6
    },
    "body": "if o.oclIsTypeOf(llvm::Predefined) then '0' else if o.oclIsTypeOf(llvm::Array) then arrayOffset(o.oclAsType(llvm::Array),e,index,genData) else if o.oclIsTypeOf(llvm::AddressUse) then if isPointer(o.oclAsType(llvm::AddressUse)) then ' PTR' else subOffset(e,o.oclAsType(llvm::AddressUse).address.ancestors()->at(1).oclAsType(llvm::TypeDefinition).struct.oclAsType(ecore::EObject),index,genData) endif else if o.oclIsTypeOf(llvm::Structure) then structOffset(o.oclAsType(llvm::Structure),e,index,genData) else 'ERROR IN OFFSET CALCULATION' endif endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 17,
      "QueryInvocationSpec": 4,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 10,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 5,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "struct",
      "address"
    ]
  },
  {
    "operations": {
      "at": 2,
      "size": 1,
      "+": 8,
      "<": 1
    },
    "body": "if index.<(e.indizies->size()) then ' + '.+(index(e.indizies->at(index),genData)).+(' * ').+(typeSize(a.type)).+(subOffset(e,a.type,index.+(1),genData)) else ' + '.+(index(e.indizies->at(index),genData)).+(' * ').+(typeSize(a.type)) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 14,
      "OperationCallExpImpl": 12,
      "QueryInvocationSpec": 5,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "type",
      "indizies"
    ]
  },
  {
    "operations": {
      "at": 3,
      "size": 1,
      "replace": 1,
      "+": 21,
      "<": 1,
      "indexOf": 3
    },
    "body": "if index.<(e.indizies->size()) then s.types->iterate(t : EObject; result : String = '' | result.+(' + (').+(index(e.indizies->at(index),genData)).+(' >= ').+(s.types->indexOf(t)).+(' -> 1 : 0) * ').+(typeSize(t)).+(' + ((').+(index(e.indizies->at(index),genData)).+(' == (').+(s.types->indexOf(t)).+('-1) -> 1 : 0)').+(' * (').+(subOffset(e,t,index.+(1),genData).replace(' \\+ ', '')).+('))')) else s.types->iterate(t : EObject; result : String = '' | result.+(' + (').+(index(e.indizies->at(index),genData)).+(' >= ').+(s.types->indexOf(t)).+(' -> 1 : 0) * ').+(typeSize(t))) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 27,
      "OperationCallExpImpl": 30,
      "QueryInvocationSpec": 6,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 15,
      "IterateExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 9
    },
    "properties": [
      "indizies",
      "types"
    ]
  },
  {
    "operations": {
      "oclIsTypeOf": 2,
      "toString": 1,
      "oclAsType": 2,
      "-": 1
    },
    "body": "if e.oclIsTypeOf(llvm::Constant) then e.oclAsType(llvm::Constant).value.toString() else if e.oclIsTypeOf(llvm::AddressUse) then addressToString(e.oclAsType(llvm::AddressUse).address,genData) else 1.-() endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 6,
      "TemplateInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 4,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "address",
      "value"
    ]
  },
  {
    "operations": {},
    "body": "e.address.value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "address",
      "value"
    ]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "e.value.value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "value",
      "value"
    ]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "e.newValue.value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "value",
      "newValue"
    ]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "e.result",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["result"]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "e.result",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["result"]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "e.address.value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "address",
      "value"
    ]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "e",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "+": 75,
      "equalsIgnoreCase": 11
    },
    "body": "if c.operation.equalsIgnoreCase('xchg') then valueToString(c.address.value,genData).+(' = ').+(valueToString(c.argument.value,genData)).+(';') else if c.operation.equalsIgnoreCase('add') then valueToString(c.address.value,genData).+(' = ').+(valueToString(c.address.value,genData)).+(' + ').+(valueToString(c.argument.value,genData)).+(';') else if c.operation.equalsIgnoreCase('sub') then valueToString(c.address.value,genData).+(' = ').+(valueToString(c.address.value,genData)).+(' - ').+(valueToString(c.argument.value,genData)).+(';') else if c.operation.equalsIgnoreCase('and') then valueToString(c.address.value,genData).+(' = ').+(valueToString(c.address.value,genData)).+(' & ').+(valueToString(c.argument.value,genData)).+(';') else if c.operation.equalsIgnoreCase('nand') then valueToString(c.address.value,genData).+(' = ').+('!(').+(valueToString(c.address.value,genData)).+(' & ').+(valueToString(c.argument.value,genData)).+(')').+(';') else if c.operation.equalsIgnoreCase('or') then valueToString(c.address.value,genData).+(' = ').+('(').+(valueToString(c.address.value,genData)).+(' | ').+(valueToString(c.argument.value,genData)).+(')').+(';') else if c.operation.equalsIgnoreCase('xor') then valueToString(c.address.value,genData).+(' = ').+('(').+(valueToString(c.address.value,genData)).+(' ^ ').+(valueToString(c.argument.value,genData)).+(')').+(';') else if c.operation.equalsIgnoreCase('max') then valueToString(c.address.value,genData).+(' = ').+(valueToString(c.address.value,genData)).+('>').+(valueToString(c.argument.value,genData)).+(' -> ').+(valueToString(c.address.value,genData)).+(' : ').+(valueToString(c.argument.value,genData)).+(';') else if c.operation.equalsIgnoreCase('min') then valueToString(c.address.value,genData).+(' = ').+(valueToString(c.address.value,genData)).+('<').+(valueToString(c.argument.value,genData)).+(' -> ').+(valueToString(c.address.value,genData)).+(' : ').+(valueToString(c.argument.value,genData)).+(';') else if c.operation.equalsIgnoreCase('umax') then valueToString(c.address.value,genData).+(' = ').+(valueToString(c.address.value,genData)).+('>').+(valueToString(c.argument.value,genData)).+(' -> ').+(valueToString(c.address.value,genData)).+(' : ').+(valueToString(c.argument.value,genData)).+(' TODO, umax;') else if c.operation.equalsIgnoreCase('umin') then valueToString(c.address.value,genData).+(' = ').+(valueToString(c.address.value,genData)).+('<').+(valueToString(c.argument.value,genData)).+(' -> ').+(valueToString(c.address.value,genData)).+(' : ').+(valueToString(c.argument.value,genData)).+(' TODO umin;') else 'ERROR: unknown operation' endif endif endif endif endif endif endif endif endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 86,
      "VariableExpImpl": 91,
      "TemplateInvocationSpec": 40,
      "StringLiteralExpImpl": 58,
      "IfExpImpl": 11,
      "PropertyCallExpImpl": 91
    },
    "properties": [
      "operation",
      "argument",
      "address",
      "value"
    ]
  },
  {
    "operations": {},
    "body": "e.address.value",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "address",
      "value"
    ]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "e.result",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["result"]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "e",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "e.pList",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["pList"]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "e",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "valueToString(c.function.value,genData)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "function",
      "value"
    ]
  },
  {
    "operations": {
      "size": 1,
      "followingSiblings": 1,
      "concat": 2,
      "+": 1,
      ">": 1
    },
    "body": "list.params->iterate(p : Parameter; result : String = '' | if p.followingSiblings()->size().>(0) then result.concat(valueToString(p.value,genData).+(', ')) else result.concat(valueToString(p.value,genData)) endif)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 8,
      "TemplateInvocationSpec": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "IterateExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "params",
      "value"
    ]
  },
  {
    "operations": {
      "not": 2,
      "oclIsUndefined": 2,
      "size": 2,
      "and": 2,
      "+": 1,
      "=": 1,
      ">": 1
    },
    "body": "if c.pList.params->size().>(0).and(c.result.oclIsUndefined().not()) then ', '.+(addressToString(c.result,genData)) else if c.pList.params->size().=(0).and(c.result.oclIsUndefined().not()) then addressToString(c.result,genData) else '' endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 11,
      "VariableExpImpl": 8,
      "TemplateInvocationSpec": 2,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "params",
      "pList",
      "result"
    ]
  },
  {
    "operations": {},
    "body": "e.type",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "e.result",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["result"]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "e",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"+": 7},
    "body": "addressToString(e.result,genData).+(' = (').+(valueToString(e.condition.value,genData)).+(' -> ').+(valueToString(e.trueValue.value,genData)).+(' : ').+(valueToString(e.elseValue.value,genData)).+(');')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 8,
      "OperationCallExpImpl": 7,
      "TemplateInvocationSpec": 4,
      "StringLiteralExpImpl": 4,
      "PropertyCallExpImpl": 7
    },
    "properties": [
      "result",
      "condition",
      "elseValue",
      "value",
      "trueValue"
    ]
  },
  {
    "operations": {},
    "body": "e",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "genData",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"+": 7},
    "body": "addressToString(e.result,genData).+(' = (').+(valueToString(e.operand1,genData)).+(' ').+(compareOp(e.cond)).+(' ').+(valueToString(e.operand2,genData)).+(');')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 7,
      "TemplateInvocationSpec": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 4,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "cond",
      "operand1",
      "operand2",
      "result"
    ]
  },
  {
    "operations": {
      "or": 4,
      "equalsIgnoreCase": 10
    },
    "body": "if s.equalsIgnoreCase('eq') then '==' else if s.equalsIgnoreCase('ne') then '!=' else if s.equalsIgnoreCase('ugt').or(s.equalsIgnoreCase('sgt')) then '>' else if s.equalsIgnoreCase('uge').or(s.equalsIgnoreCase('sge')) then '>=' else if s.equalsIgnoreCase('ult').or(s.equalsIgnoreCase('slt')) then '<' else if s.equalsIgnoreCase('ule').or(s.equalsIgnoreCase('sle')) then '<=' else '// UNHANDLED' endif endif endif endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 14,
      "VariableExpImpl": 10,
      "StringLiteralExpImpl": 17,
      "IfExpImpl": 6
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getTypeName(e.value.type,genData)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "type",
      "value"
    ]
  },
  {
    "operations": {},
    "body": "e.value.value",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "value",
      "value"
    ]
  },
  {
    "operations": {},
    "body": "genData",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "oclIsTypeOf": 3,
      "toString": 1,
      "+": 6,
      "equalsIgnoreCase": 1,
      "oclAsType": 3
    },
    "body": "if s.equalsIgnoreCase('void') then 'skip;' else if v.oclIsTypeOf(llvm::AddressUse) then 'returnvalue = '.+(addressToString(v.oclAsType(llvm::AddressUse).address,genData)).+(';') else if v.oclIsTypeOf(llvm::Constant) then 'returnvalue = '.+(v.oclAsType(llvm::Constant).value.toString()).+(';') else if v.oclIsTypeOf(llvm::PrimitiveValue) then 'returnvalue = '.+(v.oclAsType(llvm::PrimitiveValue).value).+(';') else '// UNHANDLED' endif endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 14,
      "VariableExpImpl": 8,
      "TemplateInvocationSpec": 1,
      "TypeExpImpl": 6,
      "StringLiteralExpImpl": 9,
      "IfExpImpl": 4,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "address",
      "value",
      "value"
    ]
  },
  {
    "operations": {},
    "body": "genData.localVariables.variables",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "localVariables",
      "variables"
    ]
  },
  {
    "operations": {},
    "body": "am.adresses",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["adresses"]
  },
  {
    "operations": {"=": 1},
    "body": "address.=(a)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "am.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "v.oclIsTypeOf(llvm::PrimitiveValue)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "v.oclIsTypeOf(llvm::Constant)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "v.oclAsType(llvm::Constant).value",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "v.oclIsTypeOf(llvm::AddressUse)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "genData.localVariables.variables",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "localVariables",
      "variables"
    ]
  },
  {
    "operations": {},
    "body": "am.adresses",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["adresses"]
  },
  {
    "operations": {
      "oclAsType": 1,
      "=": 1
    },
    "body": "v.oclAsType(llvm::AddressUse).address.=(a)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["address"]
  },
  {
    "operations": {},
    "body": "am.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "v.oclAsType(llvm::PrimitiveValue).value",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {},
    "body": "gD.constraints",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["constraints"]
  },
  {
    "operations": {"=": 1},
    "body": "t.=(cm.transition)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["transition"]
  },
  {
    "operations": {},
    "body": "cm.condition",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["condition"]
  },
  {
    "operations": {
      "oclIsTypeOf": 3,
      "+": 3,
      "equalsIgnoreCase": 2,
      "oclAsType": 5
    },
    "body": "if o.oclIsTypeOf(llvm::Predefined) then if o.oclAsType(llvm::Predefined).type.equalsIgnoreCase('void') then 'void' else if o.oclAsType(llvm::Predefined).type.equalsIgnoreCase('i1') then 'bool' else 'int' endif endif else if o.oclIsTypeOf(llvm::AddressUse) then addressUseName(o.oclAsType(llvm::AddressUse),genData) else if o.oclIsTypeOf(llvm::Array) then 'Array_'.+(arraySize(o.oclAsType(llvm::Array))).+('x').+(o.oclAsType(llvm::Array).length) else '// UNHANDLED' endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 9,
      "OperationCallExpImpl": 13,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 8,
      "TypeExpImpl": 8,
      "IfExpImpl": 5,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "type",
      "length"
    ]
  },
  {
    "operations": {},
    "body": "if isPointer(e) then 'int' else structName(e.address,genData) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["address"]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1
    },
    "body": "e.pointer.oclIsUndefined().not()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["pointer"]
  },
  {
    "operations": {
      "round": 2,
      "*": 1
    },
    "body": "e.length.round().*(typeSize(e.type)).round()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "type",
      "length"
    ]
  },
  {
    "operations": {
      "oclIsTypeOf": 3,
      "oclAsType": 2,
      "-": 1
    },
    "body": "if e.oclIsTypeOf(llvm::Predefined) then 1 else if e.oclIsTypeOf(llvm::Array) then arraySize(e.oclAsType(llvm::Array)) else if e.oclIsTypeOf(llvm::AddressUse) then adressUseSize(e.oclAsType(llvm::AddressUse)) else 1.-() endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 6,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 2,
      "TypeExpImpl": 5,
      "IfExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {
      "at": 1,
      "ancestors": 1,
      "-": 1,
      "oclAsType": 1
    },
    "body": "if isPointer(e) then 1 else if isStructure(e) then structSize(e.address.ancestors()->at(1).oclAsType(llvm::TypeDefinition).struct) else 1.-() endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 3,
      "IntegerLiteralExpImpl": 3,
      "TypeExpImpl": 1,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "struct",
      "address"
    ]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "at": 2,
      "oclIsTypeOf": 1,
      "ancestors": 2
    },
    "body": "if e.address.ancestors()->at(1).oclIsUndefined().not() then e.address.ancestors()->at(1).oclIsTypeOf(llvm::TypeDefinition) else false endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 2,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["address"]
  },
  {
    "operations": {"+": 1},
    "body": "e.types->iterate(o : EObject; size : Integer = 0 | size.+(typeSize(o)))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "IterateExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["types"]
  },
  {
    "operations": {},
    "body": "addressToString(e,genData)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "func.equalsIgnoreCase('getelementptr')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "func.equalsIgnoreCase('cas')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  }
]
