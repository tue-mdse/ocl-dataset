[
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aGenClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"asSequence": 1},
    "body": "formatImport(importValue(aGenClass)->asSequence())",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aString",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "trim": 1,
      "asOrderedSet": 2,
      "union": 1,
      "=": 1
    },
    "body": "fieldsType(aGenClass)->union(operationsType(aGenClass))->asOrderedSet()->reject(anETypedElement : ETypedElement | genPackage(anETypedElement.eType).trim().size().=(0))->collect(temp1 : ETypedElement | importQualifiedName(temp1))->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 6,
      "TemplateInvocationSpec": 2,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["eType"]
  },
  {
    "operations": {},
    "body": "anETypedElement.eType",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["eType"]
  },
  {
    "operations": {"asOrderedSet": 1},
    "body": "aGenClass.ecoreClass.eStructuralFeatures->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ecoreClass",
      "eStructuralFeatures"
    ]
  },
  {
    "operations": {
      "filter": 2,
      "size": 1,
      "asOrderedSet": 3,
      "union": 1,
      ">": 1
    },
    "body": "let operations : OrderedSet(EOperation) = aGenClass.ecoreClass.eOperations in if operations->size().>(0) then operations->filter(ecore::ETypedElement)->union(operations->collect(temp1 : EOperation | temp1.eParameters)->filter(ecore::ETypedElement)->asOrderedSet())->asOrderedSet() else operations->collect(temp2 : EOperation | temp2.eParameters)->asOrderedSet() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 8,
      "LetExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "eOperations",
      "ecoreClass",
      "eParameters"
    ]
  }
]
