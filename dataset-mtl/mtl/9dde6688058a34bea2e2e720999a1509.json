[
  {
    "operations": {
      "ancestors": 1,
      "=": 1
    },
    "body": "self.ancestors(uml::Package)->exists(p : Package | p.qualifiedName.=(getSourcePackageName(self)))",
    "type": "TemplateGuard",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualifiedName"]
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "self.oclIsTypeOf(uml::Interface)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "and": 1,
      "=": 1
    },
    "body": "self.oclIsTypeOf(uml::Class).and(self.visibility.=(uml::VisibilityKind::private))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "self.oclAsType(uml::Class)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "and": 1,
      "=": 1
    },
    "body": "self.oclIsTypeOf(uml::Class).and(self.visibility.=(uml::VisibilityKind::public))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "self.oclAsType(uml::Class)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "self.oclAsType(uml::Class)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"eContainer": 1},
    "body": "getCharset(e.eContainer(uml::Model))",
    "type": "FileCharset",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "cFileName(e)",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "e",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"eContainer": 1},
    "body": "getCharset(e.eContainer(uml::Model))",
    "type": "FileCharset",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "hFileName(e)",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "e",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "if getAnnotation(e,'PROJECT_CHARSET')->notEmpty() then getAnnotation(e,'PROJECT_CHARSET')->any(temp1 : String | true) else 'UTF-8' endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  }
]
