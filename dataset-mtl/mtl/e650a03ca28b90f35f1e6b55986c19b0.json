[
  {
    "operations": {
      "union": 1,
      "asSequence": 2
    },
    "body": "class.ownedAttribute->asSequence()->union(getOppositeAttributes(class))->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedAttribute"]
  },
  {
    "operations": {
      "union": 1,
      "asSequence": 1
    },
    "body": "class.ownedAttribute->asSequence()->union(getOppositeAttributes(class,mustBeNavigable))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedAttribute"]
  },
  {
    "operations": {},
    "body": "getOppositeAttributes(class,true)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "not": 1,
      "or": 1,
      "and": 1,
      "notEmpty": 1,
      "getAssociations": 2,
      "isNavigable": 1
    },
    "body": "if class.getAssociations()->notEmpty() then class.getAssociations()->collect(temp1 : Association | temp1.memberEnd)->select(prop : Property | prop.type.<>(class).and(mustBeNavigable.not().or(prop.isNavigable()))) else Set {} endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 8,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "type",
      "memberEnd"
    ]
  },
  {
    "operations": {
      "filter": 1,
      "including": 1,
      "asSet": 1,
      "getAssociations": 1,
      "isNavigable": 1
    },
    "body": "interface.getAssociations()->filter(uml::Association)->collect(temp1 : Association | oppositeAttributeOf(temp1,interface))->select(temp2 : Property | temp2.isNavigable())->including(interface.ownedAttribute)->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedAttribute"]
  },
  {
    "operations": {
      "filter": 1,
      "sep": 1
    },
    "body": "getRealParameters(operation)->filter(uml::Parameter)->collect(temp1 : Parameter | genDeclare(temp1))->sep(', ')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "parameter",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "parameter.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "self.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "self.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "filter": 1,
      "sep": 1
    },
    "body": "getRealParameters(operation)->filter(uml::Parameter)->collect(temp1 : Parameter | genRawDeclare(temp1))->sep(', ')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "parameter",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"toLowerFirst": 1},
    "body": "self.name.toLowerFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "self.type.=(null)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"returnResult": 1},
    "body": "operation.returnResult()->collect(temp1 : Parameter | convertToJavaType(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"sep": 1},
    "body": "getRealParameters(operation)->collect(temp1 : Parameter | temp1.name)->sep(', ')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "namedElement",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "self.ownedComment->collect(temp1 : Comment | temp1.body)->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "self.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "operation",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getRealParameters(operation)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "param.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "param.ownedComment->collect(temp1 : Comment | temp1.body)->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "self.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {"<>": 1},
    "body": "self.type.<>(null)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "self.type.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "ownedComment",
      "body",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "self.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "self.ownedComment->collect(temp1 : Comment | temp1.body)->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "self.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "class.general->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["general"]
  },
  {
    "operations": {},
    "body": "class.general->collect(temp1 : Classifier | temp1.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "general",
      "name"
    ]
  },
  {
    "operations": {"toLower": 1},
    "body": "toStandardNotation(_package.name).toLower()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toString": 1,
      "concat": 2,
      "notEmpty": 1,
      "reverse": 1,
      "sep": 1
    },
    "body": "packages->collect(temp1 : Package | temp1.name)->reverse()->sep('.')->toString().concat(if packages->notEmpty() then '.' else '' endif).concat(namedElement.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 4,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  }
]
