[
  {
    "operations": {"not": 1},
    "body": "isArray(aClassifier).not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "orderedUniqueMultiplicityElements(aClassifier)->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aClassifier",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClassifier",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "notOrderedNotUniqueMultiplicityElements(aClassifier)->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aClassifier",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClassifier",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "notOrderedUniqueMultiplicityElements(aClassifier)->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aClassifier",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClassifier",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "orderedNotUniqueMultiplicityElements(aClassifier)->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aClassifier",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClassifier",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "oclIsKindOf": 1,
      "and": 1,
      "oclAsType": 1,
      ">": 1
    },
    "body": "aClassifier.oclIsKindOf(uml::Class).and(getTypeList(aClassifier.oclAsType(uml::Class))->size().>(0))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "oclIsKindOf": 1,
      "and": 1,
      "oclAsType": 1,
      ">": 1
    },
    "body": "aClassifier.oclIsKindOf(uml::Interface).and(getTypeList(aClassifier.oclAsType(uml::Interface))->size().>(0))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "getTypeList(aClassifier.oclAsType(uml::Interface))",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "equalsIgnoreCase": 1
    },
    "body": "importValue(aType).equalsIgnoreCase('').not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "strcmp": 1,
      "<>": 1
    },
    "body": "genPackagePath(aType).strcmp(genPackagePath(aClassifier)).<>(0)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "TemplateInvocationSpec": 2,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aType",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "aType.name.=('Date')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "getTypeList(aClassifier.oclAsType(uml::Class))",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "equalsIgnoreCase": 1
    },
    "body": "importValue(aType).equalsIgnoreCase('').not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "strcmp": 1,
      "<>": 1
    },
    "body": "genPackagePath(aType).strcmp(genPackagePath(aClassifier)).<>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 2,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aType",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "aType.name.=('Date')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getProperty": 1,
      "+": 2,
      "equalsIgnoreCase": 1
    },
    "body": "if ''.equalsIgnoreCase(genPackagePath(aType)) then self.getProperty(aType.name) else genPackagePath(aType).+('.').+(aType.name) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 4,
      "TemplateInvocationSpec": 2,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "or": 1,
      "and": 2,
      "=": 1,
      "-": 1,
      ">": 1
    },
    "body": "multiplicityElements(aClassifier)->select(elem : MultiplicityElement | elem.upper.=(1.-()).or(elem.upper.>(1)).and(elem.isOrdered).and(elem.isUnique))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 6,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 2,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "isOrdered",
      "isUnique",
      "upper"
    ]
  },
  {
    "operations": {
      "not": 1,
      "or": 1,
      "and": 2,
      "=": 1,
      "-": 1,
      ">": 1
    },
    "body": "multiplicityElements(aClassifier)->select(elem : MultiplicityElement | elem.upper.=(1.-()).or(elem.upper.>(1)).and(elem.isOrdered).and(elem.isUnique.not()))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 2,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "isOrdered",
      "isUnique",
      "upper"
    ]
  },
  {
    "operations": {
      "not": 1,
      "or": 1,
      "and": 2,
      "-": 1,
      "=": 1,
      ">": 1
    },
    "body": "multiplicityElements(aClassifier)->select(elem : MultiplicityElement | elem.upper.=(1.-()).or(elem.upper.>(1)).and(elem.isOrdered.not()).and(elem.isUnique))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 2,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "isOrdered",
      "isUnique",
      "upper"
    ]
  },
  {
    "operations": {
      "not": 2,
      "or": 1,
      "and": 2,
      "=": 1,
      "-": 1,
      ">": 1
    },
    "body": "multiplicityElements(aClassifier)->select(elem : MultiplicityElement | elem.upper.=(1.-()).or(elem.upper.>(1)).and(elem.isOrdered.not()).and(elem.isUnique.not()))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 8,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 2,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "isOrdered",
      "isUnique",
      "upper"
    ]
  },
  {
    "operations": {
      "filter": 2,
      "union": 2,
      "oclAsType": 2,
      "getAssociations": 1
    },
    "body": "self.ownedMember->filter(uml::Operation)->collect(temp1 : Operation | temp1.ownedParameter)->collect(temp2 : Parameter | temp2.oclAsType(uml::MultiplicityElement))->union(self.ownedMember->filter(uml::Property)->collect(temp3 : Property | temp3.oclAsType(uml::MultiplicityElement)))->union(self.getAssociations()->collect(temp4 : Association | temp4.navigableOwnedEnd))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 7,
      "TypeExpImpl": 4,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "navigableOwnedEnd",
      "ownedMember",
      "ownedParameter"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "getProperty": 2,
      "oclIsUndefined": 1,
      "size": 1,
      "and": 1,
      "+": 2,
      ">": 1
    },
    "body": "self.getProperty('java.typeconversion.'.+(self.name)).oclIsUndefined().not().and(self.getProperty('java.typeconversion.'.+(self.name)).size().>(0))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 9,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aType",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "getProperty": 1,
      "+": 1
    },
    "body": "self.getProperty('java.typeconversion.'.+(self.name))",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "including": 1,
      "oclIsUndefined": 2,
      "size": 1,
      "asOrderedSet": 2,
      ">": 1,
      "first": 1,
      "asSequence": 2
    },
    "body": "if getGeneralTypes(aClass)->size().>(0) then merge(merge(merge(merge(merge(Sequence {},getOwnedAttributesTypeList(aClass)),getAssociationsTypeList(aClass)),getOwnedOperationsParametersTypeList(aClass)),getOwnedOperationsExceptionsTypeList(aClass)),getNestedClassifiersTypeList(aClass))->including(getGeneralTypes(aClass)->first())->reject(temp1 : Type | temp1.oclIsUndefined())->asOrderedSet()->asSequence() else merge(merge(merge(merge(merge(Sequence {},getOwnedAttributesTypeList(aClass)),getAssociationsTypeList(aClass)),getOwnedOperationsParametersTypeList(aClass)),getOwnedOperationsExceptionsTypeList(aClass)),getNestedClassifiersTypeList(aClass))->reject(temp2 : Type | temp2.oclIsUndefined())->asOrderedSet()->asSequence() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 10,
      "VariableExpImpl": 14,
      "QueryInvocationSpec": 22,
      "IntegerLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "if self.ownedAttribute->size().>(0) then self.ownedAttribute->collect(temp1 : Property | temp1.type) else Sequence {} endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "ownedAttribute",
      "type"
    ]
  },
  {
    "operations": {
      "size": 2,
      "and": 1,
      "getAssociations": 3,
      ">": 2,
      "asSequence": 1
    },
    "body": "if self.getAssociations()->size().>(0).and(self.getAssociations()->collect(temp1 : Association | temp1.navigableOwnedEnd)->size().>(0)) then self.getAssociations()->collect(temp2 : Association | temp2.navigableOwnedEnd)->collect(temp3 : Property | temp3.type)->asSequence() else Sequence {} endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 9,
      "IntegerLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "navigableOwnedEnd",
      "type"
    ]
  },
  {
    "operations": {
      "size": 2,
      "and": 1,
      ">": 2
    },
    "body": "if self.ownedOperation->size().>(0).and(self.ownedOperation->collect(temp1 : Operation | temp1.ownedParameter)->size().>(0)) then self.ownedOperation->collect(temp2 : Operation | temp2.ownedParameter)->collect(temp3 : Parameter | temp3.type) else Sequence {} endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 6,
      "IntegerLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "ownedOperation",
      "type",
      "ownedParameter"
    ]
  },
  {
    "operations": {
      "size": 2,
      "and": 1,
      ">": 2
    },
    "body": "if self.ownedOperation->size().>(0).and(self.ownedOperation->collect(temp1 : Operation | temp1.raisedException)->size().>(0)) then self.ownedOperation->collect(temp2 : Operation | temp2.raisedException) else Sequence {} endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 5,
      "IntegerLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "raisedException",
      "ownedOperation"
    ]
  },
  {
    "operations": {
      "filter": 2,
      "size": 2,
      "and": 1,
      ">": 2
    },
    "body": "if self.nestedClassifier->size().>(0).and(self.nestedClassifier->filter(uml::Class)->size().>(0)) then self.nestedClassifier->filter(uml::Class)->collect(temp1 : Class | getTypeList(temp1)) else Sequence {} endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 2,
      "TypeExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": ["nestedClassifier"]
  },
  {
    "operations": {
      "not": 2,
      "size": 2,
      "union": 1,
      "=": 2
    },
    "body": "if firstSequence->size().=(0).not() then firstSequence->union(secondSequence) else if secondSequence->size().=(0).not() then secondSequence else Sequence {} endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 7,
      "IntegerLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "including": 1,
      "size": 1,
      "asOrderedSet": 2,
      ">": 1,
      "first": 1,
      "asSequence": 2
    },
    "body": "if getGeneralTypes(anInterface)->size().>(0) then merge(merge(merge(merge(Sequence {},getOwnedAttributesTypeList(anInterface)),getAssociationsTypeList(anInterface)),getOwnedOperationsParametersTypeList(anInterface)),getNestedClassifiersTypeList(anInterface))->including(getGeneralTypes(anInterface)->first())->asOrderedSet()->asSequence() else merge(merge(merge(merge(Sequence {},getOwnedAttributesTypeList(anInterface)),getAssociationsTypeList(anInterface)),getOwnedOperationsParametersTypeList(anInterface)),getNestedClassifiersTypeList(anInterface))->asOrderedSet()->asSequence() endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 10,
      "OperationCallExpImpl": 8,
      "QueryInvocationSpec": 18,
      "IntegerLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "if self.ownedAttribute->size().>(0) then self.ownedAttribute->collect(temp1 : Property | temp1.type) else Sequence {} endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "ownedAttribute",
      "type"
    ]
  },
  {
    "operations": {
      "size": 2,
      "and": 1,
      "getAssociations": 3,
      ">": 2,
      "asSequence": 1
    },
    "body": "if self.getAssociations()->size().>(0).and(self.getAssociations()->collect(temp1 : Association | temp1.navigableOwnedEnd)->size().>(0)) then self.getAssociations()->collect(temp2 : Association | temp2.navigableOwnedEnd)->collect(temp3 : Property | temp3.type)->asSequence() else Sequence {} endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 6,
      "IntegerLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "navigableOwnedEnd",
      "type"
    ]
  },
  {
    "operations": {
      "size": 3,
      "and": 2,
      ">": 3
    },
    "body": "if self.ownedOperation->size().>(0).and(self.ownedOperation->collect(temp1 : Operation | temp1.ownedParameter)->size().>(0)).and(self.ownedOperation->collect(temp2 : Operation | temp2.ownedParameter)->collect(temp3 : Parameter | temp3.type)->size().>(0)) then self.ownedOperation->collect(temp4 : Operation | temp4.ownedParameter)->collect(temp5 : Parameter | temp5.type) else Sequence {} endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 5,
      "VariableExpImpl": 9,
      "OperationCallExpImpl": 8,
      "IntegerLiteralExpImpl": 3,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 9
    },
    "properties": [
      "type",
      "ownedOperation",
      "ownedParameter"
    ]
  },
  {
    "operations": {
      "filter": 2,
      "size": 1,
      ">": 1,
      "asSequence": 1
    },
    "body": "if self.nestedClassifier->filter(uml::Class)->size().>(0) then self.nestedClassifier->filter(uml::Class)->collect(temp1 : Class | getTypeList(temp1))->asSequence() else Sequence {} endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["nestedClassifier"]
  },
  {
    "operations": {
      "size": 1,
      ">": 1,
      "asSequence": 1
    },
    "body": "if self.general->size().>(0) then self.general->asSequence() else Sequence {} endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["general"]
  }
]
