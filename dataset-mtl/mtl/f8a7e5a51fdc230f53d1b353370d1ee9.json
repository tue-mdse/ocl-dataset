[
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'statesOperation.json'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getAllStateMachine(aModel)->sortedBy(temp1 : StateMachine | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "asm",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "selectByType": 1,
      "and": 1,
      "isEmpty": 2
    },
    "body": "asm.region->collect(temp1 : Region | getAllVertex(temp1))->selectByType(uml::State)->select(temp2 : State | temp2.region->isEmpty().and(Set {temp2.submachine}->isEmpty()))->sortedBy(temp3 : State | temp3.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "region",
      "name",
      "region",
      "submachine"
    ]
  },
  {
    "operations": {},
    "body": "is",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "specState",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "<>": 2,
      "at": 2,
      "and": 1
    },
    "body": "specState->at(4).<>(null).and(specState->at(4).<>(''))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 5,
      "NullLiteralExpImpl": 1,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "specState->at(4)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "specState->at(3)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "otherEscapeText(is.name)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "otherEscapeText(asm.name)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "otherEscapeText(genCommentAuthor(asm))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "otherEscapeText(genCommentVerNo(asm))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "otherEscapeText(specState->at(4))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "otherEscapeText(specState->at(3))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "otherEscapeText(specState->at(4))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "specState->at(5)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "otherEscapeText(specState->at(6))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "otherEscapeText(specState->at(1))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"at": 1},
    "body": "otherEscapeText(specState->at(2))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "and": 1,
      "notEmpty": 1
    },
    "body": "Set {initTransition}->notEmpty().and(isChioce(initTransition.target))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["target"]
  },
  {
    "operations": {},
    "body": "initTransition.target.name",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "target"
    ]
  },
  {
    "operations": {},
    "body": "initTransition.target.name",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "target"
    ]
  },
  {
    "operations": {},
    "body": "otherEscapeText(asm.name)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "otherEscapeText(genCommentAuthor(asm))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "otherEscapeText(genCommentVerNo(asm))",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "otherEscapeText(initTransition.target.name)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "target"
    ]
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "and": 1,
      "=": 1,
      "oclAsType": 1
    },
    "body": "vertex.oclIsTypeOf(uml::Pseudostate).and(vertex.oclAsType(uml::Pseudostate).kind.=(uml::PseudostateKind::choice))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["kind"]
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('com.iauto.mist.spec.m2t.uml2html.util.utils', 'getCommentAuthor(org.eclipse.uml2.uml.StateMachine)', Sequence {asm})",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('com.iauto.mist.spec.m2t.uml2html.util.utils', 'getCommentVersionNum(org.eclipse.uml2.uml.StateMachine)', Sequence {asm})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('com.iauto.mist.spec.common.plugin.util.AtlDataTracker', 'getSingleStateDataByPage(org.eclipse.uml2.uml.State, java.util.List)', Sequence {is, list})",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  }
]
