[
  {
    "operations": {"filter": 1},
    "body": "m.packagedElement->filter(uml::Class)->sortedBy(temp1 : Class | temp1.name)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "packagedElement",
      "name"
    ]
  },
  {
    "operations": {
      "getAssociations": 1,
      "first": 1
    },
    "body": "c.getAssociations()->sortedBy(temp1 : Association | temp1.memberEnd->first().name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "memberEnd"
    ]
  },
  {
    "operations": {"first": 1},
    "body": "a.memberEnd->first()",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["memberEnd"]
  },
  {
    "operations": {
      "<>": 1,
      "and": 1,
      "isNavigable": 1,
      "=": 1
    },
    "body": "v.isNavigable().=(true).and(c.name.<>(v.type.name))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 3,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "isPrincipalClass(v.type.name)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "isPrincipalClass(v.type.name).=(false)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"contains": 1},
    "body": "v.name.contains('[][]')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "v",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "esInterfaz",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "v",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "v",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "p.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "p.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "at": 1,
      "tokenize": 1
    },
    "body": "p.name.tokenize('[][]')->at(1)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "p.upper.=(1)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["upper"]
  },
  {
    "operations": {},
    "body": "p.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "p.type.name",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "=": 1,
      "-": 1
    },
    "body": "p.upper.=(1.-())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["upper"]
  },
  {
    "operations": {},
    "body": "p.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "p.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "p.type.name",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "p.upper.=(1)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["upper"]
  },
  {
    "operations": {},
    "body": "p.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "p.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "=": 1,
      "-": 1
    },
    "body": "p.upper.=(1.-())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["upper"]
  },
  {
    "operations": {},
    "body": "p.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "p.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "esInterfaz",
    "type": "IfExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "esInterfaz",
    "type": "IfExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "p.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "size": 1,
      "substring": 1
    },
    "body": "s.substring(7, s.size())",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"startsWith": 1},
    "body": "s.startsWith('Mundo_')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"getAllAttributes": 1},
    "body": "c.getAllAttributes()->sortedBy(temp1 : Property | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"and": 1},
    "body": "constante.isStatic.and(constante.isReadOnly)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "isReadOnly",
      "isStatic"
    ]
  },
  {
    "operations": {},
    "body": "constante.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "constante.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "at": 1,
      "tokenize": 1
    },
    "body": "constante.name.tokenize('=')->at(1)",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "at": 1,
      "tokenize": 1
    },
    "body": "constante.name.tokenize('=')->at(2)",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "at": 1,
      "tokenize": 1
    },
    "body": "s.tokenize('=')->collect(temp1 : String | temp1.at(0))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "getAllAttributes": 1
    },
    "body": "c.getAllAttributes()->select(p : Property | p.isReadOnly.<>(true))->sortedBy(temp1 : Property | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "isReadOnly",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "atributo.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "atributo.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "atributo.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"getAllAttributes": 1},
    "body": "c.getAllAttributes()->sortedBy(temp1 : Property | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"startsWith": 1},
    "body": "atributo.name.startsWith('btn')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "atributo",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"startsWith": 1},
    "body": "atributo.name.startsWith('lbl')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "atributo",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"startsWith": 1},
    "body": "atributo.name.startsWith('txt')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "atributo",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"startsWith": 1},
    "body": "atributo.name.startsWith('chk')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "atributo",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "atributo",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "getAllAttributes": 1,
      "size": 1,
      "asSet": 1,
      "substring": 1,
      ">": 1
    },
    "body": "c.getAllAttributes()->select(a : Property | a.name.size().>(2))->collect(temp1 : Property | temp1.name.substring(1, 3))->asSet()",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "IntegerLiteralExpImpl": 3,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "atributo.=('btn')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "atributo.=('lbl')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "atributo.=('txt')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "atributo.=('chk')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getModel": 2,
      "<>": 1,
      "getAllAttributes": 1,
      "size": 2,
      "and": 3,
      "excluding": 1,
      "asSet": 1,
      "=": 3,
      "startsWith": 3
    },
    "body": "c.getAllAttributes()->select(a : Property | a.type.name.startsWith('Dialogo').=(false).and(a.type.name.startsWith('Panel').=(false)).and(a.type.name.startsWith('Interfaz').=(false)).and(getClasses(c.getModel())->size().<>(getClasses(c.getModel())->excluding(a.type)->size())))->collect(temp1 : Property | temp1.type.name)->asSet()",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 8,
      "OperationCallExpImpl": 17,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 3,
      "PropertyCallExpImpl": 9,
      "BooleanLiteralExpImpl": 3
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"getModel": 1},
    "body": "c.getModel().name",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "claseMundo",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "and": 1,
      "toLower": 1,
      "=": 1
    },
    "body": "valueOf(c,'layout').<>(null).and(valueOf(c,'layout').toLower().=('border'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "and": 1,
      "toLower": 1,
      "=": 1
    },
    "body": "valueOf(c,'layout').<>(null).and(valueOf(c,'layout').toLower().=('flow'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "toLower": 1,
      "and": 1,
      "=": 1,
      "startsWith": 1
    },
    "body": "c.name.startsWith('Interfaz').or(valueOf(c,'layout').<>(null).and(valueOf(c,'layout').toLower().=('grid')))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 6,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 4,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "atributo.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {
      "size": 1,
      "toUpper": 1,
      "replaceAll": 1,
      "substring": 1
    },
    "body": "camelCaseToUnderscore(atributo.name.substring(4, atributo.name.size()),'_').replaceAll(' ', '_').toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 3,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "size": 1,
      "substring": 1
    },
    "body": "camelCaseToUnderscore(atributo.name.substring(4, atributo.name.size()),' ').toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {"<>": 1},
    "body": "valueOf(atributo,'method').<>(null)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getModel": 1,
      "first": 1,
      "startsWith": 1
    },
    "body": "getClasses(atributo.getModel())->select(c : Class | c.name.startsWith('Interfaz'))->first().name",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "atributo",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'method'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "atributo.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "atributo.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "atributo.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {
      "size": 1,
      "substring": 1
    },
    "body": "atributo.name.substring(4, atributo.name.size())",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "atributo.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "atributo.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "atributo.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {
      "size": 1,
      "substring": 1
    },
    "body": "atributo.name.substring(4, atributo.name.size())",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "atributo.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "atributo.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "atributo.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "atributo.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "atributo.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "atributo.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "atributo.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "atributo.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"getAllOperations": 1},
    "body": "c.getAllOperations()",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toString": 1,
      "equalsIgnoreCase": 1,
      "=": 1,
      "getReturnResult": 1
    },
    "body": "o.getReturnResult().type.name.toString().equalsIgnoreCase('invalid').=(false)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "o.ownedComment->collect(temp1 : Comment | temp1.body)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "o.visibility",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {"returnResult": 1},
    "body": "o.returnResult()->collect(temp1 : Parameter | temp1.type)->collect(temp2 : Type | temp2.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "o.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "excluding": 1,
      "getReturnResult": 1
    },
    "body": "o.ownedParameter->excluding(o.getReturnResult())",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedParameter"]
  },
  {
    "operations": {},
    "body": "param.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "param.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getAssociations": 1,
      "first": 1
    },
    "body": "c.getAssociations()->sortedBy(temp1 : Association | temp1.memberEnd->first().name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "memberEnd"
    ]
  },
  {
    "operations": {"first": 1},
    "body": "a.memberEnd->first()",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["memberEnd"]
  },
  {
    "operations": {
      "not": 1,
      "<>": 1,
      "and": 2,
      "=": 1,
      "isNavigable": 1
    },
    "body": "v.isNavigable().=(true).and(c.name.<>(v.type.name)).and(isPrincipalClass(v.type.name).not())",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 6,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 5,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "v.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "<>": 2,
      "and": 1
    },
    "body": "valueOf(c,'rows').<>(null).and(valueOf(c,'columns').<>(null))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "NullLiteralExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'rows'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'columns'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "getAssociations": 1,
      "first": 1
    },
    "body": "c.getAssociations()->sortedBy(temp1 : Association | temp1.memberEnd->first().name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "memberEnd"
    ]
  },
  {
    "operations": {"first": 1},
    "body": "a.memberEnd->first()",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["memberEnd"]
  },
  {
    "operations": {
      "not": 1,
      "<>": 2,
      "and": 3,
      "=": 1,
      "isNavigable": 1
    },
    "body": "valueOf(a,'position').<>(null).and(v.isNavigable().=(true)).and(c.name.<>(v.type.name)).and(isPrincipalClass(v.type.name).not())",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 8,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 5,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "v.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpper": 1},
    "body": "valueOf(a,'position').toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getAssociations": 1,
      "first": 1
    },
    "body": "c.getAssociations()->sortedBy(temp1 : Association | temp1.memberEnd->first().name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "memberEnd"
    ]
  },
  {
    "operations": {"first": 1},
    "body": "a.memberEnd->first()",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["memberEnd"]
  },
  {
    "operations": {
      "not": 1,
      "<>": 1,
      "and": 2,
      "isNavigable": 1,
      "=": 1
    },
    "body": "v.isNavigable().=(true).and(c.name.<>(v.type.name)).and(isPrincipalClass(v.type.name).not())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 5,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "v.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"getAllAttributes": 1},
    "body": "c.getAllAttributes()->sortedBy(temp1 : Property | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "or": 3,
      "startsWith": 4
    },
    "body": "a.name.startsWith('btn').or(a.name.startsWith('lbl')).or(a.name.startsWith('txt')).or(a.name.startsWith('chk'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 7,
      "StringLiteralExpImpl": 4,
      "PropertyCallExpImpl": 4
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "a.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "<>": 2,
      "and": 1
    },
    "body": "valueOf(c,'rows').<>(null).and(valueOf(c,'columns').<>(null))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "NullLiteralExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'rows'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'columns'",
    "type": "QueryInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"getAllAttributes": 1},
    "body": "c.getAllAttributes()->sortedBy(temp1 : Property | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"<>": 1},
    "body": "valueOf(a,'position').<>(null)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "a.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpper": 1},
    "body": "valueOf(a,'position').toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"getAllAttributes": 1},
    "body": "c.getAllAttributes()->sortedBy(temp1 : Property | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "or": 3,
      "startsWith": 4
    },
    "body": "a.name.startsWith('btn').or(a.name.startsWith('lbl')).or(a.name.startsWith('txt')).or(a.name.startsWith('chk'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 4,
      "StringLiteralExpImpl": 4,
      "PropertyCallExpImpl": 4
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "a.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"contains": 1},
    "body": "s.contains('_')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "s",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "at": 1,
      "tokenize": 1
    },
    "body": "s.tokenize('_')->collect(temp1 : String | temp1.at(1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toInteger": 1,
      "<>": 1
    },
    "body": "if valueOf(m,'nivel').<>(null) then valueOf(m,'nivel').toInteger() else 0 endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "<>": 1,
      "size": 1,
      "and": 2,
      "getAssociations": 1,
      "isNavigable": 1,
      "first": 1
    },
    "body": "c.getAssociations()->collect(temp1 : Association | temp1.memberEnd->first())->select(v : Property | v.isNavigable().and(c.name.<>(v.type.name)).and(isPrincipalClass(v.type.name).not()))->size()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 6,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "name",
      "type",
      "memberEnd"
    ]
  },
  {
    "operations": {
      "or": 3,
      "getAllAttributes": 1,
      "size": 1,
      "startsWith": 4
    },
    "body": "c.getAllAttributes()->select(a : Property | a.name.startsWith('btn').or(a.name.startsWith('lbl')).or(a.name.startsWith('txt')).or(a.name.startsWith('chk')))->size()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 5,
      "StringLiteralExpImpl": 4,
      "PropertyCallExpImpl": 4
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getEAnnotation": 1,
      "=": 1
    },
    "body": "if hasProperty(m,p) then m.getEAnnotation('genmymodel').details->any(temp1 : EStringToStringMapEntry | temp1.key.=(p)).value else null endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 5,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "value",
      "details",
      "key"
    ]
  },
  {
    "operations": {
      "getEAnnotation": 1,
      "=": 1
    },
    "body": "m.getEAnnotation('genmymodel').details->exists(temp1 : EStringToStringMapEntry | temp1.key.=(p))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "details",
      "key"
    ]
  },
  {
    "operations": {
      "substring": 1,
      "startsWith": 1
    },
    "body": "if camelCaseToUnderscoreHelper(s,separator).startsWith(separator) then camelCaseToUnderscoreHelper(s,separator).substring(2) else camelCaseToUnderscoreHelper(s,separator) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 2,
      "TemplateInvocationSpec": 3,
      "IntegerLiteralExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "concat": 26,
      "replaceAll": 26
    },
    "body": "s.replaceAll('A', separator.concat('A')).replaceAll('B', separator.concat('B')).replaceAll('C', separator.concat('C')).replaceAll('D', separator.concat('D')).replaceAll('E', separator.concat('E')).replaceAll('F', separator.concat('F')).replaceAll('G', separator.concat('G')).replaceAll('H', separator.concat('H')).replaceAll('I', separator.concat('I')).replaceAll('J', separator.concat('J')).replaceAll('K', separator.concat('K')).replaceAll('L', separator.concat('L')).replaceAll('M', separator.concat('M')).replaceAll('N', separator.concat('N')).replaceAll('O', separator.concat('O')).replaceAll('P', separator.concat('P')).replaceAll('Q', separator.concat('Q')).replaceAll('R', separator.concat('R')).replaceAll('S', separator.concat('S')).replaceAll('T', separator.concat('T')).replaceAll('U', separator.concat('U')).replaceAll('V', separator.concat('V')).replaceAll('W', separator.concat('W')).replaceAll('X', separator.concat('X')).replaceAll('Y', separator.concat('Y')).replaceAll('Z', separator.concat('Z'))",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 52,
      "VariableExpImpl": 27,
      "StringLiteralExpImpl": 52
    },
    "properties": []
  }
]
