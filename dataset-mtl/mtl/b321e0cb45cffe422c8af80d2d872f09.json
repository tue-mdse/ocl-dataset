[
  {
    "operations": {
      "getProperty": 1,
      "concat": 1,
      "=": 1
    },
    "body": "if self.getProperty('UNITTEST').=('true') then e.name.concat('.c') else getRelativePath(e,'C_FILENAME') endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getProperty": 1,
      "concat": 1,
      "=": 1
    },
    "body": "if self.getProperty('UNITTEST').=('true') then e.name.concat('.h') else getRelativePath(e,'H_FILENAME') endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "+": 4,
      "notEmpty": 4,
      "=": 6,
      "asSequence": 1
    },
    "body": "if e.eAnnotations->notEmpty() then if e.eAnnotations->select(temp1 : EAnnotation | temp1.source.=('http://www.eclipse.org/umlgen/annotation/c'.+(sourceP)))->notEmpty() then if e.eAnnotations->select(temp2 : EAnnotation | temp2.source.=('http://www.eclipse.org/umlgen/annotation/c'.+(sourceP)))->collect(temp3 : EAnnotation | temp3.details)->notEmpty() then if e.eAnnotations->select(temp4 : EAnnotation | temp4.source.=('http://www.eclipse.org/umlgen/annotation/c'.+(sourceP)))->collect(temp5 : EAnnotation | temp5.details)->select(temp6 : EStringToStringMapEntry | temp6.key.=(keyP))->notEmpty() then e.eAnnotations->select(temp7 : EAnnotation | temp7.source.=('http://www.eclipse.org/umlgen/annotation/c'.+(sourceP)))->collect(temp8 : EAnnotation | temp8.details)->select(temp9 : EStringToStringMapEntry | temp9.key.=(keyP))->collect(temp10 : EStringToStringMapEntry | temp10.value)->asSequence() else Sequence {} endif else Sequence {} endif else Sequence {} endif else Sequence {} endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 10,
      "VariableExpImpl": 21,
      "OperationCallExpImpl": 15,
      "StringLiteralExpImpl": 4,
      "CollectionLiteralExpImpl": 4,
      "IfExpImpl": 4,
      "PropertyCallExpImpl": 15
    },
    "properties": [
      "value",
      "source",
      "details",
      "key",
      "eAnnotations"
    ]
  },
  {
    "operations": {},
    "body": "getGenericAnnotation(e,'/documentation',keyP)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getGenericAnnotation(e,null,keyP)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "first": 1
    },
    "body": "op.ownedParameter->select(temp1 : Parameter | temp1.direction.<>(uml::ParameterDirectionKind::return))->first().type",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "direction",
      "type",
      "ownedParameter"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"filter": 1},
    "body": "getClientDependencies(c)->filter(uml::Usage)->select(u : Usage | isSelectableForGen(u,kind))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "getComment(self).size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getComment(self)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "isStdLibraryInclusion(self)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self.supplier->any(temp1 : NamedElement | true).name",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "supplier",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "self.supplier->any(temp1 : NamedElement | true).name",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "supplier",
      "name"
    ]
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('org.eclipse.umlgen.gen.c.services.UML2Services', 'getClientDependencies(org.eclipse.uml2.uml.NamedElement)', Sequence {e})",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('org.eclipse.umlgen.c.common.util.AnnotationUtil', 'getRelativePath(org.eclipse.uml2.uml.NamedElement, java.lang.String)', Sequence {e, s})",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('org.eclipse.umlgen.c.common.util.CommentFormatter', 'wrap(java.lang.String)', Sequence {s})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('org.eclipse.umlgen.c.common.util.CommentFormatter', 'wrapInLine(java.lang.String)', Sequence {s})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('org.eclipse.umlgen.gen.c.services.UML2Services', 'getSourcePackageName(org.eclipse.uml2.uml.NamedElement)', Sequence {e})",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "notEmpty": 1,
      "=": 1
    },
    "body": "if getAnnotation(e,'STD_LIBRARY')->notEmpty() then getAnnotation(e,'STD_LIBRARY')->any(temp1 : String | true).=('true') else false endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "and": 2,
      "=": 2
    },
    "body": "kind.=('C').and(isPrivate(e)).or(kind.=('H').and(isPublic(e)))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getAnnotation(e,'IFNDEF')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "notEmpty": 1,
      "=": 1
    },
    "body": "if getAnnotation(e,'REGISTER')->notEmpty() then getAnnotation(e,'REGISTER')->any(temp1 : String | true).=('true') else false endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "notEmpty": 1,
      "=": 1
    },
    "body": "if getAnnotation(e,'VOLATILE')->notEmpty() then getAnnotation(e,'VOLATILE')->any(temp1 : String | true).=('true') else false endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "size": 1,
      "oclIsKindOf": 1,
      "and": 2,
      "index": 2,
      "oclAsType": 2,
      ">": 3,
      "first": 1,
      "asSequence": 1
    },
    "body": "if self.name.oclIsUndefined().not().and(self.name.index('*').>(0)) then true else if self.oclIsKindOf(uml::DataType).and(self.oclAsType(uml::DataType).redefinedClassifier->size().>(0)) then self.oclAsType(uml::DataType).redefinedClassifier->asSequence()->first().name.index('*').>(0) else false endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 15,
      "VariableExpImpl": 5,
      "IntegerLiteralExpImpl": 3,
      "TypeExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 5,
      "BooleanLiteralExpImpl": 2
    },
    "properties": [
      "redefinedClassifier",
      "name"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "e.visibility.=(uml::VisibilityKind::private)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {"=": 1},
    "body": "e.visibility.=(uml::VisibilityKind::public)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {"notEmpty": 2},
    "body": "if getDocAnnotation(e,'C_INLINE_COMMENT_AFTER_DECLARATION')->notEmpty() then getDocAnnotation(e,'C_INLINE_COMMENT_AFTER_DECLARATION')->any(temp1 : String | true) else if getDocAnnotation(e,'H_INLINE_COMMENT_AFTER_DECLARATION')->notEmpty() then getDocAnnotation(e,'H_INLINE_COMMENT_AFTER_DECLARATION')->any(temp2 : String | true) else '' endif endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 4,
      "StringLiteralExpImpl": 5,
      "IfExpImpl": 2,
      "BooleanLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"notEmpty": 2},
    "body": "if getDocAnnotation(e,'C_INLINE_COMMENT_BEFORE_DECLARATION')->notEmpty() then getDocAnnotation(e,'C_INLINE_COMMENT_BEFORE_DECLARATION')->any(temp1 : String | true) else if getDocAnnotation(e,'H_INLINE_COMMENT_BEFORE_DECLARATION')->notEmpty() then getDocAnnotation(e,'H_INLINE_COMMENT_BEFORE_DECLARATION')->any(temp2 : String | true) else '' endif endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 4,
      "StringLiteralExpImpl": 5,
      "IfExpImpl": 2,
      "BooleanLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"notEmpty": 2},
    "body": "if getDocAnnotation(e,'documentation')->notEmpty() then true else if getDocAnnotation(e,'documentation')->notEmpty() then true else false endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 2,
      "BooleanLiteralExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "if hasComment(e) then getDocAnnotation(e,'documentation')->any(temp1 : String | true) else '' endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "hasComment(elt)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getComment(elt)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "generatedComment.size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "generatedComment",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "generatedComment.size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "generatedComment",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "trim": 1,
      "size": 1,
      ">": 1
    },
    "body": "generated.trim().size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "generatedComment.size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "generatedComment",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "generated",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "trim": 1,
      "size": 1,
      ">": 1
    },
    "body": "generated.trim().size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "generatedComment.size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "notEmpty": 1,
      "=": 1
    },
    "body": "Set {operation.method->any(b : Behavior | b.name.=(operation.name))}->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "method"
    ]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "generatedComment.size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "generatedComment",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "generatedComment",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "generated",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  }
]
