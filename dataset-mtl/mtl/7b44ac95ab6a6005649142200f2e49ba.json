[
  {
    "operations": {
      "not": 1,
      "or": 1,
      "oclIsKindOf": 2,
      "and": 1,
      "getSourceDirectedRelationships": 1,
      "first": 1,
      "asSequence": 1
    },
    "body": "self.getSourceDirectedRelationships()->select(temp1 : DirectedRelationship | temp1.oclIsKindOf(uml::Generalization).or(temp1.oclIsKindOf(uml::InterfaceRealization)).and(hasStereotype(temp1.target->asSequence()->first(),C_Cpp::NoCodeGen).not()))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 8,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 3,
      "PropertyCallExpImpl": 1
    },
    "properties": ["target"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "if hasStereotype(self,C_Cpp::Visibility) then getApplication(self,C_Cpp::Visibility).oclAsType(C_Cpp::Visibility).value else 'public' endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "filteredRelationships(self)->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "', \n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "filteredRelationships(self)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "oclAsType": 1,
      "first": 1,
      "asSequence": 1
    },
    "body": "self.target->asSequence()->first().oclAsType(uml::Classifier)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["target"]
  }
]
