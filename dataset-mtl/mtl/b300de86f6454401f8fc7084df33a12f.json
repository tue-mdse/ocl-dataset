[
  {
    "operations": {},
    "body": "genFilePath(aClass)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "isMessage(aClass)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "getAllSignals(aClass)->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "needsBuffer(aClass)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 2,
      "union": 1
    },
    "body": "get(aClass,'ownedPort')->filter(uml::Port)->union(getParents(aClass)->select(c : Classifier | c.isAbstract)->collect(temp1 : Classifier | get(temp1,'ownedPort'))->filter(uml::Port))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 3,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isAbstract"]
  },
  {
    "operations": {},
    "body": "getAllPortInterfaces(port)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "port",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "interface",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "port",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getAllProvidedInterfaces(aClass)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "interface",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "interface",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 3,
      "not": 1,
      "union": 1
    },
    "body": "minimize(self,getAllSignals(aClass)->union(getParents(aClass)->select(c : Classifier | c.isAbstract)->filter(uml::Class)->collect(temp1 : Class | getAllSignals(temp1)))->collect(temp2 : Signal | get(temp2,'ownedAttribute'))->filter(uml::Property)->collect(temp3 : Property | temp3.type)->select(aType : Type | isJavaPrimitive(aType).not()))->filter(uml::Type)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 5,
      "VariableExpImpl": 8,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 6,
      "TypeExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "isAbstract",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "aType",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aType.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"not": 1},
    "body": "isOnlyEthernetPackage(aClass.package).not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["package"]
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "getProperty": 1,
      "=": 1
    },
    "body": "self.getProperty('gen.annotations').=('true')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "isRoot(aClass)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "getAttributes(aClass)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "p",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "aClass.general->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["general"]
  },
  {
    "operations": {"not": 1},
    "body": "getAttributes(aClass)->select(aProperty : Property | isNotSerialized(aProperty).not())",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aProperty",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "aClass.general->size().>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["general"]
  },
  {
    "operations": {"not": 1},
    "body": "getAttributes(aClass)->select(aProperty : Property | isNotSerialized(aProperty).not())",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aProperty",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "notEmpty": 1
    },
    "body": "aClass.ownedBehavior->filter(uml::StateMachine)->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedBehavior"]
  },
  {
    "operations": {
      "getProperty": 1,
      "=": 1
    },
    "body": "self.getProperty('gen.annotations').=('true')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "union": 1
    },
    "body": "getAllSignals(aClass)->union(getParents(aClass)->select(c : Classifier | c.isAbstract)->filter(uml::Class)->collect(temp1 : Class | getAllSignals(temp1)))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 3,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isAbstract"]
  },
  {
    "operations": {},
    "body": "s",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "s",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "sep": 1
    },
    "body": "get(s,'ownedAttribute')->filter(uml::Property)->collect(temp1 : Property | genAttributeProperty(temp1))->sep(', ')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "not": 1,
      "and": 1,
      "isEmpty": 1,
      "equalsIgnoreCase": 1,
      "eClass": 1
    },
    "body": "get(aClass,'nestedClassifier')->filter(uml::Class)->select(itC : Class | itC.eClass().name.equalsIgnoreCase('Behavior').not().and(itC.ownedBehavior->isEmpty()))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "ownedBehavior"
    ]
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "<>": 1,
      "excluding": 1,
      "union": 1,
      "getAssociations": 1,
      "asSequence": 2
    },
    "body": "get(aClass,'ownedAttribute')->excluding(get(aClass,'ownedPort'))->asSequence()->union(aClass.getAssociations()->collect(temp1 : Association | temp1.navigableOwnedEnd)->select(itP : Property | itP.type.<>(aClass))->asSequence())->filter(uml::Property)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 7,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "navigableOwnedEnd",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "p",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"filter": 1},
    "body": "get(aClass,'ownedBehavior')->filter(uml::StateMachine)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "b",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "not": 1,
      "equalsIgnoreCase": 1
    },
    "body": "get(aClass,'ownedOperation')->filter(uml::Operation)->select(itO : Operation | itO.name.equalsIgnoreCase(aClass.name).not())",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "o",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"filter": 1},
    "body": "get(aClass,'ownedPort')->filter(uml::Port)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getAllPortInterfaces(port)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "interface",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "port",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "port.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "and": 1,
      "notEmpty": 1
    },
    "body": "aClass.isAbstract.not().and(aClass.ownedPort->notEmpty())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "isAbstract",
      "ownedPort"
    ]
  },
  {
    "operations": {
      "filter": 2,
      "union": 1
    },
    "body": "get(aClass,'ownedPort')->filter(uml::Port)->union(getParents(aClass)->select(aParent : Classifier | aParent.isAbstract)->collect(temp1 : Classifier | get(temp1,'ownedPort'))->filter(uml::Port))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isAbstract"]
  },
  {
    "operations": {},
    "body": "getAllPortInterfaces(port)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "port.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "interface",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "port",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'componentInstance'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "getParents(aClass)->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "not": 1,
      "notEmpty": 1
    },
    "body": "getParents(aClass)->select(aParent : Classifier | aParent.isAbstract.not())->collect(temp1 : Classifier | get(temp1,'ownedPort'))->filter(uml::Port)->collect(temp2 : Port | getAllPortInterfaces(temp2))->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 3,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isAbstract"]
  },
  {
    "operations": {"filter": 1},
    "body": "get(aClass,'ownedPort')->filter(uml::Port)->select(p : Port | isReceiver(p))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "port.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "port.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"not": 1},
    "body": "aClass.isAbstract.not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isAbstract"]
  },
  {
    "operations": {
      "filter": 8,
      "union": 3
    },
    "body": "minimize(self,getAsyncInterfacesPortProvider(aClass)->collect(temp1 : Interface | get(temp1,'nestedClassifier'))->filter(uml::Signal)->union(getAsyncInterfacesPortProvider(aClass)->collect(temp2 : Interface | get(temp2,'ownedElement'))->filter(uml::Reception)->collect(temp3 : Reception | temp3.signal)))->filter(uml::Signal)->union(getParents(aClass)->filter(uml::Class)->select(c : Class | c.isAbstract)->collect(temp4 : Class | get(temp4,'nestedClassifier'))->filter(uml::Signal)->union(getParents(aClass)->filter(uml::Class)->select(c : Class | c.isAbstract)->collect(temp5 : Class | getAsyncInterfacesPortProvider(temp5))->collect(temp6 : Interface | get(temp6,'ownedElement'))->filter(uml::Reception)->collect(temp7 : Reception | temp7.signal)))->filter(uml::Signal)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 9,
      "VariableExpImpl": 14,
      "OperationCallExpImpl": 11,
      "QueryInvocationSpec": 10,
      "TypeExpImpl": 8,
      "StringLiteralExpImpl": 4,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "isAbstract",
      "signal"
    ]
  },
  {
    "operations": {},
    "body": "s",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "sep": 1
    },
    "body": "get(s,'ownedAttribute')->filter(uml::Property)->collect(temp1 : Property | genAttributeProperty(temp1))->sep(', ')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "notEmpty": 1
    },
    "body": "get(aClass,'ownedBehavior')->filter(uml::StateMachine)->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "first": 1
    },
    "body": "get(aClass,'ownedBehavior')->filter(uml::StateMachine)->first()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "s",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "sep": 1
    },
    "body": "get(s,'ownedAttribute')->filter(uml::Property)->collect(temp1 : Property | temp1.name)->sep(', ')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "getInterfacesRealization(aClass)->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"sep": 1},
    "body": "getInterfacesRealization(aClass)->collect(temp1 : Interface | genName(temp1))->sep(', ')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"or": 2},
    "body": "isPeriodic(aClass).or(isAperiodic(aClass)).or(isSporadic(aClass))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 3
    },
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "getInterfacesRealization(aClass)->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"or": 1},
    "body": "isAperiodic(aClass).or(isSporadic(aClass))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {"or": 2},
    "body": "isPeriodic(aClass).or(isAperiodic(aClass)).or(isSporadic(aClass))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 3
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aClass",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  }
]
