[
  {
    "operations": {
      "selectByKind": 1,
      "and": 1,
      "isEmpty": 1
    },
    "body": "Set {c.owner}->selectByKind(uml::Model)->isEmpty().and(isValid(c.name))",
    "type": "TemplateGuard",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "owner",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "'src/'.concat(path(c.qualifiedName)).concat('.hpp')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualifiedName"]
  },
  {
    "operations": {"toUpper": 1},
    "body": "c.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpper": 1},
    "body": "c.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "getModel": 1,
      "allOwnedElements": 1,
      "includes": 1
    },
    "body": "c.getModel().nestedPackage->select(temp1 : Package | temp1.allOwnedElements()->includes(c))->collect(temp2 : Package | genNamespace(temp2,c))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 3,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["nestedPackage"]
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "'src/'.concat(path(c.qualifiedName)).concat('.cpp')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualifiedName"]
  },
  {
    "operations": {},
    "body": "c.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getModel": 1,
      "getNearestPackage": 1,
      "allOwnedElements": 1,
      "includes": 1
    },
    "body": "c.getModel().nestedPackage->select(temp1 : Package | temp1.allOwnedElements()->includes(c))->collect(temp2 : Package | genNamespace(temp2,c.getNearestPackage()))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 5,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["nestedPackage"]
  },
  {
    "operations": {
      "not": 1,
      "includes": 1
    },
    "body": "p.ownedElement->includes(e).not()",
    "type": "TemplateGuard",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "allOwnedElements": 1,
      "includes": 1
    },
    "body": "p.nestedPackage->select(temp1 : Package | temp1.allOwnedElements()->includes(e))->collect(temp2 : Package | genNamespace(temp2,e))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 5,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["nestedPackage"]
  },
  {
    "operations": {"includes": 1},
    "body": "p.ownedElement->includes(e)",
    "type": "TemplateGuard",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclIsKindOf": 1},
    "body": "e.oclIsKindOf(uml::Class)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "e.oclAsType(uml::NamedElement).name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "e.oclAsType(uml::Class)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "selectByKind": 1,
      "not": 1,
      "and": 1,
      "isEmpty": 1
    },
    "body": "Set {c.owner}->selectByKind(uml::Model)->isEmpty().not().and(isValid(c.name))",
    "type": "TemplateGuard",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "owner",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "'src/'.concat(c.name).concat('.hpp')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpper": 1},
    "body": "c.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpper": 1},
    "body": "c.name.toUpper()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "'src/'.concat(c.name).concat('.cpp')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "c.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "isValid(c.name)",
    "type": "TemplateGuard",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "c.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "' : '",
    "type": "ForBefore",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c.generalization",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["generalization"]
  },
  {
    "operations": {},
    "body": "g.general.qualifiedName",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "qualifiedName",
      "general"
    ]
  },
  {
    "operations": {},
    "body": "c.generalization",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["generalization"]
  },
  {
    "operations": {},
    "body": "c.qualifiedName",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualifiedName"]
  },
  {
    "operations": {},
    "body": "g.general.qualifiedName",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "qualifiedName",
      "general"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "and": 1,
      "=": 1
    },
    "body": "c.attribute->select(temp1 : Property | temp1.type.<>(null).and(isValid(temp1.name)))->exists(temp2 : Property | temp2.visibility.=(uml::VisibilityKind::public))",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 4,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "name",
      "visibility",
      "attribute",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "uml::VisibilityKind::public",
    "type": "TemplateExpression",
    "constructs": {"EnumLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c.attribute",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["attribute"]
  },
  {
    "operations": {"=": 1},
    "body": "p.visibility.=(uml::VisibilityKind::public)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {"trim": 1},
    "body": "toType(p.type.name).trim()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "<>": 1,
      "and": 1,
      "=": 1
    },
    "body": "c.attribute->select(temp1 : Property | temp1.type.<>(null).and(isValid(temp1.name)))->exists(temp2 : Property | temp2.visibility.=(uml::VisibilityKind::protected))",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 3,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "name",
      "visibility",
      "attribute",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "uml::VisibilityKind::protected",
    "type": "TemplateExpression",
    "constructs": {"EnumLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c.attribute",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["attribute"]
  },
  {
    "operations": {"=": 1},
    "body": "p.visibility.=(uml::VisibilityKind::protected)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {"trim": 1},
    "body": "toType(p.type.name).trim()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "<>": 1,
      "or": 1,
      "and": 1,
      "=": 2
    },
    "body": "c.attribute->select(temp1 : Property | temp1.type.<>(null).and(isValid(temp1.name)))->exists(temp2 : Property | temp2.visibility.=(uml::VisibilityKind::private).or(temp2.visibility.=(uml::VisibilityKind::package)))",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 5,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 1,
      "EnumLiteralExpImpl": 2,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "name",
      "visibility",
      "attribute",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "uml::VisibilityKind::private",
    "type": "TemplateExpression",
    "constructs": {"EnumLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c.attribute",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["attribute"]
  },
  {
    "operations": {
      "or": 1,
      "=": 2
    },
    "body": "self.visibility.=(uml::VisibilityKind::private).or(self.visibility.=(uml::VisibilityKind::package))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "EnumLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["visibility"]
  },
  {
    "operations": {"trim": 1},
    "body": "toType(p.type.name).trim()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('Integer')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "s",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('Boolean')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('ByteArray')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('Date')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('Real')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('UnlimitedNatural')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('String')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('Long')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('Char')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "=": 1
    },
    "body": "c.ownedAttribute->select(temp1 : Property | temp1.type.<>(null))->exists(temp2 : Property | temp2.type.name.=('Date'))",
    "type": "TemplateGuard",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "ownedAttribute",
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "=": 1
    },
    "body": "c.ownedAttribute->select(temp1 : Property | temp1.type.<>(null))->exists(temp2 : Property | temp2.type.name.=('String'))",
    "type": "TemplateGuard",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "ownedAttribute",
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "<>": 2,
      "and": 1
    },
    "body": "n.<>(null).and(n.<>(''))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"replaceAll": 2},
    "body": "n.replaceAll('[^:]*::(.*)', '$1').replaceAll('::', '/')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {"replaceAll": 1},
    "body": "n.replaceAll('[^:]*::(.*)', '$1')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"replaceAll": 2},
    "body": "n.replaceAll('[^:]*::[^:]*(.*)', '$1').replaceAll('::[^:]*', '../')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  }
]
