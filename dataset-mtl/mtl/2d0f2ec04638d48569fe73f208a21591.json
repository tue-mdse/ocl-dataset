[
  {
    "operations": {},
    "body": "anElement.ownedComment",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedComment"]
  },
  {
    "operations": {},
    "body": "aComment.body",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["body"]
  },
  {
    "operations": {},
    "body": "aNamedElement.name",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aNamedElement.qualifiedName",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualifiedName"]
  },
  {
    "operations": {},
    "body": "aNamedElement.visibility",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {},
    "body": "aFeature.isStatic",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isStatic"]
  },
  {
    "operations": {},
    "body": "aStructuralFeature.isReadOnly",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isReadOnly"]
  },
  {
    "operations": {},
    "body": "aRedefinableElement.isLeaf",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isLeaf"]
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "ancestors": 1,
      "reverse": 1,
      "sep": 1
    },
    "body": "aType.ancestors(uml::Package)->reject(aPackage : Package | aPackage.oclIsTypeOf(uml::Model))->reverse()->collect(temp1 : Package | queryName(temp1))->sep('.')",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aTypedElement.type",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "queryType(aTypedElement).name",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aOperation.type",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "queryType(aOperation).name",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "anOperation.ownedParameter->select(aParameter : Parameter | aParameter.direction.=(uml::ParameterDirectionKind::return))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "direction",
      "ownedParameter"
    ]
  },
  {
    "operations": {"=": 1},
    "body": "anOperation.ownedParameter->select(aParameter : Parameter | aParameter.direction.=(uml::ParameterDirectionKind::in))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "direction",
      "ownedParameter"
    ]
  },
  {
    "operations": {},
    "body": "aClassifier.qualifiedName",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualifiedName"]
  },
  {
    "operations": {},
    "body": "aProperty.defaultValue",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["defaultValue"]
  },
  {
    "operations": {},
    "body": "aProperty.default",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["default"]
  },
  {
    "operations": {},
    "body": "filterClassifiers(queryUsedClassifiersInDifferentPackages(aClassifier))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {"getGenerals": 1},
    "body": "aClassifier.getGenerals()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aClassifier.attribute",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["attribute"]
  },
  {
    "operations": {"getOperations": 1},
    "body": "aClassifier.getOperations()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsTypeOf": 2,
      "reverse": 2,
      "ancestors": 2,
      "=": 2
    },
    "body": "aCollection->reject(aClassifier : Classifier | aClassifier.ancestors(uml::Package)->reject(aPackage : Package | aPackage.oclIsTypeOf(uml::Model))->reverse()->collect(temp1 : Package | temp1.name)->=(Sequence {'java', 'lang'}))->reject(aClassifier : Classifier | aClassifier.ancestors(uml::Package)->reject(aPackage : Package | aPackage.oclIsTypeOf(uml::Model))->reverse()->collect(temp2 : Package | temp2.name)->=(Sequence {}))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 6,
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 8,
      "TypeExpImpl": 4,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getImportedPackages": 1,
      "=": 1
    },
    "body": "aModel.getImportedPackages()->select(aPackage : Package | aPackage.name.=(importedPackageName))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "filter": 1,
      "getOwnedMembers": 1,
      "=": 1
    },
    "body": "aPackage.getOwnedMembers()->filter(uml::Package)->select(aPackage : Package | aPackage.name.=(packageName))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "filter": 1,
      "getOwnedMembers": 1,
      "=": 1
    },
    "body": "aPackage.getOwnedMembers()->filter(uml::Interface)->select(aInterface : Interface | aInterface.name.=(interfaceName))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getAllAppliedProfiles": 1,
      "=": 1
    },
    "body": "aModel.getAllAppliedProfiles()->select(aProfile : Profile | aProfile.qualifiedName.=(profileName))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualifiedName"]
  },
  {
    "operations": {
      "filter": 1,
      "allOwnedElements": 1,
      "=": 1
    },
    "body": "aProfile.allOwnedElements()->filter(uml::Stereotype)->select(aStereotype : Stereotype | aStereotype.name.=(stereotypeName))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "addAll": 12,
      "getAppliedStereotype": 1
    },
    "body": "queryClassifierExtends(aClassifier)->addAll(queryClassifierExtends(aClassifier)->collect(temp1 : Classifier | queryClassifierTemplate(temp1)))->addAll(queryClassifierExtends(aClassifier)->collect(temp2 : Classifier | queryParameterSubstitution(temp2)))->addAll(queryPropertiesClassifiers(aClassifier))->addAll(queryPropertiesClassifiers(aClassifier)->collect(temp3 : Classifier | queryClassifierTemplate(temp3)))->addAll(queryPropertiesClassifiers(aClassifier)->collect(temp4 : Classifier | queryParameterSubstitution(temp4)))->addAll(queryOperationsClassifiers(aClassifier))->addAll(queryOperationsClassifiers(aClassifier)->collect(temp5 : Classifier | queryClassifierTemplate(temp5)))->addAll(queryOperationsClassifiers(aClassifier)->collect(temp6 : Classifier | queryParameterSubstitution(temp6)))->addAll(queryOperationsParametersClassifiers(aClassifier))->addAll(queryOperationsParametersClassifiers(aClassifier)->collect(temp7 : Classifier | queryClassifierTemplate(temp7)))->addAll(queryOperationsParametersClassifiers(aClassifier)->collect(temp8 : Classifier | queryParameterSubstitution(temp8)))->addAll(queryOperations(aClassifier)->collect(temp9 : Operation | temp9.ownedParameter)->select(aParameter : Parameter | aParameter.getAppliedStereotype('idv::hsiehpinghan::Generics').oclIsUndefined().not())->collect(temp10 : Parameter | queryParameterGenericsClassifier(temp10)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 11,
      "VariableExpImpl": 24,
      "OperationCallExpImpl": 15,
      "QueryInvocationSpec": 22,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedParameter"]
  },
  {
    "operations": {
      "filter": 1,
      "asSet": 1
    },
    "body": "queryOperations(aClassifier)->collect(temp1 : Operation | temp1.ownedParameter)->collect(temp2 : Parameter | queryType(temp2))->filter(uml::Classifier)->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedParameter"]
  },
  {
    "operations": {
      "filter": 1,
      "asSet": 1
    },
    "body": "queryOperations(aClassifier)->collect(temp1 : Operation | queryType(temp1))->filter(uml::Classifier)->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "asSet": 1
    },
    "body": "queryProperties(aClassifier)->collect(temp1 : Property | queryType(temp1))->filter(uml::Classifier)->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aClassifier.templateBinding",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["templateBinding"]
  },
  {
    "operations": {"asSet": 1},
    "body": "queryTemplateBinding(aClassifier)->collect(temp1 : TemplateBinding | temp1.parameterSubstitution)->collect(temp2 : TemplateParameterSubstitution | temp2.actual)->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "parameterSubstitution",
      "actual"
    ]
  },
  {
    "operations": {},
    "body": "aTemplateBinding.signature",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["signature"]
  },
  {
    "operations": {},
    "body": "aTemplateSignature.template",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["template"]
  },
  {
    "operations": {"asSet": 1},
    "body": "queryTemplateBinding(aClassifier)->collect(temp1 : TemplateBinding | queryTemplateSignature(temp1))->collect(temp2 : TemplateSignature | queryTemplate(temp2))->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 3
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "queryUsedClassifiers(aClassifier)->reject(aUsedClassifier : Classifier | queryPackage(aClassifier)->=(queryPackage(aUsedClassifier)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 3
    },
    "properties": []
  },
  {
    "operations": {
      "getValue": 1,
      "getAppliedStereotype": 1
    },
    "body": "aParameter.getValue(self.getAppliedStereotype('idv::hsiehpinghan::Generics'), 'extends')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  }
]
