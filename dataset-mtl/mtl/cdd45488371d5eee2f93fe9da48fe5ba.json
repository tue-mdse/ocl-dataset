[
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"+": 2},
    "body": "genPackagePath(aBehavior).+(genName(aBehavior)).+('.java')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aBehavior",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aBehavior",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aBehavior",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "aBehavior",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"oclIsUndefined": 1},
    "body": "if aBehavior.blocks->oclIsUndefined() then Sequence {} else aBehavior.blocks endif",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["blocks"]
  },
  {
    "operations": {},
    "body": "b",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsUndefined": 1},
    "body": "aBehavior.condition.oclIsUndefined()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["condition"]
  },
  {
    "operations": {},
    "body": "aBehavior.condition",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["condition"]
  }
]
