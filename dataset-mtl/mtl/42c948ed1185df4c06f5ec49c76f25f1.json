[
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 3,
      "and": 1,
      "isEmpty": 2
    },
    "body": "allGenFeatures(self)->select(gf : GenFeature | willGeneratePredicate(gf).not())->isEmpty().and(allGenOperations(self)->select(go : GenOperation | willGeneratePredicate(go).not())->isEmpty()).not()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 4
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "and": 1,
      "isEmpty": 2
    },
    "body": "allGenFeatures(self)->select(gf : GenFeature | willGeneratePredicate(gf))->isEmpty().and(allGenOperations(self)->select(go : GenOperation | willGeneratePredicate(go))->isEmpty()).not()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 4
    },
    "properties": []
  },
  {
    "operations": {
      "getProperty": 1,
      "oclIsUndefined": 1
    },
    "body": "self.getProperty('predicate.fullclassname').oclIsUndefined()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"getProperty": 1},
    "body": "self.getProperty('predicate.fullclassname')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 2,
      "isEmpty": 2
    },
    "body": "allGenOperations(self)->select(go : GenOperation | go.ecoreOperation.eExceptions->isEmpty().not())->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ecoreOperation",
      "eExceptions"
    ]
  },
  {
    "operations": {
      "not": 1,
      "and": 1,
      "isEmpty": 2
    },
    "body": "allGenFeatures(self)->collect(temp1 : GenFeature | temp1.ecoreFeature)->select(temp2 : EStructuralFeature | temp2.many)->isEmpty().and(allGenOperations(self)->collect(temp3 : GenOperation | temp3.ecoreOperation)->select(temp4 : EOperation | temp4.many)->isEmpty()).not()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 2,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "ecoreFeature",
      "ecoreOperation",
      "many"
    ]
  },
  {
    "operations": {},
    "body": "self.genPackage.genModel.suppressEMFTypes",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "genPackage",
      "suppressEMFTypes",
      "genModel"
    ]
  },
  {
    "operations": {
      "not": 1,
      "=": 1
    },
    "body": "allEClassifierToImport(self)->exists(temp1 : EClassifier | temp1.instanceTypeName.=('org.eclipse.emf.common.util.EList')).not()",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["instanceTypeName"]
  },
  {
    "operations": {
      "eContainer": 1,
      "asOrderedSet": 1,
      "toString": 1,
      "sep": 1
    },
    "body": "allEClassifierToImport(self)->collect(temp1 : EClassifier | genImport(temp1,e.eContainer(genmodel::GenModel)))->asOrderedSet()->sortedBy(temp2 : String | temp2.toString())->sep('\n')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 4,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "asOrderedSet": 1,
      "union": 3
    },
    "body": "getAllMixinEClasses(self)->union(getAllMixinGenFeatures(self)->collect(temp1 : GenFeature | temp1.ecoreFeature)->collect(temp2 : EStructuralFeature | temp2.eType))->union(getAllMixinGenOperations(self)->collect(temp3 : GenOperation | temp3.ecoreOperation)->collect(temp4 : EOperation | temp4.eType))->union(getAllMixinGenParameters(self)->collect(temp5 : GenParameter | temp5.ecoreParameter)->collect(temp6 : EParameter | temp6.eType))->asOrderedSet()->select(temp7 : EClassifier | isPrimitiveOrNonJavaLangClassifier(temp7).not())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 7,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 11,
      "QueryInvocationSpec": 5,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "eType",
      "ecoreFeature",
      "ecoreParameter",
      "ecoreOperation"
    ]
  },
  {
    "operations": {
      "or": 1,
      "oclIsUndefined": 1,
      "startsWith": 1
    },
    "body": "if self.instanceTypeName.oclIsUndefined() then false else self.instanceTypeName.startsWith('java.lang').or(isPrimitiveType(self.instanceTypeName)) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["instanceTypeName"]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "and": 1,
      "=": 1
    },
    "body": "e.instanceTypeName.oclIsUndefined().not().and(e.instanceTypeName.=('java.util.Map$Entry'))",
    "type": "TemplateGuard",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 4,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["instanceTypeName"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"eContainer": 1},
    "body": "basePackage(genModel,e).eContainer(genmodel::GenModel).suppressEMFTypes",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["suppressEMFTypes"]
  },
  {
    "operations": {
      "<>": 1,
      "not": 1,
      "oclIsUndefined": 1,
      "and": 1
    },
    "body": "e.instanceTypeName.oclIsUndefined().not().and(e.instanceTypeName.<>(''))",
    "type": "TemplateGuard",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["instanceTypeName"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self.instanceTypeName",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["instanceTypeName"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "basePackage(genModel,e)",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "self.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 3,
      "isEmpty": 3,
      "eAllContents": 5,
      "=": 5,
      "first": 1
    },
    "body": "if genModel.eAllContents(genmodel::GenClass)->select(temp1 : GenClass | temp1.ecoreClass.=(toFind))->isEmpty().not() then genModel.eAllContents(genmodel::GenClass)->any(temp2 : GenClass | temp2.ecoreClass.=(toFind)).genPackage else if genModel.eAllContents(genmodel::GenEnum)->select(temp3 : GenEnum | temp3.ecoreEnum.=(toFind))->isEmpty().not() then genModel.eAllContents(genmodel::GenEnum)->any(temp4 : GenEnum | temp4.ecoreEnum.=(toFind)).genPackage else if genModel.usedGenPackages->isEmpty().not() then genModel.usedGenPackages->collect(temp5 : GenPackage | temp5.eAllContents(genmodel::GenClass))->any(temp6 : GenClass | temp6.ecoreClass.=(toFind)).genPackage else genModel.genPackages->first() endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 6,
      "OperationCallExpImpl": 17,
      "VariableExpImpl": 18,
      "TypeExpImpl": 5,
      "IfExpImpl": 3,
      "PropertyCallExpImpl": 11
    },
    "properties": [
      "ecoreClass",
      "usedGenPackages",
      "ecoreEnum",
      "genPackage",
      "genPackages"
    ]
  }
]
