[
  {
    "operations": {"concat": 1},
    "body": "pack.basePackage.concat('.tests')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["basePackage"]
  },
  {
    "operations": {},
    "body": "testPackage(classifier.genPackage)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["genPackage"]
  },
  {
    "operations": {
      "toLower": 2,
      "concat": 4,
      "=": 1
    },
    "body": "pack.basePackage.concat('.').concat(pack.prefix.toLower()).concat(if pack.interfacePackageSuffix.=('') then '' else '.'.concat(pack.interfacePackageSuffix.toLower()) endif)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 4,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "prefix",
      "basePackage",
      "interfacePackageSuffix"
    ]
  },
  {
    "operations": {},
    "body": "modelPackage(classifier.genPackage)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["genPackage"]
  },
  {
    "operations": {
      "toLower": 2,
      "concat": 4,
      "=": 1
    },
    "body": "pack.basePackage.concat('.').concat(pack.prefix.toLower()).concat(if pack.classPackageSuffix.=('') then '' else '.'.concat(pack.classPackageSuffix.toLower()) endif)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 7,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "prefix",
      "basePackage",
      "classPackageSuffix"
    ]
  },
  {
    "operations": {},
    "body": "implementationPackage(classifier.genPackage)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["genPackage"]
  },
  {
    "operations": {"concat": 1},
    "body": "pack.prefix.concat('AdapterFactory')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["prefix"]
  },
  {
    "operations": {"concat": 1},
    "body": "pack.prefix.concat('Factory')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["prefix"]
  },
  {
    "operations": {"concat": 1},
    "body": "pack.prefix.concat('Switch')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["prefix"]
  },
  {
    "operations": {"concat": 3},
    "body": "modelPackage(pack).concat('.').concat(pack.prefix).concat('Factory')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["prefix"]
  },
  {
    "operations": {
      "eInverse": 1,
      "first": 1
    },
    "body": "modelFactoryClassName(eClass.eInverse(genmodel::GenClass)->first().genPackage)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["genPackage"]
  },
  {
    "operations": {
      "eInverse": 1,
      "=": 1,
      "first": 1
    },
    "body": "if eClass.ePackage.nsURI.=('http://www.eclipse.org/emf/2002/Ecore') then 'org.eclipse.emf.ecore.EcoreFactory' else qualifiedModelFactoryClassName(eClass.eInverse(genmodel::GenClass)->first().genPackage) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "ePackage",
      "nsURI",
      "genPackage"
    ]
  },
  {
    "operations": {"concat": 1},
    "body": "pack.prefix.concat('Package')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["prefix"]
  },
  {
    "operations": {"concat": 3},
    "body": "modelPackage(pack).concat('.').concat(pack.prefix).concat('Package')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["prefix"]
  },
  {
    "operations": {
      "eInverse": 1,
      "first": 1
    },
    "body": "modelPackageClassName(eClass.eInverse(genmodel::GenClass)->first().genPackage)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["genPackage"]
  },
  {
    "operations": {
      "eInverse": 1,
      "=": 1,
      "first": 1
    },
    "body": "if eClass.ePackage.nsURI.=('http://www.eclipse.org/emf/2002/Ecore') then 'org.eclipse.emf.ecore.EcorePackage' else qualifiedModelPackageClassName(eClass.eInverse(genmodel::GenClass)->first().genPackage) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "nsURI",
      "ePackage",
      "genPackage"
    ]
  },
  {
    "operations": {
      "eInverse": 1,
      "concat": 3,
      "=": 1,
      "first": 1
    },
    "body": "if classifier.ePackage.nsURI.=('http://www.eclipse.org/emf/2002/Ecore') then 'org.eclipse.emf.ecore.'.concat(classifier.name) else modelPackage(classifier.eInverse(genmodel::GenClassifier)->first()).concat('.').concat(classifier.name) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 3,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "name",
      "ePackage",
      "nsURI"
    ]
  },
  {
    "operations": {
      "eInverse": 1,
      "concat": 5,
      "=": 1,
      "first": 1
    },
    "body": "if classifier.ePackage.nsURI.=('http://www.eclipse.org/emf/2002/Ecore') then 'org.eclipse.emf.ecore.impl'.concat(classifier.name).concat('Impl') else implementationPackage(classifier.eInverse(genmodel::GenClassifier)->first()).concat('.').concat(classifier.name).concat('Impl') endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 5,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "name",
      "nsURI",
      "ePackage"
    ]
  },
  {
    "operations": {
      "not": 2,
      "and": 1,
      "eInverse": 1,
      "includes": 1,
      "first": 1
    },
    "body": "if class.abstract.not() then class else class.eInverse(ecore::EClass)->select(temp1 : EClass | temp1.abstract.not().and(temp1.eSuperTypes->includes(class)))->first() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 6,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "eSuperTypes",
      "abstract"
    ]
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('java.lang.String', 'matches(java.lang.String)', Sequence {eClassifier.name, 'EBoolean|EByte|EChar|EDouble|EFloat|EInt|ELong|EShort'})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 3,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  }
]
