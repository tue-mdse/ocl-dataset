[
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getIndexInContainer(org.eclipse.uml2.uml.Element)', Sequence {class})",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'hasStereotype(org.eclipse.uml2.uml.Element, java.lang.String)', Sequence {class, name})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getStereotype(org.eclipse.uml2.uml.Element, java.lang.String)', Sequence {class, name})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getStereotypeValue(org.eclipse.uml2.uml.Element, java.lang.String, java.lang.String)', Sequence {class, name, propertyname})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getStereotypeListValue(org.eclipse.uml2.uml.Element, java.lang.String, java.lang.String)', Sequence {class, name, propertyname})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getSolidityFileHeader(org.eclipse.uml2.uml.NamedElement)', Sequence {class})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getJsFileHeader(org.eclipse.uml2.uml.NamedElement)', Sequence {class})",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getJsControllerDirectory(org.eclipse.uml2.uml.NamedElement)', Sequence {class})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'generateJsController(org.eclipse.uml2.uml.NamedElement)', Sequence {class})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getJsTestsDirectory(org.eclipse.uml2.uml.NamedElement)', Sequence {class})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'generateJsTests(org.eclipse.uml2.uml.NamedElement)', Sequence {class})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getAbiDirectory(org.eclipse.uml2.uml.NamedElement)', Sequence {class})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'generateAbi(org.eclipse.uml2.uml.NamedElement)', Sequence {class})",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getVersionPragma(org.eclipse.uml2.uml.NamedElement)', Sequence {class})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'enableVersion(org.eclipse.uml2.uml.NamedElement)', Sequence {class})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'generateWeb3(org.eclipse.uml2.uml.NamedElement)', Sequence {class})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'solidity2javaType(org.eclipse.uml2.uml.Type)', Sequence {type})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getInterfacePackagePrefix(org.eclipse.uml2.uml.NamedElement)', Sequence {class})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getJavaTestDirectory(org.eclipse.uml2.uml.NamedElement)', Sequence {class})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'generateJavaTests(org.eclipse.uml2.uml.NamedElement)', Sequence {class})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'generateJavaNoneBlocking(org.eclipse.uml2.uml.NamedElement)', Sequence {class})",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getContractPathForJava(org.eclipse.uml2.uml.NamedElement)', Sequence {class})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getBooleanConfigurationParameter(org.eclipse.uml2.uml.NamedElement, java.lang.String)', Sequence {class, parameterId})",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getConfigurationParameter(org.eclipse.uml2.uml.NamedElement, java.lang.String)', Sequence {class, parameterId})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "allSuperTypesWithoutContractApi(self)->isEmpty().not()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 3,
      "or": 2,
      "isEmpty": 3
    },
    "body": "allContracts(pa)->isEmpty().not().or(allLibrarys(pa)->isEmpty().not()).or(allInterfaces(pa)->isEmpty().not())",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 3
    },
    "properties": []
  },
  {
    "operations": {
      "selectByType": 1,
      "oclAsType": 1
    },
    "body": "aModel.ownedElement->selectByType(uml::Class)->select(temp1 : Class | hasStereotype(temp1,'Contract'))->sortedBy(temp2 : Class | indexInContainer(temp2.oclAsType(uml::Class)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {
      "selectByType": 1,
      "oclAsType": 1
    },
    "body": "aModel.ownedElement->selectByType(uml::Class)->select(temp1 : Class | hasStereotype(temp1,'Contract'))->sortedBy(temp2 : Class | indexInContainer(temp2.oclAsType(uml::Class)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {
      "selectByType": 1,
      "oclAsType": 1
    },
    "body": "aModel.ownedElement->selectByType(uml::Interface)->sortedBy(temp1 : Interface | indexInContainer(temp1.oclAsType(uml::Interface)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {
      "selectByType": 1,
      "oclAsType": 1
    },
    "body": "aModel.ownedElement->selectByType(uml::Interface)->sortedBy(temp1 : Interface | indexInContainer(temp1.oclAsType(uml::Interface)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {
      "selectByType": 1,
      "oclAsType": 1
    },
    "body": "aModel.ownedElement->selectByType(uml::Class)->select(temp1 : Class | hasStereotype(temp1,'Library'))->sortedBy(temp2 : Class | indexInContainer(temp2.oclAsType(uml::Class)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {
      "selectByType": 1,
      "oclAsType": 1
    },
    "body": "aModel.ownedElement->selectByType(uml::Class)->select(temp1 : Class | hasStereotype(temp1,'Library'))->sortedBy(temp2 : Class | indexInContainer(temp2.oclAsType(uml::Class)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedElement"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "aClass.ownedMember->select(temp1 : NamedElement | hasStereotype(temp1,'Struct'))->sortedBy(temp2 : NamedElement | indexInContainer(temp2.oclAsType(uml::Class)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedMember"]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "aClass.ownedMember->select(temp1 : NamedElement | hasStereotype(temp1,'Struct'))->sortedBy(temp2 : NamedElement | indexInContainer(temp2.oclAsType(uml::Class)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedMember"]
  },
  {
    "operations": {
      "allOwnedElements": 1,
      "selectByType": 1,
      "oclAsType": 1
    },
    "body": "aClass.allOwnedElements()->selectByType(uml::Operation)->select(temp1 : Operation | hasStereotype(temp1,'Function'))->sortedBy(temp2 : Operation | indexInContainer(temp2.oclAsType(uml::Operation)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "allOwnedElements": 1,
      "selectByType": 1,
      "oclAsType": 1
    },
    "body": "aClass.allOwnedElements()->selectByType(uml::Operation)->select(temp1 : Operation | hasStereotype(temp1,'Constructor'))->sortedBy(temp2 : Operation | indexInContainer(temp2.oclAsType(uml::Operation)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "selectByKind": 1,
      "or": 1,
      "oclIsTypeOf": 1,
      "oclAsType": 1
    },
    "body": "allSuperTypes(aClass)->collect(temp1 : Classifier | temp1.ownedElement)->selectByKind(uml::Operation)->select(temp2 : Operation | hasStereotype(temp2,'Function'))->select(temp3 : Operation | temp3.owner.oclIsTypeOf(uml::Interface).or(temp3.isAbstract))->sortedBy(temp4 : Operation | indexInContainer(temp4.oclAsType(uml::Operation)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 6,
      "QueryInvocationSpec": 3,
      "TypeExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "isAbstract",
      "owner",
      "ownedElement"
    ]
  },
  {
    "operations": {
      "getAllOperations": 1,
      "or": 1,
      "oclIsTypeOf": 1,
      "selectByType": 1,
      "includes": 1,
      "oclAsType": 1
    },
    "body": "aClass.getAllOperations()->selectByType(uml::Operation)->select(temp1 : Operation | hasStereotype(temp1,'Function'))->select(temp2 : Operation | temp2.owner.oclIsTypeOf(uml::Interface).or(temp2.isAbstract))->select(temp3 : Operation | allSuperTypes(aClass)->includes(temp3.owner))->sortedBy(temp4 : Operation | indexInContainer(temp4.oclAsType(uml::Operation)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 4,
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 7,
      "QueryInvocationSpec": 3,
      "TypeExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "isAbstract",
      "owner"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "getAllOperations": 1,
      "+": 1,
      "oclAsType": 1
    },
    "body": "aClass.getAllOperations()->select(temp1 : Operation | hasStereotype(temp1,'Function'))->select(temp2 : Operation | temp2.visibility.<>(uml::VisibilityKind::private))->sortedBy(temp3 : Operation | indexInContainer(temp3.oclAsType(uml::Operation)).+(temp3.name))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 2,
      "EnumLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "visibility"
    ]
  },
  {
    "operations": {
      "not": 2,
      "and": 1,
      "allAttributes": 1,
      "+": 1,
      "oclAsType": 1
    },
    "body": "aClass.allAttributes()->select(temp1 : Property | hasStereotype(temp1,'Mapping').not().and(hasStereotype(temp1,'KeyMapping').not()))->select(temp2 : Property | isPublic(temp2))->sortedBy(temp3 : Property | indexInContainer(temp3.oclAsType(uml::Property)).+(temp3.name))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 6,
      "QueryInvocationSpec": 4,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "allAttributes": 1,
      "+": 1,
      "oclAsType": 1
    },
    "body": "aClass.allAttributes()->select(temp1 : Property | hasStereotype(temp1,'Mapping'))->select(temp2 : Property | isPublic(temp2))->sortedBy(temp3 : Property | indexInContainer(temp3.oclAsType(uml::Property)).+(temp3.name))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "allAttributes": 1,
      "+": 1,
      "oclAsType": 1
    },
    "body": "aClass.allAttributes()->select(temp1 : Property | hasStereotype(temp1,'KeyMapping'))->select(temp2 : Property | isPublic(temp2))->sortedBy(temp3 : Property | indexInContainer(temp3.oclAsType(uml::Property)).+(temp3.name))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "and": 1,
      "isEmpty": 1
    },
    "body": "isContract(aClass).and(allFunctions(aClass)->select(temp1 : Operation | temp1.isAbstract)->isEmpty().not())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isAbstract"]
  },
  {
    "operations": {"=": 1},
    "body": "p.visibility.=(uml::VisibilityKind::private)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "or": 1,
      "=": 1
    },
    "body": "p.visibility.oclIsUndefined().or(p.visibility.=(uml::VisibilityKind::public))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["visibility"]
  },
  {
    "operations": {
      "or": 1,
      "oclIsUndefined": 1,
      "=": 1
    },
    "body": "f.visibility.oclIsUndefined().or(f.visibility.=(uml::VisibilityKind::public))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["visibility"]
  },
  {
    "operations": {},
    "body": "hasStereotype(p,'Mapping')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "hasStereotype(p,'KeyMapping')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 2,
      "and": 1
    },
    "body": "hasStereotype(p,'Mapping').not().and(hasStereotype(p,'KeyMapping').not())",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "hasStereotype(c,'Contract')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "hasStereotype(s,'Struct')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "hasStereotype(s,'Function')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "hasStereotype(s,'Event')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "getStereotypeListValue(op,'Function','modifiers')->select(temp1 : Constraint | isPayable(temp1))->isEmpty().not()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "=": 1,
      "eGet": 3
    },
    "body": "if d.eGet('modifier').oclIsUndefined() then false else d.eGet('modifier').eGet('qualifiedName').=('types::lang::payable') endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "hasStereotype(s,'Indexed')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 2,
      "and": 1
    },
    "body": "c.attribute->select(temp1 : Property | hasStereotype(temp1,'Mapping').not().and(hasStereotype(temp1,'KeyMapping').not()))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["attribute"]
  },
  {
    "operations": {},
    "body": "c.attribute->select(temp1 : Property | isMapping(temp1))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["attribute"]
  },
  {
    "operations": {},
    "body": "c.attribute->select(temp1 : Property | isKeyMapping(temp1))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["attribute"]
  },
  {
    "operations": {},
    "body": "c.attribute->select(temp1 : Property | hasStereotype(temp1,'GetterSetter'))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["attribute"]
  },
  {
    "operations": {
      "union": 1,
      "oclAsType": 1
    },
    "body": "aClass.general->union(aClass.interfaceRealization->collect(temp1 : InterfaceRealization | temp1.contract))->sortedBy(temp2 : Classifier | indexInContainer(temp2.oclAsType(uml::Classifier)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "contract",
      "general",
      "interfaceRealization"
    ]
  },
  {
    "operations": {
      "not": 1,
      "+": 1,
      "oclAsType": 1
    },
    "body": "allSuperTypes(aClass)->select(temp1 : Classifier | hasStereotype(temp1,'StandardizedContractAPI').not())->sortedBy(temp2 : Classifier | indexInContainer(temp2.oclAsType(uml::Classifier)).+(temp2.name))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "=": 1,
      "oclAsType": 1
    },
    "body": "aOp.ownedParameter->select(temp1 : Parameter | temp1.oclAsType(uml::Parameter).direction.=(uml::ParameterDirectionKind::in))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "direction",
      "ownedParameter"
    ]
  },
  {
    "operations": {
      "oclAsType": 1,
      "=": 1
    },
    "body": "aOp.ownedParameter->select(temp1 : Parameter | temp1.oclAsType(uml::Parameter).direction.=(uml::ParameterDirectionKind::return))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "direction",
      "ownedParameter"
    ]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "allReturnParameters(aOperation)->size().>(0)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "includes": 1
    },
    "body": "allSuperTypes(aClass)->includes(superE).not()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 2,
      "or": 1,
      "isEmpty": 2
    },
    "body": "allModifier(aOperation)->isEmpty().not().or(allParameterModifier(aOperation)->isEmpty().not())",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "and": 1,
      "oclAsType": 1
    },
    "body": "hasReturnValue(aOperation).and(getStereotypeValue(aOperation,'Function','returnType').oclAsType(uml::NamedElement).name.<>('default'))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 3,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "allInstances": 1,
      "includes": 1
    },
    "body": "uml::Constraint.allInstances()->select(temp1 : Constraint | temp1.constrainedElement->includes(op))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["constrainedElement"]
  },
  {
    "operations": {"asSet": 1},
    "body": "getStereotypeListValue(op,'Function','modifiers')->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getStereotypeListValue(op,'Function','modifier')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"oclAsType": 1},
    "body": "p.packageImport->select(temp1 : PackageImport | hasStereotype(temp1,'Import'))->sortedBy(temp2 : PackageImport | indexInContainer(temp2.oclAsType(uml::PackageImport)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["packageImport"]
  },
  {
    "operations": {},
    "body": "allInParameters(op)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "p.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "allReturnParameters(op)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "p.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"tokenizeLine": 1},
    "body": "aString.tokenizeLine()",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "prefix",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "line",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "' '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"tokenizeLine": 1},
    "body": "aString.tokenizeLine()",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "line",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  }
]
