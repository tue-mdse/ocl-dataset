[
  {
    "operations": {
      "not": 1,
      "or": 4,
      "and": 3
    },
    "body": "queryAsStereotype(c,'n-tiers::entity').or(queryAsStereotype(c,'n-tiers::embeddable')).or(queryAsStereotype(c,'n-tiers::data')).or(queryAsStereotype(c,'n-tiers::value')).or(queryAsAtLeastOneProperty(c).and(queryAsAtLeastOneOperation(c).not()).and(queryAsNoStereotype(c))).and(isNotInPrivatePackage(c))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 8,
      "OperationCallExpImpl": 8,
      "QueryInvocationSpec": 8,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {
      "or": 12,
      "=": 13
    },
    "body": "op.type.name.=('int').or(op.type.name.=('long')).or(op.type.name.=('Integer')).or(op.type.name.=('Long')).or(op.type.name.=('double')).or(op.type.name.=('Double')).or(op.type.name.=('float')).or(op.type.name.=('Float')).or(op.type.name.=('Real')).or(op.type.name.=('boolean')).or(op.type.name.=('Boolean')).or(op.type.name.=('String')).or(op.type.name.=('string'))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 13,
      "OperationCallExpImpl": 25,
      "StringLiteralExpImpl": 13,
      "PropertyCallExpImpl": 26
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "concat": 1,
      "replaceAll": 1
    },
    "body": "recursiveQualifiedName(c.namespace).replaceAll('\\.', '/').concat('/')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 3,
      "PropertyCallExpImpl": 1
    },
    "properties": ["namespace"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"toLowerFirst": 1},
    "body": "c.name.toLowerFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "c.superClass->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["superClass"]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "first": 1
    },
    "body": "c.superClass->asOrderedSet()->first()",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["superClass"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "umlType",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "umlType",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 4,
      "=": 5
    },
    "body": "umlType.=('int').or(umlType.=('long')).or(umlType.=('float')).or(umlType.=('double')).or(umlType.=('boolean'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 5,
      "StringLiteralExpImpl": 5
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "umlType",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "or": 4,
      "=": 5
    },
    "body": "umlType.=('String').or(umlType.=('Boolean')).or(umlType.=('Integer')).or(umlType.=('Float')).or(umlType.=('Double'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 5,
      "StringLiteralExpImpl": 5
    },
    "properties": []
  },
  {
    "operations": {"toLowerFirst": 1},
    "body": "umlType.toLowerFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"=": 1},
    "body": "umlType.=('Real')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "umlType",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "c.superClass->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["superClass"]
  },
  {
    "operations": {},
    "body": "superC.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"asSequence": 1},
    "body": "c.attribute->asSequence()->sortedBy(temp1 : Property | temp1.name)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "attribute"
    ]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "p",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "isEmpty": 1
    },
    "body": "c.superClass->isEmpty().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["superClass"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 3,
      "=": 4
    },
    "body": "p.type.name.=('int').or(p.type.name.=('long')).or(p.type.name.=('Integer')).or(p.type.name.=('Long'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 7,
      "StringLiteralExpImpl": 4,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "or": 4,
      "=": 5
    },
    "body": "p.type.name.=('float').or(p.type.name.=('double')).or(p.type.name.=('Float')).or(p.type.name.=('Double')).or(p.type.name.=('Real'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 9,
      "StringLiteralExpImpl": 5,
      "PropertyCallExpImpl": 10
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "or": 1,
      "=": 2
    },
    "body": "p.type.name.=('boolean').or(p.type.name.=('Boolean'))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "name",
      "type"
    ]
  }
]
