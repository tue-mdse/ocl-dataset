[
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "getProperty": 1,
      "and": 1,
      "+": 1,
      "=": 1
    },
    "body": "type.namespace.name.=('datatype').and(self.getProperty('java.typeconversion.'.+(type.name)).<>(''))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 5,
      "StringLiteralExpImpl": 3,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "namespace",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getProperty": 1,
      "+": 1
    },
    "body": "self.getProperty('java.typeconversion.'.+(type.name))",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "parameter.<>(null)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "NullLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "=": 1,
      "-": 1
    },
    "body": "parameter.upper.=(1.-())",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["upper"]
  },
  {
    "operations": {},
    "body": "self.type",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "self.isOrdered",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isOrdered"]
  },
  {
    "operations": {},
    "body": "self.type",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "self.isUnique",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isUnique"]
  },
  {
    "operations": {},
    "body": "self.type",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "parameter.type",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"=": 1},
    "body": "self.type.=(null)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"returnResult": 1},
    "body": "operation.returnResult()->collect(temp1 : Parameter | toJavaType(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "sep": 1
    },
    "body": "getRealParameters(operation)->filter(uml::Parameter)->collect(temp1 : Parameter | genRawDeclare(temp1))->sep(', ')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "parameter",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "parameter.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"toLowerFirst": 1},
    "body": "self.name.toLowerFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "hasStereotype(parameter,'Annotation')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getValue": 1,
      "getAppliedStereotype": 1
    },
    "body": "parameter.getValue(parameter.getAppliedStereotype('profile::Annotation'), 'Type')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "getValue": 1,
      "getAppliedStereotype": 1
    },
    "body": "parameter.getValue(parameter.getAppliedStereotype('profile::Annotation'), 'Name')",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "sep": 1
    },
    "body": "getRealParameters(operation)->filter(uml::Parameter)->collect(temp1 : Parameter | genJSRawDeclare(temp1))->sep(', ')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"toLowerFirst": 1},
    "body": "self.name.toLowerFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "toString": 1,
      "concat": 2,
      "notEmpty": 1,
      "reverse": 1,
      "sep": 1
    },
    "body": "packages->collect(temp1 : Package | temp1.name)->reverse()->sep('.')->toString().concat(if packages->notEmpty() then '.' else '' endif).concat(namedElement.name)",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 6,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  }
]
