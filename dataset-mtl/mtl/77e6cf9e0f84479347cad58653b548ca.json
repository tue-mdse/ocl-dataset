[
  {
    "operations": {"replaceAll": 1},
    "body": "string.replaceAll('([ABCDEFGHIJKLMNOPQRSTUVWXYZ])', '\\\\-$1')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"toLowerFirst": 1},
    "body": "string.toLowerFirst()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"replaceAll": 1},
    "body": "string.replaceAll('_', '\\\\_')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "last": 1,
      "=": 1,
      "tokenize": 1
    },
    "body": "if eClassifier.<>(null) then if eClassifier.instanceTypeName.=(null) then eClassifier.name else eClassifier.instanceTypeName.tokenize('.')->last() endif else null endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 4,
      "NullLiteralExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "instanceTypeName"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "getEAnnotation": 1,
      "notEmpty": 1,
      "=": 1,
      "first": 1
    },
    "body": "let eAnnotation : EAnnotation = eModelElement.getEAnnotation('http://es.unizar.disco/dice/profiles/generator') in if eAnnotation.<>(null) then let details : OrderedSet(EStringToStringMapEntry) = eAnnotation.details->select(e : EStringToStringMapEntry | e.key.=(key)) in if details->notEmpty() then details->first() else null endif else null endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 7,
      "LetExpImpl": 2,
      "NullLiteralExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "details",
      "key"
    ]
  },
  {
    "operations": {"<>": 1},
    "body": "let entry : EStringToStringMapEntry = getAnnotationEntry(eNamedElement,'name') in if entry.<>(null) then entry.value else null endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "LetExpImpl": 1,
      "NullLiteralExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {"<>": 1},
    "body": "let entry : EStringToStringMapEntry = getAnnotationEntry(eNamedElement,'profileName') in if entry.<>(null) then entry.value else null endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 3,
      "LetExpImpl": 1,
      "NullLiteralExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {"<>": 1},
    "body": "let entry : EStringToStringMapEntry = getAnnotationEntry(eNamedElement,'extends') in if entry.<>(null) then entry.value else null endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "LetExpImpl": 1,
      "NullLiteralExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {"<>": 1},
    "body": "let entry : EStringToStringMapEntry = getAnnotationEntry(eNamedElement,'extendsProfile') in if entry.<>(null) then entry.value else null endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "LetExpImpl": 1,
      "NullLiteralExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "<>": 1,
      "replaceAll": 1
    },
    "body": "let annotatedName : String = getAnnotatedName(eNamedElement) in if annotatedName.<>(null) then annotatedName else eNamedElement.name endif.replaceAll('\\.', '::')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "LetExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "<>": 1,
      "+": 1,
      "replaceAll": 1
    },
    "body": "let annotatedName : String = getAnnotatedProfileName(eNamedElement) in if annotatedName.<>(null) then annotatedName else 'Dice'.+(eNamedElement.name) endif.replaceAll('\\.', '::')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 4,
      "LetExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"+": 2},
    "body": "getEPackageFQN(eClassifier.ePackage).+('::').+(getName(eClassifier))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ePackage"]
  },
  {
    "operations": {"+": 2},
    "body": "getProfileEPackageFQN(eClassifier.ePackage).+('::').+(getProfileName(eClassifier))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ePackage"]
  },
  {
    "operations": {
      "<>": 1,
      "+": 2
    },
    "body": "if ePackage.eSuperPackage.<>(null) then getEPackageFQN(ePackage.eSuperPackage).+('::').+(getName(ePackage)) else getName(ePackage) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 3,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["eSuperPackage"]
  },
  {
    "operations": {
      "<>": 1,
      "+": 2
    },
    "body": "if ePackage.eSuperPackage.<>(null) then getProfileEPackageFQN(ePackage.eSuperPackage).+('::').+(getProfileName(ePackage)) else getProfileName(ePackage) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 3,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["eSuperPackage"]
  },
  {
    "operations": {"not": 1},
    "body": "collection->select(type : EModelElement | isExcluded(type).not())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "let entry : EStringToStringMapEntry = getAnnotationEntry(eModelElement,'exclude') in entry.<>(null)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "LetExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "let entry : EStringToStringMapEntry = getAnnotationEntry(eModelElement,'comment') in if entry.<>(null) then entry.value else null endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "LetExpImpl": 1,
      "NullLiteralExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {"<>": 1},
    "body": "let entry : EStringToStringMapEntry = getAnnotationEntry(eModelElement,'description') in if entry.<>(null) then entry.value else null endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "LetExpImpl": 1,
      "NullLiteralExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "oclAsType": 1
    },
    "body": "if eClassifier.oclIsTypeOf(ecore::EClass) then buildEClassComment(eClassifier.oclAsType(ecore::EClass)) else getComment(eClassifier) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 2,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "and": 1,
      "isEmpty": 2,
      "+": 2
    },
    "body": "if eClass.abstract.or(eClass.interface) then 'This is an abstract class, and should not be mapped into a Profile element. ' else null endif.+(if notExcluded(eClass.eAttributes)->isEmpty().and(notExcluded(eClass.eReferences)->isEmpty()) then 'This class does not provide any tags, and should not be mapped into a Profile element. ' else null endif).+(getComment(eClass))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 6,
      "NullLiteralExpImpl": 2,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "eReferences",
      "eAttributes",
      "abstract",
      "interface"
    ]
  }
]
