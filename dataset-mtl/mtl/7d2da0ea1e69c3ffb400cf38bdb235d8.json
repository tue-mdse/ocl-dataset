[
  {
    "operations": {
      "reverse": 1,
      "ancestors": 1,
      "sep": 1
    },
    "body": "mod.ancestors(haxe::HaxePackage)->reverse()->collect(temp1 : HaxePackage | temp1.name)->sep(separator)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "isEmpty": 1,
      "concat": 2
    },
    "body": "if Set {m.parentReference}->isEmpty() then m.name else qualifiedName(m.parentReference,separator).concat(separator).concat(self.name) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 6,
      "QueryInvocationSpec": 1,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "name",
      "parentReference"
    ]
  },
  {
    "operations": {},
    "body": "arg.referencedTerminal.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "referencedTerminal",
      "name"
    ]
  },
  {
    "operations": {"sep": 1},
    "body": "arg.argumentTypes->collect(it : HaxeTypeAccess | typeAccessTemplate(it))->sep(',')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["argumentTypes"]
  },
  {
    "operations": {},
    "body": "arg.returnType",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["returnType"]
  },
  {
    "operations": {},
    "body": "arg.referencedTerminal.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "referencedTerminal",
      "name"
    ]
  },
  {
    "operations": {"notEmpty": 1},
    "body": "arg.parameterMapping->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["parameterMapping"]
  },
  {
    "operations": {"sep": 1},
    "body": "arg.parameterMapping->collect(x : HaxeTypeAccess | typeAccessTemplate(x))->sep(',')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["parameterMapping"]
  }
]
