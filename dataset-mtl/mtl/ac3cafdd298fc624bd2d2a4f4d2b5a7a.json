[
  {
    "operations": {
      "selectByKind": 1,
      "and": 1,
      "isEmpty": 1
    },
    "body": "Set {c.owner}->selectByKind(uml::Model)->isEmpty().and(isValid(c.name))",
    "type": "TemplateGuard",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "owner",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "'src/'.concat(path(c.qualifiedName)).concat('.cs')",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualifiedName"]
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"asBag": 1},
    "body": "Set {c.generalization->any(temp1 : Generalization | true)}->asBag()->collect(temp2 : Generalization | genUsing(temp2))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "CollectionLiteralExpImpl": 1,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["generalization"]
  },
  {
    "operations": {"getNearestPackage": 1},
    "body": "c.getNearestPackage().qualifiedName",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualifiedName"]
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "selectByKind": 1,
      "not": 1,
      "and": 1,
      "isEmpty": 1
    },
    "body": "Set {c.owner}->selectByKind(uml::Model)->isEmpty().not().and(isValid(c.name))",
    "type": "TemplateGuard",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "owner",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "'src/'.concat(c.name).concat('.cs')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"asBag": 1},
    "body": "Set {c.generalization->any(temp1 : Generalization | true)}->asBag()->collect(temp2 : Generalization | genUsing(temp2))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "CollectionLiteralExpImpl": 1,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["generalization"]
  },
  {
    "operations": {"getModel": 1},
    "body": "c.getModel().name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'src/Main.cs'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "isValid(c.name)",
    "type": "TemplateGuard",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "c.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"asBag": 1},
    "body": "Set {c.generalization->any(temp1 : Generalization | true)}->asBag()->collect(temp2 : Generalization | genGeneralization(temp2))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["generalization"]
  },
  {
    "operations": {},
    "body": "c.attribute->collect(temp1 : Property | genAttribute(temp1))",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["attribute"]
  },
  {
    "operations": {
      "<>": 1,
      "and": 1
    },
    "body": "p.type.<>(null).and(isValid(p.type.name))",
    "type": "TemplateGuard",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {"<>": 1},
    "body": "p.visibility.<>(uml::VisibilityKind::package)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {},
    "body": "p.visibility",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {"trim": 1},
    "body": "toType(p.type.name).trim()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "p.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('Integer')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "s",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('Boolean')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('ByteArray')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('Date')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('Real')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "s.equalsIgnoreCase('UnlimitedNatural')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 2,
      "equalsIgnoreCase": 3
    },
    "body": "s.equalsIgnoreCase('Long').or(s.equalsIgnoreCase('String')).or(s.equalsIgnoreCase('Char'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 5,
      "StringLiteralExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {"toLower": 1},
    "body": "s.toLower()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "=": 1
    },
    "body": "c.ownedAttribute->select(temp1 : Property | temp1.type.<>(null))->exists(temp2 : Property | temp2.type.name.=('Date'))",
    "type": "TemplateGuard",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "ownedAttribute",
      "name",
      "type"
    ]
  },
  {
    "operations": {"<>": 1},
    "body": "g.general.<>(null)",
    "type": "TemplateGuard",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "NullLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["general"]
  },
  {
    "operations": {"getNearestPackage": 1},
    "body": "g.general.getNearestPackage().qualifiedName",
    "type": "QueryInvocationArgument",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "qualifiedName",
      "general"
    ]
  },
  {
    "operations": {},
    "body": "g.general.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "general",
      "name"
    ]
  },
  {
    "operations": {
      "<>": 2,
      "and": 1
    },
    "body": "n.<>(null).and(n.<>(''))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"replaceAll": 2},
    "body": "n.replaceAll('[^:]*::(.*)', '$1').replaceAll('::', '/')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {"replaceAll": 1},
    "body": "n.replaceAll('::', '.')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  }
]
