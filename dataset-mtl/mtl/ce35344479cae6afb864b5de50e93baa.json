[
  {
    "operations": {"concat": 1},
    "body": "aClass.name.concat('.ts')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aClass.interface",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["interface"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "aClass.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "aClass.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"not": 1},
    "body": "aClass.interface.not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["interface"]
  },
  {
    "operations": {},
    "body": "aClass.ePackage.nsURI",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ePackage",
      "nsURI"
    ]
  },
  {
    "operations": {"not": 1},
    "body": "aClass.interface.not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["interface"]
  },
  {
    "operations": {"not": 1},
    "body": "aClass.interface.not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["interface"]
  },
  {
    "operations": {"not": 1},
    "body": "aClass.interface.not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["interface"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "aClass.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"not": 1},
    "body": "aClass.interface.not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["interface"]
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "aClass.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aClass.eAllAttributes",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["eAllAttributes"]
  },
  {
    "operations": {"not": 1},
    "body": "aClass.interface.not()",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["interface"]
  },
  {
    "operations": {},
    "body": "a.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "a.eType.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "eType",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "aClass.eAllReferences",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["eAllReferences"]
  },
  {
    "operations": {"not": 1},
    "body": "r.containment.not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["containment"]
  },
  {
    "operations": {},
    "body": "r.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "r.many",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["many"]
  },
  {
    "operations": {"=": 1},
    "body": "aClass.eAnnotations->collect(temp1 : EAnnotation | temp1.details)->exists(entry : EStringToStringMapEntry | entry.key.=('icon'))",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "details",
      "key",
      "eAnnotations"
    ]
  },
  {
    "operations": {
      "getEAnnotation": 1,
      "=": 1,
      "first": 1
    },
    "body": "aClass.getEAnnotation('http://specmate.com/gen').details->select(entry : EStringToStringMapEntry | entry.key.=('icon'))->first().value",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "value",
      "details",
      "key"
    ]
  },
  {
    "operations": {},
    "body": "'meta/field-meta.ts'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"filter": 1},
    "body": "aPackage.eClassifiers->filter(ecore::EClass)",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["eClassifiers"]
  },
  {
    "operations": {},
    "body": "aClass.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "','",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "and": 2,
      "isEmpty": 2,
      "equalsIgnoreCase": 2,
      "getEAnnotation": 1
    },
    "body": "aClass.eAllAttributes->select(attr : EAttribute | attr.eAnnotations->collect(temp1 : EAnnotation | temp1.getEAnnotation('http://specmate.com/form_meta'))->isEmpty().not().and(aClass.eAnnotations->collect(temp2 : EAnnotation | temp2.details)->select(detail : EStringToStringMapEntry | detail.key.equalsIgnoreCase('disabled').and(detail.value.equalsIgnoreCase(attr.name)))->isEmpty()))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 4,
      "VariableExpImpl": 8,
      "OperationCallExpImpl": 8,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 7
    },
    "properties": [
      "name",
      "eAllAttributes",
      "value",
      "details",
      "key",
      "eAnnotations"
    ]
  },
  {
    "operations": {},
    "body": "attribute.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "',\n'",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "attribute.eAnnotations->collect(temp1 : EAnnotation | temp1.details)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "details",
      "eAnnotations"
    ]
  },
  {
    "operations": {},
    "body": "detail.key",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["key"]
  },
  {
    "operations": {
      "not": 1,
      "or": 1,
      "equalsIgnoreCase": 2
    },
    "body": "detail.value.equalsIgnoreCase('true').or(detail.value.equalsIgnoreCase('false')).not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "+": 1,
      "replaceAll": 1
    },
    "body": "detail.value.replaceAll(''', '\\\\'.+('''))",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 3,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "not": 1,
      "or": 1,
      "equalsIgnoreCase": 2
    },
    "body": "detail.value.equalsIgnoreCase('true').or(detail.value.equalsIgnoreCase('false')).not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["value"]
  },
  {
    "operations": {
      "eContainer": 1,
      "=": 1
    },
    "body": "aPackage.eContainer().=(null)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "NullLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'support/gentypes.ts'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "'support/proxy.ts'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"=": 3},
    "body": "if type.=('EString') then '\"\"' else if type.=('EInt') then 'Number(0)' else if type.=('EBoolean') then 'false' else 'undefined' endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "StringLiteralExpImpl": 7,
      "IfExpImpl": 3
    },
    "properties": []
  }
]
