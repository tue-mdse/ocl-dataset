[
  {
    "operations": {
      "eContainer": 1,
      "includes": 1,
      "eAllContents": 1
    },
    "body": "self.eContainer(uml::Package).eAllContents(uml::Classifier)->exists(temp1 : Classifier | temp1.redefinedClassifier->includes(e))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["redefinedClassifier"]
  },
  {
    "operations": {
      "eContainer": 1,
      "includes": 1,
      "eAllContents": 1
    },
    "body": "self.eContainer(uml::Package).eAllContents(uml::Classifier)->select(temp1 : Classifier | temp1.redefinedClassifier->includes(e))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["redefinedClassifier"]
  },
  {
    "operations": {
      "not": 4,
      "oclIsUndefined": 1,
      "and": 2,
      "oclAsType": 2
    },
    "body": "if self.name.oclIsUndefined().not() then isMacro(e).not().and(isEnumeration(e.oclAsType(uml::DataType)).not()).and(isStructure(e.oclAsType(uml::DataType)).not()) else false endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 3,
      "TypeExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 5,
      "and": 5,
      "notEmpty": 1
    },
    "body": "self.redefinedClassifier->notEmpty().and(isStructure(self).not()).and(isTypeDefStruct(self).not()).and(isEnumeration(self).not()).and(isTypeDefEnum(self).not()).and(isFunctionPointerTypeDefDataType(self).not())",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 11,
      "VariableExpImpl": 6,
      "QueryInvocationSpec": 5,
      "PropertyCallExpImpl": 1
    },
    "properties": ["redefinedClassifier"]
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "and": 3,
      "isEmpty": 2,
      "notEmpty": 1,
      "oclAsType": 3
    },
    "body": "self.oclIsTypeOf(uml::DataType).and(self.oclAsType(uml::DataType).ownedAttribute->notEmpty()).and(self.oclAsType(uml::DataType).ownedOperation->isEmpty()).and(self.oclAsType(uml::DataType).redefinedClassifier->isEmpty())",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 10,
      "TypeExpImpl": 4,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "redefinedClassifier",
      "ownedAttribute",
      "ownedOperation"
    ]
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "and": 4,
      "isEmpty": 2,
      "notEmpty": 1,
      "oclAsType": 4
    },
    "body": "self.oclIsTypeOf(uml::DataType).and(self.oclAsType(uml::DataType).ownedAttribute->isEmpty()).and(self.oclAsType(uml::DataType).ownedOperation->isEmpty()).and(self.oclAsType(uml::DataType).redefinedClassifier->notEmpty()).and(self.oclAsType(uml::DataType).redefinedClassifier->exists(temp1 : Classifier | isStructure(temp1)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 12,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 5,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "redefinedClassifier",
      "ownedAttribute",
      "ownedOperation"
    ]
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "and": 2,
      "isEmpty": 1,
      "notEmpty": 1,
      "oclAsType": 2
    },
    "body": "self.oclIsTypeOf(uml::Enumeration).and(self.oclAsType(uml::Enumeration).ownedLiteral->notEmpty()).and(self.oclAsType(uml::Enumeration).redefinedClassifier->isEmpty())",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 3,
      "TypeExpImpl": 3,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedLiteral",
      "redefinedClassifier"
    ]
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "and": 3,
      "isEmpty": 1,
      "notEmpty": 1,
      "oclAsType": 3
    },
    "body": "self.oclIsTypeOf(uml::Enumeration).and(self.oclAsType(uml::Enumeration).ownedLiteral->isEmpty()).and(self.oclAsType(uml::Enumeration).redefinedClassifier->notEmpty()).and(self.oclAsType(uml::DataType).redefinedClassifier->exists(temp1 : Classifier | isEnumeration(temp1)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 4,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "redefinedClassifier",
      "ownedLiteral"
    ]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "and": 1,
      "=": 1
    },
    "body": "self.name.oclIsUndefined().not().and(self.name.=('Macro'))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {"=": 1},
    "body": "self.ownedOperation->exists(temp1 : Operation | temp1.name.=(e.name))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "ownedOperation",
      "name"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 2,
      "=": 2,
      "oclAsType": 2,
      "asSequence": 2
    },
    "body": "if self.owner.oclIsKindOf(uml::Interface) then self.owner.oclAsType(uml::Interface).ownedAttribute->select(temp1 : Property | temp1.type.=(e))->asSequence() else if self.owner.oclIsKindOf(uml::Class) then self.owner.oclAsType(uml::Class).ownedAttribute->select(temp2 : Property | temp2.type.=(e))->asSequence() else Sequence {} endif endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 8,
      "TypeExpImpl": 4,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 8
    },
    "properties": [
      "ownedAttribute",
      "owner",
      "ownedAttribute",
      "type"
    ]
  }
]
