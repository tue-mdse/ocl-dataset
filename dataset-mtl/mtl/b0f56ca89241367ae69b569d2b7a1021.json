[
  {
    "operations": {
      "oclAsType": 1,
      "first": 1
    },
    "body": "get(aParameter,'upper')->first().oclAsType(oclstdlib::Integer)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "not": 1,
      "oclIsUndefined": 1,
      "and": 1,
      "notEmpty": 1
    },
    "body": "getAllReceptions(anInterface)->select(aRecep : Reception | aRecep.signal.oclIsUndefined().not().and(get(aRecep.signal,'ownedAttribute')->filter(uml::Property)->notEmpty()))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 5,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["signal"]
  },
  {
    "operations": {
      "not": 1,
      "<>": 1,
      "isEmpty": 1
    },
    "body": "getAllOperations(anInterface)->select(anOp : Operation | anOp.ownedParameter->select(aParam : Parameter | aParam.direction.<>(uml::ParameterDirectionKind::return))->isEmpty().not())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 1,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "direction",
      "ownedParameter"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 2,
      "oclAsType": 2
    },
    "body": "if anOperation.oclIsKindOf(uml::Operation) then getParams(anOperation.oclAsType(uml::Operation)) else if anOperation.oclIsKindOf(uml::Reception) then getParams(anOperation.oclAsType(uml::Reception)) else oclstdlib::OclAny endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 5,
      "IfExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "<>": 1
    },
    "body": "get(anOperation,'ownedParameter')->filter(uml::Parameter)->select(aParam : Parameter | aParam.direction.<>(uml::ParameterDirectionKind::return))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "EnumLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["direction"]
  },
  {
    "operations": {"filter": 1},
    "body": "get(anOperation.signal,'ownedElement')->filter(uml::Property)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["signal"]
  },
  {
    "operations": {
      "filter": 1,
      "not": 1,
      "<>": 1,
      "oclIsKindOf": 1,
      "union": 1,
      "getAssociations": 1,
      "asSequence": 1
    },
    "body": "get(aClass,'ownedAttribute')->filter(uml::Property)->select(aProp : Property | aProp.oclIsKindOf(uml::Port).not())->union(aClass.getAssociations()->collect(temp1 : Association | temp1.navigableOwnedEnd)->select(end : Property | end.type.<>(aClass))->asSequence())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 6,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "navigableOwnedEnd",
      "type"
    ]
  },
  {
    "operations": {"filter": 2},
    "body": "minimize(self,get(aClass,'clientDependency')->filter(uml::Realization)->collect(temp1 : Realization | get(temp1,'supplier')))->filter(uml::Interface)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 3,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "not": 1,
      "<>": 1,
      "and": 2
    },
    "body": "minimize(self,getAllOperations(anInterface)->select(anOp : Operation | genReturn(anOp).<>('void').and(isJavaPrimitiveObject(anOp.type)).and(isReturnList(anOp).not()))->collect(temp1 : Operation | temp1.type))->filter(uml::Type)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 6,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 4,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["type"]
  },
  {
    "operations": {
      "filter": 1,
      "<>": 1,
      "and": 2
    },
    "body": "minimize(self,getAllOperations(anInterface)->select(anOp : Operation | genReturn(anOp).<>('void').and(isJavaPrimitiveObject(anOp.type)).and(isReturnList(anOp)))->collect(temp1 : Operation | temp1.type))->filter(uml::Type)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 6,
      "TemplateInvocationSpec": 1,
      "QueryInvocationSpec": 4,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["type"]
  },
  {
    "operations": {
      "or": 1,
      "oclIsKindOf": 1
    },
    "body": "isJavaPrimitive(aType).or(aType.oclIsKindOf(uml::Enumeration))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 20,
      "equalsIgnoreCase": 14,
      "=": 7
    },
    "body": "aType.name.=('int').or(aType.name.equalsIgnoreCase('Integer')).or(aType.name.equalsIgnoreCase('float')).or(aType.name.equalsIgnoreCase('boolean')).or(aType.name.equalsIgnoreCase('byte')).or(aType.name.equalsIgnoreCase('long')).or(aType.name.equalsIgnoreCase('short')).or(aType.name.=('char')).or(aType.name.=('Character')).or(aType.name.equalsIgnoreCase('void')).or(aType.name.=('String')).or(aType.name.=('EString')).or(aType.name.equalsIgnoreCase('double')).or(aType.name.equalsIgnoreCase('edouble')).or(aType.name.equalsIgnoreCase('efloat')).or(aType.name.equalsIgnoreCase('eboolean')).or(aType.name.equalsIgnoreCase('ebyte')).or(aType.name.equalsIgnoreCase('elong')).or(aType.name.equalsIgnoreCase('eshort')).or(aType.name.=('EChar')).or(aType.name.=('EInt'))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 21,
      "OperationCallExpImpl": 41,
      "StringLiteralExpImpl": 21,
      "PropertyCallExpImpl": 21
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "hasStereotype(anInterface,'RTSJ::EventData')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"toInteger": 1},
    "body": "if hasStereotype(aReception,'RTSJ::EventDataBuffer') then getStereotypeProperty(aReception,'RTSJ::EventDataBuffer','size').toInteger() else 1 endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "eAllContents": 1,
      "asSequence": 1
    },
    "body": "aModel.eAllContents(uml::Class)->select(aClass : Class | isRoot(aClass))->asSequence()->any(temp1 : Class | true)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 2,
      "union": 1,
      "asSequence": 1
    },
    "body": "get(anInterface,'ownedReception')->filter(uml::Reception)->union(anInterface.generalization->collect(temp1 : Generalization | temp1.general)->filter(uml::Interface)->collect(temp2 : Interface | getAllReceptions(temp2))->asSequence())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "general",
      "generalization"
    ]
  },
  {
    "operations": {
      "filter": 2,
      "union": 1,
      "asSequence": 1
    },
    "body": "get(anInterface,'ownedOperation')->filter(uml::Operation)->union(anInterface.generalization->collect(temp1 : Generalization | temp1.general)->filter(uml::Interface)->collect(temp2 : Interface | getAllOperations(temp2))->asSequence())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "general",
      "generalization"
    ]
  },
  {
    "operations": {"union": 1},
    "body": "getAllOperations(anInterface)->union(getAllReceptions(anInterface))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {"append": 1},
    "body": "getAllChildren(aClassifier)->append(aClassifier)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {
      "filter": 1,
      "asSequence": 1
    },
    "body": "get(aClassifier,'generalization')->filter(uml::Generalization)->collect(temp1 : Generalization | temp1.general)->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["general"]
  },
  {
    "operations": {"append": 1},
    "body": "getAllParents(aClassifier)->append(aClassifier)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "hasStereotype(self,'RTSJ::Root')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "or": 1,
      "size": 1,
      "and": 1,
      "=": 2,
      "-": 1,
      ">": 2
    },
    "body": "anOp.ownedParameter->select(aParam : Parameter | aParam.direction.=(uml::ParameterDirectionKind::return).and(aParam.upper.>(1).or(aParam.upper.=(1.-()))))->size().>(0)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "IntegerLiteralExpImpl": 3,
      "EnumLiteralExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "direction",
      "upper",
      "ownedParameter"
    ]
  },
  {
    "operations": {
      "<>": 2,
      "union": 1
    },
    "body": "getChildren(aClassifier)->select(c : Classifier | c.<>(aClassifier))->union(getChildren(aClassifier)->select(c : Classifier | c.<>(aClassifier))->collect(temp1 : Classifier | getAllChildren(temp1)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 3
    },
    "properties": []
  },
  {
    "operations": {
      "eContainer": 1,
      "eInverse": 1
    },
    "body": "aClassifier.eInverse(uml::Generalization)->collect(temp1 : Generalization | temp1.eContainer(uml::Classifier))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 2,
      "union": 1
    },
    "body": "getParents(aClassifier)->select(c : Classifier | c.<>(aClassifier))->union(getParents(aClassifier)->select(c : Classifier | c.<>(aClassifier))->collect(temp1 : Classifier | getAllParents(temp1)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 7,
      "QueryInvocationSpec": 3
    },
    "properties": []
  }
]
