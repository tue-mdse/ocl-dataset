[
  {
    "operations": {"+": 2},
    "body": "getSourceFolder(aType).+(packagePath(aType)).+(aType.name)",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "TemplateInvocationSpec": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "ancestors": 1,
      "reverse": 1,
      "sep": 1
    },
    "body": "aType.ancestors(uml::Package)->reject(aPackage : Package | aPackage.oclIsTypeOf(uml::Model))->collect(temp1 : Package | temp1.name)->reverse()->sep('/', '/', '/')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 3,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "oclIsTypeOf": 1,
      "reverse": 1,
      "ancestors": 1,
      "sep": 1
    },
    "body": "aType.ancestors(uml::Package)->reject(aPackage : Package | aPackage.oclIsTypeOf(uml::Model))->collect(temp1 : Package | temp1.name)->reverse()->sep('.')",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aType",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"toUpperFirst": 1},
    "body": "aType.name.toUpperFirst()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  }
]
