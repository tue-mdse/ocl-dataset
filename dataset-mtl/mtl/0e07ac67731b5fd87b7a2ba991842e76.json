[
  {
    "operations": {
      "equalsIgnoreCase": 1,
      "eClass": 1
    },
    "body": "aDataDeclaration.type.eClass().name.equalsIgnoreCase('FloatType')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "equalsIgnoreCase": 1,
      "eClass": 1
    },
    "body": "aDataDeclaration.type.eClass().name.equalsIgnoreCase('IntegerType')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "equalsIgnoreCase": 1,
      "eClass": 1
    },
    "body": "aDataDeclaration.type.eClass().name.equalsIgnoreCase('FloatRangeType')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "equalsIgnoreCase": 1,
      "eClass": 1
    },
    "body": "aDataDeclaration.type.eClass().name.equalsIgnoreCase('IntegerRangeType')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "filter": 1,
      "asOrderedSet": 1,
      "equalsIgnoreCase": 1,
      "first": 1
    },
    "body": "Set {aDataDeclaration.value}->filter(OPLmetamodel::DataObject)->collect(temp1 : DataObject | temp1.body)->asOrderedSet()->first().equalsIgnoreCase('')",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2,
      "TypeExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "value",
      "body"
    ]
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "aModel.id.concat('.mod')",
    "type": "FileUrl",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["id"]
  },
  {
    "operations": {},
    "body": "aModel.isConstraintProblem",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isConstraintProblem"]
  },
  {
    "operations": {},
    "body": "aModel.data->sortedBy(temp1 : DataDeclaration | temp1.order)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "data",
      "order"
    ]
  },
  {
    "operations": {},
    "body": "aDataDeclaration.isDecisionVar",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isDecisionVar"]
  },
  {
    "operations": {},
    "body": "aDataDeclaration.isDecisionExpr",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isDecisionExpr"]
  },
  {
    "operations": {},
    "body": "isDecFloatType(aDataDeclaration)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "isDecIntegerType(aDataDeclaration)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aDataDeclaration.variable.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "variable"
    ]
  },
  {
    "operations": {"filter": 1},
    "body": "Set {aDataDeclaration.value}->filter(OPLmetamodel::DataObject)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {},
    "body": "aDataObject.body",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["body"]
  },
  {
    "operations": {},
    "body": "aModel.data->sortedBy(temp1 : DataDeclaration | temp1.order)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "data",
      "order"
    ]
  },
  {
    "operations": {},
    "body": "aDataDeclaration.isDecisionVar",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isDecisionVar"]
  },
  {
    "operations": {},
    "body": "aDataDeclaration.isDecisionExpr",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isDecisionExpr"]
  },
  {
    "operations": {},
    "body": "isDecFloatType(aDataDeclaration)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "isDecIntegerType(aDataDeclaration)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "isDecFloatRangeType(aDataDeclaration)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "isDecIntegerRangeType(aDataDeclaration)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aDataDeclaration.variable.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "variable"
    ]
  },
  {
    "operations": {"filter": 1},
    "body": "Set {aDataDeclaration.value}->filter(OPLmetamodel::DataObject)",
    "type": "ForIter",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["value"]
  },
  {
    "operations": {"or": 1},
    "body": "isDecFloatRangeType(aDataDeclaration).or(isDecIntegerRangeType(aDataDeclaration))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {"or": 1},
    "body": "isDecFloatType(aDataDeclaration).or(isDecIntegerType(aDataDeclaration))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "aDataObject.body",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["body"]
  },
  {
    "operations": {
      "<>": 1,
      "size": 1
    },
    "body": "Set {aModel.instruction}->size().<>(0)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["instruction"]
  },
  {
    "operations": {},
    "body": "Set {aModel.instruction}->sortedBy(temp1 : Objective | temp1.order)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "instruction",
      "order"
    ]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "aObjective.expression.oclAsType(OPLmetamodel::DataRef).name",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "expression"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "size": 1
    },
    "body": "aModel.constraints->size().<>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["constraints"]
  },
  {
    "operations": {},
    "body": "aModel.constraints->sortedBy(temp1 : Constraint | temp1.order)",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "constraints",
      "order"
    ]
  },
  {
    "operations": {"equalsIgnoreCase": 1},
    "body": "aConstraint.name.equalsIgnoreCase('')",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "aConstraint.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"oclAsType": 2},
    "body": "aConstraint.exp.oclAsType(OPLmetamodel::RelationalExpression).lhs.oclAsType(OPLmetamodel::DataRef).name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "lhs",
      "exp",
      "name"
    ]
  },
  {
    "operations": {
      "=": 1,
      "oclAsType": 1
    },
    "body": "aConstraint.exp.oclAsType(OPLmetamodel::RelationalExpression).redefinedOp.=(OPLmetamodel::RelationalOp::lessThan)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "exp",
      "redefinedOp"
    ]
  },
  {
    "operations": {
      "oclAsType": 1,
      "=": 1
    },
    "body": "aConstraint.exp.oclAsType(OPLmetamodel::RelationalExpression).redefinedOp.=(OPLmetamodel::RelationalOp::lessThanOrEqualTo)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "exp",
      "redefinedOp"
    ]
  },
  {
    "operations": {
      "=": 1,
      "oclAsType": 1
    },
    "body": "aConstraint.exp.oclAsType(OPLmetamodel::RelationalExpression).redefinedOp.=(OPLmetamodel::RelationalOp::greaterThan)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "exp",
      "redefinedOp"
    ]
  },
  {
    "operations": {
      "oclAsType": 1,
      "=": 1
    },
    "body": "aConstraint.exp.oclAsType(OPLmetamodel::RelationalExpression).redefinedOp.=(OPLmetamodel::RelationalOp::greaterThanOrEqualTo)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "exp",
      "redefinedOp"
    ]
  },
  {
    "operations": {
      "=": 1,
      "oclAsType": 1
    },
    "body": "aConstraint.exp.oclAsType(OPLmetamodel::RelationalExpression).redefinedOp.=(OPLmetamodel::RelationalOp::equalTo)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "exp",
      "redefinedOp"
    ]
  },
  {
    "operations": {
      "oclAsType": 1,
      "=": 1
    },
    "body": "aConstraint.exp.oclAsType(OPLmetamodel::RelationalExpression).redefinedOp.=(OPLmetamodel::RelationalOp::notEqualTo)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "exp",
      "redefinedOp"
    ]
  },
  {
    "operations": {"oclAsType": 2},
    "body": "aConstraint.exp.oclAsType(OPLmetamodel::RelationalExpression).rhs.oclAsType(OPLmetamodel::FloatExpression).body",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "body",
      "exp",
      "rhs"
    ]
  }
]
