[
  {
    "operations": {"concat": 1},
    "body": "string.concat('Assoc')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"union": 2},
    "body": "Set {p}->union(p.nestedPackage->iterate(pkg : Package; ps : Set(Package) = Set {} | ps->union(allPackages(pkg))))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "IterateExpImpl": 1,
      "CollectionLiteralExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["nestedPackage"]
  },
  {
    "operations": {"concat": 2},
    "body": "if assoc then getAssocClassName(string).concat('.java') else string.concat('.java') endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "getJavaFileName(class.name,assoc)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "toString": 1
    },
    "body": "if vis.oclIsUndefined().not() then vis.toString() else 'private // default visibility' endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "strcmp": 1,
      "stringValue": 1,
      "or": 1,
      "integerValue": 1,
      "=": 1,
      ">": 1
    },
    "body": "if prop.upperValue.stringValue().strcmp('*').=(0).or(prop.upperValue.integerValue().>(1)) then true else false endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 6,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["upperValue"]
  },
  {
    "operations": {
      "strcmp": 5,
      "oclIsUndefined": 1,
      "=": 5
    },
    "body": "if type.name.strcmp('Date').=(0) then 'java.util.Date' else if type.name.strcmp('List').=(0) then 'java.util.List' else if type.name.strcmp('Currency').=(0) then 'java.util.Currency' else if type.name.strcmp('Percent').=(0) then 'Float' else if type.name.strcmp('PositiveInteger').=(0) then 'Integer' else if type.oclIsUndefined() then 'String' else type.name endif endif endif endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 11,
      "IntegerLiteralExpImpl": 5,
      "StringLiteralExpImpl": 11,
      "IfExpImpl": 6,
      "PropertyCallExpImpl": 6
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "delimiter",
    "type": "ForEach",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "strcmp": 1,
      "<>": 1
    },
    "body": "op.ownedParameter->select(temp1 : Parameter | temp1.name.strcmp('return').<>(0))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "ownedParameter"
    ]
  },
  {
    "operations": {},
    "body": "param",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "op.ownedParameter",
    "type": "ForIter",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedParameter"]
  },
  {
    "operations": {
      "strcmp": 1,
      "<>": 1
    },
    "body": "param.name.strcmp('return').<>(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "param",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "param",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "param.type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {},
    "body": "param.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "class",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "vis",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "class",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"notEmpty": 1},
    "body": "Set {superClass}->notEmpty()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "superClass",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"getAppliedStereotypes": 1},
    "body": "class.getAppliedStereotypes()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  }
]
