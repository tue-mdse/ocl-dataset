[
  {
    "operations": {
      "trim": 1,
      "oclIsTypeOf": 2,
      "asOrderedSet": 2,
      "isEmpty": 1,
      "concat": 4,
      "reverse": 2,
      "ancestors": 2,
      "oclAsType": 2,
      "=": 1
    },
    "body": "if self.ancestors(uml::Package)->asOrderedSet()->reverse()->select(temp1 : Package | temp1.oclIsTypeOf(uml::Package))->isEmpty() then '' else self.ancestors(uml::Package)->asOrderedSet()->reverse()->select(temp2 : Package | temp2.oclIsTypeOf(uml::Package))->iterate(it : Package; result : String = '' | if result.=('') then result.concat(getName(it.oclAsType(uml::Package))) else result.concat('/').concat(getName(it.oclAsType(uml::Package))) endif).concat('/').trim() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 9,
      "OperationCallExpImpl": 17,
      "QueryInvocationSpec": 2,
      "TypeExpImpl": 6,
      "StringLiteralExpImpl": 5,
      "IterateExpImpl": 1,
      "IfExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "getNearestPackage": 2,
      "substituteAll": 2,
      "concat": 1
    },
    "body": "if self.getNearestPackage().oclIsUndefined().not() then getName(self.getNearestPackage()).substituteAll(' ', '').substituteAll('.', '/').concat('/') else '' endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 6,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "deleteWhitespace(self.name).trim()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "trim": 1
    },
    "body": "if self.name.oclIsUndefined() then '' else deleteWhitespace(self.name).trim() endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "trim": 1,
      "toLowerFirst": 1
    },
    "body": "if self.name.oclIsUndefined() then formatedError('name is undefined') else deleteWhitespace(self.name).toLowerFirst().trim() endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "toUpperFirst": 1,
      "oclIsUndefined": 1,
      "trim": 1
    },
    "body": "if self.name.oclIsUndefined() then formatedError('name is undefined') else deleteWhitespace(self.name).toUpperFirst().trim() endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "toLower": 1
    },
    "body": "if self.name.oclIsUndefined() then formatedError('name is undefined') else deleteWhitespace(self.name).toLower() endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "toUpper": 1
    },
    "body": "if self.name.oclIsUndefined() then formatedError('name is undefined') else deleteWhitespace(self.name).toUpper() endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "not": 2,
      "oclIsUndefined": 2,
      "toLower": 2,
      "and": 1,
      "=": 1
    },
    "body": "if nE1.name.oclIsUndefined().not().and(nE2.name.oclIsUndefined().not()) then deleteWhitespace(nE1.name).toLower().=(deleteWhitespace(nE2.name).toLower()) else false endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4,
      "BooleanLiteralExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "eContainer": 1,
      "eContents": 1,
      "indexOf": 1
    },
    "body": "b->sortedBy(n : NamedElement | n.eContainer().eContents()->indexOf(n))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {
      "eContainer": 1,
      "eContents": 1,
      "indexOf": 1,
      "asSequence": 1
    },
    "body": "s->sortedBy(n : NamedElement | n.eContainer().eContents()->indexOf(n))->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {
      "eContainer": 1,
      "eContents": 1,
      "indexOf": 1
    },
    "body": "s->sortedBy(n : NamedElement | n.eContainer().eContents()->indexOf(n))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {
      "eContainer": 1,
      "eContents": 1,
      "oclAsType": 2,
      "indexOf": 1
    },
    "body": "s->sortedBy(u : Usage | u.oclAsType(uml::NamedElement).eContainer().eContents()->indexOf(u.oclAsType(uml::NamedElement)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "TypeExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "getAppliedStereotype": 1
    },
    "body": "e.getAppliedStereotype(qualifiedName).oclIsUndefined().not()",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 3
    },
    "properties": []
  }
]
