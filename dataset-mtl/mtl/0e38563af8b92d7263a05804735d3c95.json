[
  {
    "operations": {
      "or": 1,
      "oclIsKindOf": 1,
      "includes": 1
    },
    "body": "aEndpoint.oclIsKindOf(eip::Aggregator).or(aEndpoint.toChannels->collect(temp1 : Channel | temp1.toEndpoint)->collect(temp2 : Endpoint | endsWithAggregator(temp2))->includes(true))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "toEndpoint",
      "toChannels"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "oclAsType": 1,
      "first": 1
    },
    "body": "if aEndpoint.oclIsKindOf(eip::Aggregator) then self.oclAsType(eip::Aggregator) else getFollowingAggregator(aEndpoint.toChannels->first().toEndpoint) endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 1,
      "TypeExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "toEndpoint",
      "toChannels"
    ]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "aRoute.ownedEndpoints->select(temp1 : Endpoint | temp1.toChannels->size().>(1))->collect(temp2 : Endpoint | temp2.toChannels)->collect(temp3 : Channel | temp3.toEndpoint)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 4,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "toEndpoint",
      "ownedEndpoints",
      "toChannels"
    ]
  }
]
