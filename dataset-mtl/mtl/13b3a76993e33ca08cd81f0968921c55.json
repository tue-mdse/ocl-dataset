[
  {
    "operations": {
      "getAllOperations": 1,
      "size": 1,
      ">": 1
    },
    "body": "c.getAllOperations()->size().>(0)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getAllAttributes": 1,
      "size": 1,
      ">": 1
    },
    "body": "c.getAllAttributes()->size().>(0)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "getAppliedStereotypes": 1,
      "<": 1
    },
    "body": "e.getAppliedStereotypes()->size().<(1)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 2,
      "getAllAttributes": 1,
      "and": 2,
      "=": 1
    },
    "body": "c.getAllAttributes()->select(temp1 : Property | temp1.aggregation.<>(uml::AggregationKind::composite).and(temp1.aggregation.<>(uml::AggregationKind::shared)).and(temp1.association.=(null)))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 4,
      "NullLiteralExpImpl": 1,
      "EnumLiteralExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "aggregation",
      "association"
    ]
  },
  {
    "operations": {
      "contains": 1,
      "not": 1
    },
    "body": "c.name.contains('<').not()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "<>": 1,
      "ancestors": 1,
      "first": 1
    },
    "body": "e.ancestors(uml::Package)->first().visibility.<>(uml::VisibilityKind::private)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["visibility"]
  },
  {
    "operations": {
      "last": 1,
      "ancestors": 1
    },
    "body": "e.ancestors(uml::Package)->last()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "getAppliedStereotypes": 1,
      "eAllContents": 1,
      "=": 1,
      "first": 1
    },
    "body": "p.eAllContents(uml::InstanceSpecification)->select(temp1 : InstanceSpecification | temp1.getAppliedStereotypes()->exists(s : Stereotype | s.qualifiedName.=('n-tiers::config')))->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 4,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualifiedName"]
  },
  {
    "operations": {
      "=": 1,
      "oclAsType": 1,
      "eAllContents": 1,
      "first": 1
    },
    "body": "cfg.eAllContents(uml::Slot)->select(temp1 : Slot | temp1.definingFeature.name.=(prop))->first().value->collect(temp2 : ValueSpecification | temp2.oclAsType(uml::LiteralString))->collect(temp3 : LiteralString | temp3.value)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 5,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "value",
      "value",
      "definingFeature",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "queryInstanceProperty(queryFirstInstanceSpec(queryRootPackage(e)),prop)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 3
    },
    "properties": []
  },
  {
    "operations": {
      "getAppliedStereotypes": 1,
      "=": 1
    },
    "body": "e.getAppliedStereotypes()->exists(s : Stereotype | s.qualifiedName.=(sName))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["qualifiedName"]
  },
  {
    "operations": {
      "getAllAttributes": 1,
      "oclIsTypeOf": 1
    },
    "body": "c.getAllAttributes()->exists(a : Property | a.type.oclIsTypeOf(uml::Enumeration))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"getAllOperations": 1},
    "body": "c.getAllOperations()->exists(o : Operation | queryOperationWithEnumParam(o))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsTypeOf": 1},
    "body": "o.ownedParameter->exists(p : Parameter | p.type.oclIsTypeOf(uml::Enumeration))",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "type",
      "ownedParameter"
    ]
  },
  {
    "operations": {
      "<>": 1,
      "asOrderedSet": 1,
      "first": 1
    },
    "body": "a.memberEnd->select(temp1 : Property | temp1.type.name.<>(c.name))->asOrderedSet()->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "name",
      "type",
      "memberEnd"
    ]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "=": 1,
      "first": 1
    },
    "body": "a.memberEnd->select(temp1 : Property | temp1.type.name.=(c.name))->asOrderedSet()->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "name",
      "type",
      "memberEnd"
    ]
  },
  {
    "operations": {"oclAsType": 1},
    "body": "c.oclAsType(uml::Class).ownedOperation",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["ownedOperation"]
  },
  {
    "operations": {
      "asOrderedSet": 1,
      "getAppliedStereotypes": 1,
      "=": 1,
      "first": 1
    },
    "body": "c.attribute->select(temp1 : Property | temp1.getAppliedStereotypes()->exists(s : Stereotype | s.qualifiedName.=('n-tiers::id')))->asOrderedSet()->first()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "qualifiedName",
      "attribute"
    ]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 2,
      "and": 1
    },
    "body": "s.<>(null).and(s.<>(''))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "defaultValue",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "s",
    "type": "TemplateExpression",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 5,
      "and": 4
    },
    "body": "n.namespace.<>(null).and(n.namespace.name.<>(null)).and(n.namespace.name.<>('LogicalView')).and(n.namespace.name.<>('Model')).and(n.namespace.visibility.<>(uml::VisibilityKind::private))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 5,
      "NullLiteralExpImpl": 2,
      "EnumLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 9
    },
    "properties": [
      "namespace",
      "name",
      "visibility"
    ]
  },
  {
    "operations": {},
    "body": "n.namespace",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["namespace"]
  },
  {
    "operations": {},
    "body": "n.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "queryRetreiveCfgProperty(c,'domainName')",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'org.xxx'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "queryRetreiveCfgProperty(c,'appName')",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'myapp'",
    "type": "TemplateInvocationArgument",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c.namespace",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["namespace"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "c",
    "type": "TemplateInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "c.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"replaceAll": 1},
    "body": "fullNameFromUml(c).replaceAll('\\.', '/')",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "TemplateInvocationSpec": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "queryRootPackage(c)",
    "type": "QueryInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1
    },
    "properties": []
  }
]
