[
  {
    "operations": {},
    "body": "'test_string_replace'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "replace": 1,
      "=": 1
    },
    "body": "'test'.replace('(t)(?x) e s (?-x)(t)', '$1se$2').=('tset')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_string_replaceAll'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "replaceAll": 1,
      "=": 1
    },
    "body": "'aardvark'.replaceAll('[aeiou]', 'x').=('xxrdvxrk')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_string_substituteAll'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "substituteAll": 1,
      "=": 1
    },
    "body": "'\\$1...*$?'.substituteAll('$', 'x').=('\\x1...*x?')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_string_startsWith'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "and": 1,
      "startsWith": 2
    },
    "body": "'test'.startsWith('te').and('test'.startsWith('es').not())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_string_endsWith'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "and": 1,
      "endsWith": 2
    },
    "body": "'test'.endsWith('st').and('test'.endsWith('es').not())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_string_trim'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "trim": 1,
      "=": 1
    },
    "body": "'          t   e s       t       '.trim().=('t   e s       t')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_string_tokenize'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "includesAll": 1,
      "tokenize": 1
    },
    "body": "'this is a test sentence'.tokenize(' ')->includesAll(Sequence {'this', 'is', 'a', 'test', 'sentence'})",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 7,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_string_contains'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "contains": 2,
      "not": 1,
      "and": 1
    },
    "body": "'test'.contains('es').and('test'.contains('ests').not())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_string_index'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "index": 1,
      "=": 1
    },
    "body": "'babar'.index('a', 3).=(4)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_string_last_index'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "lastIndex": 1,
      "=": 1
    },
    "body": "'babababar'.lastIndex('a', 3).=(4)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_string_tokenize_2'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "=": 1,
      "tokenize": 1
    },
    "body": "'my\ngreat\rtest'.tokenize()->size().=(3)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_string_tokenize_line'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "tokenizeLine": 2,
      "size": 2,
      "and": 1,
      "=": 2
    },
    "body": "'this is a test sentence'.tokenizeLine()->size().=(1).and('this\nis a\ntest sentence'.tokenizeLine()->size().=(3))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_string_prefix'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "prefix": 1,
      "=": 1
    },
    "body": "'yopyop'.prefix('yop').=('yopyopyop')",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_oclany_eAllContents'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "includesAll": 1,
      "oclIsKindOf": 1,
      "and": 1,
      "isEmpty": 1,
      "eAllContents": 2,
      "oclAsType": 1
    },
    "body": "p.eAllContents()->isEmpty().not().and(p.eAllContents()->select(temp1 : OclAny | temp1.oclIsKindOf(ecore::EClass))->collect(temp2 : OclAny | temp2.oclAsType(ecore::EClass))->collect(temp3 : EClass | temp3.name)->includesAll(Sequence {'ClasseA', 'ClasseB', 'AbstractClass'}))",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 5,
      "StringLiteralExpImpl": 3,
      "TypeExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "'test_oclany_typed_eAllContents'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "includesAll": 1,
      "eAllContents": 1
    },
    "body": "p.eAllContents(ecore::EClass)->collect(temp1 : EClass | temp1.name)->includesAll(Sequence {'ClasseA', 'ClasseB', 'AbstractClass'})",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 3,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "'test_oclany_ancestors'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "includes": 1,
      "ancestors": 1,
      "eAllContents": 1,
      "first": 1
    },
    "body": "p.eAllContents()->first().ancestors()->includes(p)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_oclany_typed_ancestors'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "and": 1,
      "isEmpty": 1,
      "includes": 1,
      "ancestors": 2,
      "eAllContents": 2,
      "first": 2
    },
    "body": "p.eAllContents()->first().ancestors(ecore::EClass)->isEmpty().and(p.eAllContents()->first().ancestors(ecore::EPackage)->includes(p))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 9,
      "TypeExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_oclany_siblings'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "siblings": 1,
      "includesAll": 1,
      "eAllContents": 1,
      "oclAsType": 1,
      "first": 1
    },
    "body": "p.eAllContents()->first().siblings()->collect(temp1 : OclAny | temp1.oclAsType(ecore::EClass))->collect(temp2 : EClass | temp2.name)->includesAll(Sequence {'ClasseB', 'AbstractClass'})",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 2,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "'test_oclany_typed_siblings'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "siblings": 2,
      "includesAll": 1,
      "and": 1,
      "isEmpty": 1,
      "eAllContents": 2,
      "first": 2
    },
    "body": "p.eAllContents()->first().siblings(ecore::EPackage)->isEmpty().and(p.eAllContents()->first().siblings(ecore::EClass)->collect(temp1 : EClass | temp1.name)->includesAll(Sequence {'ClasseB', 'AbstractClass'}))",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 3,
      "TypeExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "'test_oclany_eInverse'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "siblings": 1,
      "oclIsKindOf": 1,
      "eInverse": 1,
      "includes": 1,
      "eAllContents": 2,
      "oclAsType": 1,
      "first": 4
    },
    "body": "p.eAllContents()->first().eInverse()->includes(p.eAllContents()->first().siblings()->select(temp1 : OclAny | temp1.oclIsKindOf(ecore::EClass))->collect(temp2 : OclAny | temp2.oclAsType(ecore::EClass))->first().eReferences->first())",
    "type": "IfExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 11,
      "VariableExpImpl": 4,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["eReferences"]
  },
  {
    "operations": {},
    "body": "'test_oclany_typed_eInverse'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "siblings": 1,
      "includes": 1,
      "eInverse": 1,
      "eAllContents": 2,
      "first": 4
    },
    "body": "p.eAllContents()->first().eInverse(ecore::EReference)->includes(p.eAllContents()->first().siblings(ecore::EClass)->first().eReferences->first())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 9,
      "VariableExpImpl": 2,
      "TypeExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["eReferences"]
  },
  {
    "operations": {},
    "body": "'test_oclany_toString'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "contains": 1,
      "toString": 1
    },
    "body": "p.toString().contains(p.name)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "'test_oclany_invoke'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "contains": 1,
      "oclIsInvalid": 2,
      "and": 2,
      "invoke": 3,
      "oclAsType": 1
    },
    "body": "self.invoke('this.is.an.unknown.Object', 'method()', Sequence {p}).oclIsInvalid().and(self.invoke('java.lang.Object', 'unknownMethod()', Sequence {p}).oclIsInvalid()).and(self.invoke('java.lang.Object', 'toString', Sequence {p}).oclAsType(oclstdlib::String).contains('arge'))",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 6,
      "OperationCallExpImpl": 9,
      "StringLiteralExpImpl": 7,
      "TypeExpImpl": 1,
      "CollectionLiteralExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_oclany_line_separator'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "lineSeparator": 1
    },
    "body": "p.lineSeparator().oclIsUndefined().not()",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_sep_3'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "=": 1,
      "sep": 1
    },
    "body": "Sequence {'a', 'b', 'c'}->sep('prefix', 'separator', 'suffix')->=(Sequence {'prefix', 'a', 'separator', 'b', 'separator', 'c', 'suffix'})",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 13,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_add_all_sequence_1'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "addAll": 1,
      "=": 1
    },
    "body": "Sequence {'a', 'b', 'c'}->addAll(OrderedSet {'a', 'b', 'c'})->size().=(6)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_add_all_sequence_2'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "addAll": 1,
      "=": 1
    },
    "body": "Sequence {'a', 'b', 'c'}->addAll(Bag {'a', 'b', 'c'})->size().=(6)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_add_all_sequence_3'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "addAll": 1,
      "=": 1
    },
    "body": "Sequence {'a', 'b', 'c'}->addAll(Set {'a', 'b', 'c'})->size().=(6)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_add_all_sequence_4'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "addAll": 1,
      "=": 1
    },
    "body": "Sequence {'a', 'b', 'c'}->addAll(Sequence {'a', 'b', 'c'})->size().=(6)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_add_all_ordered_set_1'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "addAll": 1,
      "=": 1
    },
    "body": "OrderedSet {'a', 'b', 'c'}->addAll(Sequence {'a', 'b', 'c', 'd'})->size().=(4)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 7,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_add_all_ordered_set_2'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "addAll": 1,
      "=": 1
    },
    "body": "OrderedSet {'a', 'b', 'c'}->addAll(Bag {'a', 'b', 'c', 'd'})->size().=(4)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 7,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_add_all_ordered_set_3'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "addAll": 1,
      "=": 1
    },
    "body": "OrderedSet {'a', 'b', 'c'}->addAll(OrderedSet {'a', 'b', 'c', 'd'})->size().=(4)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 7,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_add_all_ordered_set_4'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "addAll": 1,
      "=": 1
    },
    "body": "OrderedSet {'a', 'b', 'c'}->addAll(Set {'a', 'b', 'c', 'd'})->size().=(4)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 7,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_add_all_bag_1'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "addAll": 1,
      "=": 1
    },
    "body": "Bag {'a', 'b', 'c'}->addAll(Sequence {'a', 'b', 'c'})->size().=(6)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_add_all_bag_2'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "addAll": 1,
      "=": 1
    },
    "body": "Bag {'a', 'b', 'c'}->addAll(Bag {'a', 'b', 'c'})->size().=(6)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_add_all_bag_3'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "addAll": 1,
      "=": 1
    },
    "body": "Bag {'a', 'b', 'c'}->addAll(OrderedSet {'a', 'b', 'c'})->size().=(6)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_add_all_bag_4'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "addAll": 1,
      "=": 1
    },
    "body": "Bag {'a', 'b', 'c'}->addAll(Set {'a', 'b', 'c'})->size().=(6)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_add_all_set_1'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "addAll": 1,
      "=": 1
    },
    "body": "Set {'a', 'b', 'c'}->addAll(Sequence {'a', 'b', 'c', 'd'})->size().=(4)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 7,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_add_all_set_2'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "addAll": 1,
      "=": 1
    },
    "body": "Set {'a', 'b', 'c'}->addAll(Bag {'a', 'b', 'c', 'd'})->size().=(4)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 7,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_add_all_set_3'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "addAll": 1,
      "=": 1
    },
    "body": "Set {'a', 'b', 'c'}->addAll(Set {'a', 'b', 'c', 'd'})->size().=(4)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 7,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_add_all_set_4'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "size": 1,
      "addAll": 1,
      "=": 1
    },
    "body": "Set {'a', 'b', 'c'}->addAll(OrderedSet {'a', 'b', 'c', 'd'})->size().=(4)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 7,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_remove_all_sequence_1'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "removeAll": 1,
      "size": 1,
      "=": 1
    },
    "body": "Sequence {'a', 'b', 'c'}->removeAll(OrderedSet {'a', 'b', 'c'})->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_remove_all_sequence_2'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "removeAll": 1,
      "size": 1,
      "=": 1
    },
    "body": "Sequence {'a', 'b', 'c'}->removeAll(Set {'a', 'b', 'c'})->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_remove_all_sequence_3'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "removeAll": 1,
      "size": 1,
      "=": 1
    },
    "body": "Sequence {'a', 'b', 'c'}->removeAll(Bag {'a', 'b', 'c'})->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_remove_all_sequence_4'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "removeAll": 1,
      "size": 1,
      "=": 1
    },
    "body": "Sequence {'a', 'b', 'c'}->removeAll(Sequence {'a', 'b', 'c'})->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_remove_all_ordered_set_1'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "removeAll": 1,
      "size": 1,
      "=": 1
    },
    "body": "OrderedSet {'a', 'b', 'c'}->removeAll(OrderedSet {'a', 'b', 'c'})->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_remove_all_ordered_set_2'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "removeAll": 1,
      "size": 1,
      "=": 1
    },
    "body": "OrderedSet {'a', 'b', 'c'}->removeAll(Sequence {'a', 'b', 'c'})->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_remove_all_ordered_set_3'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "removeAll": 1,
      "size": 1,
      "=": 1
    },
    "body": "OrderedSet {'a', 'b', 'c'}->removeAll(Bag {'a', 'b', 'c'})->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_remove_all_ordered_set_4'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "removeAll": 1,
      "size": 1,
      "=": 1
    },
    "body": "OrderedSet {'a', 'b', 'c'}->removeAll(Set {'a', 'b', 'c'})->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_remove_all_set_1'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "removeAll": 1,
      "size": 1,
      "=": 1
    },
    "body": "Set {'a', 'b', 'c'}->removeAll(Set {'a', 'b', 'c'})->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_remove_all_set_2'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "removeAll": 1,
      "size": 1,
      "=": 1
    },
    "body": "Set {'a', 'b', 'c'}->removeAll(OrderedSet {'a', 'b', 'c'})->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_remove_all_set_3'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "removeAll": 1,
      "size": 1,
      "=": 1
    },
    "body": "Set {'a', 'b', 'c'}->removeAll(Sequence {'a', 'b', 'c'})->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_remove_all_set_4'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "removeAll": 1,
      "size": 1,
      "=": 1
    },
    "body": "Set {'a', 'b', 'c'}->removeAll(Bag {'a', 'b', 'c'})->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_remove_all_bag_1'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "removeAll": 1,
      "size": 1,
      "=": 1
    },
    "body": "Bag {'a', 'b', 'c'}->removeAll(Set {'a', 'b', 'c'})->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_remove_all_bag_2'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "removeAll": 1,
      "size": 1,
      "=": 1
    },
    "body": "Bag {'a', 'b', 'c'}->removeAll(OrderedSet {'a', 'b', 'c'})->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_remove_all_bag_3'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "removeAll": 1,
      "size": 1,
      "=": 1
    },
    "body": "Bag {'a', 'b', 'c'}->removeAll(Sequence {'a', 'b', 'c'})->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_remove_all_bag_4'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "removeAll": 1,
      "size": 1,
      "=": 1
    },
    "body": "Bag {'a', 'b', 'c'}->removeAll(Bag {'a', 'b', 'c'})->size().=(0)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 6,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_drop'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "drop": 1,
      "=": 1
    },
    "body": "Sequence {'a', 'b', 'c'}->drop(2)->=(Sequence {'c'})",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 4,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_drop_right'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "dropRight": 1,
      "=": 1
    },
    "body": "Sequence {'a', 'b', 'c'}->dropRight(2)->=(Sequence {'a'})",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 4,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_starts_with'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"startsWith": 1},
    "body": "Sequence {'a', 'b', 'c'}->startsWith(OrderedSet {'a', 'b'})",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 5,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_ends_with'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"endsWith": 1},
    "body": "Sequence {'a', 'b', 'c'}->endsWith(OrderedSet {'b', 'c'})",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 5,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_index_of_slice'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "indexOfSlice": 1,
      "=": 1
    },
    "body": "Sequence {'a', 'b', 'c', 'b', 'c'}->indexOfSlice(OrderedSet {'b', 'c'}).=(2)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 7,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'test_collection_last_index_of_slice'",
    "type": "FileUrl",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {
      "lastIndexOfSlice": 1,
      "=": 1
    },
    "body": "Sequence {'a', 'b', 'c', 'b', 'c'}->lastIndexOfSlice(OrderedSet {'b', 'c'}).=(4)",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 7,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  }
]
