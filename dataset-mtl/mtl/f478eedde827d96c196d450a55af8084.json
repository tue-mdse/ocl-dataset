[
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "parameter.<>(null)",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "NullLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "-": 1,
      "=": 1
    },
    "body": "parameter.upper.=(1.-())",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["upper"]
  },
  {
    "operations": {},
    "body": "self.type",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "self.isOrdered",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isOrdered"]
  },
  {
    "operations": {},
    "body": "parameter.type",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "self.isUnique",
    "type": "IfExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["isUnique"]
  },
  {
    "operations": {},
    "body": "parameter.type",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {},
    "body": "parameter.type",
    "type": "TemplateInvocationArgument",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"trim": 1},
    "body": "self.trim()",
    "type": "TemplatePost",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "getProperty": 1,
      "and": 1,
      "+": 1,
      "=": 1
    },
    "body": "type.namespace.name.=('datatype').and(self.getProperty('java.typeconversion.'.+(type.name)).<>(''))",
    "type": "IfExpression",
    "constructs": {
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "StringLiteralExpImpl": 3,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "namespace",
      "name"
    ]
  },
  {
    "operations": {},
    "body": "type.name",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "getProperty": 1,
      "+": 1
    },
    "body": "self.getProperty('java.typeconversion.'.+(type.name))",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "filter": 1,
      "not": 14,
      "and": 13,
      "asOrderedSet": 1,
      "endsWith": 13,
      "asSequence": 1,
      "startsWith": 1
    },
    "body": "operationsParameters(class)->collect(temp1 : Parameter | temp1.type)->filter(uml::Classifier)->select(temp2 : Classifier | temp2.name.endsWith('String').not().and(temp2.name.endsWith('Integer').not()).and(temp2.name.endsWith('Float').not()).and(temp2.name.endsWith('Long').not()).and(temp2.name.endsWith('Double').not()).and(temp2.name.endsWith('Boolean').not()).and(temp2.name.startsWith('byte').not()).and(temp2.name.endsWith('Object').not()).and(temp2.name.endsWith('integer').not()).and(temp2.name.endsWith('int').not()).and(temp2.name.endsWith('float').not()).and(temp2.name.endsWith('long').not()).and(temp2.name.endsWith('double').not()).and(temp2.name.endsWith('boolean').not()))->asOrderedSet()->asSequence()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 44,
      "VariableExpImpl": 16,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 14,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 15
    },
    "properties": [
      "name",
      "type"
    ]
  },
  {
    "operations": {
      "returnResult": 2,
      "union": 1,
      "notEmpty": 1,
      "asSequence": 1
    },
    "body": "class.ownedOperation->collect(temp1 : Operation | temp1.ownedParameter)->union(if class.ownedOperation->collect(temp2 : Operation | temp2.returnResult())->notEmpty() then class.ownedOperation->collect(temp3 : Operation | temp3.returnResult())->asSequence() else Sequence {} endif)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 3,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 6,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 4
    },
    "properties": [
      "ownedOperation",
      "ownedParameter"
    ]
  }
]
