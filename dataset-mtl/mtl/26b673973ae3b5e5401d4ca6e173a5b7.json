[
  {
    "operations": {"+": 2},
    "body": "packageDataPrefix(structure.protocol).+('.').+(structure.name)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "protocol",
      "name"
    ]
  },
  {
    "operations": {"+": 2},
    "body": "packageDataPrefix(enum.protocol).+('.').+(enum.name)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "protocol"
    ]
  },
  {
    "operations": {"+": 2},
    "body": "packageDataPrefix(message.protocol).+('.message.').+(message.name)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "name",
      "protocol"
    ]
  },
  {
    "operations": {
      "last": 1,
      "tokenize": 1
    },
    "body": "fullQualifiedClassName.tokenize('.')->last()",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "lastIndex": 1,
      "-": 1,
      "substring": 1
    },
    "body": "fullQualifiedClassName.substring(1, fullQualifiedClassName.lastIndex('.').-(1))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"+": 3},
    "body": "protocol.packagePrefix.+('.').+(protocol.name).+('.protocol.ngp.codec')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "packagePrefix",
      "name"
    ]
  },
  {
    "operations": {"+": 3},
    "body": "protocol.packagePrefix.+('.').+(protocol.name).+('.data')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "packagePrefix",
      "name"
    ]
  },
  {
    "operations": {"replaceAll": 1},
    "body": "packageName.replaceAll('\\.', '/')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "+": 1,
      "replaceAll": 1
    },
    "body": "fullQualifiedClassName.replaceAll('\\.', '/').+('.java')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "StringLiteralExpImpl": 3
    },
    "properties": []
  },
  {
    "operations": {
      "+": 4,
      "=": 2
    },
    "body": "if attribute.type.=(Protocol::Type::ORDERED) then 'java.util.List<'.+(baseTypeName(attribute)).+('>') else if attribute.type.=(Protocol::Type::UNIQUE) then 'java.util.Set<'.+(baseTypeName(attribute)).+('>') else baseTypeName(attribute) endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 5,
      "QueryInvocationSpec": 3,
      "EnumLiteralExpImpl": 2,
      "StringLiteralExpImpl": 4,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": ["type"]
  },
  {
    "operations": {
      "oclIsTypeOf": 10,
      "oclAsType": 2
    },
    "body": "if attribute.oclIsTypeOf(Protocol::StringAttribute) then 'String' else if attribute.oclIsTypeOf(Protocol::IntegerAttribute) then intTypeName(attribute) else if attribute.oclIsTypeOf(Protocol::LongAttribute) then longTypeName(attribute) else if attribute.oclIsTypeOf(Protocol::FloatAttribute) then floatTypeName(attribute) else if attribute.oclIsTypeOf(Protocol::BooleanAttribute) then booleanTypeName(attribute) else if attribute.oclIsTypeOf(Protocol::StructureAttribute) then fqn(attribute.oclAsType(Protocol::StructureAttribute).structure) else if attribute.oclIsTypeOf(Protocol::VariantAttribute) then 'org.eclipse.scada.core.Variant' else if attribute.oclIsTypeOf(Protocol::VariantMapAttribute) then 'java.util.Map<String, org.eclipse.scada.core.Variant>' else if attribute.oclIsTypeOf(Protocol::PropertiesAttribute) then 'java.util.Map<String, String>' else if attribute.oclIsTypeOf(Protocol::EnumAttribute) then fqnEnum(attribute.oclAsType(Protocol::EnumAttribute).enumType) else 'xxx' endif endif endif endif endif endif endif endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 12,
      "VariableExpImpl": 16,
      "QueryInvocationSpec": 6,
      "TypeExpImpl": 12,
      "StringLiteralExpImpl": 5,
      "IfExpImpl": 10,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "enumType",
      "structure"
    ]
  },
  {
    "operations": {"<>": 1},
    "body": "if attribute.type.<>(Protocol::Type::SCALAR) then 'Integer' else 'int' endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"<>": 1},
    "body": "if attribute.type.<>(Protocol::Type::SCALAR) then 'Boolean' else 'boolean' endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"<>": 1},
    "body": "if attribute.type.<>(Protocol::Type::SCALAR) then 'Long' else 'long' endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {"<>": 1},
    "body": "if attribute.type.<>(Protocol::Type::SCALAR) then 'Double' else 'double' endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "EnumLiteralExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["type"]
  },
  {
    "operations": {
      "not": 1,
      "or": 1
    },
    "body": "attributes->select(attribute : Attribute | attribute.transient.or(attribute.deleted).not())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "deleted",
      "transient"
    ]
  }
]
