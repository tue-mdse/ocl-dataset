[
  {
    "operations": {"isEmpty": 1},
    "body": "if Set {ne.name}->isEmpty() then '' else ne.name endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {"isEmpty": 1},
    "body": "if Set {ne.name}->isEmpty() then '' else ne.name endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["name"]
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "substituteAll": 5
    },
    "body": "if self.oclIsUndefined() then '' else self.substituteAll('&', '&amp;').substituteAll('\"', '&quot;').substituteAll(''', '&apos;').substituteAll('<', '&lt;').substituteAll('>', '&gt;') endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 2,
      "StringLiteralExpImpl": 11,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "substituteAll": 1
    },
    "body": "if self.oclIsUndefined() then '' else xmlSafe(self).substituteAll(' ', '_') endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 3,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "<>": 1,
      "or": 5,
      "oclIsUndefined": 1,
      "oclIsKindOf": 13,
      "eContainingFeature": 7,
      "isEmpty": 1,
      "+": 30,
      "oclAsType": 5,
      "asSequence": 1,
      "not": 1,
      "and": 1,
      "toString": 3,
      "notEmpty": 1,
      "indexOf": 2
    },
    "body": "if self.oclIsKindOf(uml::NamedElement) then let ne : NamedElement = self.oclAsType(uml::NamedElement) in if ne.oclIsKindOf(uml::Model).or(Set {ne.owner}->isEmpty()) then if ne.name.<>('OMG') then 'OMG.'.+(ne.name) else 'OMG' endif else if self.oclIsKindOf(uml::Feature).or(self.oclIsKindOf(uml::ValueSpecification)) then let shortID : String = if ne.owner.oclIsKindOf(uml::Slot) then '_'.+(ne.owner.oclAsType(uml::Slot).value->indexOf(ne).toString()).+('_').+(getName(ne)) else getName(ne) endif in getUUID(ne.owner).+('._').+(xmlSafeID(getName(self.eContainingFeature()))).+('.').+(xmlSafeID(shortID)).+(if self.oclIsKindOf(uml::BehavioralFeature) then self.oclAsType(uml::BehavioralFeature).ownedParameter->iterate(p : Parameter; acc : String = '' | acc.+('_').+(if Set {p.type}->notEmpty() then xmlSafeID(getName(p.type)) else '?' endif)) else '' endif) else getUUID(ne.owner).+('.').+(xmlSafeID(getName(ne))) endif endif else if self.eContainingFeature().oclIsUndefined().not().and(self.eContainingFeature().ordered) then let cntF : EStructuralFeature = self.eContainingFeature() in let idx : Integer = 0 in '***Rule#2***'.+(getUUID(self.owner)).+('._').+(getName(cntF)).+('.').+(idx.toString()) else if self.oclIsKindOf(uml::PackageImport).or(self.oclIsKindOf(uml::ElementImport)).or(self.oclIsKindOf(uml::PackageMerge)).or(self.oclIsKindOf(uml::Generalization)) then getUUID(self.owner).+('._').+(xmlSafeID(getName(self.eContainingFeature()))).+('.').+(getUUID(self.oclAsType(uml::DirectedRelationship).target->any(temp1 : Element | true))) else if self.oclIsKindOf(uml::Slot) then let s : Slot = self.oclAsType(uml::Slot) in getUUID(s.owner).+('.').+(xmlSafeID(getName(s.definingFeature))) else if self.oclIsKindOf(uml::ValueSpecification) then getUUID(self.owner).+('._').+(xmlSafeID(getName(self.eContainingFeature()))) else if self.oclIsKindOf(uml::Comment) then getUUID(self.owner).+('._').+(xmlSafeID(getName(self.eContainingFeature()))).+('.').+(self.owner.ownedComment->asSequence()->sortedBy(temp2 : Comment | temp2.body)->indexOf(self).toString()) else '***Unsupported***' endif endif endif endif endif endif",
    "type": "QueryExpression",
    "constructs": {
      "TypeExpImpl": 18,
      "StringLiteralExpImpl": 22,
      "PropertyCallExpImpl": 22,
      "IteratorExpImpl": 2,
      "VariableExpImpl": 49,
      "OperationCallExpImpl": 72,
      "LetExpImpl": 5,
      "QueryInvocationSpec": 26,
      "IntegerLiteralExpImpl": 1,
      "CollectionLiteralExpImpl": 2,
      "IterateExpImpl": 1,
      "IfExpImpl": 12,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "value",
      "ownedComment",
      "ordered",
      "definingFeature",
      "owner",
      "name",
      "body",
      "type",
      "target",
      "ownedParameter"
    ]
  },
  {
    "operations": {
      "concat": 1,
      ">": 1
    },
    "body": "if level.>(0) then let counter : Sequence(Integer) = Sequence {1..level} in counter->iterate(c : Integer; acc : String = '\n' | acc.concat('\t')) else '\n' endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 2,
      "LetExpImpl": 1,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 3,
      "IterateExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"oclIsUndefined": 1},
    "body": "if self.oclIsUndefined() then '' else getUUID(self) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "size": 2,
      "and": 1,
      "=": 1,
      "substring": 2,
      ">": 1
    },
    "body": "if uuid.size().>(5).and(uuid.substring(1, 3).=('OMG')) then uuid.substring(5, uuid.size()) else uuid endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 5,
      "OperationCallExpImpl": 7,
      "IntegerLiteralExpImpl": 4,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "+": 7
    },
    "body": "let indStr : String = indent(self,level) in if this.oclIsUndefined() then '' else indStr.+('<').+(tag).+('>').+(xmlSafe(self)).+('<\/').+(tag).+('>') endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 7,
      "OperationCallExpImpl": 8,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 5,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "+": 1,
      "eClass": 1
    },
    "body": "'uml:'.+(getName(self.eClass()))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"+": 6},
    "body": "let indStr : String = indent(self,level) in let idrefStr : String = ' xmi:idref=\"'.+(getXMI_ID(getGOID(self))).+('\"') in indStr.+('<').+(tag).+(idrefStr).+('/>')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 6,
      "LetExpImpl": 2,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {"+": 10},
    "body": "let indStr : String = indent(self,level) in let uuid : String = getGOID(self) in let idStr : String = ' xmi:id=\"'.+(getXMI_ID(uuid)).+('\"') in let uuidStr : String = '' in let typeIDStr : String = ' xmi:type=\"'.+(getTypeID(self)).+('\"') in let endStr : String = if isHeaderOnly then '>' else '/>' endif in indStr.+('<').+(tag).+(idStr).+(uuidStr).+(typeIDStr).+(endStr)",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 10,
      "VariableExpImpl": 12,
      "LetExpImpl": 6,
      "QueryInvocationSpec": 4,
      "StringLiteralExpImpl": 8,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "oclIsUndefined": 2,
      "toString": 2,
      "+": 10
    },
    "body": "let indStr : String = indent(self,level) in if self.upperValue.oclIsUndefined() then '' else generateTag(self.upperValue,'upperValue',true,level.+(1)).+(generateLiteral(self.upper.toString(),'value',level.+(1))).+(indStr).+('<\/upperValue>') endif.+(if self.lowerValue.oclIsUndefined() then '' else generateTag(self.lowerValue,'lowerValue',true,level).+(generateLiteral(self.lower.toString(),'value',level.+(1))).+(indStr).+('<\/lowerValue>') endif)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 14,
      "OperationCallExpImpl": 14,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 5,
      "IntegerLiteralExpImpl": 3,
      "StringLiteralExpImpl": 8,
      "IfExpImpl": 2,
      "BooleanLiteralExpImpl": 2,
      "PropertyCallExpImpl": 6
    },
    "properties": [
      "lowerValue",
      "upperValue",
      "lower",
      "upper"
    ]
  },
  {
    "operations": {
      "+": 5,
      "notEmpty": 2,
      "first": 2,
      "asSequence": 2
    },
    "body": "let indStr : String = indent(self,level) in if self.language->notEmpty() then generateLiteral(self.language->asSequence()->first(),'language',level) else '' endif.+(if self.body->notEmpty() then generateLiteral(self.body->asSequence()->first(),'body',level.+(1)) else '' endif).+(self.ownedComment->iterate(com : Comment; acc : String = '' | acc.+(generateComment(com,level.+(1)))))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 12,
      "OperationCallExpImpl": 11,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 4,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 5,
      "IterateExpImpl": 1,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "ownedComment",
      "body",
      "language"
    ]
  },
  {
    "operations": {
      "stringValue": 1,
      "oclIsKindOf": 3,
      "+": 8,
      "oclAsType": 2
    },
    "body": "let indStr : String = indent(self,level) in generateTag(self,kind,true,level).+(if self.oclIsKindOf(uml::LiteralSpecification) then generateLiteral(self.stringValue(),'value',level.+(1)) else if self.oclIsKindOf(uml::InstanceValue) then generateRefTag(self.oclAsType(uml::InstanceValue).instance,'instance',level.+(1)) else if self.oclIsKindOf(uml::OpaqueExpression) then generateOpaqueExpr(self.oclAsType(uml::OpaqueExpression),level.+(1)) else '*** unsupported Value ***' endif endif endif).+(indStr).+('<\/').+(kind).+('>')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 16,
      "OperationCallExpImpl": 14,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 5,
      "IntegerLiteralExpImpl": 3,
      "TypeExpImpl": 5,
      "StringLiteralExpImpl": 5,
      "IfExpImpl": 3,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["instance"]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "+": 6,
      "oclAsType": 1,
      "eClass": 1
    },
    "body": "let indStr : String = indent(self,level) in if self.oclIsKindOf(uml::OpaqueExpression) then let expr : OpaqueExpression = self.oclAsType(uml::OpaqueExpression) in generateTag(expr,'specification',true,level).+(generateOpaqueExpr(expr,level.+(1))).+(indStr).+('<\/specification>') else '\n***ERROR***: cannot generate '.+(getName(self.eClass())).+(' element\n') endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 10,
      "OperationCallExpImpl": 9,
      "LetExpImpl": 2,
      "QueryInvocationSpec": 4,
      "IntegerLiteralExpImpl": 1,
      "StringLiteralExpImpl": 4,
      "TypeExpImpl": 2,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"+": 7},
    "body": "let indStr : String = indent(self,level) in generateTag(self,'ownedComment',true,level).+(self.annotatedElement->iterate(ae : Element; acc : String = '' | acc.+(generateRefTag(ae,'annotatedElement',level.+(1))))).+(generateLiteral(self.body,'body',level.+(1))).+(indStr).+('<\/ownedComment>')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 11,
      "OperationCallExpImpl": 7,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 4,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 5,
      "IterateExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "annotatedElement",
      "body"
    ]
  },
  {
    "operations": {
      "+": 12,
      "notEmpty": 1
    },
    "body": "let indStr : String = indent(self,level) in generateTag(self,'ownedRule',true,level).+(if Set {self.name}->notEmpty() then generateLiteral(self.name,'name',level.+(1)) else '' endif).+(self.constrainedElement->iterate(ce : Element; acc : String = '' | acc.+(generateRefTag(ce,'constrainedElement',level.+(1))))).+(self.ownedComment->iterate(com : Comment; acc : String = '' | acc.+(generateComment(com,level.+(1))))).+(generateSpecification(self.specification,level.+(1))).+(indStr).+('<\/ownedRule>')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 13,
      "VariableExpImpl": 18,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 6,
      "IntegerLiteralExpImpl": 4,
      "StringLiteralExpImpl": 7,
      "CollectionLiteralExpImpl": 1,
      "IterateExpImpl": 2,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 5
    },
    "properties": [
      "ownedComment",
      "constrainedElement",
      "name",
      "specification"
    ]
  },
  {
    "operations": {
      "<>": 2,
      "or": 1,
      "trim": 2,
      "oclIsKindOf": 1,
      "+": 33,
      "notEmpty": 6,
      "=": 1
    },
    "body": "let pKind : String = if self.owner.oclIsKindOf(uml::Association) then 'ownedEnd' else 'ownedAttribute' endif in let indStr : String = indent(self,level) in generateTag(self,pKind,true,level).+(if Set {self.name}->notEmpty() then generateLiteral(self.name,'name',level.+(1)) else '' endif).+(self.ownedComment->iterate(com : Comment; acc : String = '' | acc.+(generateComment(com,level.+(1))))).+(if Set {self.type}->notEmpty() then generateRefTag(self.type,'type',level.+(1)) else '' endif).+(if self.isReadOnly then generateLiteral('true','isReadOnly',level.+(1)) else '' endif).+(if self.isDerived then generateLiteral('true','isDerived',level.+(1)) else '' endif).+(if self.isDerivedUnion then generateLiteral('true','isDerivedUnion',level.+(1)) else '' endif).+(if self.aggregation.=(uml::AggregationKind::composite) then generateLiteral('composite','aggregation',level.+(1)) else '' endif).+(if self.redefinedProperty->notEmpty() then let str : String = self.redefinedProperty->iterate(p : Property; acc : String = '' | acc.+(getXMI_ID(getGOID(p))).+(' ')) in generateLiteral(str.trim(),'redefinedProperty',level.+(1)) else '' endif).+(if self.subsettedProperty->notEmpty() then let str : String = self.subsettedProperty->iterate(p : Property; acc : String = '' | acc.+(getXMI_ID(getGOID(p))).+(' ')) in generateLiteral(str.trim(),'subsettedProperty',level.+(1)) else '' endif).+(if Set {self.association}->notEmpty() then generateRefTag(self.association,'association',level.+(1)) else '' endif).+(if self.upper.<>(1).or(self.lower.<>(1)) then generateMultiplicity(self,level.+(1)) else '' endif).+(if Set {self.defaultValue}->notEmpty() then generateValue(self.defaultValue,'defaultValue',level.+(1)) else '' endif).+(indStr).+('<\/').+(pKind).+('>')",
    "type": "QueryExpression",
    "constructs": {
      "StringLiteralExpImpl": 34,
      "TypeExpImpl": 1,
      "PropertyCallExpImpl": 20,
      "VariableExpImpl": 48,
      "OperationCallExpImpl": 46,
      "LetExpImpl": 4,
      "QueryInvocationSpec": 18,
      "EnumLiteralExpImpl": 1,
      "IntegerLiteralExpImpl": 14,
      "CollectionLiteralExpImpl": 4,
      "IterateExpImpl": 3,
      "IfExpImpl": 12,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "isDerived",
      "redefinedProperty",
      "owner",
      "isReadOnly",
      "isDerivedUnion",
      "name",
      "type",
      "subsettedProperty",
      "upper",
      "defaultValue",
      "ownedComment",
      "aggregation",
      "association",
      "lower"
    ]
  },
  {
    "operations": {
      "toString": 1,
      "+": 11,
      "notEmpty": 2
    },
    "body": "let indStr : String = indent(self,level) in generateTag(self,'ownedParameter',true,level).+(if Set {self.name}->notEmpty() then generateLiteral(self.name,'name',level.+(1)) else '' endif).+(if Set {self.type}->notEmpty() then generateRefTag(self.type,'type',level.+(1)) else '' endif).+(generateLiteral(self.direction.toString(),'direction',level.+(1))).+(self.ownedComment->iterate(com : Comment; acc : String = '' | acc.+(generateComment(com,level.+(1))))).+(indStr).+('<\/ownedParameter>')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 17,
      "OperationCallExpImpl": 14,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 6,
      "IntegerLiteralExpImpl": 4,
      "StringLiteralExpImpl": 8,
      "IterateExpImpl": 1,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 6,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "ownedComment",
      "name",
      "direction",
      "type"
    ]
  },
  {
    "operations": {
      "trim": 1,
      "+": 21,
      "notEmpty": 3
    },
    "body": "let indStr : String = indent(self,level) in generateTag(self,'ownedOperation',true,level).+(if Set {self.name}->notEmpty() then generateLiteral(self.name,'name',level.+(1)) else '' endif).+(if self.isQuery then generateLiteral('true','isQuery',level.+(1)) else '' endif).+(if self.redefinedOperation->notEmpty() then let str : String = self.redefinedOperation->iterate(op : Operation; acc : String = '' | acc.+(getXMI_ID(getGOID(op))).+(' ')) in generateLiteral(str.trim(),'redefinedOperation',level.+(1)) else '' endif).+(if Set {self.bodyCondition}->notEmpty() then generateRefTag(self.bodyCondition,'bodyCondition',level.+(1)) else '' endif).+(self.ownedComment->iterate(com : Comment; acc : String = '' | acc.+(generateComment(com,level.+(1))))).+(self.ownedRule->iterate(rule : Constraint; acc : String = '' | acc.+(generateConstraint(rule,level.+(1))))).+(self.ownedParameter->iterate(p : Parameter; acc : String = '' | acc.+(generateParameter(p,level.+(1))))).+(indStr).+('<\/ownedOperation>')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 31,
      "OperationCallExpImpl": 25,
      "LetExpImpl": 2,
      "QueryInvocationSpec": 11,
      "IntegerLiteralExpImpl": 7,
      "StringLiteralExpImpl": 16,
      "IterateExpImpl": 4,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 4,
      "PropertyCallExpImpl": 10,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "bodyCondition",
      "ownedComment",
      "isQuery",
      "name",
      "ownedRule",
      "redefinedOperation",
      "ownedParameter"
    ]
  },
  {
    "operations": {"+": 7},
    "body": "let indStr : String = indent(self,level) in generateTag(self,'generalization',true,level).+(generateRefTag(self.general,'general',level.+(1))).+(self.ownedComment->iterate(com : Comment; acc : String = '' | acc.+(generateComment(com,level.+(1))))).+(indStr).+('<\/generalization>')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 11,
      "OperationCallExpImpl": 7,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 4,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 4,
      "IterateExpImpl": 1,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "ownedComment",
      "general"
    ]
  },
  {
    "operations": {
      "+": 8,
      "notEmpty": 1
    },
    "body": "let indStr : String = indent(self,level) in generateTag(self,'packageImport',true,level).+(if Set {self.importedPackage.URI}->notEmpty() then generateLiteral(self.importedPackage.URI,'importedPackage',level.+(1)) else generateRefTag(self.importedPackage,'importedPackage',level.+(1)) endif).+(self.ownedComment->iterate(com : Comment; acc : String = '' | acc.+(generateComment(com,level.+(1))))).+(indStr).+('<\/packageImport>')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 14,
      "OperationCallExpImpl": 9,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 5,
      "IntegerLiteralExpImpl": 3,
      "StringLiteralExpImpl": 5,
      "CollectionLiteralExpImpl": 1,
      "IterateExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 6,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "ownedComment",
      "URI",
      "importedPackage"
    ]
  },
  {
    "operations": {
      "+": 7,
      "notEmpty": 1
    },
    "body": "let indStr : String = indent(self,level) in generateTag(self,'ownedLiteral',true,level).+(if Set {self.name}->notEmpty() then generateLiteral(self.name,'name',level.+(1)) else '' endif).+(self.ownedComment->iterate(com : Comment; acc : String = '' | acc.+(generateComment(com,level.+(1))))).+(indStr).+('<\/ownedLiteral>')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 12,
      "OperationCallExpImpl": 8,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 4,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 5,
      "IterateExpImpl": 1,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "BooleanLiteralExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "ownedComment",
      "name"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 1,
      "+": 2
    },
    "body": "if self.oclIsKindOf(uml::Profile) then getName(self) else getStereotypeNSPath(self.nestingPackage).+('.').+(getName(self)) endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 3,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 3,
      "StringLiteralExpImpl": 1,
      "TypeExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["nestingPackage"]
  },
  {
    "operations": {
      "oclIsUndefined": 1,
      "oclIsKindOf": 1,
      "getStereotypeApplication": 1,
      "toString": 1,
      "+": 20,
      "oclAsType": 2,
      "=": 1,
      "eGet": 4,
      "eClass": 2
    },
    "body": "let indStr : String = indent(self,level) in let uuid : String = getGOID(base).+('._appliedStereotype.').+(getName(self)) in let sta : EObject = base.getStereotypeApplication(self) in let idStr : String = ' xmi:id=\"'.+(getXMI_ID(uuid)).+('\"') in let uuidStr : String = '' in let xmlElemType : String = getStereotypeNSPath(self.namespace.oclAsType(uml::Package)).+(':').+(getName(self)) in let baseName : String = getName(sta.eClass().eAllStructuralFeatures->any(f : EStructuralFeature | sta.eGet(f).=(base))) in indStr.+('<').+(xmlElemType).+(idStr).+(uuidStr).+('/>').+(sta.eClass().eAllStructuralFeatures->iterate(f : EStructuralFeature; acc : String = '' | if sta.eGet(f).oclIsUndefined() then acc else if f.oclIsKindOf(ecore::EReference) then acc.+(generateRefTag(sta.eGet(f).oclAsType(uml::Element),getName(f),level.+(1))) else acc.+(generateLiteral(sta.eGet(f).toString(),getName(f),level.+(1))) endif endif)).+(indStr).+('<\/').+(xmlElemType).+('>')",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 33,
      "VariableExpImpl": 34,
      "LetExpImpl": 7,
      "QueryInvocationSpec": 11,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 10,
      "TypeExpImpl": 3,
      "IterateExpImpl": 1,
      "IfExpImpl": 2,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "namespace",
      "eAllStructuralFeatures"
    ]
  },
  {
    "operations": {"+": 7},
    "body": "let indStr : String = indent(self,level) in generateTag(self,'slot',true,level).+(generateRefTag(self.definingFeature,'definingFeature',level.+(1))).+(self.value->iterate(v : ValueSpecification; acc : String = '' | acc.+(generateValue(v,'value',level.+(1))))).+(indStr).+('<\/slot>')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 7,
      "VariableExpImpl": 11,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 4,
      "IntegerLiteralExpImpl": 2,
      "StringLiteralExpImpl": 5,
      "IterateExpImpl": 1,
      "PropertyCallExpImpl": 2,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "value",
      "definingFeature"
    ]
  },
  {
    "operations": {
      "oclIsKindOf": 10,
      "+": 43,
      "notEmpty": 1,
      "oclAsType": 13,
      "eClass": 2
    },
    "body": "let indStr : String = indent(self,level) in generateTag(self,'packagedElement',true,level).+(if Set {self.name}->notEmpty() then generateLiteral(self.name,'name',level.+(1)) else '' endif).+(if self.oclIsKindOf(uml::Package) then generateLiteral(self.oclAsType(uml::Package).URI,'URI',level.+(1)) else '' endif).+(self.ownedComment->iterate(j : Comment; acc : String = '' | acc.+(generateComment(j,level.+(1))))).+(if self.oclIsKindOf(uml::Namespace) then self.oclAsType(uml::Namespace).ownedRule->iterate(j : Constraint; acc : String = '' | acc.+(generateConstraint(j,level.+(1)))).+(self.oclAsType(uml::Namespace).packageImport->iterate(j : PackageImport; acc : String = '' | acc.+(generateImport(j,level.+(1))))).+(if self.oclIsKindOf(uml::Package) then self.oclAsType(uml::Package).packagedElement->iterate(j : PackageableElement; acc : String = '' | acc.+(generatePackagedElement(j,level.+(1)))) else if self.oclIsKindOf(uml::Classifier) then self.oclAsType(uml::Classifier).generalization->iterate(j : Generalization; acc : String = '' | acc.+(generateGeneralization(j,level.+(1)))).+(if self.oclIsKindOf(uml::Class) then self.oclAsType(uml::Class).ownedAttribute->iterate(j : Property; acc : String = '' | acc.+(generateProperty(j,level.+(1)))).+(self.oclAsType(uml::Class).ownedOperation->iterate(j : Operation; acc : String = '' | acc.+(generateOperation(j,level.+(1))))) else if self.oclIsKindOf(uml::Enumeration) then self.oclAsType(uml::Enumeration).ownedLiteral->iterate(j : EnumerationLiteral; acc : String = '' | acc.+(generateEnumLiteral(j,level.+(1)))) else if self.oclIsKindOf(uml::DataType) then self.oclAsType(uml::DataType).ownedAttribute->iterate(j : Property; acc : String = '' | acc.+(generateProperty(j,level.+(1)))).+(self.oclAsType(uml::DataType).ownedOperation->iterate(j : Operation; acc : String = '' | acc.+(generateOperation(j,level.+(1))))) else if self.oclIsKindOf(uml::Signal) then self.oclAsType(uml::Signal).ownedAttribute->iterate(j : Property; acc : String = '' | acc.+(generateProperty(j,level.+(1)))) else if self.oclIsKindOf(uml::Association) then self.oclAsType(uml::Association).ownedEnd->iterate(j : Property; acc : String = '' | acc.+(generateProperty(j,level.+(1)))) else '\n***ERROR***: cannot generate '.+(getName(self.eClass())).+(' element\n') endif endif endif endif endif) else '\n***ERROR***: cannot generate '.+(getName(self.eClass())).+(' element\n') endif endif) else if self.oclIsKindOf(uml::InstanceSpecification) then self.oclAsType(uml::InstanceSpecification).slot->iterate(s : Slot; acc : String = '' | acc.+(generateSlot(s,level.+(1)))) else '' endif endif).+(indStr).+('<\/packagedElement>')",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 74,
      "OperationCallExpImpl": 69,
      "LetExpImpl": 1,
      "QueryInvocationSpec": 19,
      "IntegerLiteralExpImpl": 15,
      "TypeExpImpl": 23,
      "StringLiteralExpImpl": 24,
      "CollectionLiteralExpImpl": 1,
      "IterateExpImpl": 13,
      "IfExpImpl": 11,
      "PropertyCallExpImpl": 16,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "ownedAttribute",
      "packageImport",
      "name",
      "generalization",
      "ownedComment",
      "ownedAttribute",
      "ownedAttribute",
      "ownedLiteral",
      "packagedElement",
      "ownedOperation",
      "ownedEnd",
      "ownedOperation",
      "URI",
      "ownedRule",
      "slot"
    ]
  },
  {
    "operations": {"+": 6},
    "body": "'\t<mofext:Tag xmi:id=\"'.+(getXMI_ID(getGOID(self))).+('._moftag\" xmi:type=\"mofext:Tag\">').+(generateLiteral(name,'name',2)).+(generateLiteral(value,'value',2)).+(generateRefTag(self,'element',2)).+('\n\t<\/mofext:Tag>')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 6,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 5,
      "IntegerLiteralExpImpl": 3,
      "StringLiteralExpImpl": 6
    },
    "properties": []
  }
]
