[
  {
    "operations": {
      "notEmpty": 1,
      "first": 1
    },
    "body": "if aResource.extends->notEmpty() then aResource.extends->first() else null endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "NullLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["extends"]
  },
  {
    "operations": {
      "union": 1,
      "notEmpty": 1
    },
    "body": "if Set {directParentResource(aResource)}->notEmpty() then Set {directParentResource(aResource)}->union(parentResources(directParentResource(aResource))) else Set {} endif",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 4,
      "CollectionLiteralExpImpl": 3,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "flatten": 1,
      "asOrderedSet": 2,
      "union": 1
    },
    "body": "aResource.extends->union(aResource.extends->collectNested(r : Resource | allExtendingResources(r))->flatten()->asOrderedSet())->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": ["extends"]
  },
  {
    "operations": {
      "flatten": 1,
      "asOrderedSet": 3,
      "union": 1,
      "-": 1
    },
    "body": "directInterfaceResources(aResource)->union(directInterfaceResources(aResource)->collectNested(r : Resource | allExtendingResources(r))->flatten()->asOrderedSet())->asOrderedSet()->-(parentResources(aResource))->asOrderedSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 4,
      "OperationCallExpImpl": 6,
      "QueryInvocationSpec": 4
    },
    "properties": []
  },
  {
    "operations": {
      "size": 2,
      "subOrderedSet": 1,
      ">": 1
    },
    "body": "if aResource.extends->size().>(1) then aResource.extends->subOrderedSet(2, aResource.extends->size()) else OrderedSet {} endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 4,
      "IntegerLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 3
    },
    "properties": ["extends"]
  },
  {
    "operations": {
      "flatten": 2,
      "union": 1,
      "asSet": 2
    },
    "body": "aResource.resourceProperties->collect(p : ResourceProperty | p.range)->flatten()->asSet()->union(aResource.extends)->flatten()->asSet()",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 5,
      "VariableExpImpl": 3,
      "PropertyCallExpImpl": 3
    },
    "properties": [
      "extends",
      "resourceProperties",
      "range"
    ]
  },
  {
    "operations": {
      "flatten": 1,
      "union": 4,
      "+": 1,
      "asSet": 1,
      "-": 2,
      ">": 1
    },
    "body": "let drr : Set(Resource) = directlyRelatedResources(aResource) in let newAlreadyAnalysed : Set(Resource) = Set {aResource}->union(drr)->union(alreadyAnalysed) in let toAnalyse : Set(Resource) = drr->-(alreadyAnalysed) in if depth.>(20) then drr->-(alreadyAnalysed) else toAnalyse->collect(r : Resource | allRelatedResources(r,newAlreadyAnalysed,depth.+(1))->union(directlyRelatedResources(r))->union(Set {r}))->flatten()->asSet() endif",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 10,
      "VariableExpImpl": 15,
      "LetExpImpl": 3,
      "QueryInvocationSpec": 3,
      "IntegerLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 2,
      "IfExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "flatten": 2,
      "union": 3,
      "asSet": 2,
      "-": 1
    },
    "body": "let arr : Set(Resource) = allRelatedResources(aResource,Set {},1) in let leftOut : Set(Resource) = arr->collect(r : Resource | directlyRelatedResources(r)->-(arr))->flatten()->asSet() in arr->union(leftOut)->union(leftOut->collect(r : Resource | allRelatedResources(r,arr->union(Set {r}),1))->flatten()->asSet())",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 2,
      "OperationCallExpImpl": 8,
      "VariableExpImpl": 10,
      "LetExpImpl": 2,
      "QueryInvocationSpec": 3,
      "IntegerLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 2
    },
    "properties": []
  },
  {
    "operations": {
      "union": 2,
      "asSequence": 1
    },
    "body": "aResource.resourceProperties->asSequence()->union(inheritedProperties(aResource))->union(interfaceProperties(aResource))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 3,
      "QueryInvocationSpec": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["resourceProperties"]
  },
  {
    "operations": {
      "not": 1,
      "oclIsUndefined": 1,
      "union": 1,
      "asSequence": 1
    },
    "body": "if directParentResource(aResource).oclIsUndefined().not() then directParentResource(aResource).resourceProperties->asSequence()->union(inheritedProperties(directParentResource(aResource))) else Sequence {} endif",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 4,
      "QueryInvocationSpec": 4,
      "CollectionLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["resourceProperties"]
  },
  {
    "operations": {},
    "body": "interfaceResources(aResource)->collect(temp1 : Resource | temp1.resourceProperties)",
    "type": "QueryExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["resourceProperties"]
  },
  {
    "operations": {},
    "body": "javaString(aResource.name)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "javaString(aResource.name,toUpperFirst)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "QueryInvocationSpec": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["name"]
  },
  {
    "operations": {},
    "body": "javaName(aResource,false)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "javaClassBaseNamespace(anAdaptorInterface).concat('.resources')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "javaName(aResource,true)",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "javaClassPackageName(aResource,anAdaptorInterface).concat('.').concat(javaClassName(aResource))",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 3,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "substituteAll": 1,
      "concat": 3
    },
    "body": "concatenatePaths(javaFilesBasePath(anAdaptorInterface),javaClassPackageName(aResource,anAdaptorInterface).substituteAll('.', '/')).concat('/').concat(javaClassName(aResource)).concat('.java')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 4,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "javaClassBaseNamespace(anAdaptorInterface).concat('.resources')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "'I'.concat(javaName(aResource,true))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1,
      "BooleanLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {"concat": 2},
    "body": "javaInterfacePackageName(aResource,anAdaptorInterface).concat('.').concat(javaInterfaceName(aResource))",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 3,
      "OperationCallExpImpl": 2,
      "QueryInvocationSpec": 2,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {
      "substituteAll": 1,
      "concat": 3
    },
    "body": "concatenatePaths(javaFilesBasePath(anAdaptorInterface),javaInterfacePackageName(aResource,anAdaptorInterface).substituteAll('.', '/')).concat('/').concat(javaInterfaceName(aResource)).concat('.java')",
    "type": "QueryExpression",
    "constructs": {
      "OperationCallExpImpl": 4,
      "VariableExpImpl": 4,
      "QueryInvocationSpec": 4,
      "StringLiteralExpImpl": 4
    },
    "properties": []
  }
]
