[
  {
    "operations": {"invoke": 1},
    "body": "self.invoke('cellularautomata.acceleo.generateLatex.Utility', 'getBaseFilename(vm.Universe)', Sequence {u})",
    "type": "QueryExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "StringLiteralExpImpl": 2,
      "CollectionLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "'UTF-8'",
    "type": "FileCharset",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"concat": 1},
    "body": "getBaseFilename(anUniverse).concat('.tex')",
    "type": "FileUrl",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "QueryInvocationSpec": 1,
      "StringLiteralExpImpl": 1
    },
    "properties": []
  },
  {
    "operations": {},
    "body": "anUniverse",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {},
    "body": "anUniverse",
    "type": "QueryInvocationArgument",
    "constructs": {"VariableExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"size": 1},
    "body": "self.cells->size()",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cells"]
  },
  {
    "operations": {
      "size": 1,
      "=": 1
    },
    "body": "self.cells->select(temp1 : Cell | temp1.val.=(0))->size()",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 2,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "cells",
      "val"
    ]
  },
  {
    "operations": {
      "size": 1,
      ">": 1
    },
    "body": "self.cells->select(temp1 : Cell | temp1.val.>(1))->size()",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "cells",
      "val"
    ]
  },
  {
    "operations": {},
    "body": "', '",
    "type": "ForEach",
    "constructs": {"StringLiteralExpImpl": 1},
    "properties": []
  },
  {
    "operations": {"<>": 1},
    "body": "anUniverse.cells->select(temp1 : Cell | temp1.val.<>(0))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "cells",
      "val"
    ]
  },
  {
    "operations": {"indexOf": 1},
    "body": "anUniverse.cells->indexOf(aCell)",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cells"]
  },
  {
    "operations": {"<>": 1},
    "body": "anUniverse.cells->select(temp1 : Cell | temp1.val.<>(0))",
    "type": "ForIter",
    "constructs": {
      "IteratorExpImpl": 1,
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "cells",
      "val"
    ]
  },
  {
    "operations": {"indexOf": 1},
    "body": "anUniverse.cells->indexOf(aCell)",
    "type": "TemplateExpression",
    "constructs": {
      "OperationCallExpImpl": 1,
      "VariableExpImpl": 2,
      "PropertyCallExpImpl": 1
    },
    "properties": ["cells"]
  },
  {
    "operations": {},
    "body": "aCell.val",
    "type": "TemplateExpression",
    "constructs": {
      "VariableExpImpl": 1,
      "PropertyCallExpImpl": 1
    },
    "properties": ["val"]
  },
  {
    "operations": {
      "<>": 1,
      "size": 1
    },
    "body": "aCell.neighbors->select(temp1 : Cell | temp1.val.<>(0))->size()",
    "type": "TemplateExpression",
    "constructs": {
      "IteratorExpImpl": 1,
      "VariableExpImpl": 2,
      "OperationCallExpImpl": 2,
      "IntegerLiteralExpImpl": 1,
      "PropertyCallExpImpl": 2
    },
    "properties": [
      "val",
      "neighbors"
    ]
  }
]
