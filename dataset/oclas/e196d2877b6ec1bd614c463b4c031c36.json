[
  {
    "name": "Type",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Priority",
    "expressions": [],
    "properties": []
  },
  {
    "name": "MapElement",
    "expressions": [],
    "properties": [
      "Map",
      "name"
    ]
  },
  {
    "name": "Relationship",
    "expressions": [],
    "properties": [
      "source",
      "target",
      "type"
    ]
  },
  {
    "name": "Topic",
    "expressions": [
      {
        "operations": {"oclAsSet": 1},
        "name": "allSubTopics",
        "body": "self->closure(subtopics)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["mindmap::Topic::subtopics"]
      },
      {
        "operations": {">=": 1},
        "name": "EndAfterStart",
        "body": "self.end >= self.start",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "mindmap::Topic::start",
          "mindmap::Topic::end"
        ]
      }
    ],
    "properties": [
      "start",
      "parent",
      "Relationship",
      "Relationship",
      "Map",
      "end",
      "description",
      "Topic",
      "subtopics",
      "priority",
      "Topic"
    ]
  },
  {
    "name": "Map",
    "expressions": [
      {
        "operations": {
          "oclIsKindOf": 1,
          "asOrderedSet": 2,
          "asSet": 2,
          "oclAsType": 1,
          "symmetricDifference": 1
        },
        "name": "rootTopics",
        "body": "let topics : Set(mindmap::Topic) =\n\t\t\tself.elements->select(oclIsKindOf(mindmap::Topic))->\n\t\t\tcollect(oclAsType(mindmap::Topic))->asSet() in topics->asOrderedSet()->\n\t\t\tsymmetricDifference(topics.subtopics->asSet())->asOrderedSet()",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 7,
          "LetExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "mindmap::Map::elements",
          "mindmap::Topic::subtopics"
        ]
      },
      {
        "operations": {
          "not": 1,
          "oclIsUndefined": 1
        },
        "name": "mustHaveTitle",
        "body": "not title.oclIsUndefined()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["mindmap::Map::title"]
      }
    ],
    "properties": [
      "created",
      "elements",
      "title",
      "rootTopics"
    ]
  }
]
