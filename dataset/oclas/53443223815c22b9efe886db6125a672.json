[
  {
    "name": "ValueSpecification",
    "expressions": [],
    "properties": [
      "Expression",
      "InstanceSpecification",
      "Slot",
      "MultiplicityElement",
      "MultiplicityElement",
      "Property",
      "Constraintx"
    ]
  },
  {
    "name": "Expression",
    "expressions": [],
    "properties": [
      "operand",
      "symbol"
    ]
  },
  {
    "name": "Enumeration",
    "expressions": [],
    "properties": ["ownedLiteral"]
  },
  {
    "name": "LiteralUnlimitedNatural",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "UnlimitedNatural",
    "expressions": [],
    "properties": []
  },
  {
    "name": "MultiplicityElement",
    "expressions": [],
    "properties": [
      "upper",
      "upperValue",
      "lowerValue",
      "isUnique",
      "isOrdered",
      "lower"
    ]
  },
  {
    "name": "AggregationKind",
    "expressions": [],
    "properties": []
  },
  {
    "name": "TypedElement",
    "expressions": [],
    "properties": ["type"]
  },
  {
    "name": "Feature",
    "expressions": [],
    "properties": [
      "isStatic",
      "featuringClassifier"
    ]
  },
  {
    "name": "Namespace",
    "expressions": [],
    "properties": [
      "importedMember",
      "ownedMember",
      "ownedRule",
      "member",
      "elementImport",
      "packageImport"
    ]
  },
  {
    "name": "StringExpression",
    "expressions": [],
    "properties": [
      "NamedElement",
      "owningExpression",
      "subExpression"
    ]
  },
  {
    "name": "NamedElement",
    "expressions": [
      {
        "operations": {
          "allNamespaces": 1,
          "or": 1,
          "oclAsSet": 3,
          "isEmpty": 3,
          "implies": 1,
          "notEmpty": 1
        },
        "name": "has_no_qualified_name",
        "body": "Tuple {\n\tmessage : String = 'If there is no name, or one of the containing namespaces has no name, there is no qualified name.',\n\tstatus : Boolean = self.name.oclAsSet()->isEmpty() or self.allNamespaces()->select(ns : Namespace | ns.name.oclAsSet()->isEmpty())->notEmpty() implies self.qualifiedName.oclAsSet()->isEmpty()\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 10,
          "VariableExpImpl": 4,
          "TupleLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "RefUML::NamedElement::name",
          "$$::Tuple::status",
          "RefUML::NamedElement::qualifiedName"
        ]
      },
      {
        "operations": {},
        "name": "separator",
        "body": "'::'",
        "type": "OperationImpl",
        "constructs": {"StringLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {
          "oclAsSet": 2,
          "isEmpty": 2,
          "implies": 1
        },
        "name": "visibility_needs_ownership",
        "body": "Tuple {\n\tmessage : String = 'If a NamedElement is not owned by a Namespace, it does not have a visibility.',\n\tstatus : Boolean = namespace.oclAsSet()->isEmpty() implies visibility.oclAsSet()->isEmpty()\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 2,
          "TupleLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "$$::Tuple::status",
          "RefUML::NamedElement::visibility",
          "RefUML::NamedElement::namespace"
        ]
      },
      {
        "operations": {
          "allNamespaces": 2,
          "or": 1,
          "isEmpty": 2,
          "oclAsSet": 2,
          "concat": 2,
          "notEmpty": 1,
          "separator": 1
        },
        "name": "qualifiedName",
        "body": "if name.oclAsSet()->isEmpty() or allNamespaces()->select(ns : Namespace | ns.name.oclAsSet()->isEmpty())->notEmpty() then null else allNamespaces()->iterate(ns : Namespace ; all : String = name | ns.name.concat(separator()).concat(all)) endif",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 8,
          "OperationCallExpImpl": 11,
          "NullLiteralExpImpl": 1,
          "IterateExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": ["RefUML::NamedElement::name"]
      }
    ],
    "properties": [
      "name",
      "nameExpression",
      "clientDependency",
      "visibility",
      "namespace",
      "Namespace",
      "Classifier",
      "qualifiedName",
      "Dependency"
    ]
  },
  {
    "name": "RedefinableElement",
    "expressions": [],
    "properties": [
      "redefinedElement",
      "redefinitionContext",
      "isLeaf",
      "RedefinableElement"
    ]
  },
  {
    "name": "StructuralFeature",
    "expressions": [],
    "properties": [
      "Slot",
      "isReadOnly"
    ]
  },
  {
    "name": "PackageableElement",
    "expressions": [],
    "properties": [
      "visibility",
      "ElementImport",
      "Package",
      "Namespace"
    ]
  },
  {
    "name": "Comment",
    "expressions": [],
    "properties": [
      "annotatedElement",
      "Element",
      "body"
    ]
  },
  {
    "name": "VisibilityKind",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Association",
    "expressions": [],
    "properties": [
      "endType",
      "navigableOwnedEnd",
      "memberEnd",
      "isDerived",
      "ownedEnd"
    ]
  },
  {
    "name": "Classifier",
    "expressions": [{
      "operations": {
        "allParents": 1,
        "union": 1,
        "parents": 2
      },
      "name": "allParents",
      "body": "self.parents()->union(self.parents()->collect(p : Classifier | p.allParents()))",
      "type": "OperationImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "OperationCallExpImpl": 4,
        "VariableExpImpl": 3
      },
      "properties": []
    }],
    "properties": [
      "RedefinableElement",
      "attribute",
      "Generalization",
      "isAbstract",
      "powertypeExtent",
      "general",
      "redefinedClassifier",
      "Class",
      "Classifier",
      "feature",
      "inheritedMember",
      "InstanceSpecification",
      "Classifier",
      "generalization"
    ]
  },
  {
    "name": "Element",
    "expressions": [
      {
        "operations": {
          "mustBeOwned": 1,
          "oclAsSet": 1,
          "implies": 1,
          "notEmpty": 1
        },
        "name": "has_owner",
        "body": "Tuple {\n\tmessage : String = 'Elements that must be owned must have an owner.',\n\tstatus : Boolean = self.mustBeOwned() implies owner.oclAsSet()->notEmpty()\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 4,
          "TupleLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "$$::Tuple::status",
          "RefUML::Element::owner"
        ]
      },
      {
        "operations": {
          "allOwnedElements": 1,
          "union": 1
        },
        "name": "allOwnedElements",
        "body": "ownedElement->union(ownedElement->collect(e : Element | e.allOwnedElements()))",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": ["RefUML::Element::ownedElement"]
      },
      {
        "operations": {
          "not": 1,
          "allOwnedElements": 1,
          "includes": 1
        },
        "name": "not_own_self",
        "body": "Tuple {\n\tmessage : String = 'An element may not directly or indirectly own itself.',\n\tstatus : Boolean = not self.allOwnedElements()->includes(self)\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "TupleLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["$$::Tuple::status"]
      }
    ],
    "properties": [
      "Relationship",
      "Comment",
      "owner",
      "DirectedRelationship",
      "DirectedRelationship",
      "ownedComment",
      "Constraintx",
      "ownedElement"
    ]
  },
  {
    "name": "Package",
    "expressions": [],
    "properties": [
      "ownedType",
      "PackageImport",
      "packageMerge",
      "packagedElement",
      "nestedPackage",
      "PackageMerge",
      "nestingPackage"
    ]
  },
  {
    "name": "Integer",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Generalization",
    "expressions": [],
    "properties": [
      "generalizationSet",
      "specific",
      "isSubstitutable",
      "general"
    ]
  },
  {
    "name": "LiteralSpecification",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Constraintx",
    "expressions": [],
    "properties": [
      "constrainedElement",
      "context",
      "specification"
    ]
  },
  {
    "name": "PrimitiveType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "PackageMerge",
    "expressions": [],
    "properties": [
      "mergedPackage",
      "receivingPackage"
    ]
  },
  {
    "name": "String",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Relationship",
    "expressions": [{
      "operations": {
        "oclIsKindOf": 2,
        "union": 1,
        "oclAsType": 3
      },
      "name": "relatedElement",
      "body": "if self.oclIsKindOf(DirectedRelationship) then self.oclAsType(DirectedRelationship).source->union(self.oclAsType(DirectedRelationship).target) else if self.oclIsKindOf(Association) then self.oclAsType(Association).endType else null endif endif",
      "type": "PropertyImpl",
      "constructs": {
        "VariableExpImpl": 5,
        "OperationCallExpImpl": 6,
        "NullLiteralExpImpl": 1,
        "TypeExpImpl": 5,
        "IfExpImpl": 2,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "RefUML::DirectedRelationship::target",
        "RefUML::Association::endType",
        "RefUML::DirectedRelationship::source"
      ]
    }],
    "properties": ["relatedElement"]
  },
  {
    "name": "LiteralString",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "Property",
    "expressions": [],
    "properties": [
      "Property",
      "isComposite",
      "owningAssociation",
      "isDerived",
      "subsettedProperty",
      "association",
      "isReadOnly",
      "datatype",
      "defaultValue",
      "Property",
      "Classifier",
      "class",
      "default",
      "Association",
      "isDerivedUnion",
      "aggregation",
      "redefinedProperty",
      "Property",
      "opposite"
    ]
  },
  {
    "name": "Slot",
    "expressions": [],
    "properties": [
      "value",
      "definingFeature",
      "owningInstance"
    ]
  },
  {
    "name": "GeneralizationSet",
    "expressions": [],
    "properties": [
      "generalization",
      "powertype",
      "isDisjoint",
      "isCovering"
    ]
  },
  {
    "name": "Boolean",
    "expressions": [],
    "properties": []
  },
  {
    "name": "LiteralBoolean",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "PackageImport",
    "expressions": [],
    "properties": [
      "importedPackage",
      "visibility",
      "importingNamespace"
    ]
  },
  {
    "name": "Type",
    "expressions": [],
    "properties": [
      "Association",
      "TypedElement",
      "package"
    ]
  },
  {
    "name": "ElementImport",
    "expressions": [],
    "properties": [
      "alias",
      "importedElement",
      "visibility",
      "importingNamespace"
    ]
  },
  {
    "name": "DirectedRelationship",
    "expressions": [
      {
        "operations": {
          "oclIsKindOf": 1,
          "oclAsType": 1
        },
        "name": "target",
        "body": "if self.oclIsKindOf(Generalization) then Set{self.oclAsType(Generalization).general} else null endif",
        "type": "PropertyImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "NullLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RefUML::Generalization::general"]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "oclAsType": 1
        },
        "name": "source",
        "body": "if self.oclIsKindOf(Generalization) then Set{self.oclAsType(Generalization).specific} else null endif",
        "type": "PropertyImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "NullLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RefUML::Generalization::specific"]
      }
    ],
    "properties": [
      "target",
      "source"
    ]
  },
  {
    "name": "Dependency",
    "expressions": [],
    "properties": [
      "client",
      "supplier"
    ]
  },
  {
    "name": "DataType",
    "expressions": [],
    "properties": ["ownedAttribute"]
  },
  {
    "name": "LiteralNull",
    "expressions": [],
    "properties": []
  },
  {
    "name": "InstanceValue",
    "expressions": [],
    "properties": ["instance"]
  },
  {
    "name": "EnumerationLiteral",
    "expressions": [],
    "properties": ["enumeration"]
  },
  {
    "name": "Model",
    "expressions": [],
    "properties": ["viewpoint"]
  },
  {
    "name": "InstanceSpecification",
    "expressions": [],
    "properties": [
      "specification",
      "classifier",
      "slot",
      "InstanceValue"
    ]
  },
  {
    "name": "Class",
    "expressions": [],
    "properties": [
      "nestedClassifier",
      "isActive",
      "superClass",
      "ownedAttribute",
      "isAbstract",
      "ownedAttribute",
      "Class"
    ]
  },
  {
    "name": "LiteralInteger",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "OpaqueExpression",
    "expressions": [],
    "properties": [
      "language",
      "body"
    ]
  }
]
