[
  {
    "name": "DataStructure",
    "expressions": [],
    "properties": [
      "abstract",
      "ServiceContract",
      "DataStructure",
      "ServiceContract",
      "superType",
      "features",
      "Association"
    ]
  },
  {
    "name": "TerminalActivity",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ConditionalActivity",
    "expressions": [],
    "properties": [
      "blocking",
      "Choice",
      "condition"
    ]
  },
  {
    "name": "PreCondition",
    "expressions": [],
    "properties": [
      "ServiceContract",
      "exception"
    ]
  },
  {
    "name": "DataType",
    "expressions": [],
    "properties": [
      "Variable",
      "ResponsibilityDomain",
      "constraints"
    ]
  },
  {
    "name": "RaiseException",
    "expressions": [],
    "properties": [
      "exception",
      "exceptionObject"
    ]
  },
  {
    "name": "Expression",
    "expressions": [],
    "properties": [
      "language",
      "expressionString",
      "Query",
      "Constraint"
    ]
  },
  {
    "name": "ReturnResult",
    "expressions": [],
    "properties": ["resultVariable"]
  },
  {
    "name": "ForAll",
    "expressions": [],
    "properties": [
      "concurrent",
      "query"
    ]
  },
  {
    "name": "ActivitySequence",
    "expressions": [],
    "properties": ["activities"]
  },
  {
    "name": "Assign",
    "expressions": [],
    "properties": []
  },
  {
    "name": "While",
    "expressions": [],
    "properties": ["condition"]
  },
  {
    "name": "Aggregation",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ContainerActivity",
    "expressions": [],
    "properties": ["activity"]
  },
  {
    "name": "Remove",
    "expressions": [],
    "properties": ["target"]
  },
  {
    "name": "Association",
    "expressions": [],
    "properties": ["relatedType"]
  },
  {
    "name": "Activity",
    "expressions": [],
    "properties": [
      "Choice",
      "Concurrency",
      "ContainerActivity",
      "ActivitySequence"
    ]
  },
  {
    "name": "Condition",
    "expressions": [],
    "properties": [
      "inverse",
      "FunctionalRequirement",
      "ConditionRequirement",
      "Wait",
      "ResponsibilityDomain",
      "Condition",
      "ConditionalActivity",
      "While"
    ]
  },
  {
    "name": "ManipulateVariable",
    "expressions": [],
    "properties": [
      "to",
      "source"
    ]
  },
  {
    "name": "Constraint",
    "expressions": [],
    "properties": [
      "constraintExpression",
      "DataType"
    ]
  },
  {
    "name": "Create",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Model",
    "expressions": [],
    "properties": ["responsibilityDomains"]
  },
  {
    "name": "Element",
    "expressions": [],
    "properties": ["annotations"]
  },
  {
    "name": "VariableProduction",
    "expressions": [],
    "properties": ["producedVariable"]
  },
  {
    "name": "Query",
    "expressions": [],
    "properties": [
      "Remove",
      "ManipulateVariable",
      "ManipulateVariable",
      "queryExpression",
      "ForAll"
    ]
  },
  {
    "name": "ExceptionHandler",
    "expressions": [],
    "properties": [
      "RequestService",
      "exception"
    ]
  },
  {
    "name": "Concurrency",
    "expressions": [],
    "properties": ["concurrentActivities"]
  },
  {
    "name": "RequestService",
    "expressions": [],
    "properties": [
      "requestedService",
      "exceptionHandlers",
      "requestVariable"
    ]
  },
  {
    "name": "PostCondition",
    "expressions": [],
    "properties": ["ServiceContract"]
  },
  {
    "name": "QualityRequirement",
    "expressions": [],
    "properties": [
      "ServiceContract",
      "qualityConstraint"
    ]
  },
  {
    "name": "Service",
    "expressions": [],
    "properties": [
      "functionalRequirements",
      "resultVariable",
      "ResponsibilityDomain",
      "realizedContract",
      "requestVariable"
    ]
  },
  {
    "name": "MultiplicityConstraint",
    "expressions": [],
    "properties": ["Feature"]
  },
  {
    "name": "Wait",
    "expressions": [],
    "properties": ["until"]
  },
  {
    "name": "ConcurrentActivity",
    "expressions": [],
    "properties": ["blocking"]
  },
  {
    "name": "Exception",
    "expressions": [],
    "properties": [
      "PreCondition",
      "ExceptionHandler",
      "RaiseException"
    ]
  },
  {
    "name": "Annotation",
    "expressions": [],
    "properties": [
      "language",
      "content",
      "Element"
    ]
  },
  {
    "name": "Composition",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ResponsibilityDomain",
    "expressions": [],
    "properties": [
      "ResponsibilityDomain",
      "Requirement",
      "dataTypes",
      "responsibilityDomains",
      "Model",
      "conditions",
      "servicesContracts",
      "services"
    ]
  },
  {
    "name": "RangeMultiplicity",
    "expressions": [],
    "properties": [
      "maxOccurs",
      "minOccurs"
    ]
  },
  {
    "name": "Many",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Feature",
    "expressions": [],
    "properties": [
      "multiplicityConstraint",
      "DataStructure"
    ]
  },
  {
    "name": "ConditionRequirement",
    "expressions": [],
    "properties": [
      "FunctionalRequirement",
      "condition"
    ]
  },
  {
    "name": "Attribute",
    "expressions": [],
    "properties": ["type"]
  },
  {
    "name": "BasicDataType",
    "expressions": [],
    "properties": ["Attribute"]
  },
  {
    "name": "QualityConstraint",
    "expressions": [],
    "properties": ["QualityRequirement"]
  },
  {
    "name": "Requirement",
    "expressions": [],
    "properties": ["requiredBy"]
  },
  {
    "name": "Add",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ServiceContract",
    "expressions": [
      {
        "operations": {
          "size": 4,
          "and": 1,
          "toUpperCase": 1,
          "concat": 1,
          "-": 1,
          "=": 2,
          "substring": 4
        },
        "name": "resultClassNameEqualsServiceNamePlusResult",
        "body": "\n\t\t  (self.request.name.substring(self.request.name.size()-5,self.request.name.size()) = 'Result')\n\t\t  and\n\t\t  (self.request.name.substring(1,self.name.size()) = self.name.substring(1,1).toUpperCase().concat\n\t\t  (self.name.substring(2,self.name.size())))",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 14,
          "VariableExpImpl": 8,
          "IntegerLiteralExpImpl": 5,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 12
        },
        "properties": [
          "urdad::NamedElement::name",
          "urdad::ServiceContract::request"
        ]
      },
      {
        "operations": {
          "size": 4,
          "and": 1,
          "toUpperCase": 1,
          "concat": 1,
          "=": 2,
          "-": 1,
          "substring": 4
        },
        "name": "requestClassNameEqualsServiceNamePlusRequest",
        "body": "\n\t\t  (self.request.name.substring(self.request.name.size()-6,self.request.name.size()) = 'Request')\n\t\t  and\n\t\t  (self.request.name.substring(1,self.name.size()) = self.name.substring(1,1).toUpperCase().concat\n\t\t  (self.name.substring(2,self.name.size())))",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 8,
          "OperationCallExpImpl": 14,
          "IntegerLiteralExpImpl": 5,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 12
        },
        "properties": [
          "urdad::NamedElement::name",
          "urdad::ServiceContract::request"
        ]
      }
    ],
    "properties": [
      "postCondition",
      "ServiceContract",
      "FunctionalRequirement",
      "ResponsibilityDomain",
      "preCondition",
      "qualityRequirements",
      "Service",
      "inverseService",
      "result",
      "request",
      "RequestService"
    ]
  },
  {
    "name": "NamedElement",
    "expressions": [],
    "properties": ["name"]
  },
  {
    "name": "If",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ElementWithOptionalName",
    "expressions": [],
    "properties": ["name"]
  },
  {
    "name": "FunctionalRequirement",
    "expressions": [],
    "properties": [
      "requiredService",
      "Service",
      "condition",
      "usedToAddress"
    ]
  },
  {
    "name": "Choice",
    "expressions": [],
    "properties": [
      "conditionalActivities",
      "elseActivity"
    ]
  },
  {
    "name": "Variable",
    "expressions": [],
    "properties": [
      "type",
      "VariableProduction",
      "RaiseException",
      "Service",
      "Service",
      "ReturnResult",
      "RequestService"
    ]
  }
]
