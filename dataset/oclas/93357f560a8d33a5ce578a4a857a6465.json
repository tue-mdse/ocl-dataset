[
  {
    "name": "Statemachine",
    "expressions": [{
      "operations": {},
      "name": "HasInitialState",
      "body": "states->exists(s | s.initial)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 2,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "states::State::initial",
        "states::Statemachine::states"
      ]
    }],
    "properties": [
      "value",
      "Module",
      "CompoundState",
      "initial",
      "name",
      "events",
      "states"
    ]
  },
  {
    "name": "SimpleState",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "CompoundState",
    "expressions": [],
    "properties": ["machine"]
  },
  {
    "name": "State",
    "expressions": [{
      "operations": {
        "toUpperCase": 1,
        "oclBadOperation": 1,
        "=": 1
      },
      "name": "NameIsLeadingUpperCase",
      "body": "let firstLetter : String = invalid.substring(1, 1) in firstLetter.toUpperCase() = firstLetter",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 3,
        "VariableExpImpl": 2,
        "LetExpImpl": 1,
        "InvalidLiteralExpImpl": 1
      },
      "properties": []
    }],
    "properties": [
      "name",
      "transitions",
      "initial",
      "Transition",
      "Statemachine"
    ]
  },
  {
    "name": "Event",
    "expressions": [],
    "properties": [
      "Statemachine",
      "name",
      "Transition"
    ]
  },
  {
    "name": "Module",
    "expressions": [],
    "properties": [
      "name",
      "machines"
    ]
  },
  {
    "name": "Transition",
    "expressions": [],
    "properties": [
      "event",
      "state",
      "State"
    ]
  }
]
