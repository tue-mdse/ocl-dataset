[
  {
    "name": "Menu",
    "expressions": [
      {
        "operations": {
          "sum": 1,
          "calcularPrecio": 1
        },
        "name": "calcularPrecio",
        "body": "preparaciones.calcularPrecio()->sum()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["nutrio::Menu::preparaciones"]
      },
      {
        "operations": {
          "and": 3,
          "includes": 4
        },
        "name": "LeyDeLaCalidad",
        "body": "\n\t\t\tself.preparaciones.ingredientes.grupo->includes(GrupoAlimenticio::FRUTAS) and\n\t\t\tself.preparaciones.ingredientes.grupo->includes(GrupoAlimenticio::VERDURAS) and\n\t\t\tself.preparaciones.ingredientes.grupo->includes(GrupoAlimenticio::CEREALES) and\n\t\t\tself.preparaciones.ingredientes.grupo->includes(GrupoAlimenticio::PROTEINAS)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 8,
          "OperationCallExpImpl": 7,
          "VariableExpImpl": 12,
          "EnumLiteralExpImpl": 4,
          "PropertyCallExpImpl": 12
        },
        "properties": [
          "nutrio::Menu::preparaciones",
          "nutrio::AlimentoBase::grupo",
          "nutrio::Preparacion::ingredientes"
        ]
      },
      {
        "operations": {
          "<=": 3,
          "calcularLipidos": 1,
          "calcularProteinas": 1,
          "and": 5,
          "calcularEnergia": 6,
          "*": 9,
          "calcularCarbohidratos": 1,
          ">=": 3
        },
        "name": "LeyDeLaArmonia",
        "body": "\n\t\t\tlet energiaCarbs = self.calcularCarbohidratos() * 4 in\n\t\t\t\t\t(energiaCarbs >= self.calcularEnergia()*0.50) and (energiaCarbs <= self.calcularEnergia()*0.70) and\n\t\t\tlet energiaProts = self.calcularProteinas() * 4 in\n\t\t\t\t\t(energiaProts >= self.calcularEnergia()*0.10) and (energiaProts <= self.calcularEnergia()*0.20) and\n\t\t\tlet energiaLips = self.calcularLipidos() * 9 in\n\t\t\t\t\t(energiaLips >= self.calcularEnergia()*0.25) and (energiaLips <= self.calcularEnergia()*0.35)",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 15,
          "OperationCallExpImpl": 29,
          "LetExpImpl": 3,
          "RealLiteralExpImpl": 6,
          "IntegerLiteralExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {
          "<=": 1,
          "and": 2,
          "intersection": 2,
          "isEmpty": 1,
          "notEmpty": 1,
          "calcularPrecio": 1
        },
        "name": "LeyDeLaAdequacion",
        "body": "\n\t\t\tself.preparaciones.ingredientes->intersection(self.usuario.intolerables)->isEmpty() and\n  \t\t\tself.preparaciones.ingredientes->intersection(self.usuario.favoritos)->notEmpty()  and\n  \t\t\tself.calcularPrecio() <= self.usuario.presupuesto",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 8,
          "VariableExpImpl": 8,
          "PropertyCallExpImpl": 10
        },
        "properties": [
          "nutrio::Usuario::intolerables",
          "nutrio::Usuario::favoritos",
          "nutrio::Menu::preparaciones",
          "nutrio::Usuario::presupuesto",
          "nutrio::Menu::usuario",
          "nutrio::Preparacion::ingredientes"
        ]
      },
      {
        "operations": {
          "calcularEnergia": 1,
          "sum": 1
        },
        "name": "calcularEnergia",
        "body": "preparaciones.calcularEnergia()->sum()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["nutrio::Menu::preparaciones"]
      },
      {
        "operations": {
          "sum": 1,
          "calcularCarbohidratos": 1
        },
        "name": "calcularCarbohidratos",
        "body": "preparaciones.calcularCarbohidratos()->sum()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["nutrio::Menu::preparaciones"]
      },
      {
        "operations": {
          "calcularProteinas": 1,
          "sum": 1
        },
        "name": "calcularProteinas",
        "body": "preparaciones.calcularProteinas()->sum()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["nutrio::Menu::preparaciones"]
      },
      {
        "operations": {
          "calcularLipidos": 1,
          "sum": 1
        },
        "name": "calcularLipidos",
        "body": "preparaciones.calcularLipidos()->sum()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["nutrio::Menu::preparaciones"]
      },
      {
        "operations": {
          "calcularGET": 2,
          "<=": 1,
          "and": 1,
          "calcularEnergia": 2,
          "*": 2,
          ">=": 1
        },
        "name": "LeyDeLaCantidad",
        "body": "\n\t\t\t(self.calcularEnergia() >= self.usuario.calcularGET() * 0.90) and \n\t\t\t(self.calcularEnergia() <= self.usuario.calcularGET() * 1.10)",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 9,
          "VariableExpImpl": 4,
          "RealLiteralExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": ["nutrio::Menu::usuario"]
      }
    ],
    "properties": [
      "preparaciones",
      "usuario"
    ]
  },
  {
    "name": "MomentoDelDia",
    "expressions": [],
    "properties": []
  },
  {
    "name": "AlimentoBase",
    "expressions": [],
    "properties": [
      "Usuario",
      "Preparacion",
      "precio",
      "nombre",
      "unidad",
      "lipidos",
      "gramos",
      "cantidad",
      "grupo",
      "Usuario",
      "energia",
      "carbohidratos",
      "proteinas"
    ]
  },
  {
    "name": "TipoPreparacion",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Preparacion",
    "expressions": [
      {
        "operations": {"sum": 1},
        "name": "calcularEnergia",
        "body": "ingredientes.energia->sum()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "nutrio::Preparacion::ingredientes",
          "nutrio::AlimentoBase::energia"
        ]
      },
      {
        "operations": {"sum": 1},
        "name": "calcularProteinas",
        "body": "ingredientes.proteinas->sum()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "nutrio::Preparacion::ingredientes",
          "nutrio::AlimentoBase::proteinas"
        ]
      },
      {
        "operations": {"sum": 1},
        "name": "calcularCarbohidratos",
        "body": "ingredientes.carbohidratos->sum()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "nutrio::Preparacion::ingredientes",
          "nutrio::AlimentoBase::carbohidratos"
        ]
      },
      {
        "operations": {"sum": 1},
        "name": "calcularLipidos",
        "body": "ingredientes.lipidos->sum()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "nutrio::Preparacion::ingredientes",
          "nutrio::AlimentoBase::lipidos"
        ]
      },
      {
        "operations": {"sum": 1},
        "name": "calcularPrecio",
        "body": "ingredientes.precio->sum()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "nutrio::Preparacion::ingredientes",
          "nutrio::AlimentoBase::precio"
        ]
      }
    ],
    "properties": [
      "tecnicaDePreparacion",
      "ingredientes",
      "momentoDelDia",
      "nombre",
      "tipo",
      "Menu"
    ]
  },
  {
    "name": "UnidadDeMedida",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Genero",
    "expressions": [],
    "properties": []
  },
  {
    "name": "GrupoAlimenticio",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Usuario",
    "expressions": [
      {
        "operations": {
          "*": 3,
          "=": 3,
          "calcularGEB": 3
        },
        "name": "calcularGAF",
        "body": "if (self.actFisica = ActividadFisica::LIGERA) then\n\t\t\t\t\tself.calcularGEB() * 0.12\n\t\t\t\telse if (self.actFisica = ActividadFisica::MODERADA) then\n\t\t\t\t\tself.calcularGEB() * 0.27\n\t\t\t\telse if (self.actFisica = ActividadFisica::INTENSA) then\n\t\t\t\t\tself.calcularGEB() * 0.54\n\t\t\t\telse\n\t\t\t\t\t0\n\t\t\t\tendif endif endif",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 9,
          "EnumLiteralExpImpl": 3,
          "RealLiteralExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "IfExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": ["nutrio::Usuario::actFisica"]
      },
      {
        "operations": {"=": 1},
        "name": "UsuarioSano",
        "body": "self.conPatologias = false",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": ["nutrio::Usuario::conPatologias"]
      },
      {
        "operations": {
          "*": 6,
          "+": 3,
          "-": 3,
          "=": 1
        },
        "name": "calcularGEB",
        "body": "if (self.genero = Genero::FEMENINO) then\n\t\t\t\t\t(10 * self.peso) + (6.25 * self.estatura) - (5 * self.edad) - 161\n\t\t\t\telse\n\t\t\t\t\t(10 * self.peso) + (6.25 * self.estatura) - (5 * self.edad) + 5\n\t\t\t\tendif",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 7,
          "OperationCallExpImpl": 13,
          "IntegerLiteralExpImpl": 6,
          "RealLiteralExpImpl": 2,
          "EnumLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "nutrio::Usuario::estatura",
          "nutrio::Usuario::peso",
          "nutrio::Usuario::genero",
          "nutrio::Usuario::edad"
        ]
      },
      {
        "operations": {
          "<=": 1,
          "and": 1,
          ">=": 1
        },
        "name": "UsuarioEnEstatura",
        "body": "self.estatura >= 142 and self.estatura<=191",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": ["nutrio::Usuario::estatura"]
      },
      {
        "operations": {
          "calcularGAF": 1,
          "+": 2,
          "calcularETA": 1,
          "calcularGEB": 1
        },
        "name": "calcularGET",
        "body": "self.calcularGEB() + self.calcularETA() + self.calcularGAF()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {
          "<=": 1,
          "calcularPT": 2,
          "and": 1,
          "*": 2,
          ">=": 1
        },
        "name": "UsuarioEnPeso",
        "body": "(self.peso >= self.calcularPT() * 0.90) and \n\t\t                         (self.peso <= self.calcularPT() * 1.10)",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 7,
          "RealLiteralExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": ["nutrio::Usuario::peso"]
      },
      {
        "operations": {
          "*": 1,
          "calcularGEB": 1
        },
        "name": "calcularETA",
        "body": "self.calcularGEB() * 0.10",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "RealLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "<=": 1,
          "and": 1,
          ">=": 1
        },
        "name": "UsuarioAdulto",
        "body": "self.edad >= 18 and self.edad <= 60",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": ["nutrio::Usuario::edad"]
      },
      {
        "operations": {
          "*": 1,
          "+": 1,
          "-": 1
        },
        "name": "calcularPT",
        "body": "(self.estatura - 150) * 0.75 + 50",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 2,
          "RealLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["nutrio::Usuario::estatura"]
      }
    ],
    "properties": [
      "actFisica",
      "intolerables",
      "favoritos",
      "estatura",
      "peso",
      "presupuesto",
      "Menu",
      "conPatologias",
      "genero",
      "edad",
      "nombre"
    ]
  },
  {
    "name": "ActividadFisica",
    "expressions": [],
    "properties": []
  }
]
