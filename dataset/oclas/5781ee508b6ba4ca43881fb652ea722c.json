[
  {
    "name": "Function",
    "expressions": [{
      "operations": {
        "<>": 2,
        "and": 1,
        "implies": 1,
        "=": 1
      },
      "name": "uniqueNamesIfSameDatatype",
      "body": "self.inParameter->forAll(c1, c2 | (c1<>c2 and c1.datatype.name = c2.datatype.name) implies c1.name <> c2.name)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "OperationCallExpImpl": 5,
        "VariableExpImpl": 7,
        "PropertyCallExpImpl": 7
      },
      "properties": [
        "statesml::Function::inParameter",
        "statesml::Parameter::name",
        "statesml::DataType::name",
        "statesml::Parameter::datatype"
      ]
    }],
    "properties": [
      "inParameter",
      "DataType",
      "SystemUnits",
      "name",
      "returnParameter",
      "Node"
    ]
  },
  {
    "name": "Node",
    "expressions": [],
    "properties": [
      "StatesML",
      "name",
      "function",
      "edge"
    ]
  },
  {
    "name": "Event",
    "expressions": [],
    "properties": [
      "StatesML",
      "name"
    ]
  },
  {
    "name": "State",
    "expressions": [],
    "properties": [
      "selectiondivergence",
      "transition",
      "isInitial",
      "SelectionConvergence",
      "isTerminal"
    ]
  },
  {
    "name": "Parameter",
    "expressions": [{
      "operations": {
        "allInstances": 1,
        "includes": 1
      },
      "name": "dataTypeContainsInLibrary",
      "body": "DataTypeLibrary.allInstances().datatype.name->includes(self.datatype.name)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "VariableExpImpl": 3,
        "OperationCallExpImpl": 2,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "statesml::DataType::name",
        "statesml::Parameter::datatype",
        "statesml::DataTypeLibrary::datatype"
      ]
    }],
    "properties": [
      "Function",
      "name",
      "datatype",
      "Function"
    ]
  },
  {
    "name": "DataTypeLibrary",
    "expressions": [{
      "operations": {
        "<>": 2,
        "implies": 1
      },
      "name": "uniqueDataTypeNames",
      "body": "self.datatype->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 5,
        "OperationCallExpImpl": 3,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "statesml::DataType::name",
        "statesml::DataTypeLibrary::datatype"
      ]
    }],
    "properties": [
      "name",
      "datatype",
      "StatesML"
    ]
  },
  {
    "name": "Edge",
    "expressions": [],
    "properties": [
      "name",
      "node",
      "StatesML"
    ]
  },
  {
    "name": "Trigger",
    "expressions": [],
    "properties": ["changeevent"]
  },
  {
    "name": "SystemUnits",
    "expressions": [],
    "properties": [
      "attribute",
      "function",
      "StatesML",
      "SystemUnitLibrariy",
      "name"
    ]
  },
  {
    "name": "ChangeEvent",
    "expressions": [],
    "properties": [
      "isFulfilled",
      "Transition",
      "Trigger"
    ]
  },
  {
    "name": "SelectionDivergence",
    "expressions": [{
      "operations": {
        "oclIsUndefined": 1,
        "size": 1,
        "=": 1
      },
      "name": "everyTransitionIsTriggered",
      "body": "self.transition -> select(t:Transition|t.trigger.oclIsUndefined()) -> size() = 0",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 3,
        "IntegerLiteralExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "statesml::SelectionDivergence::transition",
        "statesml::Transition::trigger"
      ]
    }],
    "properties": [
      "transition",
      "State"
    ]
  },
  {
    "name": "Transition",
    "expressions": [],
    "properties": [
      "state",
      "SelectionDivergence",
      "trigger",
      "selectionconvergence"
    ]
  },
  {
    "name": "SystemUnitLibrariy",
    "expressions": [],
    "properties": [
      "StatesML",
      "systemunits",
      "name"
    ]
  },
  {
    "name": "StatesML",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "=": 1,
          "oclAsType": 1
        },
        "name": "singleInitialState",
        "body": "self.node -> select(n:Node|n.oclIsKindOf(State) and n.oclAsType(State).isInitial) -> size()= 1",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "statesml::StatesML::node",
          "statesml::State::isInitial"
        ]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "and": 1,
          "isEmpty": 1,
          "oclAsType": 1
        },
        "name": "noFunctionsInTerminalState",
        "body": "self.node -> select(n:Node|n.oclIsKindOf(State) and n.oclAsType(State).isTerminal).function -> isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 4,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "statesml::StatesML::node",
          "statesml::Node::function",
          "statesml::State::isTerminal"
        ]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "and": 1,
          "isEmpty": 1,
          "oclAsType": 1
        },
        "name": "noFunctionsInInitialState",
        "body": "self.node -> select(n:Node|n.oclIsKindOf(State) and n.oclAsType(State).isInitial).function -> isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 4,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "statesml::StatesML::node",
          "statesml::Node::function",
          "statesml::State::isInitial"
        ]
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "=": 1,
          "oclAsType": 1
        },
        "name": "initialStateHasOneEdge",
        "body": "node -> select(n:Node|n.oclIsKindOf(State) and n.oclAsType(State).isInitial).edge -> size() = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 4,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "statesml::StatesML::node",
          "statesml::State::isInitial",
          "statesml::Node::edge"
        ]
      },
      {
        "operations": {
          "<>": 2,
          "implies": 1
        },
        "name": "uniqueSystemUnitNames",
        "body": "self.systemunits->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "statesml::StatesML::systemunits",
          "statesml::SystemUnits::name"
        ]
      }
    ],
    "properties": [
      "datatypelibrary",
      "event",
      "node",
      "systemunits",
      "edge",
      "systemunitlibrariy",
      "attribute"
    ]
  },
  {
    "name": "SelectionConvergence",
    "expressions": [],
    "properties": [
      "state",
      "Transition"
    ]
  },
  {
    "name": "DataType",
    "expressions": [],
    "properties": [
      "function",
      "name",
      "DataTypeLibrary",
      "Parameter",
      "Attribute"
    ]
  },
  {
    "name": "Attribute",
    "expressions": [],
    "properties": [
      "SystemUnits",
      "name",
      "StatesML",
      "datatype"
    ]
  }
]
