[
  {
    "name": "TextLength",
    "expressions": [],
    "properties": []
  },
  {
    "name": "View",
    "expressions": [],
    "properties": [
      "header",
      "ViewGroup",
      "description",
      "name",
      "ViewGroup"
    ]
  },
  {
    "name": "Operator",
    "expressions": [],
    "properties": []
  },
  {
    "name": "DVML",
    "expressions": [],
    "properties": [
      "domainModel",
      "viewModel"
    ]
  },
  {
    "name": "ClassOperationView",
    "expressions": [],
    "properties": [
      "Link",
      "instance",
      "viewElements",
      "layout"
    ]
  },
  {
    "name": "CompositeCondition",
    "expressions": [
      {
        "operations": {
          "and": 1,
          "=": 2
        },
        "name": "sameResult",
        "body": "\n\t\t\t(self.cond1.result = self.result and self.cond2.result = self.result)",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "views::CompositeCondition::cond2",
          "views::Condition::result",
          "views::CompositeCondition::cond1"
        ]
      },
      {
        "operations": {"<>": 1},
        "name": "diffConditions",
        "body": "self.cond1 <> self.cond2",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "views::CompositeCondition::cond2",
          "views::CompositeCondition::cond1"
        ]
      }
    ],
    "properties": [
      "cond2",
      "operatorType",
      "cond1"
    ]
  },
  {
    "name": "ColumnSet",
    "expressions": [],
    "properties": [
      "columns",
      "TableViewElement",
      "buttons"
    ]
  },
  {
    "name": "Layout",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Column",
    "expressions": [{
      "operations": {
        "oclIsTypeOf": 1,
        "oclAsSet": 2,
        "includes": 1,
        "oclAsType": 1,
        "oclContainer": 1
      },
      "name": "isPropertyMemberOfClass",
      "body": "\n\t\t(self -> closure(oclContainer()) -> select(oclIsTypeOf(TableViewElement))).oclAsType(TableViewElement)\n\t\t -> forAll((classRef->closure(superclass)).properties->includes(self.propertyRef))",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 6,
        "OperationCallExpImpl": 6,
        "VariableExpImpl": 8,
        "TypeExpImpl": 2,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "views::Class::properties",
        "views::Column::propertyRef",
        "views::ViewAssociationElement::classRef",
        "views::Class::superclass"
      ]
    }],
    "properties": [
      "propertyRef",
      "header",
      "ColumnSet"
    ]
  },
  {
    "name": "DomainModel",
    "expressions": [
      {
        "operations": {"allInstances": 1},
        "name": "uniqueEnumerationNames",
        "body": "Enumeration.allInstances()->isUnique(name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["views::Type::name"]
      },
      {
        "operations": {
          "<>": 2,
          "implies": 1
        },
        "name": "uniqueClassNames",
        "body": "self.classes->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 5,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "views::Type::name",
          "views::DomainModel::classes"
        ]
      },
      {
        "operations": {
          "<>": 2,
          "implies": 1
        },
        "name": "uniquedataTypeNames",
        "body": "self.dataTypes->forAll(c1, c2 | c1 <> c2 implies c1.name <> c2.name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 5,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "views::DomainModel::dataTypes",
          "views::Type::name"
        ]
      },
      {
        "operations": {"allInstances": 1},
        "name": "uniqueAssociationNames",
        "body": "Association.allInstances()->isUnique(name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["views::Association::name"]
      }
    ],
    "properties": [
      "dataTypes",
      "enumerations",
      "DVML",
      "associations",
      "classes"
    ]
  },
  {
    "name": "Enumeration",
    "expressions": [{
      "operations": {},
      "name": "uniqueLiteral",
      "body": "self.literals->isUnique(name)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 2,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "views::EnumLiteral::name",
        "views::Enumeration::literals"
      ]
    }],
    "properties": [
      "literals",
      "DomainModel"
    ]
  },
  {
    "name": "Visibility",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ViewGroup",
    "expressions": [],
    "properties": [
      "ViewModel",
      "name",
      "ViewModel",
      "startView",
      "views"
    ]
  },
  {
    "name": "ClassIndexView",
    "expressions": [],
    "properties": [
      "list",
      "classRef"
    ]
  },
  {
    "name": "Type",
    "expressions": [],
    "properties": [
      "Property",
      "name"
    ]
  },
  {
    "name": "Property",
    "expressions": [],
    "properties": [
      "Class",
      "name",
      "type",
      "multiplicityUpperBound",
      "ViewPropertyElement",
      "Column",
      "Association",
      "Association",
      "Class",
      "multiplicityLowerBound"
    ]
  },
  {
    "name": "DataType",
    "expressions": [],
    "properties": [
      "type",
      "DomainModel"
    ]
  },
  {
    "name": "Association",
    "expressions": [
      {
        "operations": {">=": 1},
        "name": "lowerConstrBegin",
        "body": "self.begin.multiplicityLowerBound >= 0",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "views::Association::begin",
          "views::Property::multiplicityLowerBound"
        ]
      },
      {
        "operations": {"oclIsTypeOf": 1},
        "name": "correctTypeEnd",
        "body": "self.end.type.oclIsTypeOf(Class)",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "views::Property::type",
          "views::Association::end"
        ]
      },
      {
        "operations": {
          "<=": 1,
          "or": 1,
          "and": 1,
          "=": 1,
          "-": 1,
          ">": 1
        },
        "name": "upperConstrBegin",
        "body": "self.begin.multiplicityUpperBound = -1 \n\t\t\tor (self.begin.multiplicityLowerBound <= self.begin.multiplicityUpperBound and self.begin.multiplicityUpperBound > 0)",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 6,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 8
        },
        "properties": [
          "views::Association::begin",
          "views::Property::multiplicityUpperBound",
          "views::Property::multiplicityLowerBound"
        ]
      },
      {
        "operations": {">=": 1},
        "name": "lowerConstrEnd",
        "body": "self.end.multiplicityLowerBound >= 0",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "views::Association::end",
          "views::Property::multiplicityLowerBound"
        ]
      },
      {
        "operations": {
          "<=": 1,
          "or": 1,
          "and": 1,
          "-": 1,
          "=": 1,
          ">": 1
        },
        "name": "upperConstrEnd",
        "body": "self.end.multiplicityUpperBound = -1 \n\t\t\tor (self.end.multiplicityLowerBound <= self.end.multiplicityUpperBound and self.end.multiplicityUpperBound > 0)",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 4,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 8
        },
        "properties": [
          "views::Property::multiplicityUpperBound",
          "views::Association::end",
          "views::Property::multiplicityLowerBound"
        ]
      },
      {
        "operations": {"oclIsTypeOf": 1},
        "name": "correctTypeBegin",
        "body": "self.begin.type.oclIsTypeOf(Class)",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "views::Association::begin",
          "views::Property::type"
        ]
      }
    ],
    "properties": [
      "begin",
      "Class",
      "DomainModel",
      "name",
      "Class",
      "end",
      "composition"
    ]
  },
  {
    "name": "SelectionValue",
    "expressions": [],
    "properties": [
      "SelectionViewElement",
      "value"
    ]
  },
  {
    "name": "EnumLiteral",
    "expressions": [],
    "properties": [
      "name",
      "Enumeration",
      "SelectionViewElement",
      "value"
    ]
  },
  {
    "name": "ViewAssociationElement",
    "expressions": [],
    "properties": [
      "classRef",
      "header"
    ]
  },
  {
    "name": "TableViewElement",
    "expressions": [],
    "properties": [
      "columnSet",
      "links"
    ]
  },
  {
    "name": "ViewPropertyElement",
    "expressions": [{
      "operations": {
        "oclIsTypeOf": 1,
        "oclAsSet": 2,
        "includes": 1,
        "oclAsType": 1,
        "oclContainer": 1
      },
      "name": "isPropertyMemberOfClass",
      "body": "\n\t\t(self -> closure(o: ViewElement | o.oclContainer()) -> select(oclIsTypeOf(ClassOperationView))).oclAsType(ClassOperationView)\n\t\t -> forAll((instance->closure(superclass)).properties->includes(self.propertyRef))",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 6,
        "VariableExpImpl": 8,
        "OperationCallExpImpl": 6,
        "TypeExpImpl": 2,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "views::ClassOperationView::instance",
        "views::Class::properties",
        "views::Class::superclass",
        "views::ViewPropertyElement::propertyRef"
      ]
    }],
    "properties": [
      "label",
      "propertyRef"
    ]
  },
  {
    "name": "SelectionViewElement",
    "expressions": [
      {
        "operations": {
          "or": 1,
          "oclIsTypeOf": 2
        },
        "name": "correctType",
        "body": "self.propertyRef.type.oclIsTypeOf(DataType) or self.propertyRef.type.oclIsTypeOf(Enumeration)",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "views::Property::type",
          "views::ViewPropertyElement::propertyRef"
        ]
      },
      {
        "operations": {
          "oclIsTypeOf": 1,
          "asSet": 1,
          "oclAsType": 1
        },
        "name": "enumItems",
        "body": "if self.propertyRef.type.oclIsTypeOf(Enumeration) then \n\t\t\t\tself.propertyRef.type.oclAsType(Enumeration).literals->asSet() else null endif",
        "type": "PropertyImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "NullLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "views::Property::type",
          "views::Enumeration::literals",
          "views::ViewPropertyElement::propertyRef"
        ]
      }
    ],
    "properties": [
      "enumItems",
      "values"
    ]
  },
  {
    "name": "ViewElementGroup",
    "expressions": [],
    "properties": [
      "header",
      "layout",
      "viewElements"
    ]
  },
  {
    "name": "ComparisonCondition",
    "expressions": [],
    "properties": [
      "element",
      "expression"
    ]
  },
  {
    "name": "ViewElement",
    "expressions": [],
    "properties": [
      "ClassOperationView",
      "ViewElementGroup",
      "elementID",
      "conditions",
      "ComparisonCondition"
    ]
  },
  {
    "name": "Link",
    "expressions": [],
    "properties": [
      "label",
      "ColumnSet",
      "ListViewElement",
      "TableViewElement",
      "ListViewElement",
      "view",
      "instance"
    ]
  },
  {
    "name": "ListViewElement",
    "expressions": [],
    "properties": [
      "ClassIndexView",
      "buttons",
      "links"
    ]
  },
  {
    "name": "TextViewElement",
    "expressions": [{
      "operations": {
        "or": 1,
        "oclIsTypeOf": 2
      },
      "name": "correctType",
      "body": "self.propertyRef.type.oclIsTypeOf(DataType) or self.propertyRef.type.oclIsTypeOf(Enumeration)",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 3,
        "TypeExpImpl": 2,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "views::Property::type",
        "views::ViewPropertyElement::propertyRef"
      ]
    }],
    "properties": [
      "length",
      "format"
    ]
  },
  {
    "name": "Class",
    "expressions": [
      {
        "operations": {"excludes": 1},
        "name": "noSelfSubclass",
        "body": "self.subclass->excludes(self)",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["views::Class::subclass"]
      },
      {
        "operations": {
          "excludes": 1,
          "oclAsSet": 1
        },
        "name": "noSelfSuperclass",
        "body": "self.superclass->excludes(self)",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["views::Class::superclass"]
      },
      {
        "operations": {
          "allInstances": 1,
          "=": 1
        },
        "name": "subclass",
        "body": "Class.allInstances() -> select(superclass = self)",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["views::Class::superclass"]
      },
      {
        "operations": {
          "or": 1,
          "=": 2
        },
        "name": "lowerConstr",
        "body": "self.properties\n\t\t\t\t\t-> forAll (p: Property | p.multiplicityLowerBound = 0 or p.multiplicityLowerBound = 1)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "views::Class::properties",
          "views::Property::multiplicityLowerBound"
        ]
      },
      {
        "operations": {
          "and": 1,
          "oclAsSet": 1,
          "notEmpty": 1,
          "=": 2
        },
        "name": "idConstr",
        "body": "if self.isId->notEmpty() then self.isId.multiplicityLowerBound = 1 and self.isId.multiplicityUpperBound = 1 else true endif",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 5,
          "IntegerLiteralExpImpl": 2,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 5,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "views::Class::isId",
          "views::Property::multiplicityUpperBound",
          "views::Property::multiplicityLowerBound"
        ]
      },
      {
        "operations": {"<>": 1},
        "name": "superNotSubclass",
        "body": "self.superclass <> self.subclass",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "views::Class::subclass",
          "views::Class::superclass"
        ]
      },
      {
        "operations": {
          "or": 1,
          "oclIsTypeOf": 2
        },
        "name": "correctType",
        "body": " self.properties \n\t\t\t\t\t-> forAll (p: Property | p.type.oclIsTypeOf(DataType) or p.type.oclIsTypeOf(Enumeration))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 3,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "views::Class::properties",
          "views::Property::type"
        ]
      },
      {
        "operations": {
          "oclAsSet": 2,
          "isEmpty": 2,
          "includes": 1
        },
        "name": "idMandatorySuperclass",
        "body": "if self.superclass->isEmpty() then self.properties -> includes(self.isId) else self.isId->isEmpty() endif",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 4,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "views::Class::properties",
          "views::Class::isId",
          "views::Class::superclass"
        ]
      },
      {
        "operations": {
          "allInstances": 1,
          "=": 1
        },
        "name": "associationsNavigable",
        "body": "Association.allInstances() -> select(end.type = self)",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "views::Property::type",
          "views::Association::end"
        ]
      },
      {
        "operations": {
          "allInstances": 1,
          "=": 1
        },
        "name": "associations",
        "body": "Association.allInstances() -> select(begin.type = self)",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "views::Association::begin",
          "views::Property::type"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "upperConstr",
        "body": "self.properties\n\t\t\t\t\t-> forAll (p: Property | p.multiplicityUpperBound = 1)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "views::Class::properties",
          "views::Property::multiplicityUpperBound"
        ]
      }
    ],
    "properties": [
      "ViewAssociationElement",
      "Class",
      "ClassIndexView",
      "isId",
      "superclass",
      "DomainModel",
      "ClassOperationView",
      "associations",
      "associationsNavigable",
      "properties",
      "Class",
      "Link",
      "subclass"
    ]
  },
  {
    "name": "Condition",
    "expressions": [],
    "properties": [
      "CompositeCondition",
      "result",
      "CompositeCondition",
      "conditionID",
      "ViewElement"
    ]
  },
  {
    "name": "DateTimePickerViewElement",
    "expressions": [{
      "operations": {
        "or": 2,
        "oclIsTypeOf": 1,
        "and": 1,
        "=": 3
      },
      "name": "isDateThing",
      "body": "self.propertyRef.type.oclIsTypeOf(DataType) and \n\t\t\t(self.propertyRef.type.name = 'Date' or self.propertyRef.type.name = 'Time' or self.propertyRef.type.name = 'DateTime')",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 7,
        "VariableExpImpl": 4,
        "StringLiteralExpImpl": 3,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 11
      },
      "properties": [
        "views::Property::type",
        "views::Type::name",
        "views::ViewPropertyElement::propertyRef"
      ]
    }],
    "properties": ["format"]
  },
  {
    "name": "ViewModel",
    "expressions": [{
      "operations": {"allInstances": 1},
      "name": "uniqueConditions",
      "body": "Condition.allInstances()->isUnique(conditionID)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["views::Condition::conditionID"]
    }],
    "properties": [
      "viewGroups",
      "welcomeViewGroup",
      "DVML"
    ]
  }
]
