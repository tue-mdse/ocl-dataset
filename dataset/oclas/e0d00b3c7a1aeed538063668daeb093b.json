[
  {
    "name": "Session",
    "expressions": [{
      "operations": {
        "computeRelative": 1,
        "excludes": 2,
        "or": 1,
        "allInstances": 1,
        "includes": 2,
        "oclAsType": 1,
        "flatten": 2,
        "contains": 1,
        "oclIsTypeOf": 1,
        "and": 1,
        "oclAsSet": 1,
        "asSet": 2,
        "notEmpty": 1,
        "=": 1
      },
      "name": "relativeLocationEnabling",
      "body": "\nlet r1 : Role = Role.allInstances() ->\nselect(r : Role| r.idRole = 'r5')->any(true),\nspatialContext: Set(RBACContext) = r1.roleContextEnabling-> select(c|c.oclIsTypeOf(SpatialContext)),\nloc: Set(Location)=\nspatialContext.oclAsType(SpatialContext).location\n->select(l|l.relativelocation->notEmpty())->flatten() -> asSet(), \nrelativeLoc: Set(Location)= loc -> collect(l|\nl.computeRelative(l.relativelocation))->flatten() -> asSet() in \nif relativeLoc -> exists(l|self.user.userLocation.location -> exists(pos| l.contains(pos))) then\n\tself.enabledRoles -> includes(r1) or self.activeRoles -> includes(r1)\nelse\n\t\tself.enabledRoles -> excludes(r1) and self.activeRoles -> excludes(r1)\nendif \n",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 9,
        "VariableExpImpl": 22,
        "OperationCallExpImpl": 18,
        "LetExpImpl": 4,
        "TypeExpImpl": 3,
        "StringLiteralExpImpl": 1,
        "IfExpImpl": 1,
        "PropertyCallExpImpl": 12,
        "BooleanLiteralExpImpl": 1
      },
      "properties": [
        "gemRBAC::Role::idRole",
        "gemRBAC::User::userLocation",
        "gemRBAC::Session::enabledRoles",
        "gemRBAC::Location::relativelocation",
        "gemRBAC::Session::user",
        "gemRBAC::Role::roleContextEnabling",
        "gemRBAC::SpatialContext::location",
        "gemRBAC::Session::activeRoles"
      ]
    }],
    "properties": []
  },
  {
    "name": "Role",
    "expressions": [
      {
        "operations": {
          "flatten": 1,
          "contains": 1,
          "excludes": 1,
          "oclIsTypeOf": 1,
          "allInstances": 1,
          "includes": 1,
          "asSet": 1,
          "oclAsType": 3,
          "=": 2
        },
        "name": "logicalLocationRoleAssign",
        "body": "\nlet u1 : User = User.allInstances()\n->select(m : User | m.idUser = 'u2')\n->any(true),\nspatialContext: Set(RBACContext) = self.roleContextAssignment-> select(c|c.oclIsTypeOf(SpatialContext)),\nloc: Set(LogicalLocation) =  spatialContext.oclAsType(SpatialContext).location.oclAsType(LogicalLocation)->flatten() -> asSet()\nin\nif self.idRole= 'r2' then\n\tif  loc->exists(l|l.contains(u1.userLocation.location.oclAsType(PhysicalLocation)-> any(true))) then\n  \t\tself.users -> includes(u1)\n\telse\n  \t\tself.users -> excludes(u1)\n  \tendif\nelse\n\ttrue\nendif\n\n\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 9,
          "OperationCallExpImpl": 12,
          "VariableExpImpl": 16,
          "LetExpImpl": 3,
          "TypeExpImpl": 5,
          "StringLiteralExpImpl": 2,
          "IfExpImpl": 2,
          "PropertyCallExpImpl": 8,
          "BooleanLiteralExpImpl": 3
        },
        "properties": [
          "gemRBAC::Role::idRole",
          "gemRBAC::User::idUser",
          "gemRBAC::Role::users",
          "gemRBAC::User::userLocation",
          "gemRBAC::Role::roleContextAssignment",
          "gemRBAC::SpatialContext::location"
        ]
      },
      {
        "operations": {
          "flatten": 1,
          "contains": 1,
          "excludes": 1,
          "oclIsTypeOf": 1,
          "allInstances": 1,
          "includes": 1,
          "asSet": 1,
          "oclAsType": 3,
          "=": 2
        },
        "name": "physicalLocationRoleAssign",
        "body": "\nlet  u1 : User = User.allInstances()\n->select(m : User | m.idUser = 'u1')\n->any(true),\nspatialContext: Set(RBACContext) = self.roleContextAssignment-> select(c|c.oclIsTypeOf(SpatialContext)),\nlocPh: Set(PhysicalLocation) = spatialContext.oclAsType(SpatialContext).location.oclAsType(PhysicalLocation)->flatten() -> asSet()\nin\nif self.idRole= 'r1' then\n\tif locPh->exists(l|l.contains(u1.userLocation.location.oclAsType(PhysicalLocation)-> any(true))) then\n  \t\tself.users -> includes(u1)\n\telse\n  \t\tself.users -> excludes(u1)\n\tendif\nelse\n\ttrue\nendif\n\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 9,
          "VariableExpImpl": 16,
          "OperationCallExpImpl": 12,
          "LetExpImpl": 3,
          "TypeExpImpl": 5,
          "StringLiteralExpImpl": 2,
          "IfExpImpl": 2,
          "PropertyCallExpImpl": 8,
          "BooleanLiteralExpImpl": 3
        },
        "properties": [
          "gemRBAC::Role::idRole",
          "gemRBAC::User::idUser",
          "gemRBAC::Role::users",
          "gemRBAC::User::userLocation",
          "gemRBAC::Role::roleContextAssignment",
          "gemRBAC::SpatialContext::location"
        ]
      }
    ],
    "properties": []
  }
]
