[
  {
    "name": "CompanySizeKind",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Employee",
    "expressions": [
      {
        "operations": {
          "allInstances": 1,
          "reportsTo": 1
        },
        "name": "allReports",
        "body": "Employee.allInstances()->select(reportsTo(self))",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"includes": 1},
        "name": "reportsTo",
        "body": "self.reportingChain->includes(manager)",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["noreflectioncompany::Employee::reportingChain"]
      },
      {
        "operations": {"<>": 1},
        "name": "hasNameAsAttribute",
        "body": "name <> null",
        "type": "PropertyImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["noreflectioncompany::Employee::name"]
      },
      {
        "operations": {
          "not": 1,
          "oclIsUndefined": 1,
          "and": 2,
          "hasNameAsOperation": 1
        },
        "name": "mustHaveName",
        "body": "not name.oclIsUndefined() and hasNameAsAttribute and hasNameAsOperation()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "noreflectioncompany::Employee::name",
          "noreflectioncompany::Employee::hasNameAsAttribute"
        ]
      },
      {
        "operations": {
          "oclIsUndefined": 1,
          "size": 1,
          "implies": 1,
          ">": 1
        },
        "name": "noManagerImpliesDirectReports",
        "body": "manager.oclIsUndefined() implies directReports->size() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "noreflectioncompany::Employee::manager",
          "noreflectioncompany::Employee::directReports"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "directReports",
        "body": "company.employees->select(manager = self)",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "noreflectioncompany::Employee::manager",
          "noreflectioncompany::Employee::company",
          "noreflectioncompany::Company::employees"
        ]
      },
      {
        "operations": {
          "oclIsUndefined": 1,
          "prepend": 1
        },
        "name": "reportingChain",
        "body": "if (manager.oclIsUndefined()) then\r    OrderedSet{}\relse\r    manager.reportingChain->prepend(manager)\rendif",
        "type": "PropertyImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "noreflectioncompany::Employee::manager",
          "noreflectioncompany::Employee::reportingChain"
        ]
      },
      {
        "operations": {"<>": 1},
        "name": "hasNameAsOperation",
        "body": "name <> null",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["noreflectioncompany::Employee::name"]
      }
    ],
    "properties": [
      "name",
      "manager",
      "Employee",
      "company",
      "directReports",
      "reportingChain",
      "hasNameAsAttribute",
      "Employee",
      "allReports",
      "Employee",
      "Employee"
    ]
  },
  {
    "name": "Company",
    "expressions": [
      {
        "operations": {},
        "name": "dummyInvariant",
        "body": "true",
        "type": "ConstraintImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "includes": 1
        },
        "name": "size",
        "body": "let table : Set(Tuple(range : Sequence(Integer), size : CompanySizeKind)) =\r    Set{Tuple{range=Sequence{0..49}, size=CompanySizeKind::small},\r         Tuple{range=Sequence{50..999}, size=CompanySizeKind::medium},\r         Tuple{range=Sequence{1000..1000000}, size=CompanySizeKind::large}} in\rtable->any(range->includes(employees->size())).size",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "LetExpImpl": 1,
          "TupleLiteralExpImpl": 3,
          "EnumLiteralExpImpl": 3,
          "IntegerLiteralExpImpl": 6,
          "CollectionLiteralExpImpl": 4,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "$$::Tuple::range",
          "noreflectioncompany::Company::employees",
          "$$::Tuple::size"
        ]
      }
    ],
    "properties": [
      "name",
      "employees",
      "size"
    ]
  }
]
