[
  {
    "name": "AssociationElements",
    "expressions": [],
    "properties": []
  },
  {
    "name": "EnumerationLiteralItem",
    "expressions": [],
    "properties": [
      "Selection",
      "literal"
    ]
  },
  {
    "name": "EnumerationType",
    "expressions": [{
      "operations": {
        "<>": 3,
        "and": 1,
        "implies": 1
      },
      "name": "SameLiteralNotAllowed",
      "body": "self.literal -> forAll(l1, l2 | l1 <> l2 implies l1.name <> l2.name and l1.value <> l2.value)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 7,
        "OperationCallExpImpl": 5,
        "PropertyCallExpImpl": 5
      },
      "properties": [
        "views::EnumerationType::literal",
        "views::Literal::name",
        "views::Literal::value"
      ]
    }],
    "properties": ["literal"]
  },
  {
    "name": "LongText",
    "expressions": [],
    "properties": []
  },
  {
    "name": "NavigableAssociationEnd",
    "expressions": [],
    "properties": ["Association"]
  },
  {
    "name": "ClassOperationView",
    "expressions": [],
    "properties": [
      "viewelement",
      "definedForClass"
    ]
  },
  {
    "name": "ViewElement",
    "expressions": [],
    "properties": [
      "ElementGroups",
      "label",
      "elementID",
      "ClassOperationView"
    ]
  },
  {
    "name": "Class",
    "expressions": [
      {
        "operations": {"<>": 1},
        "name": "NoSelfInheritance",
        "body": "self.superclass <> self",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["views::Class::superclass"]
      },
      {
        "operations": {
          "excluding": 1,
          "isEmpty": 1,
          "allInstances": 1,
          "=": 1
        },
        "name": "ClassNameIsUnique",
        "body": "Class.allInstances() -> select(c | c.name = self.name) -> excluding(self) ->isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 4,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["views::Class::name"]
      },
      {
        "operations": {
          "and": 1,
          "=": 3
        },
        "name": "IdPropertyBoundIsOneToOne",
        "body": "(self.properties -> select(p : Property| p.isID = true))\n\t\t\t\t-> forAll(p | p.lowerBound = 1 and p.upperBound = 1)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 4,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 4,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "views::Property::lowerBound",
          "views::Class::properties",
          "views::Property::upperBound",
          "views::Property::isID"
        ]
      }
    ],
    "properties": [
      "superclass",
      "properties",
      "Class",
      "ViewGroup",
      "DomainModel",
      "associations",
      "ClassOperationView",
      "AssociationEnd",
      "name"
    ]
  },
  {
    "name": "Selection",
    "expressions": [],
    "properties": [
      "enumerationliteralitem",
      "selectionitem"
    ]
  },
  {
    "name": "NonNavigableAssociationEnd",
    "expressions": [],
    "properties": [
      "partOf",
      "Association"
    ]
  },
  {
    "name": "PropertyElements",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ViewModel",
    "expressions": [],
    "properties": ["viewgroup"]
  },
  {
    "name": "SelectionItem",
    "expressions": [],
    "properties": [
      "Selection",
      "value"
    ]
  },
  {
    "name": "DomainModel",
    "expressions": [
      {
        "operations": {
          "<>": 1,
          "size": 1,
          "=": 2
        },
        "name": "DerivedClassesHaveNoOwnKeyProperty",
        "body": "(self.classes -> select(c : Class| c.superclass<>null))\n\t\t\t-> forAll(c | c.properties -> select (p | p.isID = true) -> size() = 0)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 4,
          "NullLiteralExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "BooleanLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "views::Class::superclass",
          "views::Class::properties",
          "views::DomainModel::classes",
          "views::Property::isID"
        ]
      },
      {
        "operations": {
          "size": 1,
          "=": 3
        },
        "name": "NonDerivedClassesHaveOnlyOneKeyProperty",
        "body": "(self.classes -> select(c : Class| c.superclass=null))\n\t\t\t-> forAll(c | c.properties -> select (p | p.isID = true) -> size() = 1)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 4,
          "NullLiteralExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "views::Class::superclass",
          "views::Class::properties",
          "views::DomainModel::classes",
          "views::Property::isID"
        ]
      }
    ],
    "properties": [
      "classes",
      "namedtypes"
    ]
  },
  {
    "name": "View",
    "expressions": [],
    "properties": [
      "description",
      "header",
      "name",
      "ViewGroup",
      "ViewGroup"
    ]
  },
  {
    "name": "AssociationEnd",
    "expressions": [
      {
        "operations": {
          "or": 1,
          "and": 1,
          "=": 1,
          "-": 1,
          ">=": 2
        },
        "name": "MultiplicityCheckInitialValues",
        "body": "self.lowerBound >= 0 and (self.upperBound >= 1 or self.upperBound = -1)",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "views::AssociationEnd::upperBound",
          "views::AssociationEnd::lowerBound"
        ]
      },
      {
        "operations": {
          "<=": 1,
          "or": 1,
          "-": 1,
          "=": 1
        },
        "name": "MultiplicityCheckDifference",
        "body": "(self.lowerBound <= self.upperBound) or self.upperBound = -1",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 4,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "views::AssociationEnd::upperBound",
          "views::AssociationEnd::lowerBound"
        ]
      }
    ],
    "properties": [
      "name",
      "upperBound",
      "type",
      "lowerBound"
    ]
  },
  {
    "name": "Association",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "OnlyDifferentClassesAllowedAsEnd",
      "body": "self.navigableassociationend.type <> self.nonnavigableassociationend.type",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 1,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "views::Association::navigableassociationend",
        "views::Association::nonnavigableassociationend",
        "views::AssociationEnd::type"
      ]
    }],
    "properties": [
      "name",
      "navigableassociationend",
      "nonnavigableassociationend",
      "Class"
    ]
  },
  {
    "name": "Literal",
    "expressions": [],
    "properties": [
      "name",
      "value",
      "EnumerationType"
    ]
  },
  {
    "name": "ShortText",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ElementGroups",
    "expressions": [],
    "properties": [
      "header",
      "viewelement"
    ]
  },
  {
    "name": "NamedType",
    "expressions": [{
      "operations": {
        "excluding": 1,
        "isEmpty": 1,
        "allInstances": 1,
        "=": 1
      },
      "name": "NamedTypeNameIsUnique",
      "body": "NamedType.allInstances() -> select(nt | nt.name = self.name) -> excluding(self) -> isEmpty()",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "OperationCallExpImpl": 4,
        "VariableExpImpl": 3,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": ["views::NamedType::name"]
    }],
    "properties": [
      "Property",
      "name",
      "DomainModel"
    ]
  },
  {
    "name": "DataType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "DateTimePicker",
    "expressions": [],
    "properties": ["format"]
  },
  {
    "name": "ViewGroup",
    "expressions": [],
    "properties": [
      "ViewModel",
      "name",
      "WelcomeViewGroup",
      "startView",
      "view",
      "class"
    ]
  },
  {
    "name": "ClassIndexView",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Property",
    "expressions": [
      {
        "operations": {
          "or": 1,
          "and": 1,
          "=": 3
        },
        "name": "MultiplicityCheck",
        "body": "(self.lowerBound = 0 or self.lowerBound = 1) and self.upperBound = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 5,
          "IntegerLiteralExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "views::Property::lowerBound",
          "views::Property::upperBound"
        ]
      },
      {
        "operations": {
          "<>": 4,
          "and": 3
        },
        "name": "NecessaryValues",
        "body": "(self.lowerBound <> null) and (self.upperBound <> null) and (self.type <> null) and (self.name <> null)",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 7,
          "NullLiteralExpImpl": 4,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "views::Property::lowerBound",
          "views::Property::type",
          "views::Property::name",
          "views::Property::upperBound"
        ]
      }
    ],
    "properties": [
      "lowerBound",
      "type",
      "name",
      "Class",
      "upperBound",
      "isID"
    ]
  },
  {
    "name": "Text",
    "expressions": [],
    "properties": ["format"]
  }
]
