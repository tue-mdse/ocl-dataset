[
  {
    "name": "QualityRequirement",
    "expressions": [],
    "properties": [
      "DIA",
      "requirementId"
    ]
  },
  {
    "name": "StorageSystemType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Role",
    "expressions": [],
    "properties": [
      "User",
      "roleId"
    ]
  },
  {
    "name": "VisualizationNode",
    "expressions": [],
    "properties": []
  },
  {
    "name": "StorageSystem",
    "expressions": [],
    "properties": [
      "ComputeNode",
      "type",
      "password",
      "user"
    ]
  },
  {
    "name": "SafetyRequirement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "DIA",
    "expressions": [],
    "properties": [
      "elements",
      "properties",
      "requirements",
      "modelId",
      "dscription"
    ]
  },
  {
    "name": "FilterNode",
    "expressions": [],
    "properties": []
  },
  {
    "name": "PerformanceRequirement",
    "expressions": [],
    "properties": ["maxCompletionTime"]
  },
  {
    "name": "ComputeTechType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "MachineLearningAlgorithm",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Permission",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "allInstances": 1,
          ">": 1
        },
        "name": "protectsProvidedData",
        "body": "Permission.allInstances() ->\n\tforAll(p | \n\t\tp.protectedData.providedBy ->size() > 0 \t\n\t)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "oclAsSet": 2,
          "allInstances": 1,
          "includes": 1
        },
        "name": "declaredFieldsBelongToProtectedData",
        "body": "Permission.allInstances() ->\n\tforAll(p | \n\t\tp.actionType -> forAll( a |\n\t\t\ta.schemaField -> forAll(f |\n\t\t\t\tp.protectedData.fields -> includes(f)\n\t\t\t)\n\t\t)\n\t)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 4,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "dpim::Permission::actionType",
          "OclInvalid::oclBadProperty"
        ]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "oclAsSet": 1,
          "allInstances": 1,
          "oclBadOperation": 1,
          "=": 1
        },
        "name": "nonReadPermissionsRequireStoredProtectedData",
        "body": "Permission.allInstances() ->\n\tselect(p |\n\t\tp.actionType -> exists(a |\n\t\t\tnot a.operation = DataOperation::READ\n\t\t)\n\t) -> \n\tforAll(p | \n\t\tp.protectedData.providedBy -> exists( ds |\n\t\t\tds.oclIsKindOf(StorageSystem)\n\t\t)\n\t)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 4,
          "EnumLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "dpim::Permission::actionType",
          "OclInvalid::oclBadProperty",
          "dpim::ActionType::operation"
        ]
      }
    ],
    "properties": [
      "actionType",
      "checkingPeriod",
      "validityStartTime",
      "owner",
      "validityEndTime"
    ]
  },
  {
    "name": "ActionType",
    "expressions": [],
    "properties": [
      "protectedElement",
      "operation",
      "Permission"
    ]
  },
  {
    "name": "Dataset",
    "expressions": [],
    "properties": [
      "description",
      "ComputeNode",
      "fields",
      "ComputeNode",
      "providedBy"
    ]
  },
  {
    "name": "SourceNode",
    "expressions": [],
    "properties": [
      "emitRate",
      "type"
    ]
  },
  {
    "name": "SourceNodeType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "DataSource",
    "expressions": [],
    "properties": [
      "description",
      "Dataset"
    ]
  },
  {
    "name": "MachineLearningNode",
    "expressions": [],
    "properties": ["algoithm"]
  },
  {
    "name": "ComputeNode",
    "expressions": [
      {
        "operations": {
          "and": 1,
          "oclAsSet": 3,
          "allInstances": 2,
          "includes": 1,
          "=": 2
        },
        "name": "allUsersMustHaveReadPermissionOnInputData",
        "body": "ComputeNode.allInstances() ->\n\tforAll(n | \n\t\tn.processInputData -> forAll(d |\n\t\t\tUser.allInstances() -> select(u |\n\t\t\t\tu.hasComputeNode -> includes(n)\n\t\t\t) ->\n\t\t\tforAll(u |\n\t\t\t\tu.hasRole -> exists(r |\n\t\t\t\t\tr.hasPermission ->  exists( p |\n\t\t\t\t\t\tp.protectedData = d and\n\t\t\t\t\t\tp.actionType -> exists (a |\n\t\t\t\t\t\t\ta.operation = DataOperation::READ\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\t\t\n\t)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 7,
          "OperationCallExpImpl": 9,
          "VariableExpImpl": 9,
          "EnumLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "OclInvalid::oclBadProperty",
          "dpim::User::hasRole",
          "dpim::ComputeNode::processInputData"
        ]
      },
      {
        "operations": {
          "size": 1,
          "allInstances": 1,
          ">": 1
        },
        "name": "inputsAreProvidedByDataSources",
        "body": "ComputeNode.allInstances() ->\n\tforAll(n | \n\t\tn.processInputData -> forAll( i |\n\t\t\ti.providedBy -> size() >0\n\t\t)  \t\n\t)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "dpim::Dataset::providedBy",
          "dpim::ComputeNode::processInputData"
        ]
      },
      {
        "operations": {
          "allInstances": 1,
          "includes": 1
        },
        "name": "outputStoredDataMustBeProvided",
        "body": "ComputeNode.allInstances() ->\n\tforAll(n | \n\t\tn.produceOutputData -> forAll(d |\n\t\t\tn.storeOutput -> forAll( s |\n\t\t\t\td.providedBy -> includes(s)\n\t\t\t) \n\t\t)\t\t\n\t)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 4,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "dpim::ComputeNode::produceOutputData",
          "dpim::ComputeNode::storeOutput",
          "dpim::Dataset::providedBy"
        ]
      },
      {
        "operations": {
          "and": 1,
          "oclAsSet": 3,
          "allInstances": 2,
          "includes": 1,
          "=": 2
        },
        "name": "allUsersMustHaveCreatePermissionOnOutputData",
        "body": "ComputeNode.allInstances() ->\n\tforAll(n | \n\t\tn.produceOutputData -> forAll(d |\n\t\t\tUser.allInstances() -> select(u |\n\t\t\t\tu.hasComputeNode -> includes(n)\n\t\t\t) ->\n\t\t\tforAll(u |\n\t\t\t\tu.hasRole -> exists(r |\n\t\t\t\t\tr.hasPermission ->  exists( p |\n\t\t\t\t\t\tp.protectedData = d and\n\t\t\t\t\t\tp.actionType -> exists (a |\n\t\t\t\t\t\t\ta.operation = DataOperation::CREATE\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\t\t\n\t)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 7,
          "OperationCallExpImpl": 9,
          "VariableExpImpl": 9,
          "EnumLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "dpim::ComputeNode::produceOutputData",
          "OclInvalid::oclBadProperty",
          "dpim::User::hasRole"
        ]
      }
    ],
    "properties": [
      "targetTech",
      "produceOutputData",
      "User",
      "processingType",
      "storeOutput",
      "processInputData"
    ]
  },
  {
    "name": "ProcessingType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "User",
    "expressions": [],
    "properties": [
      "accessComputeNode",
      "roleId",
      "hasRole"
    ]
  },
  {
    "name": "SchemaField",
    "expressions": [],
    "properties": ["Dataset"]
  },
  {
    "name": "Property",
    "expressions": [],
    "properties": [
      "name",
      "value",
      "DIA",
      "DIAElement"
    ]
  },
  {
    "name": "DIAElement",
    "expressions": [],
    "properties": [
      "ActionType",
      "id",
      "properties",
      "Permission",
      "DIA"
    ]
  },
  {
    "name": "DataOperation",
    "expressions": [],
    "properties": []
  }
]
