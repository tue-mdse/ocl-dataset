[
  {
    "name": "FunctionalRequirement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ICost",
    "expressions": [],
    "properties": []
  },
  {
    "name": "BinaryOperator",
    "expressions": [],
    "properties": []
  },
  {
    "name": "TextualDescription",
    "expressions": [],
    "properties": ["description"]
  },
  {
    "name": "Requires",
    "expressions": [{
      "operations": {
        "not": 1,
        "including": 1,
        "oclIsKindOf": 3,
        "oclAsSet": 4,
        "includes": 1,
        "oclAsType": 4
      },
      "name": "selfDependency",
      "body": "self.argument.oclAsSet()->closure(arg : Argument | \n\t\t\tif arg.oclIsKindOf(BinaryOperatorArgument) then arg.oclAsType(BinaryOperatorArgument).leftSideArgument.oclAsSet()->including(arg.oclAsType(BinaryOperatorArgument).rightSideArgument) \n\t\t\telse \n\t\t\t\tif arg.oclIsKindOf(NOTOperator) then arg.oclAsType(NOTOperator).argument.oclAsSet() \n\t\t\t\telse arg.oclAsSet() \n\t\t\t\tendif \n\t\t\tendif\n\t\t)->select(arg : Argument | arg.oclIsKindOf(RequirementArgument))->forAll(arg : Argument | not arg.oclAsType(RequirementArgument).requirement.dependencySource->includes(self))",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 3,
        "VariableExpImpl": 10,
        "OperationCallExpImpl": 14,
        "TypeExpImpl": 7,
        "IfExpImpl": 2,
        "PropertyCallExpImpl": 6
      },
      "properties": [
        "requirements_editor::BinaryOperatorArgument::rightSideArgument",
        "requirements_editor::BinaryOperatorArgument::leftSideArgument",
        "requirements_editor::RequirementArgument::requirement",
        "requirements_editor::Requirement::dependencySource",
        "requirements_editor::Requires::argument",
        "requirements_editor::NOTOperator::argument"
      ]
    }],
    "properties": ["argument"]
  },
  {
    "name": "Person",
    "expressions": [{
      "operations": {
        "size": 2,
        "+": 1,
        ">": 1
      },
      "name": "isResponsible",
      "body": "self.personOwnsCategory->size() + self.personOwnsRequirement->size() > 0",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 4,
        "IntegerLiteralExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "requirements_editor::Person::personOwnsCategory",
        "requirements_editor::Person::personOwnsRequirement"
      ]
    }],
    "properties": [
      "personOwnsCategory",
      "name",
      "DocumentRoot",
      "personOwnsRequirement"
    ]
  },
  {
    "name": "SimpleDependency",
    "expressions": [{
      "operations": {
        "not": 1,
        "includes": 1
      },
      "name": "targetNotSource",
      "body": "not self.dependencyTarget.dependencySource->includes(self)",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 2,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "requirements_editor::Requirement::dependencySource",
        "requirements_editor::SimpleDependency::dependencyTarget"
      ]
    }],
    "properties": [
      "comment",
      "dependencyTarget"
    ]
  },
  {
    "name": "Argument",
    "expressions": [],
    "properties": [
      "BinaryOperatorArgument",
      "NOTOperator",
      "BinaryOperatorArgument",
      "Requires"
    ]
  },
  {
    "name": "QualityRequirement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Category",
    "expressions": [{
      "operations": {
        "<=": 1,
        "size": 2,
        "allInstances": 2
      },
      "name": "moreRequirementsThanCategories",
      "body": "Category.allInstances()->size() <= Requirement.allInstances()->size()",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 5,
        "TypeExpImpl": 2
      },
      "properties": []
    }],
    "properties": [
      "name",
      "Category",
      "DocumentRoot",
      "categoryOwnedBy",
      "subcategoryOf",
      "requirement"
    ]
  },
  {
    "name": "Description",
    "expressions": [],
    "properties": ["Requirement"]
  },
  {
    "name": "Dependency",
    "expressions": [],
    "properties": ["Requirement"]
  },
  {
    "name": "BinaryOperatorArgument",
    "expressions": [],
    "properties": [
      "rightSideArgument",
      "leftSideArgument",
      "operator"
    ]
  },
  {
    "name": "DocumentRoot",
    "expressions": [],
    "properties": [
      "rootCategories",
      "name",
      "person"
    ]
  },
  {
    "name": "NOTOperator",
    "expressions": [],
    "properties": ["argument"]
  },
  {
    "name": "RequirementArgument",
    "expressions": [],
    "properties": ["requirement"]
  },
  {
    "name": "Refines",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CValue",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Requirement",
    "expressions": [
      {
        "operations": {
          "oclIsKindOf": 2,
          "union": 1,
          "findLeafNodes": 3,
          "oclAsType": 4
        },
        "name": "findLeafNodes",
        "body": "\n\t\t\tif argument.oclIsKindOf(BinaryOperatorArgument) then\n\t\t\t\tfindLeafNodes(argument.oclAsType(BinaryOperatorArgument).leftSideArgument)->union(findLeafNodes(argument.oclAsType(BinaryOperatorArgument).rightSideArgument))\n\t\t\telse\n\t\t\t\tif argument.oclIsKindOf(NOTOperator) then\n\t\t\t\t\tfindLeafNodes(argument.oclAsType(NOTOperator).argument)\n\t\t\t\telse\n\t\t\t\t\tSet{argument.oclAsType(RequirementArgument)}\n\t\t\t\tendif\n\t\t\tendif",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 10,
          "VariableExpImpl": 9,
          "TypeExpImpl": 6,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "requirements_editor::BinaryOperatorArgument::rightSideArgument",
          "requirements_editor::BinaryOperatorArgument::leftSideArgument",
          "requirements_editor::NOTOperator::argument"
        ]
      },
      {
        "operations": {
          "not": 1,
          "includes": 1
        },
        "name": "differentResponsible",
        "body": "self.requirementOwnedBy.personOwnsCategory->forAll(c | not c.requirement->includes(self))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "requirements_editor::Person::personOwnsCategory",
          "requirements_editor::Requirement::requirementOwnedBy",
          "requirements_editor::Category::requirement"
        ]
      },
      {
        "operations": {
          "<>": 1,
          "oclIsTypeOf": 1,
          "findLeafNodes": 1,
          "oclAsType": 1
        },
        "name": "notItself",
        "body": "self.dependencySource->select(oclIsTypeOf(Requires))->forAll(requires: Dependency | findLeafNodes(requires.oclAsType(Requires).argument)->forAll(ra: RequirementArgument | ra.requirement <> self))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 4,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "requirements_editor::RequirementArgument::requirement",
          "requirements_editor::Requirement::dependencySource",
          "requirements_editor::Requires::argument"
        ]
      }
    ],
    "properties": [
      "identifier",
      "SimpleDependency",
      "name",
      "Category",
      "description",
      "requirementOwnedBy",
      "dependencySource",
      "RequirementArgument",
      "isMandatory",
      "priority"
    ]
  }
]
