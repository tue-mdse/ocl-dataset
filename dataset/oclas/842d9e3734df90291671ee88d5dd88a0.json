[{
  "name": "Kennitala",
  "expressions": [
    {
      "operations": {
        "toInteger": 1,
        "substring": 1
      },
      "name": "vartala",
      "body": "self.value.substring(9, 9)?.toInteger()",
      "type": "PropertyImpl",
      "constructs": {
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 1,
        "IntegerLiteralExpImpl": 2,
        "PropertyCallExpImpl": 1
      },
      "properties": ["kennitala::Kennitala::value"]
    },
    {
      "operations": {
        "<=": 1,
        "<>": 1,
        "mod": 3,
        "or": 1,
        "and": 1,
        "includes": 1,
        "=": 3,
        "-": 1
      },
      "name": "dayValid",
      "body": "let daysInMonth : Integer = if Set{1, 3, 5, 7, 8, 10, 12}->includes(self.month) then 31 else 30 endif in day <= daysInMonth - if month = 2 then if year.mod(4) = 0 and ((year.mod(100) <> 0 or year.mod(400) = 0)) then 1 else 2 endif else 0 endif",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 12,
        "VariableExpImpl": 7,
        "LetExpImpl": 1,
        "IntegerLiteralExpImpl": 19,
        "CollectionLiteralExpImpl": 1,
        "IfExpImpl": 3,
        "PropertyCallExpImpl": 6
      },
      "properties": [
        "kennitala::Kennitala::day",
        "kennitala::Kennitala::month",
        "kennitala::Kennitala::year"
      ]
    },
    {
      "operations": {"includes": 1},
      "name": "oldValid",
      "body": "Set{8, 9, 0}->includes(self.old)",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "IntegerLiteralExpImpl": 3,
        "CollectionLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["kennitala::Kennitala::old"]
    },
    {
      "operations": {
        "toInteger": 8,
        "mod": 1,
        "*": 8,
        "+": 7,
        "-": 1,
        "=": 2,
        "substring": 8
      },
      "name": "vartalaValid",
      "body": "let samleif : Integer = (self.value.substring(1, 1)?.toInteger() * 3 + self.value.substring(2, 2)?.toInteger() * 2 + self.value.substring(3, 3)?.toInteger() * 7 + self.value.substring(4, 4)?.toInteger() * 6 + self.value.substring(5, 5)?.toInteger() * 5 + self.value.substring(6, 6)?.toInteger() * 4 + self.value.substring(7, 7)?.toInteger() * 3 + self.value.substring(8, 8)?.toInteger() * 2).mod(11) in 11 - if (samleif = 0) then 11 else samleif endif = self.vartala",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 35,
        "VariableExpImpl": 11,
        "LetExpImpl": 1,
        "IntegerLiteralExpImpl": 28,
        "IfExpImpl": 1,
        "PropertyCallExpImpl": 9
      },
      "properties": [
        "kennitala::Kennitala::value",
        "kennitala::Kennitala::vartala"
      ]
    },
    {
      "operations": {
        "toInteger": 1,
        "substring": 1
      },
      "name": "day",
      "body": "self.value.substring(1, 2)?.toInteger()",
      "type": "PropertyImpl",
      "constructs": {
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 1,
        "IntegerLiteralExpImpl": 2,
        "PropertyCallExpImpl": 1
      },
      "properties": ["kennitala::Kennitala::value"]
    },
    {
      "operations": {
        "toInteger": 1,
        "substring": 1
      },
      "name": "old",
      "body": "self.value.substring(10, 10)?.toInteger()",
      "type": "PropertyImpl",
      "constructs": {
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 1,
        "IntegerLiteralExpImpl": 2,
        "PropertyCallExpImpl": 1
      },
      "properties": ["kennitala::Kennitala::value"]
    },
    {
      "operations": {
        "size": 1,
        "=": 1
      },
      "name": "valueLength",
      "body": "value.size() = 10",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 1,
        "IntegerLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["kennitala::Kennitala::value"]
    },
    {
      "operations": {
        "toInteger": 1,
        "or": 1,
        "toString": 1,
        "+": 2,
        "=": 2,
        "substring": 1
      },
      "name": "year",
      "body": "(if old = 8 or old = 9 then '1' + old?.toString() else '20' endif + self.value.substring(5, 6))?.toInteger()",
      "type": "PropertyImpl",
      "constructs": {
        "OperationCallExpImpl": 8,
        "VariableExpImpl": 4,
        "IntegerLiteralExpImpl": 4,
        "StringLiteralExpImpl": 2,
        "IfExpImpl": 1,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "kennitala::Kennitala::old",
        "kennitala::Kennitala::value"
      ]
    },
    {
      "operations": {
        "toInteger": 1,
        "substring": 1
      },
      "name": "month",
      "body": "self.value.substring(3, 4)?.toInteger()",
      "type": "PropertyImpl",
      "constructs": {
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 1,
        "IntegerLiteralExpImpl": 2,
        "PropertyCallExpImpl": 1
      },
      "properties": ["kennitala::Kennitala::value"]
    },
    {
      "operations": {"includes": 1},
      "name": "monthValid",
      "body": "Set{1 .. 12}->includes(self.month)",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "IntegerLiteralExpImpl": 2,
        "CollectionLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["kennitala::Kennitala::month"]
    }
  ],
  "properties": [
    "day",
    "old",
    "value",
    "month",
    "year",
    "vartala"
  ]
}]
