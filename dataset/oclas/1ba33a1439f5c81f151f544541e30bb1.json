[
  {
    "name": "Signature",
    "expressions": [
      {
        "operations": {
          "<>": 1,
          "size": 1,
          "toString": 1,
          "+": 1,
          "implies": 1,
          "=": 1,
          ">": 1
        },
        "name": "UniqueSorts",
        "body": "Tuple {\n\tmessage : String = 'There are some sorts in the adt that appear more than once: ' + sorts\n\t\t\t->select(s1 | (sorts\n\t\t\t\t->select(s2 | (s2.name = s1.name))\n\t\t\t\t->size() > 1))\n\t\t\t->collect(name)\n\t\t\t->toString(),\n\tstatus : Boolean = sorts <> null implies sorts\n\t\t\t->isUnique(name)\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "OperationCallExpImpl": 7,
          "VariableExpImpl": 8,
          "NullLiteralExpImpl": 1,
          "TupleLiteralExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 9
        },
        "properties": [
          "adt::ASort::name",
          "adt::Signature::sorts",
          "$$::Tuple::status"
        ]
      },
      {
        "operations": {
          "size": 1,
          "toString": 1,
          "+": 1,
          "=": 1,
          ">": 1
        },
        "name": "UniqueOperations",
        "body": "Tuple {\n\tmessage : String = 'There are some operations in the adt that appear more than once: ' + allOperations\n\t\t\t->select(op1 | (allOperations\n\t\t\t\t->select(op2 | (op2.name = op1.name))\n\t\t\t\t->size() > 1))\n\t\t\t->collect(name)\n\t\t\t->toString(),\n\tstatus : Boolean = allOperations\n\t\t\t->isUnique(name)\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 7,
          "TupleLiteralExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 8
        },
        "properties": [
          "$$::Tuple::status",
          "adt::Signature::allOperations",
          "adt::Operation::name"
        ]
      }
    ],
    "properties": [
      "ops",
      "generators",
      "sorts",
      "ADT",
      "allOperations",
      "operations"
    ]
  },
  {
    "name": "ADT",
    "expressions": [{
      "operations": {
        "size": 1,
        "toString": 1,
        "+": 1,
        "=": 1,
        ">": 1
      },
      "name": "UniqueVariableNames",
      "body": "Tuple {\n\tmessage : String = 'The following variables are defined more than once: ' + variables\n\t\t\t->select(v | (variables\n\t\t\t\t->select(v1 | (v1.name = v.name))\n\t\t\t\t->size() > 1))\n\t\t\t->collect(name)\n\t\t\t->toString(),\n\tstatus : Boolean = variables\n\t\t\t->isUnique(name)\n}.status",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 4,
        "VariableExpImpl": 7,
        "OperationCallExpImpl": 5,
        "TupleLiteralExpImpl": 1,
        "IntegerLiteralExpImpl": 1,
        "StringLiteralExpImpl": 1,
        "PropertyCallExpImpl": 8
      },
      "properties": [
        "adt::ADT::variables",
        "$$::Tuple::status",
        "adt::VariableDeclaration::name"
      ]
    }],
    "properties": [
      "variables",
      "name",
      "equations",
      "signature"
    ]
  },
  {
    "name": "Sort",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Variable",
    "expressions": [],
    "properties": ["declaration"]
  },
  {
    "name": "SubSort",
    "expressions": [{
      "operations": {
        "<>": 1,
        "+": 2
      },
      "name": "SuperSortNotNull",
      "body": "Tuple {\n\tmessage : String = 'The super sort of sort ' + name + 'cannot be null',\n\tstatus : Boolean = superSort <> null\n}.status",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 3,
        "NullLiteralExpImpl": 1,
        "TupleLiteralExpImpl": 1,
        "StringLiteralExpImpl": 2,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "adt::ASort::name",
        "adt::SubSort::superSort",
        "$$::Tuple::status"
      ]
    }],
    "properties": ["superSort"]
  },
  {
    "name": "ATerm",
    "expressions": [],
    "properties": [
      "Term",
      "adt",
      "Equation",
      "sort",
      "symbol",
      "Equation"
    ]
  },
  {
    "name": "Term",
    "expressions": [
      {
        "operations": {
          "<>": 1,
          "toString": 1,
          "+": 1,
          "implies": 1,
          "=": 1
        },
        "name": "RightAdtSubterms",
        "body": "Tuple {\n\tmessage : String = 'Some subterms do not have the same adt as the parent term: ' +\n\t\t\tself.toString(),\n\tstatus : Boolean = (subterms <> null) implies subterms\n\t\t\t->forAll(t | t.adt = self.adt)\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 5,
          "NullLiteralExpImpl": 1,
          "TupleLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "$$::Tuple::status",
          "adt::ATerm::adt",
          "adt::Term::subterms"
        ]
      },
      {
        "operations": {
          "<>": 1,
          "size": 4,
          "oclAsSet": 2,
          "toString": 3,
          "+": 5,
          "implies": 1,
          "=": 1
        },
        "name": "CorrectNumberOfParameters",
        "body": "Tuple {\n\tmessage : String = 'Invalid number of parameters for term: ' + self.toString() + '. Required ' +\n\t\t\toperationSymbol.formalParameters\n\t\t\t->size()\n\t\t\t->toString() + ', found ' + subterms\n\t\t\t->size()\n\t\t\t->toString(),\n\tstatus : Boolean = (operationSymbol <> null) implies subterms\n\t\t\t->size() = operationSymbol.formalParameters\n\t\t\t->size()\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 17,
          "VariableExpImpl": 6,
          "NullLiteralExpImpl": 1,
          "TupleLiteralExpImpl": 1,
          "StringLiteralExpImpl": 3,
          "PropertyCallExpImpl": 8
        },
        "properties": [
          "adt::Operation::formalParameters",
          "$$::Tuple::status",
          "adt::Term::operationSymbol",
          "adt::Term::subterms"
        ]
      },
      {
        "operations": {
          "isSubSortOf": 1,
          "<>": 3,
          "at": 1,
          "and": 1,
          "toString": 1,
          "+": 1,
          "implies": 2,
          "indexOf": 1
        },
        "name": "CorrectTypeOfParameters",
        "body": "Tuple {\n\tmessage : String = 'Invalid type of parameters for term: ' + self.toString(),\n\tstatus : Boolean = subterms <> null\n\t\t\timplies subterms\n\t\t\t->forAll(p | ((p.sort <> null) and (operationSymbol <> null)) implies\n\t\t\t\tp.sort.isSubSortOf(operationSymbol.formalParameters\n\t\t\t\t\t->at(subterms\n\t\t\t\t\t\t->indexOf(p))))\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 11,
          "VariableExpImpl": 9,
          "NullLiteralExpImpl": 3,
          "TupleLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 9
        },
        "properties": [
          "adt::Operation::formalParameters",
          "$$::Tuple::status",
          "adt::Term::operationSymbol",
          "adt::Term::subterms",
          "adt::ATerm::sort"
        ]
      }
    ],
    "properties": [
      "operationSymbol",
      "subterms"
    ]
  },
  {
    "name": "Operation",
    "expressions": [{
      "operations": {
        "<>": 1,
        "+": 2
      },
      "name": "ValidReturnType",
      "body": "Tuple {\n\tmessage : String = 'The return type for operation ' + name + ' was not set.',\n\tstatus : Boolean = returnType <> null\n}.status",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 3,
        "VariableExpImpl": 2,
        "NullLiteralExpImpl": 1,
        "TupleLiteralExpImpl": 1,
        "StringLiteralExpImpl": 2,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "adt::Operation::returnType",
        "$$::Tuple::status",
        "adt::Operation::name"
      ]
    }],
    "properties": [
      "formalParameters",
      "Signature",
      "returnType",
      "Signature",
      "Term",
      "Signature",
      "name"
    ]
  },
  {
    "name": "VariableDeclaration",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "NameNotEmpty",
      "body": "name <> ''",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "StringLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["adt::VariableDeclaration::name"]
    }],
    "properties": [
      "ADT",
      "Variable",
      "sort",
      "name"
    ]
  },
  {
    "name": "ASort",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "NameNotEmpty",
      "body": "Tuple {\n\tmessage : String = 'Cannot assign empty name to sort',\n\tstatus : Boolean = name <> ''\n}.status",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "TupleLiteralExpImpl": 1,
        "StringLiteralExpImpl": 2,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "adt::ASort::name",
        "$$::Tuple::status"
      ]
    }],
    "properties": [
      "VariableDeclaration",
      "name",
      "Signature",
      "Operation",
      "SubSort",
      "Operation",
      "ATerm"
    ]
  },
  {
    "name": "Object",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Equation",
    "expressions": [],
    "properties": [
      "leftHandTerm",
      "rightHandTerm",
      "ADT"
    ]
  }
]
