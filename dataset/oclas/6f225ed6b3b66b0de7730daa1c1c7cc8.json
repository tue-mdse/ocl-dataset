[
  {
    "name": "AssuranceCasePackageInterface",
    "expressions": [],
    "properties": ["AssuranceCasePackage"]
  },
  {
    "name": "ArtefactAssetRelationship",
    "expressions": [],
    "properties": [
      "target",
      "source"
    ]
  },
  {
    "name": "TerminologyPackageCitation",
    "expressions": [],
    "properties": [
      "TerminologyPackage",
      "citedPackage"
    ]
  },
  {
    "name": "Resource",
    "expressions": [],
    "properties": ["location"]
  },
  {
    "name": "Artefact",
    "expressions": [],
    "properties": [
      "artefactProperty",
      "version",
      "artefactEvent",
      "date"
    ]
  },
  {
    "name": "AssertedEvidence",
    "expressions": [{
      "operations": {
        "or": 5,
        "oclIsTypeOf": 9,
        "and": 18,
        "oclAsSet": 1,
        "=": 15,
        "oclAsType": 1,
        "first": 1,
        ">": 1
      },
      "name": "isValidSupportedBy",
      "body": "\n\t\t\t(self.name = 'SupportedBy' and\n\t\t\tself.source->forAll(s|(s.oclIsTypeOf(ArtefactElementCitation) and s.name = 'Solution') or\n\t\t\t\t(s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayGoal')\n\t\t\t) and\n\t\t\tself.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal'))\n\t\t\tor\n\t\t\t(self.name = 'SupportedBy' and\n\t\t\tself.source->forAll(s|(s.oclIsTypeOf(ArtefactElementCitation) and s.name = 'Solution') or\n\t\t\t\t(s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayGoal')\n\t\t\t) and\n\t\t\tself.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal') and \n\t\t\tself.taggedValue->exists(t|t.sKey = 'uninstantiated')) \n\t\t\tor\n\t\t\t(self.name = 'SupportedBy' and\n\t\t\tself.source->forAll(s|(s.oclIsTypeOf(ArtefactElementCitation) and s.name = 'Solution') or\n\t\t\t\t(s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayGoal')\n\t\t\t) and\n\t\t\tself.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal') and\n\t\t\tself.taggedValue->one(t|t.sKey = 'required') and\n\t\t\tself.taggedValue->select(t|t.sKey='required')->first().sExpression->oclAsType(Integer) > 0)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 9,
        "OperationCallExpImpl": 51,
        "VariableExpImpl": 33,
        "IntegerLiteralExpImpl": 1,
        "TypeExpImpl": 10,
        "StringLiteralExpImpl": 15,
        "PropertyCallExpImpl": 25
      },
      "properties": [
        "SACM::Commons::TaggedValue::sKey",
        "SACM::Argumentation::AssertedRelationship::target",
        "SACM::Commons::ModelElement::name",
        "SACM::Commons::ModelElement::taggedValue",
        "SACM::Argumentation::AssertedRelationship::source",
        "SACM::Commons::UtilityElement::sExpression"
      ]
    }],
    "properties": []
  },
  {
    "name": "ArtefactAsset",
    "expressions": [],
    "properties": [
      "ArtefactAssetRelationship",
      "ArtefactPackage",
      "ArtefactAssetCitation",
      "ArtefactAssetRelationship"
    ]
  },
  {
    "name": "Category",
    "expressions": [],
    "properties": ["ExpressionElement"]
  },
  {
    "name": "TerminologyPackage",
    "expressions": [],
    "properties": [
      "AssuranceCasePackage",
      "terminologyAsset",
      "terminologyPackage",
      "terminologyPackageCitation",
      "TerminologyPackage",
      "TerminologyPackageCitation"
    ]
  },
  {
    "name": "Assertion",
    "expressions": [],
    "properties": ["metaClaim"]
  },
  {
    "name": "Expression",
    "expressions": [],
    "properties": [
      "value",
      "UtilityElement",
      "element",
      "TaggedValue"
    ]
  },
  {
    "name": "ArgumentPackageCitation",
    "expressions": [],
    "properties": [
      "citedPackage",
      "ArgumentPackage"
    ]
  },
  {
    "name": "ArtefactTechniqueRelationship",
    "expressions": [],
    "properties": []
  },
  {
    "name": "TerminologyAsset",
    "expressions": [],
    "properties": [
      "TerminologyAssetCitation",
      "TerminologyPackage"
    ]
  },
  {
    "name": "ExpressionElement",
    "expressions": [],
    "properties": [
      "category",
      "Expression"
    ]
  },
  {
    "name": "ImplementationConstraint",
    "expressions": [],
    "properties": ["ModelElement"]
  },
  {
    "name": "AssuranceCasePackageCitation",
    "expressions": [],
    "properties": [
      "citedPackage",
      "AssuranceCasePackage"
    ]
  },
  {
    "name": "AssertedInference",
    "expressions": [{
      "operations": {
        "or": 16,
        "oclIsTypeOf": 22,
        "and": 39,
        "oclAsSet": 4,
        "notEmpty": 2,
        "=": 32,
        "oclAsType": 2,
        "first": 2,
        ">": 2
      },
      "name": "validSupportedBy",
      "body": "\n\t\t\t(self.name = 'SupportedBy' and\n\t\t\tself.source->forAll(s|(s.oclIsTypeOf(Claim) and s.name = 'Goal') or \n\t\t\t\t(s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayGoal') or\n\t\t\t\t(s.oclIsTypeOf(ArgumentPackage) and s.name = 'Module') or\n\t\t\t\t(s.oclIsTypeOf(ArgumentPackageBinding) and s.name = 'Contract')\n\t\t\t) and \n\t\t\tself.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal')) \n\t\t\tor\n\t\t\t(self.name = 'SupportedBy' and\n\t\t\tself.source->forAll(s|s.oclIsTypeOf(Claim) and s.name = 'Goal' or \n\t\t\t\t(s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayGoal') or\n\t\t\t\t(s.oclIsTypeOf(ArgumentPackage) and s.name = 'Module') or\n\t\t\t\t(s.oclIsTypeOf(ArgumentPackageBinding) and s.name = 'Contract')) and \n\t\t\tself.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal') and \n\t\t\tself.reasoning->notEmpty()) \n\t\t\tor\n\t\t\t(self.name = 'SupportedBy' and\n\t\t\tself.source->forAll(s|s.oclIsTypeOf(Claim) and s.name = 'Goal' ) and \n\t\t\tself.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal') and \n\t\t\tself.taggedValue->exists(t|t.sKey = 'uninstantiated')) \n\t\t\tor\n\t\t\t(self.name = 'SupportedBy' and\n\t\t\tself.source->forAll(s|s.oclIsTypeOf(Claim) and s.name = 'Goal' or \n\t\t\t\t(s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayGoal') or\n\t\t\t\t(s.oclIsTypeOf(ArgumentPackage) and s.name = 'Module') or\n\t\t\t\t(s.oclIsTypeOf(ArgumentPackageBinding) and s.name = 'Contract')) and \n\t\t\tself.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal') and \n\t\t\tself.taggedValue->one(t|t.sKey = 'required') and\n\t\t\tself.taggedValue->select(t|t.sKey='required')->first().sExpression->oclAsType(Integer) > 0) \n\t\t\tor\n\t\t\t(self.name = 'SupportedBy' and\n\t\t\tself.source->forAll(s|s.oclIsTypeOf(Claim) and s.name = 'Goal' or \n\t\t\t\t(s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayGoal') or\n\t\t\t\t(s.oclIsTypeOf(ArgumentPackage) and s.name = 'Module') or\n\t\t\t\t(s.oclIsTypeOf(ArgumentPackageBinding) and s.name = 'Contract')) and \n\t\t\tself.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal') and \n\t\t\tself.reasoning->notEmpty() and \n\t\t\tself.taggedValue->one(t|t.sKey = 'required') and\n\t\t\tself.taggedValue->select(t|t.sKey='required')->first().sExpression->oclAsType(Integer) > 0)\n\t\t\t",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 15,
        "VariableExpImpl": 71,
        "OperationCallExpImpl": 121,
        "IntegerLiteralExpImpl": 2,
        "StringLiteralExpImpl": 32,
        "TypeExpImpl": 24,
        "PropertyCallExpImpl": 51
      },
      "properties": [
        "SACM::Commons::TaggedValue::sKey",
        "SACM::Argumentation::AssertedRelationship::target",
        "SACM::Commons::ModelElement::name",
        "SACM::Commons::ModelElement::taggedValue",
        "SACM::Argumentation::AssertedRelationship::reasoning",
        "SACM::Argumentation::AssertedRelationship::source",
        "SACM::Commons::UtilityElement::sExpression"
      ]
    }],
    "properties": []
  },
  {
    "name": "ArtefactResourceRelationship",
    "expressions": [],
    "properties": []
  },
  {
    "name": "TerminologyAssetCitation",
    "expressions": [],
    "properties": ["citedElement"]
  },
  {
    "name": "ArtefactPackageInterface",
    "expressions": [],
    "properties": ["ArtefactPackage"]
  },
  {
    "name": "Activity",
    "expressions": [],
    "properties": [
      "endTime",
      "startTime"
    ]
  },
  {
    "name": "AssertedRelationship",
    "expressions": [],
    "properties": [
      "target",
      "reasoning",
      "source"
    ]
  },
  {
    "name": "TerminologyElement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ParticipantRoleRelationship",
    "expressions": [],
    "properties": []
  },
  {
    "name": "TaggedValue",
    "expressions": [],
    "properties": [
      "key",
      "sKey",
      "ModelElement"
    ]
  },
  {
    "name": "ArtefactProperty",
    "expressions": [],
    "properties": ["Artefact"]
  },
  {
    "name": "Description",
    "expressions": [],
    "properties": ["ModelElement"]
  },
  {
    "name": "ArgumentReasoning",
    "expressions": [{
      "operations": {
        "or": 2,
        "size": 1,
        "and": 6,
        "allInstances": 1,
        "=": 10
      },
      "name": "isValidReasoning",
      "body": "\n\t\t\t(AssertedInference.allInstances()->select(as|as.reasoning = self)->size() = 1 and \n\t\t\tself.name = 'Strategy' and self.isAbstract = false) or \n\t\t\t(self.name = 'Strategy' and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'undeveloped')) or\n\t\t\t(self.name = 'Strategy' and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'uninstantiated'))",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 3,
        "VariableExpImpl": 12,
        "OperationCallExpImpl": 20,
        "IntegerLiteralExpImpl": 1,
        "StringLiteralExpImpl": 5,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 11,
        "BooleanLiteralExpImpl": 3
      },
      "properties": [
        "SACM::Commons::TaggedValue::sKey",
        "SACM::Commons::ModelElement::isAbstract",
        "SACM::Commons::ModelElement::name",
        "SACM::Commons::ModelElement::taggedValue",
        "SACM::Argumentation::AssertedRelationship::reasoning"
      ]
    }],
    "properties": [
      "AssertedRelationship",
      "structure"
    ]
  },
  {
    "name": "ArtefactElement",
    "expressions": [],
    "properties": ["ArtefactElementCitation"]
  },
  {
    "name": "AssuranceCasePackage",
    "expressions": [],
    "properties": [
      "assuranceCasePackage",
      "AssuranceCasePackage",
      "assuranceCasePackageCitation",
      "artefactPackage",
      "terminologyPackage",
      "argumentPackage",
      "interface",
      "AssuranceCasePackageCitation"
    ]
  },
  {
    "name": "Term",
    "expressions": [],
    "properties": [
      "externalReference",
      "value"
    ]
  },
  {
    "name": "ArgumentAsset",
    "expressions": [],
    "properties": [
      "ArgumentAssetCitation",
      "AssertedRelationship",
      "AssertedRelationship",
      "ArgumentPackage"
    ]
  },
  {
    "name": "Technique",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ArgumentPackage",
    "expressions": [{
      "operations": {"=": 1},
      "name": "isValidModule",
      "body": "self.name = 'Module'",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "StringLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["SACM::Commons::ModelElement::name"]
    }],
    "properties": [
      "argumentAsset",
      "ArgumentPackageCitation",
      "interface",
      "ArgumentReasoning",
      "argumentPackage",
      "AssuranceCasePackage",
      "argumentPackageCitation",
      "ArgumentPackage",
      "ArgumentPackageBinding"
    ]
  },
  {
    "name": "ArtefactActivityRelationship",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ArgumentPackageInterface",
    "expressions": [],
    "properties": ["ArgumentPackage"]
  },
  {
    "name": "ArtefactPackageCitation",
    "expressions": [],
    "properties": [
      "citedPackage",
      "ArtefactPackage"
    ]
  },
  {
    "name": "ArtefactAssetCitation",
    "expressions": [],
    "properties": ["citedAsset"]
  },
  {
    "name": "ArtefactPackage",
    "expressions": [],
    "properties": [
      "ArtefactPackageCitation",
      "AssuranceCasePackage",
      "interface",
      "ArtefactPackageBinding",
      "artefactPackageCitation",
      "artefactAsset",
      "artefactPackage",
      "ArtefactPackage"
    ]
  },
  {
    "name": "Note",
    "expressions": [],
    "properties": ["ModelElement"]
  },
  {
    "name": "AssertedChallenge",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ArtefactPackageBinding",
    "expressions": [],
    "properties": ["participantpackage"]
  },
  {
    "name": "ArgumentationElement",
    "expressions": [],
    "properties": ["content"]
  },
  {
    "name": "ArtefactElementCitation",
    "expressions": [{
      "operations": {
        "or": 5,
        "and": 10,
        "=": 16
      },
      "name": "isValidGSNNotation",
      "body": "\n\t\t\t(self.name = 'Solution' and self.isAbstract = false) or\n\t\t\t(self.name = 'Solution' and self.isAbstract = false and self.taggedValue->exists(t|t.sKey='public')) or\n\t\t\t \n\t\t\t(self.name = 'Context' and self.isAbstract = false) or\n\t\t\t(self.name = 'Context' and self.isAbstract = false and self.taggedValue->exists(t|t.sKey='public')) or\n\t\t\t\n\t\t\t(self.name = 'Solution' and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'uninstantiated')) or \n\t\t    (self.name = 'Context' and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'uninstantiated'))",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 4,
        "VariableExpImpl": 20,
        "OperationCallExpImpl": 31,
        "StringLiteralExpImpl": 10,
        "BooleanLiteralExpImpl": 6,
        "PropertyCallExpImpl": 20
      },
      "properties": [
        "SACM::Commons::TaggedValue::sKey",
        "SACM::Commons::ModelElement::isAbstract",
        "SACM::Commons::ModelElement::name",
        "SACM::Commons::ModelElement::taggedValue"
      ]
    }],
    "properties": [
      "externalReference",
      "citedArtefact"
    ]
  },
  {
    "name": "SACMElement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "UtilityElement",
    "expressions": [],
    "properties": [
      "expression",
      "sExpression"
    ]
  },
  {
    "name": "AssertedContext",
    "expressions": [{
      "operations": {
        "or": 7,
        "oclIsTypeOf": 8,
        "and": 13,
        "=": 13
      },
      "name": "isValidInContextOf",
      "body": "\n\t\t\t(self.name = 'InContextOf' and self.isAbstract = false and \n\t\t\t\tself.source->forAll(s|(s.oclIsTypeOf(ArtefactElementCitation) and s.name = 'Context') or\n\t\t\t\t\t(s.oclIsTypeOf(Claim) and s.name = 'Context') or\n\t\t\t\t\t(s.oclIsTypeOf(Claim) and s.name = 'Justification') or\n\t\t\t\t\t(s.oclIsTypeOf(Claim) and s.name = 'Assumption') or \n\t\t\t\t\t(s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayGoal') or\n\t\t\t\t\t(s.oclIsTypeOf(ArgumentAssetCitation) and s.name = 'AwayContext') or\n\t\t\t\t\t(s.oclIsTypeOf(ArgumentPackage) and s.name = 'Module')\n\t\t\t\t) and\n\t\t\t\tself.target->forAll(t|t.oclIsTypeOf(Claim) and t.name = 'Goal')\n\t\t\t) or\n\t\t\t(self.name = 'InContextOf' and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'uninstantiated'))",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 3,
        "VariableExpImpl": 24,
        "OperationCallExpImpl": 41,
        "StringLiteralExpImpl": 11,
        "TypeExpImpl": 8,
        "PropertyCallExpImpl": 16,
        "BooleanLiteralExpImpl": 2
      },
      "properties": [
        "SACM::Commons::TaggedValue::sKey",
        "SACM::Commons::ModelElement::isAbstract",
        "SACM::Argumentation::AssertedRelationship::target",
        "SACM::Commons::ModelElement::name",
        "SACM::Commons::ModelElement::taggedValue",
        "SACM::Argumentation::AssertedRelationship::source"
      ]
    }],
    "properties": []
  },
  {
    "name": "ActivityRelationship",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ArtefactEvent",
    "expressions": [],
    "properties": [
      "Artefact",
      "date"
    ]
  },
  {
    "name": "Claim",
    "expressions": [{
      "operations": {
        "not": 2,
        "or": 9,
        "and": 28,
        "=": 38
      },
      "name": "isValidGSNNotation",
      "body": "(self.name = 'Goal' and self.assumed = false and self.isAbstract = false) or\n\t\t\t(self.name = 'Goal' and self.assumed = false and self.isAbstract = false and self.taggedValue->exists(t|t.sKey='public')) or\n\t\t\t(self.name = 'Goal' and self.assumed = false and self.isAbstract = false and self.taggedValue->exists(t|t.sKey='TBSC') and not self.taggedValue->exists(t|t.sKey='undeveloped')) or \n\t\t\t(self.name ='Assumption' and self.assumed = true and self.isAbstract = false) or\n\t\t\t(self.name ='Assumption' and self.assumed = true and self.isAbstract = false and self.taggedValue->exists(t|t.sKey = 'uninstantiated')) or \n\t\t\t(self.name = 'Justification' and self.assumed = false and self.isAbstract = false) or\n\t\t\t(self.name = 'Justification' and self.assumed = false and self.isAbstract = false and self.taggedValue->exists(t|t.sKey = 'uninstantiated'))  or\n\t\t\t(self.name = 'Goal' and self.assumed = false and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'undeveloped') and not self.taggedValue->exists(t|t.sKey='TBSC')) or\n\t\t\t(self.name = 'Context' and self.assumed = true and self.isAbstract = false) or\n\t\t\t(self.name = 'Goal' and self.assumed = false and self.isAbstract = true and self.taggedValue->exists(t|t.sKey = 'uninstantiated'))",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 8,
        "OperationCallExpImpl": 77,
        "VariableExpImpl": 46,
        "StringLiteralExpImpl": 18,
        "PropertyCallExpImpl": 46,
        "BooleanLiteralExpImpl": 20
      },
      "properties": [
        "SACM::Argumentation::Claim::assumed",
        "SACM::Commons::TaggedValue::sKey",
        "SACM::Commons::ModelElement::isAbstract",
        "SACM::Commons::ModelElement::name",
        "SACM::Commons::ModelElement::taggedValue"
      ]
    }],
    "properties": [
      "assumed",
      "toBeSupported",
      "Assertion"
    ]
  },
  {
    "name": "ArtefactRelationship",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ArgumentPackageBinding",
    "expressions": [{
      "operations": {
        "size": 2,
        "and": 1,
        "asSet": 1,
        "=": 2
      },
      "name": "isValidContractModule",
      "body": "\n\t\t\tself.name = 'ContractModule' and\n\t\t\tself.participantPackage->size() = self.participantPackage->asSet()->size()",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 6,
        "VariableExpImpl": 3,
        "StringLiteralExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "SACM::Commons::ModelElement::name",
        "SACM::Argumentation::ArgumentPackageBinding::participantPackage"
      ]
    }],
    "properties": ["participantPackage"]
  },
  {
    "name": "ArgumentAssetCitation",
    "expressions": [{
      "operations": {
        "or": 2,
        "=": 3
      },
      "name": "isValidGSNNotation",
      "body": "\n\t\t\t(self.name = 'AwayGoal') or\n\t\t\t(self.name = 'AwaySolution') or\n\t\t\t(self.name = 'AwayContext')",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 5,
        "VariableExpImpl": 3,
        "StringLiteralExpImpl": 3,
        "PropertyCallExpImpl": 3
      },
      "properties": ["SACM::Commons::ModelElement::name"]
    }],
    "properties": ["citedAsset"]
  },
  {
    "name": "ModelElement",
    "expressions": [],
    "properties": [
      "note",
      "isAbstract",
      "gid",
      "description",
      "inplementationConstraint",
      "name",
      "taggedValue"
    ]
  },
  {
    "name": "AssertedCounterEvidence",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Participant",
    "expressions": [],
    "properties": []
  }
]
