[
  {
    "name": "Category",
    "expressions": [
      {
        "operations": {
          "size": 2,
          "+": 2,
          "=": 1,
          "substring": 1
        },
        "name": "SchemeEndsWithSharp",
        "body": "Tuple {\n\tmessage : String = 'The scheme \"' + scheme + '\" must end with a sharp',\n\tstatus : Boolean = \nscheme.substring(scheme.size(),scheme.size()) = '#'\n\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 4,
          "TupleLiteralExpImpl": 1,
          "StringLiteralExpImpl": 3,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "$$::Tuple::status",
          "occi::Category::scheme"
        ]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "oclBadOperation": 1
        },
        "name": "IdentityUnique",
        "body": "\nallInstances()->isUnique(identity)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["occi::Category::identity"]
      },
      {
        "operations": {
          "oclAsType": 1,
          "oclContainer": 1
        },
        "name": "extension",
        "body": "oclContainer().oclAsType(Extension)\n\n",
        "type": "PropertyImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"+": 1},
        "name": "identity",
        "body": "scheme + term\n\n",
        "type": "PropertyImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "occi::Category::scheme",
          "occi::Category::term"
        ]
      },
      {
        "operations": {},
        "name": "AttributesNameUnique",
        "body": "Tuple {\n\tmessage : String = 'Some attributes have the same name',\n\tstatus : Boolean = \nattributes->isUnique(name)\n\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "TupleLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "$$::Tuple::status",
          "occi::Attribute::name",
          "occi::Category::attributes"
        ]
      }
    ],
    "properties": [
      "extension",
      "identity"
    ]
  },
  {
    "name": "Mixin",
    "expressions": [
      {
        "operations": {"excludes": 1},
        "name": "NoCyclicInheritance",
        "body": "\ndepends->closure(depends)->excludes(self)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["occi::Mixin::depends"]
      },
      {
        "operations": {},
        "name": "ActionTermUnicity",
        "body": "\n  actions->isUnique(term)\n  ",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "occi::Mixin::actions",
          "occi::Category::term"
        ]
      },
      {
        "operations": {
          "<>": 1,
          "or": 1,
          "and": 1
        },
        "name": "isTemplate",
        "body": "attributes->forAll(default <> null) and depends->forAll(isTag or isTemplate)\n\n",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 3,
          "NullLiteralExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "occi::Attribute::default",
          "occi::Mixin::isTemplate",
          "occi::Mixin::depends",
          "occi::Category::attributes",
          "occi::Mixin::isTag"
        ]
      },
      {
        "operations": {
          "and": 2,
          "isEmpty": 2
        },
        "name": "isTag",
        "body": "attributes->isEmpty() and actions->isEmpty() and depends->forAll(isTag)\n\n",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 4,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "occi::Mixin::actions",
          "occi::Mixin::depends",
          "occi::Category::attributes",
          "occi::Mixin::isTag"
        ]
      },
      {
        "operations": {"excludesAll": 1},
        "name": "AttributesNameNotAlreadyDefinedInDepends",
        "body": "\nattributes.name->excludesAll(depends->closure(depends).attributes.name)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "occi::Attribute::name",
          "occi::Mixin::depends",
          "occi::Category::attributes"
        ]
      },
      {
        "operations": {
          "size": 2,
          "-": 2,
          "=": 1,
          "substring": 2
        },
        "name": "CorrectScheme",
        "body": "\n  scheme.substring(1,extension.scheme.size()-1) = extension.scheme.substring(1,extension.scheme.size()-1)\n  ",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 7,
          "IntegerLiteralExpImpl": 4,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "occi::Category::scheme",
          "occi::Category::extension",
          "occi::Extension::scheme"
        ]
      }
    ],
    "properties": [
      "isTemplate",
      "isTag"
    ]
  },
  {
    "name": "Extension",
    "expressions": [
      {
        "operations": {
          "oclAsSet": 1,
          "oclBadOperation": 1
        },
        "name": "SchemeUnique",
        "body": "\nallInstances()->isUnique(scheme)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["occi::Extension::scheme"]
      },
      {
        "operations": {"isDefinedOrImported": 1},
        "name": "MixinAppliesLocalOrImported",
        "body": "\nmixins.applies->forAll(k | isDefinedOrImported(k))\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "occi::Mixin::applies",
          "occi::Extension::mixins"
        ]
      },
      {
        "operations": {
          "intersection": 1,
          "isEmpty": 1
        },
        "name": "TermUnicity",
        "body": "\n  kinds.term->intersection(mixins.term)->isEmpty()\n  ",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "occi::Extension::mixins",
          "occi::Category::term",
          "occi::Extension::kinds"
        ]
      },
      {
        "operations": {"isDefinedOrImported": 1},
        "name": "KindParentLocalOrImported",
        "body": "\nkinds.parent->forAll(k | isDefinedOrImported(k))\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "occi::Kind::parent",
          "occi::Extension::kinds"
        ]
      },
      {
        "operations": {"isDefinedOrImported": 1},
        "name": "MixinDependsLocalOrImported",
        "body": "\nmixins.depends->forAll(m | isDefinedOrImported(m))\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "occi::Extension::mixins",
          "occi::Mixin::depends"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "KindsSchemeValid",
        "body": "\nkinds->forAll(k | k.scheme = scheme)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "occi::Category::scheme",
          "occi::Extension::kinds",
          "occi::Extension::scheme"
        ]
      },
      {
        "operations": {
          "size": 2,
          "-": 2,
          "=": 1,
          "substring": 2
        },
        "name": "MixinsSchemeValid",
        "body": "\nmixins->forAll(m | m.scheme.substring(1,scheme.size()-1) = scheme.substring(1,scheme.size()-1))\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 7,
          "IntegerLiteralExpImpl": 4,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "occi::Extension::mixins",
          "occi::Category::scheme",
          "occi::Extension::scheme"
        ]
      },
      {
        "operations": {
          "or": 1,
          "includes": 1,
          "=": 1
        },
        "name": "isDefinedOrImported",
        "body": "let e = category.extension in e = self or import->includes(e)\n \n",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 5,
          "LetExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "occi::Category::extension",
          "occi::Extension::import"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "Link",
    "expressions": [
      {
        "operations": {
          "oclAsSet": 1,
          "includes": 1
        },
        "name": "LinkKindIsInParent",
        "body": "\n-- OLD kind->closure(parent)->exists(k | k.identity =  'http://schemas.ogf.org/occi/core#link')\nkind->closure(parent)->includes(linkKind)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "occi::Link::linkKind",
          "occi::Kind::parent",
          "occi::Entity::kind"
        ]
      },
      {
        "operations": {
          "and": 1,
          "allInstances": 1,
          "=": 2
        },
        "name": "linkKind",
        "body": "Kind.allInstances()->one(identity = 'http://schemas.ogf.org/occi/core#link' and parent = entityKind)\n\n",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 4,
          "TypeExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "occi::Kind::parent",
          "occi::Category::identity",
          "occi::Kind::entityKind"
        ]
      }
    ],
    "properties": ["linkKind"]
  },
  {
    "name": "Resource",
    "expressions": [
      {
        "operations": {
          "and": 1,
          "allInstances": 1,
          "=": 2
        },
        "name": "resourceKind",
        "body": "Kind.allInstances()->one(identity = 'http://schemas.ogf.org/occi/core#resource' and parent = entityKind)\n\n",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "TypeExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "occi::Kind::parent",
          "occi::Category::identity",
          "occi::Kind::entityKind"
        ]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "includes": 1
        },
        "name": "ResourceKindIsInParent",
        "body": "\n-- OLD kind->closure(parent)->exists(k | k.identity = 'http://schemas.ogf.org/occi/core#resource')\nkind->closure(parent)->includes(resourceKind)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "occi::Resource::resourceKind",
          "occi::Kind::parent",
          "occi::Entity::kind"
        ]
      },
      {
        "operations": {
          "oclAsType": 1,
          "oclContainer": 1
        },
        "name": "configuration",
        "body": "oclContainer().oclAsType(Configuration)\n\n",
        "type": "PropertyImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1
        },
        "properties": []
      }
    ],
    "properties": [
      "resourceKind",
      "configuration"
    ]
  },
  {
    "name": "Kind",
    "expressions": [
      {
        "operations": {"=": 1},
        "name": "CorrectScheme",
        "body": "\n  scheme = extension.scheme\n  ",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "occi::Category::scheme",
          "occi::Category::extension",
          "occi::Extension::scheme"
        ]
      },
      {
        "operations": {
          "and": 1,
          "allInstances": 1,
          "=": 2
        },
        "name": "entityKind",
        "body": "Kind.allInstances()->one(identity = 'http://schemas.ogf.org/occi/core#entity' and parent = null)\n\n",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 2,
          "NullLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "occi::Kind::parent",
          "occi::Category::identity"
        ]
      },
      {
        "operations": {
          "excludes": 1,
          "oclAsSet": 1
        },
        "name": "NoCyclicInheritance",
        "body": "\nparent->closure(parent)->excludes(self)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": ["occi::Kind::parent"]
      },
      {
        "operations": {
          "and": 1,
          "oclAsSet": 1,
          "=": 2
        },
        "name": "EntityKindIsRootParent",
        "body": "\nself->closure(parent)->exists(k | k.identity = 'http://schemas.ogf.org/occi/core#entity' and k.parent = null)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 4,
          "NullLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "occi::Kind::parent",
          "occi::Category::identity"
        ]
      },
      {
        "operations": {
          "excludesAll": 1,
          "oclAsSet": 1
        },
        "name": "AttributesNameNotAlreadyDefinedInParent",
        "body": "\nattributes.name->excludesAll(parent->closure(parent).attributes.name)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "occi::Kind::parent",
          "occi::Attribute::name",
          "occi::Category::attributes"
        ]
      },
      {
        "operations": {},
        "name": "ActionTermUnicity",
        "body": "\n  actions->isUnique(term)\n  ",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "occi::Kind::actions",
          "occi::Category::term"
        ]
      }
    ],
    "properties": ["entityKind"]
  },
  {
    "name": "Configuration",
    "expressions": [
      {
        "operations": {"includesAll": 1},
        "name": "AllResourcesLinksKindInUse",
        "body": "\nuse->includesAll(resources.links.kind.extension)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "occi::Configuration::use",
          "occi::Configuration::resources",
          "occi::Entity::kind",
          "occi::Category::extension",
          "occi::Resource::links"
        ]
      },
      {
        "operations": {"includesAll": 1},
        "name": "AllResourcesLinksMixinsInUse",
        "body": "\nuse->includesAll(resources.links.mixins.extension)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 5,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "occi::Entity::mixins",
          "occi::Configuration::use",
          "occi::Configuration::resources",
          "occi::Category::extension",
          "occi::Resource::links"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "AllResourcesLinksTargetsInConfiguration",
        "body": "\nresources.links.target->forAll(r | r.configuration = self)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "occi::Configuration::resources",
          "occi::Resource::configuration",
          "occi::Link::target",
          "occi::Resource::links"
        ]
      },
      {
        "operations": {"includesAll": 1},
        "name": "AllResourcesKindInUse",
        "body": "\nuse->includesAll(resources.kind.extension)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "occi::Configuration::use",
          "occi::Configuration::resources",
          "occi::Entity::kind",
          "occi::Category::extension"
        ]
      },
      {
        "operations": {"includesAll": 1},
        "name": "AllResourcesMixinsInUse",
        "body": "\nuse->includesAll(resources.mixins.extension)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "occi::Entity::mixins",
          "occi::Configuration::use",
          "occi::Configuration::resources",
          "occi::Category::extension"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "Action",
    "expressions": [
      {
        "operations": {
          "oclAsType": 1,
          "oclContainer": 1
        },
        "name": "category",
        "body": "oclContainer().oclAsType(Category)\n\n",
        "type": "PropertyImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "+": 3,
          "=": 1,
          "-": 1,
          "substring": 1
        },
        "name": "CorrectScheme",
        "body": "\nscheme = category.scheme.substring(1,category.scheme.size()-1) + '/' + category.term + '/action#'\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 7,
          "IntegerLiteralExpImpl": 2,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "occi::Action::category",
          "occi::Category::scheme",
          "occi::Category::term"
        ]
      }
    ],
    "properties": ["category"]
  },
  {
    "name": "Entity",
    "expressions": [
      {
        "operations": {
          "oclAsSet": 1,
          "oclBadOperation": 1
        },
        "name": "IdUnique",
        "body": "\nallInstances()->isUnique(id)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["occi::Entity::id"]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "includes": 1,
          "notEmpty": 1,
          "implies": 1
        },
        "name": "KindCompatibleWithOneAppliesOfEachMixin",
        "body": "\nmixins->forAll(m | m.applies->notEmpty() implies m.applies->exists(k | kind->closure(parent)->includes(k)))\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 4,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "occi::Mixin::applies",
          "occi::Entity::mixins",
          "occi::Kind::parent",
          "occi::Entity::kind"
        ]
      },
      {
        "operations": {},
        "name": "AttributesNameUnique",
        "body": "\nattributes->isUnique(name)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "occi::AttributeState::name",
          "occi::Entity::attributes"
        ]
      }
    ],
    "properties": []
  }
]
