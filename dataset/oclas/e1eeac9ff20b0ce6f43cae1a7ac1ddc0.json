[
  {
    "name": "Configuration",
    "expressions": [{
      "operations": {"attributeAsString": 1},
      "name": "MachineNameUnique",
      "body": "\nresources->select(kindOf_Machine)->isUnique(attributeAsString('name'))\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 3,
        "StringLiteralExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "occi::Resource::kindOf_Machine",
        "occi::Configuration::resources"
      ]
    }],
    "properties": []
  },
  {
    "name": "Resource",
    "expressions": [
      {
        "operations": {"kindOf": 1},
        "name": "kindOf_Container",
        "body": "kindOf('http://occiware.org/occi/docker#container')\n",
        "type": "PropertyImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "StringLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "<=": 1,
          "toString": 2,
          "+": 3,
          "when": 1
        },
        "name": "ContainersUsedTooMemory",
        "body": "Tuple {\n\tmessage : String = 'Containers consume ' + memoryLimit.toString() + ' when memory is equals to ' + memory.toString(),\n\tstatus : Boolean = \nwhen(kindOf_Machine_VirtualBox, memoryLimit <= memory)\n\n\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 7,
          "TupleLiteralExpImpl": 1,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "occi::Resource::kindOf_Machine_VirtualBox",
          "occi::Resource::memoryLimit",
          "$$::Tuple::status",
          "occi::Resource::memory"
        ]
      },
      {
        "operations": {
          "computeInteger": 2,
          "sum": 1,
          "attributeAsInteger": 1
        },
        "name": "memoryLimit",
        "body": "\ncomputeInteger(kindOf_Container, attributeAsInteger('mem_limit'),\n  computeInteger(kindOf_Machine_VirtualBox, links->select(kindOf_Contains).target.memoryLimit->sum(), 0)\n)\n\n",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 9,
          "OperationCallExpImpl": 4,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "occi::Resource::kindOf_Machine_VirtualBox",
          "occi::Link::kindOf_Contains",
          "occi::Resource::kindOf_Container",
          "occi::Resource::memoryLimit",
          "occi::Resource::links",
          "occi::Link::target"
        ]
      },
      {
        "operations": {
          "attributeAsString": 1,
          "when": 1
        },
        "name": "ContainerLinkAliasUnique",
        "body": "\nwhen(kindOf_Container, links->select(kindOf_Link)->isUnique(attributeAsString('alias')))\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 2,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "occi::Resource::kindOf_Container",
          "occi::Link::kindOf_Link",
          "occi::Resource::links"
        ]
      },
      {
        "operations": {"kindOf": 1},
        "name": "kindOf_Machine",
        "body": "kindOf('http://occiware.org/occi/docker#machine')\n",
        "type": "PropertyImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "StringLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "or": 2,
          "excludes": 1,
          "when": 1
        },
        "name": "ContainerNoCycleBetweenContainers",
        "body": "\nwhen(kindOf_Container, links->closure(links->select(kindOf_Link or kindOf_VolumesFrom).target.links->select(kindOf_Link or kindOf_VolumesFrom)).target->excludes(self))\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 6,
          "VariableExpImpl": 12,
          "OperationCallExpImpl": 4,
          "PropertyCallExpImpl": 10
        },
        "properties": [
          "occi::Resource::kindOf_Container",
          "occi::Link::kindOf_Link",
          "occi::Resource::links",
          "occi::Link::kindOf_VolumesFrom",
          "occi::Link::target"
        ]
      },
      {
        "operations": {
          "computeInteger": 1,
          "attributeAsInteger": 1
        },
        "name": "memory",
        "body": "\ncomputeInteger(kindOf_Machine_VirtualBox, attributeAsInteger('memory'), 0)\n\n",
        "type": "PropertyImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["occi::Resource::kindOf_Machine_VirtualBox"]
      },
      {
        "operations": {"kindOf": 1},
        "name": "kindOf_Machine_VirtualBox",
        "body": "kindOf('http://occiware.org/occi/docker#machine_VirtualBox')\n\n",
        "type": "PropertyImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "StringLiteralExpImpl": 1
        },
        "properties": []
      }
    ],
    "properties": [
      "kindOf_Machine",
      "kindOf_Container",
      "kindOf_Machine_VirtualBox",
      "memoryLimit",
      "memory"
    ]
  },
  {
    "name": "Link",
    "expressions": [
      {
        "operations": {"when": 1},
        "name": "VolumesFromSourceAsContainer",
        "body": "\nwhen(kindOf_VolumesFrom, source.kindOf_Container)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "occi::Link::source",
          "occi::Resource::kindOf_Container",
          "occi::Link::kindOf_VolumesFrom"
        ]
      },
      {
        "operations": {"kindOf": 1},
        "name": "kindOf_Link",
        "body": "kindOf('http://occiware.org/occi/docker#link')\n",
        "type": "PropertyImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "StringLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"kindOf": 1},
        "name": "kindOf_VolumesFrom",
        "body": "kindOf('http://occiware.org/occi/docker#volumesfrom')\n",
        "type": "PropertyImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "StringLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "linksTo": 2,
          "=": 1,
          "when": 1
        },
        "name": "VolumesFromCanOnlyConnectColocalizedContainers",
        "body": "\nwhen(kindOf_VolumesFrom, linksTo(identity_Contains, source).source = linksTo(identity_Contains, target).source)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 10,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "occi::Link::source",
          "occi::Link::kindOf_VolumesFrom",
          "occi::Link::target",
          "occi::Link::identity_Contains"
        ]
      },
      {
        "operations": {"when": 1},
        "name": "LinkSourceAsContainer",
        "body": "\nwhen(kindOf_Link, source.kindOf_Container)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "occi::Link::source",
          "occi::Resource::kindOf_Container",
          "occi::Link::kindOf_Link"
        ]
      },
      {
        "operations": {"when": 1},
        "name": "VolumesFromTargetAsContainer",
        "body": "\nwhen(kindOf_VolumesFrom, target.kindOf_Container)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "occi::Resource::kindOf_Container",
          "occi::Link::kindOf_VolumesFrom",
          "occi::Link::target"
        ]
      },
      {
        "operations": {
          "linksTo": 2,
          "=": 1,
          "when": 1
        },
        "name": "LinkCanOnlyConnectColocalizedContainers",
        "body": "\nwhen(kindOf_Link, linksTo(identity_Contains, source).source = linksTo(identity_Contains, target).source)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 10,
          "OperationCallExpImpl": 4,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "occi::Link::source",
          "occi::Link::kindOf_Link",
          "occi::Link::target",
          "occi::Link::identity_Contains"
        ]
      },
      {
        "operations": {},
        "name": "identity_Contains",
        "body": "'http://occiware.org/occi/docker#contains'\n",
        "type": "PropertyImpl",
        "constructs": {"StringLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {"when": 1},
        "name": "LinkTargetAsContainer",
        "body": "\nwhen(kindOf_Link, target.kindOf_Container)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "occi::Resource::kindOf_Container",
          "occi::Link::kindOf_Link",
          "occi::Link::target"
        ]
      },
      {
        "operations": {"kindOf": 1},
        "name": "kindOf_Contains",
        "body": "kindOf(identity_Contains)\n\n",
        "type": "PropertyImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["occi::Link::identity_Contains"]
      }
    ],
    "properties": [
      "kindOf_Contains",
      "kindOf_Link",
      "kindOf_VolumesFrom",
      "identity_Contains"
    ]
  }
]
