[
  {
    "name": "Statemachine",
    "expressions": [{
      "operations": {},
      "name": "HasInitialState",
      "body": "Tuple {\n\tmessage : String = 'No initial state',\n\tstatus : Boolean = (states)->exists(s : State | s.initial)\n}.status",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 2,
        "TupleLiteralExpImpl": 1,
        "StringLiteralExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "oclstates::Statemachine::states",
        "$$::Tuple::status",
        "oclstates::State::initial"
      ]
    }],
    "properties": [
      "initial",
      "State",
      "name",
      "value",
      "Module",
      "states",
      "CompoundState",
      "events"
    ]
  },
  {
    "name": "Event",
    "expressions": [],
    "properties": [
      "name",
      "Statemachine",
      "Transition"
    ]
  },
  {
    "name": "State",
    "expressions": [
      {
        "operations": {
          "size": 2,
          "toString": 1,
          "+": 4,
          ">=": 1
        },
        "name": "NameLength",
        "body": "Tuple {\n\tmessage : String = '\\'' + name + '\\' has ' + ((name).size()).toString() + ' characters when at least 4 wanted',\n\tstatus : Boolean = (name).size() >= 4\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 8,
          "VariableExpImpl": 3,
          "TupleLiteralExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 3,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "oclstates::State::name",
          "$$::Tuple::status"
        ]
      },
      {
        "operations": {
          "oclAsType": 1,
          "oclContainer": 1
        },
        "name": "statemachine",
        "body": "(oclContainer()).oclAsType(Statemachine)",
        "type": "PropertyImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "implies": 1,
          "=": 1
        },
        "name": "UniqueInitialState",
        "body": "Tuple {\n\tmessage : String = 'There is more than one initial state',\n\tstatus : Boolean = initial implies (((statemachine).states)->select(initial))->size() = 1\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 3,
          "TupleLiteralExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "oclstates::State::statemachine",
          "oclstates::Statemachine::states",
          "$$::Tuple::status",
          "oclstates::State::initial"
        ]
      },
      {
        "operations": {
          "isEmpty": 1,
          "+": 2,
          "asSet": 4,
          "-": 2
        },
        "name": "EveryEventIsHandled",
        "body": "Tuple {\n\tmessage : String = let allEvents : Set(Event) = ((statemachine).events)->asSet() in let myEvents : Set(Event) = ((self.transitions)->collect(event))->asSet() in (allEvents - myEvents)->iterate(e : Event ; s : String = 'The following events are not handled:' | s + ' ' + e.name),\n\tstatus : Boolean = let allEvents : Set(Event) = ((statemachine).events)->asSet() in let myEvents : Set(Event) = ((self.transitions)->collect(event))->asSet() in (allEvents - myEvents)->isEmpty()\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 12,
          "OperationCallExpImpl": 9,
          "LetExpImpl": 4,
          "TupleLiteralExpImpl": 1,
          "StringLiteralExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 10
        },
        "properties": [
          "oclstates::State::transitions",
          "oclstates::Event::name",
          "oclstates::State::statemachine",
          "oclstates::Transition::event",
          "$$::Tuple::status",
          "oclstates::Statemachine::events"
        ]
      },
      {
        "operations": {
          "toUpperCase": 1,
          "+": 2,
          "=": 1,
          "substring": 1
        },
        "name": "NameIsLeadingUpperCase",
        "body": "Tuple {\n\tmessage : String = '\\'' + name + '\\' must be Leading Uppercase',\n\tstatus : Boolean = let firstLetter : String = (name).substring(1, 1) in firstLetter.toUpperCase() = firstLetter\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 4,
          "LetExpImpl": 1,
          "TupleLiteralExpImpl": 1,
          "IntegerLiteralExpImpl": 2,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "oclstates::State::name",
          "$$::Tuple::status"
        ]
      }
    ],
    "properties": [
      "Statemachine",
      "transitions",
      "Transition",
      "name",
      "statemachine",
      "initial"
    ]
  },
  {
    "name": "Transition",
    "expressions": [],
    "properties": [
      "event",
      "state",
      "State"
    ]
  },
  {
    "name": "CompoundState",
    "expressions": [],
    "properties": ["machine"]
  },
  {
    "name": "SimpleState",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "Module",
    "expressions": [],
    "properties": [
      "machines",
      "name"
    ]
  }
]
