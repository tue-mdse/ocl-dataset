[{
  "name": "Session",
  "expressions": [{
    "operations": {
      "computeRelative": 1,
      "excludes": 2,
      "or": 1,
      "allInstances": 1,
      "includes": 2,
      "oclAsType": 1,
      "flatten": 2,
      "contains": 1,
      "oclIsTypeOf": 1,
      "and": 1,
      "oclAsSet": 1,
      "asSet": 2,
      "notEmpty": 1,
      "=": 1
    },
    "name": "relativeLocationRoleEnabling",
    "body": "\n\nlet r1 : Role = Role.allInstances()\n->select(r : Role | r.idRole = 'r3')->any(true) , \nspatialContext : Set(RBACContext) = r1.roleContextEnabling->select(c|c.oclIsTypeOf(SpatialContext)), \nloc : Set(Location) =  spatialContext.oclAsType(SpatialContext).location->select(l | l.relativelocation->notEmpty())->flatten()->asSet() , \nrelativeLoc : Set(Location) = loc->collect(l | l.computeRelative(l.relativelocation))->flatten()->asSet()\nin if relativeLoc\n\t->exists(l | self.user.userLocation.location\n\t\t->exists(pos | l.contains(pos)))\nthen self.enabledRoles\n\t->includes(r1) or self.activeRoles\n\t->includes(r1)\nelse self.enabledRoles\n\t->excludes(r1) and self.activeRoles\n\t->excludes(r1)\nendif \n   \n   ",
    "type": "ConstraintImpl",
    "constructs": {
      "IteratorExpImpl": 9,
      "VariableExpImpl": 22,
      "OperationCallExpImpl": 18,
      "LetExpImpl": 4,
      "TypeExpImpl": 3,
      "StringLiteralExpImpl": 1,
      "IfExpImpl": 1,
      "PropertyCallExpImpl": 12,
      "BooleanLiteralExpImpl": 1
    },
    "properties": [
      "gemRBAC::Session::user",
      "gemRBAC::Session::activeRoles",
      "gemRBAC::Role::roleContextEnabling",
      "gemRBAC::Session::enabledRoles",
      "gemRBAC::SpatialContext::location",
      "gemRBAC::User::userLocation",
      "gemRBAC::Role::idRole",
      "gemRBAC::Location::relativelocation"
    ]
  }],
  "properties": []
}]
