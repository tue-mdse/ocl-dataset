[
  {
    "name": "CppVariableDeclarationFragment",
    "expressions": [],
    "properties": ["variablesContainer"]
  },
  {
    "name": "CppVariableAccess",
    "expressions": [],
    "properties": [
      "CppFieldAccess",
      "variable"
    ]
  },
  {
    "name": "CppUnaryExpression",
    "expressions": [],
    "properties": ["expression"]
  },
  {
    "name": "CppReturnStatement",
    "expressions": [],
    "properties": ["returnExpression"]
  },
  {
    "name": "CppGotoStatement",
    "expressions": [],
    "properties": ["label"]
  },
  {
    "name": "CppDoWhileStatement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppFieldAccess",
    "expressions": [],
    "properties": [
      "field",
      "expression"
    ]
  },
  {
    "name": "CppMemberFunction",
    "expressions": [],
    "properties": [
      "CppClassifier",
      "CppClassifier",
      "CppClassifier",
      "CppAbstractMethodInvocation"
    ]
  },
  {
    "name": "CppUnsignedType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppAbstractMethodInvocation",
    "expressions": [],
    "properties": [
      "method",
      "arguments"
    ]
  },
  {
    "name": "CppPostfixOperator",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppDestructor",
    "expressions": [],
    "properties": ["isVirtual"]
  },
  {
    "name": "CppMethodInvocation",
    "expressions": [],
    "properties": ["expression"]
  },
  {
    "name": "CppWhileStatement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppShortType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppLongType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppCase",
    "expressions": [],
    "properties": [
      "CppSwitchExpression",
      "expression",
      "value"
    ]
  },
  {
    "name": "CppBooleanType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppFunction",
    "expressions": [],
    "properties": [
      "ownedParameters",
      "functionBody",
      "isInline",
      "isVarArg",
      "linkage"
    ]
  },
  {
    "name": "CppFloatType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppTypedElement",
    "expressions": [],
    "properties": ["type"]
  },
  {
    "name": "CppStorageType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppField",
    "expressions": [],
    "properties": [
      "fieldContainer",
      "accessSpecifier"
    ]
  },
  {
    "name": "CppParenthizedExpression",
    "expressions": [],
    "properties": ["expression"]
  },
  {
    "name": "CppSuperMethodInvocation",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppCastExpression",
    "expressions": [],
    "properties": [
      "expression",
      "type"
    ]
  },
  {
    "name": "CppAssignamentStatement",
    "expressions": [],
    "properties": ["operator"]
  },
  {
    "name": "CppVarType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppPrefixExpression",
    "expressions": [],
    "properties": ["operator"]
  },
  {
    "name": "CppClassKey",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppConstructor",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppModel",
    "expressions": [
      {
        "operations": {
          "oclIsKindOf": 2,
          "oclAsType": 1
        },
        "name": "modules",
        "body": "elements\n                ->select(x | x.oclIsKindOf(CppPackage))\n                ->collect(x : CppPackage | x.childrenReferences )\n                ->select(y | y.oclIsKindOf(CppClassFile))\n                ->collect(y | y.oclAsType(CppClassFile))",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 5,
          "TypeExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "Metamodelo_Cpp::CppModel::elements",
          "Metamodelo_Cpp::CppPackage::childrenReferences"
        ]
      },
      {
        "operations": {
          "size": 1,
          ">": 1
        },
        "name": "nameNotEmpty",
        "body": "name.size() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["Metamodelo_Cpp::CppModel::name"]
      },
      {
        "operations": {"<>": 1},
        "name": "nameNotNull",
        "body": "name <> null",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["Metamodelo_Cpp::CppModel::name"]
      }
    ],
    "properties": [
      "orphanTypes",
      "targetFolder",
      "mainClass",
      "sourceFolder",
      "elements",
      "name",
      "modules"
    ]
  },
  {
    "name": "CppCatchClause",
    "expressions": [],
    "properties": [
      "exception",
      "theBody",
      "CppTryExpression"
    ]
  },
  {
    "name": "CppVariableDeclaration",
    "expressions": [],
    "properties": [
      "vartype",
      "usageInVariableAccess",
      "initializer",
      "isArray",
      "dimensions"
    ]
  },
  {
    "name": "CppArrayAccess",
    "expressions": [],
    "properties": [
      "index",
      "array"
    ]
  },
  {
    "name": "CppNamedElement",
    "expressions": [{
      "operations": {
        "size": 1,
        ">": 1
      },
      "name": "nameNotEmpty",
      "body": "name.size() > 0",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 2,
        "IntegerLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["Metamodelo_Cpp::CppNamedElement::name"]
    }],
    "properties": ["name"]
  },
  {
    "name": "CppSwitchExpression",
    "expressions": [],
    "properties": [
      "cases",
      "default",
      "expression"
    ]
  },
  {
    "name": "CppConstantExpression",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppImportDeclaration",
    "expressions": [],
    "properties": [
      "pathImport",
      "CppClassFile"
    ]
  },
  {
    "name": "CppPostfixExpression",
    "expressions": [],
    "properties": ["operator"]
  },
  {
    "name": "CppRegexLiteral",
    "expressions": [],
    "properties": [
      "pattern",
      "options"
    ]
  },
  {
    "name": "CppComment",
    "expressions": [],
    "properties": [
      "content",
      "singleLine",
      "multiLine"
    ]
  },
  {
    "name": "CppThrowExpression",
    "expressions": [],
    "properties": ["expression"]
  },
  {
    "name": "CppVariableDeclarationGroup",
    "expressions": [],
    "properties": [
      "container",
      "fragments"
    ]
  },
  {
    "name": "CppVariable",
    "expressions": [],
    "properties": [
      "isConst",
      "CppClassifier",
      "storage"
    ]
  },
  {
    "name": "CppEnum",
    "expressions": [],
    "properties": ["literals"]
  },
  {
    "name": "CppClassifier",
    "expressions": [
      {
        "operations": {
          "oclIsTypeOf": 1,
          "oclAsType": 1
        },
        "name": "cppConstructor",
        "body": "self.cppFields\n\t\t\t\t->select(x : CppField | x.oclIsTypeOf(CppConstructor)).oclAsType(CppConstructor)",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["Metamodelo_Cpp::CppFieldContainer::cppFields"]
      },
      {
        "operations": {
          "oclIsTypeOf": 1,
          "oclAsType": 1
        },
        "name": "cppDestructor",
        "body": "self.cppFields\n\t\t\t\t->select(x : CppField | x.oclIsTypeOf(CppDestructor)).oclAsType(CppDestructor)",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["Metamodelo_Cpp::CppFieldContainer::cppFields"]
      },
      {
        "operations": {
          "oclIsTypeOf": 1,
          "oclAsType": 1
        },
        "name": "cppOperations",
        "body": "self.cppFields\n\t\t\t\t->select(x : CppField | x.oclIsTypeOf(CppMethod)).oclAsType(CppMethod)",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["Metamodelo_Cpp::CppFieldContainer::cppFields"]
      },
      {
        "operations": {
          "oclIsTypeOf": 1,
          "oclAsType": 1
        },
        "name": "cppAttributes",
        "body": "self.cppFields\n\t\t\t\t->select(x : CppField | x.oclIsTypeOf(CppVariable)).oclAsType(CppVariable)",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["Metamodelo_Cpp::CppFieldContainer::cppFields"]
      }
    ],
    "properties": [
      "cppConstructor",
      "cppAttributes",
      "cppOperations",
      "cppDestructor"
    ]
  },
  {
    "name": "CppTypeParameter",
    "expressions": [],
    "properties": [
      "bounds",
      "CppType"
    ]
  },
  {
    "name": "CppDeclarationExpression",
    "expressions": [],
    "properties": ["groups"]
  },
  {
    "name": "CppForStatement",
    "expressions": [],
    "properties": [
      "updater",
      "initializer"
    ]
  },
  {
    "name": "CppNumberLiteral",
    "expressions": [],
    "properties": ["token"]
  },
  {
    "name": "CppVoidType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppBlock",
    "expressions": [],
    "properties": [
      "CppFunction",
      "statements"
    ]
  },
  {
    "name": "CppDoubleType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppContinueStatement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppAccessSpecifier",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppAssignmentOperator",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppIterationStatement",
    "expressions": [],
    "properties": [
      "theBody",
      "condition"
    ]
  },
  {
    "name": "CppClass",
    "expressions": [],
    "properties": [
      "isAbstract",
      "CppModel",
      "classkey",
      "isGeneric",
      "CppClass",
      "superClass",
      "isFinal"
    ]
  },
  {
    "name": "CppBinaryExpression",
    "expressions": [],
    "properties": [
      "leftOperand",
      "rightOperand"
    ]
  },
  {
    "name": "CppTypeAccess",
    "expressions": [],
    "properties": [
      "CppTypeParameter",
      "CppTypedElement",
      "parameterMapping",
      "access",
      "CppCastExpression",
      "CppTypeAccess"
    ]
  },
  {
    "name": "CppSignedType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppStringLiteral",
    "expressions": [],
    "properties": ["literalValue"]
  },
  {
    "name": "CppExpression",
    "expressions": [],
    "properties": [
      "CppTryExpression",
      "CppCase",
      "CppSwitchExpression",
      "CppThrowExpression",
      "CppSelectionStatement",
      "CppEnumConstructor",
      "CppAbstractMethodInvocation",
      "CppUnaryExpression",
      "CppArrayAccess",
      "CppCastExpression",
      "CppVariableDeclaration",
      "CppIterationStatement",
      "CppSelectionStatement",
      "CppBinaryExpression",
      "CppBinaryExpression",
      "CppForStatement",
      "CppReturnStatement",
      "CppIfElseStatement",
      "CppFieldAccess",
      "CppArrayAccess",
      "CppCase",
      "CppArrayInitializer",
      "CppCatchClause",
      "CppMethodInvocation",
      "CppIterationStatement",
      "CppBlock",
      "CppSwitchExpression",
      "CppParenthizedExpression",
      "CppForStatement",
      "CppVariableDeclaration"
    ]
  },
  {
    "name": "CppClassFile",
    "expressions": [],
    "properties": [
      "elements",
      "CppModel",
      "imports",
      "CppImportDeclaration"
    ]
  },
  {
    "name": "CppSuperConstructorInvocation",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppMethod",
    "expressions": [],
    "properties": [
      "isPureVirtual",
      "isVirtual",
      "isFinal",
      "isConst"
    ]
  },
  {
    "name": "CppFieldContainer",
    "expressions": [],
    "properties": ["cppFields"]
  },
  {
    "name": "CppLinkageSpecifier",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppSingleVariableDeclaration",
    "expressions": [],
    "properties": [
      "CppFunction",
      "catchClause"
    ]
  },
  {
    "name": "CppPackage",
    "expressions": [
      {
        "operations": {"oclIsKindOf": 1},
        "name": "containedTypes",
        "body": "childrenReferences\n\t\t\t\t->select(x | x.oclIsKindOf(CppClassFile))\n\t\t\t\t->collect(x : CppClassFile | x.elements )",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "Metamodelo_Cpp::CppClassFile::elements",
          "Metamodelo_Cpp::CppPackage::childrenReferences"
        ]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "oclAsType": 1
        },
        "name": "childrenPackages",
        "body": "childrenReferences\n\t\t\t\t->select(x | x.oclIsKindOf(CppPackage))\n\t\t\t\t->collect(x | x.oclAsType(CppPackage))",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["Metamodelo_Cpp::CppPackage::childrenReferences"]
      }
    ],
    "properties": [
      "CppPackage",
      "childrenPackages",
      "childrenReferences",
      "containedTypes"
    ]
  },
  {
    "name": "CppEnumConstructor",
    "expressions": [],
    "properties": [
      "CppEnum",
      "expression"
    ]
  },
  {
    "name": "CppNullLiteral",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppThisExpression",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppCharacterLiteral",
    "expressions": [],
    "properties": ["charValue"]
  },
  {
    "name": "CppUnaryOperator",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppJumpStatement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppSelectionStatement",
    "expressions": [],
    "properties": [
      "condition",
      "statement"
    ]
  },
  {
    "name": "CppIfElseStatement",
    "expressions": [],
    "properties": [
      "inLine",
      "elseStatement"
    ]
  },
  {
    "name": "CppBreakStatement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppPathReferentiable",
    "expressions": [],
    "properties": [
      "CppModel",
      "parentReference",
      "referencedIn",
      "CppClassFile"
    ]
  },
  {
    "name": "CppIfStatement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppPrimitiveType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppIntType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppBooleanLiteral",
    "expressions": [],
    "properties": ["booleanValue"]
  },
  {
    "name": "CppPathReference",
    "expressions": [],
    "properties": ["referencedTerminal"]
  },
  {
    "name": "CppQualifierType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppType",
    "expressions": [],
    "properties": [
      "usagesInTypeAccess",
      "CppPackage",
      "CppModel",
      "typeParameters"
    ]
  },
  {
    "name": "CppCharType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppTryExpression",
    "expressions": [],
    "properties": [
      "theBody",
      "catchClause"
    ]
  },
  {
    "name": "CppModelElement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppOperator",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CppInfixExpression",
    "expressions": [],
    "properties": ["operator"]
  },
  {
    "name": "CppLabeledStatement",
    "expressions": [],
    "properties": ["CppGotoStatement"]
  },
  {
    "name": "CppArrayInitializer",
    "expressions": [],
    "properties": ["expressions"]
  }
]
