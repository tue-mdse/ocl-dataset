[
  {
    "name": "Soins",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Travail",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Monde",
    "expressions": [{
      "operations": {
        "<>": 2,
        "implies": 1
      },
      "name": "nomVilleUnique",
      "body": "\n\t\t\tself.villes->forAll(v1, v2:Ville |\n \t\t\tv1<>v2 implies\n \t\t\tv1.nom <> v2.nom)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "OperationCallExpImpl": 3,
        "VariableExpImpl": 5,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "sig::Ville::nom",
        "sig::Monde::villes"
      ]
    }],
    "properties": ["villes"]
  },
  {
    "name": "Personne",
    "expressions": [
      {
        "operations": {
          "<=": 3,
          "size": 3,
          "and": 2,
          "selectByType": 3
        },
        "name": "NombreBatiments",
        "body": "\n\t\t\tself.batiments->selectByType(Etude)->size() <= 1\n\t\t\tand \n\t\t\tself.batiments->selectByType(Travail)->size() <= 1 \n\t\t\tand \n\t\t\tself.batiments->selectByType(Soins)->size() <= 2",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 11,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 3,
          "TypeExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": ["sig::Personne::batiments"]
      },
      {
        "operations": {
          "or": 5,
          "oclIsTypeOf": 8,
          "and": 2,
          "=": 4
        },
        "name": "EtudeOuTravail",
        "body": "\n\t\t\tself.batiments->forAll(b1, b2:Batiment |\n\t\t \t\t((b1.oclIsTypeOf(Travail) or b1.oclIsTypeOf(Etude) = false)  and ( b2.oclIsTypeOf(Travail) or b2.oclIsTypeOf(Etude) = false )) \n\t\t \tor \n\t\t \t\t((b1.oclIsTypeOf(Etude) or b1.oclIsTypeOf(Etude) = false)  and (b2.oclIsTypeOf(Etude) or b2.oclIsTypeOf(Travail) = false ))\n\t\t)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 19,
          "VariableExpImpl": 9,
          "TypeExpImpl": 8,
          "BooleanLiteralExpImpl": 4,
          "PropertyCallExpImpl": 1
        },
        "properties": ["sig::Personne::batiments"]
      }
    ],
    "properties": [
      "statut",
      "Ville",
      "batiments",
      "nom"
    ]
  },
  {
    "name": "Etude",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Ville",
    "expressions": [],
    "properties": [
      "Monde",
      "nom",
      "personnes",
      "batiments"
    ]
  },
  {
    "name": "Batiment",
    "expressions": [],
    "properties": [
      "Ville",
      "adresse",
      "personnes"
    ]
  }
]
