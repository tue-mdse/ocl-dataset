[
  {
    "name": "TreeCS",
    "expressions": [{
      "operations": {},
      "name": "ast",
      "body": "\n\tinvalid ",
      "type": "OperationImpl",
      "constructs": {"InvalidLiteralExpImpl": 1},
      "properties": []
    }],
    "properties": []
  },
  {
    "name": "OclElement",
    "expressions": [
      {
        "operations": {
          "_labelI": 1,
          "=": 1,
          "oclContainer": 1
        },
        "name": "parentLabelI",
        "body": "\n\tlet parent = self.oclContainer()\n\tin \tif parent =  null then '' else parent._labelI(self)  endif\n \n",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 4,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "IfExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"parentLabelI": 1},
        "name": "_labelI",
        "body": "\n\tparentLabelI()\n\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1
        },
        "properties": []
      }
    ],
    "properties": []
  },
  {
    "name": "BinCS",
    "expressions": [{
      "operations": {
        "ast": 4,
        "_labelI": 1
      },
      "name": "ast",
      "body": "\n\tkwas::Bin {\t\n\t\tleft = left.ast(),\n\t\tright = right.ast(),\n\t\tlabelS = right.ast().labelS,\n\t\tlabelI = ast()._labelI(null) \n\t}\n\n",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 4,
        "OperationCallExpImpl": 5,
        "NullLiteralExpImpl": 1,
        "ShadowExpImpl": 1,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "kwas::Tree::labelS",
        "kwcs::BinCS::left",
        "kwcs::BinCS::right"
      ]
    }],
    "properties": []
  },
  {
    "name": "Bin",
    "expressions": [
      {
        "operations": {},
        "name": "right_labelI",
        "body": "\n\tleft.labelS\n\t\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "kwas::Tree::labelS",
          "kwas::Bin::left"
        ]
      },
      {
        "operations": {"parentLabelI": 1},
        "name": "left_labelI",
        "body": "\n\tparentLabelI()\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "right_labelI": 1,
          "concat": 1,
          "left_labelI": 1
        },
        "name": "_labelI",
        "body": "\n\tright_labelI(child)\n\t.concat( -- FIXME check by containment ref ?\t\t\n\tleft_labelI(child))\n\t\t\t\t\n",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 4
        },
        "properties": []
      }
    ],
    "properties": []
  },
  {
    "name": "LeafCS",
    "expressions": [{
      "operations": {
        "ast": 2,
        "_labelI": 1,
        "toString": 1,
        "+": 1
      },
      "name": "ast",
      "body": "\n\tkwas::Leaf {\n\t\tval = val,\n\t\tlabelS = self.toString() + ast().labelI,\n\t\tlabelI = ast()._labelI(null)\n\t}\n\t\n",
      "type": "OperationImpl",
      "constructs": {
        "OperationCallExpImpl": 5,
        "VariableExpImpl": 4,
        "NullLiteralExpImpl": 1,
        "ShadowExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "kwcs::LeafCS::val",
        "kwas::Tree::labelI"
      ]
    }],
    "properties": []
  },
  {
    "name": "TopCS",
    "expressions": [{
      "operations": {"ast": 1},
      "name": "ast",
      "body": "\n\tkwas::Top {\n\t\tnode = node.ast()\n\t}\n\t\n",
      "type": "OperationImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "ShadowExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["kwcs::TopCS::node"]
    }],
    "properties": []
  }
]
