[
  {
    "name": "Visitable",
    "expressions": [
      {
        "operations": {"lookupC": 1},
        "name": "lookupC",
        "body": "\n   lookupC(aPathNameCS .path)\n\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["source::PathNameCS::path"]
      },
      {
        "operations": {
          "_lookupA1": 1,
          "isEmpty": 1,
          "unqualified_env_A1": 1,
          "first": 1
        },
        "name": "_lookupUnqualifiedA1",
        "body": "\nlet foundA1 = _lookupA1(unqualified_env_A1(), aName)\nin  if foundA1->isEmpty()\n\tthen null\n\telse foundA1->first() -- LookupVisitor will report ambiguous result\n\tendif\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 4,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "IfExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"lookupB": 1},
        "name": "lookupB",
        "body": "\n   lookupB(aPathNameCS .path)\n\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["source::PathNameCS::path"]
      },
      {
        "operations": {
          "selectByKind": 1,
          "not": 1,
          "_lookupC": 1,
          "and": 1,
          "isEmpty": 1,
          "=": 2
        },
        "name": "_lookupC",
        "body": "\nlet foundC = env.namedElements->selectByKind(C)->select(name = cName)\nin  if foundC->isEmpty() and not (env.parentEnv = null)\n\tthen _lookupC(env.parentEnv, cName)\n\telse foundC\n\tendif\n\t\n",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 9,
          "OperationCallExpImpl": 7,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "target::NamedElement::name",
          "lookup::LookupEnvironment::parentEnv",
          "lookup::LookupEnvironment::namedElements"
        ]
      },
      {
        "operations": {"_lookupUnqualifiedB": 1},
        "name": "lookupB",
        "body": "\n   _lookupUnqualifiedB(aPathElementCS.name)\n   \n\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["source::PathElementCS::name"]
      },
      {
        "operations": {"_lookupUnqualifiedA1": 1},
        "name": "lookupA1",
        "body": "\n   _lookupUnqualifiedA1(aPathElementCS.name)\n   \n\n\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["source::PathElementCS::name"]
      },
      {
        "operations": {"_lookupUnqualifiedA2": 1},
        "name": "lookupA2",
        "body": "\n   _lookupUnqualifiedA2(aPathElementCS.name)\n   \n\n\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["source::PathElementCS::name"]
      },
      {
        "operations": {
          "lookupC": 1,
          "size": 2,
          "last": 1,
          "subOrderedSet": 1,
          "lookupQualifiedC": 1,
          "lookupA2": 1,
          "-": 1,
          "=": 1,
          "first": 2
        },
        "name": "lookupC",
        "body": "\n   if segments->size() = 1\n   then lookupC(segments->first())\n   else let qualifierSegments = segments->subOrderedSet(1,segments->size()-1),\n            qualifier = lookupA2(qualifierSegments->first())\n        in qualifier?.lookupQualifiedC(segments->last())\n   endif\n\n\n\n",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 11,
          "VariableExpImpl": 9,
          "LetExpImpl": 2,
          "IntegerLiteralExpImpl": 3,
          "IfExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "_lookupB": 1,
          "unqualified_env_B": 1,
          "isEmpty": 1,
          "first": 1
        },
        "name": "_lookupUnqualifiedB",
        "body": "\nlet foundB = _lookupB(unqualified_env_B(), bName)\nin  if foundB->isEmpty()\n\tthen null\n\telse foundB->first() -- LookupVisitor will report ambiguous result\n\tendif\n",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 5,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "IfExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "unqualified_env_C": 1,
          "_lookupC": 1,
          "isEmpty": 1,
          "first": 1
        },
        "name": "_lookupUnqualifiedC",
        "body": "\nlet foundC = _lookupC(unqualified_env_C(), cName)\nin  if foundC->isEmpty()\n\tthen null\n\telse foundC->first() -- LookupVisitor will report ambiguous result\n\tendif\n",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 5,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "IfExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"_lookupUnqualifiedC": 1},
        "name": "lookupC",
        "body": "\n   _lookupUnqualifiedC(aPathElementCS.name)\n   \n\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["source::PathElementCS::name"]
      },
      {
        "operations": {
          "selectByKind": 1,
          "not": 1,
          "_lookupA1": 1,
          "and": 1,
          "isEmpty": 1,
          "=": 2
        },
        "name": "_lookupA1",
        "body": "\nlet foundA1 = env.namedElements->selectByKind(A1)->select(name = aName)\nin  if foundA1->isEmpty() and not (env.parentEnv = null)\n\tthen _lookupA1(env.parentEnv, aName)\n\telse foundA1\n\tendif\n\t\n",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 9,
          "OperationCallExpImpl": 7,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "target::NamedElement::name",
          "lookup::LookupEnvironment::parentEnv",
          "lookup::LookupEnvironment::namedElements"
        ]
      },
      {
        "operations": {
          "selectByKind": 1,
          "_lookupB": 1,
          "not": 1,
          "and": 1,
          "isEmpty": 1,
          "=": 2
        },
        "name": "_lookupB",
        "body": "\nlet foundB = env.namedElements->selectByKind(B)->select(name = bName)\nin  if foundB->isEmpty() and not (env.parentEnv = null)\n\tthen _lookupB(env.parentEnv, bName)\n\telse foundB\n\tendif\n\t\n",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 9,
          "OperationCallExpImpl": 7,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "target::NamedElement::name",
          "lookup::LookupEnvironment::parentEnv",
          "lookup::LookupEnvironment::namedElements"
        ]
      },
      {
        "operations": {
          "_lookupA2": 1,
          "isEmpty": 1,
          "unqualified_env_A2": 1,
          "first": 1
        },
        "name": "_lookupUnqualifiedA2",
        "body": "\nlet foundA2 = _lookupA2(unqualified_env_A2(), aName)\nin  if foundA2->isEmpty()\n\tthen null\n\telse foundA2->first() -- LookupVisitor will report ambiguous result\n\tendif\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 4,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "IfExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "lookupB": 1,
          "size": 2,
          "last": 1,
          "subOrderedSet": 1,
          "lookupQualifiedB": 1,
          "=": 1,
          "-": 1,
          "lookupA1": 1,
          "first": 2
        },
        "name": "lookupB",
        "body": "\n   if segments->size() = 1\n   then lookupB(segments->first())\n   else let qualifierSegments = segments->subOrderedSet(1,segments->size()-1),\n            qualifier = lookupA1(qualifierSegments->first())\n        in qualifier?.lookupQualifiedB(segments->last())\n   endif\n\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 9,
          "OperationCallExpImpl": 11,
          "LetExpImpl": 2,
          "IntegerLiteralExpImpl": 3,
          "IfExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "selectByKind": 1,
          "not": 1,
          "_lookupA2": 1,
          "and": 1,
          "isEmpty": 1,
          "=": 2
        },
        "name": "_lookupA2",
        "body": "\nlet foundA2 = env.namedElements->selectByKind(A2)->select(name = aName)\nin  if foundA2->isEmpty() and not (env.parentEnv = null)\n\tthen _lookupA2(env.parentEnv, aName)\n\telse foundA2\n\tendif\n\t\n",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 9,
          "OperationCallExpImpl": 7,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "target::NamedElement::name",
          "lookup::LookupEnvironment::parentEnv",
          "lookup::LookupEnvironment::namedElements"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "OclElement",
    "expressions": [
      {
        "operations": {"_unqualified_env_A2": 1},
        "name": "unqualified_env_A2",
        "body": "\n\t_unqualified_env_A2(null)\n",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "NullLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"parentEnv_A2": 1},
        "name": "_unqualified_env_A2",
        "body": "\n\tparentEnv_A2()\n",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"parentEnv_C": 1},
        "name": "_unqualified_env_C",
        "body": "\n\tparentEnv_C()\n\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"parentEnv_B": 1},
        "name": "_unqualified_env_B",
        "body": "\n\tparentEnv_B()\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"_unqualified_env_A1": 1},
        "name": "unqualified_env_A1",
        "body": "\n\t_unqualified_env_A1(null)\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "NullLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "=": 1,
          "_unqualified_env_C": 1,
          "oclContainer": 1
        },
        "name": "parentEnv_C",
        "body": "\n\tlet parent = oclContainer() in if parent = null then lookup::LookupEnvironment { } else parent._unqualified_env_C(self) endif\n\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 3,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "ShadowExpImpl": 1,
          "IfExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {},
        "name": "_qualified_env_B",
        "body": "\n\tlookup::LookupEnvironment { }\n",
        "type": "OperationImpl",
        "constructs": {"ShadowExpImpl": 1},
        "properties": []
      },
      {
        "operations": {
          "_unqualified_env_A1": 1,
          "=": 1,
          "oclContainer": 1
        },
        "name": "parentEnv_A1",
        "body": "\n\tlet parent = oclContainer() in if parent = null then lookup::LookupEnvironment { } else parent._unqualified_env_A1(self) endif\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 3,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "ShadowExpImpl": 1,
          "IfExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "_unqualified_env_B": 1,
          "=": 1,
          "oclContainer": 1
        },
        "name": "parentEnv_B",
        "body": "\n\tlet parent = oclContainer() in if parent = null then lookup::LookupEnvironment { } else parent._unqualified_env_B(self) endif\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 3,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "ShadowExpImpl": 1,
          "IfExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "_unqualified_env_A2": 1,
          "=": 1,
          "oclContainer": 1
        },
        "name": "parentEnv_A2",
        "body": "\n\tlet parent = oclContainer() in if parent = null then lookup::LookupEnvironment { } else parent._unqualified_env_A2(self) endif\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 3,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "ShadowExpImpl": 1,
          "IfExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"_unqualified_env_C": 1},
        "name": "unqualified_env_C",
        "body": "\n\t_unqualified_env_C(null)\n\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "NullLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {},
        "name": "_qualified_env_C",
        "body": "\n\tlookup::LookupEnvironment { }\n",
        "type": "OperationImpl",
        "constructs": {"ShadowExpImpl": 1},
        "properties": []
      },
      {
        "operations": {"_unqualified_env_B": 1},
        "name": "unqualified_env_B",
        "body": "\n\t_unqualified_env_B(null)\n",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "NullLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"parentEnv_A1": 1},
        "name": "_unqualified_env_A1",
        "body": "\n\tparentEnv_A1()\n",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1
        },
        "properties": []
      }
    ],
    "properties": []
  },
  {
    "name": "A2",
    "expressions": [
      {
        "operations": {
          "_lookupC": 1,
          "isEmpty": 1,
          "_qualified_env_C": 1,
          "first": 1
        },
        "name": "_lookupQualifiedC",
        "body": "\n\tlet foundC = _lookupC(_qualified_env_C(), cName)\n\tin  if foundC->isEmpty()\n\t\tthen null\n\t\telse foundC->first()\n\t\tendif\n",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 5,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "IfExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"addElements": 1},
        "name": "_qualified_env_C",
        "body": "\n\tlet env = lookup::LookupEnvironment{}\n\tin env\n\t.addElements(ownsC)\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "LetExpImpl": 1,
          "ShadowExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["target::A2::ownsC"]
      },
      {
        "operations": {
          "parentEnv_C": 2,
          "addElements": 1,
          "includes": 1,
          "nestedEnv": 1,
          "<": 1,
          "indexOf": 2
        },
        "name": "_unqualified_env_C",
        "body": "\n\tif ownsC->includes(child)\n\tthen parentEnv_C().nestedEnv()\n\t\t.addElements(ownsC->select(x | self.ownsC->indexOf(x) < self.ownsC->indexOf(child)))\n\t\t\n\telse parentEnv_C()\n\tendif\n\n",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 9,
          "OperationCallExpImpl": 8,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": ["target::A2::ownsC"]
      },
      {
        "operations": {"_lookupQualifiedC": 1},
        "name": "lookupQualifiedC",
        "body": "\n   _lookupQualifiedC(aPathElementCS.name)\n   \n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["source::PathElementCS::name"]
      }
    ],
    "properties": []
  },
  {
    "name": "A1",
    "expressions": [
      {
        "operations": {"_lookupQualifiedB": 1},
        "name": "lookupQualifiedB",
        "body": "\n   _lookupQualifiedB(aPathElementCS.name)\n   \n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["source::PathElementCS::name"]
      },
      {
        "operations": {
          "_lookupB": 1,
          "isEmpty": 1,
          "_qualified_env_B": 1,
          "first": 1
        },
        "name": "_lookupQualifiedB",
        "body": "\n\tlet foundB = _lookupB(_qualified_env_B(), bName)\n\tin  if foundB->isEmpty()\n\t\tthen null\n\t\telse foundB->first()\n\t\tendif\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 4,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "IfExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "addElements": 1,
          "parentEnv_B": 2,
          "includes": 1,
          "nestedEnv": 1,
          "<": 1,
          "indexOf": 2
        },
        "name": "_unqualified_env_B",
        "body": "\n\tif ownsB->includes(child)\n\tthen parentEnv_B().nestedEnv()\n\t\t.addElements(ownsB->select(x | self.ownsB->indexOf(x) < self.ownsB->indexOf(child)))\n\t\t\n\telse parentEnv_B()\n\tendif\n\t\n",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 8,
          "VariableExpImpl": 9,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": ["target::A1::ownsB"]
      },
      {
        "operations": {"addElements": 1},
        "name": "_qualified_env_B",
        "body": "\n\tlet env = lookup::LookupEnvironment{}\n\tin env\n\t.addElements(ownsB)\n",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "LetExpImpl": 1,
          "ShadowExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["target::A1::ownsB"]
      }
    ],
    "properties": []
  },
  {
    "name": "TRoot",
    "expressions": [
      {
        "operations": {
          "addElements": 1,
          "parentEnv_A1": 1,
          "nestedEnv": 1
        },
        "name": "_unqualified_env_A1",
        "body": "\n\tparentEnv_A1().nestedEnv()\n\t\t.addElements(ownedA)\n\t\t\n",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["target::TRoot::ownedA"]
      },
      {
        "operations": {
          "addElements": 1,
          "parentEnv_A2": 1,
          "nestedEnv": 1
        },
        "name": "_unqualified_env_A2",
        "body": "\n\tparentEnv_A2().nestedEnv()\n\t\t.addElements(ownedA)\n\t\t\n\t\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 1
        },
        "properties": ["target::TRoot::ownedA"]
      }
    ],
    "properties": []
  },
  {
    "name": "LookupEnvironment",
    "expressions": [{
      "operations": {},
      "name": "nestedEnv",
      "body": "\n\tLookupEnvironment {\n\t\tparentEnv = self\n\t}\n",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "ShadowExpImpl": 1
      },
      "properties": []
    }],
    "properties": []
  }
]
