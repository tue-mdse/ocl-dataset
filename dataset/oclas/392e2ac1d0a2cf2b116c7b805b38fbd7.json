[
  {
    "name": "Systeme",
    "expressions": [],
    "properties": [
      "dispositif",
      "piece"
    ]
  },
  {
    "name": "typeArrivee",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Dispositif",
    "expressions": [],
    "properties": [
      "Systeme",
      "nom",
      "piece"
    ]
  },
  {
    "name": "typeDepart",
    "expressions": [],
    "properties": []
  },
  {
    "name": "DE",
    "expressions": [{
      "operations": {
        "or": 2,
        "=": 8
      },
      "name": "t1",
      "body": "if self.typeD = typeDepart::DE_A then (self.piece.type = TypePiece::T1 or self.piece.type = TypePiece::T2)\n\t\telse if self.typeD = typeDepart::DE_B then self.piece.type = TypePiece::T2\n\t\telse if self.typeD = typeDepart::DE_C then (self.piece.type = TypePiece::T1 or self.piece.type = TypePiece::T3) else false endif endif endif",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 10,
        "VariableExpImpl": 8,
        "EnumLiteralExpImpl": 8,
        "IfExpImpl": 3,
        "PropertyCallExpImpl": 13,
        "BooleanLiteralExpImpl": 1
      },
      "properties": [
        "projetOC::DE::typeD",
        "projetOC::Piece::type",
        "projetOC::Dispositif::piece"
      ]
    }],
    "properties": ["typeD"]
  },
  {
    "name": "DA",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "=": 1
        },
        "name": "",
        "body": "self.piece-> size()=1",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["projetOC::Dispositif::piece"]
      },
      {
        "operations": {
          "size": 2,
          "and": 1,
          "oclAsSet": 2,
          "<": 1,
          "-": 1,
          ">": 1
        },
        "name": "",
        "body": "self.piece -> size()<2 and self.piece-> size()>-1",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 8,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": ["projetOC::Dispositif::piece"]
      },
      {
        "operations": {
          "isEmpty": 1,
          "oclAsSet": 1
        },
        "name": "",
        "body": "self.piece->isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["projetOC::Dispositif::piece"]
      }
    ],
    "properties": ["typeA"]
  },
  {
    "name": "TypePiece",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Piece",
    "expressions": [],
    "properties": [
      "Systeme",
      "type",
      "dispositif"
    ]
  },
  {
    "name": "DT",
    "expressions": [
      {
        "operations": {
          "and": 1,
          "oclAsSet": 2,
          "isEmpty": 1,
          "notEmpty": 1
        },
        "name": "p2",
        "body": "self.piece->notEmpty() and da.piece->isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": ["projetOC::Dispositif::piece"]
      },
      {
        "operations": {
          "or": 2,
          "=": 8
        },
        "name": "",
        "body": "if de.typeD = typeDepart::DE_A then (self.piece = TypePiece::T1 or self.piece = TypePiece::T2) \n\t\t\telse if de.typeD = typeDepart::DE_B then self.piece = TypePiece::T1\n\t\t\telse if de.typeD = typeDepart::DE_C then (self.piece = TypePiece::T1 or self.piece = TypePiece::T3) else false endif endif endif",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 10,
          "VariableExpImpl": 8,
          "EnumLiteralExpImpl": 8,
          "IfExpImpl": 3,
          "PropertyCallExpImpl": 8,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "projetOC::DE::typeD",
          "projetOC::Dispositif::piece"
        ]
      },
      {
        "operations": {
          "and": 1,
          "isEmpty": 1,
          "oclAsSet": 2,
          "notEmpty": 1
        },
        "name": "",
        "body": "self.piece->isEmpty() and da.piece->notEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 5,
          "PropertyCallExpImpl": 2
        },
        "properties": ["projetOC::Dispositif::piece"]
      }
    ],
    "properties": []
  }
]
