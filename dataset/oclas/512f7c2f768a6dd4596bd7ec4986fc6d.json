[
  {
    "name": "Vehicle",
    "expressions": [],
    "properties": [
      "avgVelocity",
      "am",
      "avgAcceleration"
    ]
  },
  {
    "name": "Length",
    "expressions": [],
    "properties": [
      "AccMeasure",
      "AccMeasure",
      "AccMeasure"
    ]
  },
  {
    "name": "LinearAcceleration",
    "expressions": [],
    "properties": [
      "Vehicle",
      "AccMeasure"
    ]
  },
  {
    "name": "Unit",
    "expressions": [
      {
        "operations": {"=": 1},
        "name": "isCompatibleWith",
        "body": "self.dimensions = u.dimensions",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["quantities::SIUnit::dimensions"]
      },
      {
        "operations": {
          "and": 2,
          "=": 3
        },
        "name": "equals",
        "body": "(self.dimensions = u.dimensions) and (self.conversionFactor = u.conversionFactor) and (self.offset = u.offset)",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 5,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "quantities::Unit::conversionFactor",
          "quantities::SIUnit::dimensions",
          "quantities::Unit::offset"
        ]
      },
      {
        "operations": {
          "noOffset": 1,
          "and": 3,
          "count": 3,
          "=": 3
        },
        "name": "isBaseUnit",
        "body": "(self.dimensions->count(1.0) = 1) and (self.dimensions->count(0.0) = 7) and (self.noOffset()) and (self.conversionFactor->count(1.0) = 8)",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 10,
          "VariableExpImpl": 4,
          "IntegerLiteralExpImpl": 3,
          "RealLiteralExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "quantities::Unit::conversionFactor",
          "quantities::SIUnit::dimensions"
        ]
      },
      {
        "operations": {
          "count": 1,
          "subSequence": 1,
          "=": 1,
          "asSequence": 1
        },
        "name": "isUnitless",
        "body": "(self.dimensions->asSequence()->subSequence(1, 7)->count(0.0) = 7)",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 3,
          "RealLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["quantities::SIUnit::dimensions"]
      },
      {
        "operations": {
          "noOffset": 1,
          "and": 2,
          "count": 1,
          "includes": 1,
          "-": 105,
          "=": 1
        },
        "name": "isDerivedUnit",
        "body": "let DerivedUnitDimensions : Sequence(Sequence(Real)) = Sequence{ --                    L, M, T, I, O, N, J, U\n--                    m,Kg, s, A, K,mol,cd,rad \n\t\t\t\t\tSequence{2, 0, - 2, 0, 0, 0, 0, 0}, -- 'Gy', \t\tL2T-2\tGray\tunit:Gray\tGy\n\t\t\t\t\tSequence{2, 0, - 3, 0, 0, 0, 0, 0}, -- 'Gy/s', \t\tL2T-3\tGray per second\tunit:GrayPerSecond\tGy/s\n\t\t\t\t\tSequence{0, 0, - 1, 0, 0, 0, 0, 0}, -- 'Bq', \t\tT-1\tBecquerel\tunit:Becquerel\tBq\n\t\t\t\t\tSequence{- 3, 0, 0, 0, 0, 1, 0, 0}, -- 'mol/m^3', \t\tL-3N1\tMole per cubic meter\tunit:MolePerCubicMeter\tmol/m^3\n\t\t\t\t\tSequence{0, - 1, 0, 0, 0, 1, 0, 0}, -- 'mol/kg', \t\tM-3N1\tMole per kilogram\tunit:MolePerKilogram\tmol/kg\n\t\t\t\t\tSequence{0, 0, - 2, 0, 0, 0, 0, 1}, -- 'rad/s^2', \t\tU1T-2\tRadian per second squared\tunit:RadianPerSecondSquared\trad/s^2\n\t\t\t\t\tSequence{2, 1, 0, 0, 0, 0, 0, 0}, -- 'kg*m^2', \t\tL2M1\tKilogram Meter Squared\tunit:KilogramMeterSquared\tkg-m^2\n\t\t\t\t\tSequence{2, 1, - 1, 0, 0, 0, 0, 0}, -- 'J*s', \t\tL2M1T-1\tJoule Second\tunit:JouleSecond\tJ s\n\t\t\t\t\tSequence{0, 0, - 1, 0, 0, 0, 0, 1}, -- 'rad/s', \t\tU1T-1\tRadian per second\tunit:RadianPerSecond\trad/s\n\t\t\t\t\tSequence{2, 0, 0, 0, 0, 0, 0, 0}, -- 'm^2', \t\tL2\tSquare meter\tunit:SquareMeter\tm^2\n\t\t\t\t\tSequence{2, 0, 0, 0, 0, 0, 0, 2}, -- 'm^2*st', \t\tU1L2\tSquare meter steradian\tunit:SquareMeterSteradian\tm^2-sr\n\t\t\t\t\tSequence{2, 0, 0, 0, 1, 0, 0, 0}, -- 'm^2*K', \t\tL2Î˜1\tSquare meter kelvin\tunit:SquareMeterKelvin\tm^2-K\n\t\t\t\t\tSequence{2, 0, 0, 0, - 1, 0, 0, 0}, -- 'm^2/K', \t\tL2Î˜-1\tSquare meter per kelvin\tunit:SquareMeterPerKelvin\tm^2/K\n\t\t\t\t\tSequence{- 2, - 1, 4, 2, 0, 0, 0, 0}, -- 'F', \t\tL-2M-1T4I2\tFarad\tunit:Farad\tF\n\t\t\t\t\tSequence{0, 0, - 1, 0, 0, 1, 0, 0}, -- 'kat', \t\tT-1N1\tKatal\tunit:Katal\tkat\n\t\t\t\t\tSequence{0, 1, - 3, 0, - 1, 0, 0, 0}, -- 'W/(m^2*K)', \tM1T-3Î˜-1\tM1T-3Î˜-1\tWatt per square meter kelvin\tunit:WattPerSquareMeterKelvin\tW/(m^2-K)\n\t\t\t\t\tSequence{- 3, 1, 0, 0, 0, 0, 0, 0}, -- 'kg/m^3', L-3M1\t\tL-3M1\tKilogram per cubic meter\tunit:KilogramPerCubicMeter\tkg/m^3\n\t\t\t\t\tSequence{2, 0, - 2, 0, 0, 0, 0, 0}, -- 'Sv', L2T-2\t\tL2T-2\tSievert\tunit:Sievert\tSv\n\t\t\t\t\tSequence{- 1, 1, - 1, 0, 0, 0, 0, 0}, -- 'Pa*s', L-1M1T-1\t\tL-1M1T-1\tPascal second\tunit:PascalSecond\tPa-s\n\t\t\t\t\tSequence{0, 0, 1, 1, 0, 0, 0, 0}, -- 'C', T1I1\t\tT1I1\tCoulomb\tunit:Coulomb\tC\n\t\t\t\t\tSequence{- 1, 0, 1, 1, 0, 0, 0, 0}, -- 'C/m', L-1T1I1\t\tL-1T1I1\tCoulomb per meter\tunit:CoulombPerMeter\tC/m\n\t\t\t\t\tSequence{- 3, 0, 1, 1, 0, 0, 0, 0}, -- 'C/m^3', L-3T1I1\t\tL-3T1I1\tCoulomb per cubic meter\tunit:CoulombPerCubicMeter\tC/m^3\n\t\t\t\t\tSequence{0, 0, 1, 1, 0, - 1, 0, 0}, -- 'C/mol', \t\tT1I1N-1\tCoulomb per mole\tunit:CoulombPerMole\tC/mol\n\t\t\t\t\tSequence{- 2, 0, 0, 1, 0, 0, 0, 0}, -- 'A/m^2', \t\tL-2I1\tAmpere per square meter\tunit:AmperePerSquareMeter\tA/m^2\n\t\t\t\t\tSequence{0, 0, 0, - 1, 0, 0, 0, - 1}, -- 'A/rad', \t\tU-1I1\tAmpere per radian\tunit:AmperePerRadian\tA/rad\n\t\t\t\t\tSequence{1, 0, 1, 1, 0, 0, 0, 0}, -- 'C*m', \t\tL1T1I1\tCoulomb meter\tunit:CoulombMeter\tC-m\n\t\t\t\t\tSequence{1, 1, - 3, - 1, 0, 0, 0, 0}, -- 'V/m', \t\tL1M1T-3I-1\tVolt per Meter\tunit:VoltPerMeter\tV/m\n\t\t\t\t\tSequence{- 2, 0, 1, 1, 0, 0, 0, 0}, -- 'C/m^2', \t\tL-2T1I1\tCoulomb per Square Meter\tunit:CoulombPerSquareMeter\tC/m^2\n\t\t\t\t\tSequence{- 2, - 1, 3, 2, 0, 0, 0, 0}, -- 'S', \t\tL-2M-1T3I2\tSiemens\tunit:Siemens\tS\n\t\t\t\t\tSequence{2, 1, - 3, - 1, 0, 0, 0, 0}, -- 'V', \t\tL2M1T-3I-1\tVolt\tunit:Volt\tV\n\t\t\t\t\tSequence{- 1, 1, - 2, 0, 0, 0, 0, 0}, -- 'J/m^3', \t\tL-1M1T-2\tJoule per cubic meter\tunit:JoulePerCubicMeter\tJ/m^3\n\t\t\t\t\tSequence{2, 1, - 2, 0, 0, 0, 0, 0}, -- 'J', \t\tL2M1T-2\tJoule\tunit:Joule\tJ\n\t\t\t\t\tSequence{0, 1, - 2, 0, 0, 0, 0, 0}, -- 'J/m^2', \t\tM1T-2\tJoule per square meter\tunit:JoulePerSquareMeter\tJ/m^2\n\t\t\t\t\tSequence{0, - 1, 1, 1, 0, 0, 0, 0}, -- 'C/kg', \t\tM-1T1I1\tCoulomb per kilogram\tunit:CoulombPerKilogram\tC/kg\n\t\t\t\t\tSequence{1, 1, - 2, 0, 0, 0, 0, 0}, -- 'N', \t\tL1M1T-2\tNewton\tunit:Newton\tN\n\t\t\t\t\tSequence{1, 1, - 3, - 1, 0, 0, 0, 0}, -- 'N/C', \t\tL1M1T-3I-1\tNewton per coulomb\tunit:NewtonPerCoulomb\tN/C\n\t\t\t\t\tSequence{0, 1, - 2, 0, 0, 0, 0, 0}, -- 'N/m', \t\tM1T-2\tNewton per meter\tunit:NewtonPerMeter\tN/m\n\t\t\t\t\tSequence{0, 0, - 1, 0, 0, 0, 0, 0}, -- 'Hz', \t\tT-1\tHertz\tunit:Hertz\tHz\n\t\t\t\t\tSequence{3, - 1, - 2, 0, 0, 0, 0, 0}, -- 'm^3/(kg*s^2)', \t\tL3M-1T-2\tCubic meter per kilogram second squared\tunit:CubicMeterPerKilogramSecondSquared\tm^3/(kg-s^2)\n\t\t\t\t\tSequence{2, 1, - 2, 0, - 1, 0, 0, 0}, -- 'J/K', \t\tL2M1T-2Î˜-1\tJoule per kelvin\tunit:JoulePerKelvin\tJ/K\n\t\t\t\t\tSequence{- 2, 0, 0, 0, 0, 0, 1, 1}, -- 'Lx', \t\tU1L-2J1\tLux\tunit:Lux\tlx\n\t\t\t\t\tSequence{2, 1, - 2, - 2, 0, 0, 0, 0}, -- 'H', \t\tL2M1T-2I-2\tHenry\tunit:Henry\tH\n\t\t\t\t\tSequence{0, 0, 0, 0, 0, - 1, 0, 0}, -- '1/mol', \t\tN-1\tPer mole\tunit:PerMole\tmol^(-1)\n\t\t\t\t\tSequence{3, 1, - 4, - 2, 0, 0, 0, 0}, -- 'm/F', \t\tL3M1T-4I-2\tMeter per farad\tunit:MeterPerFarad\tm/F\n\t\t\t\t\tSequence{2, 0, - 1, 0, 0, 0, 0, 0}, -- 'm^2/s', \t\tL2T-1\tSquare meter per second\tunit:SquareMeterPerSecond\tm^2/sec\n\t\t\t\t\tSequence{1, 1, 0, 0, 0, 0, 0, 0}, -- 'm*kg', \t\tL1M1\tMeter kilogram\tunit:MeterKilogram\tm-kg\n\t\t\t\t\tSequence{1, 0, 0, 0, 1, 0, 0, 0}, -- 'm*K', \t\tL1Î˜1\tMeter kelvin\tunit:MeterKelvin\tm-K\n\t\t\t\t\tSequence{1, 0, - 2, 0, 0, 0, 0, 0}, -- 'm/s^2', \t\tL1T-2\tMeter per second squared\tunit:MeterPerSecondSquared\tm/s^2\n\t\t\t\t\tSequence{1, 1, - 1, 0, 0, 0, 0, 0}, -- 'kg*m/s', \t\tL1M1T-1\tKilogram Meter Per Second\tunit:KilogramMeterPerSecond\tkg-m/s\n\t\t\t\t\tSequence{1, 0, 0, 0, - 1, 0, 0, 0}, -- 'm/K', \t\tL1Î˜-1\tMeter per kelvin\tunit:MeterPerKelvin\tm/K\n\t\t\t\t\tSequence{1, 0, - 1, 0, 0, 0, 0, 0}, -- 'm/s', \t\tL1T-1\tMeter per second\tunit:MeterPerSecond\tm/s\n\t\t\t\t\tSequence{- 2, 0, 0, 0, 0, 0, 1, 0}, -- 'cd/m^2', \t\tL-2J1\tCandela per square meter\tunit:CandelaPerSquareMeter\tcd/m^2\n\t\t\t\t\tSequence{0, 0, 0, 0, 0, 0, 1, 1}, -- 'lm', \t\tU1J1\tLumen\tunit:Lumen\tlm\n\t\t\t\t\tSequence{2, 0, 0, 1, 0, 0, 0, 0}, -- 'J/T', \t\tL2I1\tJoule per Tesla\tunit:JoulePerTesla\tJ/T\n\t\t\t\t\tSequence{- 1, 0, 0, 1, 0, 0, 0, 0}, -- 'AT/m', \t\tL-1I1\tAmpere Turn per Meter\tunit:AmpereTurnPerMeter\tAt/m\n\t\t\t\t\tSequence{2, 1, - 2, - 1, 0, 0, 0, 0}, -- 'Wb', \t\tL2M1T-2I-1\tWeber\tunit:Weber\tWb\n\t\t\t\t\tSequence{0, 1, - 2, - 1, 0, 0, 0, 0}, -- 'T', \t\tM1T-2I-1\tTesla\tunit:Tesla\tT\n\t\t\t\t\tSequence{0, 0, 0, 1, 0, 0, 0, 1}, -- 'AT', \t\tU1I1\tAmpere Turn\tunit:AmpereTurn\tAt\n\t\t\t\t\tSequence{0, 1, 0, 0, 1, 0, 0, 0}, -- 'kg*K', \t\tM1Î˜1\tKilogram kelvin\tunit:KilogramKelvin\tkg-K\n\t\t\t\t\tSequence{0, 1, - 1, 0, 0, 0, 0, 0}, -- 'kg/s', \t\tM1T-1\tKilogram per second\tunit:KilogramPerSecond\tkg/s\n\t\t\t\t\tSequence{- 2, 1, 0, 0, 0, 0, 0, 0}, -- 'kg/m^2', \t\tL-2M1\tKilogram per square meter\tunit:KilogramPerSquareMeter\tkg/m^2\n\t\t\t\t\tSequence{- 1, 1, 0, 0, 0, 0, 0, 0}, -- 'kg/m', \t\tL-1M1\tKilogram per meter\tunit:KilogramPerMeter\tkg/m\n\t\t\t\t\tSequence{2, 1, - 2, 0, 0, - 1, 0, 0}, -- 'J/mol', \t\tL2M1T-2N-1\tJoule per mole\tunit:JoulePerMole\tJ/mol\n\t\t\t\t\tSequence{2, 1, - 2, 0, - 1, - 1, 0, 0}, -- 'J/(mol*K)', \t\tL2M1T-2Î˜-1N-1\tJoule per mole kelvin\tunit:JoulePerMoleKelvin\tJ/(mol-K)\n\t\t\t\t\tSequence{1, 1, - 2, - 2, 0, 0, 0, 0}, -- 'H/m', \t\tL1M1T-2I-2\tHenry per meter\tunit:HenryPerMeter\tH/m\n\t\t\t\t\tSequence{- 3, - 1, 4, 2, 0, 0, 0, 0}, -- 'F/m', \t\tL-3M-1T4I2\tFarad per meter\tunit:FaradPerMeter\tF/m\n\t\t\t\t\tSequence{2, 1, - 3, 0, 0, 0, 0, 0}, -- 'W', \t\tL2M1T-3\tWatt\tunit:Watt\tW\n\t\t\t\t\tSequence{2, 1, - 3, 0, 0, 0, 0, - 2}, -- 'W/sr', \t\tU-1L2M1T-3\tWatt per steradian\tunit:WattPerSteradian\tW/sr\n\t\t\t\t\tSequence{0, 1, - 3, 0, 0, 0, 0, - 2}, -- 'W/(m^2sr)', \t\tU-1M1T-3\tWatt per square meter steradian\tunit:WattPerSquareMeterSteradian\tW/(m^2-sr)\n\t\t\t\t\tSequence{0, 1, - 3, 0, 0, 0, 0, 0}, -- 'W/m^2', \t\tM1T-3\tWatt per square meter\tunit:WattPerSquareMeter\tW/m^2\n\t\t\t\t\tSequence{- 1, 1, - 2, 0, 0, 0, 0, 0}, -- 'Pa', \t\tL-1M1T-2\tPascal\tunit:Pascal\tPa\n\t\t\t\t\tSequence{2, 1, - 3, - 2, 0, 0, 0, 0}, -- 'Ohm', \t\tL2M1T-3I-2\tOhm\tunit:Ohm\tOhm\n\t\t\t\t\tSequence{0, 0, 0, 0, 0, 0, 0, 2}, -- 'sr', \t\tU1\tSteradian\tunit:Steradian\tsr\n\t\t\t\t\tSequence{2, 0, - 2, 0, 0, 0, 0, 0}, -- 'J/kg', \t\tL2T-2\tJoule per kilogram\tunit:JoulePerKilogram\tJ/kg\n\t\t\t\t\tSequence{2, 0, - 2, 0, - 1, 0, 0, 0}, -- 'J/(kg*K)', \t\tL2T-2Î˜-1\tJoule per kilogram kelvin\tunit:JoulePerKilogramKelvin\tJ/(kg-K)\n\t\t\t\t\tSequence{3, - 1, 0, 0, - 1, 0, 0, 0}, -- 'J/(kg*K*Pa)', \t\tL3M-1Î˜-1\tJoule per kilogram kelvin per pascal\tunit:JoulePerKilogramKelvinPerPascal\tJ/(km-K-Pa)\n\t\t\t\t\tSequence{- 1, 0, - 2, 0, - 1, 0, 0, 0}, -- 'J/(kg*K*m^3)', \t\tL-1T-2Î˜-1\tJoule per kilogram kelvin per cubic meter\tunit:JoulePerKilogramKelvinPerCubicMeter\tJ/(kg-K-m^3)\n\t\t\t\t\tSequence{0, 0, 0, 0, 1, 1, 0, 0}, -- 'mol*K', \t\tÎ˜1N1\tMole kelvin\tunit:MoleKelvin\tmol-K\n\t\t\t\t\tSequence{1, 1, - 3, 0, - 1, 0, 0, 0}, -- 'W/(m*K)', \t\tL1M1T-3Î˜-1\tWatt per meter kelvin\tunit:WattPerMeterKelvin\tW/(m*K)\n\t\t\t\t\tSequence{0, - 1, 3, 0, 1, 0, 0, 0}, -- 'm^2/W', \t\tM-1T3Î˜1\tSquare meter Kelvin per watt\tunit:SquareMeterKelvinPerWatt\t(K^2)m/W\n\t\t\t\t\tSequence{- 2, - 1, 3, 0, 1, 0, 0, 0}, -- 'K/W', \t\tL-2M-1T3Î˜1\tKelvin per watt\tunit:KelvinPerWatt\tK/W\n\t\t\t\t\tSequence{- 1, - 1, 3, 0, 1, 0, 0, 0}, -- 'm*K/W', \t\tL-1M-1T3Î˜1\tMeter Kelvin per watt\tunit:MeterKelvinPerWatt\tK-m/W\n\t\t\t\t\tSequence{1, 0, - 2, 0, 0, 0, 0, 0}, -- 'N/kg', \t\tL1T-2\tNewton per kilogram\tunit:NewtonPerKilogram\tN/kg\n\t\t\t\t\tSequence{0, 0, 2, 0, 0, 0, 0, 0}, -- 's^2', \t\tT2\tSecond time squared\tunit:SecondTimeSquared\ts^2\n\t\t\t\t\tSequence{2, 1, - 2, 0, 0, 0, 0, 0}, -- 'N*m', \t\tL2M1T-2\tNewton meter\tunit:NewtonMeter\tN-m\n\t\t\t\t\tSequence{3, 0, 0, 0, 0, 0, 0, 0}, -- 'm^3', \t\tL3\tCubic Meter\tunit:CubicMeter\tm^3\n\t\t\t\t\tSequence{3, - 1, 0, 0, 0, 0, 0, 0}, -- 'm^3/K', \t\tL3Î˜-1\tCubic meter per kelvin\tunit:CubicMeterPerKelvin\tm^3/K\n\t\t\t\t\tSequence{3, 0, - 1, 0, 0, 0, 0, 0}, -- 'm^3/s', \t\tL3T-1\tCubic meter per second\tunit:CubicMeterPerSecond\tm^3/s\n\t\t\t\t\tSequence{1, 1, - 2, 0, - 1, 0, 0, 0} -- 'J/(m^3*K)'\t\tL-1M1T-2Î˜-1\tJoule per cubic meter kelvin\tunit:JoulePerCubicMeterKelvin\tJ/(m^3 K)\n}\n\t\t\tin DerivedUnitDimensions->includes(self.dimensions) and self.noOffset() and self.conversionFactor->count(1.0) = 8",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 111,
          "VariableExpImpl": 4,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 713,
          "RealLiteralExpImpl": 1,
          "CollectionLiteralExpImpl": 90,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "quantities::Unit::conversionFactor",
          "quantities::SIUnit::dimensions"
        ]
      },
      {
        "operations": {
          "count": 1,
          "=": 1
        },
        "name": "noOffset",
        "body": "self.offset->count(0.0) = 8",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "RealLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["quantities::Unit::offset"]
      },
      {
        "operations": {
          "count": 1,
          "=": 1
        },
        "name": "isDimensionless",
        "body": "(self.dimensions->count(0.0) = 8)",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "RealLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["quantities::SIUnit::dimensions"]
      }
    ],
    "properties": [
      "conversionFactor",
      "name",
      "Quantity",
      "symbol",
      "offset"
    ]
  },
  {
    "name": "AccMeasure",
    "expressions": [
      {
        "operations": {
          "minus": 1,
          "divideBy": 1
        },
        "name": "avgVelocity",
        "body": "\n\t\t\tself.finalPosition.minus(self.initialPosition).divideBy(self.duration)",
        "type": "PropertyImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "quantities::AccMeasure::initialPosition",
          "quantities::AccMeasure::finalPosition",
          "quantities::AccMeasure::duration"
        ]
      },
      {
        "operations": {"minus": 1},
        "name": "distance",
        "body": "\n\t\t\tself.finalPosition.minus(self.initialPosition)",
        "type": "PropertyImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "quantities::AccMeasure::initialPosition",
          "quantities::AccMeasure::finalPosition"
        ]
      },
      {
        "operations": {
          "minus": 1,
          "divideBy": 1
        },
        "name": "avgAcceleration",
        "body": "\n\t\t\tself.finalVelocity.minus(self.initialVelocity).divideBy(self.duration)",
        "type": "PropertyImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "quantities::AccMeasure::finalVelocity",
          "quantities::AccMeasure::initialVelocity",
          "quantities::AccMeasure::duration"
        ]
      }
    ],
    "properties": [
      "finalVelocity",
      "avgVelocity",
      "initialPosition",
      "vehicle",
      "avgAcceleration",
      "initialVelocity",
      "finalPosition",
      "duration",
      "distance"
    ]
  },
  {
    "name": "Time",
    "expressions": [],
    "properties": ["AccMeasure"]
  },
  {
    "name": "SIUnit",
    "expressions": [],
    "properties": ["dimensions"]
  },
  {
    "name": "LinearVelocity",
    "expressions": [],
    "properties": [
      "AccMeasure",
      "AccMeasure",
      "AccMeasure",
      "Vehicle"
    ]
  },
  {
    "name": "Quantity",
    "expressions": [
      {
        "operations": {},
        "name": "getUnits",
        "body": "self.unit",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["quantities::Quantity::unit"]
      },
      {
        "operations": {},
        "name": "foo",
        "body": "\n\t\t\tlet x : Boolean = true in\n\t\t\tx",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "LetExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"equals": 1},
        "name": "sameUnits",
        "body": "self.unit.equals(x.unit)",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": ["quantities::Quantity::unit"]
      },
      {
        "operations": {"isCompatibleWith": 1},
        "name": "compatibleUnits",
        "body": "self.unit.isCompatibleWith(u)",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["quantities::Quantity::unit"]
      }
    ],
    "properties": [
      "value",
      "unit"
    ]
  },
  {
    "name": "UReal",
    "expressions": [{
      "operations": {"<": 1},
      "name": "lt",
      "body": "\n\t\t\tself.x < r.x",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": ["quantities::UReal::x"]
    }],
    "properties": [
      "x",
      "Quantity",
      "u"
    ]
  }
]
