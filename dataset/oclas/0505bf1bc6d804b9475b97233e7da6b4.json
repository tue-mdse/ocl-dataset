[
  {
    "name": "DTMC",
    "expressions": [{
      "operations": {
        "size": 1,
        "oclAsSet": 1,
        ">": 1
      },
      "name": "initalStateRequired",
      "body": "self.initialState -> size() >0",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 3,
        "VariableExpImpl": 1,
        "IntegerLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["dtmc::DTMC::initialState"]
    }],
    "properties": [
      "initialState",
      "States",
      "name"
    ]
  },
  {
    "name": "Label",
    "expressions": [],
    "properties": [
      "name",
      "state"
    ]
  },
  {
    "name": "State",
    "expressions": [
      {
        "operations": {
          "size": 2,
          "asSet": 1,
          "=": 1
        },
        "name": "NonDeterministic",
        "body": "Tuple {\n\tmessage : String = 'There must not be any nondeterminism. Please union transitions to the same target.',\n\tstatus : Boolean = \n\t\t\tself.outgoing.to->asSet()->size() = self.outgoing->size()\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 4,
          "TupleLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "dtmc::Transition::to",
          "$$::Tuple::status",
          "dtmc::State::outgoing"
        ]
      },
      {
        "operations": {
          "size": 2,
          "asSet": 1,
          "=": 1
        },
        "name": "NoDuplicateLabels",
        "body": "Tuple {\n\tmessage : String = 'Labels must be unique per state.',\n\tstatus : Boolean = \n\t\t\tself.labels.name->asSet()->size() = self.labels->size()\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "TupleLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "$$::Tuple::status",
          "dtmc::State::labels",
          "dtmc::Label::name"
        ]
      },
      {
        "operations": {
          "or": 1,
          "abs": 1,
          "size": 1,
          "sum": 1,
          "<": 1,
          "-": 1,
          "=": 1
        },
        "name": "OutgoingDontAddUpToOne",
        "body": "Tuple {\n\tmessage : String = 'Probability of all outgoing transitions must be 1.0.',\n\tstatus : Boolean = \n\t\t\tself.outgoing->size() = 0 or (self.outgoing.prob->sum() - 1.0).abs()  < 0.000001\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 7,
          "VariableExpImpl": 3,
          "TupleLiteralExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "RealLiteralExpImpl": 2,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "dtmc::State::outgoing",
          "$$::Tuple::status",
          "dtmc::Transition::prob"
        ]
      }
    ],
    "properties": [
      "outgoing",
      "DTMC",
      "labels",
      "incoming",
      "name",
      "DTMC"
    ]
  },
  {
    "name": "Transition",
    "expressions": [{
      "operations": {
        "<=": 1,
        "and": 1,
        ">=": 1
      },
      "name": "ProbBetween0and1",
      "body": "Tuple {\n\tmessage : String = 'Probability must be between 0 and 1.',\n\tstatus : Boolean = \n\t \t\tprob >= 0.0 and prob <= 1.0\n}.status",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 3,
        "VariableExpImpl": 2,
        "TupleLiteralExpImpl": 1,
        "RealLiteralExpImpl": 2,
        "StringLiteralExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "$$::Tuple::status",
        "dtmc::Transition::prob"
      ]
    }],
    "properties": [
      "to",
      "from",
      "prob"
    ]
  }
]
