[
  {
    "name": "MineID",
    "expressions": [{
      "operations": {},
      "name": "extract",
      "body": "\n\tfirst\n",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["delphi::MineID::first"]
    }],
    "properties": []
  },
  {
    "name": "designatorPart",
    "expressions": [{
      "operations": {},
      "name": "extract",
      "body": "\n\tid\n",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["delphi::designatorPart::id"]
    }],
    "properties": []
  },
  {
    "name": "interfaceDecl",
    "expressions": [{
      "operations": {},
      "name": "getFragments",
      "body": "\n\tSequence { }\n",
      "type": "OperationImpl",
      "constructs": {"CollectionLiteralExpImpl": 1},
      "properties": []
    }],
    "properties": []
  },
  {
    "name": "typeSection",
    "expressions": [{
      "operations": {"oclAsType": 1},
      "name": "getFragments",
      "body": "\n\tself.typeDecl.ast.oclAsType(as::TypeDefinition)\n",
      "type": "OperationImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "VariableExpImpl": 3,
        "OperationCallExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "delphi::CSTrace::ast",
        "delphi::typeSection::typeDecl"
      ]
    }],
    "properties": []
  },
  {
    "name": "ReservedId",
    "expressions": [{
      "operations": {},
      "name": "extract",
      "body": "\n\treservedWord.id\n",
      "type": "OperationImpl",
      "constructs": {
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["delphi::reservedWord::id"]
    }],
    "properties": []
  },
  {
    "name": "constSection",
    "expressions": [{
      "operations": {"oclAsType": 1},
      "name": "getFragments",
      "body": "\n\tself.constantDecl.ast.oclAsType(as::VariableDefinition)\n",
      "type": "OperationImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "VariableExpImpl": 3,
        "OperationCallExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "delphi::constSection::constantDecl",
        "delphi::CSTrace::ast"
      ]
    }],
    "properties": []
  },
  {
    "name": "functionDecl",
    "expressions": [{
      "operations": {"oclAsType": 1},
      "name": "getFragments",
      "body": "\n\tSequence { self.ast.oclAsType(as::FunctionDefinition)}\n\n",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "TypeExpImpl": 1,
        "CollectionLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["delphi::CSTrace::ast"]
    }],
    "properties": []
  },
  {
    "name": "procedureDecl",
    "expressions": [{
      "operations": {"oclAsType": 1},
      "name": "getFragments",
      "body": "\n\tSequence { self.ast.oclAsType(as::FunctionDefinition)}\n",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "TypeExpImpl": 1,
        "CollectionLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["delphi::CSTrace::ast"]
    }],
    "properties": []
  },
  {
    "name": "exprList",
    "expressions": [{
      "operations": {"oclAsType": 1},
      "name": "createActualParams",
      "body": "\n\tself.exps->collect(x | as::ActualParameterExpression {\n\t\t\t\tvalue = x.ast.oclAsType(as::Expression)\n\t\t\t})\n",
      "type": "OperationImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 1,
        "TypeExpImpl": 1,
        "ShadowExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "delphi::CSTrace::ast",
        "delphi::exprList::exps"
      ]
    }],
    "properties": []
  },
  {
    "name": "ident",
    "expressions": [{
      "operations": {},
      "name": "extract",
      "body": "\n\tnull\n",
      "type": "OperationImpl",
      "constructs": {"NullLiteralExpImpl": 1},
      "properties": []
    }],
    "properties": []
  },
  {
    "name": "declSection",
    "expressions": [{
      "operations": {},
      "name": "getFragments",
      "body": "\n\tSequence { }\n",
      "type": "OperationImpl",
      "constructs": {"CollectionLiteralExpImpl": 1},
      "properties": []
    }],
    "properties": []
  },
  {
    "name": "identList",
    "expressions": [{
      "operations": {
        "extract": 1,
        "first": 1
      },
      "name": "extract",
      "body": "\n\tids->first().extract()\n",
      "type": "OperationImpl",
      "constructs": {
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["delphi::identList::ids"]
    }],
    "properties": []
  },
  {
    "name": "varSection",
    "expressions": [{
      "operations": {"oclAsType": 1},
      "name": "getFragments",
      "body": "\n\tself.varDecls.ast.oclAsType(as::VariableDefinition)\n",
      "type": "OperationImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "VariableExpImpl": 3,
        "OperationCallExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "delphi::CSTrace::ast",
        "delphi::varSection::varDecls"
      ]
    }],
    "properties": []
  },
  {
    "name": "MultipleId",
    "expressions": [{
      "operations": {
        "+": 3,
        "=": 1,
        "indexOf": 1
      },
      "name": "extract",
      "body": "\n\tid->iterate(x ; acc : String = ''  |\n\t\t\t\t\tif self.id->indexOf(x) = 1 then acc + x else acc + '.'  + x endif)\n",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 7,
        "OperationCallExpImpl": 5,
        "IntegerLiteralExpImpl": 1,
        "StringLiteralExpImpl": 2,
        "IterateExpImpl": 1,
        "IfExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": ["delphi::MultipleId::id"]
    }],
    "properties": []
  }
]
