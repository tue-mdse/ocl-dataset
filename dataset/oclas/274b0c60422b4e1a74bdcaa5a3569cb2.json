[
  {
    "name": "TypeVariable",
    "expressions": [{
      "operations": {
        "not": 1,
        "=": 1
      },
      "name": "typeMustBeConcrete",
      "body": "not(self.type.abstract = true)",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 2,
        "BooleanLiteralExpImpl": 1
      },
      "properties": []
    }],
    "properties": [
      "instance",
      "type",
      "CREATE"
    ]
  },
  {
    "name": "Operator",
    "expressions": [],
    "properties": [
      "result",
      "executed"
    ]
  },
  {
    "name": "CREATE",
    "expressions": [
      {
        "operations": {
          "oclIsKindOf": 4,
          "=": 2,
          "oclAsType": 4
        },
        "name": "uniqueParent",
        "body": "let \n\tvariableReference : VariableReference = self.parent.oclAsType(VariableReference),\n\tqueryResult : EObjectReference = variableReference.referencedVariable.oclAsType(QueryVariable).queryResult.oclAsType(EObjectReference)\nin\n\tif self.parent.oclIsKindOf(EObjectReference) then\n\t\tself.parent.oclAsType(EObjectReference).elements->size() = 1\n\telse\n\t\tif self.parent.oclIsKindOf(VariableReference) then\n\t\t \tif variableReference.referencedVariable.oclIsKindOf(QueryVariable) then\n\t\t \t\tif variableReference.referencedVariable.oclAsType(QueryVariable).queryResult.oclIsKindOf(EObjectReference) then\n\t\t \t\t\tqueryResult.elements->size() = 1\n\t\t \t\telse false\n\t\t \t\tendif\n\t\t \telse true\n\t\t \tendif\n\t\telse true\n\t\tendif\n\tendif",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 10,
          "LetExpImpl": 2,
          "IntegerLiteralExpImpl": 2,
          "TypeExpImpl": 8,
          "IfExpImpl": 4,
          "PropertyCallExpImpl": 8,
          "BooleanLiteralExpImpl": 3
        },
        "properties": [
          "operators::QueryVariable::queryResult",
          "operators::VariableReference::referencedVariable",
          "operators::CREATE::parent"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "containmentReference",
        "body": "self.parentCompositeReference.containment = true",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": []
      }
    ],
    "properties": [
      "newInstanceVariable",
      "parentCompositeReference",
      "parent"
    ]
  },
  {
    "name": "DELETE",
    "expressions": [],
    "properties": ["deletion"]
  },
  {
    "name": "Result",
    "expressions": [],
    "properties": [
      "Operator",
      "QueryVariable"
    ]
  },
  {
    "name": "VariableReference",
    "expressions": [],
    "properties": ["referencedVariable"]
  },
  {
    "name": "QueryVariableQualifier",
    "expressions": [],
    "properties": ["variable"]
  },
  {
    "name": "StructuralFeatureSet",
    "expressions": [],
    "properties": [
      "structuralFeatures",
      "SPLIT"
    ]
  },
  {
    "name": "SPLIT",
    "expressions": [],
    "properties": [
      "splitSets",
      "splitObject"
    ]
  },
  {
    "name": "EObjectReference",
    "expressions": [],
    "properties": ["elements"]
  },
  {
    "name": "SET",
    "expressions": [{
      "operations": {
        "oclIsKindOf": 4,
        "=": 2,
        "oclAsType": 4
      },
      "name": "uniqueParent",
      "body": "let \n\tvariableReference : VariableReference = self.referenceOwner.oclAsType(VariableReference),\n\tqueryResult : EObjectReference = variableReference.referencedVariable.oclAsType(QueryVariable).queryResult.oclAsType(EObjectReference)\nin\n\tif self.referenceOwner.oclIsKindOf(EObjectReference) then\n\t\tself.referenceOwner.oclAsType(EObjectReference).elements->size() = 1\n\telse\n\t\tif self.referenceOwner.oclIsKindOf(VariableReference) then\n\t\t \tif variableReference.referencedVariable.oclIsKindOf(QueryVariable) then\n\t\t \t\tif variableReference.referencedVariable.oclAsType(QueryVariable).queryResult.oclIsKindOf(EObjectReference) then\n\t\t \t\t\tqueryResult.elements->size() = 1\n\t\t \t\telse false\n\t\t \t\tendif\n\t\t \telse true\n\t\t \tendif\n\t\telse true\n\t\tendif\n\tendif",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 10,
        "VariableExpImpl": 6,
        "LetExpImpl": 2,
        "IntegerLiteralExpImpl": 2,
        "TypeExpImpl": 8,
        "IfExpImpl": 4,
        "PropertyCallExpImpl": 8,
        "BooleanLiteralExpImpl": 3
      },
      "properties": [
        "operators::QueryVariable::queryResult",
        "operators::SET::referenceOwner",
        "operators::VariableReference::referencedVariable"
      ]
    }],
    "properties": [
      "reference",
      "value",
      "referenceOwner"
    ]
  },
  {
    "name": "MOVE",
    "expressions": [{
      "operations": {
        "oclIsKindOf": 4,
        "oclAsType": 4,
        "=": 2
      },
      "name": "uniqueParent",
      "body": "let \n\tvariableReference : VariableReference = self.newParent.oclAsType(VariableReference),\n\tqueryResult : EObjectReference = variableReference.referencedVariable.oclAsType(QueryVariable).queryResult.oclAsType(EObjectReference)\nin\n\tif self.newParent.oclIsKindOf(EObjectReference) then\n\t\tself.newParent.oclAsType(EObjectReference).elements->size() = 1\n\telse\n\t\tif self.newParent.oclIsKindOf(VariableReference) then\n\t\t \tif variableReference.referencedVariable.oclIsKindOf(QueryVariable) then\n\t\t \t\tif variableReference.referencedVariable.oclAsType(QueryVariable).queryResult.oclIsKindOf(EObjectReference) then\n\t\t \t\t\tqueryResult.elements->size() = 1\n\t\t \t\telse false\n\t\t \t\tendif\n\t\t \telse true\n\t\t \tendif\n\t\telse true\n\t\tendif\n\tendif",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 10,
        "VariableExpImpl": 6,
        "LetExpImpl": 2,
        "IntegerLiteralExpImpl": 2,
        "TypeExpImpl": 8,
        "IfExpImpl": 4,
        "PropertyCallExpImpl": 8,
        "BooleanLiteralExpImpl": 3
      },
      "properties": [
        "operators::QueryVariable::queryResult",
        "operators::MOVE::newParent",
        "operators::VariableReference::referencedVariable"
      ]
    }],
    "properties": [
      "movee",
      "newParent",
      "parentReference"
    ]
  },
  {
    "name": "PrimitiveReference",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "MERGE",
    "expressions": [],
    "properties": ["mergeObjects"]
  },
  {
    "name": "EOperationQualifier",
    "expressions": [{
      "operations": {"=": 1},
      "name": "parameterLessOperation",
      "body": "self.operation.eParameters->size() = 0",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "IntegerLiteralExpImpl": 1
      },
      "properties": []
    }],
    "properties": ["operation"]
  },
  {
    "name": "ASSIGN",
    "expressions": [],
    "properties": [
      "value",
      "attributeOwner",
      "attribute"
    ]
  },
  {
    "name": "Variable",
    "expressions": [{
      "operations": {
        "not": 1,
        "=": 1
      },
      "name": "nameNotNull",
      "body": "not(self.name = null)",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 2,
        "NullLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["operators::Variable::name"]
    }],
    "properties": [
      "VariableReference",
      "name"
    ]
  },
  {
    "name": "EReferenceQualifier",
    "expressions": [],
    "properties": ["reference"]
  },
  {
    "name": "Referrable",
    "expressions": [],
    "properties": [
      "ASSIGN",
      "MERGE",
      "SET",
      "DELETE",
      "CREATE",
      "MOVE",
      "SET",
      "MOVE",
      "QueryVariable",
      "SPLIT"
    ]
  },
  {
    "name": "VAR",
    "expressions": [],
    "properties": ["variable"]
  },
  {
    "name": "QueryVariable",
    "expressions": [],
    "properties": [
      "queryObject",
      "qualifier",
      "queryResult",
      "VAR"
    ]
  }
]
