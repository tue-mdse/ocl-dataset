[
  {
    "name": "VoidType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SyntaxExpression",
    "expressions": [],
    "properties": [
      "SymbolSequence",
      "MetaSymbol"
    ]
  },
  {
    "name": "ConstructiveExtension",
    "expressions": [],
    "properties": ["ConstructiveExtensionAtContentExtensionPoint"]
  },
  {
    "name": "And",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Plus",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Return",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "StringType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "L8Expr",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ExtensionSemantics",
    "expressions": [],
    "properties": [
      "Module",
      "syntaxDefinition"
    ]
  },
  {
    "name": "PlainSymbolReference",
    "expressions": [],
    "properties": [
      "classifier",
      "referencedClassifier",
      "ownedClassifier"
    ]
  },
  {
    "name": "ExpansionPart",
    "expressions": [],
    "properties": ["ExpansionStatement"]
  },
  {
    "name": "Variable",
    "expressions": [],
    "properties": [
      "control",
      "class",
      "Class",
      "initialValue",
      "Module"
    ]
  },
  {
    "name": "ParseExpr",
    "expressions": [],
    "properties": ["astPart"]
  },
  {
    "name": "Constructor",
    "expressions": [],
    "properties": [
      "owningClass",
      "parameters"
    ]
  },
  {
    "name": "Wait",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Statement",
    "expressions": [],
    "properties": [
      "IfStatement",
      "ForStatement",
      "Pattern",
      "IfStatement",
      "LocalScope",
      "SwitchCase",
      "QuotedStatements",
      "WhileStatement",
      "TargetStatement"
    ]
  },
  {
    "name": "Less",
    "expressions": [],
    "properties": []
  },
  {
    "name": "L5Expr",
    "expressions": [],
    "properties": []
  },
  {
    "name": "QuotedModuleContent",
    "expressions": [],
    "properties": []
  },
  {
    "name": "LocalScope",
    "expressions": [],
    "properties": [
      "Class",
      "statements"
    ]
  },
  {
    "name": "L1Expr",
    "expressions": [],
    "properties": []
  },
  {
    "name": "MetaLiteral",
    "expressions": [],
    "properties": []
  },
  {
    "name": "MetaExpr",
    "expressions": [],
    "properties": ["expr"]
  },
  {
    "name": "SymbolSequence",
    "expressions": [],
    "properties": ["sequence"]
  },
  {
    "name": "L7Expr",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ConstructiveExtensionAtContentExtensionPoint",
    "expressions": [],
    "properties": ["contentExtensions"]
  },
  {
    "name": "LoopStatement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Greater",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Assignment",
    "expressions": [],
    "properties": [
      "variable",
      "ForStatement",
      "value"
    ]
  },
  {
    "name": "Parameter",
    "expressions": [],
    "properties": [
      "Constructor",
      "Function",
      "Pattern"
    ]
  },
  {
    "name": "StructuralSymbolReference",
    "expressions": [{
      "operations": {
        "not": 2,
        "and": 1
      },
      "name": "composite",
      "body": "not localScopedReference and not globalScopedReference",
      "type": "PropertyImpl",
      "constructs": {
        "OperationCallExpImpl": 3,
        "VariableExpImpl": 2,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "dbl::StructuralSymbolReference::globalScopedReference",
        "dbl::StructuralSymbolReference::localScopedReference"
      ]
    }],
    "properties": [
      "globalScopedReference",
      "list",
      "composite",
      "localScopedReference"
    ]
  },
  {
    "name": "NotEqual",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ModuleContentExtension",
    "expressions": [],
    "properties": []
  },
  {
    "name": "NullLiteral",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Type",
    "expressions": [],
    "properties": ["arrayDimensions"]
  },
  {
    "name": "AnnotationLiteral",
    "expressions": [],
    "properties": []
  },
  {
    "name": "DoubleLiteral",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "Construct",
    "expressions": [],
    "properties": [
      "ParseExpr",
      "expandExpr"
    ]
  },
  {
    "name": "Function",
    "expressions": [],
    "properties": [
      "class",
      "Module",
      "Class",
      "abstract",
      "parameters"
    ]
  },
  {
    "name": "MeLiteral",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ExpandTextPart",
    "expressions": [],
    "properties": ["text"]
  },
  {
    "name": "MetaAccess",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Class",
    "expressions": [],
    "properties": [
      "Module",
      "superClasses",
      "active",
      "actionsBlock",
      "SuperClassSpecification",
      "attributes",
      "methods",
      "constructors",
      "bindings"
    ]
  },
  {
    "name": "LessEqual",
    "expressions": [],
    "properties": []
  },
  {
    "name": "L2Expr",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SuperLiteral",
    "expressions": [],
    "properties": []
  },
  {
    "name": "TypeAccess",
    "expressions": [],
    "properties": []
  },
  {
    "name": "AnnotationItem",
    "expressions": [],
    "properties": [
      "value",
      "key",
      "Annotation"
    ]
  },
  {
    "name": "SwitchStatement",
    "expressions": [],
    "properties": [
      "defaultCase",
      "variable",
      "cases"
    ]
  },
  {
    "name": "TestStatement",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "NamedElement",
    "expressions": [],
    "properties": [
      "IdExpr",
      "name"
    ]
  },
  {
    "name": "ForStatement",
    "expressions": [],
    "properties": [
      "termination",
      "increment",
      "body"
    ]
  },
  {
    "name": "Minus",
    "expressions": [],
    "properties": []
  },
  {
    "name": "MetaSymbol",
    "expressions": [],
    "properties": [
      "SyntaxDefinition",
      "SyntaxDefinition",
      "possibleSyntax"
    ]
  },
  {
    "name": "L3Expr",
    "expressions": [],
    "properties": []
  },
  {
    "name": "WaitUntil",
    "expressions": [],
    "properties": ["condition"]
  },
  {
    "name": "Advance",
    "expressions": [],
    "properties": ["time"]
  },
  {
    "name": "WhileStatement",
    "expressions": [],
    "properties": [
      "condition",
      "body"
    ]
  },
  {
    "name": "DoubleType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ArrayDimension",
    "expressions": [],
    "properties": [
      "size",
      "TypedElement",
      "Type"
    ]
  },
  {
    "name": "Pattern",
    "expressions": [],
    "properties": [
      "body",
      "context",
      "top"
    ]
  },
  {
    "name": "SwitchCase",
    "expressions": [],
    "properties": [
      "SwitchStatement",
      "value",
      "SwitchStatement",
      "body"
    ]
  },
  {
    "name": "TimeLiteral",
    "expressions": [],
    "properties": []
  },
  {
    "name": "IntSymbol",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SyntaxDefinition",
    "expressions": [],
    "properties": [
      "startSymbol",
      "Extension",
      "symbols"
    ]
  },
  {
    "name": "ExpandExpr",
    "expressions": [],
    "properties": [
      "expr",
      "Construct"
    ]
  },
  {
    "name": "L1SyntaxExpression",
    "expressions": [],
    "properties": []
  },
  {
    "name": "AbstractVariable",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Module",
    "expressions": [],
    "properties": [
      "functions",
      "extensionSemantics",
      "variables",
      "Model",
      "extensions",
      "classes"
    ]
  },
  {
    "name": "SyntaxSymbolClassifier",
    "expressions": [],
    "properties": [
      "PlainSymbolReference",
      "PlainSymbolReference",
      "PlainSymbolReference"
    ]
  },
  {
    "name": "Import",
    "expressions": [],
    "properties": [
      "model",
      "file",
      "Model"
    ]
  },
  {
    "name": "AnnotateableElement",
    "expressions": [],
    "properties": ["annotations"]
  },
  {
    "name": "IntLiteral",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "Annotation",
    "expressions": [],
    "properties": [
      "items",
      "AnnotateableElement"
    ]
  },
  {
    "name": "GreaterEqual",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Not",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ActivateObject",
    "expressions": [],
    "properties": [
      "priority",
      "objectAccess"
    ]
  },
  {
    "name": "VariableAccess",
    "expressions": [],
    "properties": [
      "SwitchStatement",
      "Assignment"
    ]
  },
  {
    "name": "LocalScopeStatement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "QuotedClassContent",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ElementAccess",
    "expressions": [],
    "properties": ["idExpr"]
  },
  {
    "name": "SuperClassSpecification",
    "expressions": [],
    "properties": [
      "class",
      "constructorArguments",
      "Class"
    ]
  },
  {
    "name": "TypeLiteral",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Model",
    "expressions": [],
    "properties": [
      "imports",
      "Import",
      "modules"
    ]
  },
  {
    "name": "CallPart",
    "expressions": [],
    "properties": [
      "callArguments",
      "IdExpr"
    ]
  },
  {
    "name": "ExpandStatement",
    "expressions": [],
    "properties": [
      "metaObject",
      "location"
    ]
  },
  {
    "name": "ContinueStatement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "L9Expr",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Equal",
    "expressions": [],
    "properties": []
  },
  {
    "name": "InstanceOf",
    "expressions": [],
    "properties": []
  },
  {
    "name": "TargetStatement",
    "expressions": [],
    "properties": ["body"]
  },
  {
    "name": "L4Expr",
    "expressions": [],
    "properties": []
  },
  {
    "name": "BinaryOperator",
    "expressions": [],
    "properties": [
      "op2",
      "op1"
    ]
  },
  {
    "name": "UnaryOperator",
    "expressions": [],
    "properties": ["op"]
  },
  {
    "name": "CreateIdStatement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ExpandExpression",
    "expressions": [],
    "properties": ["metaObject"]
  },
  {
    "name": "IntType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Keyword",
    "expressions": [],
    "properties": ["keyword"]
  },
  {
    "name": "PrimitiveType",
    "expressions": [],
    "properties": ["TypedElement"]
  },
  {
    "name": "NativeBinding",
    "expressions": [],
    "properties": [
      "targetLanguage",
      "targetType",
      "Class"
    ]
  },
  {
    "name": "TrueLiteral",
    "expressions": [],
    "properties": []
  },
  {
    "name": "IdExpr",
    "expressions": [],
    "properties": [
      "predefinedId",
      "TypedElement",
      "parentIdExpr",
      "callPart",
      "arrayIndex",
      "FunctionCall",
      "ElementAccess",
      "referencedElement",
      "IdExpr",
      "ExpansionStatement"
    ]
  },
  {
    "name": "StringSymbol",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CreateObject",
    "expressions": [],
    "properties": []
  },
  {
    "name": "L3SyntaxExpression",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Mul",
    "expressions": [],
    "properties": []
  },
  {
    "name": "QuotedStatements",
    "expressions": [],
    "properties": ["statements"]
  },
  {
    "name": "Cast",
    "expressions": [],
    "properties": []
  },
  {
    "name": "BoolType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Or",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Reactivate",
    "expressions": [],
    "properties": ["objectAccess"]
  },
  {
    "name": "Neg",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ExpansionStatement",
    "expressions": [],
    "properties": [
      "differingContext",
      "parts",
      "classContext",
      "functionContext",
      "variableContext",
      "exprs"
    ]
  },
  {
    "name": "ElementarySymbol",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Yield",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Concept",
    "expressions": [],
    "properties": ["Extension"]
  },
  {
    "name": "IdSymbol",
    "expressions": [],
    "properties": []
  },
  {
    "name": "IfStatement",
    "expressions": [],
    "properties": [
      "condition",
      "trueCase",
      "falseCase"
    ]
  },
  {
    "name": "L6Expr",
    "expressions": [],
    "properties": []
  },
  {
    "name": "QuotedExpression",
    "expressions": [],
    "properties": ["expression"]
  },
  {
    "name": "QuotedCode",
    "expressions": [],
    "properties": ["CodeQuoteExpression"]
  },
  {
    "name": "SizeOfArray",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Print",
    "expressions": [],
    "properties": ["outputs"]
  },
  {
    "name": "ActiveLiteral",
    "expressions": [],
    "properties": []
  },
  {
    "name": "TypedElement",
    "expressions": [],
    "properties": [
      "primitiveType",
      "classifierType",
      "typeArrayDimensions"
    ]
  },
  {
    "name": "BreakStatement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Terminate",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Expression",
    "expressions": [],
    "properties": [
      "ExpandExpression",
      "UnaryOperator",
      "ExpandVariablePart",
      "ActivateObject",
      "BinaryOperator",
      "ExpansionStatement",
      "WaitUntil",
      "ExpandStatement",
      "Advance",
      "SuperClassSpecification",
      "CallPart",
      "SwitchCase",
      "Assignment",
      "Return",
      "IdExpr",
      "Variable",
      "MetaExpr",
      "ForStatement",
      "ExpandExpr",
      "Print",
      "ExpandStatement",
      "BinaryOperator",
      "IfStatement",
      "ArrayDimension",
      "QuotedExpression",
      "WhileStatement",
      "Reactivate"
    ]
  },
  {
    "name": "CodeQuoteExpression",
    "expressions": [],
    "properties": ["quotedCode"]
  },
  {
    "name": "ExtensibleElement",
    "expressions": [],
    "properties": [
      "concreteSyntax",
      "instanceOfExtensionDefinition"
    ]
  },
  {
    "name": "ComplexSymbol",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Extension",
    "expressions": [],
    "properties": [
      "ExtensionSemantics",
      "extensionPoint",
      "syntaxDefinition",
      "Module"
    ]
  },
  {
    "name": "StringLiteral",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "ClassContentExtension",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Div",
    "expressions": [],
    "properties": []
  },
  {
    "name": "FalseLiteral",
    "expressions": [],
    "properties": []
  },
  {
    "name": "PredefinedId",
    "expressions": [],
    "properties": ["IdExpr"]
  },
  {
    "name": "FunctionCall",
    "expressions": [],
    "properties": ["callIdExpr"]
  },
  {
    "name": "Mod",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ExpandVariablePart",
    "expressions": [],
    "properties": ["expr"]
  },
  {
    "name": "SimpleStatement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "L2SyntaxExpression",
    "expressions": [],
    "properties": []
  }
]
