[
  {
    "name": "Softgoal",
    "expressions": [
      {
        "operations": {
          "NODS": 1,
          "+": 1,
          "NIDS": 1
        },
        "name": "NDepS",
        "body": "self.NIDS() + self.NODS()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1,
          "oclAsSet": 1
        },
        "name": "NDLS",
        "body": "self.elementDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "NCLS": 1,
          "NDLS": 1,
          "+": 2,
          "NDS": 1
        },
        "name": "NLS",
        "body": "self.NDS() + self.NCLS() + self.NDLS()",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 5
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "oclBadOperation": 1
        },
        "name": "NODS",
        "body": "self.elementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1
        },
        "name": "NDS",
        "body": "self.softgoalContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Softgoal::softgoalContribution"]
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1
        },
        "name": "NCLS",
        "body": "self.elementContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Element::elementContribution"]
      },
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "oclBadOperation": 1
        },
        "name": "NIDS",
        "body": "self.secondElementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      }
    ],
    "properties": ["softgoalContribution"]
  },
  {
    "name": "ISTAR",
    "expressions": [
      {
        "operations": {
          "NODA": 1,
          "+": 1,
          "NIDA": 1
        },
        "name": "NDA",
        "body": "self.NIDA() + self.NODA()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "NSWD": 1,
          "NDAS": 1,
          "/": 1
        },
        "name": "AvgNDAS",
        "body": "self.NDAS() / self.NSWD()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "NEIAB": 1,
          "NEIAgentB": 1,
          "NEIRoleB": 1,
          "+": 2,
          "-": 1,
          "NEIPosB": 1
        },
        "name": "NEIActB",
        "body": "self.NEIAB() - (self.NEIAgentB() + self.NEIRoleB() + self.NEIPosB())",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 7,
          "VariableExpImpl": 4
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1
        },
        "name": "NAct",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NAct": 1,
          ">": 1
        },
        "name": "NAct",
        "body": "self.NAct() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "NDA": 1,
          ">": 1
        },
        "name": "NDA",
        "body": "self.NDA() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "NEI": 1,
          "min": 1,
          "oclIsKindOf": 1,
          "=": 1,
          "-": 2,
          "oclAsType": 1
        },
        "name": "MinNEIAB",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; min : Integer = -1 | let nei : Integer = n.oclAsType(Actor).NEI() in if min = -1 then nei else min.min(nei) endif)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 7,
          "VariableExpImpl": 7,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 2,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NOD": 1,
          "oclIsKindOf": 1,
          "+": 1,
          "oclAsType": 1
        },
        "name": "NODA",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nod : Integer = n.oclAsType(Actor).NOD() in total + nod)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 4,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NGI": 1,
          "oclIsKindOf": 1,
          "+": 1,
          "oclAsType": 1
        },
        "name": "NGIAB",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ngi : Integer = n.oclAsType(Actor).NGI() in total + ngi)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 5,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "max": 1,
          "and": 1,
          "MaxNDGI": 2,
          "oclAsType": 2,
          "-": 2,
          "=": 1,
          ">": 1
        },
        "name": "MaxNDAG",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MaxNDGI() > 0)->iterate(n : Node; max : Integer = -1 | let maxndgi : Integer = n.oclAsType(Actor).MaxNDGI() in if max = -1 then maxndgi else max.max(maxndgi) endif)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 11,
          "VariableExpImpl": 8,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 3,
          "TypeExpImpl": 3,
          "IterateExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "+": 1,
          "oclAsType": 1,
          "NUEI": 1
        },
        "name": "NUEIAB",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nuei : Integer = n.oclAsType(Actor).NUEI() in total + nuei)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 5,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NODA": 1,
          "NDA": 1,
          "/": 1
        },
        "name": "PODA",
        "body": "self.NODA() / self.NDA()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "NTWD": 1,
          "NDAT": 1,
          "/": 1
        },
        "name": "AvgNDAT",
        "body": "self.NDAT() / self.NTWD()",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "NEIP": 1,
          "+": 1,
          "oclAsType": 1
        },
        "name": "NEIPosB",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Position))->iterate(n : Node; total : Integer = 0 | let neip : Integer = n.oclAsType(Position).NEIP() in total + neip)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 5,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1
        },
        "name": "NEOAB",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Element))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NEI": 1,
          "oclIsKindOf": 1,
          "max": 1,
          "=": 1,
          "oclAsType": 1,
          "-": 2
        },
        "name": "MaxNEIAB",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; max : Integer = -1 | let nei : Integer = n.oclAsType(Actor).NEI() in if max = -1 then nei else max.max(nei) endif)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 7,
          "OperationCallExpImpl": 7,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 2,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NGWD": 1,
          "NDAG": 1,
          "/": 1
        },
        "name": "AvgNDAG",
        "body": "self.NDAG() / self.NGWD()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "MinNDTI": 2,
          "min": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "=": 1,
          "oclAsType": 2,
          "-": 2,
          ">": 1
        },
        "name": "MinNDAT",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MinNDTI() > 0)->iterate(n : Node; min : Integer = -1 | let minndti : Integer = n.oclAsType(Actor).MinNDTI() in if min = -1 then minndti else min.min(minndti) endif)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 8,
          "OperationCallExpImpl": 11,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 3,
          "TypeExpImpl": 3,
          "IterateExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NAgents": 1,
          "NAct": 1,
          "NPos": 1,
          "+": 2,
          "NRoles": 1,
          "/": 1
        },
        "name": "PSAct",
        "body": "(self.NAgents() + self.NRoles() + self.NPos()) / self.NAct()",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 7
        },
        "properties": []
      },
      {
        "operations": {
          "NGWD": 1,
          ">": 1
        },
        "name": "NGWD",
        "body": "self.NGWD() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "NEI": 1,
          "oclIsKindOf": 1,
          "+": 1,
          "oclAsType": 1
        },
        "name": "NEIAB",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nei : Integer = n.oclAsType(Actor).NEI() in total + nei)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 5,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "+": 1,
          "oclAsType": 1,
          "NDTI": 1
        },
        "name": "NDAT",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ndti : Integer = n.oclAsType(Actor).NDTI() in total + ndti)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 4,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NAct": 1,
          "NAgents": 1,
          "NPos": 1,
          "+": 2,
          "-": 1,
          "NRoles": 1
        },
        "name": "NActors",
        "body": "self.NAct() - (self.NAgents() + self.NRoles() + self.NPos())",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 7,
          "VariableExpImpl": 4
        },
        "properties": []
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "NDSI": 1,
          "+": 1,
          "oclAsType": 1
        },
        "name": "NDAS",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ndsi : Integer = n.oclAsType(Actor).NDSI() in total + ndsi)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 4,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "ND": 1,
          "oclAsType": 1,
          ">": 1
        },
        "name": "NAWD",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).ND() > 0)->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NTIAB": 1,
          ">": 1
        },
        "name": "NTIAB",
        "body": "self.NTIAB() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "NEIAB": 1,
          ">": 1
        },
        "name": "NEIAB",
        "body": "self.NEIAB() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "MinNDSI": 2,
          "min": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "oclAsType": 2,
          "-": 2,
          "=": 1,
          ">": 1
        },
        "name": "MinNDAS",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MinNDSI() > 0)->iterate(n : Node; min : Integer = -1 | let minndsi : Integer = n.oclAsType(Actor).MinNDSI() in if min = -1 then minndsi else min.min(minndsi) endif)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 8,
          "OperationCallExpImpl": 11,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 3,
          "TypeExpImpl": 3,
          "IterateExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NSWDI": 1,
          "oclIsKindOf": 1,
          "+": 1,
          "oclAsType": 1
        },
        "name": "NSWD",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nswdi : Integer = n.oclAsType(Actor).NSWDI() in total + nswdi)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 4,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1
        },
        "name": "NAgents",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Agent))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NDA": 1,
          ">": 1
        },
        "name": "NDA",
        "body": "self.NDA() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1
        },
        "name": "NPos",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Position))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "max": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "MaxNDTI": 2,
          "oclAsType": 2,
          "=": 1,
          "-": 2,
          ">": 1
        },
        "name": "MaxNDAT",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MaxNDTI() > 0)->iterate(n : Node; max : Integer = -1 | let maxndti : Integer = n.oclAsType(Actor).MaxNDTI() in if max = -1 then maxndti else max.max(maxndti) endif)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 8,
          "OperationCallExpImpl": 11,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 3,
          "TypeExpImpl": 3,
          "IterateExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NEIR": 1,
          "oclIsKindOf": 1,
          "+": 1,
          "oclAsType": 1
        },
        "name": "NEIRoleB",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Role))->iterate(n : Node; total : Integer = 0 | let neir : Integer = n.oclAsType(Role).NEIR() in total + neir)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 5,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NAct": 1,
          ">": 1
        },
        "name": "NAct",
        "body": "self.NAct() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "NEIA": 1,
          "+": 1,
          "oclAsType": 1
        },
        "name": "NEIAgentB",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Agent))->iterate(n : Node; total : Integer = 0 | let neia : Integer = n.oclAsType(Agent).NEIA() in total + neia)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 4,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "NSI": 1,
          "+": 1,
          "oclAsType": 1
        },
        "name": "NSIAB",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nsi : Integer = n.oclAsType(Actor).NSI() in total + nsi)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 5,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "+": 1,
          "oclAsType": 1,
          "NGWDI": 1
        },
        "name": "NGWD",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ngwdi : Integer = n.oclAsType(Actor).NGWDI() in total + ngwdi)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 5,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NSWD": 1,
          ">": 1
        },
        "name": "NSWD",
        "body": "self.NSWD() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "NAct": 1,
          ">": 1
        },
        "name": "NAct",
        "body": "self.NAct() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "NGWD": 1,
          "NGIAB": 1,
          "/": 1
        },
        "name": "PGWD",
        "body": "self.NGWD() / self.NGIAB()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "NAct": 1,
          ">": 1
        },
        "name": "NAct",
        "body": "self.NAct() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "NTWDI": 1,
          "oclIsKindOf": 1,
          "+": 1,
          "oclAsType": 1
        },
        "name": "NTWD",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ntwdi : Integer = n.oclAsType(Actor).NTWDI() in total + ntwdi)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 5,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NTI": 1,
          "oclIsKindOf": 1,
          "+": 1,
          "oclAsType": 1
        },
        "name": "NTIAB",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nti : Integer = n.oclAsType(Actor).NTI() in total + nti)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 5,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "oclAsType": 1,
          ">": 1,
          "NUEI": 1
        },
        "name": "NAWUEI",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).NUEI() > 0)->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NAct": 1,
          "NEIAB": 1,
          "/": 1
        },
        "name": "AvgNEIAB",
        "body": "self.NEIAB() / self.NAct()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "NID": 1,
          "+": 1,
          "oclAsType": 1
        },
        "name": "NIDA",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let nid : Integer = n.oclAsType(Actor).NID() in total + nid)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 4,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "+": 1,
          "NDGI": 1,
          "oclAsType": 1
        },
        "name": "NDAG",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor))->iterate(n : Node; total : Integer = 0 | let ndgi : Integer = n.oclAsType(Actor).NDGI() in total + ndgi)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 5,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NTIAB": 1,
          "NTWD": 1,
          "/": 1
        },
        "name": "PTWD",
        "body": "self.NTWD() / self.NTIAB()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "NSIAB": 1,
          "NSWD": 1,
          "/": 1
        },
        "name": "PSWD",
        "body": "self.NSWD() / self.NSIAB()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "NAct": 1,
          ">": 1
        },
        "name": "nact",
        "body": "self.NAct() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "NAct": 1,
          "NAWUEI": 1,
          "/": 1
        },
        "name": "PAWUEI",
        "body": "self.NAWUEI() / self.NAct()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "NUEIAB": 1,
          "NEIAB": 1,
          "/": 1
        },
        "name": "PUEIAB",
        "body": "self.NUEIAB() / self.NEIAB()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "NAct": 1,
          "NAWD": 1,
          "/": 1
        },
        "name": "PAWD",
        "body": "self.NAWD() / self.NAct()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "PAWD": 1,
          "-": 1
        },
        "name": "PAWOD",
        "body": "1 - self.PAWD()",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "max": 1,
          "MaxNDSI": 2,
          "and": 1,
          "-": 2,
          "=": 1,
          "oclAsType": 2,
          ">": 1
        },
        "name": "MaxNDAS",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MaxNDSI() > 0)->iterate(n : Node; max : Integer = -1 | let maxndsi : Integer = n.oclAsType(Actor).MaxNDSI() in if max = -1 then maxndsi else max.max(maxndsi) endif)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 11,
          "VariableExpImpl": 8,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 3,
          "TypeExpImpl": 3,
          "IterateExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NDA": 1,
          "NIDA": 1,
          "/": 1
        },
        "name": "PIDA",
        "body": "self.NIDA() / self.NDA()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "NEOAB": 1,
          "NEIAB": 1,
          "+": 1
        },
        "name": "NElem",
        "body": "self.NEOAB() + self.NEIAB()",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {
          "NTWD": 1,
          ">": 1
        },
        "name": "NTWD",
        "body": "self.NTWD() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1
        },
        "name": "NRoles",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Role))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NEI": 1,
          "size": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "oclAsType": 1,
          ">": 1
        },
        "name": "NAWEI",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).NEI() > 0)->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NSIAB": 1,
          ">": 1
        },
        "name": "NSIAB",
        "body": "self.NSIAB() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "PAWUEI": 1,
          "-": 1
        },
        "name": "PAWOUEI",
        "body": "1 - self.PAWUEI()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "min": 1,
          "oclIsKindOf": 1,
          "MinNDGI": 2,
          "and": 1,
          "oclAsType": 2,
          "=": 1,
          "-": 2,
          ">": 1
        },
        "name": "MinNDAG",
        "body": "self.hasNode->select(n : Node | n.oclIsKindOf(Actor) and n.oclAsType(Actor).MinNDGI() > 0)->iterate(n : Node; min : Integer = -1 | let minndgi : Integer = n.oclAsType(Actor).MinNDGI() in if min = -1 then minndgi else min.min(minndgi) endif)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 8,
          "OperationCallExpImpl": 11,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 3,
          "TypeExpImpl": 3,
          "IterateExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::ISTAR::hasNode"]
      },
      {
        "operations": {
          "NAct": 1,
          "NAWEI": 1,
          "/": 1
        },
        "name": "PAWEI",
        "body": "self.NAWEI() / self.NAct()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "NGIAB": 1,
          ">": 1
        },
        "name": "NGIAB",
        "body": "self.NGIAB() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      }
    ],
    "properties": [
      "hasNode",
      "hasRelationship",
      "modelName"
    ]
  },
  {
    "name": "Goal",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "oclBadOperation": 1
        },
        "name": "NODG",
        "body": "self.elementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1,
          "oclAsSet": 1
        },
        "name": "NDLG",
        "body": "self.elementDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "oclBadOperation": 1
        },
        "name": "NIDG",
        "body": "self.secondElementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "oclBadOperation": 1
        },
        "name": "NDG",
        "body": "self.goalMeansEnds->select(me : MeansEnds | me.oclIsKindOf(MeansEnds))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1
        },
        "name": "NCLG",
        "body": "self.elementContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Element::elementContribution"]
      },
      {
        "operations": {
          "NDG": 1,
          "NCLG": 1,
          "NDLG": 1,
          "+": 2
        },
        "name": "NLG",
        "body": "self.NDG() + self.NCLG() + self.NDLG()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {
          "NODG": 1,
          "NIDG": 1,
          "+": 1
        },
        "name": "NDepG",
        "body": "self.NIDG() + self.NODG()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      }
    ],
    "properties": ["goalMeansEnd"]
  },
  {
    "name": "MeansEnd",
    "expressions": [],
    "properties": [
      "meansEndGoal",
      "meansEndTask"
    ]
  },
  {
    "name": "Element",
    "expressions": [],
    "properties": [
      "elementContribution",
      "Actors",
      "elementDecomposition"
    ]
  },
  {
    "name": "DependencyLink",
    "expressions": [],
    "properties": [
      "dependencyNode",
      "dependencySecondNode",
      "strength",
      "dependencyName"
    ]
  },
  {
    "name": "Position",
    "expressions": [{
      "operations": {
        "size": 1,
        "oclIsKindOf": 1
      },
      "name": "NEIP",
      "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Element))->size()",
      "type": "OperationImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 2,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["istar::Actors::hasElement"]
    }],
    "properties": [
      "positionCovers",
      "positionOccupies"
    ]
  },
  {
    "name": "Plays",
    "expressions": [],
    "properties": [
      "playsRole",
      "playsAgent"
    ]
  },
  {
    "name": "And",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Node",
    "expressions": [],
    "properties": [
      "secondNodeDependency",
      "nodeDependency",
      "ISTAR",
      "nodeName",
      "nodeNFR"
    ]
  },
  {
    "name": "Role",
    "expressions": [{
      "operations": {
        "size": 1,
        "oclIsKindOf": 1
      },
      "name": "NEIR",
      "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Element))->size()",
      "type": "OperationImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 2,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["istar::Actors::hasElement"]
    }],
    "properties": [
      "rolePlays",
      "roleCovers"
    ]
  },
  {
    "name": "Unknown",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Association",
    "expressions": [],
    "properties": []
  },
  {
    "name": "INS",
    "expressions": [],
    "properties": [
      "INSagent",
      "INSsecondAgent"
    ]
  },
  {
    "name": "Actors",
    "expressions": [],
    "properties": ["hasElement"]
  },
  {
    "name": "Make",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SomeMinus",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Or",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Task",
    "expressions": [
      {
        "operations": {
          "NCLT": 1,
          "NDLT": 1,
          "+": 2,
          "NDT": 1
        },
        "name": "NLT",
        "body": "self.NDT() + self.NCLT() + self.NDLT()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {
          "NODT": 1,
          "+": 1,
          "NIDT": 1
        },
        "name": "NDepT",
        "body": "self.NIDT() + self.NODT()",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1,
          "oclAsSet": 1
        },
        "name": "NDLT",
        "body": "self.elementDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1,
          "oclAsSet": 1
        },
        "name": "NDT",
        "body": "self.taskDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1
        },
        "name": "NCLT",
        "body": "self.elementContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Element::elementContribution"]
      },
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "oclBadOperation": 1
        },
        "name": "NODT",
        "body": "self.elementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "oclBadOperation": 1
        },
        "name": "NIDT",
        "body": "self.secondElementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      }
    ],
    "properties": [
      "taskDecomposition",
      "taskMeansEnd"
    ]
  },
  {
    "name": "DecompositionLink",
    "expressions": [],
    "properties": [
      "decompositionElement",
      "decompositionTask"
    ]
  },
  {
    "name": "SomePlus",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Relationship",
    "expressions": [],
    "properties": [
      "relationshipNFR",
      "source",
      "target",
      "ISTAR",
      "relationshipName"
    ]
  },
  {
    "name": "Decomposition",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ISA",
    "expressions": [],
    "properties": [
      "ISAactor",
      "ISAsecondActor"
    ]
  },
  {
    "name": "Hurt",
    "expressions": [],
    "properties": []
  },
  {
    "name": "DependencyStrength",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Resource",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1
        },
        "name": "NCLR",
        "body": "self.elementContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Element::elementContribution"]
      },
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "oclBadOperation": 1
        },
        "name": "NIDR",
        "body": "self.secondElementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "+": 1,
          "NODR": 1,
          "NIDR": 1
        },
        "name": "NDepR",
        "body": "self.NIDR() + self.NODR()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1,
          "oclAsSet": 1
        },
        "name": "NDLR",
        "body": "self.elementDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "oclBadOperation": 1
        },
        "name": "NODR",
        "body": "self.elementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "NDLR": 1,
          "+": 1,
          "NCLR": 1
        },
        "name": "NLR",
        "body": "self.NCLR() + self.NDLR()",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3
        },
        "properties": []
      }
    ],
    "properties": []
  },
  {
    "name": "Actor",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "NDS": 1,
          "oclAsType": 1,
          ">": 1
        },
        "name": "NSWDI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal) and e.oclAsType(Softgoal).NDS() > 0)->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "NUTI": 1,
          "NUSI": 1,
          "NURI": 1,
          "NUBI": 1,
          "+": 4,
          "NUGI": 1
        },
        "name": "NUEI",
        "body": "self.NUGI() + self.NUSI() + self.NUTI() + self.NURI() + self.NUBI()",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 9
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "oclAsType": 1,
          ">": 1,
          "NDT": 1
        },
        "name": "NTWDI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Task) and e.oclAsType(Task).NDT() > 0)->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "ND": 1,
          "NID": 1,
          "/": 1
        },
        "name": "PID",
        "body": "self.NID() / self.ND()",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1
        },
        "name": "NGI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Goal))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "NTWDI": 1,
          "/": 1,
          "NDTI": 1
        },
        "name": "AvgNDTI",
        "body": "self.NDTI() / self.NTWDI()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "NOD": 1,
          "NID": 1,
          "+": 1
        },
        "name": "ND",
        "body": "self.NID() + self.NOD()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1
        },
        "name": "NSI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "NTWDI": 1,
          ">": 1
        },
        "name": "NTWDI",
        "body": "self.NTWDI() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "oclBadOperation": 1
        },
        "name": "NID",
        "body": "self.actorDependency->select(dl : DependencyLink | dl.oclIsKindOf(DependeeLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "min": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "NDS": 2,
          "-": 2,
          "=": 1,
          "oclAsType": 2,
          ">": 1
        },
        "name": "MinNDSI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal) and e.oclAsType(Softgoal).NDS() > 0)->iterate(e : Element; min : Integer = -1 | let nds : Integer = e.oclAsType(Softgoal).NDS() in if min = -1 then nds else min.min(nds) endif)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 8,
          "OperationCallExpImpl": 11,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 3,
          "TypeExpImpl": 3,
          "IterateExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "NDGI": 1,
          "NGWDI": 1,
          "/": 1
        },
        "name": "AvgNDGI",
        "body": "self.NDGI() / self.NGWDI()",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "NLS": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "=": 1,
          "oclAsType": 1
        },
        "name": "NUSI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal) and e.oclAsType(Softgoal).NLS() = 0)->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 6,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "NLG": 1,
          "=": 1,
          "oclAsType": 1
        },
        "name": "NUGI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Goal) and e.oclAsType(Goal).NLG() = 0)->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "size": 1,
          "NLB": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "=": 1,
          "oclAsType": 1
        },
        "name": "NUBI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Belief) and e.oclAsType(Belief).NLB() = 0)->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 6,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "NEI": 1,
          "/": 1,
          "NUEI": 1
        },
        "name": "PUEI",
        "body": "self.NUEI() / self.NEI()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1
        },
        "name": "NEI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Element))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "NOD": 1,
          "ND": 1,
          "/": 1
        },
        "name": "POD",
        "body": "self.NOD() / self.ND()",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {
          "min": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "=": 1,
          "oclAsType": 2,
          "-": 2,
          ">": 1,
          "NDT": 2
        },
        "name": "MinNDTI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Task) and e.oclAsType(Task).NDT() > 0)->iterate(e : Element; min : Integer = -1 | let ndt : Integer = e.oclAsType(Task).NDT() in if min = -1 then ndt else min.min(ndt) endif)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 8,
          "OperationCallExpImpl": 11,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 3,
          "TypeExpImpl": 3,
          "IterateExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "oclBadOperation": 1
        },
        "name": "NOD",
        "body": "self.actorDependency->select(dl : DependencyLink | dl.oclIsKindOf(DependerLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "NDG": 1,
          "size": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "oclAsType": 1,
          ">": 1
        },
        "name": "NGWDI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Goal) and e.oclAsType(Goal).NDG() > 0)->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "max": 1,
          "and": 1,
          "NDS": 2,
          "oclAsType": 2,
          "-": 2,
          "=": 1,
          ">": 1
        },
        "name": "MaxNDSI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal) and e.oclAsType(Softgoal).NDS() > 0)->iterate(e : Element; max : Integer = -1 | let nds : Integer = e.oclAsType(Softgoal).NDS() in if max = -1 then nds else max.max(nds) endif)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 8,
          "OperationCallExpImpl": 11,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 3,
          "TypeExpImpl": 3,
          "IterateExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "NDG": 1,
          "oclIsKindOf": 1,
          "+": 1,
          "oclAsType": 1
        },
        "name": "NDGI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Goal))->iterate(e : Element; total : Integer = 0 | let ndg : Integer = e.oclAsType(Goal).NDG() in total + ndg)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 4,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "+": 1,
          "oclAsType": 1,
          "NDT": 1
        },
        "name": "NDTI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Task))->iterate(e : Element; total : Integer = 0 | let ndt : Integer = e.oclAsType(Task).NDT() in total + ndt)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 4,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "NDG": 2,
          "min": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "=": 1,
          "oclAsType": 2,
          "-": 2,
          ">": 1
        },
        "name": "MinNDGI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Goal) and e.oclAsType(Goal).NDG() > 0)->iterate(e : Element; min : Integer = -1 | let ndg : Integer = e.oclAsType(Goal).NDG() in if min = -1 then ndg else min.min(ndg) endif)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 11,
          "VariableExpImpl": 8,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 3,
          "TypeExpImpl": 3,
          "IterateExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "NDG": 2,
          "oclIsKindOf": 1,
          "max": 1,
          "and": 1,
          "=": 1,
          "-": 2,
          "oclAsType": 2,
          ">": 1
        },
        "name": "MaxNDGI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Goal) and e.oclAsType(Goal).NDG() > 0)->iterate(e : Element; max : Integer = -1 | let ndg : Integer = e.oclAsType(Goal).NDG() in if max = -1 then ndg else max.max(ndg) endif)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 8,
          "OperationCallExpImpl": 11,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 3,
          "TypeExpImpl": 3,
          "IterateExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "+": 1,
          "NDS": 1,
          "oclAsType": 1
        },
        "name": "NDSI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Softgoal))->iterate(e: Element; total : Integer = 0 | let nds : Integer = e.oclAsType(Softgoal).NDS() in total + nds)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 4,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "max": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "-": 2,
          "oclAsType": 2,
          "=": 1,
          ">": 1,
          "NDT": 2
        },
        "name": "MaxNDTI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Task) and e.oclAsType(Task).NDT() > 0)->iterate(e : Element; max : Integer = -1 | let ndt : Integer = e.oclAsType(Task).NDT() in if max = -1 then ndt else max.max(ndt) endif)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 8,
          "OperationCallExpImpl": 11,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 3,
          "TypeExpImpl": 3,
          "IterateExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {"size": 1},
        "name": "NIISA",
        "body": "self.actorISA->size()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actor::actorISA"]
      },
      {
        "operations": {
          "NSWDI": 1,
          ">": 1
        },
        "name": "NTWDI",
        "body": "self.NSWDI() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "NSWDI": 1,
          "NDSI": 1,
          "/": 1
        },
        "name": "AvgNDSI",
        "body": "self.NDSI() / self.NSWDI()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          ">": 1,
          "NGWDI": 1
        },
        "name": "NGWDI",
        "body": "self.NGWDI() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "ND": 1,
          ">": 1
        },
        "name": "ND",
        "body": "self.ND() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "NEI": 1,
          ">": 1
        },
        "name": "NEI",
        "body": "self.NEI() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "ND": 1,
          ">": 1
        },
        "name": "ND",
        "body": "self.ND() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1
        },
        "name": "NTI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Task))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1,
          "NLR": 1,
          "and": 1,
          "=": 1,
          "oclAsType": 1
        },
        "name": "NURI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Resource) and e.oclAsType(Resource).NLR() = 0)->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 6,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "NLT": 1,
          "oclAsType": 1,
          "=": 1
        },
        "name": "NUTI",
        "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Task) and e.oclAsType(Task).NLT() = 0)->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 6,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Actors::hasElement"]
      }
    ],
    "properties": [
      "secondActorIsPartOf",
      "actorISA",
      "actorIsPartOf",
      "secondActorISA"
    ]
  },
  {
    "name": "Occupies",
    "expressions": [],
    "properties": [
      "occupiesPosition",
      "occupiesAgent"
    ]
  },
  {
    "name": "Belief",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1,
          "oclAsSet": 1
        },
        "name": "NDLB",
        "body": "self.elementDecompositionLink->select(dl : DecompositionLink | dl.oclIsKindOf(DecompositionLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "+": 1,
          "NODB": 1,
          "NIDB": 1
        },
        "name": "NDepB",
        "body": "self.NIDB() + self.NODB()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "oclBadOperation": 1
        },
        "name": "NODB",
        "body": "self.elementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "oclBadOperation": 1
        },
        "name": "NIDB",
        "body": "self.secondElementDependency->select(dl : DependencyLink | dl.oclIsKindOf(DepElemLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1
        },
        "name": "NCLB",
        "body": "self.elementContribution->select(cl : ContributionLink | cl.oclIsKindOf(ContributionLink))->size()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["istar::Element::elementContribution"]
      },
      {
        "operations": {
          "NDLB": 1,
          "+": 1,
          "NCLB": 1
        },
        "name": "NLB",
        "body": "self.NCLB() + self.NDLB()",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3
        },
        "properties": []
      }
    ],
    "properties": []
  },
  {
    "name": "ContributionLink",
    "expressions": [],
    "properties": [
      "contributionElement",
      "contributionSoftgoal"
    ]
  },
  {
    "name": "Break",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Covers",
    "expressions": [],
    "properties": [
      "coversPosition",
      "coversRole"
    ]
  },
  {
    "name": "Help",
    "expressions": [],
    "properties": []
  },
  {
    "name": "IsPartOf",
    "expressions": [],
    "properties": [
      "isPartOfSecondActor",
      "isPartOfActor"
    ]
  },
  {
    "name": "Agent",
    "expressions": [{
      "operations": {
        "size": 1,
        "oclIsKindOf": 1
      },
      "name": "NEIA",
      "body": "self.hasElement->select(e : Element | e.oclIsKindOf(Element))->size()",
      "type": "OperationImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 2,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["istar::Actors::hasElement"]
    }],
    "properties": [
      "secondAgentINS",
      "agentOccupies",
      "agentINS",
      "agentPlays"
    ]
  },
  {
    "name": "NFR",
    "expressions": [],
    "properties": []
  }
]
