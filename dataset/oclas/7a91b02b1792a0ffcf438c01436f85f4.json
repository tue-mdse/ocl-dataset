[
  {
    "name": "Entity",
    "expressions": [
      {
        "operations": {
          "oclAsSet": 1,
          "includes": 1,
          "implies": 1,
          "notEmpty": 1
        },
        "name": "KindCompatibleWithOneAppliesOfEachMixin",
        "body": "mixins->forAll(m | m.applies->notEmpty() implies m.applies->exists(k | kind->closure(parent)->includes(k)))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 4,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "OCCI::Entity::mixins",
          "OCCI::Kind::parent",
          "OCCI::Entity::kind",
          "OCCI::Mixin::applies"
        ]
      },
      {
        "operations": {"allInstances": 1},
        "name": "IdUnique",
        "body": "Entity.allInstances()->isUnique(id)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OCCI::Entity::id"]
      },
      {
        "operations": {},
        "name": "AttributesNameUnique",
        "body": "attributes->isUnique(name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "OCCI::AttributeState::name",
          "OCCI::Entity::attributes"
        ]
      }
    ],
    "properties": [
      "Kind",
      "id",
      "mixins",
      "Mixin",
      "kind",
      "attributes"
    ]
  },
  {
    "name": "Boolean",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Attribute",
    "expressions": [],
    "properties": [
      "type",
      "required",
      "Category",
      "multiple_values",
      "mutable",
      "name",
      "default",
      "description"
    ]
  },
  {
    "name": "Configuration",
    "expressions": [
      {
        "operations": {
          "includesAll": 1,
          "oclContainer": 1
        },
        "name": "AllResourcesKindsInUse",
        "body": "use->includesAll(resources.kind.oclContainer())",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "OCCI::Entity::kind",
          "OCCI::Configuration::resources",
          "OCCI::Configuration::use"
        ]
      },
      {
        "operations": {
          "includesAll": 1,
          "oclContainer": 1
        },
        "name": "AllResourcesLinksMixinsInUse",
        "body": "use->includesAll(resources.links.mixins.oclContainer())",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "OCCI::Entity::mixins",
          "OCCI::Resource::links",
          "OCCI::Configuration::resources",
          "OCCI::Configuration::use"
        ]
      },
      {
        "operations": {
          "includesAll": 1,
          "oclContainer": 1
        },
        "name": "AllResourcesLinksKindsInUse",
        "body": "use->includesAll(resources.links.kind.oclContainer())",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "OCCI::Resource::links",
          "OCCI::Entity::kind",
          "OCCI::Configuration::resources",
          "OCCI::Configuration::use"
        ]
      },
      {
        "operations": {
          "includesAll": 1,
          "oclContainer": 1
        },
        "name": "AllResourcesMixinsInUse",
        "body": "use->includesAll(resources.mixins.oclContainer())",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "OCCI::Entity::mixins",
          "OCCI::Configuration::resources",
          "OCCI::Configuration::use"
        ]
      },
      {
        "operations": {
          "=": 1,
          "oclContainer": 1
        },
        "name": "AllResourcesLinksTargetsInConfiguration",
        "body": "resources.links.target->forAll(r | r.oclContainer() = self)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "OCCI::Link::target",
          "OCCI::Resource::links",
          "OCCI::Configuration::resources"
        ]
      }
    ],
    "properties": [
      "use",
      "resources"
    ]
  },
  {
    "name": "Kind",
    "expressions": [
      {
        "operations": {
          "allInstances": 1,
          "=": 1
        },
        "name": "entities",
        "body": "Entity.allInstances()->select(kind = self)",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OCCI::Entity::kind"]
      },
      {
        "operations": {},
        "name": "ActionTermUnicity",
        "body": "actions->isUnique(term)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "OCCI::Category::term",
          "OCCI::Kind::actions"
        ]
      },
      {
        "operations": {
          "=": 1,
          "oclAsType": 1,
          "oclContainer": 1
        },
        "name": "CorrectScheme",
        "body": "scheme = self.oclContainer().oclAsType(Extension).scheme",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "OCCI::Category::scheme",
          "OCCI::Extension::scheme"
        ]
      },
      {
        "operations": {
          "excludes": 1,
          "oclAsSet": 1
        },
        "name": "NoCyclicInheritance",
        "body": "parent->closure(parent)->excludes(self)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": ["OCCI::Kind::parent"]
      },
      {
        "operations": {
          "and": 2,
          "oclAsSet": 1,
          "=": 3
        },
        "name": "EntityKindIsRootParent",
        "body": "self->closure(parent)->exists(k | k.term = 'entity' and k.scheme = 'http://schemas.ogf.org/occi/core#' and k.parent = null)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 6,
          "NullLiteralExpImpl": 1,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "OCCI::Category::term",
          "OCCI::Kind::parent",
          "OCCI::Category::scheme"
        ]
      },
      {
        "operations": {
          "excludesAll": 1,
          "oclAsSet": 1
        },
        "name": "AttributesNameNotAlreadyDefinedInParent",
        "body": "attributes.name->excludesAll(parent->closure(parent).attributes.name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "OCCI::Kind::parent",
          "OCCI::Category::attributes",
          "OCCI::Attribute::name"
        ]
      }
    ],
    "properties": [
      "entities",
      "actions",
      "Kind",
      "parent",
      "Entity",
      "Extension",
      "Mixin"
    ]
  },
  {
    "name": "Link",
    "expressions": [{
      "operations": {
        "and": 1,
        "oclAsSet": 1,
        "=": 2
      },
      "name": "LinkKindIsInParent",
      "body": "kind->closure(parent)->exists(k | k.term = 'link' and k.scheme = 'http://schemas.ogf.org/occi/core#')",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "VariableExpImpl": 4,
        "OperationCallExpImpl": 4,
        "StringLiteralExpImpl": 2,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "OCCI::Category::term",
        "OCCI::Kind::parent",
        "OCCI::Category::scheme",
        "OCCI::Entity::kind"
      ]
    }],
    "properties": [
      "target",
      "source"
    ]
  },
  {
    "name": "String",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Number",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Extension",
    "expressions": [
      {
        "operations": {"=": 1},
        "name": "KindsSchemeValid",
        "body": "kinds->forAll(k | k.scheme = self.scheme)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "OCCI::Extension::kinds",
          "OCCI::Category::scheme",
          "OCCI::Extension::scheme"
        ]
      },
      {
        "operations": {
          "or": 1,
          "includes": 1,
          "=": 1,
          "oclContainer": 1
        },
        "name": "MixinDependsLocalOrImported",
        "body": "mixins.depends->forAll(let extension = oclContainer() in extension = self or import->includes(extension))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 7,
          "LetExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "OCCI::Extension::import",
          "OCCI::Mixin::depends",
          "OCCI::Extension::mixins"
        ]
      },
      {
        "operations": {
          "intersection": 1,
          "isEmpty": 1
        },
        "name": "TermUnicity",
        "body": "kinds.term->intersection(mixins.term)->isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "OCCI::Category::term",
          "OCCI::Extension::kinds",
          "OCCI::Extension::mixins"
        ]
      },
      {
        "operations": {"allInstances": 1},
        "name": "SchemeUnique",
        "body": "Extension.allInstances()->isUnique(scheme)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OCCI::Extension::scheme"]
      },
      {
        "operations": {
          "<>": 1,
          "or": 1,
          "includes": 1,
          "implies": 1,
          "=": 1,
          "oclContainer": 1
        },
        "name": "KindParentLocalOrImported",
        "body": "kinds->forAll(parent <> null implies let parentExtension = parent.oclContainer() in parentExtension = self or import->includes(parentExtension))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 7,
          "OperationCallExpImpl": 6,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "OCCI::Extension::import",
          "OCCI::Kind::parent",
          "OCCI::Extension::kinds"
        ]
      },
      {
        "operations": {
          "size": 2,
          "-": 2,
          "=": 1,
          "substring": 2
        },
        "name": "MixinsSchemeValid",
        "body": "mixins->forAll(m | m.scheme.substring(1,scheme.size()-1) = scheme.substring(1,scheme.size()-1))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 7,
          "IntegerLiteralExpImpl": 4,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "OCCI::Extension::mixins",
          "OCCI::Category::scheme",
          "OCCI::Extension::scheme"
        ]
      },
      {
        "operations": {
          "or": 1,
          "includes": 1,
          "=": 1,
          "oclContainer": 1
        },
        "name": "MixinAppliesLocalOrImported",
        "body": "mixins.applies->forAll(let extension = oclContainer() in extension = self or import->includes(extension))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 7,
          "OperationCallExpImpl": 4,
          "LetExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "OCCI::Extension::import",
          "OCCI::Mixin::applies",
          "OCCI::Extension::mixins"
        ]
      }
    ],
    "properties": [
      "import",
      "name",
      "kinds",
      "mixins",
      "types",
      "Extension",
      "Configuration",
      "scheme"
    ]
  },
  {
    "name": "Mixin",
    "expressions": [
      {
        "operations": {},
        "name": "ActionTermUnicity",
        "body": "actions->isUnique(term)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "OCCI::Category::term",
          "OCCI::Mixin::actions"
        ]
      },
      {
        "operations": {"excludesAll": 1},
        "name": "AttributesNameNotAlreadyDefinedInDepends",
        "body": "attributes.name->excludesAll(depends->closure(depends).attributes.name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "OCCI::Mixin::depends",
          "OCCI::Category::attributes",
          "OCCI::Attribute::name"
        ]
      },
      {
        "operations": {
          "allInstances": 1,
          "includes": 1
        },
        "name": "entities",
        "body": "Entity.allInstances()->select(mixins->includes(self))",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OCCI::Entity::mixins"]
      },
      {
        "operations": {"excludes": 1},
        "name": "NoCyclicInheritance",
        "body": "depends->closure(depends)->excludes(self)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": ["OCCI::Mixin::depends"]
      },
      {
        "operations": {
          "size": 2,
          "-": 2,
          "=": 1,
          "oclAsType": 1,
          "substring": 2,
          "oclContainer": 1
        },
        "name": "CorrectScheme",
        "body": "let ownerScheme = self.oclContainer().oclAsType(Extension).scheme in scheme.substring(1,ownerScheme.size()-1) = ownerScheme.substring(1,ownerScheme.size()-1)",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 9,
          "VariableExpImpl": 5,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 4,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "OCCI::Category::scheme",
          "OCCI::Extension::scheme"
        ]
      }
    ],
    "properties": [
      "actions",
      "Extension",
      "Mixin",
      "depends",
      "entities",
      "applies",
      "Entity"
    ]
  },
  {
    "name": "AttributeState",
    "expressions": [],
    "properties": [
      "name",
      "value",
      "Entity"
    ]
  },
  {
    "name": "Category",
    "expressions": [
      {
        "operations": {
          "allInstances": 1,
          "+": 1
        },
        "name": "IdentityUnique",
        "body": "Category.allInstances()->isUnique(scheme + term)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "OCCI::Category::term",
          "OCCI::Category::scheme"
        ]
      },
      {
        "operations": {
          "size": 2,
          "=": 1,
          "substring": 1
        },
        "name": "SchemeEndsWithSharp",
        "body": "scheme.substring(scheme.size(),scheme.size()) = '#'",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": ["OCCI::Category::scheme"]
      },
      {
        "operations": {},
        "name": "AttributesNameUnique",
        "body": "attributes->isUnique(name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "OCCI::Category::attributes",
          "OCCI::Attribute::name"
        ]
      }
    ],
    "properties": [
      "term",
      "title",
      "attributes",
      "scheme"
    ]
  },
  {
    "name": "Action",
    "expressions": [{
      "operations": {
        "size": 1,
        "+": 3,
        "oclAsType": 1,
        "=": 1,
        "-": 1,
        "substring": 1,
        "oclContainer": 1
      },
      "name": "CorrectScheme",
      "body": "let category = oclContainer().oclAsType(Category) in scheme = category.scheme.substring(1,category.scheme.size()-1) + '/' + category.term + '/action#'",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 9,
        "VariableExpImpl": 5,
        "LetExpImpl": 1,
        "IntegerLiteralExpImpl": 2,
        "TypeExpImpl": 1,
        "StringLiteralExpImpl": 2,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "OCCI::Category::term",
        "OCCI::Category::scheme"
      ]
    }],
    "properties": [
      "Kind",
      "Mixin"
    ]
  },
  {
    "name": "Resource",
    "expressions": [{
      "operations": {
        "and": 1,
        "oclAsSet": 1,
        "=": 2
      },
      "name": "ResourceKindIsInParent",
      "body": "kind->closure(parent)->exists(k | k.term = 'resource' and k.scheme = 'http://schemas.ogf.org/occi/core#')",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "VariableExpImpl": 4,
        "OperationCallExpImpl": 4,
        "StringLiteralExpImpl": 2,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "OCCI::Category::term",
        "OCCI::Kind::parent",
        "OCCI::Entity::kind",
        "OCCI::Category::scheme"
      ]
    }],
    "properties": [
      "Configuration",
      "links",
      "Link"
    ]
  },
  {
    "name": "URI",
    "expressions": [],
    "properties": []
  },
  {
    "name": "EDataType",
    "expressions": [],
    "properties": [
      "Attribute",
      "Extension"
    ]
  }
]
