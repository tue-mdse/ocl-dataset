[
  {
    "name": "TypedElement",
    "expressions": [],
    "properties": ["type"]
  },
  {
    "name": "Generalization",
    "expressions": [],
    "properties": [
      "general",
      "specific",
      "substitutable"
    ]
  },
  {
    "name": "PackageImport",
    "expressions": [{
      "operations": {
        "or": 1,
        "=": 2
      },
      "name": "public_or_private",
      "body": "visibility = VisibilityKind::public or visibility = VisibilityKind::private",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 3,
        "EnumLiteralExpImpl": 2,
        "PropertyCallExpImpl": 2
      },
      "properties": ["classes::PackageImport::visibility"]
    }],
    "properties": [
      "visibility",
      "importedPackage",
      "importingNamespace"
    ]
  },
  {
    "name": "Package",
    "expressions": [{
      "operations": {
        "or": 1,
        "oclIsKindOf": 1,
        "oclAsSet": 5,
        "implies": 1,
        "notEmpty": 1,
        "oclAsType": 3,
        "=": 2
      },
      "name": "elements_public_or_private",
      "body": "ownedElement->select(e | e->oclIsKindOf(NamedElement)) -> forAll( e | e->oclAsType(NamedElement).visibility->notEmpty() implies e->oclAsType(NamedElement).visibility = VisibilityKind::public or e->oclAsType(NamedElement).visibility = VisibilityKind::private)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "OperationCallExpImpl": 14,
        "VariableExpImpl": 5,
        "EnumLiteralExpImpl": 2,
        "TypeExpImpl": 4,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "classes::NamedElement::visibility",
        "classes::Element::ownedElement"
      ]
    }],
    "properties": [
      "nestedPackage",
      "ownedType",
      "packagedElement",
      "nestingPackage",
      "PackageImport"
    ]
  },
  {
    "name": "LiteralSpecification",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Type",
    "expressions": [],
    "properties": [
      "package",
      "TypedElement",
      "Association",
      "Operation"
    ]
  },
  {
    "name": "Slot",
    "expressions": [],
    "properties": [
      "owningInstance",
      "definingFeature",
      "value"
    ]
  },
  {
    "name": "ElementImport",
    "expressions": [
      {
        "operations": {
          "or": 1,
          "=": 2
        },
        "name": "visibility_public_or_private",
        "body": "visibility = VisibilityKind::public or visibility = VisibilityKind::private",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "EnumLiteralExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": ["classes::ElementImport::visibility"]
      },
      {
        "operations": {
          "<>": 1,
          "implies": 1,
          "=": 1
        },
        "name": "imported_element_is_public",
        "body": "importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "NullLiteralExpImpl": 1,
          "EnumLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "classes::NamedElement::visibility",
          "classes::ElementImport::importedElement"
        ]
      }
    ],
    "properties": [
      "importingNamespace",
      "visibility",
      "importedElement",
      "alias"
    ]
  },
  {
    "name": "Comment",
    "expressions": [],
    "properties": [
      "Element",
      "annotatedElement",
      "body"
    ]
  },
  {
    "name": "LiteralUnlimitedNatural",
    "expressions": [
      {
        "operations": {},
        "name": "unlimitedValue",
        "body": "value",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["classes::LiteralUnlimitedNatural::value"]
      },
      {
        "operations": {},
        "name": "isComputable",
        "body": "true",
        "type": "OperationImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      }
    ],
    "properties": ["value"]
  },
  {
    "name": "PrimitiveType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "AggregationKind",
    "expressions": [],
    "properties": []
  },
  {
    "name": "BehavioralFeature",
    "expressions": [],
    "properties": [
      "ownedParameter",
      "abstract"
    ]
  },
  {
    "name": "InstanceSpecification",
    "expressions": [
      {
        "operations": {
          "allFeatures": 1,
          "includes": 1
        },
        "name": "defining_feature",
        "body": "slot->forAll(s | classifier->exists(c | c.allFeatures()->includes(s.definingFeature)))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "classes::Slot::definingFeature",
          "classes::InstanceSpecification::classifier",
          "classes::InstanceSpecification::slot"
        ]
      },
      {
        "operations": {
          "<=": 1,
          "size": 1,
          "allFeatures": 1,
          "=": 1
        },
        "name": "structural_feature",
        "body": "classifier->forAll(c | (c.allFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 4,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "classes::Slot::definingFeature",
          "classes::InstanceSpecification::classifier",
          "classes::InstanceSpecification::slot"
        ]
      },
      {
        "operations": {
          "or": 1,
          "size": 1,
          "oclIsKindOf": 2,
          "and": 1,
          "oclAsSet": 2,
          "=": 1
        },
        "name": "possible_classifiers",
        "body": "classifier->forAll(c | c->oclIsKindOf(Class)) or classifier->size() = 1 and classifier->forAll(c | c->oclIsKindOf(DataType))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 8,
          "VariableExpImpl": 5,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": ["classes::InstanceSpecification::classifier"]
      }
    ],
    "properties": [
      "classifier",
      "slot",
      "InstanceValue"
    ]
  },
  {
    "name": "PackageableElement",
    "expressions": [],
    "properties": [
      "Package",
      "Namespace",
      "ElementImport"
    ]
  },
  {
    "name": "Namespace",
    "expressions": [],
    "properties": [
      "packageImport",
      "ownedMember",
      "importedMember",
      "elementImport",
      "member"
    ]
  },
  {
    "name": "LiteralBoolean",
    "expressions": [
      {
        "operations": {},
        "name": "isComputable",
        "body": "true",
        "type": "OperationImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {},
        "name": "booleanValue",
        "body": "value",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["classes::LiteralBoolean::value"]
      }
    ],
    "properties": ["value"]
  },
  {
    "name": "Property",
    "expressions": [
      {
        "operations": {
          "<=": 1,
          "or": 1,
          "upperBound": 2,
          "isEmpty": 1,
          "oclAsSet": 1,
          "implies": 1
        },
        "name": "multiplicity_of_composite",
        "body": "composite implies (upperBound()->isEmpty() or upperBound() <= 1)",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 7,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["classes::Property::composite"]
      },
      {
        "operations": {"implies": 1},
        "name": "derived_union_is_read_only",
        "body": "derivedUnion implies readOnly",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "classes::Property::readOnly",
          "classes::Property::derivedUnion"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "composite",
        "body": "aggregation = AggregationKind::composite",
        "type": "PropertyImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "EnumLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["classes::Property::aggregation"]
      },
      {
        "operations": {
          "and": 1,
          "=": 2
        },
        "name": "no_derivation",
        "body": "derived = false and derivedUnion = false",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2,
          "BooleanLiteralExpImpl": 2
        },
        "properties": [
          "classes::Property::derived",
          "classes::Property::derivedUnion"
        ]
      },
      {
        "operations": {
          "size": 1,
          "and": 1,
          "excluding": 2,
          "oclAsSet": 2,
          "isEmpty": 2,
          "=": 1,
          "first": 2
        },
        "name": "opposite",
        "body": "\n\t\t\tif owningAssociation->isEmpty() and association.memberEnd->size() = 2 then\n\t\t\t\tif (association.memberEnd->excluding(self)->first().owningAssociation->isEmpty()) then association.memberEnd->excluding(self)->first()\n\t\t\t\telse Set{}\n\t\t\t\tendif\n\t\t\telse Set{}\n\t\t\tendif",
        "type": "PropertyImpl",
        "constructs": {
          "OperationCallExpImpl": 11,
          "VariableExpImpl": 6,
          "IntegerLiteralExpImpl": 1,
          "CollectionLiteralExpImpl": 2,
          "IfExpImpl": 2,
          "PropertyCallExpImpl": 8
        },
        "properties": [
          "classes::Association::memberEnd",
          "classes::Property::owningAssociation",
          "classes::Property::association"
        ]
      }
    ],
    "properties": [
      "readOnly",
      "Property",
      "aggregation",
      "opposite",
      "association",
      "class",
      "derived",
      "composite",
      "Association",
      "derivedUnion",
      "Classifier",
      "owningAssociation",
      "datatype"
    ]
  },
  {
    "name": "ValueSpecification",
    "expressions": [
      {
        "operations": {},
        "name": "isComputable",
        "body": "false",
        "type": "OperationImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {},
        "name": "booleanValue",
        "body": "Set{}",
        "type": "OperationImpl",
        "constructs": {"CollectionLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {},
        "name": "integerValue",
        "body": "Set{}",
        "type": "OperationImpl",
        "constructs": {"CollectionLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {},
        "name": "stringValue",
        "body": "Set{}",
        "type": "OperationImpl",
        "constructs": {"CollectionLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {},
        "name": "isNull",
        "body": "false",
        "type": "OperationImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {},
        "name": "unlimitedValue",
        "body": "Set{}",
        "type": "OperationImpl",
        "constructs": {"CollectionLiteralExpImpl": 1},
        "properties": []
      }
    ],
    "properties": [
      "MultiplicityElement",
      "Slot",
      "MultiplicityElement"
    ]
  },
  {
    "name": "ParameterDirectionKind",
    "expressions": [],
    "properties": []
  },
  {
    "name": "MultiplicityElement",
    "expressions": [
      {
        "operations": {
          "asOrderedSet": 1,
          "oclAsSet": 2,
          "isEmpty": 1,
          "integerValue": 1,
          "first": 1
        },
        "name": "lowerBound",
        "body": "\n\t\t\t\tif (lowerValue->isEmpty()) then 1\n\t\t\t\telse lowerValue->asOrderedSet()->first().integerValue()\n\t\t\t\tendif",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["classes::MultiplicityElement::lowerValue"]
      },
      {
        "operations": {
          "upperBound": 1,
          "=": 1
        },
        "name": "derivedUppoerboundEqualsUpper",
        "body": "upper = upperBound()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["classes::MultiplicityElement::upper"]
      },
      {
        "operations": {
          "oclIsKindOf": 2,
          "and": 3,
          "oclAsSet": 4,
          "notEmpty": 2,
          "first": 2,
          "asSequence": 2
        },
        "name": "boundTypes",
        "body": "upperValue->notEmpty() and \n\t\t\tupperValue->asSequence()->first().oclIsKindOf(LiteralUnlimitedNatural) and \n\t\t\tlowerValue->notEmpty() and \n\t\t\tlowerValue->asSequence()->first().oclIsKindOf(LiteralInteger)",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 15,
          "VariableExpImpl": 4,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "classes::MultiplicityElement::upperValue",
          "classes::MultiplicityElement::lowerValue"
        ]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "lowerBound": 2,
          "notEmpty": 1,
          "implies": 1,
          ">=": 1
        },
        "name": "lowerBoundGreaterOrEqualsZero",
        "body": "lowerBound()->notEmpty() implies lowerBound() >= 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "lowerBound": 1,
          "=": 1
        },
        "name": "derivedLowerBoundEqualsLower",
        "body": "lower = lowerBound()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["classes::MultiplicityElement::lower"]
      },
      {
        "operations": {
          "upperBound": 2,
          "and": 1,
          "oclAsSet": 2,
          "lowerBound": 2,
          "implies": 1,
          "notEmpty": 2,
          ">=": 1
        },
        "name": "upperBoundGreaterOrEqualsLowerBound",
        "body": "(upperBound()->notEmpty() and lowerBound()->notEmpty()) implies upperBound() >= lowerBound()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 11,
          "VariableExpImpl": 4
        },
        "properties": []
      },
      {
        "operations": {
          "upperBound": 2,
          "oclAsSet": 1,
          "notEmpty": 1,
          "implies": 1,
          ">": 1
        },
        "name": "upperBoundGreaterZero",
        "body": "upperBound()->notEmpty() implies upperBound() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 6,
          "IntegerLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "asOrderedSet": 1,
          "oclAsSet": 2,
          "isEmpty": 1,
          "integerValue": 1,
          "first": 1
        },
        "name": "upperBound",
        "body": "\n\t\t\t\tif (upperValue->isEmpty()) then 1\n\t\t\t\telse upperValue->asOrderedSet()->first().integerValue()\n\t\t\t\tendif",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["classes::MultiplicityElement::upperValue"]
      }
    ],
    "properties": [
      "upper",
      "upperValue",
      "lowerValue",
      "lower",
      "unique",
      "ordered"
    ]
  },
  {
    "name": "RedefinableElement",
    "expressions": [],
    "properties": [
      "redefinitionContext",
      "RedefinableElement",
      "redefinedElement",
      "leaf"
    ]
  },
  {
    "name": "Class",
    "expressions": [],
    "properties": [
      "ownedOperation",
      "nestedClassifier",
      "active",
      "ownedAttribute",
      "superClass",
      "Class"
    ]
  },
  {
    "name": "StructuralFeature",
    "expressions": [],
    "properties": [
      "readOnly",
      "Slot"
    ]
  },
  {
    "name": "Classifier",
    "expressions": [{
      "operations": {
        "oclIsKindOf": 1,
        "oclAsSet": 1
      },
      "name": "allFeatures",
      "body": "member->select(m | m->oclIsKindOf(Feature))",
      "type": "OperationImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 2,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["classes::Namespace::member"]
    }],
    "properties": [
      "Class",
      "finalSpecialization",
      "Classifier",
      "RedefinableElement",
      "feature",
      "general",
      "abstract",
      "generalization",
      "Generalization",
      "InstanceSpecification",
      "inheritedMember",
      "attribute"
    ]
  },
  {
    "name": "LiteralInteger",
    "expressions": [
      {
        "operations": {},
        "name": "integerValue",
        "body": "value",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["classes::LiteralInteger::value"]
      },
      {
        "operations": {},
        "name": "isComputable",
        "body": "true",
        "type": "OperationImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      }
    ],
    "properties": ["value"]
  },
  {
    "name": "Element",
    "expressions": [
      {
        "operations": {
          "allOwnedElements": 1,
          "union": 1
        },
        "name": "allOwnedElements",
        "body": "ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": ["classes::Element::ownedElement"]
      },
      {
        "operations": {
          "not": 1,
          "allOwnedElements": 1,
          "includes": 1
        },
        "name": "not_own_self",
        "body": "not allOwnedElements()->includes(self)",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {},
        "name": "mustBeOwned",
        "body": "true",
        "type": "OperationImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {
          "mustBeOwned": 1,
          "oclAsSet": 1,
          "implies": 1,
          "notEmpty": 1
        },
        "name": "has_owner",
        "body": "mustBeOwned() implies owner->notEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["classes::Element::owner"]
      }
    ],
    "properties": [
      "ownedComment",
      "ownedElement",
      "owner",
      "Comment"
    ]
  },
  {
    "name": "LiteralNull",
    "expressions": [
      {
        "operations": {},
        "name": "isComputable",
        "body": "true",
        "type": "OperationImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {},
        "name": "isNull",
        "body": "true",
        "type": "OperationImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      }
    ],
    "properties": []
  },
  {
    "name": "NamedElement",
    "expressions": [
      {
        "operations": {
          "isEmpty": 2,
          "oclAsSet": 2,
          "implies": 1
        },
        "name": "visibility_needs_ownership",
        "body": "namespace->isEmpty() implies visibility->isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "classes::NamedElement::visibility",
          "classes::NamedElement::namespace"
        ]
      },
      {
        "operations": {
          "allNamespaces": 1,
          "prepend": 1,
          "isEmpty": 1,
          "oclAsSet": 1
        },
        "name": "allNamespaces",
        "body": "\n\t\t\t\tif namespace->isEmpty() then Sequence{}\n\t\t\t\telse namespace.allNamespaces()->prepend(namespace)\n\t\t\t\tendif",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 4,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": ["classes::NamedElement::namespace"]
      },
      {
        "operations": {},
        "name": "separator",
        "body": "'::'",
        "type": "OperationImpl",
        "constructs": {"StringLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {},
        "name": "qualifiedName",
        "body": "name",
        "type": "PropertyImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["classes::NamedElement::name"]
      }
    ],
    "properties": [
      "visibility",
      "qualifiedName",
      "Classifier",
      "Namespace",
      "namespace",
      "name"
    ]
  },
  {
    "name": "LiteralString",
    "expressions": [
      {
        "operations": {},
        "name": "isComputable",
        "body": "true",
        "type": "OperationImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {},
        "name": "stringValue",
        "body": "value",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["classes::LiteralString::value"]
      }
    ],
    "properties": ["value"]
  },
  {
    "name": "Operation",
    "expressions": [
      {
        "operations": {"=": 1},
        "name": "returnResult",
        "body": "ownedParameter->select( par | par.direction = ParameterDirectionKind::return)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "EnumLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "classes::BehavioralFeature::ownedParameter",
          "classes::Parameter::direction"
        ]
      },
      {
        "operations": {
          "returnResult": 2,
          "notEmpty": 1,
          "first": 1,
          "asSequence": 1
        },
        "name": "upper",
        "body": "\n\t\t\t\tif (returnResult()->notEmpty()) then\n\t\t\t\t\treturnResult()->asSequence()->first().upper\n\t\t\t\telse\n\t\t\t\t\tSet{}\n\t\t\t\tendif",
        "type": "PropertyImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 5,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["classes::MultiplicityElement::upper"]
      },
      {
        "operations": {
          "returnResult": 2,
          "notEmpty": 1,
          "first": 1,
          "asSequence": 1
        },
        "name": "unique",
        "body": "\n\t\t\t\tif (returnResult()->notEmpty()) then\n\t\t\t\t\treturnResult()->asSequence()->first().unique\n\t\t\t\telse\n\t\t\t\t\ttrue\n\t\t\t\tendif",
        "type": "PropertyImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 5,
          "IfExpImpl": 1,
          "BooleanLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["classes::MultiplicityElement::unique"]
      },
      {
        "operations": {
          "returnResult": 2,
          "notEmpty": 1,
          "first": 1,
          "asSequence": 1
        },
        "name": "ordered",
        "body": "\n\t\t\t\tif (returnResult()->notEmpty()) then\n\t\t\t\t\treturnResult()->asSequence()->first().ordered\n\t\t\t\telse\n\t\t\t\t\tfalse\n\t\t\t\tendif",
        "type": "PropertyImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 2,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": ["classes::MultiplicityElement::ordered"]
      },
      {
        "operations": {
          "<=": 1,
          "size": 1,
          "=": 1
        },
        "name": "at_most_one_return",
        "body": "ownedParameter->select( par | par.direction = ParameterDirectionKind::return )->size() <= 1",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "EnumLiteralExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "classes::BehavioralFeature::ownedParameter",
          "classes::Parameter::direction"
        ]
      },
      {
        "operations": {
          "returnResult": 2,
          "notEmpty": 1,
          "first": 1,
          "asSequence": 1
        },
        "name": "lower",
        "body": "\n\t\t\t\tif (returnResult()->notEmpty()) then\n\t\t\t\t\treturnResult()->asSequence()->first().lower\n\t\t\t\telse\n\t\t\t\t\tSet{}\n\t\t\t\tendif",
        "type": "PropertyImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 2,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["classes::MultiplicityElement::lower"]
      },
      {
        "operations": {
          "returnResult": 2,
          "notEmpty": 1,
          "first": 1,
          "asSequence": 1
        },
        "name": "type",
        "body": "\n\t\t\t\tif (returnResult()->notEmpty()) then\n\t\t\t\t\treturnResult()->asSequence()->first().type\n\t\t\t\telse\n\t\t\t\t\tSet{}\n\t\t\t\tendif",
        "type": "PropertyImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 2,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["classes::TypedElement::type"]
      }
    ],
    "properties": [
      "query",
      "lower",
      "unique",
      "upper",
      "class",
      "redefinedOperation",
      "ordered",
      "Operation",
      "type"
    ]
  },
  {
    "name": "VisibilityKind",
    "expressions": [],
    "properties": []
  },
  {
    "name": "DataType",
    "expressions": [],
    "properties": ["ownedAttribute"]
  },
  {
    "name": "Association",
    "expressions": [
      {
        "operations": {
          "isEmpty": 1,
          "symmetricDifference": 1
        },
        "name": "owns_member_ends",
        "body": "memberEnd->symmetricDifference(ownedEnd)->isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "classes::Association::ownedEnd",
          "classes::Association::memberEnd"
        ]
      },
      {
        "operations": {},
        "name": "endType",
        "body": "memberEnd.type",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "classes::Association::memberEnd",
          "classes::TypedElement::type"
        ]
      },
      {
        "operations": {
          "includesAll": 1,
          "size": 1,
          ">": 1
        },
        "name": "association_ends",
        "body": "\n\t\t\t\tif memberEnd->size() > 2 then ownedEnd->includesAll(memberEnd)\n\t\t\t\telse true\n\t\t\t\tendif",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "BooleanLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "classes::Association::ownedEnd",
          "classes::Association::memberEnd"
        ]
      },
      {
        "operations": {
          "size": 1,
          "=": 1
        },
        "name": "binary_associations_only",
        "body": "memberEnd->size() = 2",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["classes::Association::memberEnd"]
      },
      {
        "operations": {
          "<>": 1,
          "size": 1,
          "implies": 1,
          "=": 1
        },
        "name": "binary_associations",
        "body": "memberEnd->exists(e | e.aggregation <> AggregationKind::none) implies memberEnd->size() = 2",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "EnumLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "classes::Association::memberEnd",
          "classes::Property::aggregation"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "no_deriviation",
        "body": "derived = false",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "BooleanLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["classes::Association::derived"]
      }
    ],
    "properties": [
      "derived",
      "ownedEnd",
      "memberEnd",
      "navigableOwnedEnd",
      "endType"
    ]
  },
  {
    "name": "InstanceValue",
    "expressions": [],
    "properties": ["instance"]
  },
  {
    "name": "Feature",
    "expressions": [
      {
        "operations": {"=": 1},
        "name": "non_static",
        "body": "static = false",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": ["classes::Feature::static"]
      },
      {
        "operations": {"=": 1},
        "name": "non_leaf",
        "body": "redefinedElement->forAll(r | r.leaf = false)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "classes::RedefinableElement::redefinedElement",
          "classes::RedefinableElement::leaf"
        ]
      }
    ],
    "properties": [
      "featuringClassifier",
      "static"
    ]
  },
  {
    "name": "Enumeration",
    "expressions": [],
    "properties": ["ownedLiteral"]
  },
  {
    "name": "Parameter",
    "expressions": [],
    "properties": [
      "BehavioralFeature",
      "direction"
    ]
  },
  {
    "name": "EnumerationLiteral",
    "expressions": [],
    "properties": ["enumeration"]
  },
  {
    "name": "Model",
    "expressions": [],
    "properties": []
  }
]
