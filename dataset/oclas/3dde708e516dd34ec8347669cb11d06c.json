[
  {
    "name": "SRoot",
    "expressions": [{
      "operations": {"ast": 1},
      "name": "ast",
      "body": "\n\t_target::TRoot {\n\t\townedA = ownedX.ast() \n\t}\n",
      "type": "OperationImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 2,
        "ShadowExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["source::SRoot::ownedX"]
    }],
    "properties": []
  },
  {
    "name": "X",
    "expressions": [{
      "operations": {
        "ast": 3,
        "isA2": 1,
        "isA1": 1,
        "oclAsType": 3,
        "isA3": 1
      },
      "name": "ast",
      "body": "\n\tif isA1()\n\tthen _target::A1 {\n\t\tname = name, \n\townsB = ownsY.oclAsType(Y1).ast() \n\t}\n\telse\n\t\tif isA2()\n\t\tthen _target::A2 {\n\t\t\tname = name, \n\t\townsC = ownsY.oclAsType(Y2).ast() \n\t\t}\n\t\telse\n\t\t\tif isA3()\n\t\t\tthen _target::A3 {\n\t\t\t\tname = name, \n\t\t\townsC = ownsY.oclAsType(Y2).ast() \n\t\t\t}\n\t\t\telse\n\t\t\t\tinvalid\n\t\t\tendif\n\t\tendif\n\tendif\n",
      "type": "OperationImpl",
      "constructs": {
        "IteratorExpImpl": 6,
        "VariableExpImpl": 15,
        "OperationCallExpImpl": 9,
        "TypeExpImpl": 3,
        "ShadowExpImpl": 3,
        "IfExpImpl": 3,
        "InvalidLiteralExpImpl": 1,
        "PropertyCallExpImpl": 6
      },
      "properties": [
        "source::X::name",
        "source::X::ownsY"
      ]
    }],
    "properties": []
  },
  {
    "name": "Y1",
    "expressions": [{
      "operations": {"ast": 1},
      "name": "ast",
      "body": "\n\t_target::B {\n\t\tname = name, \n\townsD = ownsZ.ast() \n\t}\n",
      "type": "OperationImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 2,
        "ShadowExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "source::Y::name",
        "source::Y::ownsZ"
      ]
    }],
    "properties": []
  },
  {
    "name": "Y2",
    "expressions": [{
      "operations": {"ast": 1},
      "name": "ast",
      "body": "\n\t_target::C {\n\t\tname = name, \n\townsD = ownsZ.ast() \n\t}\n",
      "type": "OperationImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 2,
        "ShadowExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "source::Y::name",
        "source::Y::ownsZ"
      ]
    }],
    "properties": []
  },
  {
    "name": "Z",
    "expressions": [{
      "operations": {
        "lookupC": 1,
        "lookupB": 1,
        "ast": 4,
        "parentIsY2": 1,
        "parentIsY1": 1,
        "oclAsType": 2,
        "=": 2
      },
      "name": "ast",
      "body": "\n\tif parentIsY1()\n\tthen _target::D {\n\t\ttoA = toY.oclAsType(_'source'::Y1).ast().toA1, \n\trefsB = if refers = null then null else ast().lookupB(refers) endif \n\t}\n\telse\n\t\tif parentIsY2()\n\t\tthen _target::D {\n\t\t\ttoA = toY.oclAsType(_'source'::Y2).ast().toA2, \n\t\trefsC = if refers = null then null else ast().lookupC(refers) endif \n\t\t}\n\t\telse\n\t\t\tinvalid\n\t\tendif\n\tendif\n",
      "type": "OperationImpl",
      "constructs": {
        "OperationCallExpImpl": 12,
        "VariableExpImpl": 10,
        "NullLiteralExpImpl": 4,
        "TypeExpImpl": 2,
        "ShadowExpImpl": 2,
        "IfExpImpl": 4,
        "InvalidLiteralExpImpl": 1,
        "PropertyCallExpImpl": 8
      },
      "properties": [
        "source::Z::toY",
        "target::B::toA1",
        "source::Z::refers",
        "target::C::toA2"
      ]
    }],
    "properties": []
  }
]
