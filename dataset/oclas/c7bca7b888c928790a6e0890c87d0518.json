[
  {
    "name": "CSharpComponent",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ServiceMethod",
    "expressions": [
      {
        "operations": {
          "size": 1,
          ">": 1
        },
        "name": "FilledMethodDescription",
        "body": "self.description.size() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["soamodel::ServiceMethod::description"]
      },
      {
        "operations": {
          "<>": 1,
          "or": 1,
          "=": 1
        },
        "name": "DifferentParameternames",
        "body": "self.parameters->forAll(p1 : Parameter, p2 : Parameter | p1.name <> p2.name or p1 = p2)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "soamodel::ServiceMethod::parameters",
          "soamodel::Parameter::name"
        ]
      },
      {
        "operations": {
          "allInstances": 1,
          "includes": 1
        },
        "name": "OnlyRestMethods",
        "body": "RestMethod.allInstances()->includes(self)",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1
        },
        "properties": []
      }
    ],
    "properties": [
      "methodType",
      "ServiceComponent",
      "postconditions",
      "description",
      "parameters",
      "name",
      "preconditions"
    ]
  },
  {
    "name": "HttpMethod",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CollectionType",
    "expressions": [
      {
        "operations": {
          "allInstances": 1,
          "=": 1
        },
        "name": "existingCollectionItem",
        "body": "DataType.allInstances()->exists(d : DataType | self.itemType = d)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["soamodel::CollectionType::itemType"]
      },
      {
        "operations": {
          "<>": 1,
          "or": 1,
          "allInstances": 1,
          "=": 1
        },
        "name": "UniqueItemType",
        "body": "CollectionType.allInstances()->forAll(C1 : CollectionType, C2 : CollectionType | C1.itemType <> C2.itemType or C1 = C2)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 4,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["soamodel::CollectionType::itemType"]
      }
    ],
    "properties": ["itemType"]
  },
  {
    "name": "OSGiComponent",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Parameter",
    "expressions": [],
    "properties": [
      "parameterType",
      "name",
      "ServiceMethod"
    ]
  },
  {
    "name": "DataType",
    "expressions": [],
    "properties": [
      "CollectionType",
      "name",
      "ServiceMethod",
      "Parameter",
      "extendedBy",
      "Attribute",
      "ServiceOrientedArchitecture",
      "Entity"
    ]
  },
  {
    "name": "OCLConstraint",
    "expressions": [{
      "operations": {
        "size": 1,
        ">": 1
      },
      "name": "FilledOCLDescription",
      "body": "self.description.size() > 0",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 1,
        "IntegerLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["soamodel::OCLConstraint::description"]
    }],
    "properties": [
      "description",
      "constraint"
    ]
  },
  {
    "name": "ServiceComponent",
    "expressions": [
      {
        "operations": {
          "<>": 2,
          "or": 1,
          "and": 1,
          "allInstances": 1,
          "=": 1
        },
        "name": "UniqueSCURINamespace",
        "body": "ServiceComponent.allInstances()->forAll(SC1 : ServiceComponent, SC2 : ServiceComponent | SC1.URI <> SC2.URI and SC1.namespace <> SC2.namespace or SC1 = SC2)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 6,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "soamodel::ServiceComponent::URI",
          "soamodel::ServiceComponent::namespace"
        ]
      },
      {
        "operations": {
          "allInstances": 1,
          "=": 1
        },
        "name": "LivingComponent",
        "body": "ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.components->exists(c : ServiceComponent | c = self))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["soamodel::ServiceOrientedArchitecture::components"]
      },
      {
        "operations": {
          "<>": 2,
          "or": 2,
          "and": 1,
          "=": 2
        },
        "name": "UniqueServiceMethodSignatures",
        "body": "self.methods->forAll(m1 : ServiceMethod, m2 : ServiceMethod | (m1.name <> m2.name or m1 = m2)) and self.methods->forAll(m : ServiceMethod | m.parameters->forAll(p1 : Parameter, p2 : Parameter | (p1.parameterType <> p2.parameterType or p1 = p2)))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 11,
          "OperationCallExpImpl": 7,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "soamodel::ServiceComponent::methods",
          "soamodel::Parameter::parameterType",
          "soamodel::ServiceMethod::parameters",
          "soamodel::ServiceMethod::name"
        ]
      }
    ],
    "properties": [
      "methods",
      "inArchitecture",
      "ServiceComponent",
      "name",
      "connectsTo",
      "URI",
      "namespace",
      "persists"
    ]
  },
  {
    "name": "JEEComponent",
    "expressions": [],
    "properties": []
  },
  {
    "name": "BuiltInDataType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Entity",
    "expressions": [
      {
        "operations": {"=": 1},
        "name": "InternalIDAttribute",
        "body": "self.ID.attributeOf = self",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "soamodel::Attribute::attributeOf",
          "soamodel::Entity::ID"
        ]
      },
      {
        "operations": {
          "<>": 1,
          "not": 1,
          "and": 1,
          "allInstances": 1,
          "=": 1
        },
        "name": "uniqueEntityNames",
        "body": "not Entity.allInstances()->exists(e1 : Entity, e2 : Entity | (e1.name = e2.name and e1 <> e2))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 4,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["soamodel::DataType::name"]
      },
      {
        "operations": {
          "<>": 1,
          "or": 1,
          "=": 1
        },
        "name": "singleAttributeNameInEntity",
        "body": "self.attributes->forAll(a1 : Attribute, a2 : Attribute | a1.name <> a2.name or a1 = a2)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "soamodel::Attribute::name",
          "soamodel::Entity::attributes"
        ]
      }
    ],
    "properties": [
      "DataType",
      "generatedID",
      "oclConstraints",
      "superType",
      "ID",
      "persistedBy",
      "attributes"
    ]
  },
  {
    "name": "Attribute",
    "expressions": [],
    "properties": [
      "name",
      "attributeOf",
      "attributeType",
      "Entity"
    ]
  },
  {
    "name": "ServiceOrientedArchitecture",
    "expressions": [
      {
        "operations": {
          "<>": 1,
          "or": 1,
          "=": 1
        },
        "name": "uniqueComponentNames",
        "body": "self.components->forAll(s1 : ServiceComponent, s2 : ServiceComponent | s1.name <> s2.name or s1 = s2)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 5,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "soamodel::ServiceOrientedArchitecture::components",
          "soamodel::ServiceComponent::name"
        ]
      },
      {
        "operations": {
          "<>": 1,
          "or": 1,
          "=": 1
        },
        "name": "uniqueDatatypeNames",
        "body": "self.dataTypes->forAll(t1 : DataType, t2 : DataType | t1.name <> t2.name or t1 = t2)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 5,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "soamodel::ServiceOrientedArchitecture::dataTypes",
          "soamodel::DataType::name"
        ]
      }
    ],
    "properties": [
      "name",
      "components",
      "dataTypes"
    ]
  },
  {
    "name": "OCLPostcondition",
    "expressions": [],
    "properties": ["ServiceMethod"]
  },
  {
    "name": "OCLDataConstraint",
    "expressions": [],
    "properties": ["Entity"]
  },
  {
    "name": "RestMethod",
    "expressions": [],
    "properties": [
      "httpMethod",
      "path"
    ]
  },
  {
    "name": "OCLPrecondition",
    "expressions": [],
    "properties": ["ServiceMethod"]
  },
  {
    "name": "EnumLiteral",
    "expressions": [],
    "properties": [
      "value",
      "name",
      "Enum"
    ]
  },
  {
    "name": "Enum",
    "expressions": [
      {
        "operations": {
          "allInstances": 1,
          "=": 1
        },
        "name": "LivingDataType",
        "body": "ServiceOrientedArchitecture.allInstances()->exists(a : ServiceOrientedArchitecture | a.dataTypes->exists(c : DataType | c = self))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["soamodel::ServiceOrientedArchitecture::dataTypes"]
      },
      {
        "operations": {
          "<>": 1,
          "or": 1,
          "=": 1
        },
        "name": "UniqueLiteralNames",
        "body": "self.literals->forAll(L1 : EnumLiteral, L2 : EnumLiteral | L1.name <> L2.name or L1 = L2)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "soamodel::Enum::literals",
          "soamodel::EnumLiteral::name"
        ]
      },
      {
        "operations": {
          "<>": 1,
          "or": 1,
          "=": 1
        },
        "name": "UniqueLiteralValues",
        "body": "self.literals->forAll(l1 : EnumLiteral, l2 : EnumLiteral | l1.value <> l2.value or l1 = l2)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "soamodel::Enum::literals",
          "soamodel::EnumLiteral::value"
        ]
      }
    ],
    "properties": ["literals"]
  }
]
