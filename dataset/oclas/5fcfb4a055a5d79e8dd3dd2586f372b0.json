[
  {
    "name": "BinaryOperator",
    "expressions": [],
    "properties": [
      "OperandRight",
      "operandLeft"
    ]
  },
  {
    "name": "Positive",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Group",
    "expressions": [],
    "properties": [
      "ActionWheel",
      "wheels"
    ]
  },
  {
    "name": "And",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Operator",
    "expressions": [],
    "properties": [
      "BinaryOperator",
      "BinaryOperator"
    ]
  },
  {
    "name": "More",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Stopping",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Backward",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Transition",
    "expressions": [],
    "properties": [
      "nameIn",
      "dstId",
      "cond",
      "State"
    ]
  },
  {
    "name": "Action",
    "expressions": [],
    "properties": [
      "State",
      "State",
      "Robot",
      "State"
    ]
  },
  {
    "name": "DifferentialWheel",
    "expressions": [],
    "properties": [
      "isLeft",
      "speed",
      "Group"
    ]
  },
  {
    "name": "Behaviour",
    "expressions": [],
    "properties": [
      "priority",
      "Robot",
      "stateMachine",
      "name"
    ]
  },
  {
    "name": "Robot",
    "expressions": [],
    "properties": [
      "actions",
      "sensors",
      "actuators",
      "name",
      "behaviours"
    ]
  },
  {
    "name": "BinaryCond",
    "expressions": [],
    "properties": [
      "operandLeft",
      "operandRight"
    ]
  },
  {
    "name": "TurnLeft",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Actuator",
    "expressions": [],
    "properties": [
      "Robot",
      "name"
    ]
  },
  {
    "name": "Or",
    "expressions": [],
    "properties": []
  },
  {
    "name": "LessOrEqual",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Sub",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Different",
    "expressions": [],
    "properties": []
  },
  {
    "name": "TurnRight",
    "expressions": [],
    "properties": []
  },
  {
    "name": "IntVal",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "Value",
    "expressions": [],
    "properties": [
      "name",
      "UnaryOperator",
      "value",
      "Sensor",
      "StateMachine"
    ]
  },
  {
    "name": "Negation",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Less",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Sensor",
    "expressions": [],
    "properties": [
      "value",
      "sensorName",
      "name",
      "Robot"
    ]
  },
  {
    "name": "Condition",
    "expressions": [],
    "properties": [
      "BinaryCond",
      "BinaryCond",
      "UnaryCond",
      "Transition"
    ]
  },
  {
    "name": "State",
    "expressions": [{
      "operations": {},
      "name": "TransitionsUniqueName",
      "body": "\n\t\ttransitions->collect(t : Transition | t.nameIn)->isUnique(n : String | n)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "VariableExpImpl": 3,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "metamodel::State::transitions",
        "metamodel::Transition::nameIn"
      ]
    }],
    "properties": [
      "transitions",
      "workingAction",
      "StateMachine",
      "onLeaveAction",
      "uid",
      "Transition",
      "name",
      "isInitial",
      "onEnterAction"
    ]
  },
  {
    "name": "FloatVal",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "Forward",
    "expressions": [],
    "properties": []
  },
  {
    "name": "BoolVal",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "Add",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Type",
    "expressions": [],
    "properties": ["Value"]
  },
  {
    "name": "Equal",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Negative",
    "expressions": [],
    "properties": []
  },
  {
    "name": "UnaryOperator",
    "expressions": [],
    "properties": ["valeur"]
  },
  {
    "name": "MoreOrEqual",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ActionWheel",
    "expressions": [],
    "properties": [
      "group",
      "speed"
    ]
  },
  {
    "name": "UnaryCond",
    "expressions": [],
    "properties": ["child"]
  },
  {
    "name": "DistanceSensor",
    "expressions": [],
    "properties": []
  },
  {
    "name": "LightSensor",
    "expressions": [],
    "properties": []
  },
  {
    "name": "StateMachine",
    "expressions": [
      {
        "operations": {},
        "name": "StateUidUnique",
        "body": "\n\t\t\tself.states->collect(s : State | s.uid)->isUnique(n : Integer | n)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "metamodel::StateMachine::states",
          "metamodel::State::uid"
        ]
      },
      {
        "operations": {
          "size": 1,
          "notEmpty": 1,
          "=": 2
        },
        "name": "StateTransitionDestination",
        "body": "\n\t\t \tstates->select(s : State | s.transitions->select(t: Transition | t.dstId = s)->notEmpty())->size() = 0",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 4,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "metamodel::State::transitions",
          "metamodel::StateMachine::states",
          "metamodel::Transition::dstId"
        ]
      }
    ],
    "properties": [
      "Behaviour",
      "name",
      "states",
      "constants"
    ]
  }
]
