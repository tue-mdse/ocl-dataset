[
  {
    "name": "X1",
    "expressions": [{
      "operations": {
        "ast": 1,
        "oclAsType": 1
      },
      "name": "ast",
      "body": "\n\ttarget::A1 {\n\t\townsB = ownsY.oclAsType(Y1).ast()\n\t}\n\t\n",
      "type": "OperationImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 3,
        "TypeExpImpl": 1,
        "ShadowExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["source::X::ownsY"]
    }],
    "properties": []
  },
  {
    "name": "Y1",
    "expressions": [{
      "operations": {"ast": 1},
      "name": "ast",
      "body": "\n\ttarget::B {\n\t\townsD = ownsZ.ast(),\n\t\tname = name\n\t}\n\t\n",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 1,
        "ShadowExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "source::Y::name",
        "source::Y::ownsZ"
      ]
    }],
    "properties": []
  },
  {
    "name": "Z1",
    "expressions": [{
      "operations": {
        "ast": 1,
        "oclAsType": 1
      },
      "name": "ast",
      "body": "\n\ttarget::D {\n\t\ttoA = toY.oclAsType(source::Y1).ast().toA1\n\t\t-- refsB = ast().lookupB(self) FIXME we need a new TargetLooup.ocl\n\t}\n\t\n",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 2,
        "TypeExpImpl": 1,
        "ShadowExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "target::B::toA1",
        "source::Z::toY"
      ]
    }],
    "properties": []
  },
  {
    "name": "Y2",
    "expressions": [{
      "operations": {"ast": 1},
      "name": "ast",
      "body": "\n\ttarget::C {\n\t\townsD = ownsZ.ast(),\n\t\tname = name\n\t}\n\n",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 1,
        "ShadowExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "source::Y::name",
        "source::Y::ownsZ"
      ]
    }],
    "properties": []
  },
  {
    "name": "X2",
    "expressions": [{
      "operations": {
        "ast": 1,
        "oclAsType": 1
      },
      "name": "ast",
      "body": "\n\ttarget::A2 {\n\t\townsC = ownsY.oclAsType(Y2).ast()\n\t}\n\n",
      "type": "OperationImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 3,
        "TypeExpImpl": 1,
        "ShadowExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["source::X::ownsY"]
    }],
    "properties": []
  },
  {
    "name": "SRoot",
    "expressions": [{
      "operations": {"ast": 1},
      "name": "ast",
      "body": "\n\ttarget::TRoot {\n\t\townedA = ownedX.ast()\n\t}\n\n",
      "type": "OperationImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 1,
        "ShadowExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["source::SRoot::ownedX"]
    }],
    "properties": []
  },
  {
    "name": "X",
    "expressions": [{
      "operations": {},
      "name": "ast",
      "body": "\n\tinvalid ",
      "type": "OperationImpl",
      "constructs": {"InvalidLiteralExpImpl": 1},
      "properties": []
    }],
    "properties": []
  },
  {
    "name": "Z",
    "expressions": [{
      "operations": {},
      "name": "ast",
      "body": "\n\tinvalid ",
      "type": "OperationImpl",
      "constructs": {"InvalidLiteralExpImpl": 1},
      "properties": []
    }],
    "properties": []
  },
  {
    "name": "Z2",
    "expressions": [{
      "operations": {
        "ast": 1,
        "oclAsType": 1
      },
      "name": "ast",
      "body": "\n\ttarget::D {\n\t\ttoA = toY.oclAsType(source::Y2).ast().toA2\n\t\t-- refsC = ast().lookupC(self) FIXME we need a new TargetLooup.ocl\n\t}\n\n",
      "type": "OperationImpl",
      "constructs": {
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 1,
        "TypeExpImpl": 1,
        "ShadowExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "source::Z::toY",
        "target::C::toA2"
      ]
    }],
    "properties": []
  }
]
