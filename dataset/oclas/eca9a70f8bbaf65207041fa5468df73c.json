[
  {
    "name": "Heading",
    "expressions": [],
    "properties": [
      "Text",
      "Level"
    ]
  },
  {
    "name": "TextParagraph",
    "expressions": [],
    "properties": ["Text"]
  },
  {
    "name": "PageElement",
    "expressions": [{
      "operations": {
        "<>": 2,
        "allInstances": 1,
        "implies": 1,
        "oclAsType": 2
      },
      "name": "uniqueID",
      "body": "PageElement.allInstances()->forAll(e1, e2 | e1 <> e2 implies e1.oclAsType(PageElement).ID <> e2.oclAsType(PageElement).ID)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "OperationCallExpImpl": 6,
        "VariableExpImpl": 4,
        "TypeExpImpl": 3,
        "PropertyCallExpImpl": 2
      },
      "properties": ["fml::PageElement::ID"]
    }],
    "properties": [
      "visibleIfSelected",
      "contained",
      "ID"
    ]
  },
  {
    "name": "Form",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "and": 1,
          "isEmpty": 1,
          "oclAsSet": 1,
          "=": 1
        },
        "name": "oneWelcomePage",
        "body": "self.organized->select(p | p.isWelcome)->size() = 1 and self.organized->select(p | p.isWelcome)->forAll(p | p.predecessor->isEmpty())",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 5,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "fml::Page::predecessor",
          "fml::Form::organized",
          "fml::Page::isWelcome"
        ]
      },
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "isEmpty": 1,
          "=": 1
        },
        "name": "oneFirstPage",
        "body": "self.organized->select(p | p.predecessor->isEmpty())->size() = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "fml::Page::predecessor",
          "fml::Form::organized"
        ]
      }
    ],
    "properties": ["organized"]
  },
  {
    "name": "DisplayElement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SelectionType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Page",
    "expressions": [
      {
        "operations": {
          "excludes": 1,
          "oclAsSet": 2,
          "union": 1,
          "asSet": 1
        },
        "name": "noCycles",
        "body": "self.predecessor->asSet()->union(self.predecessor->closure(p | p.predecessor))->excludes(self)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 5,
          "PropertyCallExpImpl": 3
        },
        "properties": ["fml::Page::predecessor"]
      },
      {
        "operations": {
          "not": 1,
          "at": 2,
          "size": 1,
          "and": 1,
          "toUpper": 1,
          "=": 2
        },
        "name": "titleStartsUpperCase",
        "body": "not (Title.size()=0) and Title.at(1) = Title.at(1).toUpper()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 8,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": ["fml::Page::Title"]
      }
    ],
    "properties": [
      "predecessor",
      "Form",
      "Title",
      "Page",
      "consists",
      "isWelcome"
    ]
  },
  {
    "name": "SelectField",
    "expressions": [{
      "operations": {
        "<=": 2,
        "<>": 1,
        "or": 1,
        "size": 2,
        "and": 1
      },
      "name": "RadioOnlyOneSelected",
      "body": "self.Type <> SelectionType::RADIO or (self.consists->select(preselected)->size() <= 1 and self.consists->select(selected)->size() <= 1)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "OperationCallExpImpl": 7,
        "VariableExpImpl": 5,
        "IntegerLiteralExpImpl": 2,
        "EnumLiteralExpImpl": 1,
        "PropertyCallExpImpl": 5
      },
      "properties": [
        "fml::SelectionItem::preselected",
        "fml::SelectField::Type",
        "fml::SelectionItem::selected",
        "fml::SelectField::consists"
      ]
    }],
    "properties": [
      "Type",
      "Label",
      "consists"
    ]
  },
  {
    "name": "SelectionItem",
    "expressions": [{
      "operations": {
        "oclAsSet": 2,
        "includes": 1,
        "union": 1,
        "asSet": 1
      },
      "name": "selectionIsOfSubsequentPage",
      "body": "self.displayElementVisible -> forAll(e |e.contained.predecessor->asSet()->union(e.contained.predecessor->closure(p | p.predecessor))->includes(self.contained.contained))",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "VariableExpImpl": 5,
        "OperationCallExpImpl": 5,
        "PropertyCallExpImpl": 8
      },
      "properties": [
        "fml::Page::predecessor",
        "fml::SelectionItem::contained",
        "fml::PageElement::contained",
        "fml::SelectionItem::displayElementVisible"
      ]
    }],
    "properties": [
      "preselected",
      "contained",
      "Text",
      "selected",
      "displayElementVisible"
    ]
  },
  {
    "name": "List",
    "expressions": [],
    "properties": [
      "consists",
      "isOrdered"
    ]
  },
  {
    "name": "InputElement",
    "expressions": [],
    "properties": ["isMandatory"]
  },
  {
    "name": "TextInput",
    "expressions": [],
    "properties": [
      "Label",
      "Type",
      "Content"
    ]
  },
  {
    "name": "TextInputType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ListItem",
    "expressions": [],
    "properties": [
      "List",
      "Text"
    ]
  }
]
