[
  {
    "name": "Burning",
    "expressions": [
      {
        "operations": {
          "oclIsKindOf": 1,
          "=": 1
        },
        "name": "invariant_Burning4",
        "body": "\n\tself.oclIsKindOf(Burning) = true\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "=": 1
        },
        "name": "invariant_Burning6",
        "body": "\n\tself.oclIsKindOf(Earning) = false\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "oclIsTypeOf": 1,
          "=": 1
        },
        "name": "invariant_Burning2",
        "body": "\n\tself.oclIsTypeOf(Transaction) = false\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "oclIsTypeOf": 1,
          "=": 1
        },
        "name": "invariant_Burning5",
        "body": "\n\tself.oclIsTypeOf(Earning) = false\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "=": 1
        },
        "name": "invariant_Burning1",
        "body": "\n\tself.oclIsKindOf(Transaction) = true\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "oclIsTypeOf": 1,
          "=": 1
        },
        "name": "invariant_Burning3",
        "body": "\n\tself.oclIsTypeOf(Burning) = true\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": []
      }
    ],
    "properties": []
  },
  {
    "name": "TransactionReport",
    "expressions": [
      {
        "operations": {"includesAll": 1},
        "name": "invariant_cycle",
        "body": "\n\tself.card.transactions->includesAll(self.lines->collect( i_TransactionReportLine : TransactionReportLine | i_TransactionReportLine.transaction ))\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "RandL::CustomerCard::transactions",
          "RandL::TransactionReport::card",
          "RandL::TransactionReport::lines",
          "RandL::TransactionReportLine::transaction"
        ]
      },
      {
        "operations": {
          "oclIsTypeOf": 1,
          "sum": 1
        },
        "name": null,
        "body": "\n\tself.lines->collect( i_TransactionReportLine : TransactionReportLine | i_TransactionReportLine.transaction )->select( i_Transaction : Transaction | i_Transaction.oclIsTypeOf(Burning) )->collect( i_Transaction : Transaction | i_Transaction.points )->sum()\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::TransactionReport::lines",
          "RandL::TransactionReportLine::transaction",
          "RandL::Transaction::points"
        ]
      },
      {
        "operations": {},
        "name": null,
        "body": "\n\tself.card.Membership.account.points\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "RandL::TransactionReport::card",
          "RandL::CustomerCard::Membership",
          "RandL::LoyaltyAccount::points",
          "RandL::Membership::account"
        ]
      },
      {
        "operations": {
          "oclIsTypeOf": 1,
          "sum": 1
        },
        "name": null,
        "body": "\n\tself.lines->collect( i_TransactionReportLine : TransactionReportLine | i_TransactionReportLine.transaction )->select( i_Transaction : Transaction | i_Transaction.oclIsTypeOf(Earning) )->collect( i_Transaction : Transaction | i_Transaction.points )->sum()\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::TransactionReport::lines",
          "RandL::TransactionReportLine::transaction",
          "RandL::Transaction::points"
        ]
      },
      {
        "operations": {
          "and": 1,
          "isAfter": 1,
          "isBefore": 1
        },
        "name": "invariant_dates",
        "body": "\n\tself.lines->collect( i_TransactionReportLine : TransactionReportLine | i_TransactionReportLine.date )->forAll( d : Date | d.isBefore(self.until) and d.isAfter(self.from) )\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 6,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "RandL::TransactionReport::until",
          "RandL::TransactionReport::lines",
          "RandL::TransactionReport::from",
          "RandL::TransactionReportLine::date"
        ]
      },
      {
        "operations": {},
        "name": null,
        "body": "\n\tself.card.Membership.account.number\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "RandL::CustomerCard::Membership",
          "RandL::TransactionReport::card",
          "RandL::Membership::account",
          "RandL::LoyaltyAccount::number"
        ]
      },
      {
        "operations": {},
        "name": null,
        "body": "\n\tself.card.owner.name\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::CustomerCard::owner",
          "RandL::TransactionReport::card",
          "RandL::Customer::name"
        ]
      }
    ],
    "properties": [
      "number",
      "totalBurned",
      "balance",
      "name",
      "totalEarned"
    ]
  },
  {
    "name": "CustomerCard",
    "expressions": [
      {
        "operations": {},
        "name": null,
        "body": "\n\tself.Membership.currentLevel\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::CustomerCard::Membership",
          "RandL::Membership::currentLevel"
        ]
      },
      {
        "operations": {},
        "name": "transactions",
        "body": "\n\tSet{}\n\n",
        "type": "PropertyImpl",
        "constructs": {"CollectionLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {
          "notEmpty": 1,
          ">": 1
        },
        "name": "invariant_CustomerCard4",
        "body": "\n\tself.transactions->select( i_Transaction : Transaction | i_Transaction.points > 100 )->notEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::CustomerCard::transactions",
          "RandL::Transaction::points"
        ]
      },
      {
        "operations": {},
        "name": "valid",
        "body": "\n\ttrue\n\n",
        "type": "PropertyImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          ">": 1
        },
        "name": "invariant_CustomerCard3",
        "body": "\n\tself.owner.programs->size() > 0\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::CustomerCard::owner",
          "RandL::Customer::programs"
        ]
      },
      {
        "operations": {"concat": 2},
        "name": null,
        "body": "\n\tself.owner.title.concat(' ').concat(self.owner.name)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "RandL::CustomerCard::owner",
          "RandL::Customer::name",
          "RandL::Customer::title"
        ]
      },
      {
        "operations": {">=": 1},
        "name": "invariant_ofAge",
        "body": "\n\tself.owner.age >= 18\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::CustomerCard::owner",
          "RandL::Customer::age"
        ]
      },
      {
        "operations": {
          "and": 1,
          "isAfter": 1,
          "isBefore": 1
        },
        "name": "getTransactions",
        "body": "\tself.transactions->select( i_Transaction : Transaction | i_Transaction.date.isAfter(from) and i_Transaction.date.isBefore(until) )\n\n",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::CustomerCard::transactions",
          "RandL::Transaction::date"
        ]
      },
      {
        "operations": {
          "sum": 1,
          "isAfter": 1
        },
        "name": "getTotalPoints",
        "body": "self.transactions->select( i_Transaction : Transaction | i_Transaction.date.isAfter(d) )->collect( i_Transaction : Transaction | i_Transaction.points )->sum()\n",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 4,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::CustomerCard::transactions",
          "RandL::Transaction::date",
          "RandL::Transaction::points"
        ]
      },
      {
        "operations": {"isBefore": 1},
        "name": "invariant_checkDates",
        "body": "\n\tself.validFrom.isBefore(self.goodThru)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::CustomerCard::validFrom",
          "RandL::CustomerCard::goodThru"
        ]
      }
    ],
    "properties": [
      "printedName",
      "valid",
      "transactions",
      "myLevel"
    ]
  },
  {
    "name": "ServiceLevel",
    "expressions": [
      {
        "operations": {
          "last": 1,
          "=": 1
        },
        "name": "invariant_ServiceLevel12",
        "body": "\n\t(OrderedSet{'a', 'b', 'c', 'd'}->last()) = 'd'\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "StringLiteralExpImpl": 5,
          "CollectionLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "subSequence": 1,
          "=": 1
        },
        "name": "invariant_ServiceLevel16",
        "body": "\n\t(Sequence{'a', 'b', 'c', 'c', 'd', 'e'}->subSequence(3, 5)) = Sequence{'c', 'c', 'd'}\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 2,
          "StringLiteralExpImpl": 9,
          "CollectionLiteralExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {"isEmpty": 1},
        "name": "invariant_ServiceLevel1",
        "body": "\n\tself.program.partners->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::ServiceLevel::program",
          "RandL::LoyaltyProgram::partners"
        ]
      },
      {
        "operations": {"isEmpty": 1},
        "name": "invariant_ServiceLevel6",
        "body": "\n\tSequence{Set{1, 2}, Set{2, 3}, Set{4, 5, 6}}->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 7,
          "CollectionLiteralExpImpl": 4
        },
        "properties": []
      },
      {
        "operations": {"isEmpty": 1},
        "name": "invariant_ServiceLevel5",
        "body": "\n\tBag{1, 1, 2, 2, 4, 5, 6}->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 7,
          "CollectionLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"isEmpty": 1},
        "name": "invariant_ServiceLevel3",
        "body": "\n\tSet{1, 2, 3, 4, 5, 6}->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 6,
          "CollectionLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"isEmpty": 1},
        "name": "invariant_ServiceLevel4",
        "body": "\n\tBag{Set{1, 2}, Set{1, 2}, Set{4, 5, 6}}->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 7,
          "CollectionLiteralExpImpl": 4
        },
        "properties": []
      },
      {
        "operations": {
          "prepend": 1,
          "=": 1
        },
        "name": "invariant_ServiceLevel19",
        "body": "\n\t(Sequence{'a', 'b', 'c', 'c', 'd', 'e'}->prepend('X')) = Sequence{'X', 'a', 'b', 'c', 'c', 'd', 'e'}\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "StringLiteralExpImpl": 14,
          "CollectionLiteralExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "=": 1,
          "-": 1
        },
        "name": "invariant_ServiceLevel9",
        "body": "\n\t((OrderedSet{12, 9, 6, 3}) - Set{1, 3, 2}) = OrderedSet{12, 9, 6}\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 10,
          "CollectionLiteralExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {
          "=": 1,
          "first": 1
        },
        "name": "invariant_ServiceLevel11",
        "body": "\n\t(Sequence{'a', 'b', 'c', 'c', 'd', 'e'}->first()) = 'a'\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "StringLiteralExpImpl": 7,
          "CollectionLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "subOrderedSet": 1,
          "=": 1
        },
        "name": "invariant_ServiceLevel17",
        "body": "\n\t(OrderedSet{'a', 'b', 'c', 'd'}->subOrderedSet(2, 3)) = OrderedSet{'b', 'c'}\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 2,
          "StringLiteralExpImpl": 6,
          "CollectionLiteralExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "at": 1,
          "=": 1
        },
        "name": "invariant_ServiceLevel13",
        "body": "\n\t(Sequence{'a', 'b', 'c', 'c', 'd', 'e'}->at(3)) = 'c'\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 7,
          "CollectionLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "=": 1,
          "symmetricDifference": 1
        },
        "name": "invariant_ServiceLevel10",
        "body": "\n\t(Set{1, 4, 7, 10}->symmetricDifference(Set{4, 5, 7})) = Set{1, 5, 10}\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 10,
          "CollectionLiteralExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {
          "=": 1,
          "-": 1
        },
        "name": "invariant_ServiceLevel8",
        "body": "\n\t((Set{1, 4, 7, 10}) - Set{4, 7}) = Set{1, 10}\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 8,
          "CollectionLiteralExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {"isEmpty": 1},
        "name": "invariant_ServiceLevel2",
        "body": "\n\tSet{Set{1, 2}, Set{2, 3}, Set{4, 5, 6}}->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 7,
          "CollectionLiteralExpImpl": 4
        },
        "properties": []
      },
      {
        "operations": {
          "=": 1,
          "append": 1
        },
        "name": "invariant_ServiceLevel18",
        "body": "\n\t(Sequence{'a', 'b', 'c', 'c', 'd', 'e'}->append('X')) = Sequence{'a', 'b', 'c', 'c', 'd', 'e', 'X'}\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "StringLiteralExpImpl": 14,
          "CollectionLiteralExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "=": 1,
          "indexOf": 1
        },
        "name": "invariant_ServiceLevel14",
        "body": "\n\t(Sequence{'a', 'b', 'c', 'c', 'd', 'e'}->indexOf('c')) = 3\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 7,
          "CollectionLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "insertAt": 1,
          "=": 1
        },
        "name": "invariant_ServiceLevel15",
        "body": "\n\t(OrderedSet{'a', 'b', 'c', 'd'}->insertAt(3, 'X')) = OrderedSet{'a', 'b', 'X', 'c', 'd'}\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 10,
          "CollectionLiteralExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {"isEmpty": 1},
        "name": "invariant_ServiceLevel7",
        "body": "\n\tSequence{2, 1, 2, 3, 5, 6, 4}->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 7,
          "CollectionLiteralExpImpl": 1
        },
        "properties": []
      }
    ],
    "properties": []
  },
  {
    "name": "Customer",
    "expressions": [
      {
        "operations": {"=": 1},
        "name": "invariant_myInvariant23",
        "body": "\n\tself.name = 'Edward'\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RandL::Customer::name"]
      },
      {
        "operations": {
          "+": 1,
          "=": 1
        },
        "name": null,
        "body": "\tself.age = self.age + 1\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["RandL::Customer::age"]
      },
      {
        "operations": {"isEmpty": 1},
        "name": "invariant_Customer10",
        "body": "\n\tself.programs->collect( i_LoyaltyProgram : LoyaltyProgram | i_LoyaltyProgram.partners )->collectNested( i_ProgramPartner : ProgramPartner | i_ProgramPartner.deliveredServices )->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::LoyaltyProgram::partners",
          "RandL::ProgramPartner::deliveredServices",
          "RandL::Customer::programs"
        ]
      },
      {
        "operations": {
          "isEmpty": 1,
          "oclAsSet": 1,
          "<": 1,
          "asSet": 1
        },
        "name": "invariant_ANY",
        "body": "\n\tself.memberships->collect( i_Membership : Membership | i_Membership.account )->any( i_LoyaltyAccount : LoyaltyAccount | i_LoyaltyAccount.number < 10000 )->asSet()->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::Membership::account",
          "RandL::LoyaltyAccount::number",
          "RandL::Customer::memberships"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "invariant_Customer2",
        "body": "\n\tself.name = 'Edward'\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RandL::Customer::name"]
      },
      {
        "operations": {},
        "name": "cardsForProgram",
        "body": "p.memberships->collect( i_Membership : Membership | i_Membership.card )\n",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::LoyaltyProgram::memberships",
          "RandL::Membership::card"
        ]
      },
      {
        "operations": {},
        "name": "loyalToCompanies",
        "body": "self.programs->collect( i_LoyaltyProgram : LoyaltyProgram | i_LoyaltyProgram.partners )\n\n",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::LoyaltyProgram::partners",
          "RandL::Customer::programs"
        ]
      },
      {
        "operations": {">=": 1},
        "name": "invariant_ofAge",
        "body": "\n\tself.age >= 18\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RandL::Customer::age"]
      },
      {
        "operations": {
          "sum": 1,
          ">": 1
        },
        "name": "wellUsedCards",
        "body": "self.cards->select( i_CustomerCard : CustomerCard | (i_CustomerCard.transactions->collect( i_Transaction : Transaction | i_Transaction.points )->sum()) > 10000 )\n",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::CustomerCard::transactions",
          "RandL::Customer::cards",
          "RandL::Transaction::points"
        ]
      },
      {
        "operations": {
          "not": 1,
          "isEmpty": 1,
          ">": 1
        },
        "name": "invariant_Customer9",
        "body": "\n\tself.memberships->collect( i_Membership : Membership | i_Membership.account )->reject( i_LoyaltyAccount : LoyaltyAccount | not (i_LoyaltyAccount.points > 0) )->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::LoyaltyAccount::points",
          "RandL::Membership::account",
          "RandL::Customer::memberships"
        ]
      },
      {
        "operations": {
          "size": 2,
          "=": 2
        },
        "name": "invariant_Customer12",
        "body": "\n\tself.programs->size() = self.cards->select( i_CustomerCard : CustomerCard | i_CustomerCard.valid = true )->size()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 4,
          "BooleanLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::Customer::cards",
          "RandL::CustomerCard::valid",
          "RandL::Customer::programs"
        ]
      },
      {
        "operations": {
          "implies": 1,
          "=": 2
        },
        "name": "invariant_Customer7",
        "body": "\n\t(self.gender = Gender::male) implies self.title = 'Mr.'\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "EnumLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::Customer::gender",
          "RandL::Customer::title"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "invariant_Customer4",
        "body": "\n\tself.name = 'Edward'\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RandL::Customer::name"]
      },
      {
        "operations": {
          "size": 1,
          "=": 1,
          ">": 1
        },
        "name": "invariant_Customer1",
        "body": "\n\t(self.cards->select( i_CustomerCard : CustomerCard | i_CustomerCard.valid = true )->size()) > 1\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "RandL::Customer::cards",
          "RandL::CustomerCard::valid"
        ]
      },
      {
        "operations": {
          "and": 1,
          "=": 2
        },
        "name": "invariant_Customer6",
        "body": "\n\t(self.name = 'Edward') and self.title = 'Mr.'\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::Customer::name",
          "RandL::Customer::title"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "invariant_Customer5",
        "body": "\n\tself.title = 'Mr.'\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RandL::Customer::title"]
      },
      {
        "operations": {"=": 1},
        "name": "invariant_Customer3",
        "body": "\n\tself.name = 'Edward'\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RandL::Customer::name"]
      },
      {
        "operations": {"substring": 1},
        "name": "initial",
        "body": "self.name.substring(1, 1)\n",
        "type": "PropertyImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RandL::Customer::name"]
      },
      {
        "operations": {
          "+": 1,
          "=": 1
        },
        "name": "invariant_Customer11",
        "body": "\n\tSet{1, 2, 3 }->iterate(i : Integer; sum : Integer = 0 | sum + i) = 0\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 5,
          "CollectionLiteralExpImpl": 1,
          "IterateExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "isEmpty": 1,
          ">": 1
        },
        "name": "invariant_Customer8",
        "body": "\n\tself.memberships->collect( i_Membership : Membership | i_Membership.account )->select( i_LoyaltyAccount : LoyaltyAccount | i_LoyaltyAccount.points > 0 )->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::LoyaltyAccount::points",
          "RandL::Membership::account",
          "RandL::Customer::memberships"
        ]
      },
      {
        "operations": {
          "size": 2,
          "=": 2
        },
        "name": "invariant_sizesAgree",
        "body": "\n\tself.programs->size() = self.cards->select( i_CustomerCard : CustomerCard | i_CustomerCard.valid = true )->size()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 4,
          "PropertyCallExpImpl": 3,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "RandL::Customer::cards",
          "RandL::CustomerCard::valid",
          "RandL::Customer::programs"
        ]
      }
    ],
    "properties": [
      "initial",
      "wellUsedCards",
      "loyalToCompanies"
    ]
  },
  {
    "name": "LoyaltyProgram",
    "expressions": [
      {
        "operations": {},
        "name": "constantlyTrue",
        "body": "\ttrue\n\n",
        "type": "ConstraintImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {
          "including": 1,
          "=": 1
        },
        "name": null,
        "body": "\tself.participants = self.participants->including(c)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": ["RandL::LoyaltyProgram::participants"]
      },
      {
        "operations": {"isEmpty": 1},
        "name": "invariant_LoyaltyProgram11",
        "body": "\n\tSequence{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 10,
          "CollectionLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"=": 1},
        "name": "isSaving",
        "body": "self.partners->collect( i_ProgramPartner : ProgramPartner | i_ProgramPartner.deliveredServices )->forAll( i_Service : Service | i_Service.pointsEarned = 0 )\n",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::LoyaltyProgram::partners",
          "RandL::Service::pointsEarned",
          "RandL::ProgramPartner::deliveredServices"
        ]
      },
      {
        "operations": {},
        "name": "invariant_LoyaltyProgram14",
        "body": "\n\tself.memberships->collect( i_Membership : Membership | i_Membership.account )->isUnique( acc : LoyaltyAccount | acc.number )\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::LoyaltyProgram::memberships",
          "RandL::LoyaltyAccount::number",
          "RandL::Membership::account"
        ]
      },
      {
        "operations": {
          "isEmpty": 1,
          "+": 1
        },
        "name": "invariant_LoyaltyProgram9",
        "body": "\n\tSequence{1 .. 6 + 4}->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 3,
          "CollectionLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "not": 1,
          "includes": 1
        },
        "name": null,
        "body": "\tnot self.participants->includes(c)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RandL::LoyaltyProgram::participants"]
      },
      {
        "operations": {"includesAll": 1},
        "name": "invariant_LoyaltyProgram1",
        "body": "\n\tself.levels->includesAll(self.memberships->collect( i_Membership : Membership | i_Membership.currentLevel ))\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::LoyaltyProgram::memberships",
          "RandL::LoyaltyProgram::levels",
          "RandL::Membership::currentLevel"
        ]
      },
      {
        "operations": {"isEmpty": 1},
        "name": "invariant_LoyaltyProgram10",
        "body": "\n\tSequence{1 .. 10}->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 2,
          "CollectionLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "=": 1,
          "first": 1
        },
        "name": "invariant_firstLevel",
        "body": "\n\tself.levels->first().name = 'Silver'\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::ServiceLevel::name",
          "RandL::LoyaltyProgram::levels"
        ]
      },
      {
        "operations": {
          "size": 1,
          "<": 1
        },
        "name": "invariant_LoyaltyProgram12",
        "body": "\n\tself.participants->size() < 10000\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RandL::LoyaltyProgram::participants"]
      },
      {
        "operations": {"isEmpty": 1},
        "name": "invariant_LoyaltyProgram3",
        "body": "\n\tSet{1, 2, 5, 88}->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 4,
          "CollectionLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"=": 1},
        "name": "invariant_LoyaltyProgram2",
        "body": "\n\tself.levels->exists( i_ServiceLevel : ServiceLevel | i_ServiceLevel.name = 'basic' )\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::ServiceLevel::name",
          "RandL::LoyaltyProgram::levels"
        ]
      },
      {
        "operations": {
          "<=": 1,
          "age": 1
        },
        "name": "invariant_LoyaltyProgram16",
        "body": "\n\tself.participants->forAll( i_Customer : Customer | i_Customer.age() <= 70 )\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RandL::LoyaltyProgram::participants"]
      },
      {
        "operations": {
          "including": 1,
          "=": 1
        },
        "name": null,
        "body": "\tself.participants = self.participants->including(c)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": ["RandL::LoyaltyProgram::participants"]
      },
      {
        "operations": {
          "<>": 2,
          "implies": 1
        },
        "name": "invariant_LoyaltyProgram18",
        "body": "\n\tself.participants->forAll( c1 : Customer | self.participants->forAll( c2 : Customer | (c1 <> c2) implies c1.name <> c2.name ) )\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 6,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "RandL::Customer::name",
          "RandL::LoyaltyProgram::participants"
        ]
      },
      {
        "operations": {"includes": 1},
        "name": "levelsIncludesArgL",
        "body": "\tself.levels->includes(l)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RandL::LoyaltyProgram::levels"]
      },
      {
        "operations": {"<>": 1},
        "name": null,
        "body": "\tc.name <> ''\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RandL::Customer::name"]
      },
      {
        "operations": {
          "not": 1,
          "includes": 1
        },
        "name": null,
        "body": "\tnot self.participants->includes(c)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RandL::LoyaltyProgram::participants"]
      },
      {
        "operations": {},
        "name": "invariant_LoyaltyProgram15",
        "body": "\n\tself.memberships->collect( i_Membership : Membership | i_Membership.account )->isUnique( i_LoyaltyAccount : LoyaltyAccount | i_LoyaltyAccount.number )\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::Membership::account",
          "RandL::LoyaltyProgram::memberships",
          "RandL::LoyaltyAccount::number"
        ]
      },
      {
        "operations": {
          "<>": 2,
          "implies": 1
        },
        "name": "invariant_LoyaltyProgram17",
        "body": "\n\tself.participants->forAll( c1 : Customer, c2 : Customer | (c1 <> c2) implies c1.name <> c2.name )\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 5,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::Customer::name",
          "RandL::LoyaltyProgram::participants"
        ]
      },
      {
        "operations": {"<>": 1},
        "name": null,
        "body": "\tc.name <> ''\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RandL::Customer::name"]
      },
      {
        "operations": {"asSet": 1},
        "name": "getServices",
        "body": "\tself.partners->collect( i_ProgramPartner : ProgramPartner | i_ProgramPartner.deliveredServices )->asSet()\n\n",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::LoyaltyProgram::partners",
          "RandL::ProgramPartner::deliveredServices"
        ]
      },
      {
        "operations": {
          "and": 1,
          "isEmpty": 1,
          "implies": 1,
          "=": 2
        },
        "name": "invariant_noAccounts",
        "body": "\n\t(self.partners->collect( i_ProgramPartner : ProgramPartner | i_ProgramPartner.deliveredServices )->forAll( i_Service : Service | (i_Service.pointsEarned = 0) and i_Service.pointsBurned = 0 )) implies self.memberships->collect( i_Membership : Membership | i_Membership.account )->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 5,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "RandL::LoyaltyProgram::memberships",
          "RandL::Membership::account",
          "RandL::LoyaltyProgram::partners",
          "RandL::Service::pointsEarned",
          "RandL::ProgramPartner::deliveredServices",
          "RandL::Service::pointsBurned"
        ]
      },
      {
        "operations": {},
        "name": "invariant_LoyaltyProgram13",
        "body": "\n\tself.memberships->collect( i_Membership : Membership | i_Membership.account )->isUnique( acc : LoyaltyAccount | acc.number )\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::Membership::account",
          "RandL::LoyaltyAccount::number",
          "RandL::LoyaltyProgram::memberships"
        ]
      },
      {
        "operations": {"includes": 1},
        "name": "servicesIncludesP",
        "body": "\tself.partners->collect( i_ProgramPartner : ProgramPartner | i_ProgramPartner.deliveredServices )->includes(s)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::LoyaltyProgram::partners",
          "RandL::ProgramPartner::deliveredServices"
        ]
      },
      {
        "operations": {"isEmpty": 1},
        "name": "invariant_LoyaltyProgram5",
        "body": "\n\tOrderedSet{'apple', 'orange', 'strawberry', 'pear'}->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "StringLiteralExpImpl": 4,
          "CollectionLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {},
        "name": "sortedAccounts",
        "body": "self.memberships->collect( i_Membership : Membership | i_Membership.account )->sortedBy( i_LoyaltyAccount : LoyaltyAccount | i_LoyaltyAccount.number )\n",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::LoyaltyAccount::number",
          "RandL::LoyaltyProgram::memberships",
          "RandL::Membership::account"
        ]
      },
      {
        "operations": {
          "size": 1,
          ">=": 1
        },
        "name": "invariant_minServices",
        "body": "\n\t(self.partners->collect( i_ProgramPartner : ProgramPartner | i_ProgramPartner.deliveredServices )->size()) >= 1\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::LoyaltyProgram::partners",
          "RandL::ProgramPartner::deliveredServices"
        ]
      },
      {
        "operations": {"isEmpty": 1},
        "name": "invariant_LoyaltyProgram6",
        "body": "\n\tSequence{1, 3, 45, 2, 3}->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 5,
          "CollectionLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"isEmpty": 1},
        "name": "invariant_LoyaltyProgram8",
        "body": "\n\tBag{1, 3, 4, 3, 5}->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 5,
          "CollectionLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"includes": 1},
        "name": "getServices",
        "body": "\tif self.partners->includes(pp) then    \n    pp.deliveredServices    \n    else    \nSet{}    \n    endif\n\n",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 3,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::LoyaltyProgram::partners",
          "RandL::ProgramPartner::deliveredServices"
        ]
      },
      {
        "operations": {"isEmpty": 1},
        "name": "invariant_LoyaltyProgram7",
        "body": "\n\tSequence{'ape', 'nut'}->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "StringLiteralExpImpl": 2,
          "CollectionLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "asSet": 1,
          "=": 1
        },
        "name": "getServicesByLevel",
        "body": "self.levels->select( i_ServiceLevel : ServiceLevel | i_ServiceLevel.name = levelName )->collect( i_ServiceLevel : ServiceLevel | i_ServiceLevel.availableServices )->asSet()\n",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::ServiceLevel::availableServices",
          "RandL::ServiceLevel::name",
          "RandL::LoyaltyProgram::levels"
        ]
      },
      {
        "operations": {"<": 1},
        "name": "invariant_LoyaltyProgram19",
        "body": "\n\tself.memberships->collect( i_Membership : Membership | i_Membership.account )->one( i_LoyaltyAccount : LoyaltyAccount | i_LoyaltyAccount.number < 10000 )\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::Membership::account",
          "RandL::LoyaltyAccount::number",
          "RandL::LoyaltyProgram::memberships"
        ]
      },
      {
        "operations": {"includesAll": 1},
        "name": "invariant_knownServiceLevel",
        "body": "\n\tself.levels->includesAll(self.memberships->collect( i_Membership : Membership | i_Membership.currentLevel ))\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::LoyaltyProgram::memberships",
          "RandL::LoyaltyProgram::levels",
          "RandL::Membership::currentLevel"
        ]
      },
      {
        "operations": {
          "and": 3,
          "includes": 1,
          "=": 2,
          "oclIsNew": 1
        },
        "name": null,
        "body": "\t((result.oclIsNew() and result.name = n) and result.dateOfBirth = d) and self.participants->includes(result)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 7,
          "OperationCallExpImpl": 7,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::Customer::dateOfBirth",
          "RandL::Customer::name",
          "RandL::LoyaltyProgram::participants"
        ]
      },
      {
        "operations": {
          "including": 1,
          "=": 1
        },
        "name": null,
        "body": "\tself.participants = self.participants->including(c)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": ["RandL::LoyaltyProgram::participants"]
      },
      {
        "operations": {"includes": 1},
        "name": "servicesIncludesArgS",
        "body": "\tself.levels->collect( i_ServiceLevel : ServiceLevel | i_ServiceLevel.availableServices )->includes(s)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::ServiceLevel::availableServices",
          "RandL::LoyaltyProgram::levels"
        ]
      },
      {
        "operations": {"includes": 1},
        "name": "partnersIncludesP",
        "body": "\tself.partners->includes(p)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RandL::LoyaltyProgram::partners"]
      },
      {
        "operations": {"isEmpty": 1},
        "name": "invariant_LoyaltyProgram4",
        "body": "\n\tSet{'apple', 'orange', 'strawberry'}->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "StringLiteralExpImpl": 3,
          "CollectionLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "including": 1,
          "=": 1
        },
        "name": null,
        "body": "\tself.participants = self.participants->including(c)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": ["RandL::LoyaltyProgram::participants"]
      },
      {
        "operations": {
          "size": 1,
          "and": 1,
          "asSet": 1,
          "isAfter": 1,
          ">": 2
        },
        "name": null,
        "body": "\tlet popularTrans : Set(Transaction) = result->collect( i_ProgramPartner : ProgramPartner | i_ProgramPartner.deliveredServices )->collect( i_Service : Service | i_Service.transactions )->asSet() in (popularTrans->forAll( i_Transaction : Transaction | i_Transaction.date.isAfter(d) )) and (popularTrans->select( i_Transaction : Transaction | i_Transaction.amount > 500.00 )->size()) > 20000\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 8,
          "LetExpImpl": 1,
          "RealLiteralExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "RandL::Service::transactions",
          "RandL::Transaction::date",
          "RandL::ProgramPartner::deliveredServices",
          "RandL::Transaction::amount"
        ]
      }
    ],
    "properties": [
      "sortedAccounts",
      "isSaving"
    ]
  },
  {
    "name": "Service",
    "expressions": [
      {
        "operations": {
          "toUpperCase": 1,
          "=": 1
        },
        "name": "invariant_Service5",
        "body": "\n\t'Anneke'.toUpperCase() = 'ANNEKE'\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "StringLiteralExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "concat": 1,
          "=": 1
        },
        "name": "invariant_Service4",
        "body": "\n\t('Anneke '.concat('and Jos')) = 'Anneke and Jos'\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "StringLiteralExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {"=": 2},
        "name": "invariant_Service3",
        "body": "\n\t('Anneke' = 'Jos') = false\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "StringLiteralExpImpl": 2,
          "BooleanLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "=": 1,
          "substring": 1
        },
        "name": "invariant_Service7",
        "body": "\n\t('Anneke and Jos'.substring(12, 14)) = 'Jos'\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 2,
          "StringLiteralExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "not": 1,
          "implies": 1,
          "=": 1,
          ">": 1
        },
        "name": "invariant_Service1",
        "body": "\n\t(self.pointsEarned > 0) implies not (self.pointsBurned = 0)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 4,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::Service::pointsEarned",
          "RandL::Service::pointsBurned"
        ]
      },
      {
        "operations": {
          "calcPoints": 2,
          "+": 1,
          "=": 1
        },
        "name": null,
        "body": "\tself.calcPoints() = self.calcPoints() + amount\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 4
        },
        "properties": []
      },
      {
        "operations": {
          "size": 1,
          "=": 1
        },
        "name": "invariant_Service2",
        "body": "\n\t'Anneke'.size() = 6\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "toLowerCase": 1,
          "=": 1
        },
        "name": "invariant_Service6",
        "body": "\n\t'Anneke'.toLowerCase() = 'anneke'\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "StringLiteralExpImpl": 2
        },
        "properties": []
      }
    ],
    "properties": []
  },
  {
    "name": "LoyaltyAccount",
    "expressions": [
      {
        "operations": {"=": 1},
        "name": "invariant_transactions",
        "body": "\n\tself.transactions->collect( i_Transaction : Transaction | i_Transaction.points )->exists( p : Integer | p = 500 )\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::LoyaltyAccount::transactions",
          "RandL::Transaction::points"
        ]
      },
      {
        "operations": {},
        "name": "points",
        "body": "\n\t0\n\n",
        "type": "PropertyImpl",
        "constructs": {"IntegerLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {},
        "name": "getCustomerName",
        "body": "\tself.Membership.card.owner.name\n\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "RandL::CustomerCard::owner",
          "RandL::LoyaltyAccount::Membership",
          "RandL::Customer::name",
          "RandL::Membership::card"
        ]
      },
      {
        "operations": {"=": 2},
        "name": "testPostSuggestedName",
        "body": "\tresult = self.points = 0\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RandL::LoyaltyAccount::points"]
      },
      {
        "operations": {
          "size": 1,
          "asSet": 1,
          "=": 1
        },
        "name": "invariant_oneOwner",
        "body": "\n\t(self.transactions->collect( i_Transaction : Transaction | i_Transaction.card )->collect( i_CustomerCard : CustomerCard | i_CustomerCard.owner )->asSet()->size()) = 1\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::CustomerCard::owner",
          "RandL::Transaction::card",
          "RandL::LoyaltyAccount::transactions"
        ]
      },
      {
        "operations": {
          "implies": 1,
          ">": 2
        },
        "name": "invariant_points",
        "body": "\n\t(self.points > 0) implies self.transactions->exists( t : Transaction | t.points > 0 )\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::LoyaltyAccount::points",
          "RandL::LoyaltyAccount::transactions",
          "RandL::Transaction::points"
        ]
      },
      {
        "operations": {"asSet": 1},
        "name": null,
        "body": "\n\tself.transactions->collect( i_Transaction : Transaction | i_Transaction.generatedBy )->asSet()\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::LoyaltyAccount::transactions",
          "RandL::Transaction::generatedBy"
        ]
      },
      {
        "operations": {},
        "name": "transactions",
        "body": "\n\tSet{}\n\n",
        "type": "PropertyImpl",
        "constructs": {"CollectionLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {
          "oclIsTypeOf": 1,
          "sum": 1
        },
        "name": null,
        "body": "\n\tself.transactions->select( i_Transaction : Transaction | i_Transaction.oclIsTypeOf(Earning) )->collect( i_Transaction : Transaction | i_Transaction.points )->sum()\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::LoyaltyAccount::transactions",
          "RandL::Transaction::points"
        ]
      },
      {
        "operations": {},
        "name": "testPreSuggestedName",
        "body": "\ttrue\n\n",
        "type": "ConstraintImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      }
    ],
    "properties": [
      "usedServices",
      "points",
      "totalPointsEarned",
      "transactions"
    ]
  },
  {
    "name": "ProgramPartner",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "=": 1
        },
        "name": "invariant_nrOfParticipants",
        "body": "\n\tself.numberOfCustomers = self.programs->collect( i_LoyaltyProgram : LoyaltyProgram | i_LoyaltyProgram.participants )->size()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::ProgramPartner::programs",
          "RandL::ProgramPartner::numberOfCustomers",
          "RandL::LoyaltyProgram::participants"
        ]
      },
      {
        "operations": {
          "including": 1,
          "oclIsTypeOf": 1
        },
        "name": "getBurningTransactions",
        "body": "self.deliveredServices.transactions->iterate(t : Transaction; resultSet : Set( Transaction) = Set{ } | if t.oclIsTypeOf(Burning) then resultSet->including(t) else resultSet endif)\n",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 6,
          "TypeExpImpl": 1,
          "IterateExpImpl": 1,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::Service::transactions",
          "RandL::ProgramPartner::deliveredServices"
        ]
      },
      {
        "operations": {
          "<>": 1,
          "isEmpty": 1
        },
        "name": "invariant_ProgramPartner1",
        "body": "\n\tself.programs->collect( i_LoyaltyProgram : LoyaltyProgram | i_LoyaltyProgram.partners )->select( p : ProgramPartner | p <> self )->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 4,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::ProgramPartner::programs",
          "RandL::LoyaltyProgram::partners"
        ]
      },
      {
        "operations": {
          "size": 1,
          "asSet": 1,
          "=": 1
        },
        "name": "invariant_nrOfParticipants2",
        "body": "\n\tself.numberOfCustomers = self.programs->collect( i_LoyaltyProgram : LoyaltyProgram | i_LoyaltyProgram.participants )->asSet()->size()\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::ProgramPartner::programs",
          "RandL::ProgramPartner::numberOfCustomers",
          "RandL::LoyaltyProgram::participants"
        ]
      },
      {
        "operations": {
          "oclIsTypeOf": 1,
          "sum": 1,
          "<": 1
        },
        "name": "invariant_totalPointsEarning2",
        "body": "\n\t(self.deliveredServices->collect( i_Service : Service | i_Service.transactions )->select( i_Transaction : Transaction | i_Transaction.oclIsTypeOf(Earning) )->collect( i_Transaction : Transaction | i_Transaction.points )->sum()) < 10000\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 4,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::Service::transactions",
          "RandL::ProgramPartner::deliveredServices",
          "RandL::Transaction::points"
        ]
      },
      {
        "operations": {
          "sum": 1,
          "<": 1
        },
        "name": "invariant_totalPoints",
        "body": "\n\t(self.deliveredServices->collect( i_Service : Service | i_Service.transactions )->collect( i_Transaction : Transaction | i_Transaction.points )->sum()) < 10000\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::Service::transactions",
          "RandL::ProgramPartner::deliveredServices",
          "RandL::Transaction::points"
        ]
      },
      {
        "operations": {
          "oclIsTypeOf": 1,
          "sum": 1,
          "<": 1
        },
        "name": "invariant_totalPointsEarning",
        "body": "\n\t(self.deliveredServices->collect( i_Service : Service | i_Service.transactions )->select( i_Transaction : Transaction | i_Transaction.oclIsTypeOf(Earning) )->collect( i_Transaction : Transaction | i_Transaction.points )->sum()) < 10000\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::Service::transactions",
          "RandL::ProgramPartner::deliveredServices",
          "RandL::Transaction::points"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "Membership",
    "expressions": [
      {
        "operations": {
          "or": 1,
          "isEmpty": 1,
          "oclAsSet": 1,
          "asSet": 1,
          ">=": 1
        },
        "name": "invariant_Membership1",
        "body": "\n\t(self.account.points >= 0) or self.account->asSet()->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::LoyaltyAccount::points",
          "RandL::Membership::account"
        ]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "isEmpty": 1,
          "implies": 1,
          "=": 1
        },
        "name": "invariant_noEarnings",
        "body": "\n\tprograms.partners.deliveredServices->forAll(pointsEarned = 0) implies account->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 4,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "RandL::Membership::programs",
          "RandL::Membership::account",
          "RandL::LoyaltyProgram::partners",
          "RandL::Service::pointsEarned",
          "RandL::ProgramPartner::deliveredServices"
        ]
      },
      {
        "operations": {"includes": 1},
        "name": "invariant_Membership3",
        "body": "\n\tself.programs.levels->includes(self.currentLevel)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::Membership::programs",
          "RandL::LoyaltyProgram::levels",
          "RandL::Membership::currentLevel"
        ]
      },
      {
        "operations": {"includes": 1},
        "name": "invariant_Membership2",
        "body": "\n\tself.participants.cards->collect( i_CustomerCard : CustomerCard | i_CustomerCard.Membership )->includes(self)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::CustomerCard::Membership",
          "RandL::Customer::cards",
          "RandL::Membership::participants"
        ]
      },
      {
        "operations": {"includes": 1},
        "name": "invariant_correctCard",
        "body": "\n\tself.participants.cards->includes(self.card)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::Customer::cards",
          "RandL::Membership::participants",
          "RandL::Membership::card"
        ]
      },
      {
        "operations": {"includes": 1},
        "name": "invariant_Membership5",
        "body": "\n\tself.programs.levels->includes(self.currentLevel)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::Membership::programs",
          "RandL::LoyaltyProgram::levels",
          "RandL::Membership::currentLevel"
        ]
      },
      {
        "operations": {},
        "name": "getCurrentLevelName",
        "body": "self.currentLevel.name\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::ServiceLevel::name",
          "RandL::Membership::currentLevel"
        ]
      },
      {
        "operations": {
          "isEmpty": 1,
          "oclAsSet": 1,
          "asSet": 1
        },
        "name": "invariant_Membership4",
        "body": "\n\tself.account->asSet()->isEmpty()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["RandL::Membership::account"]
      },
      {
        "operations": {
          "and": 1,
          "implies": 2,
          "=": 4
        },
        "name": "invariant_levelAndColor",
        "body": "\n\t((self.currentLevel.name = 'Silver') implies (self.card.color = RandLColor::silver) and self.currentLevel.name = 'Gold') implies self.card.color = RandLColor::gold\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 7,
          "VariableExpImpl": 4,
          "EnumLiteralExpImpl": 2,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 8
        },
        "properties": [
          "RandL::ServiceLevel::name",
          "RandL::Membership::card",
          "RandL::CustomerCard::color",
          "RandL::Membership::currentLevel"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "Transaction",
    "expressions": [
      {
        "operations": {
          "oclIsTypeOf": 1,
          "=": 1
        },
        "name": "invariant_Transaction2",
        "body": "\n\tself.oclIsTypeOf(Transaction) = true\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "=": 1
        },
        "name": "invariant_Transaction4",
        "body": "\n\tself.oclIsKindOf(Burning) = false\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {"=": 1},
        "name": null,
        "body": "\tresult = self.card.Membership.programs\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::Membership::programs",
          "RandL::CustomerCard::Membership",
          "RandL::Transaction::card"
        ]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "=": 1
        },
        "name": "invariant_Transaction1",
        "body": "\n\tself.oclIsKindOf(Transaction) = true\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "oclIsTypeOf": 1,
          "=": 1
        },
        "name": "invariant_Transaction3",
        "body": "\n\tself.oclIsTypeOf(Burning) = false\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": []
      }
    ],
    "properties": []
  },
  {
    "name": "TransactionReportLine",
    "expressions": [
      {
        "operations": {},
        "name": null,
        "body": "\n\tself.transaction.generatedBy.partner.name\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "RandL::ProgramPartner::name",
          "RandL::Service::partner",
          "RandL::Transaction::generatedBy",
          "RandL::TransactionReportLine::transaction"
        ]
      },
      {
        "operations": {},
        "name": null,
        "body": "\n\tself.transaction.points\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::TransactionReportLine::transaction",
          "RandL::Transaction::points"
        ]
      },
      {
        "operations": {},
        "name": null,
        "body": "\n\tself.transaction.generatedBy.description\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "RandL::Service::description",
          "RandL::Transaction::generatedBy",
          "RandL::TransactionReportLine::transaction"
        ]
      },
      {
        "operations": {},
        "name": null,
        "body": "\n\tself.transaction.date\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::Transaction::date",
          "RandL::TransactionReportLine::transaction"
        ]
      },
      {
        "operations": {},
        "name": null,
        "body": "\n\tself.transaction.amount\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "RandL::Transaction::amount",
          "RandL::TransactionReportLine::transaction"
        ]
      }
    ],
    "properties": [
      "serviceDesc",
      "points",
      "date",
      "amount",
      "partnerName"
    ]
  }
]
