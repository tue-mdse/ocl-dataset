[
  {
    "name": "Definition",
    "expressions": [],
    "properties": [
      "Usage",
      "name"
    ]
  },
  {
    "name": "Usage",
    "expressions": [],
    "properties": ["boundDefinition"]
  },
  {
    "name": "Statement",
    "expressions": [
      {
        "operations": {
          "not": 1,
          "union": 1,
          "asSet": 1,
          "=": 1
        },
        "name": "addDeclarationsWithNewNames",
        "body": "inner->union(outer->select(o | not inner->exists(i | i.name = o.name))->asSet())",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 4,
          "PropertyCallExpImpl": 2
        },
        "properties": ["NestedScopes::Definition::name"]
      },
      {
        "operations": {
          "getDeclarationsInScope": 2,
          "at": 3,
          "oclIsKindOf": 1,
          "oclAsSet": 2,
          "addDeclarationsWithNewNames": 1,
          "+": 3,
          "asSet": 1,
          "notEmpty": 1,
          "oclAsType": 1,
          "-": 3,
          "indexOf": 1,
          ">": 1
        },
        "name": "getDeclarationsInScope",
        "body": "if self.block->notEmpty() then\n  let pos:Integer = self.block.statementsInBlock->indexOf(self) in\n  if pos > 1 then\n    self.addDeclarationsWithNewNames(\n    if self.block.statementsInBlock->at(-1+pos).oclIsKindOf(Definition) then\n      self.block.statementsInBlock->at(-1+pos).oclAsType(Definition)->asSet()\n    else\n      Set{}\n    endif,\n    self.block.statementsInBlock->at(-1+pos).getDeclarationsInScope())\n  else\n    -- first statement in block; consider block itself\n    self.block.getDeclarationsInScope()\n  endif\nelse\n       Set{}\nendif\n\n\n\n",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 20,
          "VariableExpImpl": 12,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 4,
          "TypeExpImpl": 2,
          "CollectionLiteralExpImpl": 2,
          "IfExpImpl": 3,
          "PropertyCallExpImpl": 10
        },
        "properties": [
          "NestedScopes::Block::statementsInBlock",
          "NestedScopes::Statement::block"
        ]
      }
    ],
    "properties": ["block"]
  },
  {
    "name": "Block",
    "expressions": [],
    "properties": ["statementsInBlock"]
  }
]
