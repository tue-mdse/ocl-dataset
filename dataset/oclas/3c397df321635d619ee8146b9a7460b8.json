[
  {
    "name": "Link",
    "expressions": [{
      "operations": {
        "and": 1,
        "oclAsSet": 1,
        "=": 2
      },
      "name": "LinkKindIsInParent",
      "body": "kind->closure(parent)->exists(k |\n\t\t\t\tk.term = 'link' and k.scheme = 'http://schemas.ogf.org/occi/core#')",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "OperationCallExpImpl": 4,
        "VariableExpImpl": 4,
        "StringLiteralExpImpl": 2,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "occi::Category::scheme",
        "occi::Category::term",
        "occi::Kind::parent",
        "occi::Entity::kind"
      ]
    }],
    "properties": [
      "source",
      "target"
    ]
  },
  {
    "name": "Constraint",
    "expressions": [],
    "properties": [
      "name",
      "description",
      "Type",
      "body"
    ]
  },
  {
    "name": "Extension",
    "expressions": [
      {
        "operations": {"=": 1},
        "name": "KindsSchemeValid",
        "body": "kinds->forAll(k | k.scheme = self.scheme)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "occi::Extension::scheme",
          "occi::Category::scheme",
          "occi::Extension::kinds"
        ]
      },
      {
        "operations": {
          "or": 1,
          "includes": 1,
          "=": 1,
          "oclContainer": 1
        },
        "name": "MixinDependsLocalOrImported",
        "body": "mixins.depends->forAll(let extension = oclContainer()\n\t\t\tin extension = self or import->includes(extension))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 7,
          "LetExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "occi::Extension::mixins",
          "occi::Extension::import",
          "occi::Mixin::depends"
        ]
      },
      {
        "operations": {
          "size": 2,
          "-": 2,
          "=": 1,
          "substring": 2
        },
        "name": "MixinsSchemeValid",
        "body": "mixins->forAll(m | m.scheme.substring(1, scheme.size() - 1) = scheme.substring(1,\n\t\t\t\t\tscheme.size() - 1))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 7,
          "IntegerLiteralExpImpl": 4,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "occi::Extension::scheme",
          "occi::Category::scheme",
          "occi::Extension::mixins"
        ]
      },
      {
        "operations": {
          "or": 1,
          "includes": 1,
          "=": 1,
          "oclContainer": 1
        },
        "name": "MixinAppliesLocalOrImported",
        "body": "mixins.applies->forAll(let extension = oclContainer()\n\t\t\tin extension = self or import->includes(extension))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 7,
          "OperationCallExpImpl": 4,
          "LetExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "occi::Extension::mixins",
          "occi::Mixin::applies",
          "occi::Extension::import"
        ]
      },
      {
        "operations": {
          "<>": 1,
          "or": 1,
          "includes": 1,
          "implies": 1,
          "=": 1,
          "oclContainer": 1
        },
        "name": "KindParentLocalOrImported",
        "body": "kinds->forAll(parent <> null implies let parentExtension = parent.oclContainer()\n\t\t\tin parentExtension = self or import->includes(parentExtension))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 7,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "occi::Extension::kinds",
          "occi::Extension::import",
          "occi::Kind::parent"
        ]
      },
      {
        "operations": {"allInstances": 1},
        "name": "SchemeUnique",
        "body": "Extension.allInstances()->isUnique(scheme)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["occi::Extension::scheme"]
      },
      {
        "operations": {
          "intersection": 1,
          "isEmpty": 1
        },
        "name": "TermUnicity",
        "body": "kinds.term->intersection(mixins.term)->isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "occi::Extension::mixins",
          "occi::Extension::kinds",
          "occi::Category::term"
        ]
      }
    ],
    "properties": [
      "scheme",
      "Extension",
      "description",
      "mixins",
      "kinds",
      "name",
      "specification",
      "import",
      "Configuration",
      "types"
    ]
  },
  {
    "name": "ArrayType",
    "expressions": [],
    "properties": ["type"]
  },
  {
    "name": "Transition",
    "expressions": [],
    "properties": [
      "source",
      "target",
      "action"
    ]
  },
  {
    "name": "Scheme",
    "expressions": [],
    "properties": []
  },
  {
    "name": "FSM",
    "expressions": [{
      "operations": {},
      "name": "AttributeTypeMustBeEEnum",
      "body": "attribute.type.oclIsTypeOf(ecore::EEnum)",
      "type": "ConstraintImpl",
      "constructs": {},
      "properties": []
    }],
    "properties": [
      "ownedState",
      "attribute",
      "Kind"
    ]
  },
  {
    "name": "Resource",
    "expressions": [{
      "operations": {
        "and": 1,
        "oclAsSet": 1,
        "=": 2
      },
      "name": "ResourceKindIsInParent",
      "body": "kind->closure(parent)->exists(k |\n\t\t\t\tk.term = 'resource' and k.scheme = 'http://schemas.ogf.org/occi/core#')",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "OperationCallExpImpl": 4,
        "VariableExpImpl": 4,
        "StringLiteralExpImpl": 2,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "occi::Category::scheme",
        "occi::Kind::parent",
        "occi::Category::term",
        "occi::Entity::kind"
      ]
    }],
    "properties": [
      "links",
      "rlinks",
      "summary",
      "Configuration"
    ]
  },
  {
    "name": "MixinBase",
    "expressions": [],
    "properties": [
      "mixin",
      "entity"
    ]
  },
  {
    "name": "OCL",
    "expressions": [],
    "properties": []
  },
  {
    "name": "RecordType",
    "expressions": [],
    "properties": ["recordFiledDeclarations"]
  },
  {
    "name": "String",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Type",
    "expressions": [
      {
        "operations": {},
        "name": "ActionTermUnicity",
        "body": "actions->isUnique(term)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "occi::Type::actions",
          "occi::Category::term"
        ]
      },
      {
        "operations": {},
        "name": "ConstraintNameUnique",
        "body": "constraints->isUnique(name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "occi::Constraint::name",
          "occi::Type::constraints"
        ]
      }
    ],
    "properties": [
      "actions",
      "constraints"
    ]
  },
  {
    "name": "Action",
    "expressions": [{
      "operations": {
        "size": 1,
        "+": 3,
        "oclAsType": 1,
        "=": 1,
        "-": 1,
        "substring": 1,
        "oclContainer": 1
      },
      "name": "CorrectScheme",
      "body": "let category = oclContainer().oclAsType(Category)\n\t\t\tin scheme = category.scheme.substring(1, category.scheme.size() - 1) + '/' + category.term + '/action#'",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 9,
        "VariableExpImpl": 5,
        "LetExpImpl": 1,
        "IntegerLiteralExpImpl": 2,
        "StringLiteralExpImpl": 2,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "occi::Category::scheme",
        "occi::Category::term"
      ]
    }],
    "properties": [
      "Type",
      "Transition"
    ]
  },
  {
    "name": "RecordFieldDeclaration",
    "expressions": [],
    "properties": [
      "name",
      "RecordType",
      "type"
    ]
  },
  {
    "name": "Mixin",
    "expressions": [
      {
        "operations": {"excludesAll": 1},
        "name": "AttributesNameNotAlreadyDefinedInDepends",
        "body": "attributes.name->excludesAll(depends->closure(depends).attributes.name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "occi::Category::attributes",
          "occi::Attribute::name",
          "occi::Mixin::depends"
        ]
      },
      {
        "operations": {
          "allInstances": 1,
          "includes": 1
        },
        "name": "entities",
        "body": "Entity.allInstances()->select(parts.mixin->includes(self))",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "occi::MixinBase::mixin",
          "occi::Entity::parts"
        ]
      },
      {
        "operations": {
          "size": 2,
          "oclIsTypeOf": 1,
          "-": 2,
          "=": 1,
          "oclAsType": 1,
          "substring": 2,
          "oclContainer": 1
        },
        "name": "CorrectScheme",
        "body": "\n\n\t\t\t/* Previously let ownerScheme = owner.oclAsType(Extension).scheme in scheme.substring(1,ownerScheme.size()-1) = ownerScheme.substring(1,ownerScheme.size()-1) */\n\t\t\tlet owner = self.oclContainer()\n\t\t\tin if owner.oclIsTypeOf(Extension)\n\t\t\t\tthen\n\t\t\tlet ownerScheme = owner.oclAsType(Extension).scheme\n\t\tin scheme.substring(1, ownerScheme.size() - 1) = ownerScheme.substring(1, ownerScheme.size() - 1) else true\n\t\t\tendif",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 10,
          "VariableExpImpl": 7,
          "LetExpImpl": 2,
          "IntegerLiteralExpImpl": 4,
          "TypeExpImpl": 2,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 2,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "occi::Extension::scheme",
          "occi::Category::scheme"
        ]
      },
      {
        "operations": {"excludes": 1},
        "name": "NoCyclicInheritance",
        "body": "depends->closure(depends)->excludes(self)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": ["occi::Mixin::depends"]
      }
    ],
    "properties": [
      "applies",
      "Mixin",
      "entities",
      "Configuration",
      "MixinBase",
      "Entity",
      "Extension",
      "depends"
    ]
  },
  {
    "name": "URI",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Attribute",
    "expressions": [],
    "properties": [
      "FSM",
      "default",
      "type",
      "name",
      "description",
      "mutable",
      "Category",
      "required",
      "multiple_values"
    ]
  },
  {
    "name": "Name",
    "expressions": [],
    "properties": []
  },
  {
    "name": "AttributeState",
    "expressions": [],
    "properties": [
      "value",
      "name",
      "Entity"
    ]
  },
  {
    "name": "Category",
    "expressions": [
      {
        "operations": {
          "toLowerCase": 1,
          "oclAsType": 1
        },
        "name": "term",
        "body": "self.name.toLowerCase().oclAsType(ecore::EString)",
        "type": "PropertyImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["occi::Category::name"]
      },
      {
        "operations": {
          "size": 2,
          "=": 1,
          "substring": 1
        },
        "name": "SchemeEndsWithSharp",
        "body": "scheme.substring(scheme.size(), scheme.size()) = '#'",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": ["occi::Category::scheme"]
      },
      {
        "operations": {
          "allInstances": 1,
          "+": 1
        },
        "name": "IdentityUnique",
        "body": "Category.allInstances()->isUnique(scheme + term)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "occi::Category::scheme",
          "occi::Category::term"
        ]
      },
      {
        "operations": {},
        "name": "AttributesNameUnique",
        "body": "attributes->isUnique(name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "occi::Category::attributes",
          "occi::Attribute::name"
        ]
      }
    ],
    "properties": [
      "scheme",
      "attributes",
      "title",
      "name",
      "term"
    ]
  },
  {
    "name": "Configuration",
    "expressions": [
      {
        "operations": {
          "oclIsTypeOf": 1,
          "includes": 2,
          "oclAsType": 1,
          "oclContainer": 1
        },
        "name": "AllResourcesMixinsInUse",
        "body": "\n\n\t\t/* Previously use->includesAll(resources.mixins.oclContainer()) */\n\t\t\tresources.parts.mixin->forAll(mo |\n\t\t\tlet mixinOwner = mo.oclContainer()\n\t\t\tin if mixinOwner.oclIsTypeOf(Extension)\n\t\t\t\tthen self.use->includes(mixinOwner.oclAsType(Extension)) else self.mixins->includes(mo) endif)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 9,
          "OperationCallExpImpl": 5,
          "LetExpImpl": 1,
          "TypeExpImpl": 2,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "occi::Configuration::mixins",
          "occi::MixinBase::mixin",
          "occi::Entity::parts",
          "occi::Configuration::resources",
          "occi::Configuration::use"
        ]
      },
      {
        "operations": {
          "includesAll": 1,
          "oclContainer": 1
        },
        "name": "AllResourcesLinksKindsInUse",
        "body": "use->includesAll(resources.links.kind.oclContainer())",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "occi::Resource::links",
          "occi::Configuration::resources",
          "occi::Configuration::use",
          "occi::Entity::kind"
        ]
      },
      {
        "operations": {
          "includesAll": 1,
          "oclContainer": 1
        },
        "name": "AllResourcesKindsInUse",
        "body": "use->includesAll(resources.kind.oclContainer())",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 4,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "occi::Configuration::resources",
          "occi::Configuration::use",
          "occi::Entity::kind"
        ]
      },
      {
        "operations": {
          "=": 1,
          "oclContainer": 1
        },
        "name": "AllResourcesLinksTargetsInConfiguration",
        "body": "resources.links.target->forAll(r | r.oclContainer() = self)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "occi::Resource::links",
          "occi::Configuration::resources",
          "occi::Link::target"
        ]
      },
      {
        "operations": {
          "and": 2,
          "isEmpty": 3
        },
        "name": "AllMixinsAreTags",
        "body": "mixins->forAll(attributes->isEmpty() and actions->isEmpty() and depends->isEmpty())",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 4,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "occi::Configuration::mixins",
          "occi::Category::attributes",
          "occi::Type::actions",
          "occi::Mixin::depends"
        ]
      },
      {
        "operations": {
          "oclIsTypeOf": 1,
          "includes": 2,
          "oclAsType": 1,
          "oclContainer": 1
        },
        "name": "AllResourcesLinksMixinsInUse",
        "body": "\n\n\t\t/* Previously use->includesAll(resources.links.mixins.oclContainer()) */\n\t\t\tresources.links.parts.mixin->forAll(mo |\n\t\t\tlet mixinOwner = mo.oclContainer()\n\t\t\tin if mixinOwner.oclIsTypeOf(Extension)\n\t\t\t\tthen self.use->includes(mixinOwner.oclAsType(Extension)) else self.mixins->includes(mo) endif)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 10,
          "LetExpImpl": 1,
          "TypeExpImpl": 2,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "occi::Configuration::mixins",
          "occi::Resource::links",
          "occi::Configuration::resources",
          "occi::MixinBase::mixin",
          "occi::Entity::parts",
          "occi::Configuration::use"
        ]
      }
    ],
    "properties": [
      "description",
      "mixins",
      "location",
      "resources",
      "use"
    ]
  },
  {
    "name": "State",
    "expressions": [{
      "operations": {"=": 1},
      "name": "StateLiteralAlreadyDefinedInFSMAttributeType",
      "body": "owningFSM.attribute.type=self.sliteral.eEnum",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "occi::Attribute::type",
        "occi::FSM::attribute",
        "occi::State::owningFSM"
      ]
    }],
    "properties": [
      "outgoingTransition",
      "isFinal",
      "isInitial",
      "incomingTransition",
      "owningFSM",
      "sliteral"
    ]
  },
  {
    "name": "Boolean",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Kind",
    "expressions": [
      {
        "operations": {
          "allInstances": 1,
          "=": 1
        },
        "name": "entities",
        "body": "Entity.allInstances()->select(kind = self)",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["occi::Entity::kind"]
      },
      {
        "operations": {
          "excludesAll": 1,
          "oclAsSet": 1
        },
        "name": "AttributesNameNotAlreadyDefinedInParent",
        "body": "attributes.name->excludesAll(parent->closure(parent).attributes.name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "occi::Category::attributes",
          "occi::Attribute::name",
          "occi::Kind::parent"
        ]
      },
      {
        "operations": {
          "=": 1,
          "oclAsType": 1,
          "oclContainer": 1
        },
        "name": "CorrectScheme",
        "body": "scheme = self.oclContainer().oclAsType(Extension).scheme",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "occi::Extension::scheme",
          "occi::Category::scheme"
        ]
      },
      {
        "operations": {
          "excludes": 1,
          "oclAsSet": 1
        },
        "name": "NoCyclicInheritance",
        "body": "parent->closure(parent)->excludes(self)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": ["occi::Kind::parent"]
      },
      {
        "operations": {
          "and": 2,
          "oclAsSet": 1,
          "=": 3
        },
        "name": "EntityKindIsRootParent",
        "body": "self->closure(parent)->exists(k |\n\t\t\t\t\tk.term = 'entity' and k.scheme = 'http://schemas.ogf.org/occi/core#' and k.parent = null)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 5,
          "NullLiteralExpImpl": 1,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "occi::Category::scheme",
          "occi::Kind::parent",
          "occi::Category::term"
        ]
      }
    ],
    "properties": [
      "entities",
      "Extension",
      "Kind",
      "Entity",
      "Mixin",
      "parent",
      "fsm"
    ]
  },
  {
    "name": "Entity",
    "expressions": [
      {
        "operations": {},
        "name": "AttributesNameUnique",
        "body": "attributes->isUnique(name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "occi::AttributeState::name",
          "occi::Entity::attributes"
        ]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "includes": 1,
          "notEmpty": 1,
          "implies": 1
        },
        "name": "KindCompatibleWithOneAppliesOfEachMixin",
        "body": "parts.mixin->forAll(m |\n\t\t\t\tm.applies->notEmpty() implies m.applies->exists(k | kind->closure(parent)->includes(k)))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "VariableExpImpl": 7,
          "OperationCallExpImpl": 4,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "occi::Mixin::applies",
          "occi::Entity::parts",
          "occi::MixinBase::mixin",
          "occi::Kind::parent",
          "occi::Entity::kind"
        ]
      },
      {
        "operations": {"asSet": 1},
        "name": "mixins",
        "body": "parts.mixin->asSet()",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "occi::Entity::parts",
          "occi::MixinBase::mixin"
        ]
      },
      {
        "operations": {"allInstances": 1},
        "name": "IdUnique",
        "body": "Entity.allInstances()->isUnique(id)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["occi::Entity::id"]
      }
    ],
    "properties": [
      "Mixin",
      "id",
      "location",
      "parts",
      "mixins",
      "title",
      "Kind",
      "attributes",
      "kind"
    ]
  },
  {
    "name": "AttributeName",
    "expressions": [],
    "properties": []
  }
]
