[
  {
    "name": "EGenericType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Schema",
    "expressions": [{
      "operations": {
        "<>": 2,
        "size": 1,
        "implies": 1,
        ">": 1
      },
      "name": "relationNameUnique",
      "body": "if (self.ScontainsRelations -> size() > 0) then\n\t\t\tself.ScontainsRelations -> forAll(r1,r2 | r1 <> r2 implies r1.name <> r2.name)\n\t\telse\n\t\t\ttrue\n\t\tendif",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 6,
        "OperationCallExpImpl": 5,
        "IntegerLiteralExpImpl": 1,
        "IfExpImpl": 1,
        "PropertyCallExpImpl": 4,
        "BooleanLiteralExpImpl": 1
      },
      "properties": [
        "gmf_relational_model::Schema::ScontainsRelations",
        "gmf_relational_model::Relation::name"
      ]
    }],
    "properties": [
      "ScontainsRelations",
      "ScontainsLinksFK"
    ]
  },
  {
    "name": "EDMPolicy",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Relation",
    "expressions": [
      {
        "operations": {
          "not": 1,
          "oclIsUndefined": 1
        },
        "name": "relationNameDefined",
        "body": "not self.name.oclIsUndefined()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["gmf_relational_model::Relation::name"]
      },
      {
        "operations": {
          "not": 1,
          "isEmpty": 1
        },
        "name": "relationHasPK",
        "body": "not self.hasPK -> isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["gmf_relational_model::Relation::hasPK"]
      },
      {
        "operations": {
          "<>": 2,
          "size": 1,
          "implies": 1,
          ">": 1
        },
        "name": "attributeNameUnique",
        "body": "if (self.containsAttributes -> size() > 0) then\n\t\t\tself.containsAttributes -> forAll(a1,a2 | a1 <> a2 implies a1.name <> a2.name)\n\t\telse\n\t\t\ttrue\n\t\tendif",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 6,
          "IntegerLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 4,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "gmf_relational_model::Relation::containsAttributes",
          "gmf_relational_model::Attribute::name"
        ]
      },
      {
        "operations": {
          "size": 1,
          ">=": 1
        },
        "name": "almostOneAttribute",
        "body": "self.containsAttributes -> size() >= 1",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["gmf_relational_model::Relation::containsAttributes"]
      }
    ],
    "properties": [
      "name",
      "containsAttributes",
      "hasPK",
      "isContained",
      "LinkFK"
    ]
  },
  {
    "name": "Attribute",
    "expressions": [
      {
        "operations": {
          "not": 1,
          "oclIsUndefined": 1
        },
        "name": "attributeNameDefined",
        "body": "not self.name.oclIsUndefined()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["gmf_relational_model::Attribute::name"]
      },
      {
        "operations": {
          "oclIsUndefined": 1,
          "and": 1
        },
        "name": "pkWellFormed",
        "body": "\n\t\t\tif (self.isPK.oclIsUndefined())then\n\t\t\t\ttrue\n\t\t\telse\n\t\t\t\tif (self.isNN and self.isUN)then\n\t\t\t\t\ttrue\n\t\t\t\telse\n\t\t\t\t\tfalse\n\t\t\t\tendif\n\t\t\tendif",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "IfExpImpl": 2,
          "PropertyCallExpImpl": 3,
          "BooleanLiteralExpImpl": 3
        },
        "properties": [
          "gmf_relational_model::Attribute::isUN",
          "gmf_relational_model::Attribute::isPK",
          "gmf_relational_model::Attribute::isNN"
        ]
      },
      {
        "operations": {"<>": 1},
        "name": "undefinedType",
        "body": "self.type <>  EGenericType::UNDEFINED",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "EnumLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["gmf_relational_model::Attribute::type"]
      }
    ],
    "properties": [
      "type",
      "isUN",
      "labelWidth",
      "isContained",
      "isPK",
      "isFK",
      "name",
      "isNN",
      "pkReference"
    ]
  },
  {
    "name": "LinkFK",
    "expressions": [
      {
        "operations": {
          "not": 1,
          "oclIsUndefined": 1,
          "or": 1,
          "size": 1,
          ">": 1
        },
        "name": "unCompleteLink",
        "body": "\n\t\tif(((self.target.oclIsUndefined())or not(self.source -> size() > 0)))then\n\t\t\tfalse\n\t\telse\n\t\t\ttrue\n\t\tendif",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 5,
          "IntegerLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 2,
          "BooleanLiteralExpImpl": 2
        },
        "properties": [
          "gmf_relational_model::LinkFK::target",
          "gmf_relational_model::LinkFK::source"
        ]
      },
      {
        "operations": {
          "<>": 1,
          "oclIsUndefined": 1,
          "size": 1,
          "=": 1,
          ">": 1
        },
        "name": "invalidTargetRelation",
        "body": "\n\t\tif(self.target.oclIsUndefined())then\n\t\t\tfalse\n\t\telse\n\t\t\tif (self.target.containsAttributes -> size()>0)then\n\t\t\t\tif (self.target.containsAttributes -> exists(isPK <> null))then\n\t\t\t\t\ttrue\n\t\t\t\telse\n\t\t\t\t\tif (self.target.containsAttributes -> exists(isUN = true))then\n\t\t\t\t\t\ttrue\n\t\t\t\t\telse\n\t\t\t\t\t\tfalse\n\t\t\t\t\tendif\n\t\t\t\tendif\n\t\t\telse\n\t\t\t\tfalse\n\t\t\tendif\n\t\tendif",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 5,
          "NullLiteralExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "IfExpImpl": 4,
          "BooleanLiteralExpImpl": 6,
          "PropertyCallExpImpl": 9
        },
        "properties": [
          "gmf_relational_model::Attribute::isUN",
          "gmf_relational_model::LinkFK::target",
          "gmf_relational_model::Attribute::isPK",
          "gmf_relational_model::Relation::containsAttributes"
        ]
      }
    ],
    "properties": [
      "target",
      "delete",
      "name",
      "modify",
      "source",
      "Schema"
    ]
  }
]
