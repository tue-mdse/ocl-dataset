[
  {
    "name": "IfElse",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "=": 1
        },
        "name": "ifElseMustHaveOneIncomingTask",
        "body": "\n\t\t\tself.previousTasks->size() = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["Engine::Transition::previousTasks"]
      },
      {
        "operations": {
          "size": 1,
          "=": 2
        },
        "name": "noOutReferencesToStart",
        "body": "\n\t\t\tself.tasks->select(t | t.start = true)->size() = 0",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "BooleanLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "Engine::Task::start",
          "Engine::IfElse::tasks"
        ]
      }
    ],
    "properties": ["tasks"]
  },
  {
    "name": "WaitForOne",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "=": 2
        },
        "name": "noOutReferencesToStart",
        "body": "\n\t\t\tself.task->select(t | t.start = true)->size() = 0",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "Engine::Task::start",
          "Engine::WaitForOne::task"
        ]
      },
      {
        "operations": {
          "size": 1,
          ">": 1
        },
        "name": "waitForOneMustHaveTwoIncomingTasks",
        "body": "\n\t\t\tself.previousTasks->size() > 1",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["Engine::Transition::previousTasks"]
      }
    ],
    "properties": ["task"]
  },
  {
    "name": "Transition",
    "expressions": [],
    "properties": ["previousTasks"]
  },
  {
    "name": "Split",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "=": 1
        },
        "name": "splitMustHaveOneIncomingTask",
        "body": "\n\t\t\tself.previousTasks->size() = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["Engine::Transition::previousTasks"]
      },
      {
        "operations": {
          "size": 1,
          "=": 2
        },
        "name": "noOutReferencesToStart",
        "body": "\n\t\t\tself.tasks->select(t | t.start = true)->size() = 0",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "Engine::Task::start",
          "Engine::Split::tasks"
        ]
      }
    ],
    "properties": ["tasks"]
  },
  {
    "name": "Simple",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "=": 2
        },
        "name": "noOutReferencesToStart",
        "body": "\n\t\t\tself.task->select(t | t.start = true)->size() = 0",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "Engine::Task::start",
          "Engine::Simple::task"
        ]
      },
      {
        "operations": {
          "size": 1,
          "=": 1
        },
        "name": "simpleMustHaveOneIncomingTask",
        "body": "\n\t\t\tself.previousTasks->size() = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["Engine::Transition::previousTasks"]
      }
    ],
    "properties": ["task"]
  },
  {
    "name": "TaskState",
    "expressions": [],
    "properties": []
  },
  {
    "name": "User",
    "expressions": [],
    "properties": [
      "groups",
      "name",
      "MainSystem"
    ]
  },
  {
    "name": "Switch",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "=": 1
        },
        "name": "switchMustHaveOneIncomingTask",
        "body": "\n\t\t\tself.previousTasks->size() = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["Engine::Transition::previousTasks"]
      },
      {
        "operations": {
          "size": 1,
          "=": 2
        },
        "name": "noOutReferencesToStart",
        "body": "\n\t\t\tself.tasks->select(t | t.start = true)->size() = 0",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "Engine::Task::start",
          "Engine::Switch::tasks"
        ]
      }
    ],
    "properties": ["tasks"]
  },
  {
    "name": "Node",
    "expressions": [{
      "operations": {
        "oclIsUndefined": 1,
        "=": 1
      },
      "name": "nameMustBePresent",
      "body": "\n\t\t\tself.name.oclIsUndefined() = false ",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 2,
        "BooleanLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["Engine::Node::name"]
    }],
    "properties": [
      "Workflow",
      "name"
    ]
  },
  {
    "name": "Workflow",
    "expressions": [
      {
        "operations": {
          "<>": 2,
          "oclIsKindOf": 1,
          "implies": 1
        },
        "name": "uniqeNamesForTasks",
        "body": "\n\t\t\tself.nodes->select(t | t.oclIsKindOf(Task))->forAll(p1, p2 | p1 <> p2 implies p1.name <> p2.name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 4,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "Engine::Workflow::nodes",
          "Engine::Node::name"
        ]
      },
      {
        "operations": {
          "size": 2,
          "oclIsKindOf": 12,
          "union": 10,
          "asSet": 6,
          "=": 1
        },
        "name": "onlyOneTransitionAllowedToReferenceSameTask",
        "body": "\n\t\t\tlet allRefs : Bag = self.nodes->select(t| t.oclIsKindOf(Split))->collect(s: Split | s.tasks)->\n\t\t\t\t\t\t\t\tunion(self.nodes->select(t| t.oclIsKindOf(Merge))->collect(m: Merge | m.task))->\n\t\t\t\t\t\t\t\tunion(self.nodes->select(t| t.oclIsKindOf(Switch))->collect(s: Switch | s.tasks))->\n\t\t\t\t\t\t\t\tunion(self.nodes->select(t| t.oclIsKindOf(IfElse))->collect(i: IfElse | i.tasks))->\n\t\t\t\t\t\t\t\tunion(self.nodes->select(t| t.oclIsKindOf(WaitForOne))->collect(w: WaitForOne | w.task))->\n\t\t\t\t\t\t\t\tunion(self.nodes->select(t| t.oclIsKindOf(Simple))->collect(s: Simple | s.task)),\t\t\t\t\t\t\t\t\n\t\t\tuniqueRef : Set = self.nodes->select(t| t.oclIsKindOf(Split))->collect(s: Split | s.tasks)->asSet()->\n\t\t\t\t\t\t\t\tunion(self.nodes->select(t| t.oclIsKindOf(Merge))->collect(m: Merge | m.task)->asSet())->\n\t\t\t\t\t\t\t\tunion(self.nodes->select(t| t.oclIsKindOf(Switch))->collect(s: Switch | s.tasks)->asSet())->\n\t\t\t\t\t\t\t\tunion(self.nodes->select(t| t.oclIsKindOf(IfElse))->collect(i: IfElse | i.tasks)->asSet())->\n\t\t\t\t\t\t\t\tunion(self.nodes->select(t| t.oclIsKindOf(WaitForOne))->collect(w: WaitForOne | w.task)->asSet())->\n\t\t\t\t\t\t\t\tunion(self.nodes->select(t| t.oclIsKindOf(Simple))->collect(s: Simple | s.task)->asSet())\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tin\n\t\t\t\t\t\t uniqueRef->size() = allRefs->size()",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 24,
          "OperationCallExpImpl": 31,
          "VariableExpImpl": 38,
          "LetExpImpl": 2,
          "TypeExpImpl": 12,
          "PropertyCallExpImpl": 24
        },
        "properties": [
          "Engine::Merge::task",
          "Engine::Workflow::nodes",
          "Engine::Simple::task",
          "Engine::WaitForOne::task",
          "Engine::Switch::tasks",
          "Engine::IfElse::tasks",
          "Engine::Split::tasks"
        ]
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1,
          "=": 2
        },
        "name": "startExistsOnce",
        "body": "\n\t\t\tself.nodes->select(n| n.oclIsKindOf(Task))->select(t: Task | t.start = true)->size() = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "BooleanLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "Engine::Task::start",
          "Engine::Workflow::nodes"
        ]
      },
      {
        "operations": {
          "size": 4,
          "oclIsKindOf": 4,
          "sum": 2,
          "+": 1,
          "=": 1,
          "-": 1
        },
        "name": "numberOfOutgoingFromSplitPlusTheDifferencesBetweenNumberOfMergesAndSplitsEqualsNumberOfIngoingToMerge",
        "body": "\n\t\t\tlet numberOfSplits : Integer = self.nodes->select(t| t.oclIsKindOf(Split))->size(),\n\t\t\tnumberOfMerges : Integer = self.nodes->select(t| t.oclIsKindOf(Merge))->size(),\n\t\t\tnumberOfOutgoingSplits : Integer = self.nodes->select(t| t.oclIsKindOf(Split))->collect(s: Split | s.tasks->size())->sum(),\n\t\t\tnumberOfIngoingMerge : Integer = self.nodes->select(t| t.oclIsKindOf(Merge))->collect(m: Merge | m.previousTasks->size())->sum() in\n\t\t\t\tnumberOfIngoingMerge = numberOfOutgoingSplits + numberOfMerges - numberOfSplits",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 6,
          "VariableExpImpl": 14,
          "OperationCallExpImpl": 13,
          "LetExpImpl": 4,
          "TypeExpImpl": 4,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "Engine::Workflow::nodes",
          "Engine::Transition::previousTasks",
          "Engine::Split::tasks"
        ]
      },
      {
        "operations": {
          "size": 6,
          "oclIsKindOf": 6,
          "sum": 3,
          "+": 2,
          "-": 2,
          "=": 1
        },
        "name": "numberOfOutgoingFromSwitchAndIfElsePlusTheDifferencesBetweenNumberOfWaitForOneAndIfElseMinusSwitchesEqualsNumberOfIngoingToWaitForOne",
        "body": "\n\t\t\tlet numberOfIfElse : Integer = self.nodes->select(t| t.oclIsKindOf(IfElse))->size(),\n\t\t\tnumberOfSwitch : Integer = self.nodes->select(t| t.oclIsKindOf(Switch))->size(),\n\t\t\tnumberOfWaitForOne : Integer = self.nodes->select(t| t.oclIsKindOf(WaitForOne))->size(), \n\t\t\tnumberOfOutgoingSwitch : Integer = self.nodes->select(t| t.oclIsKindOf(Switch))->collect(s: Switch | s.tasks->size())->sum(),\n\t\t\tnumberOfOutgoingIfElse : Integer = self.nodes->select(t| t.oclIsKindOf(IfElse))->collect(s: IfElse | s.tasks->size())->sum(),\n\t\t\tnumberOfIngoingWaitForOne : Integer = self.nodes->select(t| t.oclIsKindOf(WaitForOne))->collect(s: WaitForOne | s.previousTasks->size())->sum() in\n\t\t\t\tnumberOfIngoingWaitForOne = numberOfOutgoingSwitch + numberOfOutgoingIfElse + numberOfWaitForOne - numberOfIfElse - numberOfSwitch",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 9,
          "OperationCallExpImpl": 20,
          "VariableExpImpl": 21,
          "LetExpImpl": 6,
          "TypeExpImpl": 6,
          "PropertyCallExpImpl": 9
        },
        "properties": [
          "Engine::Workflow::nodes",
          "Engine::Switch::tasks",
          "Engine::IfElse::tasks",
          "Engine::Transition::previousTasks"
        ]
      },
      {
        "operations": {
          "size": 1,
          "oclIsKindOf": 1,
          "=": 2
        },
        "name": "endExistsOnce",
        "body": "\n\t\t\tself.nodes->select(n| n.oclIsKindOf(Task))->select(t: Task | t.end = true)->size() = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "BooleanLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "Engine::Workflow::nodes",
          "Engine::Task::end"
        ]
      }
    ],
    "properties": [
      "name",
      "MainSystem",
      "nodes"
    ]
  },
  {
    "name": "UserGroup",
    "expressions": [],
    "properties": [
      "MainSystem",
      "name",
      "permissions",
      "User"
    ]
  },
  {
    "name": "MainSystem",
    "expressions": [],
    "properties": [
      "users",
      "userGroups",
      "permissions",
      "workflows"
    ]
  },
  {
    "name": "Permission",
    "expressions": [],
    "properties": [
      "UserGroup",
      "name",
      "MainSystem",
      "Task"
    ]
  },
  {
    "name": "Task",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "=": 2
        },
        "name": "noOutReferencesForEnd",
        "body": "\n\t\t\tif self.end = true then \n\t\t\t\tself.transition->size() = 0\n\t\t\telse \n\t\t\t\ttrue\n\t\t\tendif",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "BooleanLiteralExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "Engine::Task::transition",
          "Engine::Task::end"
        ]
      },
      {
        "operations": {
          "size": 1,
          "<": 1
        },
        "name": "noMoreThanOneOutReferenceForTasks",
        "body": "\n\t\t\tself.transition->size() < 2",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["Engine::Task::transition"]
      }
    ],
    "properties": [
      "start",
      "WaitForOne",
      "IfElse",
      "Task",
      "state",
      "Split",
      "end",
      "previousTasks",
      "Simple",
      "Result",
      "permission",
      "Switch",
      "transition",
      "Merge",
      "description",
      "data"
    ]
  },
  {
    "name": "Merge",
    "expressions": [
      {
        "operations": {
          "size": 1,
          ">": 1
        },
        "name": "mergeMustHaveMoreThanOneIncomingTask",
        "body": "\n\t\t\tself.previousTasks->size() > 1",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["Engine::Transition::previousTasks"]
      },
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "=": 2
        },
        "name": "noOutReferencesToStart",
        "body": "\n\t\t\tself.task->select(t | t.start = true)->size() = 0",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "Engine::Merge::task",
          "Engine::Task::start"
        ]
      }
    ],
    "properties": ["task"]
  }
]
