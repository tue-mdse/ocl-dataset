[
  {
    "name": "ClaferModel",
    "expressions": [
      {
        "operations": {
          "oclIsUndefined": 4,
          "size": 1,
          "oclIsTypeOf": 1,
          "and": 5,
          "implies": 1,
          "=": 2
        },
        "name": "ClaferModelRules",
        "body": "\n\t\t\tlet i = self in \n\t\t\t\ti.oclIsTypeOf(ClaferModel) implies\n\t\t\t\t\ti.cCardinality.oclIsUndefined() and \n\t\t\t\t\ti.cGroupCardinality.oclIsUndefined() and\n\t\t\t\t\ti.cSuper.oclIsUndefined() and\n\t\t\t\t\ti.cTarget.oclIsUndefined() and\n\t\t\t\t\ti.isAbstract = false and\n\t\t\t\t\ti.name.size() = 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 14,
          "VariableExpImpl": 8,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 6,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "clafer::Clafer::cTarget",
          "clafer::Clafer::cCardinality",
          "clafer::Clafer::name",
          "clafer::Clafer::cGroupCardinality",
          "clafer::Clafer::cSuper",
          "clafer::Clafer::isAbstract"
        ]
      },
      {
        "operations": {
          "size": 1,
          "allInstances": 1,
          "=": 1
        },
        "name": "OneClaferModel",
        "body": "\n\t\t\tClaferModel.allInstances()->size() = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 1
        },
        "properties": []
      }
    ],
    "properties": []
  },
  {
    "name": "CElement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "GCardInterval",
    "expressions": [],
    "properties": ["Clafer"]
  },
  {
    "name": "Element",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Clafer",
    "expressions": [
      {
        "operations": {},
        "name": "AllClafersIntheSameLevelMustHaveUniqueNames",
        "body": "self.cElements->isUnique(name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "clafer::Clafer::cElements",
          "clafer::Clafer::name"
        ]
      },
      {
        "operations": {
          "not": 1,
          "oclIsUndefined": 1,
          "and": 1,
          "implies": 1,
          "=": 2
        },
        "name": "OnlyReferenceToTopLevelAbstractClafers",
        "body": "cElements-> forAll(c:Clafer, r:Clafer | not c.cTarget.oclIsUndefined() and c.cTarget = r implies r.isAbstract = true)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 6,
          "PropertyCallExpImpl": 4,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "clafer::Clafer::cTarget",
          "clafer::Clafer::cElements",
          "clafer::Clafer::isAbstract"
        ]
      },
      {
        "operations": {
          "<>": 2,
          "not": 1,
          "and": 1
        },
        "name": "AClaferCannotBeAReferenceClaferAndHasASuperTypeAtTheSameTime",
        "body": "not (cElements->exists(c:Clafer | c.cSuper <> null and c.cTarget <> null))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "NullLiteralExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "clafer::Clafer::cElements",
          "clafer::Clafer::cTarget",
          "clafer::Clafer::cSuper"
        ]
      },
      {
        "operations": {
          "size": 1,
          "oclIsTypeOf": 1,
          "implies": 1,
          ">": 1
        },
        "name": "ClaferMustHaveName",
        "body": "self.oclIsTypeOf(Clafer) implies self.name.size() > 0",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 4,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["clafer::Clafer::name"]
      },
      {
        "operations": {
          "not": 1,
          "oclIsUndefined": 1,
          "and": 1,
          "implies": 1,
          "=": 2
        },
        "name": "OnlySuperTypingToTopLevelAbstractClafers",
        "body": "cElements-> forAll(c:Clafer, r:Clafer | not c.cSuper.oclIsUndefined() and c.cSuper = r implies r.isAbstract = true)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 6,
          "PropertyCallExpImpl": 4,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "clafer::Clafer::cElements",
          "clafer::Clafer::cSuper",
          "clafer::Clafer::isAbstract"
        ]
      }
    ],
    "properties": [
      "Clafer",
      "Clafer",
      "cElements",
      "cTarget",
      "name",
      "cCardinality",
      "cGroupCardinality",
      "isAbstract",
      "cSuper",
      "Clafer"
    ]
  },
  {
    "name": "CInterval",
    "expressions": [{
      "operations": {
        "<>": 1,
        "or": 4,
        "and": 3,
        "implies": 2,
        "-": 3,
        "=": 6,
        ">=": 3
      },
      "name": "IntervalRules",
      "body": "\n\t\t\tlet i = self in \n\t\t\t\t(i.Min >= 0) and\n\t\t\t\t(i.Max >= i.Min or i.Max = -1) and\n\t\t\t\t(i.Min = 0 implies i.Max <> 0 or i.Max = 1 or i.Max = -1) and\n\t\t\t\t(i.Min = 1 implies i.Max = -1 or i.Max >= 1)",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 12,
        "OperationCallExpImpl": 22,
        "LetExpImpl": 1,
        "IntegerLiteralExpImpl": 9,
        "PropertyCallExpImpl": 11
      },
      "properties": [
        "clafer::CInterval::Min",
        "clafer::CInterval::Max"
      ]
    }],
    "properties": [
      "Min",
      "Max"
    ]
  },
  {
    "name": "CardInterval",
    "expressions": [],
    "properties": ["Clafer"]
  }
]
