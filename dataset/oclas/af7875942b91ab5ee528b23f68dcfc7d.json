[
  {
    "name": "LinkType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "FunctionParameter",
    "expressions": [],
    "properties": [
      "name",
      "bIsReturnParameter",
      "PIMComponentFunction",
      "type",
      "isUnique"
    ]
  },
  {
    "name": "AlgoResourceController",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "=": 1
        },
        "name": "algoControllerHasUniqueCRUDActivity",
        "body": "self.algoControllerHasCRUDActivity->size() = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["ServicePIM::AlgoResourceController::algoControllerHasCRUDActivity"]
      },
      {
        "operations": {
          "or": 1,
          "isEmpty": 1,
          "oclAsSet": 1,
          "=": 2
        },
        "name": "algoControllerNotAllowedCRUDVerbs",
        "body": "self.algoControllerHasCRUDActivity->select(CRUDActivity| CRUDActivity.crudVerb =2 or CRUDActivity.crudVerb = 3)->isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::AlgoResourceController::algoControllerHasCRUDActivity"
        ]
      },
      {
        "operations": {
          "or": 1,
          "and": 10,
          "oclAsSet": 8,
          "implies": 4,
          "=": 20
        },
        "name": "algoControllerActivityAddsHypermediaLinkToSelf",
        "body": "\n\t\t(\n\t\t\t(\n\t\t\t\tself.algoControllerHasCRUDActivity->exists(crudVerb = 0)\n\t\t\t\timplies\n\t\t\t\tself.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Sibling' and hasTargetAlgoController = self)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tself.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Sibling' and hasTargetAlgoController = self)\n\t\t\t\timplies\t\t\n\t\t\t\tself.algoControllerHasCRUDActivity->exists(crudVerb = 0)\t\t\n\t\t\t)\n\t\t)\n\t\tor\n\t\t(\n\t\t\t(\n\t\t\t\tself.algoControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\timplies\n\t\t\t\tself.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetAlgoController = self)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tself.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetAlgoController = self)\n\t\t\t\timplies\t\t\n\t\t\t\tself.algoControllerHasCRUDActivity->exists(crudVerb = 1)\t\t\n\t\t\t)\n\t\t)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 24,
          "VariableExpImpl": 44,
          "OperationCallExpImpl": 43,
          "IntegerLiteralExpImpl": 12,
          "StringLiteralExpImpl": 4,
          "PropertyCallExpImpl": 40
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::HypermediaLink::hasTargetAlgoController",
          "ServicePIM::AlgoResourceController::algoControllerHasCRUDActivity",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      }
    ],
    "properties": [
      "parentName",
      "hasAssociatedAlgoModel",
      "HypermediaLink",
      "name",
      "algoControllerHasCRUDActivity",
      "RESTfulServicePIM",
      "controllerURI"
    ]
  },
  {
    "name": "CRUDActivityHandler",
    "expressions": [],
    "properties": [
      "usesDBController",
      "crudVerb",
      "hasHypermediaFunction",
      "name",
      "ResourceControllerCRUDActivity"
    ]
  },
  {
    "name": "MediaType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "PIMComponentFunction",
    "expressions": [],
    "properties": [
      "name",
      "hasFunctionParameter"
    ]
  },
  {
    "name": "AlgoResourceModel",
    "expressions": [
      {
        "operations": {
          "oclAsSet": 2,
          "=": 1
        },
        "name": "existantGettersForAllProperties",
        "body": "self.algoModelHasProperty->forAll(rAlgoModelProperty | self.algoModelHasGetter->one(getsProperty.name = rAlgoModelProperty.name))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 4,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "ServicePIM::GetterFunction::getsProperty",
          "ServicePIM::PIMComponentProperty::name",
          "ServicePIM::AlgoResourceModel::algoModelHasProperty",
          "ServicePIM::AlgoResourceModel::algoModelHasGetter"
        ]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "=": 1
        },
        "name": "uniqueLinklistProperty",
        "body": "self.algoModelHasProperty->one(name = 'linklist')",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ServicePIM::PIMComponentProperty::name",
          "ServicePIM::AlgoResourceModel::algoModelHasProperty"
        ]
      },
      {
        "operations": {
          "oclAsSet": 2,
          "=": 1
        },
        "name": "existantSettersForAllProperties",
        "body": "self.algoModelHasProperty->forAll(rAlgoModelProperty | self.algoModelHasSetter->one(setsProperty.name = rAlgoModelProperty.name))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "ServicePIM::PIMComponentProperty::name",
          "ServicePIM::AlgoResourceModel::algoModelHasSetter",
          "ServicePIM::AlgoResourceModel::algoModelHasProperty",
          "ServicePIM::SetterFunction::setsProperty"
        ]
      }
    ],
    "properties": [
      "AlgoResourceModel",
      "RESTfulServicePIM",
      "algoModelHasSetter",
      "parentName",
      "name",
      "algoModelHasInputRepresentation",
      "algoModelHasMarshallingFunction",
      "AlgoResourceController",
      "algoModelHasOutputRepresentation",
      "ResourceModel",
      "hasRelatedAlgoModel",
      "isRelatedAlgoModel",
      "AlgoResourceModel",
      "algoModelHasProperty",
      "algoModelHasGetter",
      "algoModelHasParseFunction"
    ]
  },
  {
    "name": "ResourceControllerCRUDActivity",
    "expressions": [],
    "properties": [
      "crudVerb",
      "hasCRUDActivityHandler",
      "AlgoResourceController",
      "name",
      "isMappedToRDBMSActivity",
      "ResourceControllerManager",
      "ResourceController",
      "activityURI"
    ]
  },
  {
    "name": "ResourceModelManager",
    "expressions": [
      {
        "operations": {
          "oclAsSet": 2,
          "=": 1
        },
        "name": "existantSettersForAllProperties",
        "body": "self.hasRMManagerProperty->forAll(rMManagerProperty | self.rMManagerHasSetter->one(setsProperty.name = rMManagerProperty.name))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "ServicePIM::ResourceModelManager::rMManagerHasSetter",
          "ServicePIM::PIMComponentProperty::name",
          "ServicePIM::ResourceModelManager::hasRMManagerProperty",
          "ServicePIM::SetterFunction::setsProperty"
        ]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "=": 1
        },
        "name": "uniqueLinklistProperty",
        "body": "self.hasRMManagerProperty->one(name = 'linklist')",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ServicePIM::PIMComponentProperty::name",
          "ServicePIM::ResourceModelManager::hasRMManagerProperty"
        ]
      },
      {
        "operations": {
          "oclAsSet": 2,
          "=": 1
        },
        "name": "existantGettersForAllProperties",
        "body": "self.hasRMManagerProperty->forAll(rMManagerProperty | self.rMManagerHasGetter->one(getsProperty.name = rMManagerProperty.name))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "ServicePIM::GetterFunction::getsProperty",
          "ServicePIM::PIMComponentProperty::name",
          "ServicePIM::ResourceModelManager::rMManagerHasGetter",
          "ServicePIM::ResourceModelManager::hasRMManagerProperty"
        ]
      }
    ],
    "properties": [
      "rMManagerHasSetter",
      "rMManagerHasParseFunction",
      "name",
      "ResourceControllerManager",
      "hasRelatedModel",
      "rMManagerHasMarshallingFunction",
      "RESTfulServicePIM",
      "ResourceModel",
      "hasRMManagerProperty",
      "rMManagerHasOutputRepresentation",
      "rMManagerHasInputRepresentation",
      "rMManagerHasGetter",
      "parentName"
    ]
  },
  {
    "name": "RDBMSActivity",
    "expressions": [],
    "properties": [
      "ResourceControllerCRUDActivity",
      "DatabaseController",
      "rdbmsVerb",
      "altersRDBMSTable",
      "name"
    ]
  },
  {
    "name": "RDBMSTableColumn",
    "expressions": [],
    "properties": [
      "RDBMSTable",
      "PIMComponentProperty",
      "type",
      "name",
      "isPrimaryKey",
      "referencesRDBMSTable",
      "isForeignKey"
    ]
  },
  {
    "name": "CRUDVerb",
    "expressions": [],
    "properties": []
  },
  {
    "name": "RESTfulServicePIM",
    "expressions": [
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rCManagerReadActivityAddsDeleteHypermediaLinkToParentRController",
        "body": "\n\t\tself.hasResourceControllerManager->forAll(rCManagerA |\n\t\tself.hasResourceController->forAll(rControllerA |\n\t\t\t(\n\t\t\t\t(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)\n\t\t\t\timplies\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\timplies\n\t\t\t\t(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "VariableExpImpl": 28,
          "OperationCallExpImpl": 21,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceModel::hasRelatedModelManager",
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rCManagerReadActivityAddsReadHypermediaLinkToParentRController",
        "body": "\n\t\tself.hasResourceControllerManager->forAll(rCManagerA |\n\t\tself.hasResourceController->forAll(rControllerA |\n\t\t\t(\n\t\t\t\t(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\timplies\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\timplies\n\t\t\t\t(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "VariableExpImpl": 28,
          "OperationCallExpImpl": 21,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceModel::hasRelatedModelManager",
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 3,
          "implies": 3,
          "=": 7
        },
        "name": "validDatabaseReferentialIntegrity",
        "body": "self.hasResourceModel->forAll(rModel1, rModel2 | (rModel1.hasRelatedModelManager.hasRelatedModel = rModel2) implies (self.hasRDBMSTable->forAll(rdbmsTableA, rdbmsTableB | (rModel1.isMappedToRDBMSTable = rdbmsTableA and rModel2.isMappedToRDBMSTable = rdbmsTableB) implies (rModel1.rModelHasProperty->forAll(rModelPropertyA | (rModelPropertyA.isPrimaryIdentifier = true) implies (rdbmsTableB.hasRDBMSColumns->one(isForeignKey = true and name = rModelPropertyA.name and referencesRDBMSTable = rdbmsTableA)))))))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 5,
          "OperationCallExpImpl": 13,
          "VariableExpImpl": 17,
          "PropertyCallExpImpl": 13,
          "BooleanLiteralExpImpl": 2
        },
        "properties": [
          "ServicePIM::ResourceModel::hasRelatedModelManager",
          "ServicePIM::PIMComponentProperty::isPrimaryIdentifier",
          "ServicePIM::PIMComponentProperty::name",
          "ServicePIM::RESTfulServicePIM::hasRDBMSTable",
          "ServicePIM::ResourceModel::rModelHasProperty",
          "ServicePIM::RDBMSTable::hasRDBMSColumns",
          "ServicePIM::ResourceModelManager::hasRelatedModel",
          "ServicePIM::ResourceModel::isMappedToRDBMSTable",
          "ServicePIM::RDBMSTableColumn::name",
          "ServicePIM::RDBMSTableColumn::referencesRDBMSTable",
          "ServicePIM::RESTfulServicePIM::hasResourceModel",
          "ServicePIM::RDBMSTableColumn::isForeignKey"
        ]
      },
      {
        "operations": {
          "or": 1,
          "and": 18,
          "oclAsSet": 8,
          "implies": 4,
          "=": 28
        },
        "name": "algoControllerAddsDeleteHypermediaLinkToParentRController",
        "body": "\n\t\tself.hasAlgoResourceController->forAll(algoControllerA |\n\t\tself.hasResourceController->forAll(rControllerA |\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 30,
          "OperationCallExpImpl": 59,
          "VariableExpImpl": 62,
          "IntegerLiteralExpImpl": 16,
          "StringLiteralExpImpl": 4,
          "PropertyCallExpImpl": 62
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::AlgoResourceController::hasAssociatedAlgoModel",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::AlgoResourceController::algoControllerHasCRUDActivity",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::RESTfulServicePIM::hasAlgoResourceController",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink",
          "ServicePIM::ResourceModel::hasRelatedAlgoModel"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rControllerUpdateActivityAddsReadHypermediaLinkToRCManager",
        "body": "\n\t\tself.hasResourceController->forAll( rControllerA |\n\t\tself.hasResourceControllerManager->forAll( rCManagerA |\n\t\t\t(\n\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t\timplies\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetRCManager = rCManagerA)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetRCManager = rCManagerA)\n\t\t\t\timplies\n\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "OperationCallExpImpl": 21,
          "VariableExpImpl": 28,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceModel::hasRelatedModelManager",
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::HypermediaLink::hasTargetRCManager",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rControllerReadActivityAddsCreateHypermediaLinkToParentRCManager",
        "body": "\n\t\tself.hasResourceController->forAll( rControllerA |\n\t\tself.hasResourceControllerManager->forAll( rCManagerA |\n\t\t\t(\n\t\t\t\trCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\timplies\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)\n\t\t\t\timplies\n\t\t\t\trCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)\t\t\t\t\t\t\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "VariableExpImpl": 28,
          "OperationCallExpImpl": 21,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::ResourceModelManager::hasRelatedModel",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::HypermediaLink::hasTargetRCManager",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {"oclAsSet": 1},
        "name": "uniquePIMComponentNames",
        "body": "self->isUnique(Bag{self.hasResourceModel.name, self.hasResourceController.name, self.hasResourceModelManager.name, self.hasResourceControllerManager, self.hasAlgoResourceModel.name, self.hasAlgoResourceController.name})",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 6,
          "VariableExpImpl": 12,
          "OperationCallExpImpl": 1,
          "CollectionLiteralExpImpl": 1,
          "PropertyCallExpImpl": 11
        },
        "properties": [
          "ServicePIM::ResourceController::name",
          "ServicePIM::ResourceModel::name",
          "ServicePIM::ResourceModelManager::name",
          "ServicePIM::RESTfulServicePIM::hasResourceModelManager",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::AlgoResourceModel::name",
          "ServicePIM::AlgoResourceController::name",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::RESTfulServicePIM::hasAlgoResourceController",
          "ServicePIM::RESTfulServicePIM::hasResourceModel",
          "ServicePIM::RESTfulServicePIM::hasAlgoResourceModel"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rControllerUpdateActivityAddsCreateHypermediaLinkToParentRCManager",
        "body": "\n\t\tself.hasResourceController->forAll( rControllerA |\n\t\tself.hasResourceControllerManager->forAll( rCManagerA |\n\t\t\t(\n\t\t\t\trCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t\timplies\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)\n\t\t\t\timplies\n\t\t\t\trCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)\t\t\t\t\t\t\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "VariableExpImpl": 28,
          "OperationCallExpImpl": 21,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceModelManager::hasRelatedModel",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::HypermediaLink::hasTargetRCManager",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rCManagerReadActivityAddsUpdateHypermediaLinkToRRController",
        "body": "\n\t\tself.hasResourceControllerManager->forAll(rCManagerA | \n\t\tself.hasResourceController->forAll( rControllerA | \n\t\t\t(\n\t\t\t\t(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t\timplies \n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)\n\t\t\t)\n\t\t    and \n\t\t\t(\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)\n\t\t\t\timplies\n\t\t\t\t(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "VariableExpImpl": 28,
          "OperationCallExpImpl": 21,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::ResourceModelManager::hasRelatedModel",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rCManagerCreateActivityAddsUpdateHypermediaLinkToRRController",
        "body": "\n\t\tself.hasResourceControllerManager->forAll(rCManagerA | \n\t\tself.hasResourceController->forAll( rControllerA | \n\t\t\t(\n\t\t\t\t(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t\timplies \n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)\n\t\t\t)\n\t\t    and \n\t\t\t(\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Child' and  hasTargetRController = rControllerA)\n\t\t\t\timplies\n\t\t\t\t(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "OperationCallExpImpl": 21,
          "VariableExpImpl": 28,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceModelManager::hasRelatedModel",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "<>": 2,
          "implies": 1
        },
        "name": "uniqueRModelRDBMSTableMapping",
        "body": "self.hasResourceModel->forAll(rModel1, rModel2 | rModel1.name <> rModel2.name implies rModel1.isMappedToRDBMSTable.name <> rModel2.isMappedToRDBMSTable.name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 5,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "ServicePIM::ResourceModel::name",
          "ServicePIM::RDBMSTable::name",
          "ServicePIM::ResourceModel::isMappedToRDBMSTable",
          "ServicePIM::RESTfulServicePIM::hasResourceModel"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rCManagerCreateActivityAddsDeleteHypermediaLinkToParentRController",
        "body": "\n\t\tself.hasResourceControllerManager->forAll(rCManagerA |\n\t\tself.hasResourceController->forAll(rControllerA |\n\t\t\t(\n\t\t\t\t(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)\n\t\t\t\timplies\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\timplies\n\t\t\t\t(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "VariableExpImpl": 28,
          "OperationCallExpImpl": 21,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceModel::hasRelatedModelManager",
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rCManagerCreateActivityAddsReadHypermediaLinkToRRController",
        "body": "\n\t\tself.hasResourceControllerManager->forAll(rCManagerA | \n\t\tself.hasResourceController->forAll( rControllerA | \n\t\t\t(\n\t\t\t\t(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\timplies \n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)\n\t\t\t)\n\t\t    and \n\t\t\t(\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)\n\t\t\t\timplies\n\t\t\t\t(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "VariableExpImpl": 28,
          "OperationCallExpImpl": 21,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::ResourceModelManager::hasRelatedModel",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rCManagerCreateActivityAddsDeleteHypermediaLinkToRRController",
        "body": "\n\t\tself.hasResourceControllerManager->forAll(rCManagerA | \n\t\tself.hasResourceController->forAll( rControllerA | \n\t\t\t(\n\t\t\t\t(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)\n\t\t\t\timplies \n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)\n\t\t\t)\n\t\t    and \n\t\t\t(\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)\n\t\t\t\timplies\n\t\t\t\t(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "OperationCallExpImpl": 21,
          "VariableExpImpl": 28,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::ResourceModelManager::hasRelatedModel",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "or": 1,
          "and": 18,
          "oclAsSet": 8,
          "implies": 4,
          "=": 28
        },
        "name": "algoControllerAddsUpdateHypermediaLinkToParentRController",
        "body": "\n\t\tself.hasAlgoResourceController->forAll(algoControllerA |\n\t\tself.hasResourceController->forAll(rControllerA |\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 30,
          "OperationCallExpImpl": 59,
          "VariableExpImpl": 62,
          "IntegerLiteralExpImpl": 16,
          "StringLiteralExpImpl": 4,
          "PropertyCallExpImpl": 62
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::AlgoResourceController::hasAssociatedAlgoModel",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::AlgoResourceController::algoControllerHasCRUDActivity",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::RESTfulServicePIM::hasAlgoResourceController",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink",
          "ServicePIM::ResourceModel::hasRelatedAlgoModel"
        ]
      },
      {
        "operations": {
          "and": 1,
          "implies": 1,
          "=": 3
        },
        "name": "correctlyMatchingRCManagerCRUDActivitiesWithRDBMSActivities",
        "body": "self.hasResourceControllerManager.rCManagerHasCRUDActivity->forAll(rCManagerCRUDActivityA | self.hasDatabaseController.hasRDBMSActivity->forAll(rdbmsActivityA | (rCManagerCRUDActivityA.isMappedToRDBMSActivity = rdbmsActivityA) implies (self.hasResourceControllerManager->one(rCManagerHasCRUDActivity = rCManagerCRUDActivityA and hasAssociatedRMManager.hasRelatedModel.isMappedToRDBMSTable = rCManagerCRUDActivityA.isMappedToRDBMSActivity.altersRDBMSTable))))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "VariableExpImpl": 10,
          "OperationCallExpImpl": 5,
          "PropertyCallExpImpl": 12
        },
        "properties": [
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::DatabaseController::hasRDBMSActivity",
          "ServicePIM::RESTfulServicePIM::hasDatabaseController",
          "ServicePIM::ResourceModelManager::hasRelatedModel",
          "ServicePIM::ResourceModel::isMappedToRDBMSTable",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity",
          "ServicePIM::ResourceControllerCRUDActivity::isMappedToRDBMSActivity",
          "ServicePIM::RDBMSActivity::altersRDBMSTable"
        ]
      },
      {
        "operations": {
          "or": 3,
          "and": 36,
          "oclAsSet": 24,
          "implies": 8,
          "=": 56
        },
        "name": "algoControllerAddsHypermediaLinkToParentAlgoController",
        "body": "\n\t\tself.hasAlgoResourceController->forAll(algoControllerA, algoControllerB |\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetAlgoController = algoControllerB)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.isRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 57,
          "OperationCallExpImpl": 127,
          "VariableExpImpl": 121,
          "IntegerLiteralExpImpl": 32,
          "StringLiteralExpImpl": 8,
          "PropertyCallExpImpl": 121
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::AlgoResourceModel::isRelatedAlgoModel",
          "ServicePIM::AlgoResourceController::hasAssociatedAlgoModel",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::HypermediaLink::hasTargetAlgoController",
          "ServicePIM::AlgoResourceController::algoControllerHasCRUDActivity",
          "ServicePIM::RESTfulServicePIM::hasAlgoResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {},
        "name": "uniqueResourceControllerManagers",
        "body": "self.hasResourceControllerManager->isUnique(name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::ResourceControllerManager::name"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rCManagerCreateActivityAddsUpdateHypermediaLinkToParentRController",
        "body": "\n\t\tself.hasResourceControllerManager->forAll(rCManagerA |\n\t\tself.hasResourceController->forAll(rControllerA |\n\t\t\t(\n\t\t\t\t(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t\timplies\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\timplies\n\t\t\t\t(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "VariableExpImpl": 28,
          "OperationCallExpImpl": 21,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceModel::hasRelatedModelManager",
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "or": 1,
          "and": 18,
          "oclAsSet": 8,
          "implies": 4,
          "=": 28
        },
        "name": "algoControllerAddsReadHypermediaLinkToParentRController",
        "body": "\n\t\tself.hasAlgoResourceController->forAll(algoControllerA |\n\t\tself.hasResourceController->forAll(rControllerA |\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 30,
          "OperationCallExpImpl": 59,
          "VariableExpImpl": 62,
          "IntegerLiteralExpImpl": 16,
          "StringLiteralExpImpl": 4,
          "PropertyCallExpImpl": 62
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::AlgoResourceController::hasAssociatedAlgoModel",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::AlgoResourceController::algoControllerHasCRUDActivity",
          "ServicePIM::RESTfulServicePIM::hasAlgoResourceController",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink",
          "ServicePIM::ResourceModel::hasRelatedAlgoModel"
        ]
      },
      {
        "operations": {
          "or": 1,
          "and": 18,
          "oclAsSet": 4,
          "implies": 4,
          "=": 28
        },
        "name": "rControllerReadAddsHypermediaLinkToRAlgoController",
        "body": "\n\t\tself.hasAlgoResourceController->forAll(algoControllerA |\n\t\tself.hasResourceController->forAll(rControllerA |\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 30,
          "VariableExpImpl": 62,
          "OperationCallExpImpl": 55,
          "IntegerLiteralExpImpl": 16,
          "StringLiteralExpImpl": 4,
          "PropertyCallExpImpl": 62
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::AlgoResourceController::hasAssociatedAlgoModel",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::HypermediaLink::hasTargetAlgoController",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::AlgoResourceController::algoControllerHasCRUDActivity",
          "ServicePIM::RESTfulServicePIM::hasAlgoResourceController",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink",
          "ServicePIM::ResourceModel::hasRelatedAlgoModel"
        ]
      },
      {
        "operations": {"oclAsSet": 1},
        "name": "controllersHaveUniqueURIs",
        "body": "self->isUnique(Bag{self.hasResourceController.controllerURI, self.hasResourceControllerManager.controllerURI, self.hasAlgoResourceController.controllerURI})",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 7,
          "CollectionLiteralExpImpl": 1,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::RESTfulServicePIM::hasAlgoResourceController",
          "ServicePIM::AlgoResourceController::controllerURI",
          "ServicePIM::ResourceController::controllerURI",
          "ServicePIM::ResourceControllerManager::controllerURI"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rControllerReadActivityAddsCreateHypermediaLinkToRCManager",
        "body": "\n\t\tself.hasResourceController->forAll( rControllerA |\n\t\tself.hasResourceControllerManager->forAll( rCManagerA |\n\t\t\t(\n\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\timplies\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetRCManager = rCManagerA)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetRCManager = rCManagerA)\n\t\t\t\timplies\n\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "OperationCallExpImpl": 21,
          "VariableExpImpl": 28,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceModel::hasRelatedModelManager",
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::HypermediaLink::hasTargetRCManager",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rControllerUpdateActivityAddsReadHypermediaLinkToParentRCManager",
        "body": "\n\t\tself.hasResourceController->forAll( rControllerA |\n\t\tself.hasResourceControllerManager->forAll( rCManagerA |\n\t\t\t(\n\t\t\t\trCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t\timplies\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)\n\t\t\t\timplies\n\t\t\t\trCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)\t\t\t\t\t\t\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "VariableExpImpl": 28,
          "OperationCallExpImpl": 21,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceModelManager::hasRelatedModel",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::HypermediaLink::hasTargetRCManager",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rControllerDeleteActivityAddsReadHypermediaLinkToParentRCManager",
        "body": "\n\t\tself.hasResourceController->forAll( rControllerA |\n\t\tself.hasResourceControllerManager->forAll( rCManagerA |\n\t\t\t(\n\t\t\t\trCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)\n\t\t\t\timplies\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 3).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 3).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)\n\t\t\t\timplies\n\t\t\t\trCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)\t\t\t\t\t\t\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "VariableExpImpl": 28,
          "OperationCallExpImpl": 21,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceModelManager::hasRelatedModel",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::HypermediaLink::hasTargetRCManager",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rControllerUpdateActivityAddsCreateHypermediaLinkToRCManager",
        "body": "\n\t\tself.hasResourceController->forAll( rControllerA |\n\t\tself.hasResourceControllerManager->forAll( rCManagerA |\n\t\t\t(\n\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t\timplies\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetRCManager = rCManagerA)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetRCManager = rCManagerA)\n\t\t\t\timplies\n\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "VariableExpImpl": 28,
          "OperationCallExpImpl": 21,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceModel::hasRelatedModelManager",
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::HypermediaLink::hasTargetRCManager",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rControllerReadActivityAddsReadHypermediaLinkToParentRCManager",
        "body": "\n\t\tself.hasResourceController->forAll( rControllerA |\n\t\tself.hasResourceControllerManager->forAll( rCManagerA |\n\t\t\t(\n\t\t\t\trCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\timplies\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)\n\t\t\t\timplies\n\t\t\t\trCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)\t\t\t\t\t\t\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "OperationCallExpImpl": 21,
          "VariableExpImpl": 28,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceModelManager::hasRelatedModel",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::HypermediaLink::hasTargetRCManager",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 1,
          "implies": 1,
          "=": 3
        },
        "name": "correctlyMatchingRControllerCRUDActivitiesWithRDBMSActivities",
        "body": "self.hasResourceController.rControllerHasCRUDActivity->forAll(rControllerCRUDActivityA | self.hasDatabaseController.hasRDBMSActivity->forAll(rdbmsActivityA | (rControllerCRUDActivityA.isMappedToRDBMSActivity = rdbmsActivityA) implies (self.hasResourceController->one(rControllerHasCRUDActivity = rControllerCRUDActivityA and hasAssociatedRModel.isMappedToRDBMSTable = rControllerCRUDActivityA.isMappedToRDBMSActivity.altersRDBMSTable))))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 10,
          "PropertyCallExpImpl": 11
        },
        "properties": [
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::DatabaseController::hasRDBMSActivity",
          "ServicePIM::RESTfulServicePIM::hasDatabaseController",
          "ServicePIM::ResourceModel::isMappedToRDBMSTable",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::RDBMSActivity::altersRDBMSTable",
          "ServicePIM::ResourceControllerCRUDActivity::isMappedToRDBMSActivity"
        ]
      },
      {
        "operations": {},
        "name": "uniqueResourceModelManagers",
        "body": "self.hasResourceModelManager->isUnique(name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ServicePIM::ResourceModelManager::name",
          "ServicePIM::RESTfulServicePIM::hasResourceModelManager"
        ]
      },
      {
        "operations": {},
        "name": "uniqueResourceAlgoModels",
        "body": "self.hasAlgoResourceModel->isUnique(name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ServicePIM::AlgoResourceModel::name",
          "ServicePIM::RESTfulServicePIM::hasAlgoResourceModel"
        ]
      },
      {
        "operations": {
          "or": 3,
          "and": 36,
          "oclAsSet": 24,
          "implies": 8,
          "=": 56
        },
        "name": "algoControllerActivityAddsHypermediaLinkToRAlgoController",
        "body": "\n\t\tself.hasAlgoResourceController->forAll(algoControllerA, algoControllerB |\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\talgoControllerA.algoControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerB)\n\t\t\t\t\timplies\n\t\t\t\t\talgoControllerA.hasAssociatedAlgoModel.hasRelatedAlgoModel = algoControllerB.hasAssociatedAlgoModel and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1) and algoControllerB.algoControllerHasCRUDActivity->exists( crudVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 57,
          "VariableExpImpl": 121,
          "OperationCallExpImpl": 127,
          "IntegerLiteralExpImpl": 32,
          "StringLiteralExpImpl": 8,
          "PropertyCallExpImpl": 121
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::AlgoResourceController::hasAssociatedAlgoModel",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::HypermediaLink::hasTargetAlgoController",
          "ServicePIM::AlgoResourceController::algoControllerHasCRUDActivity",
          "ServicePIM::RESTfulServicePIM::hasAlgoResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink",
          "ServicePIM::AlgoResourceModel::hasRelatedAlgoModel"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rControllerReadActivityAddsReadHypermediaLinkToRCManager",
        "body": "\n\t\tself.hasResourceController->forAll( rControllerA |\n\t\tself.hasResourceControllerManager->forAll( rCManagerA |\n\t\t\t(\n\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\timplies\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetRCManager = rCManagerA)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetRCManager = rCManagerA)\n\t\t\t\timplies\n\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "OperationCallExpImpl": 21,
          "VariableExpImpl": 28,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceModel::hasRelatedModelManager",
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::HypermediaLink::hasTargetRCManager",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rControllerDeleteActivityAddsCreateHypermediaLinkToParentRCManager",
        "body": "\n\t\tself.hasResourceController->forAll( rControllerA |\n\t\tself.hasResourceControllerManager->forAll( rCManagerA |\n\t\t\t(\n\t\t\t\trCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)\n\t\t\t\timplies\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 3).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 3).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Parent' and hasTargetRCManager = rCManagerA)\n\t\t\t\timplies\n\t\t\t\trCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)\t\t\t\t\t\t\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "OperationCallExpImpl": 21,
          "VariableExpImpl": 28,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceModelManager::hasRelatedModel",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::HypermediaLink::hasTargetRCManager",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "or": 1,
          "and": 18,
          "oclAsSet": 4,
          "implies": 4,
          "=": 28
        },
        "name": "rControllerUpdateAddsHypermediaLinkToRAlgoController",
        "body": "\n\t\tself.hasAlgoResourceController->forAll(algoControllerA |\n\t\tself.hasResourceController->forAll(rControllerA |\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 0)\n\t\t\t\t)\n\t\t\t)\n\t\t\tor\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)\n\t\t\t\t)\n\t\t\t\tand\n\t\t\t\t(\n\t\t\t\t\trControllerA.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and hasTargetAlgoController = algoControllerA)\n\t\t\t\t\timplies\n\t\t\t\t\trControllerA.hasAssociatedRModel.hasRelatedAlgoModel = algoControllerA.hasAssociatedAlgoModel and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2) and algoControllerA.algoControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\t)\n\t\t\t)\n\t\t\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 30,
          "VariableExpImpl": 62,
          "OperationCallExpImpl": 55,
          "IntegerLiteralExpImpl": 16,
          "StringLiteralExpImpl": 4,
          "PropertyCallExpImpl": 62
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::AlgoResourceController::hasAssociatedAlgoModel",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::HypermediaLink::hasTargetAlgoController",
          "ServicePIM::AlgoResourceController::algoControllerHasCRUDActivity",
          "ServicePIM::RESTfulServicePIM::hasAlgoResourceController",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink",
          "ServicePIM::ResourceModel::hasRelatedAlgoModel"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rCManagerReadActivityAddsUpdateHypermediaLinkToParentRController",
        "body": "\n\t\tself.hasResourceControllerManager->forAll(rCManagerA |\n\t\tself.hasResourceController->forAll(rControllerA |\n\t\t\t(\n\t\t\t\t(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t\timplies\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\timplies\n\t\t\t\t(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "VariableExpImpl": 28,
          "OperationCallExpImpl": 21,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceModel::hasRelatedModelManager",
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rCManagerCreateActivityAddsReadHypermediaLinkToParentRController",
        "body": "\n\t\tself.hasResourceControllerManager->forAll(rCManagerA |\n\t\tself.hasResourceController->forAll(rControllerA |\n\t\t\t(\n\t\t\t\t(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\timplies\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Parent' and hasTargetRController = rControllerA)\n\t\t\t\timplies\n\t\t\t\t(rControllerA.hasAssociatedRModel.hasRelatedModelManager = rCManagerA.hasAssociatedRMManager) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "VariableExpImpl": 28,
          "OperationCallExpImpl": 21,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceModel::hasRelatedModelManager",
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rCManagerReadActivityAddsReadHypermediaLinkToRRController",
        "body": "\n\t\tself.hasResourceControllerManager->forAll(rCManagerA | \n\t\tself.hasResourceController->forAll( rControllerA | \n\t\t\t(\n\t\t\t\t(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\timplies  \n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)\n\t\t\t)\n\t\t    and \n\t\t\t(\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Child' and  hasTargetRController = rControllerA)\n\t\t\t\timplies\n\t\t\t\t(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "OperationCallExpImpl": 21,
          "VariableExpImpl": 28,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::ResourceModelManager::hasRelatedModel",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {},
        "name": "uniqueResourceAlgoControllers",
        "body": "self.hasAlgoResourceController->isUnique(name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ServicePIM::AlgoResourceController::name",
          "ServicePIM::RESTfulServicePIM::hasAlgoResourceController"
        ]
      },
      {
        "operations": {},
        "name": "uniqueResourceModels",
        "body": "self.hasResourceModel->isUnique(name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ServicePIM::ResourceModel::name",
          "ServicePIM::RESTfulServicePIM::hasResourceModel"
        ]
      },
      {
        "operations": {},
        "name": "uniqueResourceControllers",
        "body": "self.hasResourceController->isUnique(name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ServicePIM::ResourceController::name",
          "ServicePIM::RESTfulServicePIM::hasResourceController"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rCManagerReadActivityAddsDeleteHypermediaLinkToRRController",
        "body": "\n\t\tself.hasResourceControllerManager->forAll(rCManagerA | \n\t\tself.hasResourceController->forAll( rControllerA | \n\t\t\t(\n\t\t\t\t(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)\n\t\t\t\timplies \n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)\n\t\t\t)\n\t\t    and \n\t\t\t(\n\t\t\t\trCManagerA.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Child' and  hasTargetRController = rControllerA)\n\t\t\t\timplies\n\t\t\t\t(rCManagerA.hasAssociatedRMManager.hasRelatedModel = rControllerA.hasAssociatedRModel) and rControllerA.rControllerHasCRUDActivity->exists(crudVerb = 3)\n\t\t\t)\n\t\t))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "VariableExpImpl": 28,
          "OperationCallExpImpl": 21,
          "IntegerLiteralExpImpl": 6,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 28
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::RESTfulServicePIM::hasResourceControllerManager",
          "ServicePIM::ResourceModelManager::hasRelatedModel",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::ResourceControllerManager::hasAssociatedRMManager",
          "ServicePIM::ResourceController::hasAssociatedRModel",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::RESTfulServicePIM::hasResourceController",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      }
    ],
    "properties": [
      "serviceDatabaseType",
      "serviceOutputPath",
      "hasResourceModelManager",
      "hasResourceControllerManager",
      "hasRDBMSTable",
      "serviceDatabasePassword",
      "hasAlgoResourceController",
      "serviceDatabaseIP",
      "name",
      "hasResourceModel",
      "serviceDatabaseUsername",
      "hasDatabaseController",
      "hasResourceController",
      "serviceDatabasePort",
      "hasAlgoResourceModel"
    ]
  },
  {
    "name": "RDBMSVerb",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ResourceModel",
    "expressions": [
      {
        "operations": {"=": 1},
        "name": "uniqueNamingProperty",
        "body": "self.rModelHasProperty->one(isNamingProperty = true)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "ServicePIM::PIMComponentProperty::isNamingProperty",
          "ServicePIM::ResourceModel::rModelHasProperty"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "existantSettersForAllProperties",
        "body": "self.rModelHasProperty->forAll(rModelProperty | self.rModelHasSetter->one(setsProperty.name = rModelProperty.name))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "ServicePIM::PIMComponentProperty::name",
          "ServicePIM::ResourceModel::rModelHasProperty",
          "ServicePIM::ResourceModel::rModelHasSetter",
          "ServicePIM::SetterFunction::setsProperty"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "uniqueLinklistProperty",
        "body": "self.rModelHasProperty->one(name = 'linklist')",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ServicePIM::PIMComponentProperty::name",
          "ServicePIM::ResourceModel::rModelHasProperty"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "existantGettersForAllProperties",
        "body": "self.rModelHasProperty->forAll(rModelProperty | self.rModelHasGetter->one(getsProperty.name = rModelProperty.name))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "ServicePIM::GetterFunction::getsProperty",
          "ServicePIM::ResourceModel::rModelHasGetter",
          "ServicePIM::PIMComponentProperty::name",
          "ServicePIM::ResourceModel::rModelHasProperty"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "uniquePrimaryIdentifier",
        "body": "self.rModelHasProperty->one(isPrimaryIdentifier = true)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "BooleanLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ServicePIM::PIMComponentProperty::isPrimaryIdentifier",
          "ServicePIM::ResourceModel::rModelHasProperty"
        ]
      }
    ],
    "properties": [
      "hasRelatedModelManager",
      "name",
      "parentName",
      "rModelMarshallingFunction",
      "isMappedToRDBMSTable",
      "rModelHasParseFunction",
      "rModelHasOutputRepresentation",
      "ResourceModelManager",
      "rModelHasGetter",
      "ResourceController",
      "rModelHasProperty",
      "rModelHasIRepresentation",
      "RESTfulServicePIM",
      "rModelHasSetter",
      "hasRelatedAlgoModel"
    ]
  },
  {
    "name": "HypermediaLink",
    "expressions": [],
    "properties": [
      "linkCRUDVerb",
      "hasTargetAlgoController",
      "hasTargetRCManager",
      "linkType",
      "hasTargetRController",
      "CreateHypermediaPIMFunction"
    ]
  },
  {
    "name": "CreateHypermediaPIMFunction",
    "expressions": [],
    "properties": [
      "CRUDActivityHandler",
      "hasHypermediaLink"
    ]
  },
  {
    "name": "RDBMSTable",
    "expressions": [{
      "operations": {"=": 1},
      "name": "uniquePrimaryKey",
      "body": "self.hasRDBMSColumns->one(isPrimaryKey = true)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 2,
        "PropertyCallExpImpl": 2,
        "BooleanLiteralExpImpl": 1
      },
      "properties": [
        "ServicePIM::RDBMSTable::hasRDBMSColumns",
        "ServicePIM::RDBMSTableColumn::isPrimaryKey"
      ]
    }],
    "properties": [
      "RDBMSTableColumn",
      "name",
      "hasRDBMSColumns",
      "RESTfulServicePIM",
      "ResourceModel",
      "RDBMSActivity"
    ]
  },
  {
    "name": "ResourceInputRepresentation",
    "expressions": [],
    "properties": [
      "ResourceModel",
      "AlgoResourceModel",
      "RepresentationParseFunction",
      "inputType",
      "ResourceModelManager"
    ]
  },
  {
    "name": "SetterFunction",
    "expressions": [],
    "properties": [
      "AlgoResourceModel",
      "ResourceModel",
      "setsProperty",
      "ResourceModelManager"
    ]
  },
  {
    "name": "GetterFunction",
    "expressions": [],
    "properties": [
      "getsProperty",
      "ResourceModel",
      "AlgoResourceModel",
      "ResourceModelManager"
    ]
  },
  {
    "name": "ResourceController",
    "expressions": [
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rControllerReadActivityAddsUpdateHypermediaLinkToSelf",
        "body": "\n\t\t(\n\t\t\t(\n\t\t\t\tself.rControllerHasCRUDActivity->exists(crudVerb = 2) and self.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\timplies\n\t\t\t\tself.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Sibling' and hasTargetRController = self)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tself.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Sibling' and hasTargetRController = self)\n\t\t\t\timplies\n\t\t\t\tself.rControllerHasCRUDActivity->exists(crudVerb = 2) and self.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t)\n\t\t)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "OperationCallExpImpl": 21,
          "VariableExpImpl": 26,
          "IntegerLiteralExpImpl": 8,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 24
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rControllerUpdateActivityAddsDeleteHypermediaLinkToSelf",
        "body": "\n\t\t(\n\t\t\t(\n\t\t\t\tself.rControllerHasCRUDActivity->exists(crudVerb = 3) and self.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t\timplies\n\t\t\t\tself.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Sibling' and hasTargetRController = self)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tself.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Sibling' and hasTargetRController = self)\n\t\t\t\timplies\n\t\t\t\tself.rControllerHasCRUDActivity->exists(crudVerb = 3) and self.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t)\n\t\t)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "VariableExpImpl": 26,
          "OperationCallExpImpl": 21,
          "IntegerLiteralExpImpl": 8,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 24
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {},
        "name": "rControllerHasUniqueCRUDActivities",
        "body": "self.rControllerHasCRUDActivity->isUnique(crudVerb)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rControllerReadActivityAddsDeleteHypermediaLinkToSelf",
        "body": "\n\t\t(\n\t\t\t(\n\t\t\t\tself.rControllerHasCRUDActivity->exists(crudVerb = 3) and self.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\timplies\n\t\t\t\tself.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Sibling' and hasTargetRController = self)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tself.rControllerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 3 and linkType = 'Sibling' and hasTargetRController = self)\n\t\t\t\timplies\n\t\t\t\tself.rControllerHasCRUDActivity->exists(crudVerb = 3) and self.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t)\n\t\t)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "OperationCallExpImpl": 21,
          "VariableExpImpl": 26,
          "IntegerLiteralExpImpl": 8,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 24
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "isEmpty": 1,
          "=": 1
        },
        "name": "rControllerNotAllowedCRUDActivitiyVerbs",
        "body": "self.rControllerHasCRUDActivity->select(crudVerb = 0)->isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity"
        ]
      },
      {
        "operations": {
          "and": 5,
          "implies": 2,
          "=": 8
        },
        "name": "rControllerUpdateActivityAddsUpdateHypermediaLinkToSelf",
        "body": "\n\t\t(\n\t\t\t(\n\t\t\t\tself.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t\timplies\n\t\t\t\tself.rControllerHasCRUDActivity.hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Sibling' and hasTargetRController = self)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tself.rControllerHasCRUDActivity.hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 2 and linkType = 'Sibling' and hasTargetRController = self)\n\t\t\t\timplies\n\t\t\t\tself.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t)\n\t\t)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 10,
          "VariableExpImpl": 20,
          "OperationCallExpImpl": 15,
          "IntegerLiteralExpImpl": 4,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 18
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 7,
          "implies": 2,
          "=": 12
        },
        "name": "rControllerUpdateActivityAddsReadHypermediaLinkToSelf",
        "body": "\n\t\t(\n\t\t\t(\n\t\t\t\tself.rControllerHasCRUDActivity->exists(crudVerb = 1) and self.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t\timplies\n\t\t\t\tself.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetRController = self)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tself.rControllerHasCRUDActivity->select(crudVerb = 2).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetRController = self)\n\t\t\t\timplies\n\t\t\t\tself.rControllerHasCRUDActivity->exists(crudVerb = 1) and self.rControllerHasCRUDActivity->exists(crudVerb = 2)\n\t\t\t)\n\t\t)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 14,
          "OperationCallExpImpl": 21,
          "VariableExpImpl": 26,
          "IntegerLiteralExpImpl": 8,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 24
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 5,
          "implies": 2,
          "=": 8
        },
        "name": "rControllerReadActivityAddsReadHypermediaLinkToSelf",
        "body": "\n\t\t(\n\t\t\t(\n\t\t\t\tself.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t\timplies\n\t\t\t\tself.rControllerHasCRUDActivity.hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetRController = self)\n\t\t\t)\n\t\t\tand\n\t\t\t(\n\t\t\t\tself.rControllerHasCRUDActivity.hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and linkType = 'Sibling' and hasTargetRController = self)\n\t\t\t\timplies\n\t\t\t\tself.rControllerHasCRUDActivity->exists(crudVerb = 1)\n\t\t\t)\n\t\t)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 10,
          "VariableExpImpl": 20,
          "OperationCallExpImpl": 15,
          "IntegerLiteralExpImpl": 4,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 18
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceController::rControllerHasCRUDActivity",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::HypermediaLink::hasTargetRController",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      }
    ],
    "properties": [
      "name",
      "HypermediaLink",
      "RESTfulServicePIM",
      "rControllerHasCRUDActivity",
      "parentName",
      "hasAssociatedRModel",
      "controllerURI"
    ]
  },
  {
    "name": "DatabaseController",
    "expressions": [],
    "properties": [
      "name",
      "RESTfulServicePIM",
      "hasRDBMSActivity",
      "CRUDActivityHandler"
    ]
  },
  {
    "name": "ResourceOutputRepresentation",
    "expressions": [],
    "properties": [
      "outputType",
      "ResourceModelManager",
      "AlgoResourceModel",
      "RepresentationMarshallingFunction",
      "ResourceModel"
    ]
  },
  {
    "name": "ResourceControllerManager",
    "expressions": [
      {
        "operations": {
          "or": 1,
          "isEmpty": 1,
          "=": 2
        },
        "name": "rCManagerNotAllowedCRUDActivityVerbs",
        "body": "self.rCManagerHasCRUDActivity->select(crudVerb = 2 or crudVerb = 3)->isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 4,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "rCManagerHasUniqueCREATEActivity",
        "body": "self.rCManagerHasCRUDActivity->one(crudVerb = 0)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity"
        ]
      },
      {
        "operations": {
          "and": 2,
          "=": 4
        },
        "name": "rCManagerCreateActivityAddsReadHypermediaLinkToSelf",
        "body": "self.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and hasTargetRCManager = self and linkType = 'Sibling')",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 5,
          "VariableExpImpl": 9,
          "OperationCallExpImpl": 6,
          "IntegerLiteralExpImpl": 2,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 8
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::HypermediaLink::hasTargetRCManager",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 2,
          "=": 4
        },
        "name": "rCManagerReadActivityAddsCreateHypermediaLinkToSelf",
        "body": "self.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and hasTargetRCManager = self and linkType = 'Sibling')",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 5,
          "VariableExpImpl": 9,
          "OperationCallExpImpl": 6,
          "IntegerLiteralExpImpl": 2,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 8
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::HypermediaLink::hasTargetRCManager",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 2,
          "=": 4
        },
        "name": "rCManagerReadActivityAddsReadHypermediaLinkToSelf",
        "body": "self.rCManagerHasCRUDActivity->select(crudVerb = 1).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 1 and hasTargetRCManager = self and linkType = 'Sibling')",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 5,
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 9,
          "IntegerLiteralExpImpl": 2,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 8
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::HypermediaLink::hasTargetRCManager",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {
          "and": 2,
          "=": 4
        },
        "name": "rCManagerCreateActivityAddsCreateHypermediaLinkToSelf",
        "body": "self.rCManagerHasCRUDActivity->select(crudVerb = 0).hasCRUDActivityHandler.hasHypermediaFunction.hasHypermediaLink->one(linkCRUDVerb = 0 and hasTargetRCManager = self and linkType = 'Sibling')",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 5,
          "VariableExpImpl": 9,
          "OperationCallExpImpl": 6,
          "IntegerLiteralExpImpl": 2,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 8
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerCRUDActivity::hasCRUDActivityHandler",
          "ServicePIM::CRUDActivityHandler::hasHypermediaFunction",
          "ServicePIM::HypermediaLink::linkCRUDVerb",
          "ServicePIM::HypermediaLink::hasTargetRCManager",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity",
          "ServicePIM::HypermediaLink::linkType",
          "ServicePIM::CreateHypermediaPIMFunction::hasHypermediaLink"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "rCManagerHasUniqueREADActivity",
        "body": "self.rCManagerHasCRUDActivity->one(crudVerb = 1)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ServicePIM::ResourceControllerCRUDActivity::crudVerb",
          "ServicePIM::ResourceControllerManager::rCManagerHasCRUDActivity"
        ]
      }
    ],
    "properties": [
      "hasAssociatedRMManager",
      "rCManagerHasCRUDActivity",
      "parentName",
      "RESTfulServicePIM",
      "name",
      "controllerURI",
      "HypermediaLink"
    ]
  },
  {
    "name": "PIMComponentProperty",
    "expressions": [{
      "operations": {
        "implies": 1,
        "=": 2
      },
      "name": "primaryIdentifierMapsToPrimaryKey",
      "body": "(self.isPrimaryIdentifier = true) implies (self.isMappedToRDBMSColumn.isPrimaryKey = true)",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 3,
        "VariableExpImpl": 2,
        "PropertyCallExpImpl": 3,
        "BooleanLiteralExpImpl": 2
      },
      "properties": [
        "ServicePIM::PIMComponentProperty::isMappedToRDBMSColumn",
        "ServicePIM::PIMComponentProperty::isPrimaryIdentifier",
        "ServicePIM::RDBMSTableColumn::isPrimaryKey"
      ]
    }],
    "properties": [
      "isMappedToRDBMSColumn",
      "GetterFunction",
      "name",
      "isNamingProperty",
      "isPrimaryIdentifier",
      "AlgoResourceModel",
      "SetterFunction",
      "type",
      "isUnique",
      "ResourceModelManager",
      "ResourceModel"
    ]
  },
  {
    "name": "RepresentationMarshallingFunction",
    "expressions": [],
    "properties": [
      "marshalsRepresentation",
      "ResourceModel",
      "AlgoResourceModel",
      "ResourceModelManager"
    ]
  },
  {
    "name": "RepresentationParseFunction",
    "expressions": [],
    "properties": [
      "ResourceModelManager",
      "parsesInputRepresentation",
      "ResourceModel",
      "AlgoResourceModel"
    ]
  }
]
