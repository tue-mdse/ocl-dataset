[
  {
    "name": "EnumLiteralExp",
    "expressions": [{
      "operations": {"=": 1},
      "name": "validateTypeIsEnumerationType",
      "body": "self.type = referredLiteral?.owningEnumeration\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "pivot::EnumerationLiteral::owningEnumeration",
        "pivot::TypedElement::type",
        "pivot::EnumLiteralExp::referredLiteral"
      ]
    }],
    "properties": ["referredLiteral"]
  },
  {
    "name": "OrderedSetType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ElementExtension",
    "expressions": [],
    "properties": [
      "isRequired",
      "isApplied",
      "stereotype",
      "base"
    ]
  },
  {
    "name": "CallExp",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "validateTypeIsNotInvalid",
      "body": "type <> OclInvalid\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": [
      "isSafe",
      "isImplicit",
      "ownedSource"
    ]
  },
  {
    "name": "Class",
    "expressions": [{
      "operations": {},
      "name": "validateUniqueInvariantName",
      "body": "ownedInvariants->isUnique(p | p?.name)\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 2,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "pivot::NamedElement::name",
        "pivot::Class::ownedInvariants"
      ]
    }],
    "properties": [
      "owningPackage",
      "Class",
      "isActive",
      "InstanceSpecification",
      "DataType",
      "instanceClassName",
      "CompleteClass",
      "isInterface",
      "ownedOperations",
      "ownedBehaviors",
      "extenders",
      "isAbstract",
      "ownedInvariants",
      "TemplateParameter",
      "superClasses",
      "ownedProperties"
    ]
  },
  {
    "name": "TypeExp",
    "expressions": [],
    "properties": ["referredType"]
  },
  {
    "name": "Slot",
    "expressions": [],
    "properties": [
      "definingProperty",
      "ownedValues",
      "owningInstance"
    ]
  },
  {
    "name": "LoopExp",
    "expressions": [
      {
        "operations": {"oclIsKindOf": 1},
        "name": "validateSourceIsCollection",
        "body": "ownedSource?.type.oclIsKindOf(CollectionType)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "isEmpty": 1,
          "oclAsSet": 1
        },
        "name": "validateNoInitializers",
        "body": "self.ownedIterators->forAll(p | p?.ownedInit->isEmpty())\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::LoopExp::ownedIterators",
          "pivot::Variable::ownedInit"
        ]
      }
    ],
    "properties": [
      "ownedBody",
      "ownedIterators",
      "referredIteration"
    ]
  },
  {
    "name": "ShadowPart",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "validateTypeIsNotInvalid",
      "body": "type <> OclInvalid\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": [
      "ShadowExp",
      "ownedInit",
      "referredProperty"
    ]
  },
  {
    "name": "DynamicType",
    "expressions": [],
    "properties": ["ownedDynamicProperties"]
  },
  {
    "name": "Vertex",
    "expressions": [],
    "properties": [
      "incomingTransitions",
      "owningRegion",
      "outgoingTransitions"
    ]
  },
  {
    "name": "DynamicProperty",
    "expressions": [],
    "properties": [
      "referredProperty",
      "DynamicType",
      "default"
    ]
  },
  {
    "name": "Visitable",
    "expressions": [],
    "properties": []
  },
  {
    "name": "AssociativityKind",
    "expressions": [],
    "properties": []
  },
  {
    "name": "StateExp",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "validateTypeIsNotInvalid",
      "body": "type <> OclInvalid\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": ["referredState"]
  },
  {
    "name": "IterateExp",
    "expressions": [
      {
        "operations": {"implies": 1},
        "name": "validateSafeIteratorIsRequired",
        "body": "isSafe implies ownedIterators?->forAll(isRequired)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "pivot::CallExp::isSafe",
          "pivot::LoopExp::ownedIterators",
          "pivot::TypedElement::isRequired"
        ]
      },
      {
        "operations": {
          "not": 1,
          "and": 1,
          "implies": 1,
          "oclAsType": 1
        },
        "name": "validateUnsafeSourceCanNotBeNull",
        "body": "(not isSafe and ownedIterators?->exists(isRequired)) implies ownedSource?.type.oclAsType(CollectionType).isNullFree\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 4,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "pivot::CollectionType::isNullFree",
          "pivot::CallExp::isSafe",
          "pivot::LoopExp::ownedIterators",
          "pivot::TypedElement::isRequired",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {"conformsTo": 1},
        "name": "validateBodyTypeConformsToResultType",
        "body": "ownedBody.type.conformsTo(ownedResult?.type)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::LoopExp::ownedBody",
          "pivot::TypedElement::type",
          "pivot::IterateExp::ownedResult"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "validateTypeIsResultType",
        "body": "type = ownedResult?.type\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "pivot::TypedElement::type",
          "pivot::IterateExp::ownedResult"
        ]
      },
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "=": 1
        },
        "name": "validateOneInitializer",
        "body": "self.ownedResult?.ownedInit->size() = 1\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::Variable::ownedInit",
          "pivot::IterateExp::ownedResult"
        ]
      },
      {
        "operations": {
          "not": 1,
          "implies": 1,
          "oclAsType": 1
        },
        "name": "validateSafeSourceCanBeNull",
        "body": "isSafe implies not ownedSource?.type.oclAsType(CollectionType).isNullFree\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::CollectionType::isNullFree",
          "pivot::CallExp::isSafe",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      }
    ],
    "properties": ["ownedResult"]
  },
  {
    "name": "Object",
    "expressions": [],
    "properties": []
  },
  {
    "name": "NamedElement",
    "expressions": [],
    "properties": ["name"]
  },
  {
    "name": "CollectionRange",
    "expressions": [],
    "properties": [
      "ownedFirst",
      "ownedLast"
    ]
  },
  {
    "name": "CollectionLiteralExp",
    "expressions": [
      {
        "operations": {
          "oclIsKindOf": 1,
          "implies": 1,
          "=": 1
        },
        "name": "validateSequenceKindIsSequence",
        "body": "kind = CollectionKind::Sequence implies type.oclIsKindOf(SequenceType)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "EnumLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::CollectionLiteralExp::kind",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {"<>": 1},
        "name": "validateCollectionKindIsConcrete",
        "body": "kind <> CollectionKind::Collection\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "EnumLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["pivot::CollectionLiteralExp::kind"]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "implies": 1,
          "=": 1
        },
        "name": "validateOrderedSetKindIsOrderedSet",
        "body": "kind = CollectionKind::OrderedSet implies type.oclIsKindOf(OrderedSetType)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "EnumLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::CollectionLiteralExp::kind",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "implies": 1,
          "=": 1
        },
        "name": "validateBagKindIsBag",
        "body": "kind = CollectionKind::Bag implies type.oclIsKindOf(BagType)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "EnumLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::CollectionLiteralExp::kind",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "implies": 1,
          "=": 1
        },
        "name": "validateSetKindIsSet",
        "body": "kind = CollectionKind::Set implies type.oclIsKindOf(SetType)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "EnumLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::CollectionLiteralExp::kind",
          "pivot::TypedElement::type"
        ]
      }
    ],
    "properties": [
      "ownedParts",
      "kind"
    ]
  },
  {
    "name": "Transition",
    "expressions": [],
    "properties": [
      "ownedEffect",
      "owningRegion",
      "ownedGuard",
      "ownedTriggers",
      "kind",
      "target",
      "source"
    ]
  },
  {
    "name": "SendSignalAction",
    "expressions": [],
    "properties": [
      "signal",
      "MessageExp"
    ]
  },
  {
    "name": "StringLiteralExp",
    "expressions": [],
    "properties": ["stringSymbol"]
  },
  {
    "name": "TemplateableElement",
    "expressions": [],
    "properties": [
      "ownedSignature",
      "unspecializedElement",
      "ownedBindings"
    ]
  },
  {
    "name": "LetExp",
    "expressions": [
      {
        "operations": {"<>": 1},
        "name": "validateTypeIsNotInvalid",
        "body": "type <> OclInvalid\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["pivot::TypedElement::type"]
      },
      {
        "operations": {"=": 1},
        "name": "validateTypeIsInType",
        "body": "type = ownedIn.type\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "pivot::LetExp::ownedIn",
          "pivot::TypedElement::type"
        ]
      }
    ],
    "properties": [
      "ownedIn",
      "ownedVariable"
    ]
  },
  {
    "name": "Detail",
    "expressions": [],
    "properties": [
      "values",
      "Annotation"
    ]
  },
  {
    "name": "TemplateBinding",
    "expressions": [],
    "properties": [
      "owningElement",
      "ownedSubstitutions",
      "templateSignature"
    ]
  },
  {
    "name": "PropertyCallExp",
    "expressions": [
      {
        "operations": {
          "not": 1,
          "<>": 1,
          "and": 1,
          "implies": 1
        },
        "name": "validateUnsafeSourceCanNotBeNull",
        "body": "(ownedSource <> null) and not isSafe implies ownedSource?.isRequired\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "NullLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::CallExp::isSafe",
          "pivot::TypedElement::isRequired",
          "pivot::CallExp::ownedSource"
        ]
      },
      {
        "operations": {
          "getSpecializedReferredPropertyType": 1,
          "=": 1
        },
        "name": "validateCompatibleResultType",
        "body": "type = getSpecializedReferredPropertyType()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["pivot::TypedElement::type"]
      },
      {
        "operations": {
          "not": 1,
          "getSpecializedReferredPropertyOwningType": 1,
          "conformsTo": 1,
          "implies": 1
        },
        "name": "validateNonStaticSourceTypeIsConformant",
        "body": "not referredProperty?.isStatic implies \n\townedSource?.type.conformsTo(getSpecializedReferredPropertyOwningType())\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::Feature::isStatic",
          "pivot::PropertyCallExp::referredProperty",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {},
        "name": "getSpecializedReferredPropertyOwningType",
        "body": "referredProperty?.owningClass ",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::PropertyCallExp::referredProperty",
          "pivot::Property::owningClass"
        ]
      },
      {
        "operations": {"oclAsType": 1},
        "name": "getSpecializedReferredPropertyType",
        "body": "referredProperty?.type.oclAsType(Class) ",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::PropertyCallExp::referredProperty",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "<>": 1,
          "not": 1,
          "and": 1,
          "implies": 1
        },
        "name": "validateSafeSourceCanBeNull",
        "body": "(ownedSource <> null) and isSafe implies not ownedSource?.isRequired\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "NullLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::CallExp::isSafe",
          "pivot::TypedElement::isRequired",
          "pivot::CallExp::ownedSource"
        ]
      }
    ],
    "properties": ["referredProperty"]
  },
  {
    "name": "TemplateParameter",
    "expressions": [],
    "properties": [
      "owningSignature",
      "constrainingClasses",
      "TemplateParameterSubstitution"
    ]
  },
  {
    "name": "TupleLiteralExp",
    "expressions": [],
    "properties": ["ownedParts"]
  },
  {
    "name": "CollectionType",
    "expressions": [],
    "properties": [
      "elementType",
      "upper",
      "lower",
      "isNullFree"
    ]
  },
  {
    "name": "Region",
    "expressions": [],
    "properties": [
      "owningStateMachine",
      "extendedRegion",
      "owningState",
      "ownedSubvertexes",
      "Region",
      "ownedTransitions"
    ]
  },
  {
    "name": "InvalidType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Pseudostate",
    "expressions": [],
    "properties": [
      "ConnectionPointReference",
      "ConnectionPointReference",
      "kind",
      "owningState",
      "owningStateMachine"
    ]
  },
  {
    "name": "Parameter",
    "expressions": [],
    "properties": [
      "owningOperation",
      "Variable",
      "Iteration",
      "Iteration",
      "isTypeof"
    ]
  },
  {
    "name": "AnyType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CompletePackage",
    "expressions": [],
    "properties": [
      "ownedCompletePackages",
      "ownedCompleteClasses",
      "partialPackages",
      "owningCompleteModel",
      "owningCompletePackage"
    ]
  },
  {
    "name": "PrimitiveLiteralExp",
    "expressions": [],
    "properties": []
  },
  {
    "name": "PrimitiveType",
    "expressions": [],
    "properties": ["coercions"]
  },
  {
    "name": "ExpressionInOCL",
    "expressions": [],
    "properties": [
      "ownedParameters",
      "ownedBody",
      "ownedContext",
      "ownedResult"
    ]
  },
  {
    "name": "State",
    "expressions": [],
    "properties": [
      "redefinedState",
      "isSubmachineState",
      "StateExp",
      "isOrthogonal",
      "ownedEntry",
      "ownedRegions",
      "isSimple",
      "ownedDoActivity",
      "ownedStateInvariant",
      "submachines",
      "ownedDeferrableTriggers",
      "State",
      "ownedExit",
      "ownedConnectionPoints",
      "isComposite",
      "ownedConnections"
    ]
  },
  {
    "name": "InstanceSpecification",
    "expressions": [],
    "properties": [
      "ownedSlots",
      "ownedSpecification",
      "classes",
      "owningPackage"
    ]
  },
  {
    "name": "Element",
    "expressions": [
      {
        "operations": {
          "selectByKind": 1,
          "oclAsSet": 1,
          "oclContents": 1
        },
        "name": "allOwnedElements",
        "body": "\n\tself->closure(oclContents()->selectByKind(Element))\n\n",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {},
        "name": "getValue",
        "body": "null\n\n",
        "type": "OperationImpl",
        "constructs": {"NullLiteralExpImpl": 1},
        "properties": []
      }
    ],
    "properties": [
      "ownedAnnotations",
      "Annotation",
      "ownedComments",
      "ownedExtensions",
      "Constraint",
      "Element",
      "Annotation",
      "annotatingComments"
    ]
  },
  {
    "name": "UnspecifiedValueExp",
    "expressions": [],
    "properties": []
  },
  {
    "name": "LambdaType",
    "expressions": [],
    "properties": [
      "contextType",
      "resultType",
      "parameterType"
    ]
  },
  {
    "name": "Model",
    "expressions": [],
    "properties": [
      "ownedPackages",
      "ownedImports",
      "externalURI",
      "CompleteModel"
    ]
  },
  {
    "name": "Variable",
    "expressions": [{
      "operations": {
        "<>": 1,
        "conformsTo": 1,
        "implies": 1
      },
      "name": "validateCompatibleInitialiserType",
      "body": "ownedInit <> null implies ownedInit?.type?.conformsTo(type)\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 3,
        "OperationCallExpImpl": 3,
        "NullLiteralExpImpl": 1,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "pivot::TypedElement::type",
        "pivot::Variable::ownedInit"
      ]
    }],
    "properties": [
      "isImplicit",
      "representedParameter",
      "LetExp",
      "ExpressionInOCL",
      "ExpressionInOCL",
      "IterateExp",
      "LoopExp",
      "ownedInit",
      "ExpressionInOCL"
    ]
  },
  {
    "name": "InvalidLiteralExp",
    "expressions": [],
    "properties": []
  },
  {
    "name": "NullLiteralExp",
    "expressions": [],
    "properties": []
  },
  {
    "name": "VoidType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "EnumerationLiteral",
    "expressions": [],
    "properties": [
      "EnumLiteralExp",
      "value",
      "owningEnumeration"
    ]
  },
  {
    "name": "TransitionKind",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Import",
    "expressions": [],
    "properties": [
      "importedNamespace",
      "Model"
    ]
  },
  {
    "name": "AssociationClass",
    "expressions": [],
    "properties": [
      "unownedAttributes",
      "AssociationClassCallExp"
    ]
  },
  {
    "name": "AssociationClassCallExp",
    "expressions": [],
    "properties": ["referredAssociationClass"]
  },
  {
    "name": "TemplateParameterSubstitution",
    "expressions": [],
    "properties": [
      "ownedWildcard",
      "actual",
      "formal",
      "owningBinding"
    ]
  },
  {
    "name": "TupleLiteralPart",
    "expressions": [],
    "properties": [
      "TupleLiteralExp",
      "ownedInit"
    ]
  },
  {
    "name": "CompleteModel",
    "expressions": [],
    "properties": [
      "owningCompleteEnvironment",
      "partialModels",
      "ownedCompletePackages",
      "orphanCompletePackage",
      "primitiveCompletePackage"
    ]
  },
  {
    "name": "PrimitiveCompletePackage",
    "expressions": [],
    "properties": ["CompleteModel"]
  },
  {
    "name": "Library",
    "expressions": [],
    "properties": ["ownedPrecedences"]
  },
  {
    "name": "OperationCallExp",
    "expressions": [
      {
        "operations": {
          "not": 1,
          "<>": 1,
          "and": 1,
          "implies": 1
        },
        "name": "validateSafeSourceCanBeNull",
        "body": "(ownedSource <> null) and isSafe implies not ownedSource?.isRequired\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "NullLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::CallExp::isSafe",
          "pivot::TypedElement::isRequired",
          "pivot::CallExp::ownedSource"
        ]
      },
      {
        "operations": {
          "at": 2,
          "size": 1,
          "conformsTo": 1,
          "specializeIn": 1
        },
        "name": "validateArgumentTypeIsConformant",
        "body": "\n\tlet operation : Operation = self.referredOperation in\n\tlet parameters : OrderedSet(Parameter) = operation?.ownedParameters in\n\tlet selfType : Type = operation?.owningClass in\n\tSequence{1..ownedArguments->size()}->forAll (i | \n\t\tlet argument : OCLExpression = ownedArguments->at(i) in\n\t\tlet parameter : Parameter = parameters->at(i) in\n\t\tlet parameterType : Type = parameter?.type in\n\t\tlet requiredType : Type = if parameter?.isTypeof then Class else parameterType.specializeIn(self, selfType) endif in\n\t\targument?.type.conformsTo(requiredType))\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 15,
          "OperationCallExpImpl": 5,
          "LetExpImpl": 7,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 8
        },
        "properties": [
          "pivot::Parameter::isTypeof",
          "pivot::Operation::owningClass",
          "pivot::OperationCallExp::referredOperation",
          "pivot::OperationCallExp::ownedArguments",
          "pivot::TypedElement::type",
          "pivot::Operation::ownedParameters"
        ]
      },
      {
        "operations": {
          "size": 2,
          "=": 1
        },
        "name": "validateArgumentCount",
        "body": "ownedArguments->size() = referredOperation?.ownedParameters->size()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "pivot::OperationCallExp::referredOperation",
          "pivot::OperationCallExp::ownedArguments",
          "pivot::Operation::ownedParameters"
        ]
      }
    ],
    "properties": [
      "referredOperation",
      "isVirtual",
      "ownedArguments"
    ]
  },
  {
    "name": "Package",
    "expressions": [],
    "properties": [
      "Model",
      "ownedProfileApplications",
      "CompletePackage",
      "ownedInstances",
      "Package",
      "ownedClasses",
      "owningPackage",
      "nsPrefix",
      "URI",
      "importedPackages",
      "ownedPackages"
    ]
  },
  {
    "name": "CompleteEnvironment",
    "expressions": [],
    "properties": [
      "ownedStandardLibrary",
      "ownedCompleteModel"
    ]
  },
  {
    "name": "Operation",
    "expressions": [
      {
        "operations": {},
        "name": "validateUniquePreconditionName",
        "body": "ownedPreconditions->isUnique(p | p?.name)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::Operation::ownedPreconditions",
          "pivot::NamedElement::name"
        ]
      },
      {
        "operations": {
          "<>": 2,
          "and": 1,
          "implies": 1,
          "oclAsType": 1,
          "CompatibleBody": 1
        },
        "name": "validateCompatibleReturn",
        "body": "bodyExpression <> null and bodyExpression.oclAsType(ExpressionInOCL).ownedBody <> null implies CompatibleBody(bodyExpression)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 6,
          "NullLiteralExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::Operation::bodyExpression",
          "pivot::ExpressionInOCL::ownedBody"
        ]
      },
      {
        "operations": {},
        "name": "validateUniquePostconditionName",
        "body": "ownedPostconditions->isUnique(p | p?.name)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::NamedElement::name",
          "pivot::Operation::ownedPostconditions"
        ]
      },
      {
        "operations": {},
        "name": "validateLoadableImplementation",
        "body": "\n\ttrue\n",
        "type": "ConstraintImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      }
    ],
    "properties": [
      "redefinedOperations",
      "isInvalidating",
      "Operation",
      "OperationCallExp",
      "ownedPreconditions",
      "MessageType",
      "precedence",
      "isTypeof",
      "ownedParameters",
      "raisedExceptions",
      "CallOperationAction",
      "owningClass",
      "ownedPostconditions",
      "PrimitiveType",
      "isValidating",
      "bodyExpression"
    ]
  },
  {
    "name": "Pivotable",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CollectionItem",
    "expressions": [{
      "operations": {"=": 1},
      "name": "validateTypeIsItemType",
      "body": "type = ownedItem.type\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 2,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "pivot::CollectionItem::ownedItem",
        "pivot::TypedElement::type"
      ]
    }],
    "properties": ["ownedItem"]
  },
  {
    "name": "ShadowExp",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "validateTypeIsNotInvalid",
      "body": "type <> OclInvalid\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": [
      "ownedParts",
      "value"
    ]
  },
  {
    "name": "FinalState",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Nameable",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Trigger",
    "expressions": [],
    "properties": [
      "owningTransition",
      "owningState"
    ]
  },
  {
    "name": "ConnectionPointReference",
    "expressions": [],
    "properties": [
      "owningState",
      "entries",
      "exits"
    ]
  },
  {
    "name": "OCLExpression",
    "expressions": [],
    "properties": [
      "CollectionRange",
      "ShadowPart",
      "TupleLiteralPart",
      "IfExp",
      "MapLiteralPart",
      "CollectionRange",
      "CallExp",
      "Variable",
      "CollectionItem",
      "OperationCallExp",
      "LetExp",
      "IfExp",
      "NavigationCallExp",
      "MapLiteralPart",
      "IfExp",
      "LoopExp",
      "typeValue",
      "MessageExp",
      "MessageExp",
      "ExpressionInOCL"
    ]
  },
  {
    "name": "Signal",
    "expressions": [],
    "properties": [
      "MessageType",
      "SendSignalAction"
    ]
  },
  {
    "name": "Enumeration",
    "expressions": [],
    "properties": ["ownedLiterals"]
  },
  {
    "name": "NavigationCallExp",
    "expressions": [],
    "properties": [
      "navigationSource",
      "qualifiers"
    ]
  },
  {
    "name": "String",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Integer",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CallOperationAction",
    "expressions": [],
    "properties": [
      "MessageExp",
      "operation"
    ]
  },
  {
    "name": "Stereotype",
    "expressions": [],
    "properties": [
      "ownedExtenders",
      "ElementExtension"
    ]
  },
  {
    "name": "Comment",
    "expressions": [],
    "properties": [
      "owningElement",
      "body",
      "annotatedElements"
    ]
  },
  {
    "name": "IfExp",
    "expressions": [
      {
        "operations": {"<>": 1},
        "name": "validateTypeIsNotInvalid",
        "body": "type <> OclInvalid\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["pivot::TypedElement::type"]
      },
      {
        "operations": {"=": 1},
        "name": "validateConditionTypeIsBoolean",
        "body": "self.ownedCondition.type = Boolean\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::IfExp::ownedCondition",
          "pivot::TypedElement::type"
        ]
      }
    ],
    "properties": [
      "ownedThen",
      "ownedElse",
      "ownedCondition"
    ]
  },
  {
    "name": "ProfileApplication",
    "expressions": [],
    "properties": [
      "appliedProfile",
      "isStrict",
      "owningPackage"
    ]
  },
  {
    "name": "MapLiteralPart",
    "expressions": [],
    "properties": [
      "ownedKey",
      "ownedValue",
      "MapLiteralExp"
    ]
  },
  {
    "name": "MessageExp",
    "expressions": [
      {
        "operations": {
          "size": 2,
          "oclAsSet": 2,
          "+": 1,
          "=": 1
        },
        "name": "validateOneCallOrOneSend",
        "body": "ownedCalledOperation->size() + ownedSentSignal->size() = 1\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::MessageExp::ownedCalledOperation",
          "pivot::MessageExp::ownedSentSignal"
        ]
      },
      {
        "operations": {
          "not": 1,
          "oclIsKindOf": 1
        },
        "name": "validateTargetIsNotACollection",
        "body": "not ownedTarget.type.oclIsKindOf(CollectionType)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::MessageExp::ownedTarget",
          "pivot::TypedElement::type"
        ]
      }
    ],
    "properties": [
      "ownedArguments",
      "ownedSentSignal",
      "ownedCalledOperation",
      "ownedTarget"
    ]
  },
  {
    "name": "CollectionKind",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Annotation",
    "expressions": [],
    "properties": [
      "references",
      "ownedContents",
      "ownedDetails"
    ]
  },
  {
    "name": "SetType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "DynamicBehavior",
    "expressions": [],
    "properties": []
  },
  {
    "name": "StandardLibrary",
    "expressions": [],
    "properties": ["owningCompleteEnvironment"]
  },
  {
    "name": "LanguageExpression",
    "expressions": [],
    "properties": [
      "Operation",
      "language",
      "owningConstraint",
      "Property",
      "body",
      "InstanceSpecification"
    ]
  },
  {
    "name": "Throwable",
    "expressions": [],
    "properties": []
  },
  {
    "name": "WildcardType",
    "expressions": [],
    "properties": [
      "TemplateParameterSubstitution",
      "upperBound",
      "lowerBound"
    ]
  },
  {
    "name": "SequenceType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "StereotypeExtender",
    "expressions": [],
    "properties": [
      "owningStereotype",
      "isRequired",
      "class"
    ]
  },
  {
    "name": "LiteralExp",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Profile",
    "expressions": [],
    "properties": ["profileApplications"]
  },
  {
    "name": "ReferringElement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "FeatureCallExp",
    "expressions": [],
    "properties": ["isPre"]
  },
  {
    "name": "Boolean",
    "expressions": [],
    "properties": []
  },
  {
    "name": "PseudostateKind",
    "expressions": [],
    "properties": []
  },
  {
    "name": "IteratorExp",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "implies": 1,
          "=": 2
        },
        "name": "validateAnyHasOneIterator",
        "body": "name = 'any' implies ownedIterators->size() = 1\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::LoopExp::ownedIterators",
          "pivot::NamedElement::name"
        ]
      },
      {
        "operations": {
          "flattenedType": 1,
          "implies": 1,
          "=": 2,
          "oclAsType": 1
        },
        "name": "validateCollectElementTypeIsFlattenedBodyType",
        "body": "name = 'collect' implies\ntype.oclAsType(CollectionType).elementType = ownedBody.type.flattenedType()\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 3,
          "TypeExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "pivot::LoopExp::ownedBody",
          "pivot::NamedElement::name",
          "pivot::CollectionType::elementType",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {},
        "name": "validateClosureBodyTypeIsConformanttoIteratorType",
        "body": "\n\ttrue\n",
        "type": "ConstraintImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {
          "or": 1,
          "oclIsKindOf": 4,
          "implies": 1,
          "=": 1
        },
        "name": "validateSortedByIsOrderedIfSourceIsOrdered",
        "body": "name = 'sortedBy' implies\nif ownedSource?.type.oclIsKindOf(SequenceType) or ownedSource?.type.oclIsKindOf(BagType) then\ntype.oclIsKindOf(SequenceType)\nelse\ntype.oclIsKindOf(OrderedSetType)\nendif\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 7,
          "VariableExpImpl": 5,
          "TypeExpImpl": 4,
          "StringLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "pivot::NamedElement::name",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "implies": 1,
          "=": 2,
          "oclAsType": 1
        },
        "name": "validateAnyTypeIsSourceElementType",
        "body": "name = 'any' implies type = ownedSource?.type?.oclAsType(CollectionType).elementType\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "TypeExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "pivot::NamedElement::name",
          "pivot::CollectionType::elementType",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {"implies": 1},
        "name": "validateSafeIteratorIsRequired",
        "body": "isSafe implies ownedIterators?->forAll(isRequired)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "pivot::CallExp::isSafe",
          "pivot::LoopExp::ownedIterators",
          "pivot::TypedElement::isRequired"
        ]
      },
      {
        "operations": {
          "not": 1,
          "implies": 1,
          "oclAsType": 1
        },
        "name": "validateSafeSourceCanBeNull",
        "body": "isSafe implies not ownedSource?.type.oclAsType(CollectionType).isNullFree\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::CollectionType::isNullFree",
          "pivot::CallExp::isSafe",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {},
        "name": "validateSortedByIteratorTypeIsComparable",
        "body": "\n\ttrue\n\n",
        "type": "ConstraintImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {
          "implies": 1,
          "oclAsType": 2,
          "=": 2
        },
        "name": "validateSortedByElementTypeIsSourceElementType",
        "body": "name = 'sortedBy' implies\ntype.oclAsType(CollectionType).elementType =\nownedBody.type.oclAsType(CollectionType).elementType\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 3,
          "TypeExpImpl": 2,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "pivot::LoopExp::ownedBody",
          "pivot::CollectionType::elementType",
          "pivot::NamedElement::name",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "implies": 1,
          "=": 2,
          "oclAsType": 2
        },
        "name": "validateClosureElementTypeIsSourceElementType",
        "body": "name = 'closure' implies\ntype.oclAsType(CollectionType).elementType\n= ownedSource?.type.oclAsType(CollectionType).elementType\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 3,
          "TypeExpImpl": 2,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "pivot::CollectionType::elementType",
          "pivot::NamedElement::name",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "or": 1,
          "oclIsKindOf": 4,
          "implies": 1,
          "=": 1
        },
        "name": "validateCollectTypeIsUnordered",
        "body": "name = 'collect' implies\nif ownedSource?.type.oclIsKindOf(SequenceType) or ownedSource?.type.oclIsKindOf(OrderedSetType) then\ntype.oclIsKindOf(SequenceType)\nelse\ntype.oclIsKindOf(BagType)\nendif\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 7,
          "StringLiteralExpImpl": 1,
          "TypeExpImpl": 4,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "pivot::NamedElement::name",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "or": 1,
          "oclIsKindOf": 4,
          "implies": 1,
          "=": 1
        },
        "name": "validateClosureTypeIsUniqueCollection",
        "body": "name = 'closure' implies\nif ownedSource?.type?.oclIsKindOf(SequenceType) or ownedSource?.type.oclIsKindOf(OrderedSetType) then\ntype.oclIsKindOf(OrderedSetType)\nelse\ntype.oclIsKindOf(SetType)\nendif\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 7,
          "TypeExpImpl": 4,
          "StringLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "pivot::NamedElement::name",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "size": 1,
          "implies": 1,
          "=": 2
        },
        "name": "validateClosureHasOneIterator",
        "body": "name = 'closure' implies ownedIterators->size() = 1\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::LoopExp::ownedIterators",
          "pivot::NamedElement::name"
        ]
      },
      {
        "operations": {
          "not": 1,
          "and": 1,
          "implies": 1,
          "oclAsType": 1
        },
        "name": "validateUnsafeSourceCanNotBeNull",
        "body": "(not isSafe and ownedIterators?->exists(isRequired)) implies ownedSource?.type.oclAsType(CollectionType).isNullFree\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 4,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "pivot::CollectionType::isNullFree",
          "pivot::CallExp::isSafe",
          "pivot::LoopExp::ownedIterators",
          "pivot::TypedElement::isRequired",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "implies": 1,
          "=": 2
        },
        "name": "validateAnyBodyTypeIsBoolean",
        "body": "name = 'any' implies ownedBody.type = 'Boolean'\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "pivot::LoopExp::ownedBody",
          "pivot::NamedElement::name",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "conformsTo": 1,
          "oclAsType": 1
        },
        "name": "validateIteratorTypeIsSourceElementType",
        "body": "self.ownedIterators->forAll(p | ownedSource?.type.oclAsType(CollectionType).elementType.conformsTo(p?.type))\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "pivot::LoopExp::ownedIterators",
          "pivot::CollectionType::elementType",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "implies": 1,
          "oclAsType": 2,
          "=": 2
        },
        "name": "validateClosureSourceElementTypeIsBodyElementType",
        "body": "name = 'closure' implies\nownedSource?.type.oclAsType(CollectionType).elementType =\nif ownedBody.type.oclIsKindOf(CollectionType)\nthen ownedBody.type.oclAsType(CollectionType).elementType\nelse ownedBody.type\nendif\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 5,
          "TypeExpImpl": 3,
          "StringLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 11
        },
        "properties": [
          "pivot::LoopExp::ownedBody",
          "pivot::NamedElement::name",
          "pivot::CollectionType::elementType",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "UnlimitedNaturalLiteralExp",
    "expressions": [],
    "properties": ["unlimitedNaturalSymbol"]
  },
  {
    "name": "Behavior",
    "expressions": [],
    "properties": [
      "owningTransition",
      "State",
      "State",
      "Class",
      "State"
    ]
  },
  {
    "name": "DynamicValueSpecification",
    "expressions": [],
    "properties": []
  },
  {
    "name": "NumericLiteralExp",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Real",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CompleteClass",
    "expressions": [],
    "properties": [
      "partialClasses",
      "owningCompletePackage"
    ]
  },
  {
    "name": "TemplateSignature",
    "expressions": [],
    "properties": [
      "TemplateBinding",
      "owningElement",
      "ownedParameters"
    ]
  },
  {
    "name": "LibraryFeature",
    "expressions": [],
    "properties": []
  },
  {
    "name": "MapLiteralExp",
    "expressions": [],
    "properties": ["ownedParts"]
  },
  {
    "name": "DataType",
    "expressions": [],
    "properties": [
      "behavioralClass",
      "isSerializable"
    ]
  },
  {
    "name": "DynamicElement",
    "expressions": [],
    "properties": ["metaType"]
  },
  {
    "name": "BagType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "MessageType",
    "expressions": [],
    "properties": [
      "referredOperation",
      "referredSignal"
    ]
  },
  {
    "name": "Type",
    "expressions": [
      {
        "operations": {},
        "name": "flattenedType",
        "body": "self\n\n",
        "type": "OperationImpl",
        "constructs": {"VariableExpImpl": 1},
        "properties": []
      },
      {
        "operations": {},
        "name": "specializeIn",
        "body": "self\n\n",
        "type": "OperationImpl",
        "constructs": {"VariableExpImpl": 1},
        "properties": []
      }
    ],
    "properties": [
      "LambdaType",
      "TypedElement",
      "CollectionType",
      "WildcardType",
      "Operation",
      "WildcardType",
      "LambdaType",
      "MapType",
      "TypeExp",
      "DynamicElement",
      "TemplateParameterSubstitution",
      "LambdaType",
      "MapType"
    ]
  },
  {
    "name": "VariableDeclaration",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "validateTypeIsNotInvalid",
      "body": "type <> OclInvalid\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": [
      "VariableExp",
      "typeValue"
    ]
  },
  {
    "name": "Constraint",
    "expressions": [{
      "operations": {},
      "name": "validateUniqueName",
      "body": "true ",
      "type": "ConstraintImpl",
      "constructs": {"BooleanLiteralExpImpl": 1},
      "properties": []
    }],
    "properties": [
      "isCallable",
      "redefinedConstraints",
      "Class",
      "owningPreContext",
      "Namespace",
      "context",
      "owningPostContext",
      "owningState",
      "Constraint",
      "constrainedElements",
      "ownedSpecification",
      "owningTransition"
    ]
  },
  {
    "name": "StateMachine",
    "expressions": [],
    "properties": [
      "ownedConnectionPoints",
      "submachineStates",
      "ownedRegions",
      "extendedStateMachines",
      "StateMachine"
    ]
  },
  {
    "name": "TupleType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "OrphanCompletePackage",
    "expressions": [],
    "properties": ["CompleteModel"]
  },
  {
    "name": "Precedence",
    "expressions": [],
    "properties": [
      "Operation",
      "Library",
      "associativity",
      "order"
    ]
  },
  {
    "name": "OppositePropertyCallExp",
    "expressions": [],
    "properties": ["referredProperty"]
  },
  {
    "name": "Namespace",
    "expressions": [],
    "properties": [
      "Constraint",
      "ownedConstraints",
      "Import"
    ]
  },
  {
    "name": "RealLiteralExp",
    "expressions": [],
    "properties": ["realSymbol"]
  },
  {
    "name": "UnlimitedNatural",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SelfType",
    "expressions": [{
      "operations": {},
      "name": "specializeIn",
      "body": "selfType\n\n",
      "type": "OperationImpl",
      "constructs": {"VariableExpImpl": 1},
      "properties": []
    }],
    "properties": []
  },
  {
    "name": "ValueSpecification",
    "expressions": [],
    "properties": ["Slot"]
  },
  {
    "name": "MorePivotable",
    "expressions": [],
    "properties": []
  },
  {
    "name": "VariableExp",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "validateTypeIsNotInvalid",
      "body": "type <> OclInvalid\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": [
      "isImplicit",
      "referredVariable"
    ]
  },
  {
    "name": "Property",
    "expressions": [
      {
        "operations": {
          "oclIsKindOf": 1,
          "and": 1,
          "includes": 1,
          "oclAsType": 1,
          "oclContainer": 1
        },
        "name": "isAttribute",
        "body": "\n--Type.allInstances()->exists(c| c.ownedAttribute->includes(p))\nlet container : ocl::OclElement = oclContainer() in container.oclIsKindOf(Class) and container.oclAsType(Class).ownedProperties->includes(self)\n\n",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 5,
          "LetExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["pivot::Class::ownedProperties"]
      },
      {
        "operations": {
          "<>": 2,
          "and": 1,
          "implies": 1,
          "oclAsType": 1,
          "CompatibleBody": 1
        },
        "name": "validateCompatibleDefaultExpression",
        "body": "ownedExpression <> null and ownedExpression.oclAsType(ExpressionInOCL).ownedBody <> null implies CompatibleBody(ownedExpression)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 6,
          "NullLiteralExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::ExpressionInOCL::ownedBody",
          "pivot::Property::ownedExpression"
        ]
      }
    ],
    "properties": [
      "isComposite",
      "Property",
      "referredProperty",
      "subsettedProperty",
      "DynamicProperty",
      "ShadowPart",
      "isTransient",
      "isReadOnly",
      "owningClass",
      "defaultValue",
      "isID",
      "Property",
      "ownedExpression",
      "Property",
      "isUnsettable",
      "redefinedProperties",
      "isResolveProxies",
      "Slot",
      "isImplicit",
      "defaultValueString",
      "NavigationCallExp",
      "PropertyCallExp",
      "OppositePropertyCallExp",
      "opposite",
      "keys",
      "isVolatile",
      "Property",
      "Property",
      "associationClass",
      "isDerived"
    ]
  },
  {
    "name": "Feature",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "validateTypeIsNotInvalid",
      "body": "type <> OclInvalid\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": [
      "isStatic",
      "implementation",
      "implementationClass"
    ]
  },
  {
    "name": "TypedElement",
    "expressions": [{
      "operations": {"conformsTo": 1},
      "name": "CompatibleBody",
      "body": "\n\tbodySpecification.type?.conformsTo(self.type)\n\n",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": [
      "type",
      "isMany",
      "isRequired"
    ]
  },
  {
    "name": "IntegerLiteralExp",
    "expressions": [{
      "operations": {"=": 1},
      "name": "validateTypeIsInteger",
      "body": "self.type = Integer\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": ["integerSymbol"]
  },
  {
    "name": "BooleanLiteralExp",
    "expressions": [{
      "operations": {"=": 1},
      "name": "validateTypeIsBoolean",
      "body": "self.type = Boolean\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": ["booleanSymbol"]
  },
  {
    "name": "CollectionLiteralPart",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "validateTypeIsNotInvalid",
      "body": "type <> OclInvalid\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": ["CollectionLiteralExp"]
  },
  {
    "name": "Iteration",
    "expressions": [],
    "properties": [
      "LoopExp",
      "ownedIterators",
      "ownedAccumulators"
    ]
  },
  {
    "name": "MapType",
    "expressions": [],
    "properties": [
      "valueType",
      "keyType"
    ]
  }
]
