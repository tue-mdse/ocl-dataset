[
  {
    "name": "NodesDiagram",
    "expressions": [],
    "properties": ["nodes"]
  },
  {
    "name": "Storage",
    "expressions": [],
    "properties": [
      "Type",
      "Size"
    ]
  },
  {
    "name": "SecurityGroup",
    "expressions": [],
    "properties": [
      "IPRange",
      "VPCName"
    ]
  },
  {
    "name": "StorageType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Connection",
    "expressions": [],
    "properties": [
      "source",
      "Node",
      "target",
      "Node"
    ]
  },
  {
    "name": "Network",
    "expressions": [],
    "properties": ["Type"]
  },
  {
    "name": "OSType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CPUType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Node",
    "expressions": [
      {
        "operations": {
          "size": 1,
          ">": 1
        },
        "name": "NodeNameCannotBeEmpty",
        "body": "Tuple {\n\tmessage : String = 'Name must not be empty.',\n\tstatus : Boolean = \n\t\t\tif name.size() > 0 then true else null endif\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "TupleLiteralExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 2,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "CProvML::Node::name",
          "$$::Tuple::status"
        ]
      },
      {
        "operations": {
          "<>": 3,
          "and": 1,
          "implies": 1
        },
        "name": "NodesCannotBeConnectedMoreThanOnce",
        "body": "Tuple {\n\tmessage : String = 'Nodes may not connect more than once.',\n\tstatus : Boolean = \n\t\t\tlet selfConnections : Boolean = sourceConnections->forAll(a | sourceConnections->forAll(b | a <> b implies a.target <> b.target)) in \n\t\t\tlet otherConnections : Boolean = sourceConnections->forAll(sc | sc.target.sourceConnections->forAll(tc | sc.source <> tc.target)) in\n\t\t\tif selfConnections and otherConnections then true else null endif\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 12,
          "LetExpImpl": 2,
          "NullLiteralExpImpl": 1,
          "TupleLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 10,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "CProvML::Connection::source",
          "CProvML::Connection::target",
          "CProvML::Node::sourceConnections",
          "$$::Tuple::status"
        ]
      },
      {
        "operations": {"<>": 1},
        "name": "NodesCannotBeConnectedToSelf",
        "body": "Tuple {\n\tmessage : String = 'Node cannot connect to itself.',\n\tstatus : Boolean = \n\t\t\tif sourceConnections->forAll(c | c.source <> c.target) then true else null endif\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "TupleLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 4,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "CProvML::Connection::source",
          "CProvML::Connection::target",
          "CProvML::Node::sourceConnections",
          "$$::Tuple::status"
        ]
      }
    ],
    "properties": [
      "NodesDiagram",
      "Connection",
      "name",
      "targetConnections",
      "sourceConnections",
      "Connection"
    ]
  },
  {
    "name": "Environment",
    "expressions": [],
    "properties": []
  },
  {
    "name": "NetworkType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Instance",
    "expressions": [],
    "properties": [
      "RAM",
      "CPU",
      "OS"
    ]
  }
]
