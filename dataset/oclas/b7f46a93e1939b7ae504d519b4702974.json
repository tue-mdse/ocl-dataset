[
  {
    "name": "Feature",
    "expressions": [],
    "properties": [
      "multiplicityConstraint",
      "DataStructure"
    ]
  },
  {
    "name": "RangeMultiplicity",
    "expressions": [],
    "properties": [
      "minOccurs",
      "maxOccurs"
    ]
  },
  {
    "name": "Choice",
    "expressions": [],
    "properties": [
      "conditionalActivities",
      "elseActivity"
    ]
  },
  {
    "name": "ExceptionHandler",
    "expressions": [],
    "properties": [
      "RequestService",
      "exception"
    ]
  },
  {
    "name": "Concurrency",
    "expressions": [],
    "properties": ["concurrentActivities"]
  },
  {
    "name": "Element",
    "expressions": [],
    "properties": ["annotations"]
  },
  {
    "name": "Stakeholder",
    "expressions": [],
    "properties": ["Requirement"]
  },
  {
    "name": "Exception",
    "expressions": [],
    "properties": [
      "RaiseException",
      "PreCondition",
      "ExceptionHandler"
    ]
  },
  {
    "name": "RaiseException",
    "expressions": [],
    "properties": [
      "exceptionVariable",
      "exception"
    ]
  },
  {
    "name": "ReturnResult",
    "expressions": [],
    "properties": ["resultVariable"]
  },
  {
    "name": "ManipulateVariable",
    "expressions": [],
    "properties": [
      "target",
      "source"
    ]
  },
  {
    "name": "StateConstraint",
    "expressions": [],
    "properties": [
      "stateAssessmentProcess",
      "parameterDataStructure",
      "constraints",
      "parameter"
    ]
  },
  {
    "name": "Query",
    "expressions": [],
    "properties": [
      "ForAll",
      "Remove",
      "ManipulateVariable",
      "queryExpression"
    ]
  },
  {
    "name": "Constraint",
    "expressions": [],
    "properties": [
      "Wait",
      "BinaryOperandConstraint",
      "While",
      "ServiceRequirement",
      "BinaryOperandConstraint",
      "ConditionalActivity",
      "ResponsibilityDomain",
      "StateConstraintReference",
      "InverseConstraint"
    ]
  },
  {
    "name": "XorConstraint",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Variable",
    "expressions": [],
    "properties": [
      "type",
      "VariableProduction",
      "VariableReference",
      "ReturnResult",
      "FunctionalRequirements",
      "StateConstraint",
      "RequestService",
      "FunctionalRequirements",
      "RaiseException",
      "Service"
    ]
  },
  {
    "name": "Activity",
    "expressions": [],
    "properties": [
      "ContainerActivity",
      "Concurrency",
      "StateConstraintReference",
      "Service",
      "ActivitySequence",
      "StateConstraint",
      "Choice"
    ]
  },
  {
    "name": "Assign",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Requirement",
    "expressions": [],
    "properties": ["requiredBy"]
  },
  {
    "name": "PostCondition",
    "expressions": [],
    "properties": ["FunctionalRequirements"]
  },
  {
    "name": "Annotation",
    "expressions": [],
    "properties": [
      "language",
      "Element",
      "content"
    ]
  },
  {
    "name": "Wait",
    "expressions": [],
    "properties": ["until"]
  },
  {
    "name": "OrConstraint",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Many",
    "expressions": [],
    "properties": []
  },
  {
    "name": "If",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ConcurrentActivity",
    "expressions": [],
    "properties": ["blocking"]
  },
  {
    "name": "VariableProduction",
    "expressions": [],
    "properties": ["producedVariable"]
  },
  {
    "name": "Create",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Composition",
    "expressions": [],
    "properties": []
  },
  {
    "name": "DataType",
    "expressions": [],
    "properties": [
      "ResponsibilityDomain",
      "Variable",
      "constraints"
    ]
  },
  {
    "name": "QualityConstraint",
    "expressions": [],
    "properties": ["QualityRequirement"]
  },
  {
    "name": "ResultRequirement",
    "expressions": [],
    "properties": ["constraintExpression"]
  },
  {
    "name": "ElementWithOptionalName",
    "expressions": [],
    "properties": ["name"]
  },
  {
    "name": "QualityRequirement",
    "expressions": [],
    "properties": [
      "qualityConstraint",
      "ServiceContract"
    ]
  },
  {
    "name": "Attribute",
    "expressions": [],
    "properties": ["type"]
  },
  {
    "name": "MultiplicityConstraint",
    "expressions": [],
    "properties": ["Feature"]
  },
  {
    "name": "FunctionalRequirements",
    "expressions": [],
    "properties": [
      "preConditions",
      "ServiceContract",
      "requestVariable",
      "resultVariable",
      "postConditions"
    ]
  },
  {
    "name": "Expression",
    "expressions": [],
    "properties": [
      "expressionString",
      "language",
      "ResultRequirement",
      "Query",
      "ExpressionBasedConstraint"
    ]
  },
  {
    "name": "ContainerActivity",
    "expressions": [],
    "properties": ["activity"]
  },
  {
    "name": "While",
    "expressions": [],
    "properties": ["condition"]
  },
  {
    "name": "Model",
    "expressions": [],
    "properties": ["responsibilityDomains"]
  },
  {
    "name": "ServiceContract",
    "expressions": [
      {
        "operations": {
          "size": 4,
          "and": 1,
          "toUpperCase": 1,
          "concat": 1,
          "=": 2,
          "-": 1,
          "substring": 4
        },
        "name": "requestClassNameEqualsServiceNamePlusRequest",
        "body": "\n\t\t\t  (self.request.name.substring(self.request.name.size()-6,self.request.name.size()) = 'Request')\n\t\t\t  and\n\t\t\t  (self.request.name.substring(1,self.name.size()) = self.name.substring(1,1).toUpperCase().concat\n\t\t\t  (self.name.substring(2,self.name.size())))",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 14,
          "VariableExpImpl": 8,
          "IntegerLiteralExpImpl": 5,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 12
        },
        "properties": [
          "urdad::contract::ServiceContract::request",
          "urdad::core::NamedElement::name"
        ]
      },
      {
        "operations": {
          "size": 4,
          "and": 1,
          "toUpperCase": 1,
          "concat": 1,
          "=": 2,
          "-": 1,
          "substring": 4
        },
        "name": "resultClassNameEqualsServiceNamePlusResult",
        "body": "\n\t\t\t  (self.request.name.substring(self.request.name.size()-5,self.request.name.size()) = 'Result')\n\t\t\t  and\n\t\t\t  (self.request.name.substring(1,self.name.size()) = self.name.substring(1,1).toUpperCase().concat\n\t\t\t  (self.name.substring(2,self.name.size())))",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 14,
          "VariableExpImpl": 8,
          "IntegerLiteralExpImpl": 5,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 12
        },
        "properties": [
          "urdad::contract::ServiceContract::request",
          "urdad::core::NamedElement::name"
        ]
      }
    ],
    "properties": [
      "functionalRequirements",
      "result",
      "RequestService",
      "request",
      "ResponsibilityDomain",
      "Service",
      "ServiceContract",
      "qualityRequirements",
      "inverseService",
      "ServiceRequirement"
    ]
  },
  {
    "name": "Add",
    "expressions": [],
    "properties": []
  },
  {
    "name": "AndConstraint",
    "expressions": [],
    "properties": []
  },
  {
    "name": "StateConstraintReference",
    "expressions": [],
    "properties": [
      "parameter",
      "parameterConstructionProcess",
      "FunctionalRequirement",
      "constraint"
    ]
  },
  {
    "name": "Remove",
    "expressions": [],
    "properties": ["target"]
  },
  {
    "name": "DataStructure",
    "expressions": [],
    "properties": [
      "ServiceContract",
      "features",
      "superTypes",
      "StateConstraint",
      "abstract",
      "DataStructure",
      "ServiceContract"
    ]
  },
  {
    "name": "ActivitySequence",
    "expressions": [],
    "properties": ["activities"]
  },
  {
    "name": "BinaryOperandConstraint",
    "expressions": [],
    "properties": [
      "rightOperand",
      "leftOperand"
    ]
  },
  {
    "name": "NamedElement",
    "expressions": [],
    "properties": [
      "Identification",
      "name"
    ]
  },
  {
    "name": "Identification",
    "expressions": [],
    "properties": ["relatedElement"]
  },
  {
    "name": "ExpressionBasedConstraint",
    "expressions": [],
    "properties": [
      "constraintExpression",
      "DataType",
      "StateConstraint"
    ]
  },
  {
    "name": "BasicDataType",
    "expressions": [],
    "properties": ["Attribute"]
  },
  {
    "name": "FunctionalRequirement",
    "expressions": [],
    "properties": [
      "ServiceRequirement",
      "stateConstraintReference"
    ]
  },
  {
    "name": "VariableReference",
    "expressions": [],
    "properties": ["variable"]
  },
  {
    "name": "ResponsibilityDomain",
    "expressions": [],
    "properties": [
      "constraints",
      "dataTypes",
      "constants",
      "ResponsibilityDomain",
      "servicesContracts",
      "Model",
      "services",
      "responsibilityDomains"
    ]
  },
  {
    "name": "TerminalActivity",
    "expressions": [],
    "properties": []
  },
  {
    "name": "StructuredConstraint",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Association",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ConditionalActivity",
    "expressions": [],
    "properties": [
      "condition",
      "Choice",
      "blocking"
    ]
  },
  {
    "name": "InverseConstraint",
    "expressions": [],
    "properties": ["operand"]
  },
  {
    "name": "ServiceRequirement",
    "expressions": [],
    "properties": [
      "Service",
      "usedToAddress",
      "condition",
      "requiredService"
    ]
  },
  {
    "name": "Assignable",
    "expressions": [],
    "properties": [
      "StateConstraintReference",
      "ManipulateVariable"
    ]
  },
  {
    "name": "Constant",
    "expressions": [],
    "properties": [
      "ResponsibilityDomain",
      "value"
    ]
  },
  {
    "name": "Aggregation",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ForAll",
    "expressions": [],
    "properties": [
      "concurrent",
      "query"
    ]
  },
  {
    "name": "RequestService",
    "expressions": [],
    "properties": [
      "requestVariable",
      "exceptionHandlers",
      "requestedService"
    ]
  },
  {
    "name": "Service",
    "expressions": [],
    "properties": [
      "serviceRequirements",
      "requestVariable",
      "process",
      "ResponsibilityDomain",
      "realizedContract"
    ]
  },
  {
    "name": "PreCondition",
    "expressions": [],
    "properties": [
      "FunctionalRequirements",
      "exception"
    ]
  }
]
