[
  {
    "name": "Department",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "+": 2,
          "sumBudget": 1,
          ">=": 1
        },
        "name": "sumBudget",
        "body": "if self.subDepartment->size() >= 1 then\r\n\tself.subDepartment->iterate(department; return : Integer = 0 | return + department.sumBudget()) + self.budget\r\nelse\r\n\tself.budget\r\nendif ",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 6,
          "IntegerLiteralExpImpl": 2,
          "IterateExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "company::Department::budget",
          "company::Department::subDepartment"
        ]
      },
      {
        "operations": {"+": 2},
        "name": "calcExpenses",
        "body": "self.employee->iterate(e ; s : Integer = 0 | s + e.salary) + self.boss.salary",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "IterateExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "company::Employee::salary",
          "company::Department::boss",
          "company::Department::employee"
        ]
      },
      {
        "operations": {
          "size": 2,
          "oclIsKindOf": 2,
          "<": 1
        },
        "name": "biggestNumberOfStudentsOrFreelancers",
        "body": "let numFreelance : Integer = self.employee->select(e : Employee | e.oclIsKindOf(Freelance))->size() in let numStudent : Integer = self.employee->select(e : Employee | e.oclIsKindOf(Student))->size() in if numFreelance < numStudent then numStudent else numFreelance endif",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 8,
          "LetExpImpl": 2,
          "TypeExpImpl": 2,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["company::Department::employee"]
      },
      {
        "operations": {">": 1},
        "name": "OldEmployee",
        "body": "self.employee->exists(e | e.age > 45)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "company::Department::employee",
          "company::Employee::age"
        ]
      },
      {
        "operations": {
          "+": 1,
          "first": 1,
          ">": 1
        },
        "name": "boss10YearsOlderThanJunior",
        "body": "let t:Tuple(boss:Employee,junior:Employee)=\r\nTuple{boss=self.boss, junior=self.employee->sortedBy(age)->first()} in\r\nt.boss.age > t.junior.age + 10",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 3,
          "LetExpImpl": 1,
          "TupleLiteralExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "company::Department::boss",
          "company::Department::employee",
          "$$::Tuple::boss",
          "company::Employee::age",
          "$$::Tuple::junior"
        ]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "notEmpty": 1
        },
        "name": "departmentMustHaveDivision",
        "body": "self.department2division->notEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["OclInvalid::oclBadProperty"]
      },
      {
        "operations": {
          "not": 1,
          "oclIsTypeOf": 1
        },
        "name": "NotBossFreelance",
        "body": "not (self.boss.oclIsTypeOf(Freelance))",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["company::Department::boss"]
      },
      {
        "operations": {
          "<=": 1,
          "size": 1,
          ">=": 1
        },
        "name": "BossHighestSalary",
        "body": "self.employee->select(e|e.salary >= self.boss.salary)->size() <= 1",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "company::Employee::salary",
          "company::Department::boss",
          "company::Department::employee"
        ]
      },
      {
        "operations": {
          "<=": 1,
          "calcExpenses": 1
        },
        "name": "BudgetRestriction",
        "body": "self.calcExpenses() <= self.budget",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["company::Department::budget"]
      },
      {
        "operations": {
          "size": 1,
          "<": 2
        },
        "name": "MaxJuniors",
        "body": "self.employee->select(e|e.age < 25)->size()\r\n<self.maxJuniors",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "company::Department::employee",
          "company::Department::maxJuniors",
          "company::Employee::age"
        ]
      },
      {
        "operations": {
          "size": 1,
          "<": 2,
          "-": 1,
          ">": 1
        },
        "name": "MaxJuniorsWarning",
        "body": "if self.maxJuniors > 1\r\nthen\r\nself.employee->select(e|e.age < 25)->size()\r\n<self.maxJuniors - 1\r\nelse\r\ntrue\r\nendif",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 5,
          "IntegerLiteralExpImpl": 3,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 4,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "company::Department::employee",
          "company::Department::maxJuniors",
          "company::Employee::age"
        ]
      }
    ],
    "properties": [
      "budget",
      "boss",
      "employee",
      "maxJuniors",
      "biggestNumberOfStudentsOrFreelancers",
      "employeeOfTheMonth",
      "name",
      "subDepartment",
      "parentDepartment"
    ]
  },
  {
    "name": "Employee",
    "expressions": [
      {
        "operations": {
          "not": 1,
          "oclIsUndefined": 1,
          "and": 1,
          "oclAsSet": 1,
          "+": 1,
          "<": 1,
          "notEmpty": 1
        },
        "name": "Secretary10YearsOlderThanBoss",
        "body": "if self.directed->notEmpty() and\r\nnot self.secretary.oclIsUndefined() then\r\nself.age + 10 < self.secretary.age \r\nelse true\r\nendif",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 7,
          "VariableExpImpl": 4,
          "IntegerLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "BooleanLiteralExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "company::Employee::directed",
          "company::Employee::age",
          "company::Employee::secretary"
        ]
      },
      {
        "operations": {
          "<=": 1,
          "+": 1
        },
        "name": "Boss10YearsOlderThanEmployee",
        "body": "self.age + 10 <= self.employer.boss.age",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "company::Department::boss",
          "company::Employee::age",
          "company::Employee::employer"
        ]
      },
      {
        "operations": {"<=": 1},
        "name": "BossIsOldest",
        "body": "self.age <= self.employer.boss.age",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "company::Department::boss",
          "company::Employee::age",
          "company::Employee::employer"
        ]
      },
      {
        "operations": {
          "not": 1,
          "oclIsUndefined": 1,
          "and": 1,
          "oclAsSet": 1,
          "notEmpty": 1,
          "<": 1
        },
        "name": "secretaryOlderThanBoss",
        "body": "if self.directed->notEmpty() and\r\nnot self.secretary.oclIsUndefined() then\r\nself.age < self.secretary.age \r\nelse true\r\nendif",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 4,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 5,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "company::Employee::directed",
          "company::Employee::secretary",
          "company::Employee::age"
        ]
      },
      {
        "operations": {
          "<>": 2,
          "allInstances": 1,
          "implies": 1
        },
        "name": "UniqueNames",
        "body": "Employee.allInstances()->forAll(e | e <> self implies e.name <> self.name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 4,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["company::Employee::name"]
      },
      {
        "operations": {
          "not": 1,
          "oclIsUndefined": 2,
          "oclAsSet": 1,
          "isEmpty": 1
        },
        "name": "divBossSecretary",
        "body": "if self.directed->isEmpty() then\r\nself.secretary.oclIsUndefined()\r\nelse\r\nnot self.secretary.oclIsUndefined()\r\nendif",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 5,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "company::Employee::directed",
          "company::Employee::secretary"
        ]
      }
    ],
    "properties": [
      "name",
      "salary",
      "secretary2boss",
      "Division",
      "directed",
      "managed",
      "Company",
      "Department",
      "age",
      "secretary",
      "employer",
      "intern"
    ]
  },
  {
    "name": "Student",
    "expressions": [{
      "operations": {"<": 1},
      "name": "StudentAndFreelancesAge",
      "body": "self.age < 40",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "IntegerLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["company::Employee::age"]
    }],
    "properties": ["student2employee"]
  },
  {
    "name": "Freelance",
    "expressions": [
      {
        "operations": {"<": 1},
        "name": "StudentAndFreelancesAge",
        "body": "self.age < 40",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["company::Employee::age"]
      },
      {
        "operations": {
          "<=": 1,
          "and": 1,
          ">=": 1
        },
        "name": "ValidAssignment",
        "body": "self.assignment >= 5 and self.assignment <= 30",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": ["company::Freelance::assignment"]
      },
      {
        "operations": {
          "<=": 1,
          "and": 1,
          ">=": 1
        },
        "name": "ValidAssignmentWarning",
        "body": "self.assignment >= 5 and self.assignment <= 40",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": ["company::Freelance::assignment"]
      }
    ],
    "properties": ["assignment"]
  },
  {
    "name": "Division",
    "expressions": [
      {
        "operations": {
          "<=": 1,
          "size": 1
        },
        "name": "nestedDerivation",
        "body": "self.numberEmployeesOfTheMonth <= self.department->size()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "company::Division::numberEmployeesOfTheMonth",
          "company::Division::department"
        ]
      },
      {
        "operations": {"size": 1},
        "name": "numberEmployeesOfTheMonth",
        "body": "self.employeesOfTheMonth->size()",
        "type": "PropertyImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["company::Division::employeesOfTheMonth"]
      },
      {
        "operations": {},
        "name": "employeesOfTheMonth",
        "body": "self.department.employeeOfTheMonth",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "company::Department::employeeOfTheMonth",
          "company::Division::department"
        ]
      },
      {
        "operations": {
          "including": 1,
          "sum": 1,
          "<": 1
        },
        "name": "nasty",
        "body": "self.department->collect(d| \r\nd.employee->including(d.boss)).salary->sum() < budget",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 5,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "company::Employee::salary",
          "company::Department::boss",
          "company::Department::employee",
          "company::Division::budget",
          "company::Division::department"
        ]
      },
      {
        "operations": {
          "<=": 1,
          "size": 2
        },
        "name": "limitEmployeesOfTheMonth",
        "body": "self.employeesOfTheMonth->size() <= self.department->size()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "company::Division::employeesOfTheMonth",
          "company::Division::department"
        ]
      }
    ],
    "properties": [
      "director",
      "employeesOfTheMonth",
      "numberEmployeesOfTheMonth",
      "company",
      "budget",
      "name",
      "department"
    ]
  },
  {
    "name": "Company",
    "expressions": [
      {
        "operations": {},
        "name": "divisionDirector",
        "body": "self.division.director",
        "type": "PropertyImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "company::Division::director",
          "company::Company::division"
        ]
      },
      {
        "operations": {"<=": 1},
        "name": "eotmDeltaMax",
        "body": "self.eotmDelta <= 5",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["company::Company::eotmDelta"]
      },
      {
        "operations": {
          "last": 1,
          "oclAsSet": 2,
          "-": 1,
          "first": 1
        },
        "name": "eotmDelta",
        "body": "let maxEOTMDivision:Division=self.division->sortedBy(i | i.numberEmployeesOfTheMonth)->last() in let minEOTMDivision:Division=self.division->sortedBy(i | i.numberEmployeesOfTheMonth)->first() in maxEOTMDivision.numberEmployeesOfTheMonth - minEOTMDivision.numberEmployeesOfTheMonth",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 6,
          "LetExpImpl": 2,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "company::Division::numberEmployeesOfTheMonth",
          "company::Company::division"
        ]
      },
      {
        "operations": {
          "isEmpty": 1,
          "oclAsSet": 1,
          "concat": 1
        },
        "name": "name",
        "body": "if self.division->isEmpty() then\r\n  'Company with no division'\r\nelse\r\n  'Company with division '.concat(self.division.name)\r\nendif",
        "type": "PropertyImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "StringLiteralExpImpl": 2,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "company::Division::name",
          "company::Company::division"
        ]
      }
    ],
    "properties": [
      "divisionDirector",
      "name",
      "eotmDelta",
      "division"
    ]
  }
]
