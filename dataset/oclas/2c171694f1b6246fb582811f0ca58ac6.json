[
  {
    "name": "NamedElement",
    "expressions": [],
    "properties": ["name"]
  },
  {
    "name": "EnumerationLiteral",
    "expressions": [],
    "properties": [
      "Enumeration",
      "EnumerationLiteralItem",
      "value"
    ]
  },
  {
    "name": "ViewGroup",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "=": 2
        },
        "name": "OneStartViewExistsWithinAViewGroup",
        "body": "\n\t\t\tself.views -> select(v | v.startView = true) -> size() = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "BooleanLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "views::View::startView",
          "views::ViewGroup::views"
        ]
      },
      {
        "operations": {
          "size": 1,
          "allInstances": 1,
          "=": 2
        },
        "name": "OneWelcomeGroupExists",
        "body": "\n\t\t\tViewGroup.allInstances() -> select(v | v.welcomeViewGroup = true) -> size() = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": ["views::ViewGroup::welcomeViewGroup"]
      }
    ],
    "properties": [
      "welcomeViewGroup",
      "ViewModel",
      "views"
    ]
  },
  {
    "name": "Column",
    "expressions": [],
    "properties": ["Table"]
  },
  {
    "name": "Condition",
    "expressions": [],
    "properties": ["ConditionalElement"]
  },
  {
    "name": "DomainModelElement",
    "expressions": [],
    "properties": ["DomainModel"]
  },
  {
    "name": "LayoutStyle",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ClassOperationView",
    "expressions": [
      {
        "operations": {
          "selectByKind": 1,
          "includesAll": 1,
          "excluding": 1,
          "oclAsSet": 2,
          "union": 1
        },
        "name": "AssociationElementsReferToValidClass",
        "body": "\n\t\t\tself.elementGroups.viewElements -> selectByKind(AssociationElement) -> \n\t\t\tforAll(a | a.association.associationEnds -> excluding(a.association.navigableEnd).type \n\t\t\t-> includesAll(self.class -> union(self.class -> closure(superClass))))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "VariableExpImpl": 8,
          "OperationCallExpImpl": 6,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 10
        },
        "properties": [
          "views::Class::superClass",
          "views::Association::navigableEnd",
          "views::ElementGroup::viewElements",
          "views::AssociationElement::association",
          "views::ClassOperationView::elementGroups",
          "views::Association::associationEnds",
          "views::Property::type",
          "views::View::class"
        ]
      },
      {
        "operations": {
          "selectByKind": 5,
          "includesAll": 1,
          "union": 5,
          "asSet": 1
        },
        "name": "PropertyElementOfComparisonConditionsIsValid",
        "body": "\n\t\t\tself.elementGroups.viewElements -> includesAll(\n\t\t\tself.elementGroups.condition -> union(self.elementGroups.viewElements.condition) -> selectByKind(CompositeCondition) \n\t\t\t-> collect(v:CompositeCondition|v.composedConditions) -> selectByKind(ComparisonCondition).property \n\t\t\t-> union(self.elementGroups.condition -> union(self.elementGroups.viewElements.condition) -> selectByKind(ComparisonCondition).property) \n\t\t\t-> union(self.elementGroups.condition -> union(self.elementGroups.viewElements.condition) -> selectByKind(CompositeCondition).composedConditions -> selectByKind(ComparisonCondition).property)\n\t\t\t-> asSet())",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 15,
          "VariableExpImpl": 22,
          "OperationCallExpImpl": 12,
          "TypeExpImpl": 5,
          "PropertyCallExpImpl": 22
        },
        "properties": [
          "views::ElementGroup::viewElements",
          "views::ClassOperationView::elementGroups",
          "views::ConditionalElement::condition",
          "views::ComparisonCondition::property",
          "views::CompositeCondition::composedConditions"
        ]
      },
      {
        "operations": {
          "selectByKind": 1,
          "includesAll": 1,
          "oclAsSet": 1,
          "union": 1
        },
        "name": "PropertyElementsReferToValidClassProperties",
        "body": "\n\t\t\tself.class.properties -> union(self.class -> closure(superClass).properties) -> \n\t\t\tincludesAll(self.elementGroups.viewElements -> selectByKind(PropertyElement).property)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 7,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 8
        },
        "properties": [
          "views::Class::superClass",
          "views::PropertyElement::property",
          "views::Class::properties",
          "views::ElementGroup::viewElements",
          "views::ClassOperationView::elementGroups",
          "views::View::class"
        ]
      }
    ],
    "properties": [
      "Link",
      "elementGroups"
    ]
  },
  {
    "name": "ConditionalElement",
    "expressions": [],
    "properties": ["condition"]
  },
  {
    "name": "DomainModel",
    "expressions": [],
    "properties": ["domainModelElements"]
  },
  {
    "name": "View",
    "expressions": [],
    "properties": [
      "startView",
      "ViewGroup",
      "header",
      "description",
      "class"
    ]
  },
  {
    "name": "UpdateView",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CompositeCondition",
    "expressions": [{
      "operations": {"=": 1},
      "name": "ComposedConditionTypesAreEqual",
      "body": "\n\t\t\tself.composedConditions -> forAll(c | c.type = self.type)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 3,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "views::VisibilityCondition::type",
        "views::CompositeCondition::composedConditions"
      ]
    }],
    "properties": [
      "compositionType",
      "composedConditions"
    ]
  },
  {
    "name": "DataType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "VisibilityConditionType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "PropertyElement",
    "expressions": [],
    "properties": [
      "property",
      "ComparisonCondition"
    ]
  },
  {
    "name": "LayoutableElement",
    "expressions": [],
    "properties": ["layout"]
  },
  {
    "name": "ClassIndexView",
    "expressions": [{
      "operations": {
        "or": 1,
        "isEmpty": 1,
        "includes": 1
      },
      "name": "TargetViewOfClassIndexViewLinksIsValid",
      "body": "\n\t\t\tself.link.targetView.class  -> includes(self.class) or self.link -> isEmpty()",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "VariableExpImpl": 5,
        "OperationCallExpImpl": 3,
        "PropertyCallExpImpl": 5
      },
      "properties": [
        "views::Link::targetView",
        "views::LinkableElement::link",
        "views::View::class"
      ]
    }],
    "properties": []
  },
  {
    "name": "LinkableElement",
    "expressions": [],
    "properties": ["link"]
  },
  {
    "name": "List",
    "expressions": [],
    "properties": []
  },
  {
    "name": "VisibilityCondition",
    "expressions": [{
      "operations": {
        "excluding": 1,
        "isEmpty": 1,
        "allInstances": 1,
        "=": 1
      },
      "name": "ConditionIdIsUnique",
      "body": "\n\t\t\tVisibilityCondition.allInstances() -> select(c | c.conditionID = self.conditionID) -> excluding(self) -> isEmpty()",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 3,
        "OperationCallExpImpl": 4,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": ["views::VisibilityCondition::conditionID"]
    }],
    "properties": [
      "type",
      "conditionID",
      "CompositeCondition"
    ]
  },
  {
    "name": "Type",
    "expressions": [],
    "properties": ["Property"]
  },
  {
    "name": "Link",
    "expressions": [],
    "properties": [
      "LinkableElement",
      "label",
      "targetView"
    ]
  },
  {
    "name": "MultiplicityElement",
    "expressions": [],
    "properties": [
      "lowerBound",
      "upperBound"
    ]
  },
  {
    "name": "Association",
    "expressions": [{
      "operations": {
        "<>": 1,
        "or": 2,
        "and": 1,
        "-": 1,
        "=": 1,
        ">=": 2
      },
      "name": "AssociationPropertyBoundsAreValid",
      "body": "\n\t\t \tself.associationEnds -> forAll(p | p.lowerBound >= 0 and (p.upperBound <> 0 or p.upperBound >= p.lowerBound or p.upperBound = -1))",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 6,
        "OperationCallExpImpl": 8,
        "IntegerLiteralExpImpl": 3,
        "PropertyCallExpImpl": 6
      },
      "properties": [
        "views::MultiplicityElement::upperBound",
        "views::MultiplicityElement::lowerBound",
        "views::Association::associationEnds"
      ]
    }],
    "properties": [
      "AssociationElement",
      "navigableEnd",
      "isComposition",
      "associationEnds"
    ]
  },
  {
    "name": "Table",
    "expressions": [{
      "operations": {
        "includesAll": 1,
        "selectByType": 2,
        "oclAsSet": 2,
        "union": 1
      },
      "name": "TableColumnRefersToTargetViewClassProperty",
      "body": "\n\t\t\tself.association.navigableEnd.type -> selectByType(Class).properties ->\n\t\t\tunion(self.association.navigableEnd.type -> selectByType(Class) -> \n\t\t\tclosure(superClass).properties) -> includesAll(self.columns.property)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 4,
        "VariableExpImpl": 7,
        "OperationCallExpImpl": 6,
        "TypeExpImpl": 2,
        "PropertyCallExpImpl": 11
      },
      "properties": [
        "views::Class::superClass",
        "views::Association::navigableEnd",
        "views::PropertyElement::property",
        "views::Class::properties",
        "views::Table::columns",
        "views::AssociationElement::association",
        "views::Property::type"
      ]
    }],
    "properties": ["columns"]
  },
  {
    "name": "SelectionItem",
    "expressions": [],
    "properties": [
      "Selection",
      "value"
    ]
  },
  {
    "name": "ReadView",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ViewModel",
    "expressions": [],
    "properties": ["viewGroups"]
  },
  {
    "name": "Layout",
    "expressions": [],
    "properties": [
      "LayoutableElement",
      "alignment"
    ]
  },
  {
    "name": "EnumerationLiteralItem",
    "expressions": [],
    "properties": ["enumerationLiteral"]
  },
  {
    "name": "CompositeConditionType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Class",
    "expressions": [
      {
        "operations": {
          "and": 1,
          "=": 2
        },
        "name": "IdBoundsAreValid",
        "body": "\n\t\t \tself.id.upperBound = 1 and self.id.lowerBound = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "views::MultiplicityElement::upperBound",
          "views::MultiplicityElement::lowerBound",
          "views::Class::id"
        ]
      },
      {
        "operations": {
          "or": 1,
          "includes": 2
        },
        "name": "UniqueIdIsContainedOrInherited",
        "body": "\n\t\t \tself.properties -> includes(self.id) \n\t\t \tor self.superClass.properties -> closure(superClass.properties) -> includes(self.id)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 5,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "views::Class::superClass",
          "views::Class::properties",
          "views::Class::id"
        ]
      },
      {
        "operations": {
          "oclIsTypeOf": 2,
          "xor": 1
        },
        "name": "ClassPropertyTypeIsValid",
        "body": "\n\t\t\tself.properties -> \n\t\t\tforAll(p | p.type.oclIsTypeOf(DataType) xor p.type.oclIsTypeOf(Enumeration))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 3,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "views::Class::properties",
          "views::Property::type"
        ]
      },
      {
        "operations": {
          "and": 1,
          "xor": 1,
          "=": 3
        },
        "name": "ClassPropertyBoundsAreValid",
        "body": "\n\t\t\tself.properties -> \n\t\t\tforAll(p | p.upperBound = 1 and (p.lowerBound = 0 xor p.lowerBound = 1))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 4,
          "IntegerLiteralExpImpl": 3,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "views::MultiplicityElement::upperBound",
          "views::MultiplicityElement::lowerBound",
          "views::Class::properties"
        ]
      },
      {
        "operations": {
          "excludes": 1,
          "oclAsSet": 1
        },
        "name": "NoCyclicInheritance",
        "body": "\n\t\t\tself.superClass -> closure(superClass) -> excludes(self)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": ["views::Class::superClass"]
      }
    ],
    "properties": [
      "superClass",
      "properties",
      "id",
      "Class",
      "View"
    ]
  },
  {
    "name": "DeleteView",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ElementGroup",
    "expressions": [],
    "properties": [
      "header",
      "ClassOperationView",
      "viewElements"
    ]
  },
  {
    "name": "AssociationElement",
    "expressions": [{
      "operations": {
        "or": 1,
        "isEmpty": 1,
        "includes": 1
      },
      "name": "TargetViewOfAssociationElementLinksIsValid",
      "body": "\n\t\t\tself.link.targetView.class  -> includes(self.association.navigableEnd.type) or self.link -> isEmpty()",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "OperationCallExpImpl": 3,
        "VariableExpImpl": 5,
        "PropertyCallExpImpl": 7
      },
      "properties": [
        "views::Association::navigableEnd",
        "views::Link::targetView",
        "views::AssociationElement::association",
        "views::Property::type",
        "views::LinkableElement::link",
        "views::View::class"
      ]
    }],
    "properties": ["association"]
  },
  {
    "name": "Selection",
    "expressions": [{
      "operations": {
        "oclIsTypeOf": 2,
        "xor": 1
      },
      "name": "PropertyTypeOfSelectionIsValid",
      "body": "\n\t\t\tself.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 3,
        "VariableExpImpl": 2,
        "TypeExpImpl": 2,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "views::PropertyElement::property",
        "views::Property::type"
      ]
    }],
    "properties": ["selectionItems"]
  },
  {
    "name": "Property",
    "expressions": [],
    "properties": [
      "PropertyElement",
      "Association",
      "Association",
      "type",
      "Class",
      "Class"
    ]
  },
  {
    "name": "ComparisonConditionType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CreateView",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ViewElement",
    "expressions": [{
      "operations": {
        "excluding": 1,
        "isEmpty": 1,
        "allInstances": 1,
        "=": 1
      },
      "name": "ElementIdIsUnique",
      "body": "\n\t\t\tViewElement.allInstances() -> select(e | e.elementID = self.elementID) -> excluding(self) ->isEmpty()",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 3,
        "OperationCallExpImpl": 4,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": ["views::ViewElement::elementID"]
    }],
    "properties": [
      "ElementGroup",
      "label",
      "elementID"
    ]
  },
  {
    "name": "ComparisonCondition",
    "expressions": [],
    "properties": [
      "comparisonValue",
      "comparisonType",
      "property"
    ]
  },
  {
    "name": "Text",
    "expressions": [{
      "operations": {
        "oclIsTypeOf": 2,
        "xor": 1
      },
      "name": "PropertyTypeOfTextIsValid",
      "body": "\n\t\t\tself.property.type.oclIsTypeOf(DataType) xor self.property.type.oclIsTypeOf(Enumeration)",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 3,
        "VariableExpImpl": 2,
        "TypeExpImpl": 2,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "views::PropertyElement::property",
        "views::Property::type"
      ]
    }],
    "properties": [
      "long",
      "format"
    ]
  },
  {
    "name": "Enumeration",
    "expressions": [],
    "properties": ["literals"]
  },
  {
    "name": "DateTimePicker",
    "expressions": [{
      "operations": {
        "or": 2,
        "oclIsTypeOf": 1,
        "and": 1,
        "=": 3
      },
      "name": "PropertyTypeOfDateTimePickerIsValid",
      "body": "\n\t\t\tself.property.type.oclIsTypeOf(DataType) and\n\t\t\t(self.property.type.name = 'Date' or \n\t\t\t self.property.type.name = 'Time' or\n\t\t\t self.property.type.name = 'DateTime'\n\t\t\t)",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 7,
        "VariableExpImpl": 4,
        "StringLiteralExpImpl": 3,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 11
      },
      "properties": [
        "views::PropertyElement::property",
        "views::Property::type",
        "views::NamedElement::name"
      ]
    }],
    "properties": ["format"]
  }
]
