[
  {
    "name": "Student",
    "expressions": [{
      "operations": {
        "size": 1,
        "oclIsKindOf": 1,
        "and": 3,
        "isEmpty": 2,
        "allInstances": 3,
        "implies": 1,
        "notEmpty": 1,
        "=": 1
      },
      "name": "adult_three_enrolllment",
      "body": "\n    Adult.allInstances()->notEmpty() and \n    Child.allInstances()->isEmpty() and\n    Teenager.allInstances()->isEmpty() and\n   (self.oclIsKindOf(Adult) implies self.universities->size() = 3)\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 13,
        "VariableExpImpl": 2,
        "IntegerLiteralExpImpl": 1,
        "TypeExpImpl": 4,
        "PropertyCallExpImpl": 1
      },
      "properties": ["project::Student::universities"]
    }],
    "properties": []
  },
  {
    "name": "University",
    "expressions": [
      {
        "operations": {},
        "name": "enrollments_has_unique_id",
        "body": "\n    self.enrollments->isUnique(x: Enrollment | x.id)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "project::University::enrollments",
          "project::Enrollment::id"
        ]
      },
      {
        "operations": {
          "size": 1,
          "intersection": 1,
          "asSet": 1,
          "=": 1
        },
        "name": "one_enrollment_per_student",
        "body": "\n    self.enrollments->collect(x | x.student)->asSet()\n    ->forAll(s: Student | s.enrollments->intersection(self.enrollments)->size()=1)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 4,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "project::Student::enrollments",
          "project::University::enrollments",
          "project::Enrollment::student"
        ]
      },
      {
        "operations": {
          "not": 1,
          "oclIsKindOf": 1
        },
        "name": "no_child_university",
        "body": "\n    self.students->forAll( x:Student | not x.oclIsKindOf(Child) )\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["project::University::students"]
      }
    ],
    "properties": []
  }
]
