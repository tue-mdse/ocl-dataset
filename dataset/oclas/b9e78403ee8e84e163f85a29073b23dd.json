[
  {
    "name": "Online",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Mode",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Node",
    "expressions": [
      {
        "operations": {
          "including": 2,
          "oclIsTypeOf": 3,
          "oclAsType": 2
        },
        "name": "existeNodoNoCache",
        "body": "self.children->closure(ch:AbstractNode | if (ch.oclIsTypeOf(Node)) then (ch.oclAsType(Node).children->including(self)) else Set(AbstractNode){} endif)->including(self)->select( oclIsTypeOf(Node))->collect(oclAsType(Node))->exists(v:Node | v.type.oclIsTypeOf(NoCache))",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "VariableExpImpl": 8,
          "OperationCallExpImpl": 7,
          "TypeExpImpl": 5,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "offlinemodel::Node::type",
          "offlinemodel::Node::children"
        ]
      },
      {
        "operations": {
          "including": 2,
          "oclIsTypeOf": 3,
          "oclAsType": 2
        },
        "name": "existeNodoPreCache",
        "body": "self.children->closure(ch:AbstractNode | if (ch.oclIsTypeOf(Node)) then (ch.oclAsType(Node).children->including(self)) else Set(AbstractNode){} endif)->including(self)->select( oclIsTypeOf(Node))->collect(oclAsType(Node))->exists(v:Node | v.type.oclIsTypeOf(PreCache))",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "VariableExpImpl": 8,
          "OperationCallExpImpl": 7,
          "TypeExpImpl": 5,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "offlinemodel::Node::type",
          "offlinemodel::Node::children"
        ]
      },
      {
        "operations": {
          "including": 2,
          "oclIsTypeOf": 3,
          "oclAsType": 2
        },
        "name": "existeNodoDefault",
        "body": "self.children->closure(ch:AbstractNode | if (ch.oclIsTypeOf(Node)) then (ch.oclAsType(Node).children->including(self)) else Set(AbstractNode){} endif)->including(self)->select( oclIsTypeOf(Node))->collect(oclAsType(Node))->exists(v:Node | v.type.oclIsTypeOf(Default))",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "OperationCallExpImpl": 7,
          "VariableExpImpl": 8,
          "TypeExpImpl": 5,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "offlinemodel::Node::type",
          "offlinemodel::Node::children"
        ]
      },
      {
        "operations": {"oclIsTypeOf": 1},
        "name": "isAvailableOffline",
        "body": "if (self.type.oclIsTypeOf(PreCache)) then true else false endif",
        "type": "PropertyImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1,
          "BooleanLiteralExpImpl": 2
        },
        "properties": ["offlinemodel::Node::type"]
      }
    ],
    "properties": [
      "type",
      "isInitial",
      "children",
      "isAvailableOffline",
      "Navigation",
      "composite"
    ]
  },
  {
    "name": "NoCache",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Normal",
    "expressions": [],
    "properties": []
  },
  {
    "name": "OfflineModel",
    "expressions": [
      {
        "operations": {
          "mandatory": 1,
          "rootNodes": 1
        },
        "name": "MandatoryScheme",
        "body": "\n\t\t\tself.rootNodes()->forAll(n:Node| self.mandatory(n))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {
          "and": 1,
          "implies": 1,
          "existeNodoPreCache": 1,
          "=": 1,
          "existeNodoDefault": 1
        },
        "name": "incremental",
        "body": "\n\t\t\tscheme=Scheme::Incremental implies n.existeNodoPreCache() and n.existeNodoDefault()",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 5,
          "EnumLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["offlinemodel::OfflineModel::scheme"]
      },
      {
        "operations": {"oclIsUndefined": 1},
        "name": "rootNodes",
        "body": "\n\t\t\t\tnodes->select(parent.oclIsUndefined())",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "offlinemodel::OfflineModel::nodes",
          "offlinemodel::AbstractNode::parent"
        ]
      },
      {
        "operations": {
          "not": 1,
          "and": 1,
          "existeNodoPreCache": 1,
          "implies": 1,
          "=": 1,
          "existeNodoDefault": 1
        },
        "name": "mandatory",
        "body": "\n\t\t\tscheme=Scheme::Mandatory implies n.existeNodoPreCache() and not n.existeNodoDefault()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 3,
          "EnumLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["offlinemodel::OfflineModel::scheme"]
      },
      {
        "operations": {
          "free": 1,
          "rootNodes": 1
        },
        "name": "FreeScheme",
        "body": "\t\t\t\n\t\t\tself.rootNodes()->forAll(n:Node| self.free(n))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {
          "not": 1,
          "and": 1,
          "implies": 1,
          "existeNodoPreCache": 1,
          "=": 1,
          "existeNodoDefault": 1
        },
        "name": "free",
        "body": "\n\t\t\tscheme=Scheme::Free implies not n.existeNodoPreCache() and n.existeNodoDefault()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 3,
          "EnumLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["offlinemodel::OfflineModel::scheme"]
      },
      {
        "operations": {
          "incremental": 1,
          "rootNodes": 1
        },
        "name": "IncrementalScheme",
        "body": "\t\t\t\n\t\t\tself.rootNodes()->forAll(n:Node| self.incremental(n))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2
        },
        "properties": []
      }
    ],
    "properties": [
      "nodes",
      "scheme",
      "mode"
    ]
  },
  {
    "name": "Element",
    "expressions": [{
      "operations": {
        "not": 1,
        "oclIsUndefined": 1
      },
      "name": "ForceParentNode",
      "body": "\n\t\t\tnot self.parent.oclIsUndefined()",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 2,
        "PropertyCallExpImpl": 1
      },
      "properties": ["offlinemodel::AbstractNode::parent"]
    }],
    "properties": ["facets"]
  },
  {
    "name": "Type",
    "expressions": [],
    "properties": ["Node"]
  },
  {
    "name": "Control",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Facet",
    "expressions": [],
    "properties": [
      "Element",
      "name",
      "EnabledOnline",
      "update",
      "EnabledOffline",
      "storage"
    ]
  },
  {
    "name": "Output",
    "expressions": [],
    "properties": []
  },
  {
    "name": "AbstractNode",
    "expressions": [],
    "properties": [
      "name",
      "parent",
      "root"
    ]
  },
  {
    "name": "PreCache",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Navigation",
    "expressions": [],
    "properties": ["dest"]
  },
  {
    "name": "Offline",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Default",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Scheme",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Input",
    "expressions": [],
    "properties": []
  }
]
