[
  {
    "name": "Textarea",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ConditionType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Condition",
    "expressions": [],
    "properties": [
      "conditionID",
      "CompositeCondition",
      "type",
      "Page",
      "PageElement"
    ]
  },
  {
    "name": "Attribute",
    "expressions": [{
      "operations": {
        "<>": 1,
        "oclAsSet": 1,
        "isEmpty": 1,
        "=": 1
      },
      "name": "ifEnumerationThenAttributeTypeMustBeNone",
      "body": "if self.enumerationType -> isEmpty() then self.type <> forms::entityModeling::AttributeType::None else self.type = forms::entityModeling::AttributeType::None endif",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 3,
        "OperationCallExpImpl": 4,
        "EnumLiteralExpImpl": 2,
        "IfExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "forms::entityModeling::Attribute::type",
        "forms::entityModeling::Attribute::enumerationType"
      ]
    }],
    "properties": [
      "AttributeValueCondition",
      "mandatory",
      "AttributePageElement",
      "name",
      "Entity",
      "type",
      "enumerationType",
      "Entity",
      "Column"
    ]
  },
  {
    "name": "Literal",
    "expressions": [],
    "properties": [
      "name",
      "value",
      "Enumeration"
    ]
  },
  {
    "name": "RelationshipPageElement",
    "expressions": [{
      "operations": {"=": 1},
      "name": "editingFormEntityAndRelationshipEntityMustBeTheSame",
      "body": "self.relationshipToEnterValues.target = self.editingForm.entity",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 1,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "forms::entityModeling::Form::entity",
        "forms::entityModeling::RelationshipPageElement::editingForm",
        "forms::entityModeling::RelationshipPageElement::relationshipToEnterValues",
        "forms::entityModeling::Relationship::target"
      ]
    }],
    "properties": [
      "editingForm",
      "relationshipToEnterValues"
    ]
  },
  {
    "name": "AttributeValueCondition",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "Enumeration",
    "expressions": [],
    "properties": [
      "EFML_model",
      "literals",
      "Attribute",
      "name"
    ]
  },
  {
    "name": "AttributeType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Textfield",
    "expressions": [],
    "properties": ["allowedValueFormat"]
  },
  {
    "name": "Column",
    "expressions": [],
    "properties": [
      "Table",
      "attribute"
    ]
  },
  {
    "name": "BooleanOperators",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CompositeCondition",
    "expressions": [],
    "properties": [
      "booleanOperator",
      "composedConditions"
    ]
  },
  {
    "name": "Page",
    "expressions": [],
    "properties": [
      "title",
      "Form",
      "pageElements",
      "condition"
    ]
  },
  {
    "name": "List",
    "expressions": [],
    "properties": ["alreadyEnteredEntity"]
  },
  {
    "name": "DateSelectionField",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Form",
    "expressions": [{
      "operations": {
        "including": 2,
        "oclIsKindOf": 1,
        "oclAsSet": 4,
        "isEmpty": 2,
        "includes": 3,
        "union": 4,
        "oclAsType": 3
      },
      "name": "checkAttributePageElement",
      "body": "self.pages.pageElements -> select(e: PageElement | e.oclIsKindOf(AttributePageElement)) \n\t\t\t-> forAll(e1|if self.entity.superType -> isEmpty() then self.entity.id -> union(self.entity.attributes) -> includes(e1.oclAsType(AttributePageElement).attributeToEnterValues) \n\t\t\t\telse if self.entity.superType.attributes -> isEmpty() \n\t\t\t\t\tthen self.entity.id -> union(self.entity.attributes) -> including(self.entity.superType.id) -> includes(e1.oclAsType(AttributePageElement).attributeToEnterValues) \n\t\t\t\t\telse self.entity.id -> union(self.entity.attributes) -> including(self.entity.superType.id) -> union(self.entity.superType.attributes) -> includes(e1.oclAsType(AttributePageElement).attributeToEnterValues)\n\t\t\t\t\tendif\n\t\t\t\tendif \n\t\t\t)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 3,
        "VariableExpImpl": 17,
        "OperationCallExpImpl": 19,
        "TypeExpImpl": 4,
        "IfExpImpl": 2,
        "PropertyCallExpImpl": 31
      },
      "properties": [
        "forms::entityModeling::Entity::attributes",
        "forms::entityModeling::Form::entity",
        "forms::entityModeling::Entity::id",
        "forms::entityModeling::Page::pageElements",
        "forms::entityModeling::AttributePageElement::attributeToEnterValues",
        "forms::entityModeling::Entity::superType",
        "forms::entityModeling::Form::pages"
      ]
    }],
    "properties": [
      "entity",
      "title",
      "EFML_model",
      "name",
      "description",
      "RelationshipPageElement",
      "pages",
      "EFML_model"
    ]
  },
  {
    "name": "Table",
    "expressions": [],
    "properties": ["Columns"]
  },
  {
    "name": "PageElement",
    "expressions": [],
    "properties": [
      "Page",
      "elementID",
      "condition",
      "label"
    ]
  },
  {
    "name": "Relationship",
    "expressions": [{
      "operations": {
        "or": 1,
        "and": 1,
        "=": 1,
        "-": 1,
        ">=": 2
      },
      "name": "lowerBoundUpperBoundConstraints",
      "body": "self.lowerBound >= 0 and (self.upperBound >= self.lowerBound or self.upperBound = -1) ",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 6,
        "VariableExpImpl": 4,
        "IntegerLiteralExpImpl": 2,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "forms::entityModeling::Relationship::lowerBound",
        "forms::entityModeling::Relationship::upperBound"
      ]
    }],
    "properties": [
      "lowerBound",
      "Relationship",
      "RelationshipPageElement",
      "upperBound",
      "name",
      "opposite",
      "target",
      "Entity"
    ]
  },
  {
    "name": "Entity",
    "expressions": [
      {
        "operations": {"<>": 1},
        "name": "SuperTypeIsNotSelf",
        "body": "self.superType <> self",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["forms::entityModeling::Entity::superType"]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "notEmpty": 1,
          "=": 1
        },
        "name": "IdIsMandatory",
        "body": "if self.id -> notEmpty() then self.id.mandatory = true else true endif",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "IfExpImpl": 1,
          "BooleanLiteralExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "forms::entityModeling::Entity::id",
          "forms::entityModeling::Attribute::mandatory"
        ]
      },
      {
        "operations": {
          "isEmpty": 2,
          "oclAsSet": 3,
          "notEmpty": 1
        },
        "name": "NeedIdWhenNoSuperType",
        "body": "if self.superType -> isEmpty() then self.id -> notEmpty() else self.id -> isEmpty() endif",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 6,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "forms::entityModeling::Entity::id",
          "forms::entityModeling::Entity::superType"
        ]
      }
    ],
    "properties": [
      "attributes",
      "relationships",
      "Form",
      "name",
      "id",
      "EFML_model",
      "Relationship",
      "superType",
      "Entity",
      "List"
    ]
  },
  {
    "name": "EFML_model",
    "expressions": [],
    "properties": [
      "welcomeForm",
      "entities",
      "enumerations",
      "forms"
    ]
  },
  {
    "name": "TimeSelectionField",
    "expressions": [],
    "properties": []
  },
  {
    "name": "AttributePageElement",
    "expressions": [],
    "properties": [
      "valueOfAttribute",
      "attributeToEnterValues"
    ]
  },
  {
    "name": "SelectionField",
    "expressions": [{
      "operations": {
        "or": 1,
        "=": 2
      },
      "name": "onlyAttributesBooleanOrEnum",
      "body": "self.valueOfAttribute = forms::entityModeling::AttributeType::_'Boolean' or self.valueOfAttribute = forms::entityModeling::AttributeType::None",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 3,
        "EnumLiteralExpImpl": 2,
        "PropertyCallExpImpl": 2
      },
      "properties": ["forms::entityModeling::AttributePageElement::valueOfAttribute"]
    }],
    "properties": []
  }
]
