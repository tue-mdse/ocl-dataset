[
  {
    "name": "NodeCS",
    "expressions": [{
      "operations": {},
      "name": "ast",
      "body": "\n\tinvalid ",
      "type": "OperationImpl",
      "constructs": {"InvalidLiteralExpImpl": 1},
      "properties": []
    }],
    "properties": []
  },
  {
    "name": "TopCS",
    "expressions": [{
      "operations": {"ast": 1},
      "name": "ast",
      "body": "\n\tkiamaas::Top {\n\t\tnode = node.ast()\n\t}\n\t\n",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "ShadowExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["kiamacs::TopCS::node"]
    }],
    "properties": []
  },
  {
    "name": "NumCS",
    "expressions": [{
      "operations": {
        "ast": 1,
        "oclIsKindOf": 1,
        "+": 1,
        "oclAsType": 1,
        "oclContainer": 1
      },
      "name": "ast",
      "body": "\n\tkiamaas::Num {\n\t\tvalue = value,\n\t\tdeep = let container = ast().oclContainer() in \n\t\t\t\tif container.oclIsKindOf(kiamaas::Node)  then container.oclAsType(kiamaas::Node).deep + 1 else 0 endif,\n\t\theight = 0\n\t}\n\t\n",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 4,
        "OperationCallExpImpl": 5,
        "LetExpImpl": 1,
        "IntegerLiteralExpImpl": 3,
        "TypeExpImpl": 2,
        "ShadowExpImpl": 1,
        "IfExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "kiamacs::NumCS::value",
        "kiamaas::Node::deep"
      ]
    }],
    "properties": []
  },
  {
    "name": "PlusCS",
    "expressions": [{
      "operations": {
        "including": 1,
        "ast": 5,
        "oclIsKindOf": 1,
        "max": 1,
        "oclAsSet": 1,
        "+": 2,
        "oclAsType": 1,
        "oclContainer": 1
      },
      "name": "ast",
      "body": "\n\tkiamaas::Plus {\t\n\t\tleft = left.ast(),\n\t\tright = right.ast(),\n\t\tdeep = let container = ast().oclContainer() in \n\t\t\t\tif container.oclIsKindOf(kiamaas::Node)  then container.oclAsType(kiamaas::Node).deep + 1 else 0 endif,\n\t\theight = ast().left.height->including(ast().right.height)->max() + 1\n\t\t--height = left.ast().height->including(right.ast().height)->max() + 1    \n\t}\n\n",
      "type": "OperationImpl",
      "constructs": {
        "OperationCallExpImpl": 13,
        "VariableExpImpl": 7,
        "LetExpImpl": 1,
        "IntegerLiteralExpImpl": 3,
        "TypeExpImpl": 2,
        "ShadowExpImpl": 1,
        "IfExpImpl": 1,
        "PropertyCallExpImpl": 7
      },
      "properties": [
        "kiamaas::Node::deep",
        "kiamacs::PlusCS::left",
        "kiamaas::Plus::left",
        "kiamaas::Node::height",
        "kiamacs::PlusCS::right",
        "kiamaas::Plus::right"
      ]
    }],
    "properties": []
  }
]
