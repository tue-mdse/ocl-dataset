[
  {
    "name": "Subscription",
    "expressions": [{
      "operations": {
        "allSignatures": 1,
        "conformsTo": 1
      },
      "name": "SubscribingClassMatchProducer",
      "body": "self.producer.notificationSignatures->forAll(ms:data::classes::MethodSignature |\r\n    self.subscribingClass.allSignatures()->exists(s:data::classes::MethodSignature|s.conformsTo(ms)))",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 2,
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 4,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "behavioral::events::Subscription::producer",
        "behavioral::events::EventProducer::notificationSignatures",
        "behavioral::events::Subscription::subscribingClass"
      ]
    }],
    "properties": [
      "producer",
      "subscribingClass",
      "filters"
    ]
  },
  {
    "name": "Strategy",
    "expressions": [],
    "properties": ["owner"]
  },
  {
    "name": "RemoveLink",
    "expressions": [],
    "properties": []
  },
  {
    "name": "IfElse",
    "expressions": [
      {
        "operations": {
          "at": 1,
          "size": 1,
          ">": 1
        },
        "name": "getElseBlock",
        "body": "if self.nestedBlocks->size() > 1 then\n    self.nestedBlocks->at(2)\n  else\n    null\n  endif",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "NullLiteralExpImpl": 1,
          "IntegerLiteralExpImpl": 2,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["behavioral::actions::StatementWithNestedBlocks::nestedBlocks"]
      },
      {
        "operations": {"at": 1},
        "name": "getIfBlock",
        "body": "self.nestedBlocks->at(1)",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["behavioral::actions::StatementWithNestedBlocks::nestedBlocks"]
      }
    ],
    "properties": []
  },
  {
    "name": "SAMStatusVariable",
    "expressions": [],
    "properties": [
      "name",
      "isAgentVariable",
      "businessObjectNode",
      "samSchemaVariables",
      "samStatusValues"
    ]
  },
  {
    "name": "Dummy",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SAMSchemaDerivator",
    "expressions": [],
    "properties": [
      "samStatusSchema",
      "samSourceSchemaVariables",
      "samTargetSchemaVariable",
      "samDerivator"
    ]
  },
  {
    "name": "SAMOperatorKindEnum",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Return",
    "expressions": [
      {
        "operations": {
          "getType": 1,
          "getImplementedSignature": 1,
          "conformsTo": 1,
          "getOutermostBlock": 1
        },
        "name": "ReturnTypeMustMatch",
        "body": "self.argument.getType().conformsTo(self.getOutermostBlock().getImplementedSignature().output)",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 4,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "data::classes::Signature::output",
          "dataaccess::expressions::WithArgument::argument"
        ]
      },
      {
        "operations": {
          "last": 1,
          "=": 1
        },
        "name": "ReturnMustBeLastInBlock",
        "body": "self = self.block.statements->last()",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "behavioral::actions::Block::statements",
          "behavioral::actions::Statement::block"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "Association",
    "expressions": [],
    "properties": ["LinkManipulationStatement"]
  },
  {
    "name": "ConditionalStatement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SAMSchemaVariable",
    "expressions": [],
    "properties": [
      "samSchemaValues",
      "hasStateGuard",
      "samTargetSchemaDerivators",
      "samSourceSchemaDerivators",
      "samSchemaValue",
      "samStatusSchema"
    ]
  },
  {
    "name": "StatusValue",
    "expressions": [],
    "properties": ["proxy"]
  },
  {
    "name": "Transition",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Expression",
    "expressions": [],
    "properties": [
      "LinkManipulationStatement",
      "Foreach"
    ]
  },
  {
    "name": "LinkManipulationStatement",
    "expressions": [
      {
        "operations": {
          "at": 2,
          "size": 1,
          "getType": 1,
          "conformsTo": 1
        },
        "name": "ObjectsMustConformToEndTypes",
        "body": "Sequence{1..self.objects->size()}->forAll(i:Integer |\r\n    objects->at(i).getType().conformsTo(association.ends->at(i).type))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 5,
          "IntegerLiteralExpImpl": 1,
          "CollectionLiteralExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "data::classes::AssociationEnd::type",
          "behavioral::actions::LinkManipulationStatement::objects",
          "data::classes::Association::ends",
          "behavioral::actions::LinkManipulationStatement::association"
        ]
      },
      {
        "operations": {
          "not": 1,
          "getImplementedSignature": 2,
          "oclAsSet": 1,
          "implies": 1,
          "notEmpty": 1
        },
        "name": "BlockMustNotImplementSideEffectFreeSignature",
        "body": "self.block.getImplementedSignature()->notEmpty() implies\r\n  not self.block.getImplementedSignature().sideEffectFree",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "data::classes::Signature::sideEffectFree",
          "behavioral::actions::Statement::block"
        ]
      },
      {
        "operations": {
          "not": 1,
          "implies": 1
        },
        "name": "NoValueMustBeModified",
        "body": "self.association.ends->forAll(ae:data::classes::AssociationEnd |\r\n    ae.type.clazz.valueType implies not ae.contributesToEquality)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "data::classes::AssociationEnd::type",
          "data::classes::SapClass::valueType",
          "data::classes::Association::ends",
          "data::classes::ClassTypeDefinition::clazz",
          "data::classes::AssociationEnd::contributesToEquality",
          "behavioral::actions::LinkManipulationStatement::association"
        ]
      }
    ],
    "properties": [
      "objects",
      "at",
      "association"
    ]
  },
  {
    "name": "NamedValueWithOptionalInitExpression",
    "expressions": [{
      "operations": {
        "getType": 2,
        "oclAsSet": 1,
        "conformsTo": 1
      },
      "name": "AssignmentCompatibility",
      "body": "self.initExpression->forAll(ie | ie.getType().conformsTo(self.getType()))",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "OperationCallExpImpl": 4,
        "VariableExpImpl": 3,
        "PropertyCallExpImpl": 1
      },
      "properties": ["behavioral::actions::NamedValueWithOptionalInitExpression::initExpression"]
    }],
    "properties": [
      "initExpression",
      "namedValueDeclaration"
    ]
  },
  {
    "name": "AbstractStatusVariable",
    "expressions": [],
    "properties": [
      "isAgent",
      "isStateGuarded",
      "values"
    ]
  },
  {
    "name": "AndOperator",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SAMStatusValue",
    "expressions": [],
    "properties": [
      "samStatusVariable",
      "name"
    ]
  },
  {
    "name": "Iterator",
    "expressions": [],
    "properties": [
      "selection",
      "factOfGroupBy",
      "groupedFactsOfGroupBy",
      "boundToFor",
      "iterate",
      "dimension",
      "fromClause"
    ]
  },
  {
    "name": "Variable",
    "expressions": [{
      "operations": {
        "getType": 2,
        "oclAsSet": 1,
        "conformsTo": 1,
        "notEmpty": 1,
        "implies": 1
      },
      "name": "InitExpressionTypeMustMatchVariableType",
      "body": "self.initExpression->notEmpty() implies self.initExpression.getType().conformsTo(self.getType())",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 3,
        "OperationCallExpImpl": 6,
        "PropertyCallExpImpl": 2
      },
      "properties": ["behavioral::actions::NamedValueWithOptionalInitExpression::initExpression"]
    }],
    "properties": ["assignments"]
  },
  {
    "name": "Statement",
    "expressions": [
      {
        "operations": {
          "getNamedValuesInScope": 2,
          "at": 3,
          "addNamedValuesWithNewNames": 1,
          "oclIsKindOf": 1,
          "oclAsSet": 1,
          "+": 3,
          "asSet": 1,
          "oclAsType": 1,
          "-": 3,
          "indexOf": 1,
          ">": 1
        },
        "name": "getNamedValuesInScope",
        "body": "-- collect all NamedValue declarations introduced by statements in this statement's owning block, prior to this statement.\n  let pos:Integer = self.block.statements->indexOf(self) in\n  if pos > 1 then\n    self.addNamedValuesWithNewNames(\n    if self.block.statements->at(-1+pos).oclIsKindOf(NamedValueDeclaration) then\n      self.block.statements->at(-1+pos).oclAsType(NamedValueDeclaration).namedValue->asSet()\n    else\n      Set{}\n    endif,\n    self.block.statements->at(-1+pos).getNamedValuesInScope())\n  else\n    -- first statement in block; consider block itself\n    self.block.getNamedValuesInScope()\n  endif",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 11,
          "OperationCallExpImpl": 18,
          "LetExpImpl": 1,
          "IntegerLiteralExpImpl": 4,
          "TypeExpImpl": 2,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 2,
          "PropertyCallExpImpl": 10
        },
        "properties": [
          "behavioral::actions::NamedValueDeclaration::namedValue",
          "behavioral::actions::Block::statements",
          "behavioral::actions::Statement::block"
        ]
      },
      {
        "operations": {"getOutermostBlock": 1},
        "name": "getOutermostBlock",
        "body": "self.block.getOutermostBlock()",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["behavioral::actions::Statement::block"]
      },
      {
        "operations": {"getOwningClass": 1},
        "name": "getOwningClass",
        "body": "self.block.getOwningClass()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["behavioral::actions::Statement::block"]
      },
      {
        "operations": {
          "not": 3,
          "isSideEffectFree": 5,
          "oclIsKindOf": 8,
          "and": 7,
          "oclAsSet": 1,
          "implies": 6,
          "notEmpty": 1,
          "oclAsType": 6
        },
        "name": "isSideEffectFree",
        "body": "not self.oclIsKindOf(AddLink) and\n  not self.oclIsKindOf(RemoveLink) and\n  not self.oclIsKindOf(Assignment) and\n  (self.oclIsKindOf(IfElse) implies self.oclAsType(IfElse).condition.isSideEffectFree()) and\n  (self.oclIsKindOf(WhileLoop) implies self.oclAsType(WhileLoop).condition.isSideEffectFree()) and\n  (self.oclIsKindOf(ExpressionStatement) implies self.oclAsType(ExpressionStatement).expression.isSideEffectFree()) and\n  (self.oclIsKindOf(StatementWithArgument) implies (self.oclAsType(StatementWithArgument).argument->notEmpty() implies self.oclAsType(StatementWithArgument).argument.isSideEffectFree())) and\n  (self.oclIsKindOf(StatementWithNestedBlocks) implies self.oclAsType(StatementWithNestedBlocks).nestedBlocks->forAll(b|b.isSideEffectFree()))",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 37,
          "VariableExpImpl": 15,
          "TypeExpImpl": 14,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "behavioral::actions::StatementWithNestedBlocks::nestedBlocks",
          "dataaccess::expressions::Conditional::condition",
          "dataaccess::expressions::WithArgument::argument",
          "behavioral::actions::ExpressionStatement::expression"
        ]
      },
      {
        "operations": {
          "not": 2,
          "<>": 1,
          "isSideEffectFree": 5,
          "oclIsKindOf": 8,
          "and": 7,
          "oclAsSet": 1,
          "implies": 7,
          "notEmpty": 1,
          "oclAsType": 7
        },
        "name": "isSideEffectFreeForBlock",
        "body": "not self.oclIsKindOf(AddLink) and\n  not self.oclIsKindOf(RemoveLink) and\n  (self.oclIsKindOf(Assignment) implies self.oclAsType(Assignment).assignTo.owner <> block) and\n  (self.oclIsKindOf(IfElse) implies self.oclAsType(IfElse).condition.isSideEffectFree()) and\n  (self.oclIsKindOf(WhileLoop) implies self.oclAsType(WhileLoop).condition.isSideEffectFree()) and\n  (self.oclIsKindOf(ExpressionStatement) implies self.oclAsType(ExpressionStatement).expression.isSideEffectFree()) and\n  (self.oclIsKindOf(StatementWithArgument) implies (self.oclAsType(StatementWithArgument).argument->notEmpty() implies self.oclAsType(StatementWithArgument).argument.isSideEffectFree())) and\n  (self.oclIsKindOf(StatementWithNestedBlocks) implies self.oclAsType(StatementWithNestedBlocks).nestedBlocks->forAll(b|b.isSideEffectFree()))",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 17,
          "OperationCallExpImpl": 39,
          "TypeExpImpl": 15,
          "PropertyCallExpImpl": 8
        },
        "properties": [
          "behavioral::actions::StatementWithNestedBlocks::nestedBlocks",
          "behavioral::actions::Assignment::assignTo",
          "dataaccess::expressions::Conditional::condition",
          "dataaccess::expressions::WithArgument::argument",
          "behavioral::actions::ExpressionStatement::expression",
          "data::classes::NamedValue::owner"
        ]
      }
    ],
    "properties": ["block"]
  },
  {
    "name": "StatementWithNestedBlocks",
    "expressions": [],
    "properties": ["nestedBlocks"]
  },
  {
    "name": "StatementWithArgument",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SAMAction",
    "expressions": [],
    "properties": [
      "businessObjectNode",
      "isAgentAction",
      "name",
      "samSchemaActions"
    ]
  },
  {
    "name": "SAMSchemaValue",
    "expressions": [],
    "properties": [
      "samSchemaActions",
      "samSourceSchemaValues",
      "isInitial",
      "isInhibiting",
      "samSchemaVariable",
      "samSourceSchemaActions",
      "samTargetSchemaValues",
      "samOperators"
    ]
  },
  {
    "name": "ConnectableElement",
    "expressions": [],
    "properties": [
      "incoming",
      "outgoing"
    ]
  },
  {
    "name": "ExpressionStatement",
    "expressions": [],
    "properties": ["expression"]
  },
  {
    "name": "PreconditionKindEnum",
    "expressions": [],
    "properties": []
  },
  {
    "name": "StatusVariable",
    "expressions": [],
    "properties": ["proxy"]
  },
  {
    "name": "Action",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Dummy",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SchemaElement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "InhibitingStrategy",
    "expressions": [],
    "properties": []
  },
  {
    "name": "NeutralStrategy",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SAMOperator",
    "expressions": [],
    "properties": [
      "kind",
      "samTargetOperators",
      "samStatusSchema",
      "samSourceOperators",
      "samSchemaActions",
      "samSchemaValues"
    ]
  },
  {
    "name": "StatusSchema",
    "expressions": [],
    "properties": [
      "node",
      "elements"
    ]
  },
  {
    "name": "Precondition",
    "expressions": [],
    "properties": ["strategy"]
  },
  {
    "name": "SAMSchemaAction",
    "expressions": [],
    "properties": [
      "samSchemaOperators",
      "samTargetSchemaValues",
      "samAction",
      "samStatusSchema",
      "samSchemaValues"
    ]
  },
  {
    "name": "ActionProxy",
    "expressions": [],
    "properties": ["action"]
  },
  {
    "name": "BusinessObjectNode",
    "expressions": [],
    "properties": [
      "variables",
      "actions"
    ]
  },
  {
    "name": "StatusVariableProxy",
    "expressions": [],
    "properties": ["variable"]
  },
  {
    "name": "WhileLoop",
    "expressions": [{
      "operations": {"at": 1},
      "name": "getLoopBody",
      "body": "self.nestedBlocks->at(1)",
      "type": "OperationImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "IntegerLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["behavioral::actions::StatementWithNestedBlocks::nestedBlocks"]
    }],
    "properties": []
  },
  {
    "name": "Synchroniser",
    "expressions": [],
    "properties": []
  },
  {
    "name": "EventFilter",
    "expressions": [{
      "operations": {
        "getImplementedSignature": 1,
        "conformsTo": 1
      },
      "name": "FilterBlockSignatureMatchNotificationSignature",
      "body": "self.subscription.producer.notificationSignatures->exists(ms:data::classes::MethodSignature |\r\n    ms.conformsTo(self.test.getImplementedSignature()))",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 3,
        "OperationCallExpImpl": 2,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "behavioral::events::EventFilter::test",
        "behavioral::events::Subscription::producer",
        "behavioral::events::EventProducer::notificationSignatures",
        "behavioral::events::EventFilter::subscription"
      ]
    }],
    "properties": [
      "test",
      "subscription"
    ]
  },
  {
    "name": "OrOperator",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SAMDerivatorKindEnum",
    "expressions": [],
    "properties": []
  },
  {
    "name": "BusinessObject",
    "expressions": [],
    "properties": ["nodes"]
  },
  {
    "name": "AbstractAction",
    "expressions": [],
    "properties": [
      "isPreconditionFixed",
      "isAgent"
    ]
  },
  {
    "name": "RequiredStrategy",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SingleBlockStatement",
    "expressions": [{
      "operations": {
        "size": 1,
        "=": 1
      },
      "name": "OwnsExactlyOneBlock",
      "body": "self.nestedBlocks->size() = 1",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 1,
        "IntegerLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["behavioral::actions::StatementWithNestedBlocks::nestedBlocks"]
    }],
    "properties": []
  },
  {
    "name": "EnablingStrategy",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Foreach",
    "expressions": [{
      "operations": {
        "at": 1,
        "=": 1
      },
      "name": "VariableOwnedByRightBlock",
      "body": "self.forVariable.owner = self.nestedBlocks->at(1)",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 2,
        "IntegerLiteralExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "behavioral::actions::StatementWithNestedBlocks::nestedBlocks",
        "behavioral::actions::Foreach::forVariable",
        "data::classes::NamedValue::owner"
      ]
    }],
    "properties": [
      "parallel",
      "collection",
      "forVariable"
    ]
  },
  {
    "name": "StatusValueProxy",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "Sort",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SAMDerivator",
    "expressions": [],
    "properties": [
      "kind",
      "businessObject",
      "samSchemaDerivators"
    ]
  },
  {
    "name": "Assignment",
    "expressions": [
      {
        "operations": {
          "oclAsSet": 1,
          "notEmpty": 1
        },
        "name": "MustHaveArgument",
        "body": "self.argument->notEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["dataaccess::expressions::WithArgument::argument"]
      },
      {
        "operations": {
          "getType": 2,
          "conformsTo": 1
        },
        "name": "AssignmentCompatibility",
        "body": "self.argument.getType().conformsTo(self.assignTo.getType())",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "behavioral::actions::Assignment::assignTo",
          "dataaccess::expressions::WithArgument::argument"
        ]
      }
    ],
    "properties": ["assignTo"]
  },
  {
    "name": "Constant",
    "expressions": [{
      "operations": {
        "getType": 2,
        "oclAsSet": 1,
        "conformsTo": 1,
        "notEmpty": 1,
        "implies": 1
      },
      "name": "InitExpressionTypeMustMatchVariableType",
      "body": "self.initExpression->notEmpty() implies self.initExpression.getType().conformsTo(self.getType())",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 6,
        "VariableExpImpl": 3,
        "PropertyCallExpImpl": 2
      },
      "properties": ["behavioral::actions::NamedValueWithOptionalInitExpression::initExpression"]
    }],
    "properties": ["iterate"]
  },
  {
    "name": "SAMStatusSchema",
    "expressions": [],
    "properties": [
      "name",
      "businessObjectNode",
      "samSchemaVariables",
      "samOperators",
      "samSchemaActions",
      "samSchemaDerivators"
    ]
  },
  {
    "name": "TaskAgent",
    "expressions": [],
    "properties": []
  },
  {
    "name": "EventProducer",
    "expressions": [],
    "properties": [
      "subscriptions",
      "notificationSignatures"
    ]
  },
  {
    "name": "Operator",
    "expressions": [],
    "properties": []
  },
  {
    "name": "QueryInvocation",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Block",
    "expressions": [
      {
        "operations": {
          "isSideEffectFree": 1,
          "oclAsSet": 1,
          "implies": 2,
          "notEmpty": 1
        },
        "name": "IsSideEffectFreeIfImplementsSideEffectFreeSignature",
        "body": "self.implements_->notEmpty() implies\r\n    (self.implements_.sideEffectFree implies self.isSideEffectFree())",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 5,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "data::classes::Signature::sideEffectFree",
          "data::classes::SignatureImplementation::implements_"
        ]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "notEmpty": 1,
          "getOutermostBlock": 1
        },
        "name": "getOutermostBlock",
        "body": "if self.owningStatement->notEmpty() then\n    self.owningStatement.block.getOutermostBlock()\n  else\n    self\n  endif",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 3,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "behavioral::actions::Block::owningStatement",
          "behavioral::actions::Statement::block"
        ]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "isEmpty": 1
        },
        "name": "DoesNotOwnIterators",
        "body": "self.variables->select(i|i.oclIsKindOf(Iterator))->isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["behavioral::actions::Block::variables"]
      },
      {
        "operations": {
          "<>": 2,
          "implies": 1
        },
        "name": "DistinctNamedValueNames",
        "body": "self.variables->forAll( i, j | i <> j implies i.name <> j.name )",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "modelmanagement::NamedElement::name",
          "behavioral::actions::Block::variables"
        ]
      },
      {
        "operations": {
          "getNamedValuesInScope": 1,
          "including": 3,
          "addNamedValuesWithNewNames": 1,
          "oclIsKindOf": 1,
          "and": 1,
          "oclAsSet": 6,
          "union": 3,
          "notEmpty": 3,
          "asSet": 2,
          "oclAsType": 2,
          "getOwningClass": 1
        },
        "name": "getNamedValuesInScope",
        "body": "  self.addNamedValuesWithNewNames(\r\n  -- Handle Foreach\r\n  let s:Set(data::classes::NamedValue)=Set{} in\r\n  s->union(if owningStatement.oclIsKindOf(Foreach) and owningStatement->notEmpty() then\r\n    owningStatement.oclAsType(Foreach).forVariable.oclAsType(data::classes::NamedValue)->asSet()\r\n  else\r\n    Set{}\r\n  endif)->union(\r\n  -- add parameters for those blocks that are used as a signature implementation\r\n  functionSignature->collect(input->iterate(i; rslt:Set(data::classes::NamedValue)=Set{} | rslt->including(i)))\r\n  )->union(\r\n  implements_->collect(input->iterate(i; rslt:Set(data::classes::NamedValue)=Set{}| rslt->including(i)))\r\n  )->asSet(),\r\n  -- then ascend the block composition hierarchy and add all NamedValues defined in parent blocks before the occurrence of the statement with the nested block\r\n  if owningStatement->notEmpty() then\r\n    owningStatement.getNamedValuesInScope()\r\n  else\r\n    -- add formal object parameters from owning class\r\n    let oc:data::classes::SapClass = self.getOwningClass() in\r\n    if oc->notEmpty() then\r\n      oc.formalObjectParameters->iterate(i; rslt:Set(data::classes::NamedValue)=Set{} | rslt->including(i))\r\n    else\r\n      let es:Set(data::classes::NamedValue) = Set{} in es\r\n    endif\r\n  endif)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 21,
          "OperationCallExpImpl": 24,
          "LetExpImpl": 3,
          "TypeExpImpl": 3,
          "IterateExpImpl": 3,
          "CollectionLiteralExpImpl": 6,
          "IfExpImpl": 3,
          "PropertyCallExpImpl": 11
        },
        "properties": [
          "data::classes::SignatureImplementation::implements_",
          "behavioral::actions::Foreach::forVariable",
          "data::classes::FunctionSignatureImplementation::functionSignature",
          "data::classes::Signature::input",
          "data::classes::SapClass::formalObjectParameters",
          "behavioral::actions::Block::owningStatement"
        ]
      },
      {
        "operations": {"isSideEffectFreeForBlock": 1},
        "name": "localIsSideEffectFree",
        "body": "self.statements->forAll(s|s.isSideEffectFreeForBlock(self))",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["behavioral::actions::Block::statements"]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "getImplementedSignature": 1,
          "notEmpty": 1,
          "getOutermostBlock": 1,
          "getOwningClass": 1
        },
        "name": "getOwningClass",
        "body": "let outermost:Block = self.getOutermostBlock() in\n  let implementedSignature:data::classes::Signature = outermost.getImplementedSignature() in\n  if implementedSignature->notEmpty() then\n    implementedSignature.getOwningClass()\n  else\n    null\n  endif",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 4,
          "LetExpImpl": 2,
          "NullLiteralExpImpl": 1,
          "IfExpImpl": 1
        },
        "properties": []
      }
    ],
    "properties": [
      "variables",
      "filter",
      "statements",
      "owningStatement"
    ]
  },
  {
    "name": "Connector",
    "expressions": [],
    "properties": [
      "target",
      "source"
    ]
  },
  {
    "name": "AddLink",
    "expressions": [],
    "properties": []
  },
  {
    "name": "NamedValueDeclaration",
    "expressions": [],
    "properties": ["namedValue"]
  },
  {
    "name": "Dummy",
    "expressions": [],
    "properties": []
  },
  {
    "name": "AbstractStatusValue",
    "expressions": [],
    "properties": [
      "isStateGuarded",
      "isInitial",
      "isInhibiting"
    ]
  }
]
