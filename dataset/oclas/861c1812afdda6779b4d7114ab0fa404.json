[
  {
    "name": "X",
    "expressions": [{
      "operations": {
        "ast": 2,
        "oclAsType": 2
      },
      "name": "ast",
      "body": "\n\tif isA1\n\tthen target::A1 {\n\t\townsB = ownsY.oclAsType(Y1).ast()\n\t}\n\telse target::A2 {\n\t\townsC = ownsY.oclAsType(Y2).ast()\n\t}\n\tendif\n\n",
      "type": "OperationImpl",
      "constructs": {
        "OperationCallExpImpl": 4,
        "VariableExpImpl": 3,
        "TypeExpImpl": 2,
        "ShadowExpImpl": 2,
        "IfExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "source::X::ownsY",
        "source::X::isA1"
      ]
    }],
    "properties": []
  },
  {
    "name": "Y1",
    "expressions": [{
      "operations": {"ast": 1},
      "name": "ast",
      "body": "\n\ttarget::B {\n\t\townsD = ownsZ.ast()\n\t}\n\t\n",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "ShadowExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["source::Y::ownsZ"]
    }],
    "properties": []
  },
  {
    "name": "Y2",
    "expressions": [{
      "operations": {"ast": 1},
      "name": "ast",
      "body": "\n\ttarget::C {\n\t\townsD = ownsZ.ast()\n\t}\n\n",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "ShadowExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["source::Y::ownsZ"]
    }],
    "properties": []
  },
  {
    "name": "Z",
    "expressions": [{
      "operations": {
        "ast": 2,
        "oclIsKindOf": 1,
        "oclAsType": 2
      },
      "name": "ast",
      "body": "\n\t-- if toY.ast().oclIsKindOf(target::B)\n\tif toY.oclIsKindOf(source::Y1)\n\tthen target::D {\n\t\t\ttoA = toY.oclAsType(source::Y1).ast().toA1\n\t\t} \n\telse target::D {\n\t\t\ttoA = toY.oclAsType(source::Y2).ast().toA2\n\t\t}\n\tendif\n",
      "type": "OperationImpl",
      "constructs": {
        "OperationCallExpImpl": 5,
        "VariableExpImpl": 3,
        "TypeExpImpl": 3,
        "ShadowExpImpl": 2,
        "IfExpImpl": 1,
        "PropertyCallExpImpl": 5
      },
      "properties": [
        "source::Z::toY",
        "target::B::toA1",
        "target::C::toA2"
      ]
    }],
    "properties": []
  }
]
