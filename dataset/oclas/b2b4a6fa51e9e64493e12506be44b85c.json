[
  {
    "name": "Hazard",
    "expressions": [{
      "operations": {
        "size": 3,
        "oclAsSet": 3,
        "+": 2,
        ">": 1
      },
      "name": "NoStandaloneUndevelopedEvent",
      "body": "self.inputGate->size() + self.outputGate->size() + self.inEvent->size() > 0",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 9,
        "VariableExpImpl": 3,
        "IntegerLiteralExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "fault_tree::Event::outputGate",
        "fault_tree::Hazard::inEvent",
        "fault_tree::Event::inputGate"
      ]
    }],
    "properties": [
      "FaultTree",
      "inEvent"
    ]
  },
  {
    "name": "IntermediateEvent",
    "expressions": [
      {
        "operations": {
          "or": 1,
          "oclIsTypeOf": 2,
          "oclAsSet": 1
        },
        "name": "OnlyIntermediateOrBasicEventAsInput",
        "body": "self.inEvent->forAll(e : Event | (e.oclIsTypeOf(IntermediateEvent) or e.oclIsTypeOf(BasicEvent)))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["fault_tree::IntermediateEvent::inEvent"]
      },
      {
        "operations": {
          "or": 1,
          "oclIsTypeOf": 2,
          "oclAsSet": 1
        },
        "name": "OnlyIntermediateOrHazardtAsOutput",
        "body": "self.outEvent->forAll(e : Event | (e.oclIsTypeOf(IntermediateEvent) or e.oclIsTypeOf(Hazard)))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 4,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["fault_tree::IntermediateEvent::outEvent"]
      },
      {
        "operations": {
          "size": 4,
          "oclAsSet": 4,
          "+": 3,
          ">": 1
        },
        "name": "NoStandaloneIntermediateEvent",
        "body": "self.inputGate->size() + self.outputGate->size() + self.inEvent->size() + self.outEvent->size()> 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 12,
          "VariableExpImpl": 4,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "fault_tree::Event::outputGate",
          "fault_tree::Event::inputGate",
          "fault_tree::IntermediateEvent::inEvent",
          "fault_tree::IntermediateEvent::outEvent"
        ]
      }
    ],
    "properties": [
      "instance",
      "BasicEvent",
      "inEvent",
      "outEvent",
      "Hazard"
    ]
  },
  {
    "name": "XOR",
    "expressions": [],
    "properties": []
  },
  {
    "name": "AND",
    "expressions": [],
    "properties": []
  },
  {
    "name": "UndevelopedEvent",
    "expressions": [{
      "operations": {
        "size": 2,
        "oclAsSet": 2,
        "+": 1,
        ">": 1
      },
      "name": "NoStandaloneUndevelopedEvent",
      "body": "self.inputGate->size() + self.outputGate->size() > 0",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 6,
        "VariableExpImpl": 2,
        "IntegerLiteralExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "fault_tree::Event::outputGate",
        "fault_tree::Event::inputGate"
      ]
    }],
    "properties": []
  },
  {
    "name": "Gate",
    "expressions": [
      {
        "operations": {
          "size": 2,
          "oclAsSet": 2,
          "+": 1,
          "=": 1
        },
        "name": "ExactlyOneOutput",
        "body": "self.outputGate->size() + self.outputEvent->size() = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "fault_tree::Gate::outputEvent",
          "fault_tree::Gate::outputGate"
        ]
      },
      {
        "operations": {"<>": 2},
        "name": "NoAutoReferencesAllowedInOutputGate",
        "body": "if self.outputGate <> null then self.outputGate.id <> self.id else true endif",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "NullLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "BooleanLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "commonBase::IDBase::id",
          "fault_tree::Gate::outputGate"
        ]
      },
      {
        "operations": {
          "not": 1,
          "or": 1,
          "oclIsTypeOf": 3,
          "and": 1,
          "oclAsSet": 1
        },
        "name": "NoBasicEventAsOutput",
        "body": "self.outputEvent->forAll(e : Event | (e.oclIsTypeOf(IntermediateEvent) or e.oclIsTypeOf(Hazard)) and not e.oclIsTypeOf(BasicEvent))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 7,
          "TypeExpImpl": 3,
          "PropertyCallExpImpl": 1
        },
        "properties": ["fault_tree::Gate::outputEvent"]
      },
      {
        "operations": {
          "size": 2,
          "=": 2,
          ">": 1
        },
        "name": "NoAutoReferencesAllowedInInputGates",
        "body": "if self.inputGates->size() > 0 then self.inputGates->select(g : Gate | g.id = self.id)->size() = 0 else true endif",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 4,
          "IntegerLiteralExpImpl": 2,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 4,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "commonBase::IDBase::id",
          "fault_tree::Gate::inputGates"
        ]
      },
      {
        "operations": {
          "not": 1,
          "or": 1,
          "oclIsTypeOf": 3,
          "and": 1
        },
        "name": "NoHazardAsInput",
        "body": "self.inputEvents->forAll(e : Event | (e.oclIsTypeOf(BasicEvent) or e.oclIsTypeOf(IntermediateEvent)) and not e.oclIsTypeOf(Hazard))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 4,
          "TypeExpImpl": 3,
          "PropertyCallExpImpl": 1
        },
        "properties": ["fault_tree::Gate::inputEvents"]
      },
      {
        "operations": {
          "size": 2,
          "+": 1,
          ">=": 1
        },
        "name": "AtLeastTwoInputs",
        "body": "self.inputGates->size() + self.inputEvents->size() >= 2",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "fault_tree::Gate::inputEvents",
          "fault_tree::Gate::inputGates"
        ]
      }
    ],
    "properties": [
      "root",
      "outputEvent",
      "Gate",
      "outputGate",
      "inputEvents",
      "Gate",
      "inputGates"
    ]
  },
  {
    "name": "FailureInstance",
    "expressions": [],
    "properties": [
      "previousFailure",
      "previousError",
      "FailureInstance",
      "type",
      "event",
      "name",
      "root"
    ]
  },
  {
    "name": "ErrorType",
    "expressions": [],
    "properties": [
      "root",
      "name",
      "error"
    ]
  },
  {
    "name": "BasicEvent",
    "expressions": [{
      "operations": {
        "size": 3,
        "oclAsSet": 3,
        "+": 2,
        ">": 1
      },
      "name": "NoStandaloneBasicEvent",
      "body": "self.inputGate->size() + self.outputGate->size() + self.outEvent->size()> 0",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 3,
        "OperationCallExpImpl": 9,
        "IntegerLiteralExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "fault_tree::Event::outputGate",
        "fault_tree::BasicEvent::outEvent",
        "fault_tree::Event::inputGate"
      ]
    }],
    "properties": [
      "outEvent",
      "instance",
      "probability"
    ]
  },
  {
    "name": "ErrorInstance",
    "expressions": [],
    "properties": [
      "root",
      "type",
      "name",
      "error",
      "FailureInstance"
    ]
  },
  {
    "name": "Inhibit",
    "expressions": [],
    "properties": []
  },
  {
    "name": "FaultTree",
    "expressions": [],
    "properties": [
      "error_instance",
      "failure_type",
      "failure_instance",
      "hazard",
      "event",
      "error_type",
      "gate"
    ]
  },
  {
    "name": "PriorAND",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Event",
    "expressions": [{
      "operations": {
        "size": 1,
        "oclAsSet": 1,
        ">": 1
      },
      "name": "EventHasAName",
      "body": "self.name->size() > 0",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 3,
        "VariableExpImpl": 1,
        "IntegerLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["fault_tree::Event::name"]
    }],
    "properties": [
      "outputGate",
      "root",
      "description",
      "inputGate",
      "name",
      "IntermediateEvent",
      "IntermediateEvent"
    ]
  },
  {
    "name": "FailureType",
    "expressions": [],
    "properties": [
      "instance",
      "name",
      "root"
    ]
  },
  {
    "name": "OR",
    "expressions": [],
    "properties": []
  }
]
