[
  {
    "name": "Expression",
    "expressions": [],
    "properties": [
      "left",
      "right",
      "Transition",
      "_name",
      "operator"
    ]
  },
  {
    "name": "StateMachine",
    "expressions": [
      {
        "operations": {
          "size": 1,
          "allInstances": 1,
          "=": 1
        },
        "name": "singleStateMachine",
        "body": "StateMachine.allInstances()->size() = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "unactiveSubTree": 1,
          "activeSubTree": 1
        },
        "name": "activeStateHierarchyConsistency",
        "body": "if self.isActive then self.activeSubTree() else self.unactiveSubTree() endif",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["SimplStateMachine::State::isActive"]
      },
      {
        "operations": {"oclIsUndefined": 1},
        "name": "noContainerForStatemachine",
        "body": "self.container.oclIsUndefined()",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["SimplStateMachine::State::container"]
      }
    ],
    "properties": [
      "events",
      "transitions",
      "variables"
    ]
  },
  {
    "name": "ExpressionElement",
    "expressions": [],
    "properties": [
      "Expression",
      "Assignment",
      "Expression"
    ]
  },
  {
    "name": "Event",
    "expressions": [{
      "operations": {
        "allInstances": 1,
        "implies": 1,
        "=": 2
      },
      "name": "uniqueEventName",
      "body": "Event.allInstances()->forAll(e : Event | e.name = self.name implies e = self)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "OperationCallExpImpl": 4,
        "VariableExpImpl": 4,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": ["SimplStateMachine::Event::name"]
    }],
    "properties": [
      "Transition",
      "name",
      "StateMachine"
    ]
  },
  {
    "name": "CompositeState",
    "expressions": [
      {
        "operations": {"includes": 1},
        "name": "initialStateInComposite",
        "body": "self.states->includes(self.initialState.referencedState)",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "SimplStateMachine::CompositeState::states",
          "SimplStateMachine::InitialState::referencedState",
          "SimplStateMachine::CompositeState::initialState"
        ]
      },
      {
        "operations": {
          "size": 1,
          "oclIsTypeOf": 1,
          "and": 1,
          "unactiveSubTree": 1,
          "activeSubTree": 1,
          "oclAsType": 2,
          "=": 1
        },
        "name": "activeSubTree",
        "body": "self.states->select(s : State | s.isActive)->size() = 1 and self.states->select(s : State | s.oclIsTypeOf(CompositeState))->forAll(s : State | if s.isActive then s.oclAsType(CompositeState).activeSubTree() else s.oclAsType(CompositeState).unactiveSubTree() endif)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "OperationCallExpImpl": 8,
          "VariableExpImpl": 7,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 3,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "SimplStateMachine::CompositeState::states",
          "SimplStateMachine::State::isActive"
        ]
      },
      {
        "operations": {
          "not": 1,
          "oclIsTypeOf": 1,
          "and": 1,
          "unactiveSubTree": 1,
          "oclAsType": 1
        },
        "name": "unactiveSubTree",
        "body": "self.states->forAll(s : State | not s.isActive) and self.states->select(s : State | s.oclIsTypeOf(CompositeState))->forAll(s : State | s.oclAsType(CompositeState).unactiveSubTree())",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 5,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "SimplStateMachine::CompositeState::states",
          "SimplStateMachine::State::isActive"
        ]
      },
      {
        "operations": {
          "implies": 1,
          "=": 2
        },
        "name": "uniqueCompositeName",
        "body": "self.states->forAll(s1 : State | self.states->forAll(s2 : State | s1.name = s2.name implies s1 = s2))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "SimplStateMachine::CompositeState::states",
          "SimplStateMachine::State::name"
        ]
      }
    ],
    "properties": [
      "states",
      "initialState"
    ]
  },
  {
    "name": "Operator",
    "expressions": [],
    "properties": []
  },
  {
    "name": "IntegerData",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "Transition",
    "expressions": [{
      "operations": {
        "not": 2,
        "oclIsTypeOf": 2,
        "and": 1
      },
      "name": "transInitialState",
      "body": "not self.source.oclIsTypeOf(StateMachine) and not self.target.oclIsTypeOf(StateMachine)",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 5,
        "VariableExpImpl": 2,
        "TypeExpImpl": 2,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "SimplStateMachine::Transition::source",
        "SimplStateMachine::Transition::target"
      ]
    }],
    "properties": [
      "source",
      "StateMachine",
      "target",
      "guard",
      "event"
    ]
  },
  {
    "name": "Assignment",
    "expressions": [],
    "properties": [
      "Operation",
      "_name",
      "expression",
      "variable"
    ]
  },
  {
    "name": "BooleanData",
    "expressions": [],
    "properties": ["value"]
  },
  {
    "name": "IntegerVariable",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Operation",
    "expressions": [],
    "properties": [
      "contents",
      "State"
    ]
  },
  {
    "name": "BooleanVariable",
    "expressions": [],
    "properties": []
  },
  {
    "name": "State",
    "expressions": [{
      "operations": {
        "not": 2,
        "oclIsUndefined": 1,
        "oclIsTypeOf": 1,
        "implies": 1
      },
      "name": "containerForAllStates",
      "body": "not self.oclIsTypeOf(StateMachine) implies not self.container.oclIsUndefined()",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 5,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["SimplStateMachine::State::container"]
    }],
    "properties": [
      "container",
      "InitialState",
      "name",
      "Transition",
      "Transition",
      "isActive",
      "operation"
    ]
  },
  {
    "name": "Variable",
    "expressions": [],
    "properties": [
      "Assignment",
      "name",
      "StateMachine",
      "VariableReference",
      "value"
    ]
  },
  {
    "name": "VariableReference",
    "expressions": [],
    "properties": [
      "_name",
      "variable"
    ]
  },
  {
    "name": "Data",
    "expressions": [],
    "properties": ["Variable"]
  },
  {
    "name": "InitialState",
    "expressions": [],
    "properties": [
      "CompositeState",
      "referencedState"
    ]
  }
]
