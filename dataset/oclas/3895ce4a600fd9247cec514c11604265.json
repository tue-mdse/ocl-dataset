[
  {
    "name": "SnapshotSelection",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Store",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Rollback",
    "expressions": [],
    "properties": []
  },
  {
    "name": "All",
    "expressions": [
      {
        "operations": {
          "oclIsKindOf": 1,
          "getType": 2,
          "and": 2,
          "oclBadOperation": 1,
          "=": 2
        },
        "name": "ExpressionMustBeSnapshotOrTimePoint",
        "body": "if self.snapshot = SnapshotSelection::SPECIFIED then\n    self.snapshotIdentifier.getType().upperMultiplicity = 1 and\n    self.snapshotIdentifier.getType().oclIsKindOf(data::classes::ClassTypeDefinition) and\n   Set{'Snapshot', 'TimePoint'}->includes(self.snapshotIdentifier.getType().oclAsType(data::classes::ClassTypeDefinition).clazz.name)\n  else\n    true\n  endif",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 8,
          "EnumLiteralExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 2,
          "TypeExpImpl": 1,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 4,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "persistence::expressions::All::snapshotIdentifier",
          "persistence::expressions::All::snapshot",
          "data::classes::Multiplicity::upperMultiplicity"
        ]
      },
      {
        "operations": {"not": 1},
        "name": "MustBeEntityClass",
        "body": "not self.ofClass.valueType",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "data::classes::SapClass::valueType",
          "persistence::expressions::All::ofClass"
        ]
      }
    ],
    "properties": [
      "ofClass",
      "snapshot",
      "snapshotIdentifier"
    ]
  },
  {
    "name": "Delete",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Commit",
    "expressions": [{
      "operations": {
        "getType": 2,
        "oclIsKindOf": 1,
        "and": 1,
        "=": 1,
        "oclAsType": 1
      },
      "name": "ReturnsSnapshot",
      "body": "self.getType().oclIsKindOf(data::classes::ClassTypeDefinition) and\r\n  self.getType().oclAsType(data::classes::ClassTypeDefinition).clazz.name = 'Snapshot'",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 6,
        "VariableExpImpl": 2,
        "StringLiteralExpImpl": 1,
        "TypeExpImpl": 2,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "data::classes::ClassTypeDefinition::clazz",
        "modelmanagement::NamedElement::name"
      ]
    }],
    "properties": []
  },
  {
    "name": "Snapshot",
    "expressions": [{
      "operations": {
        "oclIsKindOf": 1,
        "getType": 1
      },
      "name": "SourceObjectIsOfClassType",
      "body": "self.object.getType().oclIsKindOf(data::classes::ClassTypeDefinition)",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["dataaccess::expressions::ObjectBasedExpression::object"]
    }],
    "properties": []
  },
  {
    "name": "SapClass",
    "expressions": [],
    "properties": ["All"]
  },
  {
    "name": "StatementWithEntityArgument",
    "expressions": [{
      "operations": {
        "not": 1,
        "oclIsKindOf": 1,
        "getType": 2,
        "oclAsType": 1
      },
      "name": "CanStoreOnlyEntities",
      "body": "if self.argument.getType().oclIsKindOf(data::classes::ClassTypeDefinition) then\r\n    not self.argument.getType().oclAsType(data::classes::ClassTypeDefinition).clazz.valueType\r\n  else\r\n    false\r\n  endif",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 5,
        "TypeExpImpl": 2,
        "IfExpImpl": 1,
        "PropertyCallExpImpl": 4,
        "BooleanLiteralExpImpl": 1
      },
      "properties": [
        "data::classes::SapClass::valueType",
        "data::classes::ClassTypeDefinition::clazz",
        "dataaccess::expressions::WithArgument::argument"
      ]
    }],
    "properties": []
  }
]
