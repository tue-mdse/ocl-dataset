[
  {
    "name": "Type",
    "expressions": [{
      "operations": {},
      "name": "flattenedType",
      "body": "self\n\n",
      "type": "OperationImpl",
      "constructs": {"VariableExpImpl": 1},
      "properties": []
    }],
    "properties": []
  },
  {
    "name": "TypedElement",
    "expressions": [{
      "operations": {"conformsTo": 1},
      "name": "CompatibleBody",
      "body": "\n\tbodySpecification.type?.conformsTo(self.type)\n\n",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": []
  },
  {
    "name": "ShadowPart",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "TypeIsNotInvalid",
      "body": "type <> OclInvalid\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": []
  },
  {
    "name": "BooleanLiteralExp",
    "expressions": [{
      "operations": {"=": 1},
      "name": "TypeIsBoolean",
      "body": "self.type = Boolean\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": []
  },
  {
    "name": "CollectionLiteralPart",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "TypeIsNotInvalid",
      "body": "type <> OclInvalid\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": []
  },
  {
    "name": "Feature",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "TypeIsNotInvalid",
      "body": "type <> OclInvalid\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": []
  },
  {
    "name": "Class",
    "expressions": [{
      "operations": {},
      "name": "UniqueInvariantName",
      "body": "ownedInvariants->isUnique(p | p?.name)\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 2,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "pivot::NamedElement::name",
        "pivot::Class::ownedInvariants"
      ]
    }],
    "properties": []
  },
  {
    "name": "LetExp",
    "expressions": [
      {
        "operations": {"<>": 1},
        "name": "TypeIsNotInvalid",
        "body": "type <> OclInvalid\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["pivot::TypedElement::type"]
      },
      {
        "operations": {"=": 1},
        "name": "TypeIsInType",
        "body": "type = ownedIn.type\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "pivot::LetExp::ownedIn",
          "pivot::TypedElement::type"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "IntegerLiteralExp",
    "expressions": [{
      "operations": {"=": 1},
      "name": "TypeIsInteger",
      "body": "self.type = Integer\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": []
  },
  {
    "name": "StateExp",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "TypeIsNotInvalid",
      "body": "type <> OclInvalid\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": []
  },
  {
    "name": "MessageExp",
    "expressions": [
      {
        "operations": {
          "not": 1,
          "oclIsKindOf": 1
        },
        "name": "TargetIsNotACollection",
        "body": "not ownedTarget.type.oclIsKindOf(CollectionType)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::MessageExp::ownedTarget",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "size": 2,
          "oclAsSet": 2,
          "+": 1,
          "=": 1
        },
        "name": "OneCallOrOneSend",
        "body": "ownedCalledOperation->size() + ownedSentSignal->size() = 1\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::MessageExp::ownedSentSignal",
          "pivot::MessageExp::ownedCalledOperation"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "IterateExp",
    "expressions": [
      {
        "operations": {"conformsTo": 1},
        "name": "BodyTypeConformsToResultType",
        "body": "ownedBody.type.conformsTo(ownedResult?.type)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::LoopExp::ownedBody",
          "pivot::IterateExp::ownedResult",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {"implies": 1},
        "name": "SafeIteratorIsRequired",
        "body": "isSafe implies ownedIterators?->forAll(isRequired)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "pivot::LoopExp::ownedIterators",
          "pivot::TypedElement::isRequired",
          "pivot::CallExp::isSafe"
        ]
      },
      {
        "operations": {"=": 1},
        "name": "TypeIsResultType",
        "body": "type = ownedResult?.type\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "pivot::IterateExp::ownedResult",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "size": 1,
          "oclAsSet": 1,
          "=": 1
        },
        "name": "OneInitializer",
        "body": "self.ownedResult?.ownedInit->size() = 1\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::Variable::ownedInit",
          "pivot::IterateExp::ownedResult"
        ]
      },
      {
        "operations": {
          "not": 1,
          "implies": 1,
          "oclAsType": 1
        },
        "name": "SafeSourceCanBeNull",
        "body": "isSafe implies not ownedSource?.type.oclAsType(CollectionType).isNullFree\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type",
          "pivot::CollectionType::isNullFree",
          "pivot::CallExp::isSafe"
        ]
      },
      {
        "operations": {
          "not": 1,
          "and": 1,
          "implies": 1,
          "oclAsType": 1
        },
        "name": "UnsafeSourceCanNotBeNull",
        "body": "(not isSafe and ownedIterators?->exists(isRequired)) implies ownedSource?.type.oclAsType(CollectionType).isNullFree\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 4,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "pivot::LoopExp::ownedIterators",
          "pivot::TypedElement::isRequired",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type",
          "pivot::CollectionType::isNullFree",
          "pivot::CallExp::isSafe"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "Constraint",
    "expressions": [{
      "operations": {},
      "name": "UniqueName",
      "body": "true ",
      "type": "ConstraintImpl",
      "constructs": {"BooleanLiteralExpImpl": 1},
      "properties": []
    }],
    "properties": []
  },
  {
    "name": "Property",
    "expressions": [
      {
        "operations": {
          "oclIsKindOf": 1,
          "and": 1,
          "includes": 1,
          "oclAsType": 1,
          "oclContainer": 1
        },
        "name": "isAttribute",
        "body": "\n--Type.allInstances()->exists(c| c.ownedAttribute->includes(p))\nlet container : ocl::OclElement = oclContainer() in container.oclIsKindOf(Class) and container.oclAsType(Class).ownedProperties->includes(self)\n\n",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 4,
          "LetExpImpl": 1,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["pivot::Class::ownedProperties"]
      },
      {
        "operations": {
          "<>": 2,
          "and": 1,
          "implies": 1,
          "oclAsType": 1,
          "CompatibleBody": 1
        },
        "name": "CompatibleDefaultExpression",
        "body": "ownedExpression <> null and ownedExpression.oclAsType(ExpressionInOCL).ownedBody <> null implies CompatibleBody(ownedExpression)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 6,
          "NullLiteralExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::Property::ownedExpression",
          "pivot::ExpressionInOCL::ownedBody"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "EnumLiteralExp",
    "expressions": [{
      "operations": {"=": 1},
      "name": "TypeIsEnumerationType",
      "body": "self.type = referredLiteral?.owningEnumeration\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 2,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "pivot::EnumerationLiteral::owningEnumeration",
        "pivot::EnumLiteralExp::referredLiteral",
        "pivot::TypedElement::type"
      ]
    }],
    "properties": []
  },
  {
    "name": "IteratorExp",
    "expressions": [
      {
        "operations": {
          "or": 1,
          "oclIsKindOf": 4,
          "implies": 1,
          "=": 1
        },
        "name": "CollectTypeIsUnordered",
        "body": "name = 'collect' implies\nif ownedSource?.type.oclIsKindOf(SequenceType) or ownedSource?.type.oclIsKindOf(OrderedSetType) then\ntype.oclIsKindOf(SequenceType)\nelse\ntype.oclIsKindOf(BagType)\nendif\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 7,
          "TypeExpImpl": 4,
          "StringLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "pivot::NamedElement::name",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "implies": 1,
          "=": 2
        },
        "name": "AnyBodyTypeIsBoolean",
        "body": "name = 'any' implies ownedBody.type = 'Boolean'\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "StringLiteralExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "pivot::NamedElement::name",
          "pivot::LoopExp::ownedBody",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "size": 1,
          "implies": 1,
          "=": 2
        },
        "name": "ClosureHasOneIterator",
        "body": "name = 'closure' implies ownedIterators->size() = 1\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::NamedElement::name",
          "pivot::LoopExp::ownedIterators"
        ]
      },
      {
        "operations": {
          "implies": 1,
          "=": 2,
          "oclAsType": 2
        },
        "name": "ClosureElementTypeIsSourceElementType",
        "body": "name = 'closure' implies\ntype.oclAsType(CollectionType).elementType\n= ownedSource?.type.oclAsType(CollectionType).elementType\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 3,
          "TypeExpImpl": 2,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "pivot::NamedElement::name",
          "pivot::CollectionType::elementType",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "not": 1,
          "implies": 1,
          "oclAsType": 1
        },
        "name": "SafeSourceCanBeNull",
        "body": "isSafe implies not ownedSource?.type.oclAsType(CollectionType).isNullFree\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type",
          "pivot::CollectionType::isNullFree",
          "pivot::CallExp::isSafe"
        ]
      },
      {
        "operations": {
          "implies": 1,
          "=": 2,
          "oclAsType": 1
        },
        "name": "AnyTypeIsSourceElementType",
        "body": "name = 'any' implies type = ownedSource?.type?.oclAsType(CollectionType).elementType\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 4,
          "TypeExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "pivot::NamedElement::name",
          "pivot::CollectionType::elementType",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "or": 1,
          "oclIsKindOf": 4,
          "implies": 1,
          "=": 1
        },
        "name": "ClosureTypeIsUniqueCollection",
        "body": "name = 'closure' implies\nif ownedSource?.type?.oclIsKindOf(SequenceType) or ownedSource?.type.oclIsKindOf(OrderedSetType) then\ntype.oclIsKindOf(OrderedSetType)\nelse\ntype.oclIsKindOf(SetType)\nendif\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 7,
          "TypeExpImpl": 4,
          "StringLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "pivot::NamedElement::name",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "not": 1,
          "and": 1,
          "implies": 1,
          "oclAsType": 1
        },
        "name": "UnsafeSourceCanNotBeNull",
        "body": "(not isSafe and ownedIterators?->exists(isRequired)) implies ownedSource?.type.oclAsType(CollectionType).isNullFree\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 4,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "pivot::LoopExp::ownedIterators",
          "pivot::TypedElement::isRequired",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type",
          "pivot::CollectionType::isNullFree",
          "pivot::CallExp::isSafe"
        ]
      },
      {
        "operations": {
          "flattenedType": 1,
          "implies": 1,
          "=": 2,
          "oclAsType": 1
        },
        "name": "CollectElementTypeIsFlattenedBodyType",
        "body": "name = 'collect' implies\ntype.oclAsType(CollectionType).elementType = ownedBody.type.flattenedType()\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 3,
          "StringLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "pivot::NamedElement::name",
          "pivot::CollectionType::elementType",
          "pivot::LoopExp::ownedBody",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "implies": 1,
          "oclAsType": 2,
          "=": 2
        },
        "name": "SortedByElementTypeIsSourceElementType",
        "body": "name = 'sortedBy' implies\ntype.oclAsType(CollectionType).elementType =\nownedBody.type.oclAsType(CollectionType).elementType\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 5,
          "TypeExpImpl": 2,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 6
        },
        "properties": [
          "pivot::NamedElement::name",
          "pivot::CollectionType::elementType",
          "pivot::LoopExp::ownedBody",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {"implies": 1},
        "name": "SafeIteratorIsRequired",
        "body": "isSafe implies ownedIterators?->forAll(isRequired)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "pivot::LoopExp::ownedIterators",
          "pivot::TypedElement::isRequired",
          "pivot::CallExp::isSafe"
        ]
      },
      {
        "operations": {},
        "name": "SortedByIteratorTypeIsComparable",
        "body": "\n\ttrue\n\n",
        "type": "ConstraintImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {},
        "name": "ClosureBodyTypeIsConformanttoIteratorType",
        "body": "\n\ttrue\n",
        "type": "ConstraintImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "implies": 1,
          "oclAsType": 2,
          "=": 2
        },
        "name": "ClosureSourceElementTypeIsBodyElementType",
        "body": "name = 'closure' implies\nownedSource?.type.oclAsType(CollectionType).elementType =\nif ownedBody.type.oclIsKindOf(CollectionType)\nthen ownedBody.type.oclAsType(CollectionType).elementType\nelse ownedBody.type\nendif\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 5,
          "OperationCallExpImpl": 6,
          "TypeExpImpl": 3,
          "StringLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 11
        },
        "properties": [
          "pivot::NamedElement::name",
          "pivot::CollectionType::elementType",
          "pivot::LoopExp::ownedBody",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "conformsTo": 1,
          "oclAsType": 1
        },
        "name": "IteratorTypeIsSourceElementType",
        "body": "self.ownedIterators->forAll(p | ownedSource?.type.oclAsType(CollectionType).elementType.conformsTo(p?.type))\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "pivot::CollectionType::elementType",
          "pivot::LoopExp::ownedIterators",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "or": 1,
          "oclIsKindOf": 4,
          "implies": 1,
          "=": 1
        },
        "name": "SortedByIsOrderedIfSourceIsOrdered",
        "body": "name = 'sortedBy' implies\nif ownedSource?.type.oclIsKindOf(SequenceType) or ownedSource?.type.oclIsKindOf(BagType) then\ntype.oclIsKindOf(SequenceType)\nelse\ntype.oclIsKindOf(OrderedSetType)\nendif\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 7,
          "VariableExpImpl": 5,
          "TypeExpImpl": 4,
          "StringLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "pivot::NamedElement::name",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "size": 1,
          "implies": 1,
          "=": 2
        },
        "name": "AnyHasOneIterator",
        "body": "name = 'any' implies ownedIterators->size() = 1\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 4,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::NamedElement::name",
          "pivot::LoopExp::ownedIterators"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "CollectionLiteralExp",
    "expressions": [
      {
        "operations": {"<>": 1},
        "name": "CollectionKindIsConcrete",
        "body": "kind <> CollectionKind::Collection\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "EnumLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["pivot::CollectionLiteralExp::kind"]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "implies": 1,
          "=": 1
        },
        "name": "OrderedSetKindIsOrderedSet",
        "body": "kind = CollectionKind::OrderedSet implies type.oclIsKindOf(OrderedSetType)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "EnumLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::CollectionLiteralExp::kind",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "implies": 1,
          "=": 1
        },
        "name": "SequenceKindIsSequence",
        "body": "kind = CollectionKind::Sequence implies type.oclIsKindOf(SequenceType)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "EnumLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::CollectionLiteralExp::kind",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "implies": 1,
          "=": 1
        },
        "name": "BagKindIsBag",
        "body": "kind = CollectionKind::Bag implies type.oclIsKindOf(BagType)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "EnumLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::CollectionLiteralExp::kind",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "implies": 1,
          "=": 1
        },
        "name": "SetKindIsSet",
        "body": "kind = CollectionKind::Set implies type.oclIsKindOf(SetType)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "EnumLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::CollectionLiteralExp::kind",
          "pivot::TypedElement::type"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "LoopExp",
    "expressions": [
      {
        "operations": {
          "isEmpty": 1,
          "oclAsSet": 1
        },
        "name": "NoInitializers",
        "body": "self.ownedIterators->forAll(p | p?.ownedInit->isEmpty())\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::LoopExp::ownedIterators",
          "pivot::Variable::ownedInit"
        ]
      },
      {
        "operations": {"oclIsKindOf": 1},
        "name": "SourceIsCollection",
        "body": "ownedSource?.type.oclIsKindOf(CollectionType)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "IfExp",
    "expressions": [
      {
        "operations": {"<>": 1},
        "name": "TypeIsNotInvalid",
        "body": "type <> OclInvalid\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["pivot::TypedElement::type"]
      },
      {
        "operations": {"=": 1},
        "name": "ConditionTypeIsBoolean",
        "body": "self.ownedCondition.type = Boolean\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::IfExp::ownedCondition",
          "pivot::TypedElement::type"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "CallExp",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "TypeIsNotInvalid",
      "body": "type <> OclInvalid\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": []
  },
  {
    "name": "ShadowExp",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "TypeIsNotInvalid",
      "body": "type <> OclInvalid\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": []
  },
  {
    "name": "VariableDeclaration",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "TypeIsNotInvalid",
      "body": "type <> OclInvalid\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": []
  },
  {
    "name": "VariableExp",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "TypeIsNotInvalid",
      "body": "type <> OclInvalid\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::TypedElement::type"]
    }],
    "properties": []
  },
  {
    "name": "CollectionItem",
    "expressions": [{
      "operations": {"=": 1},
      "name": "TypeIsItemType",
      "body": "type = ownedItem.type\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "pivot::TypedElement::type",
        "pivot::CollectionItem::ownedItem"
      ]
    }],
    "properties": []
  },
  {
    "name": "OperationCallExp",
    "expressions": [
      {
        "operations": {
          "size": 2,
          "=": 1
        },
        "name": "ArgumentCount",
        "body": "ownedArguments->size() = referredOperation?.ownedParameters->size()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "pivot::Operation::ownedParameters",
          "pivot::OperationCallExp::referredOperation",
          "pivot::OperationCallExp::ownedArguments"
        ]
      },
      {
        "operations": {
          "<>": 1,
          "not": 1,
          "and": 1,
          "implies": 1
        },
        "name": "SafeSourceCanBeNull",
        "body": "(ownedSource <> null) and isSafe implies not ownedSource?.isRequired\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "NullLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::TypedElement::isRequired",
          "pivot::CallExp::ownedSource",
          "pivot::CallExp::isSafe"
        ]
      },
      {
        "operations": {
          "at": 2,
          "size": 1,
          "conformsTo": 1,
          "specializeIn": 1
        },
        "name": "ArgumentTypeIsConformant",
        "body": "\n\tlet operation : Operation = self.referredOperation in\n\tlet parameters : OrderedSet(Parameter) = operation?.ownedParameters in\n\tlet selfType : Type = operation?.owningClass in\n\tSequence{1..ownedArguments->size()}->forAll (i | \n\t\tlet argument : OCLExpression = ownedArguments->at(i) in\n\t\tlet parameter : Parameter = parameters->at(i) in\n\t\tlet parameterType : Type = parameter?.type in\n\t\tlet requiredType : Type = if parameter?.isTypeof then Class else parameterType.specializeIn(self, selfType) endif in\n\t\targument?.type.conformsTo(requiredType))\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 15,
          "OperationCallExpImpl": 5,
          "LetExpImpl": 7,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 8
        },
        "properties": [
          "pivot::Operation::ownedParameters",
          "pivot::Parameter::isTypeof",
          "pivot::OperationCallExp::referredOperation",
          "pivot::OperationCallExp::ownedArguments",
          "pivot::Operation::owningClass",
          "pivot::TypedElement::type"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "Operation",
    "expressions": [
      {
        "operations": {},
        "name": "LoadableImplementation",
        "body": "\n\ttrue\n",
        "type": "ConstraintImpl",
        "constructs": {"BooleanLiteralExpImpl": 1},
        "properties": []
      },
      {
        "operations": {
          "<>": 2,
          "and": 1,
          "implies": 1,
          "oclAsType": 1,
          "CompatibleBody": 1
        },
        "name": "CompatibleReturn",
        "body": "bodyExpression <> null and bodyExpression.oclAsType(ExpressionInOCL).ownedBody <> null implies CompatibleBody(bodyExpression)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 4,
          "NullLiteralExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::ExpressionInOCL::ownedBody",
          "pivot::Operation::bodyExpression"
        ]
      },
      {
        "operations": {},
        "name": "UniquePreconditionName",
        "body": "ownedPreconditions->isUnique(p | p?.name)\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::Operation::ownedPreconditions",
          "pivot::NamedElement::name"
        ]
      },
      {
        "operations": {},
        "name": "UniquePostconditionName",
        "body": "ownedPostconditions->isUnique(p | p?.name)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::NamedElement::name",
          "pivot::Operation::ownedPostconditions"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "Element",
    "expressions": [
      {
        "operations": {
          "selectByKind": 1,
          "oclAsSet": 1,
          "oclContents": 1
        },
        "name": "allOwnedElements",
        "body": "\n\tself->closure(oclContents()->selectByKind(Element))\n\n",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "TypeExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {},
        "name": "getValue",
        "body": "null\n\n",
        "type": "OperationImpl",
        "constructs": {"NullLiteralExpImpl": 1},
        "properties": []
      }
    ],
    "properties": []
  },
  {
    "name": "PropertyCallExp",
    "expressions": [
      {
        "operations": {
          "<>": 1,
          "not": 1,
          "and": 1,
          "implies": 1
        },
        "name": "UnsafeSourceCanNotBeNull",
        "body": "(ownedSource <> null) and not isSafe implies ownedSource?.isRequired\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 4,
          "NullLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::TypedElement::isRequired",
          "pivot::CallExp::ownedSource",
          "pivot::CallExp::isSafe"
        ]
      },
      {
        "operations": {},
        "name": "getSpecializedReferredPropertyOwningType",
        "body": "referredProperty?.owningClass ",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::Property::owningClass",
          "pivot::PropertyCallExp::referredProperty"
        ]
      },
      {
        "operations": {"oclAsType": 1},
        "name": "getSpecializedReferredPropertyType",
        "body": "referredProperty?.type.oclAsType(Class) ",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "pivot::PropertyCallExp::referredProperty",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "not": 1,
          "getSpecializedReferredPropertyOwningType": 1,
          "conformsTo": 1,
          "implies": 1
        },
        "name": "NonStaticSourceTypeIsConformant",
        "body": "not referredProperty?.isStatic implies \n\townedSource?.type.conformsTo(getSpecializedReferredPropertyOwningType())\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 4,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::PropertyCallExp::referredProperty",
          "pivot::Feature::isStatic",
          "pivot::CallExp::ownedSource",
          "pivot::TypedElement::type"
        ]
      },
      {
        "operations": {
          "getSpecializedReferredPropertyType": 1,
          "=": 1
        },
        "name": "CompatibleResultType",
        "body": "type = getSpecializedReferredPropertyType()\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["pivot::TypedElement::type"]
      },
      {
        "operations": {
          "<>": 1,
          "not": 1,
          "and": 1,
          "implies": 1
        },
        "name": "SafeSourceCanBeNull",
        "body": "(ownedSource <> null) and isSafe implies not ownedSource?.isRequired\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "NullLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "pivot::TypedElement::isRequired",
          "pivot::CallExp::ownedSource",
          "pivot::CallExp::isSafe"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "Variable",
    "expressions": [{
      "operations": {
        "<>": 1,
        "conformsTo": 1,
        "implies": 1
      },
      "name": "CompatibleInitialiserType",
      "body": "ownedInit <> null implies ownedInit?.type?.conformsTo(type)\n\n",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 3,
        "VariableExpImpl": 3,
        "NullLiteralExpImpl": 1,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "pivot::Variable::ownedInit",
        "pivot::TypedElement::type"
      ]
    }],
    "properties": []
  }
]
