[
  {
    "name": "CompositeCondition",
    "expressions": [{
      "operations": {"=": 1},
      "name": "ComposedConditionTypesAreSame",
      "body": "self.compositeConditions -> forAll(c | c.type = self.type)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 3,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "DVML::ConditionalElement::type",
        "DVML::CompositeCondition::compositeConditions"
      ]
    }],
    "properties": [
      "compositeConditions",
      "compositionType"
    ]
  },
  {
    "name": "Enumeration",
    "expressions": [],
    "properties": ["literals"]
  },
  {
    "name": "ConditionalElement",
    "expressions": [],
    "properties": [
      "type",
      "ViewElement",
      "conditionID",
      "CompositeCondition",
      "ElementGroup"
    ]
  },
  {
    "name": "PropertyElements",
    "expressions": [],
    "properties": [
      "ComparisonCondition",
      "propertyView"
    ]
  },
  {
    "name": "ViewElement",
    "expressions": [],
    "properties": [
      "conditionalElements",
      "lable",
      "elementID",
      "ElementGroup"
    ]
  },
  {
    "name": "AssociationElements",
    "expressions": [],
    "properties": ["associationView"]
  },
  {
    "name": "CompositeConditionsType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "AssociationEnd",
    "expressions": [{
      "operations": {
        "or": 1,
        "and": 1,
        "=": 1,
        "-": 1,
        ">=": 2
      },
      "name": "MultiplicityOfAssociatioEndPropertyIsValid",
      "body": "self.multiplicityLowerBound >= 0 \n\t\t          and (self.multiplicityUpperBound >= multiplicityLowerBound or self.multiplicityUpperBound = -1)",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 6,
        "VariableExpImpl": 4,
        "IntegerLiteralExpImpl": 2,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "DVML::Property::multiplicityUpperBound",
        "DVML::Property::multiplicityLowerBound"
      ]
    }],
    "properties": [
      "IsComposite",
      "isNavigable",
      "Association"
    ]
  },
  {
    "name": "DateTimePicker",
    "expressions": [],
    "properties": ["format"]
  },
  {
    "name": "ViewModels",
    "expressions": [],
    "properties": ["viewGroups"]
  },
  {
    "name": "ClassIndexView",
    "expressions": [],
    "properties": []
  },
  {
    "name": "LinkingElement",
    "expressions": [],
    "properties": ["links"]
  },
  {
    "name": "NamedElement",
    "expressions": [],
    "properties": ["name"]
  },
  {
    "name": "Property",
    "expressions": [],
    "properties": [
      "multiplicityUpperBound",
      "Class",
      "PropertyElements",
      "Class",
      "type",
      "multiplicityLowerBound"
    ]
  },
  {
    "name": "ShortText",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Selection",
    "expressions": [],
    "properties": ["selectionItems"]
  },
  {
    "name": "Table",
    "expressions": [],
    "properties": ["columns"]
  },
  {
    "name": "Layout",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ComparisonCondition",
    "expressions": [],
    "properties": [
      "property",
      "comparisonValue"
    ]
  },
  {
    "name": "DomainModel",
    "expressions": [],
    "properties": ["modelDomainElements"]
  },
  {
    "name": "ModelDomainElementType",
    "expressions": [],
    "properties": [
      "Property",
      "DomainModel"
    ]
  },
  {
    "name": "ClassOperationView",
    "expressions": [],
    "properties": [
      "Link",
      "elementGroups"
    ]
  },
  {
    "name": "View",
    "expressions": [],
    "properties": [
      "header",
      "ViewGroup",
      "class",
      "description",
      "startView"
    ]
  },
  {
    "name": "Association",
    "expressions": [],
    "properties": [
      "AssociationElements",
      "associationEnds",
      "Class"
    ]
  },
  {
    "name": "Literal",
    "expressions": [],
    "properties": [
      "Enumeration",
      "SelectionItem",
      "ConstantValue"
    ]
  },
  {
    "name": "longText",
    "expressions": [],
    "properties": []
  },
  {
    "name": "List",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ViewGroup",
    "expressions": [{
      "operations": {
        "size": 1,
        "allInstances": 1,
        "=": 2
      },
      "name": "OneWelcomeViewGroupIsValid",
      "body": "ViewGroup.allInstances() -> select(w | w.welcomeViewGroup = true) -> size() = 1",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "OperationCallExpImpl": 4,
        "VariableExpImpl": 1,
        "IntegerLiteralExpImpl": 1,
        "TypeExpImpl": 1,
        "BooleanLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["DVML::ViewGroup::welcomeViewGroup"]
    }],
    "properties": [
      "ViewModels",
      "welcomeViewGroup",
      "views",
      "layout"
    ]
  },
  {
    "name": "SelectionItem",
    "expressions": [],
    "properties": [
      "value",
      "Selection",
      "selectableValue"
    ]
  },
  {
    "name": "ConditionType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "TEXT",
    "expressions": [],
    "properties": ["format"]
  },
  {
    "name": "Column",
    "expressions": [],
    "properties": ["Table"]
  },
  {
    "name": "Link",
    "expressions": [],
    "properties": [
      "label",
      "LinkingElement",
      "linkToViewGroup"
    ]
  },
  {
    "name": "ElementGroup",
    "expressions": [],
    "properties": [
      "layout",
      "conditionalElements",
      "ClassOperationView",
      "header",
      "viewelements"
    ]
  },
  {
    "name": "Class",
    "expressions": [
      {
        "operations": {
          "at": 1,
          "matches": 1
        },
        "name": "FirstLetterOFClassNameIsUpperCase",
        "body": "self.name.at(1).matches('[A-Z]')",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["DVML::NamedElement::name"]
      },
      {
        "operations": {"<>": 1},
        "name": "NoSelfInheritance",
        "body": "self.superType <> self.name",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "DVML::NamedElement::name",
          "DVML::Class::superType"
        ]
      },
      {
        "operations": {
          "and": 1,
          "=": 2
        },
        "name": "PropertyIdIsMandetoryOneToOne",
        "body": "self.id.multiplicityLowerBound = 1 and self.id.multiplicityUpperBound = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "DVML::Property::multiplicityUpperBound",
          "DVML::Class::id",
          "DVML::Property::multiplicityLowerBound"
        ]
      },
      {
        "operations": {
          "excluding": 1,
          "isEmpty": 1,
          "allInstances": 1,
          "=": 1
        },
        "name": "ClassNameIsUnique",
        "body": "Class.allInstances() -> select(n | n.name = self.name) ->excluding(self) ->isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["DVML::NamedElement::name"]
      }
    ],
    "properties": [
      "associations",
      "Class",
      "properties",
      "id",
      "superType",
      "View"
    ]
  },
  {
    "name": "DataType",
    "expressions": [],
    "properties": []
  }
]
