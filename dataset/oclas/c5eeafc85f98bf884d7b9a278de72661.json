[
  {
    "name": "ManagerParameter",
    "expressions": [{
      "operations": {
        "not": 1,
        "oclIsUndefined": 1
      },
      "name": "ManagerParameterUndefinedName",
      "body": "not name.oclIsUndefined()",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["named::NamedElement::name"]
    }],
    "properties": [
      "opaqueExpressions",
      "isInput",
      "LitteralUnlimitedNatural",
      "owningManager",
      "LitteralString",
      "LitteralInteger",
      "state",
      "LitteralBoolean"
    ]
  },
  {
    "name": "ManagerState",
    "expressions": [
      {
        "operations": {
          "oclAsSet": 1,
          "includes": 1
        },
        "name": "StartStateNoInitialState",
        "body": "if isStart then owningManager.initialState.oclAsSet()->includes(self) else true endif",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 3,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "mngr::ManagerState::isStart",
          "mngr::Manager::initialState",
          "mngr::ManagerState::owningManager"
        ]
      },
      {
        "operations": {
          "not": 1,
          "oclIsUndefined": 1
        },
        "name": "ManagerStateNameUndefined",
        "body": "not name.oclIsUndefined()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["named::NamedElement::name"]
      },
      {
        "operations": {
          "not": 1,
          "includes": 1,
          "+": 1,
          "=": 1
        },
        "name": "OutgoingTransitionsProbabilitySumMustBe1",
        "body": "if not owningManager.finalState->includes(self) then outgoingTransition->collect(transProb)->iterate(p : Real ; res : Real = 0 | res + p) = 1.0 else true endif",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 4,
          "RealLiteralExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "IterateExpImpl": 1,
          "IfExpImpl": 1,
          "BooleanLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "mngr::ManagerState::outgoingTransition",
          "mngr::ManagerTransition::transProb",
          "mngr::Manager::finalState",
          "mngr::ManagerState::owningManager"
        ]
      },
      {
        "operations": {"includes": 1},
        "name": "EndStateNofinalState",
        "body": "if isEnd then owningManager.finalState->includes(self) else true endif",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 3,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "mngr::ManagerState::isEnd",
          "mngr::Manager::finalState",
          "mngr::ManagerState::owningManager"
        ]
      },
      {
        "operations": {
          "not": 2,
          "size": 2,
          "and": 2,
          "oclAsSet": 1,
          "includes": 2,
          ">": 2
        },
        "name": "UndefinedTransitions",
        "body": "if not owningManager.initialState.oclAsSet()->includes(self) and not owningManager.finalState->includes(self) then outgoingTransition->size() > 0 and incomingTransition->size() > 0 else true endif",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 11,
          "IntegerLiteralExpImpl": 2,
          "IfExpImpl": 1,
          "PropertyCallExpImpl": 6,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "mngr::ManagerState::outgoingTransition",
          "mngr::Manager::initialState",
          "mngr::Manager::finalState",
          "mngr::ManagerState::owningManager",
          "mngr::ManagerState::incomingTransition"
        ]
      },
      {
        "operations": {
          "not": 1,
          "and": 1
        },
        "name": "InitialStateNoFinalState",
        "body": "not (isStart and isEnd)",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "mngr::ManagerState::isEnd",
          "mngr::ManagerState::isStart"
        ]
      }
    ],
    "properties": [
      "outgoingTransition",
      "isEnd",
      "isStart",
      "Prob",
      "Manager",
      "contextParameters",
      "Manager",
      "owningManager",
      "incomingTransition"
    ]
  },
  {
    "name": "ManagerTransition",
    "expressions": [
      {
        "operations": {
          "not": 1,
          "oclIsUndefined": 1
        },
        "name": "ManagerTransitionUndefinedName",
        "body": "not name.oclIsUndefined()",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["named::NamedElement::name"]
      },
      {
        "operations": {
          "<=": 1,
          "not": 1,
          "oclIsUndefined": 1,
          "and": 1
        },
        "name": "TransProbMax1",
        "body": "transProb <= 1.0 and not transProb.oclIsUndefined()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 2,
          "RealLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["mngr::ManagerTransition::transProb"]
      }
    ],
    "properties": [
      "Condition",
      "transRate",
      "source",
      "Event",
      "target",
      "input",
      "output",
      "transProb",
      "Action",
      "owningManager"
    ]
  },
  {
    "name": "ManagedElement",
    "expressions": [{
      "operations": {
        "not": 1,
        "oclIsUndefined": 1
      },
      "name": "ManagedElementUndefinedName",
      "body": "not name.oclIsUndefined()",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 2,
        "VariableExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["named::NamedElement::name"]
    }],
    "properties": [
      "description",
      "owningManager"
    ]
  },
  {
    "name": "OpaqueExpression",
    "expressions": [],
    "properties": ["ManagerParameter"]
  },
  {
    "name": "Manager",
    "expressions": [
      {
        "operations": {
          "<>": 2,
          "allInstances": 1,
          "implies": 1
        },
        "name": "ManagerTransitionNameUnique",
        "body": "ManagerTransition.allInstances()->forAll(m1 : ManagerTransition, m2 : ManagerTransition | m1 <> m2 implies m1.name <> m2.name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 4,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["named::NamedElement::name"]
      },
      {
        "operations": {"<>": 1},
        "name": "InitialStateNoFinalState",
        "body": "finalState->forAll(s : ManagerState | s <> initialState)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "mngr::Manager::initialState",
          "mngr::Manager::finalState"
        ]
      },
      {
        "operations": {
          "size": 1,
          ">": 1
        },
        "name": "finalStateMustHaveIncomingTransition",
        "body": "finalState->forAll(s : ManagerState | s.incomingTransition->size() > 0)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "mngr::Manager::finalState",
          "mngr::ManagerState::incomingTransition"
        ]
      },
      {
        "operations": {
          "not": 1,
          "and": 1
        },
        "name": "InitialStateMustBeStart",
        "body": "initialState.isStart and not initialState.isEnd",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "mngr::ManagerState::isEnd",
          "mngr::ManagerState::isStart",
          "mngr::Manager::initialState"
        ]
      },
      {
        "operations": {
          "not": 1,
          "and": 1
        },
        "name": "FinalStateMustBeEnd",
        "body": "finalState->forAll(s : ManagerState | s.isEnd and not s.isStart)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "mngr::ManagerState::isEnd",
          "mngr::ManagerState::isStart",
          "mngr::Manager::finalState"
        ]
      },
      {
        "operations": {
          "<>": 3,
          "or": 1,
          "allInstances": 1,
          "implies": 1
        },
        "name": "DuplicateTransition",
        "body": "ManagerTransition.allInstances()->forAll(t1 : ManagerTransition, t2 : ManagerTransition | t1 <> t2 implies t1.target <> t2.target or t1.source <> t2.source)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 6,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "mngr::ManagerTransition::source",
          "mngr::ManagerTransition::target"
        ]
      },
      {
        "operations": {
          "<>": 2,
          "allInstances": 1,
          "implies": 1
        },
        "name": "ManagerStateNameUnique",
        "body": "ManagerState.allInstances()->forAll(m1 : ManagerState, m2 : ManagerState | m1 <> m2 implies m1.name <> m2.name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 4,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["named::NamedElement::name"]
      },
      {
        "operations": {
          "<>": 2,
          "allInstances": 1,
          "implies": 1
        },
        "name": "ManagerParameterNameUnique",
        "body": "ManagerParameter.allInstances()->forAll(m1 : ManagerParameter, m2 : ManagerParameter | m1 <> m2 implies m1.name <> m2.name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 4,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["named::NamedElement::name"]
      },
      {
        "operations": {
          "<>": 2,
          "allInstances": 1,
          "implies": 1
        },
        "name": "ManagedElementNameUnique",
        "body": "ManagedElement.allInstances()->forAll(m1 : ManagedElement, m2 : ManagedElement | m1 <> m2 implies m1.name <> m2.name)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 4,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["named::NamedElement::name"]
      },
      {
        "operations": {
          "size": 1,
          "=": 1
        },
        "name": "FinalStatesNoOutgoingTransitions",
        "body": "finalState->forAll(s : ManagerState | s.outgoingTransition->size() = 0)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "mngr::ManagerState::outgoingTransition",
          "mngr::Manager::finalState"
        ]
      }
    ],
    "properties": [
      "ownedState",
      "initialState",
      "ownedTransition",
      "contextParameters",
      "finalState",
      "managedElement"
    ]
  }
]
