[
  {
    "name": "LambdaType",
    "expressions": [],
    "properties": [
      "contextType",
      "parameterType",
      "resultType"
    ]
  },
  {
    "name": "ParameterDirectionKind",
    "expressions": [],
    "properties": []
  },
  {
    "name": "IterateExp",
    "expressions": [],
    "properties": ["result"]
  },
  {
    "name": "Signal",
    "expressions": [],
    "properties": [
      "SendSignalAction",
      "MessageType"
    ]
  },
  {
    "name": "AssociativityKind",
    "expressions": [],
    "properties": []
  },
  {
    "name": "TemplateableElement",
    "expressions": [],
    "properties": [
      "unspecializedElement",
      "ownedTemplateSignature",
      "templateBinding"
    ]
  },
  {
    "name": "CollectionLiteralExp",
    "expressions": [],
    "properties": [
      "part",
      "kind"
    ]
  },
  {
    "name": "NavigationCallExp",
    "expressions": [],
    "properties": [
      "qualifier",
      "navigationSource"
    ]
  },
  {
    "name": "CallOperationAction",
    "expressions": [],
    "properties": [
      "MessageExp",
      "operation"
    ]
  },
  {
    "name": "Element",
    "expressions": [],
    "properties": [
      "Constraint",
      "Comment",
      "ownedComment",
      "Annotation",
      "Annotation"
    ]
  },
  {
    "name": "EnumerationLiteral",
    "expressions": [],
    "properties": [
      "EnumLiteralExp",
      "enumeration",
      "value"
    ]
  },
  {
    "name": "Iteration",
    "expressions": [],
    "properties": [
      "LoopExp",
      "ownedIterator",
      "ownedAccumulator"
    ]
  },
  {
    "name": "LiteralExp",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CollectionType",
    "expressions": [],
    "properties": ["elementType"]
  },
  {
    "name": "TemplateSignature",
    "expressions": [],
    "properties": [
      "ownedParameter",
      "parameter",
      "TemplateBinding",
      "template"
    ]
  },
  {
    "name": "ClassifierType",
    "expressions": [],
    "properties": ["instanceType"]
  },
  {
    "name": "PackageableElement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "AssociationClassCallExp",
    "expressions": [],
    "properties": ["referredAssociationClass"]
  },
  {
    "name": "BooleanLiteralExp",
    "expressions": [],
    "properties": ["booleanSymbol"]
  },
  {
    "name": "Type",
    "expressions": [],
    "properties": [
      "LambdaType",
      "ClassifierType",
      "LambdaType",
      "Operation",
      "TypedElement",
      "package",
      "DataType",
      "LambdaType",
      "templateParameter",
      "TypeTemplateParameter",
      "UnspecifiedType",
      "instanceClassName",
      "UnspecifiedType",
      "CollectionType",
      "TypeExp"
    ]
  },
  {
    "name": "AssociationClass",
    "expressions": [],
    "properties": [
      "unownedAttribute",
      "AssociationClassCallExp"
    ]
  },
  {
    "name": "Pivotable",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Visitable",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Library",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SetType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Visitor",
    "expressions": [],
    "properties": []
  },
  {
    "name": "VariableDeclaration",
    "expressions": [],
    "properties": ["VariableExp"]
  },
  {
    "name": "Int",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Parameter",
    "expressions": [],
    "properties": [
      "operation",
      "Variable",
      "kind",
      "Iteration",
      "Iteration"
    ]
  },
  {
    "name": "EnumLiteralExp",
    "expressions": [],
    "properties": ["referredEnumLiteral"]
  },
  {
    "name": "TemplateBinding",
    "expressions": [],
    "properties": [
      "parameterSubstitution",
      "signature",
      "boundElement"
    ]
  },
  {
    "name": "MonikeredElement",
    "expressions": [],
    "properties": ["moniker"]
  },
  {
    "name": "VariableExp",
    "expressions": [],
    "properties": [
      "referredVariable",
      "implicit"
    ]
  },
  {
    "name": "UnlimitedNaturalLiteralExp",
    "expressions": [],
    "properties": ["unlimitedNaturalSymbol"]
  },
  {
    "name": "MessageType",
    "expressions": [],
    "properties": [
      "referredSignal",
      "referredOperation"
    ]
  },
  {
    "name": "IntegerLiteralExp",
    "expressions": [],
    "properties": ["integerSymbol"]
  },
  {
    "name": "CollectionRange",
    "expressions": [],
    "properties": [
      "first",
      "last"
    ]
  },
  {
    "name": "Object",
    "expressions": [],
    "properties": []
  },
  {
    "name": "LetExp",
    "expressions": [],
    "properties": [
      "in",
      "variable"
    ]
  },
  {
    "name": "OpaqueExpression",
    "expressions": [],
    "properties": [
      "body",
      "message",
      "valueExpression",
      "language"
    ]
  },
  {
    "name": "Operation",
    "expressions": [{
      "operations": {
        "size": 1,
        "=": 1
      },
      "name": "testConstraint",
      "body": "self.ownedParameter->size() = 1",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 2,
        "IntegerLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["pivot::Operation::ownedParameter"]
    }],
    "properties": [
      "MessageType",
      "class",
      "OperationCallExp",
      "raisedException",
      "ownedParameter",
      "precedence",
      "templateParameter",
      "CallOperationAction"
    ]
  },
  {
    "name": "Variable",
    "expressions": [],
    "properties": [
      "representedParameter",
      "initExpression",
      "ExpressionInOCL",
      "ExpressionInOCL",
      "ExpressionInOCL",
      "IterateExp",
      "implicit",
      "LetExp",
      "LoopExp"
    ]
  },
  {
    "name": "Comment",
    "expressions": [],
    "properties": [
      "Element",
      "annotatedElement",
      "body"
    ]
  },
  {
    "name": "PropertyCallExp",
    "expressions": [],
    "properties": ["referredProperty"]
  },
  {
    "name": "TupleLiteralPart",
    "expressions": [],
    "properties": [
      "TupleLiteralExp",
      "initExpression"
    ]
  },
  {
    "name": "OperationCallExp",
    "expressions": [],
    "properties": [
      "argument",
      "referredOperation"
    ]
  },
  {
    "name": "CollectionItem",
    "expressions": [],
    "properties": ["item"]
  },
  {
    "name": "OclExpression",
    "expressions": [],
    "properties": [
      "OperationCallExp",
      "MessageExp",
      "IfExp",
      "LoopExp",
      "CollectionItem",
      "IfExp",
      "CollectionRange",
      "TupleLiteralPart",
      "ExpressionInOCL",
      "IfExp",
      "CallExp",
      "MessageExp",
      "Variable",
      "LetExp",
      "ExpressionInOCL",
      "CollectionRange",
      "NavigationCallExp"
    ]
  },
  {
    "name": "VoidType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "String",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Real",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Detail",
    "expressions": [],
    "properties": [
      "Annotation",
      "value"
    ]
  },
  {
    "name": "UnlimitedNatural",
    "expressions": [],
    "properties": []
  },
  {
    "name": "FeatureCallExp",
    "expressions": [],
    "properties": ["isPre"]
  },
  {
    "name": "TypedMultiplicityElement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "OperationTemplateParameter",
    "expressions": [],
    "properties": ["parameteredElement"]
  },
  {
    "name": "TypeTemplateParameter",
    "expressions": [],
    "properties": [
      "parameteredElement",
      "allowSubstitutable",
      "constrainingType"
    ]
  },
  {
    "name": "StateExp",
    "expressions": [],
    "properties": ["referredState"]
  },
  {
    "name": "IfExp",
    "expressions": [],
    "properties": [
      "thenExpression",
      "elseExpression",
      "condition"
    ]
  },
  {
    "name": "CallExp",
    "expressions": [],
    "properties": [
      "source",
      "implicit"
    ]
  },
  {
    "name": "State",
    "expressions": [],
    "properties": ["StateExp"]
  },
  {
    "name": "TemplateParameterSubstitution",
    "expressions": [],
    "properties": [
      "formal",
      "templateBinding",
      "ownedActual",
      "actual"
    ]
  },
  {
    "name": "CallableImplementation",
    "expressions": [],
    "properties": []
  },
  {
    "name": "TemplateParameterType",
    "expressions": [],
    "properties": ["specification"]
  },
  {
    "name": "Nameable",
    "expressions": [],
    "properties": []
  },
  {
    "name": "NullLiteralExp",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ExpressionInOCL",
    "expressions": [],
    "properties": [
      "parameterVariable",
      "contextVariable",
      "bodyExpression",
      "resultVariable",
      "messageExpression"
    ]
  },
  {
    "name": "InvalidLiteralExp",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ParameterableElement",
    "expressions": [],
    "properties": [
      "owningTemplateParameter",
      "TemplateParameter",
      "TemplateParameterSubstitution",
      "TemplateParameter",
      "templateParameter",
      "TemplateParameterSubstitution"
    ]
  },
  {
    "name": "CollectionKind",
    "expressions": [],
    "properties": []
  },
  {
    "name": "NumericLiteralExp",
    "expressions": [],
    "properties": []
  },
  {
    "name": "StringLiteralExp",
    "expressions": [],
    "properties": ["stringSymbol"]
  },
  {
    "name": "Classifier",
    "expressions": [],
    "properties": []
  },
  {
    "name": "LoopExp",
    "expressions": [],
    "properties": [
      "body",
      "referredIteration",
      "iterator"
    ]
  },
  {
    "name": "TupleLiteralExp",
    "expressions": [],
    "properties": ["part"]
  },
  {
    "name": "TypeExp",
    "expressions": [],
    "properties": ["referredType"]
  },
  {
    "name": "CollectionLiteralPart",
    "expressions": [],
    "properties": ["CollectionLiteralExp"]
  },
  {
    "name": "MessageExp",
    "expressions": [],
    "properties": [
      "target",
      "argument",
      "calledOperation",
      "sentSignal"
    ]
  },
  {
    "name": "InvalidType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "TupleType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SendSignalAction",
    "expressions": [],
    "properties": [
      "signal",
      "MessageExp"
    ]
  },
  {
    "name": "TypedElement",
    "expressions": [],
    "properties": ["type"]
  },
  {
    "name": "SequenceType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Throwable",
    "expressions": [],
    "properties": []
  },
  {
    "name": "UnspecifiedValueExp",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Precedence",
    "expressions": [],
    "properties": [
      "Operation",
      "order",
      "Package",
      "associativity"
    ]
  },
  {
    "name": "Property",
    "expressions": [],
    "properties": [
      "default",
      "isTransient",
      "PropertyCallExp",
      "keys",
      "class",
      "isComposite",
      "opposite",
      "Property",
      "implicit",
      "NavigationCallExp",
      "isDerived",
      "isID",
      "isResolveProxies",
      "isUnsettable",
      "association",
      "isReadOnly",
      "isVolatile",
      "Property"
    ]
  },
  {
    "name": "MultiplicityElement",
    "expressions": [],
    "properties": [
      "lower",
      "isOrdered",
      "isUnique",
      "upper"
    ]
  },
  {
    "name": "Enumeration",
    "expressions": [],
    "properties": ["ownedLiteral"]
  },
  {
    "name": "NamedElement",
    "expressions": [],
    "properties": [
      "ownedRule",
      "Constraint",
      "name",
      "ownedAnnotation",
      "isStatic"
    ]
  },
  {
    "name": "Feature",
    "expressions": [],
    "properties": [
      "implementation",
      "implementationClass",
      "isStatic"
    ]
  },
  {
    "name": "UnspecifiedType",
    "expressions": [],
    "properties": [
      "lowerBound",
      "upperBound"
    ]
  },
  {
    "name": "Boolean",
    "expressions": [],
    "properties": []
  },
  {
    "name": "PrimitiveLiteralExp",
    "expressions": [],
    "properties": []
  },
  {
    "name": "BagType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "PrimitiveType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Constraint",
    "expressions": [],
    "properties": [
      "stereotype",
      "specification",
      "context",
      "isCallable",
      "NamedElement",
      "constrainedElement"
    ]
  },
  {
    "name": "DataType",
    "expressions": [],
    "properties": [
      "isSerializable",
      "behavioralType"
    ]
  },
  {
    "name": "AnyType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ValueSpecification",
    "expressions": [],
    "properties": ["Constraint"]
  },
  {
    "name": "Integer",
    "expressions": [],
    "properties": []
  },
  {
    "name": "IteratorExp",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Class",
    "expressions": [],
    "properties": [
      "superClass",
      "subClass",
      "ownedOperation",
      "isInterface",
      "Class",
      "isAbstract",
      "ownedAttribute",
      "instanceClassName"
    ]
  },
  {
    "name": "Annotation",
    "expressions": [],
    "properties": [
      "reference",
      "ownedContent",
      "ownedDetail",
      "NamedElement"
    ]
  },
  {
    "name": "TemplateParameter",
    "expressions": [],
    "properties": [
      "ownedParameteredElement",
      "ownedDefault",
      "signature",
      "TemplateSignature",
      "TemplateParameterSubstitution",
      "parameteredElement",
      "default"
    ]
  },
  {
    "name": "OrderedSetType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Package",
    "expressions": [],
    "properties": [
      "nsURI",
      "nsPrefix",
      "ownedPrecedence",
      "nestedPackage",
      "nestingPackage",
      "ownedType"
    ]
  },
  {
    "name": "RealLiteralExp",
    "expressions": [],
    "properties": ["realSymbol"]
  },
  {
    "name": "Namespace",
    "expressions": [],
    "properties": []
  }
]
