[
  {
    "name": "Association",
    "expressions": [],
    "properties": [
      "Class",
      "associationend"
    ]
  },
  {
    "name": "AssociationElements",
    "expressions": [],
    "properties": ["link"]
  },
  {
    "name": "Literal",
    "expressions": [],
    "properties": [
      "value",
      "Enumeration"
    ]
  },
  {
    "name": "ViewGroup",
    "expressions": [
      {
        "operations": {
          "at": 1,
          "matches": 1
        },
        "name": "FirstLetterInViewGroupIsUpperCase",
        "body": "self.name.at(1).matches('[A-Z]')",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["views::ViewGroup::name"]
      },
      {
        "operations": {
          "size": 1,
          "allInstances": 1,
          "=": 2
        },
        "name": "ExactlyOneWelcomeViewGroupExists",
        "body": "ViewGroup.allInstances() -> select(f | f.welcomeViewGroup = true) -> size() = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": ["views::ViewGroup::welcomeViewGroup"]
      }
    ],
    "properties": [
      "views",
      "welcomeViewGroup",
      "name",
      "ViewModel"
    ]
  },
  {
    "name": "Create",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Delete",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ElementGroups",
    "expressions": [],
    "properties": [
      "visibilitycondition",
      "header",
      "ClassOperationView",
      "viewelements",
      "layout"
    ]
  },
  {
    "name": "View",
    "expressions": [
      {
        "operations": {
          "<>": 1,
          "size": 1
        },
        "name": "NameInViewIsNotEmpty",
        "body": "self.name.size() <> 0",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["views::View::name"]
      },
      {
        "operations": {
          "at": 1,
          "matches": 1
        },
        "name": "FirstLetterInViewTitleIsUpperCase",
        "body": "self.name.at(1).matches('[A-Z]')",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["views::View::name"]
      }
    ],
    "properties": [
      "startView",
      "ViewGroup",
      "name",
      "header",
      "description"
    ]
  },
  {
    "name": "Table",
    "expressions": [],
    "properties": ["columns"]
  },
  {
    "name": "PropertyType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CompositeConditionsType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "PropertyElements",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Column",
    "expressions": [],
    "properties": ["Table"]
  },
  {
    "name": "Enumeration",
    "expressions": [],
    "properties": [
      "literal",
      "DomainModel"
    ]
  },
  {
    "name": "DateTimePicker",
    "expressions": [],
    "properties": [
      "dateType",
      "format"
    ]
  },
  {
    "name": "AssociationEnd",
    "expressions": [{
      "operations": {
        "<=": 1,
        "or": 2,
        "and": 2,
        "-": 2,
        "=": 2,
        ">": 1,
        ">=": 1
      },
      "name": "associationEndUpperGreaterThanLower",
      "body": "self.LowerBound <= self.UpperBound or self.UpperBound = -1 and (self.LowerBound >= 0 and self.UpperBound > 0 or self.UpperBound = -1)",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 6,
        "OperationCallExpImpl": 11,
        "IntegerLiteralExpImpl": 4,
        "PropertyCallExpImpl": 6
      },
      "properties": [
        "views::AssociationEnd::LowerBound",
        "views::AssociationEnd::UpperBound"
      ]
    }],
    "properties": [
      "LowerBound",
      "Composed",
      "class",
      "navigable",
      "UpperBound",
      "Association"
    ]
  },
  {
    "name": "DataType",
    "expressions": [],
    "properties": ["DomainModel"]
  },
  {
    "name": "Link",
    "expressions": [],
    "properties": [
      "ClassIndexView",
      "label",
      "AssociationElements",
      "classoperationview"
    ]
  },
  {
    "name": "LayoutType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Text",
    "expressions": [],
    "properties": [
      "format",
      "isLong",
      "isShort",
      "textType"
    ]
  },
  {
    "name": "ComparisonCondition",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Class",
    "expressions": [
      {
        "operations": {
          "or": 1,
          "size": 2,
          "oclAsSet": 1,
          "=": 2,
          ">": 1
        },
        "name": "ExactlyOneClassID",
        "body": " (self.Property -> select(k | k.isID=true)-> size() = 1) or (self.superclass -> size() > 0)",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 7,
          "VariableExpImpl": 3,
          "OppositePropertyCallExpImpl": 1,
          "IntegerLiteralExpImpl": 2,
          "PropertyCallExpImpl": 2,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "views::Property::isID",
          "views::Class::superclass"
        ]
      },
      {
        "operations": {
          "excludes": 1,
          "oclAsSet": 1
        },
        "name": "ClassNotInheritSelf",
        "body": "self.superclass->excludes(self)",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["views::Class::superclass"]
      }
    ],
    "properties": [
      "DomainModel",
      "Property",
      "superclass",
      "association",
      "Class",
      "AssociationEnd",
      "property"
    ]
  },
  {
    "name": "Property",
    "expressions": [
      {
        "operations": {
          "or": 1,
          "=": 2
        },
        "name": "ClassPropertyTypeIsValid",
        "body": "self.type = PropertyType::DataType or self.type = PropertyType::Enumeration",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "EnumLiteralExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": ["views::Property::type"]
      },
      {
        "operations": {">=": 1},
        "name": "LowerBoundMinZero",
        "body": "self.LowerBound >= 0",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["views::Property::LowerBound"]
      },
      {
        "operations": {"=": 1},
        "name": "UpperBoundEqualsOne",
        "body": "self.UpperBound = 1",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["views::Property::UpperBound"]
      },
      {
        "operations": {"<=": 1},
        "name": "LowerBoundMaxOne",
        "body": "self.LowerBound <= 1",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["views::Property::LowerBound"]
      }
    ],
    "properties": [
      "LowerBound",
      "Class",
      "isID",
      "class",
      "UpperBound",
      "type"
    ]
  },
  {
    "name": "CompositeConditions",
    "expressions": [{
      "operations": {"=": 1},
      "name": "ComposedConditionTypesAreEqual",
      "body": "self.visibilitycondition -> forAll(c | c.conditionType = self.conditionType)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 3,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "views::VisibilityCondition::conditionType",
        "views::CompositeConditions::visibilitycondition"
      ]
    }],
    "properties": [
      "compositeType",
      "visibilitycondition"
    ]
  },
  {
    "name": "ViewModel",
    "expressions": [],
    "properties": ["viewgroup"]
  },
  {
    "name": "ComparisonValue",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Selection",
    "expressions": [],
    "properties": [
      "selectionitems",
      "type"
    ]
  },
  {
    "name": "DomainModel",
    "expressions": [],
    "properties": [
      "class",
      "enumeration",
      "datatype"
    ]
  },
  {
    "name": "List",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ComparisonConditions",
    "expressions": [],
    "properties": [
      "comparison",
      "value",
      "viewelements"
    ]
  },
  {
    "name": "DateType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "TextType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Layout",
    "expressions": [],
    "properties": [
      "ElementGroups",
      "layoutType",
      "ClassOperationView"
    ]
  },
  {
    "name": "VisibilityCondition",
    "expressions": [],
    "properties": [
      "ElementGroups",
      "conditionID",
      "conditionType",
      "ViewElements",
      "CompositeConditions"
    ]
  },
  {
    "name": "Read",
    "expressions": [],
    "properties": []
  },
  {
    "name": "EnumerationLiteralItem",
    "expressions": [],
    "properties": []
  },
  {
    "name": "NamedElement",
    "expressions": [],
    "properties": ["name"]
  },
  {
    "name": "ClassIndexView",
    "expressions": [],
    "properties": ["link"]
  },
  {
    "name": "Update",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SelectionItems",
    "expressions": [],
    "properties": [
      "SelectionValue",
      "Selection"
    ]
  },
  {
    "name": "ViewElements",
    "expressions": [{
      "operations": {
        "excluding": 1,
        "isEmpty": 1,
        "allInstances": 1,
        "=": 1
      },
      "name": "ElementIDIsUnique",
      "body": "ViewElements.allInstances() -> select(n | n.elementID = self.elementID) ->excluding(self) ->isEmpty()",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 3,
        "OperationCallExpImpl": 4,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": ["views::ViewElements::elementID"]
    }],
    "properties": [
      "elementID",
      "visibilitycondition",
      "ClassOperationView",
      "ElementGroups",
      "ComparisonConditions",
      "label"
    ]
  },
  {
    "name": "ClassOperationView",
    "expressions": [],
    "properties": [
      "elementgroups",
      "viewelements",
      "link",
      "layout"
    ]
  }
]
