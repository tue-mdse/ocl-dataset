[
  {
    "name": "Authorship",
    "expressions": [],
    "properties": [
      "author",
      "publi",
      "Friendz"
    ]
  },
  {
    "name": "Enemity",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "Relation",
      "body": "Tuple {\n\tmessage : String = 'User1 must be different from user2',\n\tstatus : Boolean = \n\t\tself.user1 <> self.user2 \n}.status",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 2,
        "TupleLiteralExpImpl": 1,
        "StringLiteralExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "friendz::Enemity::user2",
        "$$::Tuple::status",
        "friendz::Enemity::user1"
      ]
    }],
    "properties": [
      "dateEnemy",
      "user2",
      "Friendz",
      "user1"
    ]
  },
  {
    "name": "LikePublication",
    "expressions": [
      {
        "operations": {
          "oclAsSet": 1,
          "=": 1
        },
        "name": "isAuthor",
        "body": "self ->select(u : User | Authorship.publi = p) ",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["friendz::Authorship::publi"]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "=": 1
        },
        "name": "isFriend",
        "body": "self ->select(u2 : User | Friendship.user3 = u) ",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["friendz::Friendship::user3"]
      }
    ],
    "properties": [
      "Friendz",
      "userLikePubli",
      "publiLike"
    ]
  },
  {
    "name": "Comment",
    "expressions": [],
    "properties": [
      "idCom",
      "dateCom",
      "Friendz",
      "CommentTarget",
      "comment",
      "LikeComment"
    ]
  },
  {
    "name": "LikeComment",
    "expressions": [],
    "properties": [
      "Friendz",
      "commentLike",
      "userLikeCom"
    ]
  },
  {
    "name": "CommentTarget",
    "expressions": [],
    "properties": [
      "Friendz",
      "pubCommented",
      "comment"
    ]
  },
  {
    "name": "User",
    "expressions": [{
      "operations": {
        "<>": 2,
        "allInstances": 1,
        "implies": 1
      },
      "name": "UniqueId",
      "body": "Tuple {\n\tmessage : String = 'User must have a unique id',\n\tstatus : Boolean = \n\t\tUser.allInstances () -> forAll (u1, u2 | u1 <> u2 implies u1.idUser <> u2.idUser)\n}.status",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "OperationCallExpImpl": 4,
        "VariableExpImpl": 4,
        "TupleLiteralExpImpl": 1,
        "TypeExpImpl": 1,
        "StringLiteralExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "$$::Tuple::status",
        "friendz::User::idUser"
      ]
    }],
    "properties": [
      "Friendz",
      "Authorship",
      "firstName",
      "Enemity",
      "LikePublication",
      "lastName",
      "LikeComment",
      "Friendship",
      "idUser",
      "Friendship",
      "Enemity"
    ]
  },
  {
    "name": "Friendz",
    "expressions": [],
    "properties": [
      "publiRefs",
      "commentTargets",
      "likePublications",
      "likeComments",
      "comments",
      "users",
      "friendships",
      "authorships",
      "publications",
      "enemities"
    ]
  },
  {
    "name": "Publication",
    "expressions": [
      {
        "operations": {
          "<>": 2,
          "allInstances": 1,
          "implies": 1
        },
        "name": "UniqueId",
        "body": "Tuple {\n\tmessage : String = 'User must have a unique id',\n\tstatus : Boolean = \n\t\tPublication.allInstances () -> forAll (p1, p2 | p1 <> p2 implies p1.idPub <> p2.idPub)\n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 4,
          "TupleLiteralExpImpl": 1,
          "TypeExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "$$::Tuple::status",
          "friendz::Publication::idPub"
        ]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "=": 1
        },
        "name": "isAuthor",
        "body": "self ->select(u : User | Authorship.publi = p) ",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["friendz::Authorship::publi"]
      }
    ],
    "properties": [
      "PubliRef",
      "datePub",
      "publication",
      "LikePublication",
      "Friendz",
      "PubliRef",
      "idPub",
      "Authorship",
      "CommentTarget"
    ]
  },
  {
    "name": "Friendship",
    "expressions": [{
      "operations": {"<>": 1},
      "name": "Relation",
      "body": "Tuple {\n\tmessage : String = 'User1 must be different from user2',\n\tstatus : Boolean = \n\t\tself.user3 <> self.user4 \n}.status",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 2,
        "TupleLiteralExpImpl": 1,
        "StringLiteralExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "friendz::Friendship::user4",
        "$$::Tuple::status",
        "friendz::Friendship::user3"
      ]
    }],
    "properties": [
      "Friendz",
      "user4",
      "dateFriend",
      "user3"
    ]
  },
  {
    "name": "PubliRef",
    "expressions": [
      {
        "operations": {"<>": 1},
        "name": "Relation",
        "body": "Tuple {\n\tmessage : String = 'Publication must be different from Origin publication',\n\tstatus : Boolean = \n\t\tself.publi <> self.publiRef \n}.status",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "TupleLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "friendz::PubliRef::publiRef",
          "$$::Tuple::status",
          "friendz::PubliRef::publi"
        ]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "=": 1
        },
        "name": "isFriend",
        "body": "self ->select(u2 : User | Friendship.user3 = u) ",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["friendz::Friendship::user3"]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "=": 1
        },
        "name": "isAuthor",
        "body": "self ->select(u : User | Authorship.publi = p) ",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["friendz::Authorship::publi"]
      }
    ],
    "properties": [
      "publiRef",
      "Friendz",
      "publi"
    ]
  }
]
