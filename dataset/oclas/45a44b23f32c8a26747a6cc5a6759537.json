[
  {
    "name": "Complex",
    "expressions": [],
    "properties": [
      "imaginaryPart",
      "realPart"
    ]
  },
  {
    "name": "AffineConversionUnit",
    "expressions": [{
      "operations": {"=": 1},
      "name": "invertible",
      "body": "isInvertible = true",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "BooleanLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["SysML_ValueTypes_QUDV::QUDV::ConversionBasedUnit::isInvertible"]
    }],
    "properties": [
      "offset",
      "factor"
    ]
  },
  {
    "name": "Number",
    "expressions": [],
    "properties": [
      "ROOT_RESOURCE_SHAPE_CONTAINER",
      "AffineConversionUnit",
      "name",
      "LinearConversionUnit",
      "AffineConversionUnit"
    ]
  },
  {
    "name": "LinearConversionUnit",
    "expressions": [{
      "operations": {"=": 1},
      "name": "invertible",
      "body": "isInvertible = true",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "BooleanLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["SysML_ValueTypes_QUDV::QUDV::ConversionBasedUnit::isInvertible"]
    }],
    "properties": ["factor"]
  },
  {
    "name": "GeneralConversionUnit",
    "expressions": [],
    "properties": [
      "expression",
      "expressionLanguageURI"
    ]
  },
  {
    "name": "ConversionBasedUnit",
    "expressions": [{
      "operations": {
        "dependsOnUnits": 1,
        "including": 1,
        "asSet": 1
      },
      "name": "dependsOnUnits",
      "body": "referenceUnit.dependsOnUnits()->including(referenceUnit)->asSet()",
      "type": "OperationImpl",
      "constructs": {
        "OperationCallExpImpl": 3,
        "VariableExpImpl": 2,
        "PropertyCallExpImpl": 2
      },
      "properties": ["SysML_ValueTypes_QUDV::QUDV::ConversionBasedUnit::referenceUnit"]
    }],
    "properties": [
      "isInvertible",
      "referenceUnit"
    ]
  },
  {
    "name": "Prefix",
    "expressions": [],
    "properties": [
      "symbol",
      "ROOT_RESOURCE_SHAPE_CONTAINER",
      "name",
      "SystemOfUnits",
      "PrefixedUnit",
      "factor"
    ]
  },
  {
    "name": "SystemOfUnits",
    "expressions": [
      {
        "operations": {
          "flatten": 1,
          "allIncludedSystemOfUnits": 1,
          "union": 1,
          "asSet": 2
        },
        "name": "allUnits",
        "body": "allIncludedSystemOfUnits()->collect(unit)->flatten()->asSet()->union(unit)->asSet()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": ["SysML_ValueTypes_QUDV::QUDV::SystemOfUnits::unit"]
      },
      {
        "operations": {
          "allUnits": 1,
          "includesAll": 1,
          "oclIsTypeOf": 1,
          "oclAsType": 1,
          "allPrefixes": 1
        },
        "name": "SoU3_1",
        "body": "/*In a well-formed SystemOfUnits, all of the prefixes of PrefixedUnits are defined in the SystemOfUnits.*/ allPrefixes()->includesAll(allUnits()->select(oclIsTypeOf(PrefixedUnit))->collect(oclAsType(PrefixedUnit).prefix))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 5,
          "TypeExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["SysML_ValueTypes_QUDV::QUDV::PrefixedUnit::prefix"]
      },
      {
        "operations": {
          "allIncludedSystemOfUnits": 1,
          "intersection": 1,
          "oclAsSet": 1,
          "isEmpty": 1
        },
        "name": "includedSystemOfUnits_transitivelyDisjoint_usedSystemOfUnits",
        "body": "/*For a Unit to have a provenance to a single SystemOfUnits, all included systems of units must be transitively disjoint with all used systems of units.*/ allIncludedSystemOfUnits()->intersection(self.oclAsSet()->closure(usedSystemOfUnits))->isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 4,
          "PropertyCallExpImpl": 1
        },
        "properties": ["SysML_ValueTypes_QUDV::QUDV::SystemOfUnits::usedSystemOfUnits"]
      },
      {
        "operations": {
          "flatten": 1,
          "allBaseQuantityKinds": 1,
          "asSet": 1,
          "getEffectiveSystemOfQuantities": 1
        },
        "name": "allBaseQuantityKinds",
        "body": "getEffectiveSystemOfQuantities().allBaseQuantityKinds()->flatten()->asSet()",
        "type": "OperationImpl",
        "constructs": {
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "allUnits": 1,
          "includesAll": 1,
          "allBaseUnits": 1
        },
        "name": "allBaseUnitsAreUnits",
        "body": "/*The set of all Units in a given SystemOfUnits can be partitioned into two disjoint, covering subsets: the set of base Units (typically chosen to be mutually independent) and all its complement, the set of derived Units, each of which can be expressed in terms of the base Units (See ISO 80000-1, 6.4).*/ allUnits()->includesAll(allBaseUnits())",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "getKindOfQuantitiesForMeasurementUnit": 1,
          "allUnits": 1,
          "includesAll": 1,
          "or": 1,
          "allQuantityKinds": 1,
          "=": 1,
          "getEffectiveSystemOfQuantities": 2
        },
        "name": "SoU3_3",
        "body": "/*All of the quantityKinds that are measurementUnits of Units in the SystemOfUnits are defined in the systemOfQuantities of that SystemOfUnits.*/ getEffectiveSystemOfQuantities() = null or let aqk : Set(QuantityKind) = getEffectiveSystemOfQuantities().allQuantityKinds() in allUnits()->forAll(u | aqk->includesAll(getKindOfQuantitiesForMeasurementUnit(u)))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 6,
          "OperationCallExpImpl": 8,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "flatten": 1,
          "allIncludedSystemOfUnits": 1,
          "union": 1,
          "asSet": 2
        },
        "name": "allBaseUnits",
        "body": "allIncludedSystemOfUnits()->collect(baseUnit)->flatten()->asSet()->union(baseUnit)->asSet()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 5,
          "PropertyCallExpImpl": 2
        },
        "properties": ["SysML_ValueTypes_QUDV::QUDV::SystemOfUnits::baseUnit"]
      },
      {
        "operations": {
          "allUnits": 1,
          "intersection": 1,
          "isEmpty": 1
        },
        "name": "singleProvenance",
        "body": "/*Every Unit must be defined in only one SystemOfUnits but it can be in the scope of several SystemOfUnits. A given Unit is in scope of a SystemOfUnits either because it is defined or used in a SystemOfUnits or because it is included from the scope of another SystemOfUnits.*/ includedSystemOfUnits->collect(allUnits())->intersection(unit)->isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "SysML_ValueTypes_QUDV::QUDV::SystemOfUnits::unit",
          "SysML_ValueTypes_QUDV::QUDV::SystemOfUnits::includedSystemOfUnits"
        ]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "union": 1,
          "asSet": 1
        },
        "name": "allIncludedSystemOfUnits",
        "body": "self->closure(includedSystemOfUnits->union(usedSystemOfUnits))->asSet()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "SysML_ValueTypes_QUDV::QUDV::SystemOfUnits::usedSystemOfUnits",
          "SysML_ValueTypes_QUDV::QUDV::SystemOfUnits::includedSystemOfUnits"
        ]
      },
      {
        "operations": {
          "flatten": 1,
          "allAccessibleSystemOfUnits": 1,
          "asSet": 1
        },
        "name": "allAccessibleUnits",
        "body": "allAccessibleSystemOfUnits()->collect(unit)->flatten()->asSet()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["SysML_ValueTypes_QUDV::QUDV::SystemOfUnits::unit"]
      },
      {
        "operations": {
          "<=": 1,
          "size": 1,
          "implies": 1,
          "asSet": 1,
          "=": 1,
          "getEffectiveSystemOfQuantities": 1
        },
        "name": "atMostOneSystemOfQuantities",
        "body": "systemOfQuantities = null implies includedSystemOfUnits->collect(getEffectiveSystemOfQuantities())->asSet()->size() <= 1",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 6,
          "NullLiteralExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "SysML_ValueTypes_QUDV::QUDV::SystemOfUnits::systemOfQuantities",
          "SysML_ValueTypes_QUDV::QUDV::SystemOfUnits::includedSystemOfUnits"
        ]
      },
      {
        "operations": {
          "allUnits": 1,
          "=": 1
        },
        "name": "getUnit",
        "body": "allUnits()->select(u | u.name = name)->any(true)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 2,
          "BooleanLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["SysML_ValueTypes_QUDV::UnitAndQuantityKind::Unit::name"]
      },
      {
        "operations": {
          "flatten": 1,
          "including": 1,
          "allAccessibleSystemOfUnits": 1,
          "asSet": 1
        },
        "name": "allPrefixes",
        "body": "allAccessibleSystemOfUnits()->including(self)->collect(prefix)->flatten()->asSet()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 1
        },
        "properties": ["SysML_ValueTypes_QUDV::QUDV::SystemOfUnits::prefix"]
      },
      {
        "operations": {
          "getKindOfQuantitiesForMeasurementUnit": 3,
          "<>": 2,
          "oclIsKindOf": 4,
          "asSet": 3,
          "oclAsType": 5
        },
        "name": "getKindOfQuantitiesForMeasurementUnit",
        "body": "if (u.oclIsKindOf(SimpleUnit)) \n\t\t\t\t\t\tthen \n\t\t\t\t\t\t\tu.quantityKind->collect(oclAsType(QuantityKind))->asSet()\n\t\t\t\t\t\telse if (u.oclIsKindOf(DerivedUnit)) \n\t\t\t\t\t\t\tthen let du : DerivedUnit = u.oclAsType(DerivedUnit) in \n\t\t\t\t\t\t\t\tif (du.quantityKind <> null) then \n\t\t\t\t\t\t\t\t\tdu.quantityKind->collect(oclAsType(QuantityKind))->asSet() \n\t\t\t\t\t\t\t\telse \n\t\t\t\t\t\t\t\t\tgetKindOfQuantitiesForMeasurementUnit(du.factor->any(true).unit) \n\t\t\t\t\t\t\t\tendif\n\t\t\t\t\t\t\telse if (u.oclIsKindOf(ConversionBasedUnit)) \n\t\t\t\t\t\t\t\tthen let cu : ConversionBasedUnit = u.oclAsType(ConversionBasedUnit) in\n\t\t\t\t\t\t\t\t\tif (cu.oclIsKindOf(PrefixedUnit)) \n\t\t\t\t\t\t\t\t\tthen \n\t\t\t\t\t\t\t\t\t\tgetKindOfQuantitiesForMeasurementUnit(cu.referenceUnit)\n\t\t\t\t\t\t\t\t\telse \n\t\t\t\t\t\t\t\t\t\tif (cu.quantityKind <> null) then \n\t\t\t\t\t\t\t\t\t\t\tcu.quantityKind->collect(oclAsType(QuantityKind))->asSet()\n\t\t\t\t\t\t\t\t\t\telse \n\t\t\t\t\t\t\t\t\t\t\tgetKindOfQuantitiesForMeasurementUnit(cu.referenceUnit)\n\t\t\t\t\t\t\t\t\t\tendif\n\t\t\t\t\t\t\t\t\tendif\n\t\t\t\t\t\t\t\telse \n\t\t\t\t\t\t\t\t\tSet(QuantityKind){}\n\t\t\t\t\t\t\t\tendif\n\t\t\t\t\t\t\tendif\n\t\t\t\t\t\tendif",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 4,
          "OperationCallExpImpl": 17,
          "VariableExpImpl": 20,
          "LetExpImpl": 2,
          "NullLiteralExpImpl": 2,
          "TypeExpImpl": 9,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 6,
          "PropertyCallExpImpl": 9,
          "BooleanLiteralExpImpl": 1
        },
        "properties": [
          "SysML_ValueTypes_QUDV::UnitAndQuantityKind::Unit::quantityKind",
          "SysML_ValueTypes_QUDV::QUDV::DerivedUnit::factor",
          "SysML_ValueTypes_QUDV::QUDV::UnitFactor::unit",
          "SysML_ValueTypes_QUDV::QUDV::ConversionBasedUnit::referenceUnit"
        ]
      },
      {
        "operations": {
          "<>": 1,
          "allBaseUnits": 1,
          "getAdoptedBaseUnitForMeasurementUnit": 1
        },
        "name": "isCoherent",
        "body": "allBaseUnits()->forAll(u | getAdoptedBaseUnitForMeasurementUnit(u) <> null)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 3,
          "NullLiteralExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "oclAsSet": 1,
          "union": 1,
          "asSet": 1
        },
        "name": "allAccessibleSystemOfUnits",
        "body": "self->closure(includedSystemOfUnits->union(usedSystemOfUnits))->asSet()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "SysML_ValueTypes_QUDV::QUDV::SystemOfUnits::usedSystemOfUnits",
          "SysML_ValueTypes_QUDV::QUDV::SystemOfUnits::includedSystemOfUnits"
        ]
      },
      {
        "operations": {
          "oclIsKindOf": 1,
          "intersection": 1,
          "oclAsSet": 1,
          "allBaseUnits": 1,
          "includes": 1,
          "asSet": 1,
          "oclAsType": 1
        },
        "name": "getAdoptedBaseUnitForMeasurementUnit",
        "body": "let abu : Set(Unit) = allBaseUnits() in\n    \t\t\t\t\t\tif (abu->includes(u)) then u\n    \t\t\t\t\t\telse if (u.oclIsKindOf(PrefixedUnit)) then abu->intersection(u.oclAsType(PrefixedUnit).referenceUnit->asSet())->any(true) else null endif\n    \t\t\t\t\t\tendif",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 7,
          "VariableExpImpl": 7,
          "LetExpImpl": 1,
          "NullLiteralExpImpl": 1,
          "TypeExpImpl": 2,
          "IfExpImpl": 2,
          "PropertyCallExpImpl": 1,
          "BooleanLiteralExpImpl": 1
        },
        "properties": ["SysML_ValueTypes_QUDV::QUDV::ConversionBasedUnit::referenceUnit"]
      },
      {
        "operations": {
          "flatten": 1,
          "asSet": 1,
          "=": 1,
          "getEffectiveSystemOfQuantities": 1
        },
        "name": "getEffectiveSystemOfQuantities",
        "body": "if systemOfQuantities = null then includedSystemOfUnits->collect(getEffectiveSystemOfQuantities())->flatten()->asSet()->any(true) else systemOfQuantities endif",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 2,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 4,
          "NullLiteralExpImpl": 1,
          "IfExpImpl": 1,
          "BooleanLiteralExpImpl": 1,
          "PropertyCallExpImpl": 3
        },
        "properties": [
          "SysML_ValueTypes_QUDV::QUDV::SystemOfUnits::systemOfQuantities",
          "SysML_ValueTypes_QUDV::QUDV::SystemOfUnits::includedSystemOfUnits"
        ]
      },
      {
        "operations": {
          "flatten": 1,
          "allUnits": 2,
          "dependsOnUnits": 1,
          "includesAll": 1,
          "asSet": 1
        },
        "name": "SoU3_2",
        "body": "/*All the dependent Units of a SystemOfUnits must be in the scope of that SystemOfUnits.*/ allUnits()->includesAll(allUnits()->collect(dependsOnUnits())->flatten()->asSet())",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {
          "allUnits": 1,
          "getKindOfQuantitiesForMeasurementUnit": 1,
          "allQuantityKinds": 1,
          "intersection": 1,
          "notEmpty": 1,
          "getEffectiveSystemOfQuantities": 1
        },
        "name": "systemOfQuantitiesIncludesAllUnitsQuantityKinds",
        "body": "/*For a Unit to have a provenance to a single SystemOfUnits, includedSystemsOfUnits must be transitively disjoint with usedSystemsOfUnits.*/ let aqks : Set(QuantityKind) = getEffectiveSystemOfQuantities().allQuantityKinds() in\n        allUnits()->forAll(u | getKindOfQuantitiesForMeasurementUnit(u)->intersection(aqks)->notEmpty())",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 6,
          "VariableExpImpl": 5,
          "LetExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "allUnits": 1,
          "<>": 1
        },
        "name": "allMeasurementUnitsDefinedForSomeQuantityKind",
        "body": "allUnits()->forAll(quantityKind <> null)",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "NullLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["SysML_ValueTypes_QUDV::UnitAndQuantityKind::Unit::quantityKind"]
      },
      {
        "operations": {
          "getKindOfQuantitiesForMeasurementUnit": 1,
          "intersection": 1,
          "allBaseQuantityKinds": 1,
          "=": 1,
          "getAdoptedBaseUnitForMeasurementUnit": 1
        },
        "name": "getAdoptedQuantityKindForAdoptedBaseUnitOfMeasurementUnit",
        "body": "let bu : Unit = getAdoptedBaseUnitForMeasurementUnit(u) in\n\t\t\t\t\t\tif (bu = null) then Set{}\n\t\t\t\t\t\telse let qks : Set(QuantityKind) = getKindOfQuantitiesForMeasurementUnit(bu) in allBaseQuantityKinds()->intersection(qks)\n\t\t\t\t\t\tendif",
        "type": "OperationImpl",
        "constructs": {
          "VariableExpImpl": 7,
          "OperationCallExpImpl": 5,
          "LetExpImpl": 2,
          "NullLiteralExpImpl": 1,
          "CollectionLiteralExpImpl": 1,
          "IfExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "allBaseUnits": 1,
          "includes": 1
        },
        "name": "baseUnitParameter",
        "body": "allBaseUnits()->includes(u)",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "excludes": 1,
          "allAccessibleSystemOfUnits": 1
        },
        "name": "acyclicProvenance",
        "body": "/*For a Unit to have a provenance to a single SystemOfUnits, the use and includes relationships among SystemOfUnits must be acyclic.*/ allAccessibleSystemOfUnits()->excludes(self)",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "includesAll": 1,
          "allBaseQuantityKinds": 1,
          "getEffectiveSystemOfQuantities": 1
        },
        "name": "knownPrimaryQuantityKind",
        "body": "getEffectiveSystemOfQuantities().allBaseQuantityKinds()->includesAll(result)",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2
        },
        "properties": []
      }
    ],
    "properties": [
      "symbol",
      "SystemOfUnits",
      "ROOT_RESOURCE_SHAPE_CONTAINER",
      "description",
      "definitionURI",
      "baseUnit",
      "prefix",
      "usedSystemOfUnits",
      "systemOfQuantities",
      "name",
      "unit",
      "includedSystemOfUnits",
      "SystemOfUnits"
    ]
  },
  {
    "name": "Rational",
    "expressions": [{
      "operations": {
        "times": 3,
        "and": 1,
        "=": 2,
        "plus": 1
      },
      "name": "result",
      "body": "result.numerator = self.numerator.times(r.denominator).plus(r.numerator.times(self.denominator)) and result.denominator = self.denominator.times(r.denominator)\n",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 7,
        "VariableExpImpl": 8,
        "PropertyCallExpImpl": 8
      },
      "properties": [
        "SysML_ValueTypes_QUDV::PrimitiveValueTypes::Rational::denominator",
        "SysML_ValueTypes_QUDV::PrimitiveValueTypes::Rational::numerator"
      ]
    }],
    "properties": [
      "UnitFactor",
      "denominator",
      "Prefix",
      "numerator",
      "QuantityKindFactor"
    ]
  },
  {
    "name": "QuantityKind",
    "expressions": [{
      "operations": {"excludes": 1},
      "name": "acyclic_quantity_kind_dependencies",
      "body": "/*A QuantityKind cannot be defined in terms of itself. This follows from the quantity calculus used for expressing a derived QuantityKind in terms of base QuantityKinds chosen for a SystemOfQuantities by means of non-contradictory equations (See ISO 80000-1, 4.3).*/ dependsOnQuantityKinds->excludes(self)",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 2,
        "PropertyCallExpImpl": 1
      },
      "properties": ["SysML_ValueTypes_QUDV::QUDV::QuantityKind::dependsOnQuantityKinds"]
    }],
    "properties": [
      "QuantityKind",
      "QuantityKindFactor",
      "SystemOfQuantities",
      "SystemOfQuantities",
      "isQuantityOfDimensionOne",
      "QuantityKind",
      "dependsOnQuantityKinds",
      "general",
      "isNumberOfEntities"
    ]
  },
  {
    "name": "QuantityKind",
    "expressions": [],
    "properties": [
      "name",
      "ROOT_RESOURCE_SHAPE_CONTAINER",
      "Unit",
      "definitionURI",
      "symbol",
      "description"
    ]
  },
  {
    "name": "Integer",
    "expressions": [],
    "properties": [
      "Rational",
      "Rational"
    ]
  },
  {
    "name": "PrefixedUnit",
    "expressions": [
      {
        "operations": {"isEmpty": 1},
        "name": "value_derivation",
        "body": "quantityKind->isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["SysML_ValueTypes_QUDV::UnitAndQuantityKind::Unit::quantityKind"]
      },
      {
        "operations": {
          "not": 1,
          "oclIsTypeOf": 1
        },
        "name": "PU1",
        "body": "/*The referenceUnit shall not be a PrefixedUnit, i.e.,it is not  allowed to prefix an already prefixed measurement unit. In general the referenceUnit should be a SimpleUnit.*/ not referenceUnit.oclIsTypeOf(PrefixedUnit)",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["SysML_ValueTypes_QUDV::QUDV::ConversionBasedUnit::referenceUnit"]
      }
    ],
    "properties": ["prefix"]
  },
  {
    "name": "ROOT_RESOURCE_SHAPE_CONTAINER",
    "expressions": [],
    "properties": [
      "quantityKind",
      "systemOfQuantities",
      "number",
      "quantityKindFactor",
      "prefix",
      "systemOfUnits",
      "unitFactor",
      "unit",
      "dimension"
    ]
  },
  {
    "name": "DerivedQuantityKind",
    "expressions": [{
      "operations": {
        "flatten": 2,
        "dependsOnQuantityKinds": 1,
        "union": 1,
        "asSet": 3
      },
      "name": "dependsOnQuantityKinds",
      "body": "factor.quantityKind.dependsOnQuantityKinds()->flatten()->asSet()->union(factor.quantityKind->flatten()->asSet())->asSet()",
      "type": "OperationImpl",
      "constructs": {
        "IteratorExpImpl": 3,
        "VariableExpImpl": 5,
        "OperationCallExpImpl": 7,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "SysML_ValueTypes_QUDV::QUDV::DerivedQuantityKind::factor",
        "SysML_ValueTypes_QUDV::QUDV::QuantityKindFactor::quantityKind"
      ]
    }],
    "properties": ["factor"]
  },
  {
    "name": "Unit",
    "expressions": [],
    "properties": [
      "description",
      "definitionURI",
      "quantityKind",
      "symbol",
      "ROOT_RESOURCE_SHAPE_CONTAINER",
      "name"
    ]
  },
  {
    "name": "QuantityKindFactor",
    "expressions": [],
    "properties": [
      "DerivedQuantityKind",
      "quantityKind",
      "Dimension",
      "exponent",
      "ROOT_RESOURCE_SHAPE_CONTAINER",
      "name"
    ]
  },
  {
    "name": "SimpleQuantityKind",
    "expressions": [{
      "operations": {},
      "name": "dependsOnQuantityKinds",
      "body": "Set(QuantityKind){}",
      "type": "OperationImpl",
      "constructs": {"CollectionLiteralExpImpl": 1},
      "properties": []
    }],
    "properties": []
  },
  {
    "name": "Real",
    "expressions": [],
    "properties": [
      "Complex",
      "Complex"
    ]
  },
  {
    "name": "Unit",
    "expressions": [
      {
        "operations": {"oclIsKindOf": 1},
        "name": "type_redefinition",
        "body": "quantityKind->forAll(oclIsKindOf(QuantityKind))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "TypeExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["SysML_ValueTypes_QUDV::UnitAndQuantityKind::Unit::quantityKind"]
      },
      {
        "operations": {"excludes": 1},
        "name": "acyclic_unit_dependencies",
        "body": "/*A Unit cannot be defined in terms of itself. This follows from the requirement that, in a coherent SystemOfUnits, the Units of all derived QuantityKinds are expressed in terms of the base Units in accordance with the equations in the SystemOfQuantities (see ISO 80000-1, 6.4).*/ dependsOnUnits->excludes(self)",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["SysML_ValueTypes_QUDV::QUDV::Unit::dependsOnUnits"]
      }
    ],
    "properties": [
      "Unit",
      "isUnitCountOfEntities",
      "ConversionBasedUnit",
      "dependsOnUnits",
      "general",
      "Unit",
      "SystemOfUnits",
      "SystemOfUnits",
      "UnitFactor",
      "isUnitForQuantityOfDimensionOne"
    ]
  },
  {
    "name": "UnitFactor",
    "expressions": [],
    "properties": [
      "ROOT_RESOURCE_SHAPE_CONTAINER",
      "DerivedUnit",
      "exponent",
      "unit",
      "name"
    ]
  },
  {
    "name": "SystemOfQuantities",
    "expressions": [
      {
        "operations": {
          "excludes": 1,
          "allAccessibleSystemOfQuantities": 1
        },
        "name": "acyclicProvenance",
        "body": "/*For a QuantityKind to have a provenance to a single SystemOfQuantities, the use and includes relationships among SystemOfQuantities must be acyclic.*/ allAccessibleSystemOfQuantities()->excludes(self)",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2
        },
        "properties": []
      },
      {
        "operations": {
          "allQuantityKinds": 1,
          "intersection": 1,
          "isEmpty": 1
        },
        "name": "singleProvenance",
        "body": "/*Every QuantityKind must be defined in only one SystemOfQuantities but it can be in the scope of several SystemOfQuantities. A given QuantityKind is in scope of a SystemOfQuantities either because it is defined or used in a SystemOfQuantities or because it is included from the scope of another SystemOfQuantities.*/ includedSystemOfQuantities->collect(allQuantityKinds())->intersection(quantityKind)->isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "SysML_ValueTypes_QUDV::QUDV::SystemOfQuantities::quantityKind",
          "SysML_ValueTypes_QUDV::QUDV::SystemOfQuantities::includedSystemOfQuantities"
        ]
      },
      {
        "operations": {
          "flatten": 1,
          "allAccessibleSystemOfQuantities": 1,
          "asSet": 1
        },
        "name": "allAccessibleQuantityKinds",
        "body": "allAccessibleSystemOfQuantities()->collect(quantityKind)->flatten()->asSet()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["SysML_ValueTypes_QUDV::QUDV::SystemOfQuantities::quantityKind"]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "union": 1,
          "asSet": 1
        },
        "name": "allAccessibleSystemOfQuantities",
        "body": "self->closure(includedSystemOfQuantities->union(usedSystemOfQuantities))->asSet()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "SysML_ValueTypes_QUDV::QUDV::SystemOfQuantities::includedSystemOfQuantities",
          "SysML_ValueTypes_QUDV::QUDV::SystemOfQuantities::usedSystemOfQuantities"
        ]
      },
      {
        "operations": {
          "oclAsSet": 1,
          "asSet": 1
        },
        "name": "allIncludedSystemOfQuantities",
        "body": "self->closure(includedSystemOfQuantities)->asSet()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["SysML_ValueTypes_QUDV::QUDV::SystemOfQuantities::includedSystemOfQuantities"]
      },
      {
        "operations": {
          "includesAll": 1,
          "allQuantityKinds": 1,
          "allBaseQuantityKinds": 1
        },
        "name": "allBaseQuantitiesAreQuantities",
        "body": "/*The set of all QuantityKinds in a given SystemOfQuantities can be partitioned into two disjoint, covering subsets: the set of base QuantityKinds (typically chosen to be mutually independent) and all its complement, the set of derived QuantityKinds, each of which can be expressed in terms of the base QuantityKinds (See ISO 80000-1, 4.3).*/ allQuantityKinds()->includesAll(allBaseQuantityKinds())",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3
        },
        "properties": []
      },
      {
        "operations": {
          "intersection": 1,
          "oclAsSet": 1,
          "isEmpty": 1,
          "allIncludedSystemOfQuantities": 1
        },
        "name": "includedSystemOfQuantities_transitivelyDisjoint_usedSystemOfQuantities",
        "body": "/*For a QuantityKind to have a provenance to a single SystemOfQuantities, includedSystemsOfQuantities must be transitively disjoint with usedSystemsOfQuantities*/ allIncludedSystemOfQuantities()->intersection(self.oclAsSet()->closure(usedSystemOfQuantities))->isEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 1
        },
        "properties": ["SysML_ValueTypes_QUDV::QUDV::SystemOfQuantities::usedSystemOfQuantities"]
      },
      {
        "operations": {
          "flatten": 1,
          "allIncludedSystemOfQuantities": 1,
          "union": 1,
          "asSet": 2
        },
        "name": "allBaseQuantityKinds",
        "body": "allIncludedSystemOfQuantities()->collect(baseQuantityKind)->flatten()->asSet()->union(baseQuantityKind)->asSet()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": ["SysML_ValueTypes_QUDV::QUDV::SystemOfQuantities::baseQuantityKind"]
      },
      {
        "operations": {
          "flatten": 1,
          "allIncludedSystemOfQuantities": 1,
          "union": 1,
          "asSet": 2
        },
        "name": "allQuantityKinds",
        "body": "allIncludedSystemOfQuantities()->collect(quantityKind)->flatten()->asSet()->union(quantityKind)->asSet()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 5,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": ["SysML_ValueTypes_QUDV::QUDV::SystemOfQuantities::quantityKind"]
      }
    ],
    "properties": [
      "quantityKind",
      "description",
      "definitionURI",
      "symbol",
      "SystemOfQuantities",
      "name",
      "SystemOfQuantities",
      "includedSystemOfQuantities",
      "ROOT_RESOURCE_SHAPE_CONTAINER",
      "SystemOfUnits",
      "baseQuantityKind",
      "usedSystemOfQuantities"
    ]
  },
  {
    "name": "DerivedUnit",
    "expressions": [
      {
        "operations": {
          "flatten": 2,
          "dependsOnUnits": 1,
          "union": 1,
          "asSet": 3
        },
        "name": "dependsOnUnits",
        "body": "factor.unit.dependsOnUnits()->flatten()->asSet()->union(factor.unit->flatten()->asSet())->asSet()",
        "type": "OperationImpl",
        "constructs": {
          "IteratorExpImpl": 3,
          "OperationCallExpImpl": 7,
          "VariableExpImpl": 5,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "SysML_ValueTypes_QUDV::QUDV::DerivedUnit::factor",
          "SysML_ValueTypes_QUDV::QUDV::UnitFactor::unit"
        ]
      },
      {
        "operations": {
          "<>": 1,
          "and": 1,
          "notEmpty": 1
        },
        "name": "mustSpecifyQuantityKind",
        "body": "/*Since a DerivedUnit is defined as a product factor of one or more other Units, it must specify explicitly its QuantityKinds.*/ quantityKind <> null and quantityKind->notEmpty()",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 3,
          "NullLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["SysML_ValueTypes_QUDV::UnitAndQuantityKind::Unit::quantityKind"]
      }
    ],
    "properties": ["factor"]
  },
  {
    "name": "SimpleUnit",
    "expressions": [{
      "operations": {},
      "name": "dependsOnUnits",
      "body": "Set(Unit){}",
      "type": "OperationImpl",
      "constructs": {"CollectionLiteralExpImpl": 1},
      "properties": []
    }],
    "properties": []
  },
  {
    "name": "Dimension",
    "expressions": [],
    "properties": [
      "factor",
      "ROOT_RESOURCE_SHAPE_CONTAINER",
      "name"
    ]
  }
]
