[
  {
    "name": "SchemaContext",
    "expressions": [],
    "properties": ["schema"]
  },
  {
    "name": "API",
    "expressions": [
      {
        "operations": {
          "not": 1,
          "oclIsUndefined": 1
        },
        "name": "requiredSwaggerVersion",
        "body": "not self.swagger.oclIsUndefined()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["core::API::swagger"]
      },
      {
        "operations": {"=": 1},
        "name": "correctSwaggerVersion",
        "body": "self.swagger = '2.0'",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["core::API::swagger"]
      },
      {
        "operations": {"pathsIsSet": 1},
        "name": "requiredPaths",
        "body": "pathsIsSet()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 1
        },
        "properties": []
      },
      {
        "operations": {
          "not": 1,
          "oclIsUndefined": 1
        },
        "name": "requiredInfoReference",
        "body": "not self.info.oclIsUndefined()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["core::API::info"]
      }
    ],
    "properties": [
      "tags",
      "info",
      "basePath",
      "paths",
      "securityDefinitions",
      "consumes",
      "host",
      "swagger",
      "schemes",
      "responses",
      "produces",
      "Root",
      "definitions"
    ]
  },
  {
    "name": "ArrayContext",
    "expressions": [],
    "properties": [
      "items",
      "collectionFormat"
    ]
  },
  {
    "name": "ParameterLocation",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SchemeType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Info",
    "expressions": [
      {
        "operations": {
          "not": 1,
          "oclIsUndefined": 1
        },
        "name": "requiredAPIVerison",
        "body": "not self.version.oclIsUndefined()",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 1,
          "OperationCallExpImpl": 2,
          "PropertyCallExpImpl": 1
        },
        "properties": ["core::Info::version"]
      },
      {
        "operations": {
          "not": 1,
          "oclIsUndefined": 1
        },
        "name": "requiredTitle",
        "body": "not self.title.oclIsUndefined()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["core::Info::title"]
      }
    ],
    "properties": [
      "API",
      "contact",
      "termsOfServices",
      "title",
      "license",
      "description",
      "version"
    ]
  },
  {
    "name": "Schema",
    "expressions": [],
    "properties": [
      "maxProperties",
      "items",
      "Schema",
      "properties",
      "name",
      "SchemaContext",
      "discriminator",
      "Schema",
      "example",
      "xml",
      "additonalProperties",
      "title",
      "API",
      "Schema",
      "required",
      "Root",
      "minProperties",
      "allOf",
      "Schema",
      "readOnly",
      "declaringContext"
    ]
  },
  {
    "name": "SchemaDeclaringContext",
    "expressions": [],
    "properties": ["Schema"]
  },
  {
    "name": "ResponseContext",
    "expressions": [],
    "properties": []
  },
  {
    "name": "JSONPointer",
    "expressions": [],
    "properties": ["ref"]
  },
  {
    "name": "SecurityScope",
    "expressions": [],
    "properties": [
      "description",
      "name",
      "SecurityContext",
      "SecuritySchema"
    ]
  },
  {
    "name": "Path",
    "expressions": [],
    "properties": [
      "post",
      "put",
      "head",
      "patch",
      "get",
      "options",
      "API",
      "delete",
      "pattern"
    ]
  },
  {
    "name": "ParamterDeclaringContext",
    "expressions": [],
    "properties": ["Parameter"]
  },
  {
    "name": "Example",
    "expressions": [],
    "properties": [
      "value",
      "Response",
      "mimeType"
    ]
  },
  {
    "name": "SecuritySchema",
    "expressions": [],
    "properties": [
      "type",
      "location",
      "name",
      "description",
      "globalName",
      "tokenUrl",
      "authorizationUrl",
      "scopes",
      "flow",
      "API"
    ]
  },
  {
    "name": "APIKeyLocation",
    "expressions": [],
    "properties": []
  },
  {
    "name": "SecurityContext",
    "expressions": [],
    "properties": ["securityRequirement"]
  },
  {
    "name": "JSONSchemaSubset",
    "expressions": [],
    "properties": [
      "minItems",
      "maxLength",
      "type",
      "pattern",
      "maximum",
      "exclusiveMaximum",
      "multipleOf",
      "description",
      "exclusiveMinimum",
      "uniqueItems",
      "default",
      "format",
      "minLength",
      "minimum",
      "maxItems",
      "enum"
    ]
  },
  {
    "name": "JSONDataType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Response",
    "expressions": [],
    "properties": [
      "Operation",
      "Root",
      "description",
      "declaringContext",
      "headers",
      "code",
      "examples",
      "API"
    ]
  },
  {
    "name": "CollectionFormat",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Operation",
    "expressions": [
      {
        "operations": {},
        "name": "oneFormDataParameterAllowed",
        "body": "self.parameters-> select(e | e.location = ParameterLocation::'_formData') -> size() <= 1",
        "type": "ConstraintImpl",
        "constructs": {},
        "properties": []
      },
      {
        "operations": {
          "<>": 1,
          "size": 1
        },
        "name": "requiredResponses",
        "body": "self.responses -> size() <> 0",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "IntegerLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["core::Operation::responses"]
      },
      {
        "operations": {
          "or": 2,
          "size": 6,
          "and": 3,
          "=": 12
        },
        "name": "xorFormAndBody",
        "body": "(parameters-> select(e | e.location =  ParameterLocation::_'body') -> size()=1 and parameters-> select(e | e.location =  ParameterLocation::_'formData') -> size()=0)\r\n\tor \r\n\t(parameters-> select(e | e.location =  ParameterLocation::_'body') -> size()=0 and parameters-> select(e | e.location =  ParameterLocation::_'formData') -> size()=1)\r\n\tor \r\n\t(parameters-> select(e | e.location =  ParameterLocation::_'body') -> size()=0 and parameters-> select(e | e.location =  ParameterLocation::_'formData') -> size()=0)\r\n\t",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 6,
          "OperationCallExpImpl": 23,
          "VariableExpImpl": 12,
          "EnumLiteralExpImpl": 6,
          "IntegerLiteralExpImpl": 6,
          "PropertyCallExpImpl": 12
        },
        "properties": [
          "core::Parameter::location",
          "core::ParameterContext::parameters"
        ]
      },
      {
        "operations": {
          "size": 2,
          "asSet": 1,
          "=": 1
        },
        "name": "hasUniqueParameters",
        "body": "self.parameters -> collect(t | Tuple{name : String = t.name,location : ParameterLocation = t.location})->asSet() -> size() = self.parameters -> size()",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 4,
          "TupleLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "core::Parameter::location",
          "core::Parameter::name",
          "core::ParameterContext::parameters"
        ]
      },
      {
        "operations": {},
        "name": "oneBodyParameterAllowed",
        "body": "self.parameters-> select(e | e.location = ParameterLocation::'_body') -> size() <= 1",
        "type": "ConstraintImpl",
        "constructs": {},
        "properties": []
      }
    ],
    "properties": [
      "deprecated",
      "Path",
      "responses",
      "consumes",
      "description",
      "summary",
      "path",
      "Path",
      "schemes",
      "produces",
      "Path",
      "Path",
      "tagReferences",
      "Path",
      "Path",
      "operationId"
    ]
  },
  {
    "name": "ExternalDocs",
    "expressions": [{
      "operations": {
        "not": 1,
        "oclIsUndefined": 1
      },
      "name": "requiredURL",
      "body": "not self.url.oclIsUndefined()",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 2,
        "PropertyCallExpImpl": 1
      },
      "properties": ["core::ExternalDocs::url"]
    }],
    "properties": [
      "url",
      "ExternalDocsContext",
      "description"
    ]
  },
  {
    "name": "License",
    "expressions": [{
      "operations": {
        "not": 1,
        "oclIsUndefined": 1
      },
      "name": "requiredName",
      "body": "not self.name.oclIsUndefined()",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 2,
        "PropertyCallExpImpl": 1
      },
      "properties": ["core::License::name"]
    }],
    "properties": [
      "name",
      "url",
      "Info"
    ]
  },
  {
    "name": "XMLElement",
    "expressions": [],
    "properties": [
      "prefix",
      "Schema",
      "namespace",
      "wrapped",
      "attribute",
      "name"
    ]
  },
  {
    "name": "Tag",
    "expressions": [],
    "properties": [
      "API",
      "name",
      "description"
    ]
  },
  {
    "name": "Parameter",
    "expressions": [
      {
        "operations": {
          "oclBadOperation": 1,
          "=": 1
        },
        "name": "requiredLocation",
        "body": "not location = ParameterLocation::unspecified",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "EnumLiteralExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["core::Parameter::location"]
      },
      {
        "operations": {
          "not": 1,
          "oclIsUndefined": 1
        },
        "name": "requiredName",
        "body": "not name.oclIsUndefined()",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["core::Parameter::name"]
      }
    ],
    "properties": [
      "location",
      "required",
      "name",
      "Root",
      "ParameterContext",
      "allowEmplyValue",
      "referenceName",
      "declaringContext"
    ]
  },
  {
    "name": "ExternalDocsContext",
    "expressions": [],
    "properties": ["externalDocs"]
  },
  {
    "name": "ParameterContext",
    "expressions": [],
    "properties": ["parameters"]
  },
  {
    "name": "ItemsDefinition",
    "expressions": [],
    "properties": ["ArrayContext"]
  },
  {
    "name": "Header",
    "expressions": [],
    "properties": [
      "Response",
      "name"
    ]
  },
  {
    "name": "OAuth2FlowType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Root",
    "expressions": [],
    "properties": [
      "paramters",
      "schemas",
      "responses",
      "api"
    ]
  },
  {
    "name": "Contact",
    "expressions": [],
    "properties": [
      "name",
      "url",
      "email",
      "Info"
    ]
  },
  {
    "name": "SecuritySchemeType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ResponseDeclaringContext",
    "expressions": [],
    "properties": ["Response"]
  }
]
