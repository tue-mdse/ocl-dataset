[
  {
    "name": "Instruction",
    "expressions": [{
      "operations": {
        "not": 1,
        "last": 1,
        "oclIsTypeOf": 1,
        "excluding": 1
      },
      "name": "returnIsLast",
      "body": "not(segmentation->excluding(segmentation->last())->exists(e | e.oclIsTypeOf(Return)))",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 3,
        "OperationCallExpImpl": 4,
        "TypeExpImpl": 1,
        "PropertyCallExpImpl": 2
      },
      "properties": ["samp::Instruction::segmentation"]
    }],
    "properties": ["segmentation"]
  },
  {
    "name": "Multiplication",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Bin",
    "expressions": [],
    "properties": []
  },
  {
    "name": "OperationUnaire",
    "expressions": [],
    "properties": ["expression"]
  },
  {
    "name": "Sequence",
    "expressions": [],
    "properties": ["Instruction"]
  },
  {
    "name": "Addition",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Division",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Soustraction",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Affectation",
    "expressions": [],
    "properties": [
      "expression",
      "identitfiant"
    ]
  },
  {
    "name": "Nombre",
    "expressions": [],
    "properties": ["nb"]
  },
  {
    "name": "Expression",
    "expressions": [],
    "properties": [
      "Affectation",
      "Return",
      "OperationBinaire",
      "OperationBinaire",
      "OperationUnaire"
    ]
  },
  {
    "name": "Identitfiant",
    "expressions": [],
    "properties": [
      "Affectation",
      "nom"
    ]
  },
  {
    "name": "Return",
    "expressions": [],
    "properties": ["expression"]
  },
  {
    "name": "OperationBinaire",
    "expressions": [],
    "properties": [
      "expression1",
      "expression2"
    ]
  }
]
