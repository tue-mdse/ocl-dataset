[
  {
    "name": "ParameterCall",
    "expressions": [],
    "properties": ["parameter"]
  },
  {
    "name": "Lower",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Div",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Left",
    "expressions": [],
    "properties": ["angle"]
  },
  {
    "name": "PenDown",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ProcDeclaration",
    "expressions": [{
      "operations": {
        "implies": 1,
        "=": 2
      },
      "name": "unique_names_for_formal_arguments",
      "body": "\n\t\targs->forAll( a1 , a2 | a1.name = a2.name implies a1 = a2)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 5,
        "OperationCallExpImpl": 3,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "logoASM::ProcDeclaration::args",
        "logoASM::Parameter::name"
      ]
    }],
    "properties": [
      "args",
      "ProcCall",
      "instructions",
      "name"
    ]
  },
  {
    "name": "ProcCall",
    "expressions": [{
      "operations": {
        "size": 2,
        "=": 1
      },
      "name": "same_number_of_formals_and_actuals",
      "body": "actualArgs->size() = declaration.args->size()",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 3,
        "VariableExpImpl": 2,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "logoASM::ProcDeclaration::args",
        "logoASM::ProcCall::declaration",
        "logoASM::ProcCall::actualArgs"
      ]
    }],
    "properties": [
      "declaration",
      "actualArgs"
    ]
  },
  {
    "name": "Equals",
    "expressions": [],
    "properties": []
  },
  {
    "name": "LogoProgram",
    "expressions": [],
    "properties": ["instructions"]
  },
  {
    "name": "Minus",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Primitive",
    "expressions": [],
    "properties": []
  },
  {
    "name": "While",
    "expressions": [],
    "properties": ["block"]
  },
  {
    "name": "Constant",
    "expressions": [],
    "properties": ["integerValue"]
  },
  {
    "name": "Repeat",
    "expressions": [],
    "properties": ["block"]
  },
  {
    "name": "Plus",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Parameter",
    "expressions": [],
    "properties": [
      "ProcDeclaration",
      "name",
      "ParameterCall"
    ]
  },
  {
    "name": "Back",
    "expressions": [],
    "properties": ["steps"]
  },
  {
    "name": "Clear",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Greater",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Expression",
    "expressions": [],
    "properties": [
      "ControlStructure",
      "Left",
      "Back",
      "BinaryExp",
      "ProcCall",
      "Forward",
      "Right",
      "BinaryExp"
    ]
  },
  {
    "name": "BinaryExp",
    "expressions": [],
    "properties": [
      "rhs",
      "lhs"
    ]
  },
  {
    "name": "Forward",
    "expressions": [],
    "properties": ["steps"]
  },
  {
    "name": "Instruction",
    "expressions": [],
    "properties": [
      "ProcDeclaration",
      "LogoProgram",
      "Block"
    ]
  },
  {
    "name": "ControlStructure",
    "expressions": [],
    "properties": ["condition"]
  },
  {
    "name": "Block",
    "expressions": [],
    "properties": [
      "If",
      "instructions",
      "Repeat",
      "While",
      "If"
    ]
  },
  {
    "name": "If",
    "expressions": [],
    "properties": [
      "elsePart",
      "thenPart"
    ]
  },
  {
    "name": "Right",
    "expressions": [],
    "properties": ["angle"]
  },
  {
    "name": "PenUp",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Mult",
    "expressions": [],
    "properties": []
  }
]
