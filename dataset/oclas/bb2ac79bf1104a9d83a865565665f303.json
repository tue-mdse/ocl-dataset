[
  {
    "name": "ForeignKey",
    "expressions": [{
      "operations": {"=": 1},
      "name": "sameTypeAtLink",
      "body": "self.column.type = self.reference.primaryKey.type",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 2,
        "PropertyCallExpImpl": 5
      },
      "properties": [
        "database::ForeignKey::column",
        "database::Column::type",
        "database::Table::primaryKey",
        "database::ForeignKey::reference"
      ]
    }],
    "properties": [
      "column",
      "Table",
      "reference"
    ]
  },
  {
    "name": "RailsData",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Schema",
    "expressions": [{
      "operations": {"toUpperCase": 1},
      "name": "tableNameUnique",
      "body": "self.tables\n\t\t\t->isUnique(name.toUpperCase())",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 2,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "database::Schema::tables",
        "database::DataBaseElement::name"
      ]
    }],
    "properties": ["tables"]
  },
  {
    "name": "Column",
    "expressions": [],
    "properties": [
      "Table",
      "type",
      "ForeignKey",
      "Table"
    ]
  },
  {
    "name": "DataBaseElement",
    "expressions": [
      {
        "operations": {
          "not": 1,
          "isEmpty": 1,
          "oclAsSet": 1
        },
        "name": "nameEmpty",
        "body": "not (self.name\n\t\t\t->isEmpty())",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 1,
          "PropertyCallExpImpl": 1
        },
        "properties": ["database::DataBaseElement::name"]
      },
      {
        "operations": {
          "excludes": 1,
          "size": 1,
          "substring": 1
        },
        "name": "illegalName",
        "body": "Sequence{1 .. self.name.size()}\n\t\t\t->collect(i | self.name.substring(i, i))\n\t\t\t->excludes(' ')",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 3,
          "VariableExpImpl": 4,
          "IntegerLiteralExpImpl": 1,
          "StringLiteralExpImpl": 1,
          "CollectionLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": ["database::DataBaseElement::name"]
      }
    ],
    "properties": ["name"]
  },
  {
    "name": "Table",
    "expressions": [
      {
        "operations": {
          "not": 1,
          "and": 1,
          "notEmpty": 1,
          "=": 1
        },
        "name": "cycleForeignKey",
        "body": "not(self.foreignKeys\n\t\t\t->notEmpty() and self.foreignKeys\n\t\t\t->exists(reference.name = self.name))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 4,
          "OperationCallExpImpl": 4,
          "PropertyCallExpImpl": 5
        },
        "properties": [
          "database::DataBaseElement::name",
          "database::Table::foreignKeys",
          "database::ForeignKey::reference"
        ]
      },
      {
        "operations": {"toUpperCase": 1},
        "name": "columnNameUnique",
        "body": "self.columns\n\t\t\t->isUnique(name.toUpperCase())",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 2,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "database::Table::columns",
          "database::DataBaseElement::name"
        ]
      },
      {
        "operations": {
          "not": 1,
          "toUpperCase": 2,
          "=": 1
        },
        "name": "noIdName",
        "body": "not (self.columns\n\t\t\t->exists(name.toUpperCase() = 'id'.toUpperCase()))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 4,
          "VariableExpImpl": 2,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "database::Table::columns",
          "database::DataBaseElement::name"
        ]
      }
    ],
    "properties": [
      "Schema",
      "columns",
      "primaryKey",
      "foreignKeys",
      "ForeignKey"
    ]
  }
]
