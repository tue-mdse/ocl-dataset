[
  {
    "name": "EModelElement",
    "expressions": [{
      "operations": {},
      "name": "asError",
      "body": "if verdict then true else null endif\n\n",
      "type": "OperationImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "NullLiteralExpImpl": 1,
        "IfExpImpl": 1,
        "BooleanLiteralExpImpl": 1
      },
      "properties": []
    }],
    "properties": []
  },
  {
    "name": "EReference",
    "expressions": [
      {
        "operations": {
          "not": 1,
          "implies": 1
        },
        "name": "DerivationDoesNotResolveProxies",
        "body": "hasDerivation implies not resolveProxies\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ecore::EStructuralFeature::hasDerivation",
          "ecore::EReference::resolveProxies"
        ]
      },
      {
        "operations": {
          "not": 1,
          "implies": 1,
          "asError": 1
        },
        "name": "DerivationIsNotComposed",
        "body": "asError(hasDerivation implies not containment)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ecore::EStructuralFeature::hasDerivation",
          "ecore::EReference::containment"
        ]
      },
      {
        "operations": {
          "<>": 1,
          "and": 1,
          "implies": 1
        },
        "name": "DerivationWithOppositeHasOppositeDerivation",
        "body": "hasDerivation and eOpposite <> null implies eOpposite.hasDerivation\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 3,
          "NullLiteralExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "ecore::EStructuralFeature::hasDerivation",
          "ecore::EReference::eOpposite"
        ]
      }
    ],
    "properties": []
  },
  {
    "name": "EStructuralFeature",
    "expressions": [
      {
        "operations": {"implies": 1},
        "name": "DerivationIsTransient",
        "body": "hasDerivation implies transient\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 1,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ecore::EStructuralFeature::transient",
          "ecore::EStructuralFeature::hasDerivation"
        ]
      },
      {
        "operations": {
          "implies": 1,
          "asError": 1
        },
        "name": "DerivationIsVolatile",
        "body": "asError(hasDerivation implies volatile)\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 3,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ecore::EStructuralFeature::hasDerivation",
          "ecore::EStructuralFeature::volatile"
        ]
      },
      {
        "operations": {
          "oclIsUndefined": 1,
          "implies": 1
        },
        "name": "DerivationIsUninitialized",
        "body": "hasDerivation implies defaultValue.oclIsUndefined()\n\n",
        "type": "ConstraintImpl",
        "constructs": {
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ecore::EStructuralFeature::hasDerivation",
          "ecore::EStructuralFeature::defaultValue"
        ]
      },
      {
        "operations": {
          "notEmpty": 1,
          "startsWith": 1
        },
        "name": "hasDerivation",
        "body": "eAnnotations->select(source.startsWith('http://www.eclipse.org/emf/2002/Ecore/OCL'))->notEmpty()\n\n",
        "type": "PropertyImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 2,
          "VariableExpImpl": 2,
          "StringLiteralExpImpl": 1,
          "PropertyCallExpImpl": 2
        },
        "properties": [
          "ecore::EAnnotation::source",
          "ecore::EModelElement::eAnnotations"
        ]
      }
    ],
    "properties": ["hasDerivation"]
  }
]
