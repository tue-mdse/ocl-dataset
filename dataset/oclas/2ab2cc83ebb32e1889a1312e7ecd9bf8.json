[
  {
    "name": "BooleanBinding",
    "expressions": [{
      "operations": {"=": 1},
      "name": "BooleanBindingAttributeMustBeOfTypeBoolean",
      "body": "self.attribute.eType.name = 'EBoolean'",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "StringLiteralExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "ecore::ETypedElement::eType",
        "app::domain::PrimitiveBinding::attribute",
        "ecore::ENamedElement::name"
      ]
    }],
    "properties": ["checkBox"]
  },
  {
    "name": "MenuBar",
    "expressions": [{
      "operations": {
        "or": 4,
        "oclIsTypeOf": 5
      },
      "name": "onlyLabelsButtonsAndCheckBoxesAllowed",
      "body": "self.menuBarElements->forAll(menubarItem : DisplayElement | menubarItem.oclIsTypeOf(Button) or menubarItem.oclIsTypeOf(ImageButton) or menubarItem.oclIsTypeOf(Label) or menubarItem.oclIsTypeOf(CheckBox) or menubarItem.oclIsTypeOf(Image))",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "OperationCallExpImpl": 9,
        "VariableExpImpl": 6,
        "TypeExpImpl": 5,
        "PropertyCallExpImpl": 1
      },
      "properties": ["app::ui::MenuBar::menuBarElements"]
    }],
    "properties": [
      "screen",
      "menuBarElements"
    ]
  },
  {
    "name": "ComplexBinding",
    "expressions": [
      {
        "operations": {
          "or": 1,
          "oclIsKindOf": 2,
          "and": 2,
          "includes": 2,
          "oclAsType": 2
        },
        "name": "ComplexBinding_UiElement_MustInclude_BoundUiElementsOf_InnerBindings",
        "body": "self.innerBindings->forAll(binding : PrimitiveBinding | binding.oclIsKindOf(StringBinding) and self.uiElement.containedDisplayElements->includes(binding.oclAsType(StringBinding).uiElement) or binding.oclIsKindOf(BooleanBinding) and self.uiElement.containedDisplayElements->includes(binding.oclAsType(BooleanBinding).checkBox))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "OperationCallExpImpl": 9,
          "VariableExpImpl": 7,
          "TypeExpImpl": 4,
          "PropertyCallExpImpl": 7
        },
        "properties": [
          "app::domain::ComplexBinding::uiElement",
          "app::ui::CompositeDisplayElementType::containedDisplayElements",
          "app::domain::ComplexBinding::innerBindings",
          "app::domain::BooleanBinding::checkBox",
          "app::domain::StringBinding::uiElement"
        ]
      },
      {
        "operations": {"includes": 1},
        "name": "ComplexBinding_domainEntityAttributes_MustInclude_InnerBindingAttributes",
        "body": "self.innerBindings->forAll(binding : PrimitiveBinding | self.domainEntity.eAttributes->includes(binding.attribute))",
        "type": "ConstraintImpl",
        "constructs": {
          "IteratorExpImpl": 1,
          "VariableExpImpl": 3,
          "OperationCallExpImpl": 1,
          "PropertyCallExpImpl": 4
        },
        "properties": [
          "ecore::EClass::eAttributes",
          "app::domain::ComplexBinding::domainEntity",
          "app::domain::PrimitiveBinding::attribute",
          "app::domain::ComplexBinding::innerBindings"
        ]
      }
    ],
    "properties": [
      "domainEntity",
      "uiElement",
      "innerBindings"
    ]
  },
  {
    "name": "InputContext",
    "expressions": [],
    "properties": [
      "contextType",
      "Flow"
    ]
  },
  {
    "name": "FragmentNavigation",
    "expressions": [{
      "operations": {"=": 1},
      "name": "navigationWithinSameScreen",
      "body": "to.screen = from.screen",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 2,
        "OperationCallExpImpl": 1,
        "PropertyCallExpImpl": 4
      },
      "properties": [
        "app::ui::FragmentNavigation::from",
        "app::ui::FragmentNavigation::to",
        "app::ui::DisplayElement::screen"
      ]
    }],
    "properties": [
      "from",
      "to",
      "Screen",
      "navigationType"
    ]
  },
  {
    "name": "CheckBox",
    "expressions": [],
    "properties": ["BooleanBinding"]
  },
  {
    "name": "EReference",
    "expressions": [],
    "properties": [
      "ListBinding",
      "SelectionBinding"
    ]
  },
  {
    "name": "CompositeDisplayElement",
    "expressions": [],
    "properties": [
      "displayType",
      "type",
      "Screen",
      "FragmentNavigation",
      "FragmentNavigation"
    ]
  },
  {
    "name": "ListClickEvent",
    "expressions": [],
    "properties": ["list"]
  },
  {
    "name": "DisplayType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "CompositeDisplayElementType",
    "expressions": [],
    "properties": [
      "CompositeDisplayElement",
      "CompositeDisplayElementTypeRepository",
      "DynamicList",
      "containedDisplayElements",
      "ComplexBinding"
    ]
  },
  {
    "name": "DynamicList",
    "expressions": [{
      "operations": {
        "<=": 1,
        "<>": 1,
        "or": 1,
        "size": 1,
        "and": 1,
        "=": 1
      },
      "name": "List_Can_Only_Have_One_Event_If_In_Screen",
      "body": "self.screen <> null and listClickEvents->size() <= 1 or self.screen = null",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 3,
        "OperationCallExpImpl": 6,
        "NullLiteralExpImpl": 2,
        "IntegerLiteralExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "app::ui::DisplayElement::screen",
        "app::ui::DynamicList::listClickEvents"
      ]
    }],
    "properties": [
      "ListBinding",
      "displayedElements",
      "listClickEvents"
    ]
  },
  {
    "name": "TextContaining",
    "expressions": [],
    "properties": [
      "text",
      "StringBinding"
    ]
  },
  {
    "name": "Screen",
    "expressions": [{
      "operations": {
        "or": 1,
        "includes": 1,
        "=": 1
      },
      "name": "onlyAlreadContainedStartFragmentAllowed",
      "body": "startFragment = null or displayElements->includes(startFragment)",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 3,
        "VariableExpImpl": 3,
        "NullLiteralExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "app::ui::Screen::startFragment",
        "app::ui::Screen::displayElements"
      ]
    }],
    "properties": [
      "Flow",
      "Flow",
      "startFragment",
      "storyBoard",
      "StoryBoard",
      "menuBar",
      "displayElements",
      "fragmentNavigations"
    ]
  },
  {
    "name": "Control",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Flow",
    "expressions": [],
    "properties": [
      "returnsResult",
      "storyBoard",
      "to",
      "from",
      "events",
      "flowContext"
    ]
  },
  {
    "name": "EPackage",
    "expressions": [],
    "properties": ["MobileApp"]
  },
  {
    "name": "Image",
    "expressions": [],
    "properties": [
      "height",
      "width"
    ]
  },
  {
    "name": "GeneratorConfig",
    "expressions": [{
      "operations": {"matches": 1},
      "name": "namespaceMustHasAtLeastTwoSegments",
      "body": "namespace.matches('[a-z0-9]+([.][a-z0-9]+)+')",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "StringLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["app::generatorconfig::GeneratorConfig::namespace"]
    }],
    "properties": [
      "GeneratorConfigContainer",
      "projectPath",
      "projectName",
      "namespace",
      "targetPlatform"
    ]
  },
  {
    "name": "CompositeDisplayElementTypeRepository",
    "expressions": [],
    "properties": [
      "compositeDisplayElementTypes",
      "MobileApp"
    ]
  },
  {
    "name": "GeneratorConfigContainer",
    "expressions": [{
      "operations": {},
      "name": "OnlyOneGeneratorConfigPerPlatform",
      "body": "generatorConfigs->isUnique(targetPlatform)",
      "type": "ConstraintImpl",
      "constructs": {
        "IteratorExpImpl": 1,
        "VariableExpImpl": 2,
        "PropertyCallExpImpl": 2
      },
      "properties": [
        "app::generatorconfig::GeneratorConfigContainer::generatorConfigs",
        "app::generatorconfig::GeneratorConfig::targetPlatform"
      ]
    }],
    "properties": [
      "generatorConfigs",
      "MobileApp"
    ]
  },
  {
    "name": "EClass",
    "expressions": [],
    "properties": [
      "ComplexBinding",
      "InputContext"
    ]
  },
  {
    "name": "Enableable",
    "expressions": [],
    "properties": []
  },
  {
    "name": "ImageButton",
    "expressions": [],
    "properties": [
      "width",
      "height"
    ]
  },
  {
    "name": "Event",
    "expressions": [],
    "properties": [
      "triggers",
      "EventContainer"
    ]
  },
  {
    "name": "PlatformType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "StringBinding",
    "expressions": [{
      "operations": {"=": 1},
      "name": "StringBindingAttributeMustBeOfTypeString",
      "body": "self.attribute.eType.name = 'EString'",
      "type": "ConstraintImpl",
      "constructs": {
        "OperationCallExpImpl": 1,
        "VariableExpImpl": 1,
        "StringLiteralExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "ecore::ETypedElement::eType",
        "app::domain::PrimitiveBinding::attribute",
        "ecore::ENamedElement::name"
      ]
    }],
    "properties": ["uiElement"]
  },
  {
    "name": "DomainBinding",
    "expressions": [],
    "properties": [
      "BindingRepository",
      "updateStrategy",
      "ListBinding"
    ]
  },
  {
    "name": "PrimitiveBinding",
    "expressions": [],
    "properties": [
      "ComplexBinding",
      "attribute"
    ]
  },
  {
    "name": "Datepicker",
    "expressions": [],
    "properties": [
      "minDate",
      "maxDate"
    ]
  },
  {
    "name": "MobileApp",
    "expressions": [],
    "properties": [
      "bindingRepository",
      "domainPackage",
      "eventContainer",
      "storyBoard",
      "generatorConfigContainer",
      "appDatabaseVersion",
      "appVersion",
      "compositeDisplayElementTypeRepository"
    ]
  },
  {
    "name": "Picker",
    "expressions": [],
    "properties": []
  },
  {
    "name": "Entity",
    "expressions": [{
      "operations": {"matches": 1},
      "name": "NamingConvention",
      "body": "name.matches('[A-Z][a-z0-9_]*([A-Z][a-z0-9_]*)*')",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 1,
        "OperationCallExpImpl": 1,
        "StringLiteralExpImpl": 1,
        "PropertyCallExpImpl": 1
      },
      "properties": ["app::Entity::name"]
    }],
    "properties": ["name"]
  },
  {
    "name": "StoryBoard",
    "expressions": [],
    "properties": [
      "screens",
      "flows",
      "startScreen",
      "MobileApp",
      "resolutionX",
      "resolutionY"
    ]
  },
  {
    "name": "LocationPicker",
    "expressions": [],
    "properties": []
  },
  {
    "name": "BindingRepository",
    "expressions": [],
    "properties": [
      "MobileApp",
      "bindings"
    ]
  },
  {
    "name": "SelectionBinding",
    "expressions": [],
    "properties": ["domainReference"]
  },
  {
    "name": "EAttribute",
    "expressions": [],
    "properties": ["PrimitiveBinding"]
  },
  {
    "name": "Label",
    "expressions": [],
    "properties": []
  },
  {
    "name": "InputType",
    "expressions": [],
    "properties": []
  },
  {
    "name": "DisplayElement",
    "expressions": [],
    "properties": [
      "compositeType",
      "MenuBar",
      "screen"
    ]
  },
  {
    "name": "ListBinding",
    "expressions": [],
    "properties": [
      "listElement",
      "domainReference",
      "innerBindings"
    ]
  },
  {
    "name": "FeaturedElement",
    "expressions": [],
    "properties": []
  },
  {
    "name": "UpdateStrategy",
    "expressions": [],
    "properties": []
  },
  {
    "name": "EventContainer",
    "expressions": [],
    "properties": [
      "events",
      "MobileApp"
    ]
  },
  {
    "name": "Input",
    "expressions": [],
    "properties": ["inputType"]
  },
  {
    "name": "ButtonClickEvent",
    "expressions": [],
    "properties": ["button"]
  },
  {
    "name": "Button",
    "expressions": [{
      "operations": {
        "<=": 1,
        "<>": 1,
        "or": 1,
        "size": 1,
        "and": 1,
        "=": 1
      },
      "name": "Button_Can_Only_Have_One_Event_If_In_Screen",
      "body": "self.screen <> null and buttonClickEvents->size() <= 1 or self.screen = null",
      "type": "ConstraintImpl",
      "constructs": {
        "VariableExpImpl": 3,
        "OperationCallExpImpl": 6,
        "NullLiteralExpImpl": 2,
        "IntegerLiteralExpImpl": 1,
        "PropertyCallExpImpl": 3
      },
      "properties": [
        "app::ui::DisplayElement::screen",
        "app::ui::Button::buttonClickEvents"
      ]
    }],
    "properties": [
      "buttonClickEvents",
      "caption"
    ]
  }
]
