<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="ram" nsURI="http://cs.mcgill.ca/sel/ram/2.0" nsPrefix="ram">
  <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
    <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
    <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
    <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="Aspect" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="structuralView" lowerBound="1"
        eType="#//StructuralView" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="mandatoryAspectParameters"
        ordered="false" upperBound="-1" eType="#//MappableElement" changeable="false"
        volatile="true" transient="true" derived="true">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="derivation" value="let mappableElements : Set(MappableElement) = Set{} in mappableElements->union(Class.allInstances()->select(partial = true))->union(Operation.allInstances()->select(partial = true))"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="messageViews" ordered="false"
        upperBound="-1" eType="#//AbstractMessageView" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="instantiations" upperBound="-1"
        eType="#//Instantiation" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="layout" eType="#//Layout"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MappableElement" abstract="true" eSuperTypes="#//NamedElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="StructuralView">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="uniqueTypes noTwoClassesWithSameName"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="uniqueTypes" value="self.types->isUnique(name)"/>
      <details key="uniqueTypes$message" value="'There may be only one type of the same type'"/>
      <details key="noTwoClassesWithSameName" value="self.classes->isUnique(name)"/>
      <details key="noTwoClassesWithSameName$message" value="'Name of a class has to be unique'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="classes" upperBound="-1"
        eType="#//Classifier" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="associations" upperBound="-1"
        eType="#//Association" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="types" ordered="false"
        upperBound="-1" eType="#//Type" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Class" eSuperTypes="#//Classifier">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="notSelfSuperType"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="notSelfSuperType" value="not self.superTypes->includes(self)"/>
      <details key="notSelfSuperType$message" value="'A class may not be it\'s own supertype'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="associationEnds" upperBound="-1"
        eType="#//AssociationEnd" containment="true" eOpposite="#//AssociationEnd/myClass"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="attributes" upperBound="-1"
        eType="#//Attribute" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="partial" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="false"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="abstract" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="superTypes" upperBound="-1"
        eType="#//Classifier"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AssociationEnd" eSuperTypes="#//Property">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="uniqueName"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="uniqueName" value="self.myClass.associationEnds->select(associationEnd : AssociationEnd | associationEnd.name &lt;> null and associationEnd.name &lt;> '')->isUnique(name)"/>
      <details key="uniqueName$message" value="'AssociationEnds of a class must be unique'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="navigable" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="assoc" lowerBound="1" eType="#//Association"
        eOpposite="#//Association/ends"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="myClass" lowerBound="1"
        eType="#//Class" eOpposite="#//Class/associationEnds"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Association" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="ends" lowerBound="2" upperBound="2"
        eType="#//AssociationEnd" eOpposite="#//AssociationEnd/assoc"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NamedElement" abstract="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="validName"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="validName" value="if self.oclIsTypeOf(AssociationEnd) and self.oclAsType(AssociationEnd).navigable = false then true else self.name &lt;> '' endif"/>
      <details key="validName$message" value="'Name of RAM elements may not be empty'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Instantiation">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="aspectCannotMapSelf mandatoryAspectParametersMapped"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="aspectCannotMapSelf" value="not (self.externalAspect = self.Aspect)"/>
      <details key="aspectCannotMapSelf$message" value="'Aspect may not depend on itself'"/>
      <details key="mandatoryAspectParametersMapped" value="if self.type = InstantiationType::Depends then self.externalAspect.mandatoryAspectParameters->forAll(element : MappableElement | self.mappings->exists(sourceModelElement = element)) else true endif"/>
      <details key="mandatoryAspectParametersMapped$message" value="'Partial elements from lower-level aspects have to be mapped'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="mappings" upperBound="-1"
        eType="#//Mapping" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="externalAspect" lowerBound="1"
        eType="#//Aspect"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" lowerBound="1" eType="#//InstantiationType"
        defaultValueLiteral=""/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Mapping">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="validSourceModelElement sameTypesMapped validMapping"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="validSourceModelElement" value="self.sourceModelElement.oclIsTypeOf(Class) or self.sourceModelElement.oclIsTypeOf(Operation)"/>
      <details key="validSourceModelElement$message" value="'The source model element may only be of type Class or Operation'"/>
      <details key="sameTypesMapped" value="self.maps->forAll(element : MappableElement | if element.oclIsKindOf(Classifier) then self.sourceModelElement.oclIsKindOf(Classifier) else element.oclIsTypeOf(self.sourceModelElement.oclType()) endif)"/>
      <details key="sameTypesMapped$message" value="'Mapping must be between same types of elements'"/>
      <details key="validMapping" value="let clazz : Class = if sourceModelElement.oclIsTypeOf(Operation) then sourceModelElement.oclAsType(Operation).Classifier else sourceModelElement endif in self.Instantiation.externalAspect.structuralView.classes->includes(clazz) and self.maps->forAll(element : MappableElement | let clazz : Class = if element.oclIsTypeOf(Operation) then element.oclAsType(Operation).Classifier else element endif in if clazz.oclIsKindOf(PrimitiveType) then self.Instantiation.Aspect.structuralView.types->includes(clazz) else self.Instantiation.Aspect.structuralView.classes->includes(clazz) endif)"/>
      <details key="validMapping$message" value="'Source must be from depending aspect and targets must be from current aspect'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="maps" lowerBound="1" upperBound="-1"
        eType="#//MappableElement"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sourceModelElement" lowerBound="1"
        eType="#//MappableElement"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Operation" eSuperTypes="#//NamedElement #//MappableElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="messageViewDefined"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="messageViewDefined" value="if visibility = Visibility::public and self.Classifier.oclIsTypeOf(Class) then self.Classifier.StructuralView.Aspect.messageViews->select(messageView : AbstractMessageView | messageView.oclIsTypeOf(MessageView))->one(messageView : AbstractMessageView | messageView.oclAsType(MessageView).specification = self) else true endif"/>
      <details key="messageViewDefined$message" value="'MessageView missing for public operation'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="abstract" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="false"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="visibility" eType="#//Visibility"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="returnType" eType="#//Type"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" upperBound="-1"
        eType="#//Parameter" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="static" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="false"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="partial" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="false"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Attribute" eSuperTypes="#//TemporaryProperty #//StructuralFeature">
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="#//PrimitiveType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Type" abstract="true" eSuperTypes="#//NamedElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Parameter" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="notVoid"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="notVoid" value="not self.type.oclIsTypeOf(RVoid)"/>
      <details key="notVoid$message" value="'The type of the parameter may not be void'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="#//Type"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="Visibility">
    <eLiterals name="public"/>
    <eLiterals name="private" value="1"/>
    <eLiterals name="protected" value="2"/>
    <eLiterals name="package" value="3"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PrimitiveType" abstract="true" eSuperTypes="#//Type #//ImplementationClass"/>
  <eClassifiers xsi:type="ecore:EClass" name="ObjectType" abstract="true" eSuperTypes="#//Type #//MappableElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="RVoid" eSuperTypes="#//Type">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'void'"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RBoolean" eSuperTypes="#//PrimitiveType">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'boolean'"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getInstanceClassName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'java.lang.Boolean'"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="ReferenceType">
    <eLiterals name="Composition"/>
    <eLiterals name="Aggregation" value="1"/>
    <eLiterals name="Regular" value="2"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RInt" eSuperTypes="#//PrimitiveType">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'int'"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getInstanceClassName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'java.lang.Integer'"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RChar" eSuperTypes="#//PrimitiveType">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'char'"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getInstanceClassName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'java.lang.Character'"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RString" eSuperTypes="#//PrimitiveType">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'String'"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getInstanceClassName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'java.lang.String'"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RAny" eSuperTypes="#//Type">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="'*'"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="REnum" eSuperTypes="#//PrimitiveType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="literals" lowerBound="1"
        upperBound="-1" eType="#//REnumLiteral" containment="true" eOpposite="#//REnumLiteral/enum"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="REnumLiteral" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="enum" lowerBound="1" eType="#//REnum"
        eOpposite="#//REnum/literals"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AbstractMessageView" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EReference" name="affectedBy" ordered="false"
        upperBound="-1" eType="#//AspectMessageView"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MessageView" eSuperTypes="#//AbstractMessageView">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="specificationDefined"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="specificationDefined" value="if not self.specifies.partial then not self.specification.oclIsUndefined() else true endif"/>
      <details key="specificationDefined$message" value="'A MessageView for a non-partial operation must have a specification'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="specifies" ordered="false"
        lowerBound="1" eType="#//Operation"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="specification" ordered="false"
        eType="#//Interaction" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MessageViewReference" eSuperTypes="#//AbstractMessageView">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="isAffectedBy"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="isAffectedBy" value="self.affectedBy->size() > 0"/>
      <details key="isAffectedBy$message" value="'The MessageViewReference must at least have one affectedBy'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="references" ordered="false"
        lowerBound="1" eType="#//MessageView"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Interaction" eSuperTypes="#//FragmentContainer">
    <eStructuralFeatures xsi:type="ecore:EReference" name="lifelines" ordered="false"
        lowerBound="2" upperBound="-1" eType="#//Lifeline" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="messages" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//Message" containment="true" eOpposite="#//Message/interaction"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AspectMessageView" eSuperTypes="#//NamedElement #//AbstractMessageView">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="notAffectedBySelf"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="notAffectedBySelf" value="not self.affectedBy->includes(self)"/>
      <details key="notAffectedBySelf$message" value="'Message View may not be affected by itself'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="pointcut" ordered="false"
        lowerBound="1" eType="#//Interaction" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="advice" ordered="false"
        lowerBound="1" eType="#//Interaction" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Lifeline" eSuperTypes="#//NamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="noNameForMetaClass"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="noNameForMetaClass" value="if metaClass then self.name = '' else true endif"/>
      <details key="noNameForMetaClass$message" value="'A Lifeline representing a MetaClass may not have a name'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="metaClass" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="represents" ordered="false"
        lowerBound="1" eType="#//Classifier"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="localProperties" ordered="false"
        upperBound="-1" eType="#//TemporaryProperty" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="coveredBy" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//InteractionFragment" eOpposite="#//InteractionFragment/covered"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Message">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="validOperationCall assignToAllowed argumentsSpecified validSignature validSelfMessage returnsSpecified validReturns noCrossingMessages validAssignTo boundariesNotCrossed"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="validOperationCall" value="if self.receiveEvent.oclAsType(InteractionFragment).covered->asOrderedSet()->at(1).metaClass then self.signature.static else true endif"/>
      <details key="validOperationCall$message" value="'Non-static calls may not be performed on meta-classes'"/>
      <details key="assignToAllowed" value="if self.signature.returnType.oclIsTypeOf(RVoid) then self.assignTo = null else true endif"/>
      <details key="assignToAllowed$message" value="'assignTo may not be specified for operations whose return type is void'"/>
      <details key="argumentsSpecified" value="self.signature.parameters->size() = self.arguments->size() and self.signature.parameters->forAll(parameter : Parameter | self.arguments->one(argument : ParameterValueMapping | argument.parameter = parameter))"/>
      <details key="argumentsSpecified$message" value="'All arguments of the operation must be specified'"/>
      <details key="validSignature" value="self.receiveEvent.oclAsType(InteractionFragment).covered->asOrderedSet()->at(1).represents.operations->includes(self.signature)"/>
      <details key="validSignature$message" value="'Message signature must be an operation of the classifier that is represented by the lifeline of the receive event'"/>
      <details key="validSelfMessage" value="if self.sendEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) = self.receiveEvent.oclAsType(MessageOccurrenceSpecification).covered->asOrderedSet()->at(1) then self.interaction.fragments->indexOf(self.sendEvent) &lt; self.interaction.fragments->indexOf(self.receiveEvent) else true endif"/>
      <details key="validSelfMessage$message" value="'receiveEvent of a self message may not come before the sendEvent'"/>
      <details key="returnsSpecified" value="if self.messageSort = MessageSort::reply then if not self.signature.returnType.oclIsTypeOf(RVoid) then not self.returns.oclIsUndefined() else self.returns.oclIsUndefined() endif else true endif"/>
      <details key="returnsSpecified$message" value="'Reply message must have returns specified if return type is not void'"/>
      <details key="validReturns" value="if not self.returns.oclIsUndefined() then self.messageSort = MessageSort::reply else true endif"/>
      <details key="validReturns$message" value="'Returns may only be specified if message sort is reply message'"/>
      <details key="noCrossingMessages" value="let indexDifference : Integer = self.interaction.fragments->indexOf(self.receiveEvent) - self.interaction.fragments->indexOf(self.sendEvent) in indexDifference = 1 or indexDifference = - 1"/>
      <details key="noCrossingMessages$message" value="'Messages may not cross each other, MessageEnds of one message must come one after the other'"/>
      <details key="validAssignTo" value="if self.assignTo &lt;> null then let type : Type = if self.assignTo.oclIsTypeOf(Attribute) then self.assignTo.oclAsType(Attribute).type else if self.assignTo.oclIsTypeOf(Reference) then self.assignTo.oclAsType(Reference).type else self.assignTo.oclAsType(AssociationEnd).assoc.ends->select(end : AssociationEnd | end &lt;> self)->at(1).myClass endif endif in type.oclIsKindOf(self.signature.returnType.oclType()) else true endif"/>
      <details key="validAssignTo$message" value="'Return type of signature operation must match the type of assignTo'"/>
      <details key="boundariesNotCrossed" value="let send : MessageOccurrenceSpecification = self.sendEvent in let receive : MessageOccurrenceSpecification = self.receiveEvent in if send.container.oclIsTypeOf(InteractionOperand) and receive.container.oclIsTypeOf(InteractionOperand) then send.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(send.covered->asOrderedSet()->at(1)) and receive.container.oclAsType(InteractionOperand).CombinedFragment.covered->includes(receive.covered->asOrderedSet()->at(1)) else true endif"/>
      <details key="boundariesNotCrossed$message" value="'Messages may not cross boundaries of CombinedFragments or their operands'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="sendEvent" ordered="false"
        lowerBound="1" eType="#//MessageEnd"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="receiveEvent" ordered="false"
        lowerBound="1" eType="#//MessageEnd"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="signature" ordered="false"
        lowerBound="1" eType="#//Operation"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="assignTo" ordered="false"
        eType="#//StructuralFeature"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="messageSort" ordered="false"
        lowerBound="1" eType="#//MessageSort"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="arguments" ordered="false"
        upperBound="-1" eType="#//ParameterValueMapping" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="interaction" ordered="false"
        lowerBound="1" eType="#//Interaction" eOpposite="#//Interaction/messages"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="returns" eType="#//ValueSpecification"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="MessageSort">
    <eLiterals name="synchCall"/>
    <eLiterals name="createMessage" value="1"/>
    <eLiterals name="deleteMessage" value="2"/>
    <eLiterals name="reply" value="3"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MessageEnd" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EReference" name="message" ordered="false"
        lowerBound="1" eType="#//Message"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MessageOccurrenceSpecification" eSuperTypes="#//MessageEnd #//OccurrenceSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="createMessageIsFirst"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="createMessageIsFirst" value="if self.message.messageSort = MessageSort::createMessage then self.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if self.container.fragments->includes(fragment) then self.container.fragments->indexOf(fragment) >= self.container.fragments->indexOf(self) else true endif) else true endif"/>
      <details key="createMessageIsFirst$message" value="'The create message occurrence may not come after any other occurrence on this lifeline'"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OccurrenceSpecification" eSuperTypes="#//InteractionFragment"/>
  <eClassifiers xsi:type="ecore:EClass" name="DestructionOccurrenceSpecification"
      eSuperTypes="#//MessageOccurrenceSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="destructionIsLast"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="destructionIsLast" value="self.covered->asOrderedSet()->at(1).coveredBy->forAll(fragment : InteractionFragment | if self.container.fragments->includes(fragment) then self.container.fragments->indexOf(fragment) &lt;= self.container.fragments->indexOf(self) else true endif)"/>
      <details key="destructionIsLast$message" value="'The destruction occurrence may not come before any other occurrence on this lifeline'"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InteractionFragment" abstract="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="validCoveredMultiplicity"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="validCoveredMultiplicity" value="if not self.oclIsTypeOf(CombinedFragment) and covered->notEmpty() then covered->size() = 1 else true endif"/>
      <details key="validCoveredMultiplicity$message" value="'InteractionFragment may only have one Lifeline it covers (except CombinedFragment)'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="covered" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//Lifeline" eOpposite="#//Lifeline/coveredBy"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="container" ordered="false"
        lowerBound="1" eType="#//FragmentContainer" eOpposite="#//FragmentContainer/fragments"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="InteractionOperatorKind">
    <eLiterals name="alt"/>
    <eLiterals name="opt" value="1"/>
    <eLiterals name="loop" value="2"/>
    <eLiterals name="disruptable" value="3"/>
    <eLiterals name="critical" value="4"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CombinedFragment" eSuperTypes="#//InteractionFragment">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="validOperands"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="validOperands" value="if self.interactionOperator = InteractionOperatorKind::opt or self.interactionOperator = InteractionOperatorKind::loop or self.interactionOperator = InteractionOperatorKind::critical then self.operands->size() = 1 else true endif"/>
      <details key="validOperands$message" value="'opt and loop fragments may only have one operand'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="interactionOperator" ordered="false"
        lowerBound="1" eType="#//InteractionOperatorKind"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="operands" lowerBound="1"
        upperBound="-1" eType="#//InteractionOperand" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OriginalBehaviorExecution" eSuperTypes="#//InteractionFragment"/>
  <eClassifiers xsi:type="ecore:EClass" name="CodeExecution" eSuperTypes="#//InteractionFragment">
    <eStructuralFeatures xsi:type="ecore:EReference" name="specification" ordered="false"
        lowerBound="1" eType="#//ValueSpecification" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InteractionOperand" eSuperTypes="#//FragmentContainer">
    <eStructuralFeatures xsi:type="ecore:EReference" name="interactionConstraint"
        ordered="false" eType="#//ValueSpecification" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ValueSpecification" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="StructuralFeatureValue" eSuperTypes="#//ValueSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="validValueType"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="validValueType" value="if self.value &lt;> null then let type : Type = if self.value.oclIsTypeOf(Attribute) then self.value.oclAsType(Attribute).type else if self.value.oclIsTypeOf(Reference) then self.value.oclAsType(Reference).type else self.value.oclAsType(AssociationEnd).assoc.ends->select(end : AssociationEnd | end &lt;> self)->at(1).myClass endif endif in type.oclIsTypeOf(self.ParameterValueMapping.parameter.type.oclType()) else true endif"/>
      <details key="validValueType$message" value="'Type of value must match the type of the parameter'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1" eType="#//StructuralFeature"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ParameterValueMapping">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="validParameterValue"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="validParameterValue" value="if self.value.oclIsKindOf(LiteralSpecification) then false else true endif"/>
      <details key="validParameterValue$message" value="'Type of value must match the type of the parameter'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" ordered="false"
        lowerBound="1" eType="#//Parameter"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value" ordered="false"
        lowerBound="1" eType="#//ValueSpecification" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ParameterValue" eSuperTypes="#//ValueSpecification">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="validValueType"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="validValueType" value="self.parameter.type.oclIsTypeOf(self.ParameterValueMapping.parameter.type.oclType())"/>
      <details key="validValueType$message" value="'Type of value must match the type of the parameter'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" ordered="false"
        lowerBound="1" eType="#//Parameter"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OpaqueExpression" eSuperTypes="#//ValueSpecification">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="body" ordered="false" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="language" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralSpecification" abstract="true"
      eSuperTypes="#//ValueSpecification"/>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralString" eSuperTypes="#//LiteralSpecification">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralInteger" eSuperTypes="#//LiteralSpecification">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FragmentContainer" abstract="true">
    <eStructuralFeatures xsi:type="ecore:EReference" name="fragments" upperBound="-1"
        eType="#//InteractionFragment" containment="true" eOpposite="#//InteractionFragment/container"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RCollection" abstract="true" eSuperTypes="#//Type">
    <eOperations name="getName" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
        <details key="body" value="let partial : String = if type.oclIsTypeOf(Class) and type.oclAsType(Class).partial or type.oclIsTypeOf(Operation) and type.oclAsType(Operation).partial then '|' else '' endif in let name : String = self.oclType().name.substring(2, self.oclType().name.size()) in if type.name.oclIsUndefined() then name else name + '&lt;' + partial + type.name + '>' endif"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="#//ObjectType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RSet" eSuperTypes="#//RCollection"/>
  <eClassifiers xsi:type="ecore:EClass" name="RList" eSuperTypes="#//RCollection"/>
  <eClassifiers xsi:type="ecore:EClass" name="Layout">
    <eStructuralFeatures xsi:type="ecore:EReference" name="containers" lowerBound="1"
        upperBound="-1" eType="#//ContainerMap" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ContainerMap">
    <eStructuralFeatures xsi:type="ecore:EReference" name="key" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EObject"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1" upperBound="-1"
        eType="#//ElementMap" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ElementMap">
    <eStructuralFeatures xsi:type="ecore:EReference" name="key" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EObject"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1" eType="#//LayoutElement"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LayoutElement">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="x" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EFloat"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="y" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EFloat"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="InstantiationType">
    <eLiterals name="Depends"/>
    <eLiterals name="Extends" value="1"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Classifier" abstract="true" eSuperTypes="#//ObjectType">
    <eStructuralFeatures xsi:type="ecore:EReference" name="operations" upperBound="-1"
        eType="#//Operation" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ImplementationClass" eSuperTypes="#//Classifier">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="instanceClassName" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TemporaryProperty" abstract="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="StructuralFeature" abstract="true" eSuperTypes="#//NamedElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Reference" eSuperTypes="#//Property #//TemporaryProperty">
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="#//ObjectType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Property" abstract="true" eSuperTypes="#//StructuralFeature">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="validUpperBound validLowerBound validMultiplicity"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot">
      <details key="validUpperBound" value="self.upperBound > 0 or self.upperBound = - 1"/>
      <details key="validUpperBound$message" value="'The upperbound must be greater than zero or -1 representing *'"/>
      <details key="validLowerBound" value="self.lowerBound >= 0"/>
      <details key="validLowerBound$message" value="'The lowerbound must be greater than or equal to zero'"/>
      <details key="validMultiplicity" value="self.lowerBound &lt;= self.upperBound or self.upperBound = - 1"/>
      <details key="validMultiplicity$message" value="'The lowerBound must be less than or equal to the upperBound'"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="lowerBound" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"
        defaultValueLiteral="0"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="upperBound" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"
        defaultValueLiteral="1"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="referenceType" eType="#//ReferenceType"
        defaultValueLiteral="Regular"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
</ecore:EPackage>
