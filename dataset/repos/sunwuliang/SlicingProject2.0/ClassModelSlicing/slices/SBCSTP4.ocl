import 'platform:/resource/ClassModelSlicing/slices/SBCSTP4.ecore'


package SBCS


context PumpController_ClosePump inv ClosePump : 
PCPre.PumpControlerPump.mode = State::On implies PCPost.PumpControlerPump.mode = State::Off


context Snapshot::getPost(): Set(Snapshot)
body: futureClosure(Set{self.getNext()})


context Snapshot::getNext() : Snapshot
body : self.AfterTrans.AfterTrans


context SteamBoiler_OpenValve inv OpenValve: 
SBPre.valveOpen = ValveState::Closed implies SBPost.valveOpen = ValveState::Open 


context SteamBoiler inv TP4: 
let CS:Snapshot = self.SnapshotSteamBoiler in let FS: Set(Snapshot)= CS.getPost() 
in self.valveOpen = ValveState::Open implies FS->exists(s:Snapshot | s.WLMDSnapshot.waterLevel <= maximalNormal)


context WaterLevelMeasurementDevice inv WMD: 
self.waterLevel < self.WLMDSteamBoiler.capacity


context ControlProgram_Start inv Start: 
CPPost.mode = Mode::Normal


context WaterLevelMeaurementDevice_getLevel inv getLevel: 
wlmdPost.waterLevel = ret


context Snapshot::futureClosure(s : Set(Snapshot)) : Set(Snapshot)
body: if s->includesAll(s.getNext()->asSet()) then s else futureClosure(s->union(s.getNext()->asSet()))endif


context SteamBoiler inv SB: 
self.valveOpen=ValveState::Open implies self.SteamBoilerControlProgram.mode=Mode::Initialization


context PumpController_OpenPump inv OpenPump : 
PCPre.PumpControlerPump.mode = State::Off implies PCPost.PumpControlerPump.mode = State::On


endpackage