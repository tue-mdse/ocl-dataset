<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmi:version="2.0" name="orgomg" nsURI="http:///orgomg.ecore" nsPrefix="orgomg">
  <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
    <details key="documentation" value="Object Management Group, Inc.&#13;&#10;250 First Ave. Suite 201&#13;&#10;Needham, MA 02494&#13;&#10;U.S.A.&#13;&#10;&#13;&#10;Ph: +1-781-444 0404&#13;&#10;Fax: +1-781-444 0320&#13;&#10;Email: info@omg.org&#13;&#10;&#13;&#10;Web:  http://www.omg.org&#13;&#10;"/>
  </eAnnotations>
  <eSubpackages name="cwm" nsURI="http:///orgomg/cwm.ecore" nsPrefix="orgomg.cwm">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="The amount of data in a given organization doubles every five years. Most organizations suffer from an overabundance of redundant and inconsistent data that is difficult to manage effectively, to access, and to use for decision making purposes. Data warehousing provides an excellent approach for transforming data into useful andreliable information to support the business decision making process and to achieve business intelligence. One of the most important aspects of data warehousing is metadata. Metadata is used for building, maintaining, managing, and using the data warehouse. Unfortunately, the proliferation of data management and analysis tools has resulted in almost as many different representations and treatments of metadata as there are tools.&#13;&#10;&#13;&#10;Since every data management and analysis tool requires different metadata and a different metadata model (known as a metamodel) to solve the data warehouse metadata problem, it is simply not possible to have a single metadata repository thatimplements a single metamodel for all the metadata in an organization. Instead, what is needed is a standard for interchange of warehouse metadata.&#13;&#10;&#13;&#10;The CWM is a response to these needs. It provides a framework for representing metadata about data sources, data targets, transformations and analysis, and the processes and operations that create and manage warehouse data and provide lineage information about its use.&#13;&#10;&#13;&#10;The CWM Metamodel consists of a number of sub-metamodels which represent common warehouse metadata in the following major areas of interest to data warehousing and business intelligence:&#13;&#10;&#13;&#10;Data Resources&#13;&#10;&#13;&#10;These include metamodels that represent object-oriented, relational, record, multidimensional, and XML data resources. In the case of  object-oriented data resource, CWM reuses the base object model.&#13;&#10;&#13;&#10;Data Analysis&#13;&#10;&#13;&#10;These include metamodels that represent data transformations, OLAP (On-line Analytical Processing), data mining, information visualization, and business nomenclature.&#13;&#10;&#13;&#10;Warehouse Management&#13;&#10;&#13;&#10;These include metamodels that represent warehouse processes and results of warehouse operations.&#13;&#10;&#13;&#10;The CWM Metamodel is designed to maximize the reuse of Object Model (a subset of UML) and the sharing of common modeling constructs where possible. The most prominent example is that CWM reuses/depends on Object Model for representing object-oriented data resources. In addition, where applicable, key elements of the metamodels for other types of data resources all subclass from the same model elements in Object Model.&#13;&#10;&#13;&#10;(Text appearing in the CWM package is taken from Volume 1 of the Common Warehouse Metamodel specification, document number ad/2001-02-01, published by the Object Management Group.  The complete document is available from the OMG web site at www.omg.org)"/>
    </eAnnotations>
    <eSubpackages name="objectmodel" nsURI="http:///orgomg/cwm/objectmodel.ecore" nsPrefix="orgomg.cwm.objectmodel">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The CWM ObjectModel provides basic constructs for creating and describing metamodel classes in all other CWM packages. The ObjectModel is a subset of UML that includes only those features that are needed for creating and describing the CWM. Defining a subset of UML containing only those things needed by CWM allows the CWM to leverage UML’s concepts and modeling power without burdening implementations with the full breadth of UML’s capabilities.&#13;&#10;&#13;&#10;The specification defined in this chapter, where applicable, is based on and taken from the UML specification.&#13;&#10;&#13;&#10;The CWM uses packages to control complexity and create groupings of logically interrelated classes. The ObjectModel is a collection of packages that are described together because they all provide basic metamodel constructs to other CWM packages. A subsection of this chapter is devoted to each of the ObjectModel packages. Because it relies on no other package, the Core package is described first, followed by the Behavioral, Instance, and Relationships packages. Each of the subsequent packages depends only on the Core package; there are no other dependencies between the&#13;&#10;ObjectModel packages.&#13;&#10;&#13;&#10;Organizing the ObjectModel in this fashion allows the individual metamodel packages to be understood and used independently of each other without sacrificing their common purpose. For example, the CWM Record metamodel depends only on the ObjectModel’s Core and Instance packages for its definition; other ObjectModel packages are not needed for defining records."/>
      </eAnnotations>
      <eSubpackages name="core" nsURI="http:///orgomg/cwm/objectmodel/core.ecore" nsPrefix="orgomg.cwm.objectmodel.core">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The Core metamodel depends on no other packages.&#13;&#10;&#13;&#10;The ObjectModel Core metamodel contains basic metamodel classes and associations used by all other CWM metamodel packages, including other ObjectModel packages&#13;&#10;&#13;&#10;OCL Representation of Core Constraints&#13;&#10;&#13;&#10;Operations&#13;&#10;&#13;&#10;The operation allFeatures results in a Set containing all Features of the Classifier itself and all its inherited Features.&#13;&#10;   allFeatures : Set(Feature);&#13;&#10;   allFeatures = self.feature-&gt;union(self.parent.oclAsType(Classifier).allFeatures)&#13;&#10;&#13;&#10;The operation allAttributes results in a Set containing all Attributes of the Classifier itself and all its inherited Attributes.&#13;&#10;   allAttributes : set(Attribute);&#13;&#10;   allAttributes = self.allFeatures-&gt;select(f | f.oclIsKindOf(Attribute))&#13;&#10;&#13;&#10;The operation specification yields the set of Classifiers that the current Classifier realizes.&#13;&#10;   specification: Set(Classifier)&#13;&#10;   specification = self.clientDependency-&gt;&#13;&#10;   select(d | d.stereotype.name = &quot;realization&quot;&#13;&#10;      and d.supplier.oclIsKindOf(Classifier)).supplier.oclAsType(Classifier)&#13;&#10;&#13;&#10;The operation parent returns a Set containing all direct parents of a Classifier.&#13;&#10;   parent : Set(Classifier);&#13;&#10;   parent = self.generalization.parent&#13;&#10;&#13;&#10;The operation allParents returns a Set containing all the Classifiers inherited by this Classifier (the transitive closure), excluding the Classifier itself.&#13;&#10;   allParents : Set(Classifier);&#13;&#10;   allParents = self.parent-&gt;union(self.parent.allParents)&#13;&#10;&#13;&#10;The operation allContents returns a Set containing all ModelElements contained in the Classifier together with the contents inherited from its parents.&#13;&#10;   allContents : Set(ModelElement);&#13;&#10;   allContents = self.contents-&gt;union(self.parent.allContents-&gt;&#13;&#10;   select(e | e.elementOwnership.visibility = #public or &#13;&#10;      e.elementOwnership.visibility = #protected))&#13;&#10;&#13;&#10;The operation supplier results in a Set containing all direct suppliers of the ModelElement.&#13;&#10;   supplier : Set(ModelElement);&#13;&#10;   supplier = self.clientDependency.supplier&#13;&#10;&#13;&#10;The operation allSuppliers results in a Set containing all the ModelElements that are suppliers of this ModelElement, including the suppliers of these Model Elements. This is the transitive closure.&#13;&#10;   allSuppliers : Set(ModelElement);&#13;&#10;   allSuppliers = self.supplier-&gt;union(self.supplier.allSuppliers)&#13;&#10;&#13;&#10;The operation contents results in a Set containing all ModelElements contained by the Namespace.&#13;&#10;   contents : Set(ModelElement)&#13;&#10;   contents = self.ownedElement -&gt; union(self.namespace.contents)&#13;&#10;&#13;&#10;The operation allContents results in a Set containing all ModelElements contained by the Namespace.&#13;&#10;   allContents : Set(ModelElement);&#13;&#10;   allContents = self.contents&#13;&#10;&#13;&#10;The operation allVisibleElements results in a Set containing all ModelElements visible outside of the Namespace.&#13;&#10;   allVisibleElements : Set(ModelElement)&#13;&#10;   allVisibleElements = self.allContents -&gt; select(e |&#13;&#10;      e.elementOwnership.visibility = #public)&#13;&#10;&#13;&#10;The operation allSurroundingNamespaces results in a Set containing all surrounding Namespaces.&#13;&#10;   allSurroundingNamespaces : Set(Namespace)&#13;&#10;   allSurroundingNamespaces =&#13;&#10;      self.namespace-&gt;union(self.namespace.allSurroundingNamespaces)&#13;&#10;&#13;&#10;The operation contents results in a Set containing the ModelElements owned by or imported by the Package.&#13;&#10;   contents : Set(ModelElement)&#13;&#10;   contents = self.ownedElement-&gt;union(self.importedElement)&#13;&#10;&#13;&#10;The operation allImportedElements results in a Set containing the ModelElements imported by the Package.&#13;&#10;   allImportedElements : Set(ModelElement)&#13;&#10;   allImportedElements = self.importedElement&#13;&#10;&#13;&#10;The operation allContents results in a Set containing the ModelElements owned by or imported by the Package.&#13;&#10;   allContents : Set(ModelElement)&#13;&#10;   allContents = self.contents&#13;&#10;&#13;&#10;Constraints&#13;&#10;&#13;&#10;[C-3-1] A Constraint cannot be applied to itself.&#13;&#10;context Constraint inv:&#13;&#10;not self.constrainedElement-&gt;includes (self)&#13;&#10;&#13;&#10;[C-3-2] A DataType cannot contain any other ModelElements.&#13;&#10;context DataType inv:&#13;&#10;self.ownedElement-&gt;isEmpty&#13;&#10;&#13;&#10;[C-3-3] Tags associated with a model element (directly via a property list or indirectly via a stereotype) must not clash with any meta attributes associated with the model element.&#13;&#10;context ModelElement inv:&#13;&#10;-- cannot be specified with OCL"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="Element" abstract="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An element is an atomic constituent of a model. In the metamodel, an Element is the top metaclass in the metaclass hierarchy. Element is an abstract metaclass.&#13;&#10;"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ModelElement" abstract="true" eSuperTypes="#//cwm/objectmodel/core/Element">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A model element is an element that is an abstraction drawn from the system being modeled.&#13;&#10;&#13;&#10;In the metamodel, a ModelElement is a named entity in a Model. It is the base for all modeling metaclasses in the CWM. All other modeling metaclasses are either direct or indirect subclasses of ModelElement."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="#//cwm/objectmodel/core/Name">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="An identifier for the ModelElement within its containing Namespace."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="visibility" eType="#//cwm/objectmodel/core/VisibilityKind">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies extent of the visibility of the ModelElement within its owning Namespace."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="clientDependency" upperBound="-1" eType="#//cwm/objectmodel/core/Dependency" eOpposite="#//cwm/objectmodel/core/Dependency/client">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies Dependency instances in which the ModelElement acts as a client."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="supplierDependency" upperBound="-1" eType="#//cwm/objectmodel/core/Dependency" eOpposite="#//cwm/objectmodel/core/Dependency/supplier">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The DependencySupplier association links Dependency instances with ModelElements that act as suppliers in the represented dependency relationship."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="constraint" upperBound="-1" eType="#//cwm/objectmodel/core/Constraint" eOpposite="#//cwm/objectmodel/core/Constraint/constrainedElement">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Constraint instances that restrict the possible states that a ModelElement may take."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="namespace" eType="#//cwm/objectmodel/core/Namespace" transient="true" eOpposite="#//cwm/objectmodel/core/Namespace/ownedElement">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Namespace, if any, that owns the ModelElement."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="importer" upperBound="-1" eType="#//cwm/objectmodel/core/Package" eOpposite="#//cwm/objectmodel/core/Package/importedElement">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Packages that import a ModelElement."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="stereotype" eType="#//cwm/objectmodel/core/Stereotype" eOpposite="#//cwm/objectmodel/core/Stereotype/extendedElement">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Stereotype instance that further defines the semantics of the ModelElement."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="taggedValue" upperBound="-1" eType="#//cwm/objectmodel/core/TaggedValue" containment="true" eOpposite="#//cwm/objectmodel/core/TaggedValue/modelElement">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the set of TaggedValue instances that extend a ModelElement."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="document" upperBound="-1" eType="#//cwm/foundation/businessinformation/Document" eOpposite="#//cwm/foundation/businessinformation/Document/modelElement">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Document instances relevant to a particular ModelElement."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="description" upperBound="-1" eType="#//cwm/foundation/businessinformation/Description" eOpposite="#//cwm/foundation/businessinformation/Description/modelElement">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Description instances relevant for a particular ModelElement instance."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="responsibleParty" upperBound="-1" eType="#//cwm/foundation/businessinformation/ResponsibleParty" eOpposite="#//cwm/foundation/businessinformation/ResponsibleParty/modelElement">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ResponsibleParty instances relevant for a particular ModelElement instance."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="elementNode" upperBound="-1" eType="#//cwm/foundation/expressions/ElementNode" eOpposite="#//cwm/foundation/expressions/ElementNode/modelElement">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ElementNode instances that represent a particular ModelElement in expressions."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="set" upperBound="-1" eType="#//cwm/analysis/transformation/DataObjectSet" eOpposite="#//cwm/analysis/transformation/DataObjectSet/element">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the DataObjectSet"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="renderedObject" upperBound="-1" eType="#//cwm/analysis/informationvisualization/RenderedObject" eOpposite="#//cwm/analysis/informationvisualization/RenderedObject/modelElement">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Rendered Objects referencing the Model Element."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="vocabularyElement" upperBound="-1" eType="#//cwm/analysis/businessnomenclature/VocabularyElement" eOpposite="#//cwm/analysis/businessnomenclature/VocabularyElement/modelElement">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a VocabularyElement."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="measurement" upperBound="-1" eType="#//cwm/management/warehouseoperation/Measurement" eOpposite="#//cwm/management/warehouseoperation/Measurement/modelElement">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a Measurement for a ModelElement."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="changeRequest" upperBound="-1" eType="#//cwm/management/warehouseoperation/ChangeRequest" eOpposite="#//cwm/management/warehouseoperation/ChangeRequest/modelElement">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a ChangeRequest for a ModelElement."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Namespace" abstract="true" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A namespace is a part of a model that contains a set of ModelElements each of whose&#13;&#10;names designates a unique element within the namespace. &#13;&#10;&#13;&#10;In the metamodel, a Namespace is a ModelElement that can own other ModelElements, such as Classifiers. The name of each owned ModelElement must be unique within the Namespace. Moreover, each contained ModelElement is owned by at most one Namespace. The concrete subclasses of Namespace may have additional constraints on which kind of elements may be contained. &#13;&#10;&#13;&#10;Namespace is an abstract metaclass.&#13;&#10;&#13;&#10;Note that explicit parts of a model element, such as the features of a Classifier, are not modeled as owned elements in a namespace. A namespace is used for unstructured contents such as the contents of a  package, or a class declared inside the scope of another class."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedElement" upperBound="-1" eType="#//cwm/objectmodel/core/ModelElement" containment="true" eOpposite="#//cwm/objectmodel/core/ModelElement/namespace">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ModelElements owned by a Namespace."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Classifier" abstract="true" eSuperTypes="#//cwm/objectmodel/core/Namespace">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A classifier is an element that describes structural and behavioral features; it comes in several specific forms, including class, data type, interface, component, and others that are defined in other metamodel packages.&#13;&#10;&#13;&#10;Classifier is often used as a type.&#13;&#10;&#13;&#10;In the metamodel, a Classifier may declare a collection of Features, such as Attributes, Operations and Methods. It has a name, which is unique in the Namespace enclosing the Classifier. Classifier is an abstract metaclass.&#13;&#10;&#13;&#10;Classifier is a child of Namespace. As a Namespace, a Classifier may declare other Classifiers nested in its scope. Nested Classifiers may be accessed by other Classifiers only if the nested Classifiers have adequate visibility. There are no data value or state consequences of nested Classifiers, i.e., it is not an aggregation or composition."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="An abstract Classifier is not instantiable."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="feature" upperBound="-1" eType="#//cwm/objectmodel/core/Feature" containment="true" eOpposite="#//cwm/objectmodel/core/Feature/owner">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Features owned by a Classifier instance and provides their ordering."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="structuralFeature" upperBound="-1" eType="#//cwm/objectmodel/core/StructuralFeature" eOpposite="#//cwm/objectmodel/core/StructuralFeature/type">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the set of StructuralFeatures for which the Classifier defines the type."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" upperBound="-1" eType="#//cwm/objectmodel/behavioral/Parameter" eOpposite="#//cwm/objectmodel/behavioral/Parameter/type">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the set of Parameter instances for which a particular Classifier acts as a type definition."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="generalization" upperBound="-1" eType="#//cwm/objectmodel/relationships/Generalization" eOpposite="#//cwm/objectmodel/relationships/Generalization/child">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the set of Generalization instances in which the Classifier acts as a child&#13;&#10;in the inheritance hierarchy."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="specialization" upperBound="-1" eType="#//cwm/objectmodel/relationships/Generalization" eOpposite="#//cwm/objectmodel/relationships/Generalization/parent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the set of Generalization instances in which the Classifier acts a parent in the inheritance hierarchy."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="instance" upperBound="-1" eType="#//cwm/objectmodel/instance/Instance" eOpposite="#//cwm/objectmodel/instance/Instance/classifier">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the set of Instances described by the Classifier."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="alias" upperBound="-1" eType="#//cwm/foundation/datatypes/TypeAlias" eOpposite="#//cwm/foundation/datatypes/TypeAlias/type">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the TypeAliases that have be defined for a particular Classifier instance."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="expressionNode" upperBound="-1" eType="#//cwm/foundation/expressions/ExpressionNode" eOpposite="#//cwm/foundation/expressions/ExpressionNode/type">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ExpressionNode instances for which this Classifier acts as the type."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="mappingFrom" upperBound="-1" eType="#//cwm/foundation/typemapping/TypeMapping" eOpposite="#//cwm/foundation/typemapping/TypeMapping/sourceType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the TypeMapping instances in which a particular Classifier participates."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="mappingTo" upperBound="-1" eType="#//cwm/foundation/typemapping/TypeMapping" eOpposite="#//cwm/foundation/typemapping/TypeMapping/targetType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the TypeMapping instance of a particular Classifier instance."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="classifierMap" upperBound="-1" eType="#//cwm/analysis/transformation/ClassifierMap" eOpposite="#//cwm/analysis/transformation/ClassifierMap/source">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ClassifierMap"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="cfMap" upperBound="-1" eType="#//cwm/analysis/transformation/ClassifierFeatureMap" eOpposite="#//cwm/analysis/transformation/ClassifierFeatureMap/classifier">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ClassifierFeatureMap"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Class" eSuperTypes="#//cwm/objectmodel/core/Classifier">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A class is a description of a set of objects that share the same attributes, operations, methods, relationships, and semantics. A class may use a set of interfaces to specify collections of operations it provides to its environment. In the metamodel, a Class describes a set of objects sharing a collection of Features that are common to the set of objects.&#13;&#10;&#13;&#10;The purpose of a Class is to declare a collection of Features that fully describe the structure and behavior of objects. Some Classes may not be directly instantiated. These Classes are said to be abstract and exist only for other Classes to inherit and reuse the Features declared by them. No object may be a direct instance of an abstract Class, although an object may be an indirect instance of one through a subclass that is non-abstract.&#13;&#10;&#13;&#10;A Class acts as the namespace for various kinds of contained elements defined within its scope, including classes, interfaces and associations (note that this is purely a scoping construction and does not imply anything about aggregation). The contained classes can be used as ordinary classes in the container class. If a class inherits another class, the contents of the ancestor are available to its descendents if the visibility of an element is public or protected; however, if the visibility is private, then the element is not visible and therefore not available in the descendant."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="index" upperBound="-1" eType="#//cwm/foundation/keysindexes/Index" eOpposite="#//cwm/foundation/keysindexes/Index/spannedClass">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies Index instances that span this Class instance."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="DataType" eSuperTypes="#//cwm/objectmodel/core/Classifier">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A data type is a type whose values have no identity (i.e., they are pure values). Data types include primitive built-in types (such as integer and string) as well as definable enumeration types.&#13;&#10;&#13;&#10;In the metamodel, a DataType defines a special kind of Classifier in which operations are all pure functions (i.e., they can return data values but they cannot change data values, because they have no identity). For example, an &quot;add&quot; operation on a number with another number as an argument yields a third number as a result; the target and argument are unchanged.&#13;&#10;&#13;&#10;A DataType is a special kind of Classifier whose instances are primitive values, not objects. For example, integers and strings are usually treated as primitive values. A primitive value does not have an identity, so two occurrences of the same value cannot be differentiated. Usually, DataTypes are used for specification of the type of an attribute or parameter."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Package" eSuperTypes="#//cwm/objectmodel/core/Namespace">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A package is a grouping of model elements.&#13;&#10;&#13;&#10;In the metamodel, Package is a subclass of Namespace. A Package contains ModelElements such as Packages and Classifiers. A Package may also contain Constraints and Dependencies between ModelElements of the Package.&#13;&#10;&#13;&#10;The purpose of the package construct is to provide a general grouping mechanism. In fact, its only semantics is to define a namespace for its contents. The package construct can be used for organizing elements for any purpose; the criteria to use for grouping elements together into one package are not defined.&#13;&#10;&#13;&#10;A package owns a set of model elements, with the implication that if the package is removed from the model, so are the elements owned by the package. Elements with names, such as classifiers, that are owned by the same package must have unique names within the package, although elements in different packages may have the same name.&#13;&#10;&#13;&#10;There may be relationships between elements contained in the same package, and between an element in one package and an element in a surrounding package at any level. In other words, elements “see” all the way out through nested levels of packages.&#13;&#10;&#13;&#10;Elements in peer packages, however, are encapsulated and are not a priori visible to each other. The same goes for elements in contained packages, i.e. packages do not see &quot;inwards&quot;.&#13;&#10;&#13;&#10;Elements owned by a Package can be made available to other Packages by importing&#13;&#10;them. Although any ModelElement may be imported by a Package, imported&#13;&#10;ModelElements are typically other Packages. When an element is imported by a&#13;&#10;package it extends the namespace of that package. Thus the elements available in a&#13;&#10;Package consists of its owned and imported ModelElements."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="importedElement" upperBound="-1" eType="#//cwm/objectmodel/core/ModelElement" eOpposite="#//cwm/objectmodel/core/ModelElement/importer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies ModelElements imported by a Package."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dataManager" upperBound="-1" eType="#//cwm/foundation/softwaredeployment/DataManager" eOpposite="#//cwm/foundation/softwaredeployment/DataManager/dataPackage">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a DataManager that provides access to the data defined in the Package."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Subsystem" eSuperTypes="#//cwm/objectmodel/core/Classifier #//cwm/objectmodel/core/Package">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A subsystem is a grouping of model elements that represents a behavioral unit in a physical system. A subsystem offers interfaces and has operations.&#13;&#10;&#13;&#10;In the metamodel, Subsystem is a subclass of both Package and Classifier. As such it may have a set of Features.&#13;&#10;&#13;&#10;The purpose of the subsystem construct is to provide a grouping mechanism for specifying a behavioral unit of a physical system. Apart from defining a namespace for its contents, a subsystem serves as a specification unit for the behavior of its contained model elements.&#13;&#10;&#13;&#10;The contents of a subsystem is defined in the same way as for a package, thus it&#13;&#10;consists of owned elements and imported elements, with unique names within the&#13;&#10;subsystem."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Model" eSuperTypes="#//cwm/objectmodel/core/Package">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A model captures a view of a physical system. It is an abstraction of the physical system, with a certain purpose. The model completely describes those aspects of the physical system that are relevant to the purpose of the model, at the appropriate level of detail.&#13;&#10;&#13;&#10;In the metamodel, Model is a subclass of Package. It contains a containment hierarchy of ModelElements that together describe the physical system. A Model also contains a set of ModelElements that represents the environment of the system. &#13;&#10;&#13;&#10;Different Models can be defined for the same physical system, where each model represents a view of the physical system defined by its purpose and abstraction level, e.g. an analysis model, a design model, an implementation model. Typically different models are complementary and defined from the perspectives (viewpoints) of different system stakeholders."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Feature" abstract="true" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A feature is a property, like attribute or operation, which is encapsulated within a Classifier.&#13;&#10;&#13;&#10;In the metamodel, a Feature declares a structural or behavioral characteristic of an instance of a Classifier or of the Classifier itself. Feature is an abstract metaclass."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="ownerScope" eType="#//cwm/objectmodel/core/ScopeKind">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies whether the Feature appears in every instance of the Classifier or whether it appears only once for the entire Classifier."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="owner" eType="#//cwm/objectmodel/core/Classifier" transient="true" eOpposite="#//cwm/objectmodel/core/Classifier/feature">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Classifier instance that owns the Feature."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="featureNode" upperBound="-1" eType="#//cwm/foundation/expressions/FeatureNode" eOpposite="#//cwm/foundation/expressions/FeatureNode/feature">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the FeatureNode instances that use a particular Feature."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="featureMap" upperBound="-1" eType="#//cwm/analysis/transformation/FeatureMap" eOpposite="#//cwm/analysis/transformation/FeatureMap/target">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the FeatureMap"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="cfMap" upperBound="-1" eType="#//cwm/analysis/transformation/ClassifierFeatureMap" eOpposite="#//cwm/analysis/transformation/ClassifierFeatureMap/feature">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ClassifierFeatureMap"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="StructuralFeature" abstract="true" eSuperTypes="#//cwm/objectmodel/core/Feature">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A structural feature refers to a static feature of a model element.&#13;&#10;&#13;&#10;In the metamodel, a StructuralFeature declares a structural aspect of a Classifier that is typed, such as an attribute. For example, it specifies the multiplicity and changeability of the StructuralFeature. StructuralFeature is an abstract metaclass."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="changeability" eType="#//cwm/objectmodel/core/ChangeableKind">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies whether the value may be modified after the object is created."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="multiplicity" eType="#//cwm/objectmodel/core/Multiplicity" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The possible number of data values for the feature that may be held by an instance. The cardinality of the set of values is an implicit part of the feature. In the common case in which the multiplicity is 1..1, then the feature is a scalar (i.e., it holds exactly one value)."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="ordering" eType="#//cwm/objectmodel/core/OrderingKind">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies whether the set of instances is ordered. The ordering must be determined and maintained by Operations that add values to the feature. This property is only relevant if the multiplicity is greater than one."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="targetScope" eType="#//cwm/objectmodel/core/ScopeKind">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies whether the targets are ordinary Instances or are Classifiers."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="#//cwm/objectmodel/core/Classifier" eOpposite="#//cwm/objectmodel/core/Classifier/structuralFeature">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Classifier defining the type of a StructuralFeature."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="slot" upperBound="-1" eType="#//cwm/objectmodel/instance/Slot" eOpposite="#//cwm/objectmodel/instance/Slot/feature">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the set of Slot instances containing values of the which the StructuralFeature instance."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="discriminatedUnion" upperBound="-1" eType="#//cwm/foundation/datatypes/Union" eOpposite="#//cwm/foundation/datatypes/Union/discriminator">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Union instances in which a particular StructuralFeature acts as the discriminator."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="indexedFeature" upperBound="-1" eType="#//cwm/foundation/keysindexes/IndexedFeature" eOpposite="#//cwm/foundation/keysindexes/IndexedFeature/feature">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the IndexedFeature instances that describe how a particular StructuralFeature is used by the keys of Index instances."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="keyRelationship" upperBound="-1" eType="#//cwm/foundation/keysindexes/KeyRelationship" eOpposite="#//cwm/foundation/keysindexes/KeyRelationship/feature">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the KeyRelationship instances that employ a particular StructuralFeature as part of their key."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="uniqueKey" upperBound="-1" eType="#//cwm/foundation/keysindexes/UniqueKey" eOpposite="#//cwm/foundation/keysindexes/UniqueKey/feature">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the UniqueKey instances in which a particular StructuralFeature participates."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Attribute" eSuperTypes="#//cwm/objectmodel/core/StructuralFeature">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An Attribute describes a named slot within a classifier that may hold a value."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="initialValue" eType="#//cwm/objectmodel/core/Expression" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="An Expression specifying the value of the attribute upon initialization. It is meant to be evaluated at the time the object is initialized. (Note that an explicit constructor may supersede an initial value.)"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Constraint" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A constraint is a semantic condition or restriction expressed in text.&#13;&#10;&#13;&#10;In the metamodel, a Constraint is a BooleanExpression on an associated ModelElement(s) which must be true for the model to be well formed. This restriction can be stated in natural language, or in different kinds of languages with well-defined semantics. Certain Constraints are predefined, others may be user defined. Note that a Constraint is an assertion, not an executable mechanism.&#13;&#10;&#13;&#10;The specification is written as an expression in a designated constraint language. The language can be specially designed for writing constraints (such as OCL), a programming language, mathematical notation, or natural language. If constraints are to be enforced by a model editor tool, then the tool must understand the syntax and semantics of the constraint language. Because the choice of language is arbitrary, constraints can be used as an extension mechanism.&#13;&#10;&#13;&#10;The constraint concept allows new semantics to be specified linguistically for a model element. In the metamodel a Constraint directly attached to a ModelElement describes semantic restrictions that this ModelElement must obey.&#13;&#10;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" eType="#//cwm/objectmodel/core/BooleanExpression" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A BooleanExpression that must be true when evaluated for an instance of a system to be well-formed. A boolean expression defining the constraint. Expressions are written as strings in a designated language. For the model to be well formed, the expression must always yield a true value when evaluated for instances of the constrained elements at any time when the system is stable (i.e., not during the execution of an atomic operation)."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="constrainedElement" upperBound="-1" eType="#//cwm/objectmodel/core/ModelElement" eOpposite="#//cwm/objectmodel/core/ModelElement/constraint">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ModelElements whose state is constrained by the Constraint instance."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="constrainedStereotype" eType="#//cwm/objectmodel/core/Stereotype" transient="true" eOpposite="#//cwm/objectmodel/core/Stereotype/stereotypeConstraint">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Stereotype owning a Constraint instance."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Dependency" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A dependency states that the implementation or functioning of one or more elements requires the presence of one or more other elements.&#13;&#10;&#13;&#10;In the metamodel, a Dependency is a directed relationship from a client (or clients) to a supplier (or suppliers) stating that the client is dependent on the supplier (i.e., the client element requires the presence and knowledge of the supplier element).&#13;&#10;&#13;&#10;A dependency specifies that the semantics of a set of model elements requires the presence of another set of model elements. This implies that if the source is somehow modified, the dependents probably must be modified. The reason for the dependency can be specified in several different ways (e.g., using natural language or an algorithm) but is often implicit.&#13;&#10;&#13;&#10;Whenever the supplier element of a dependency changes, the client element is potentially invalidated. After such invalidation, a check should be performed followed by possible changes to the derived client element. Such a check should be performed after which action can be taken to change the derived element to validate it again."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Contains a description of the nature of the dependency relationship between the client and supplier. The list of possible values is open-ended. However, CWM predefines the values &quot;Abstraction&quot; and &quot;Usage&quot;."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="client" lowerBound="1" upperBound="-1" eType="#//cwm/objectmodel/core/ModelElement" eOpposite="#//cwm/objectmodel/core/ModelElement/clientDependency">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ModelElements that are clients of the Dependency instance."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="supplier" lowerBound="1" upperBound="-1" eType="#//cwm/objectmodel/core/ModelElement" eOpposite="#//cwm/objectmodel/core/ModelElement/supplierDependency">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ModelElements that are suppliers of the Dependency instance."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Expression" eSuperTypes="#//cwm/objectmodel/core/Element">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="In the metamodel an Expression defines a statement which will evaluate to a (possibly empty) set of instances when executed in a context. An Expression does not modify the environment in which it is evaluated. An expression contains an expression string and the name of an interpretation language with which to evaluate the string."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="body" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The text of the expression expressed in the given language."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="language" eType="#//cwm/objectmodel/core/Name">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Names the language in which the expression body is represented. The interpretation of the expression depends on the language. If the language name is omitted, no interpretation for the expression can be assumed. In general, a language name should be spelled and capitalized exactly as it appears in the document defining the language. For example, use COBOL, not Cobol; use Ada, not ADA; use PostScript, not Postscript."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="BooleanExpression" eSuperTypes="#//cwm/objectmodel/core/Expression">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="In the metamodel BooleanExpression defines a statement which will evaluate to an instance of Boolean when it is evaluated."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ProcedureExpression" eSuperTypes="#//cwm/objectmodel/core/Expression">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="In the metamodel ProcedureExpression defines a statement which will result in a change to the values of its environment when it is evaluated."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Multiplicity" eSuperTypes="#//cwm/objectmodel/core/Element">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="In the metamodel a Multiplicity defines a non-empty set of non-negative integers. A set which only contains zero ({0}) is not considered a valid Multiplicity. Every Multiplicity has at least one corresponding String  representation.&#13;&#10;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="range" lowerBound="1" upperBound="-1" eType="#//cwm/objectmodel/core/MultiplicityRange" containment="true" eOpposite="#//cwm/objectmodel/core/MultiplicityRange/multiplicity">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the set of MultiplicityRange instances owned by a Multiplicity."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="MultiplicityRange" eSuperTypes="#//cwm/objectmodel/core/Element">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="In the metamodel a MultiplicityRange defines a range of integers. The upper bound of the range cannot be below the lower bound. The lower bound must be a nonnegative integer. The upper bound must be a nonnegative integer or the special value unlimited, which indicates there is no upper bound on the range. &#13;&#10;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="lower" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies the positive integer lower bound of the range."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="upper" eType="#//cwm/objectmodel/core/UnlimitedInteger">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies the upper bound of the range, which is a positive integer or the special value ’unlimited’ indicating no upper bound is defined."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="multiplicity" lowerBound="1" eType="#//cwm/objectmodel/core/Multiplicity" transient="true" eOpposite="#//cwm/objectmodel/core/Multiplicity/range">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Multiplicity instance that owns the MultiplicityRange."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Stereotype" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The stereotype concept provides a way of branding (classifying) model elements so that they behave as if they were instances of new virtual metamodel constructs. These model elements have the same structure (attributes, associations, operations) as similar non-stereotyped model elements of the same kind. The stereotype may specify additional constraints and required tagged values that apply to model elements. In addition, a stereotype may be used to indicate a difference in meaning or usage between two model elements with identical structure.&#13;&#10;&#13;&#10;In the metamodel the Stereotype metaclass is a subclass of ModelElement. Tagged Values and Constraints attached to a Stereotype apply to all ModelElements branded by that Stereotype.&#13;&#10;&#13;&#10;A stereotype keeps track of the base class to which it may be applied. The base class is a class in the metamodel (not a user-level modeling element) such as Class, Association, etc. If a model element is branded by an attached stereotype, then the CWM base class of the model element must be the base class specified by the stereotype or one of the subclasses of that base class."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="baseClass" eType="#//cwm/objectmodel/core/Name">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies the name of a modeling element to which the stereotype applies, such as Class, Association, Constraint, etc. This is the name of a metaclass, that is, a class from the metamodel itself rather than a user model class."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="stereotypeConstraint" upperBound="-1" eType="#//cwm/objectmodel/core/Constraint" containment="true" eOpposite="#//cwm/objectmodel/core/Constraint/constrainedStereotype">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the set of Constraint instances defined for the Stereotype instance."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="extendedElement" upperBound="-1" eType="#//cwm/objectmodel/core/ModelElement" eOpposite="#//cwm/objectmodel/core/ModelElement/stereotype">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the set of ModelElements to which the Stereotype instance applies."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="requiredTag" upperBound="-1" eType="#//cwm/objectmodel/core/TaggedValue" containment="true" eOpposite="#//cwm/objectmodel/core/TaggedValue/stereotype">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies a set of TaggedValues, each of which specifies a tag that an element classified by the Stereotype is required to have."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TaggedValue" eSuperTypes="#//cwm/objectmodel/core/Element">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A tagged value allows information to be attached to any model element in the form of a &quot;tagged value&quot; pair (i.e., name = value). The interpretation of tagged value semantics is intentionally beyond the scope of CWM. It must be determined by user or tool conventions. It is expected that tools will define tags to supply information needed for their operations beyond the basic semantics of CWM. Such information could include code generation options, model management information, or user-specified semantics.&#13;&#10;&#13;&#10;Even though TaggedValues are a simple and straightforward extension technique, their use restricts semantic interchange of metadata to only those tools that share a common understanding of the specific tagged value names."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="tag" eType="#//cwm/objectmodel/core/Name">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Contains the name of the TaggedValue. This name determines the semantics that are applicable to the contents of the value attribute."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Contains the current value of the TaggedValue."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="stereotype" eType="#//cwm/objectmodel/core/Stereotype" transient="true" eOpposite="#//cwm/objectmodel/core/Stereotype/requiredTag">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a Stereotype instance that owns the TaggedValue instance."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="modelElement" eType="#//cwm/objectmodel/core/ModelElement" transient="true" eOpposite="#//cwm/objectmodel/core/ModelElement/taggedValue">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ModelElement instance that owns the TaggedValue instance."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="Any" instanceClassName="java.lang.String">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The Any data type is used to indicate that an attribute or parameter may take values from any of the available data types. In CWM, the set of data types an Any attribute or parameter may assume includes the data types and enumerations described in this chapter plus any available instances of the Classifier class. &#13;&#10;&#13;&#10;There is no default value for data type Any."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="Boolean" instanceClassName="boolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Boolean defines an enumeration that denotes a logical condition.&#13;&#10;&#13;&#10;The default for data type Boolean is false."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="Float" instanceClassName="java.lang.String">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The Float data type is used to indicate that an attribute or parameter may take on floating point numeric values. The number of significant digits and other representational details are implementation defined. &#13;&#10;&#13;&#10;The default for the Float data type is the value 0.0."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="Integer" instanceClassName="long">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Integer represents the predefined type of integers. An instance of Integer is an element in the (infinite) set of integers (..., -2, -1, 0, 1, 2, ...). &#13;&#10;&#13;&#10;The default for Integer is 0."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="Name" instanceClassName="java.lang.String">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Name defines a token which is used for naming ModelElements and similar usages. Each Name has a corresponding String representation. For purposes of exchange a name should be represented as a String.&#13;&#10;&#13;&#10;The default for the Name data type is an empty string."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="String" instanceClassName="java.lang.String">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="String defines a piece of text. Strings do not normally have a defined length; rather, they are considered to be arbitrarily long (practical limits on the length of Strings exist, but are implementation dependent). When String is used as the type of an Attribute, string length sometimes can be specified (see the Relational and Record packages for examples).&#13;&#10;&#13;&#10;The default for the String data type is an empty string."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="Time" instanceClassName="java.lang.String">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Time defines a statement which will define the time of occurrence of an event. The specific format of time expressions is not specified here and is subject to implementation considerations.&#13;&#10;&#13;&#10;There is no default for the Time data type."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EDataType" name="UnlimitedInteger" instanceClassName="long">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="UnlimitedInteger defines a data type whose range is the nonnegative integers augmented by the special value &quot;unlimited&quot;. It is used for the upper bound of multiplicities.&#13;&#10;&#13;&#10;The default for an UnlimitedInteger is the special value &quot;unlimited&quot;."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EEnum" name="ChangeableKind">
          <eLiterals name="ck_changeable">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value=" No restrictions on modification."/>
            </eAnnotations>
          </eLiterals>
          <eLiterals name="ck_frozen" value="1">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The value may not be changed from the source end after the creation and initialization of the source object. Operations on the other end may change a value."/>
            </eAnnotations>
          </eLiterals>
          <eLiterals name="ck_addOnly" value="2">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="If the multiplicity is not fixed, values may be added at any time from the source object, but once created a value may not be removed from the source end. Operations on the other end may change a value."/>
            </eAnnotations>
          </eLiterals>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EEnum" name="OrderingKind">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="In the metamodel OrderingKind defines an enumeration that specifies how the elements of a set are arranged. Used in conjunction with elements that have a multiplicity in cases when the multiplicity value is greater than one. The ordering must be determined and maintained by operations that modify the set.&#13;&#10;&#13;&#10;The default value is ok_unordered."/>
          </eAnnotations>
          <eLiterals name="ok_unordered">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The elements of the set have no inherent ordering."/>
            </eAnnotations>
          </eLiterals>
          <eLiterals name="ok_ordered" value="1">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The elements of the set have a sequential ordering."/>
            </eAnnotations>
          </eLiterals>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EEnum" name="ScopeKind">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="In the metamodel ScopeKind defines an enumeration that denotes whether a feature belongs to individual instances or an entire classifier.&#13;&#10;&#13;&#10;The default value is sk_instance."/>
          </eAnnotations>
          <eLiterals name="sk_instance">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The feature pertains to instances of a Classifier. For example, it is a distinct attribute in each instance or an operation that works on an instance."/>
            </eAnnotations>
          </eLiterals>
          <eLiterals name="sk_classifier" value="1">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The feature pertains to an entire Classifier. For example, it is an attribute shared by the entire Classifier or an operation that works on the Classifier, such as a creation operation."/>
            </eAnnotations>
          </eLiterals>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EEnum" name="VisibilityKind">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="In the metamodel VisibilityKind defines an enumeration that denotes how the element to which it refers is seen outside the enclosing name space.&#13;&#10;&#13;&#10;The default value is vk_public."/>
          </eAnnotations>
          <eLiterals name="vk_public">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Other elements may see and use the target element."/>
            </eAnnotations>
          </eLiterals>
          <eLiterals name="vk_protected" value="1">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Descendants of the source element may see and use the target element."/>
            </eAnnotations>
          </eLiterals>
          <eLiterals name="vk_private" value="2">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Only the source element may see and use the target element."/>
            </eAnnotations>
          </eLiterals>
          <eLiterals name="vk_package" value="3">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value=" Elements declared in the same package as the target element may see and use the target element. "/>
            </eAnnotations>
          </eLiterals>
          <eLiterals name="vk_notapplicable" value="4">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="May be used where namespaces do not support the concept of visibility."/>
            </eAnnotations>
          </eLiterals>
        </eClassifiers>
      </eSubpackages>
      <eSubpackages name="behavioral" nsURI="http:///orgomg/cwm/objectmodel/behavioral.ecore" nsPrefix="orgomg.cwm.objectmodel.behavioral">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The Behavioral metamodel depends on the following package:&#13;&#10;&#13;&#10;   org.omg::CWM::ObjectModel::Core&#13;&#10;&#13;&#10;The Behavioral metamodel collects together classes and associations that describe the behavior of CWM types and provides a foundation for recording the invocations of defined behaviors. The elements of the Behavioral metamodel are shown in the following figure.&#13;&#10;&#13;&#10;OCL Representation of Behavioral Constraints&#13;&#10;&#13;&#10;Operations&#13;&#10;&#13;&#10;The operation hasSameSignature checks if the argument has the same signature as the instance itself.&#13;&#10;   hasSameSignature ( b : BehavioralFeature ) : Boolean;&#13;&#10;   hasSameSignature (b) =&#13;&#10;   (self.name = b.name) and&#13;&#10;   (self.parameter-&gt;size = b.parameter-&gt;size) and&#13;&#10;   Sequence{ 1..(self.parameter-&gt;size) }-&gt;forAll( index : Integer |&#13;&#10;   b.parameter-&gt;at(index).type =&#13;&#10;   self.parameter-&gt;at(index).type and&#13;&#10;   b.parameter-&gt;at(index).kind =&#13;&#10;   self.parameter-&gt;at(index).kind   )&#13;&#10;&#13;&#10;The operation allOperations results in a Set containing all Operations of the Classifier itself and all its inherited Operations.&#13;&#10;   allOperations : Set(Operation);&#13;&#10;   allOperations = self.allFeatures-&gt;select(f | f.ockIsKindOf(Operations))&#13;&#10;&#13;&#10;The operation allMethods results in a Set containing all Methods of the Classifier itself and all its inherited Methods.&#13;&#10;   allOperations : Set(Method);&#13;&#10;   allMethods = self.allFeatures-&gt;select(f | f.ockIsKindOf(Method))&#13;&#10;&#13;&#10;Constraints&#13;&#10;&#13;&#10;[C-4-1] All Parameters should have a unique name.&#13;&#10;context BehavioralFeature inv:&#13;&#10;self.parameter-&gt;forAll(p1, p2 | p1.name = p2.name implies p1 = p2)&#13;&#10;&#13;&#10;[C-4-2] The type of the Parameters should be included in the Namespace of the Classifier.&#13;&#10;context BehavioralFeature inv:&#13;&#10;self.parameter-&gt;forAll( p | self.owner.namespace.allContents-&gt;includes (p.type) )&#13;&#10;&#13;&#10;[C-4-3] The number of arguments must be the same as the number of parameters of the Operation.&#13;&#10;context CallAction inv:&#13;&#10;self.actualArgument-&gt;size = self.operation.parameter-&gt;size&#13;&#10;&#13;&#10;[C-4-4] An Interface can only contain Operations.&#13;&#10;context Interface inv:&#13;&#10;self.allFeatures-&gt;forAll( f | f.oclIsKindOf( Operation ) )&#13;&#10;&#13;&#10;[C-4-5] An Interface cannot contain any ModelElements.&#13;&#10;context Interface inv:&#13;&#10;self.allContents-&gt;isEmpty&#13;&#10;&#13;&#10;[C-4-6] All Features defined in an Interface are public.&#13;&#10;context Interface inv:&#13;&#10;self.allFeatures-&gt;forAll( f | f.visibility = #public )&#13;&#10;&#13;&#10;[C-4-7] If the realized Operation is a query, then so is the Method.&#13;&#10;context Method inv:&#13;&#10;self.specification-&gt;isQuery implies self.isQuery"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="Argument" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Argument is an expression describing how to determine an actual value passed in a CallAction.&#13;&#10;&#13;&#10;In the metamodel an Argument is a composite part of a CallAction and contains a meta-attribute, value, of type Expression. It states how the actual argument is determined when the owning CallAction is executed."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="value" eType="#//cwm/objectmodel/core/Expression" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="An expression determining the actual Argument instance when executed."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="callAction" eType="#//cwm/objectmodel/behavioral/CallAction" transient="true" eOpposite="#//cwm/objectmodel/behavioral/CallAction/actualArgument">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the CallAction instance representing a particular invocation of an Operation."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="BehavioralFeature" abstract="true" eSuperTypes="#//cwm/objectmodel/core/Feature">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A behavioral feature refers to a dynamic feature of a model element, such as an operation or method. In the metamodel, BehavioralFeature specifies a behavioral aspect of a Classifier. All different kinds of behavioral aspects of a Classifier, such as Operation and Method, are subclasses of BehavioralFeature.&#13;&#10;&#13;&#10;BehavioralFeature is an abstract metaclass.&#13;&#10;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isQuery" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged. True indicates that the state is unchanged; false indicates that side-effects may occur."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" upperBound="-1" eType="#//cwm/objectmodel/behavioral/Parameter" containment="true" eOpposite="#//cwm/objectmodel/behavioral/Parameter/behavioralFeature">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Parameter instances that describe the parameters of the BehavioralFeature."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CallAction" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A call action is an action resulting in an invocation of an operation.&#13;&#10;&#13;&#10;The purpose of a CallAction is to identify the actual Arguments used in a specific invocation of an Operation."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="actualArgument" upperBound="-1" eType="#//cwm/objectmodel/behavioral/Argument" containment="true" eOpposite="#//cwm/objectmodel/behavioral/Argument/callAction">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Argument instances representing the actual arguments passed during Operation invocation."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="operation" lowerBound="1" eType="#//cwm/objectmodel/behavioral/Operation" eOpposite="#//cwm/objectmodel/behavioral/Operation/callAction">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Operation instance for which the CallAction instance records an invocation."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="stepExecution" upperBound="-1" eType="#//cwm/management/warehouseoperation/StepExecution" eOpposite="#//cwm/management/warehouseoperation/StepExecution/callAction">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the StepExecution to which the CallAction applies."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Event" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Event is a specification of an observable occurrence. The occurrence that generates an event instance is assumed to take place at an instant in time."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" upperBound="-1" eType="#//cwm/objectmodel/behavioral/Parameter" containment="true" eOpposite="#//cwm/objectmodel/behavioral/Parameter/event">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ordered set of Parameter instances owned by an Event that describe the Event’s parameters."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Interface" eSuperTypes="#//cwm/objectmodel/core/Classifier">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Interface is a named set of operations that specify the behavior of an element.&#13;&#10;&#13;&#10;In the metamodel, an Interface contains a set of Operations that together define a service offered by a Classifier realizing the Interface. A Classifier may offer several services, which means that it may realize several Interfaces, and several Classifiers may realize the same Interface."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Method" eSuperTypes="#//cwm/objectmodel/behavioral/BehavioralFeature">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Method is the implementation of an Operation. It specifies the algorithm or procedure that effects the results of an Operation."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" eType="#//cwm/objectmodel/core/ProcedureExpression" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A specification of the Method in some appropriate form (such as a programming language). The exact form of a Method’s specification and knowledge of the language in which it is described is outside the scope of the CWM."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="specification" lowerBound="1" eType="#//cwm/objectmodel/behavioral/Operation" eOpposite="#//cwm/objectmodel/behavioral/Operation/method">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Operation that a Method implements."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Operation" eSuperTypes="#//cwm/objectmodel/behavioral/BehavioralFeature">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Operation is a service that can be requested from an object to effect behavior. An Operation has a signature, which describes the parameters that are possible (including possible return values).&#13;&#10;&#13;&#10;In the metamodel, an Operation is a BehavioralFeature that can be applied to instances of the Classifier that contains the Operation.&#13;&#10;&#13;&#10;Operation is the specification, while Method is the implementation."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAbstract" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="If true, then the Operation does not have an implementation, and one must be supplied by a descendant. If false, the Operation must have an implementation in the class or inherited from an ancestor."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="callAction" upperBound="-1" eType="#//cwm/objectmodel/behavioral/CallAction" eOpposite="#//cwm/objectmodel/behavioral/CallAction/operation">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the CallAction instance representing a particular invocation of an Operation."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="method" upperBound="-1" eType="#//cwm/objectmodel/behavioral/Method" eOpposite="#//cwm/objectmodel/behavioral/Method/specification">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the set of Methods defined for an Operation."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Parameter" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Parameters are used in the specification of operations, methods and events. A Parameter may include a name, type, and direction of communication."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="defaultValue" eType="#//cwm/objectmodel/core/Expression" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="An Expression whose evaluation yields a value to be used when no argument is supplied for the Parameter."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" eType="#//cwm/objectmodel/behavioral/ParameterDirectionKind">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies what kind of a Parameter is required."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="behavioralFeature" eType="#//cwm/objectmodel/behavioral/BehavioralFeature" transient="true" eOpposite="#//cwm/objectmodel/behavioral/BehavioralFeature/parameter">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the BehavioralFeature instance owner of a Parameter instance."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="event" eType="#//cwm/objectmodel/behavioral/Event" transient="true" eOpposite="#//cwm/objectmodel/behavioral/Event/parameter">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Event owning a set of Parameter instances."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="#//cwm/objectmodel/core/Classifier" eOpposite="#//cwm/objectmodel/core/Classifier/parameter">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Classifier instance the defines the type of a Parameter."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EEnum" name="ParameterDirectionKind">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="In the metamodel ParameterDirectionKind defines an enumeration that denotes if a Parameter is used for supplying an argument and/or for returning a value. The enumeration values are:&#13;&#10;&#13;&#10;The default value is pdk_in."/>
          </eAnnotations>
          <eLiterals name="pdk_in">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="An input Parameter (may not be modified)."/>
            </eAnnotations>
          </eLiterals>
          <eLiterals name="pdk_inout" value="1">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="An input Parameter that may be modified."/>
            </eAnnotations>
          </eLiterals>
          <eLiterals name="pdk_out" value="2">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="An output Parameter (may be modified to communicate information to the caller)."/>
            </eAnnotations>
          </eLiterals>
          <eLiterals name="pdk_return" value="3">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A return value of a call."/>
            </eAnnotations>
          </eLiterals>
        </eClassifiers>
      </eSubpackages>
      <eSubpackages name="relationships" nsURI="http:///orgomg/cwm/objectmodel/relationships.ecore" nsPrefix="orgomg.cwm.objectmodel.relationships">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The Relationships metamodel depends on the following package:&#13;&#10;&#13;&#10;    org.omg::CWM::ObjectModel::Core&#13;&#10;&#13;&#10;The Relationships metamodel collects together classes and associations that describe  the relationships between object within a CWM information store. The Relationships metamodel describes to types of relationships: association and generalization.&#13;&#10;&#13;&#10;Association relationships record linkages between model elements. These linkages may represent simple linkages between model elements or aggregation (&quot;is part of&quot;) relationships between model elements; aggregation relationships come in two forms -- shared and composite. Associations have two or more named ends that link them to instances of the classes connected by the association.&#13;&#10;&#13;&#10;Generalization relationships record arrangements of model elements into type hierarchies in a parent/child (or &quot;is type of&quot;) fashion. Child types are said to &quot;specialize&quot;, &quot;subclass&quot; or &quot;subtype&quot; their parental  types, represent a subset of parental instances that fulfill the definition of the child type, and inherit the structural features&#13;&#10;(Attributes, AssociationEnd) and behavioral features (Operations, Methods) of their parents. Parental types are said to &quot;generalize&quot; their child types or to be &quot;superclasses&quot; or &quot;supertypes&quot; of their children.&#13;&#10;&#13;&#10;CWM generalization hierarchies support multiple inheritance; that is, child types may have more than one parental type and inherit the union of the features of all their parental types. Although called &quot;hierarchies&quot;, multiple inheritance actually represents a directed acyclic graph of parental and child types.&#13;&#10;&#13;&#10;OCL Representation of Relationships Constraints&#13;&#10;&#13;&#10;Operations&#13;&#10;&#13;&#10;The operation allConnections results in the set of all AssociationEnds of the Association.&#13;&#10;   allConnections : Set(AssociationEnd);&#13;&#10;   allConnections = self.feature.oclIsKindOf(AssociationEnd)&#13;&#10;&#13;&#10;Constraints&#13;&#10;&#13;&#10;[C-5-1] An Association must have at least 2 AssociationEnds.&#13;&#10;context Association inv:&#13;&#10;self.allConnections-&gt;size &gt; 1&#13;&#10;&#13;&#10;[C-5-2] The AssociationEnds must have a unique name within the association.&#13;&#10;context Association inv:&#13;&#10;self.allConnections-&gt;forAll( r1, r2 | r1.name = r2.name implies r1 = r2)&#13;&#10;&#13;&#10;[C-5-3] At most one AssociationEnd may be an aggregation or composition.&#13;&#10;context Association inv:&#13;&#10;self.allConnections-&gt;select(aggregation &lt;&gt; #ak_none)-&gt;size &lt;= 1&#13;&#10;&#13;&#10;[C-5-4] If an Association has three or more AssociationEnds, then no AssociationEnd may be an aggregation or composition.&#13;&#10;context Association inv:&#13;&#10;self.allConnections-&gt;size &gt;=3 implies&#13;&#10;self.allConnections-&gt;forall(aggregation = #ak_none)&#13;&#10;&#13;&#10;[C-5-5] The connected Classifiers of the AssociationEnds should be included in the Namespace of the Association, or be Classifiers with public visibility in other Namespaces to which the Association has access.&#13;&#10;context Association inv:&#13;&#10;self.allConnections-&gt;forAll(r | self.namespace.allContents-&gt;includes (r.type) ) or&#13;&#10;self.allConnections-&gt;forAll(r | self.namespace.allContents-&gt;excludes (r.type))&#13;&#10;   implies&#13;&#10;self.namespace.clientDependency-&gt;exists (d |&#13;&#10;   d.supplier.oclAsType(Namespace).ownedElement-&gt;select (e |&#13;&#10;      e.elementOwnership.visibility = #ak_public)-&gt;includes (r.type) or&#13;&#10;   d.supplier.oclAsType(Classifier).allParents.&#13;&#10;      oclAsType(Namespace).ownedElement-&gt;select (e |&#13;&#10;         e.elementOwnership.visibility = #ak_public)-&gt;includes (r.type) or&#13;&#10;         d.supplier.oclAsType(Package).allImportedElements-&gt;select (e |&#13;&#10;            e.elementImport.visibility = #ak_public) -&gt;includes (r.type) ) )&#13;&#10;&#13;&#10;[C-5-6] An AssociationEnd must have an owning Association.&#13;&#10;context AssociationEnd inv:&#13;&#10;self.owner.oclIsKindOf(Association)&#13;&#10;&#13;&#10;[C-5-7] The Classifier of an AssociationEnd cannot be an Interface or a DataType if the association is navigable away from that end.&#13;&#10;context AssociationEnd inv:&#13;&#10;(self.type.oclIsKindOf (Interface) or&#13;&#10;self.type.oclIsKindOf (DataType)) implies&#13;&#10;self.owner-&gt;select (ae | ae &lt;self)-&gt;forAll(ae | ae.isNavigable = #false)&#13;&#10;&#13;&#10;[C-5-8] An instance may not belong by composition to more than one composite Instance.&#13;&#10;context AssociationEnd inv:&#13;&#10;self.aggregation = #ak_composite implies self.multiplicity.max &lt;= 1&#13;&#10;&#13;&#10;[C-5-9] An AssociationEnd with composite or shared aggregation semantics must be owned by an Association.&#13;&#10;context AssociationEnd inv:&#13;&#10;self.aggregation = #ak_composite or self.aggregation = #ak_shared implies&#13;&#10;self.owner.oclIsKindOf(Association)&#13;&#10;"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="Association" eSuperTypes="#//cwm/objectmodel/core/Class">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An association defines a semantic relationship between classifiers. Associations have two or more named ends. Associations with two or more ends are called &quot;n-ary&quot; whereas associations with exactly two ends are called &quot;binary&quot;. Each end, depending&#13;&#10;upon its multiplicity, connects to zero or more instances of some classifier.&#13;&#10;&#13;&#10;In the metamodel, an Association is a declaration of a semantic relationship between Classifiers, such as Classes. Associations must have two, and may have more, association ends. Each end is connected to a Classifier; the same Classifier may be &#13;&#10;connected to more than one association end in the same association. (Refer to the ObjectModel’s Instance package, below, for a description of how Associations are instantiated.)&#13;&#10;&#13;&#10;Because Associations are classifiers, they own and order their association ends (which are Attributes) via the ClassifierFeature association. In addition, because Associations are Classes, they can also own more traditional StructuralFeatures such as Attributes. Consequently, they may act in a manner similar to &quot;association classes&quot; described by&#13;&#10;some other object models.&#13;&#10;&#13;&#10;An association may represent an aggregation (i.e., a whole/part relationship). In this case, the association end attached to the whole element is designated, and the other association end represents the parts of the aggregation.&#13;&#10;&#13;&#10;Associations can be of three different kinds: (1) ordinary association, (2) composite aggregate, and (3) shareable aggregate. Since the aggregate construct can have several different meanings depending on the application area, CWM gives a more precise meaning to two of these constructs (i.e., association and composite aggregate) and leaves the shareable aggregate more loosely defined in between. Only binary Associations can have composite or sharable aggregation semantics.&#13;&#10;&#13;&#10;Composite aggregation is a strong form of aggregation which requires that a part instance be included in at most one composite at a time and that the composite object has sole responsibility for the disposition of its parts. This means that the composite object is responsible for the creation and destruction of the parts. In implementation terms, it is responsible for their memory allocation. If a composite object is destroyed, it must destroy all of its parts. It may remove a part and give it to another composite object, which then assumes responsibility for it. If the multiplicity from a part to composite is zero-to-one, the composite may remove the part and the part may assume responsibility for itself, otherwise it may not live apart from a  composite.&#13;&#10;&#13;&#10;A consequence of these rules is that a composite aggregation implies propagation semantics (i.e., some of the dynamic semantics of the whole is propagated to its parts). For example, if the whole is copied or destroyed, then so are the parts as well (because a part may belong to at most one composite).&#13;&#10;&#13;&#10;A classifier on the composite end of an association may have parts that are classifiers and associations. At the instance level, an instance of a part element is considered &quot;part of&quot; the instance of a composite element. If an association is part of a composite and it connects two classes that are also part of the same composite, then an instance of the association will connect objects that are part of the same composite object of which the instance is part.&#13;&#10;&#13;&#10;A shareable aggregation denotes weak ownership (i.e., the part may be included in several aggregates) and its owner may also change over time. However, the semantics of a shareable aggregation does not imply deletion of the parts when an aggregate&#13;&#10;referencing it is deleted. Both kinds of aggregations define a transitive, antisymmetric relationship (i.e., the instances form a directed, non-cyclic graph). Composition instances form a strict tree (or rather a forest)."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="AssociationEnd" eSuperTypes="#//cwm/objectmodel/core/StructuralFeature">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An association end is an endpoint of an association, which connects the association to a classifier. Each association end is part of one association. The association ends of each association are ordered.&#13;&#10;&#13;&#10;In the metamodel, an AssociationEnd is part of an Association and specifies the connection of an Association to some other Classifier. Because AssociationEnds are a kind of StructuralFeature, they are owned and ordered by Association instances via the ClassifierFeature association. The StructuralFeatureType association is used to identify the Classifier to which the AssociationEnd is attached. Each AssociationEnd has a name and defines a set of properties of the connection.&#13;&#10;&#13;&#10;The multiplicity property of an association end specifies how many instances of the classifier at a given end (the one bearing the multiplicity value) may be associated with a single instance of the classifier at the other end. The association end also states whether or not the connection may be traversed towards the instance playing that role in the connection (the isNavigable attribute), that is, if the instance is directly reachable via the association."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="aggregation" eType="#//cwm/objectmodel/relationships/AggregationKind">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="When placed on one end (the &quot;target&quot; end), specifies whether the class on the target end is an aggregation with respect to the class on the other end (the &quot;source&quot; end). Only one end of an association can be an aggregation."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isNavigable" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="When placed on a target end, specifies whether traversal from a source instance to its associated target instances is possible. A value of true means that the association can be navigated by the source class and the target rolename can be used in navigation expressions. Specification of navigability for each direction is defined independently."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Generalization" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A generalization is a taxonomic relationship between a more general element and a more specific element. The more specific element is fully consistent with the more general element (it has all of its properties, members, and relationships) and may contain additional information.&#13;&#10;&#13;&#10;In the metamodel, a Generalization is a directed inheritance relationship, uniting a Classifier with a more general Classifier in a hierarchy. Generalization is a subtyping relationship; that is, an instance of the more general (&quot;parent&quot;) Classifier may be substituted by an instance of the more specific (&quot;child&quot;) Classifier.&#13;&#10;&#13;&#10;To understand inheritance fully, it is necessary to understand the concept of a full descriptor and a segment descriptor. A full descriptor is the full description needed to describe an instance of a metamodel object. It contains a description of all of the&#13;&#10;attributes, associations, and operations that the object contains.&#13;&#10;&#13;&#10;In a pre-object-oriented language, the full descriptor of a data structure was declared directly in its entirety. In an object-oriented language, the description of an object is built out of incremental segments that are combined using inheritance to produce a full descriptor for an object. The segments are the modeling elements that are actually declared in a model. Each classifier contains a list of features and other relationships that it adds to what it inherits from its ancestors. The mechanism of inheritance defines how full descriptors are produced from a set of segments connected by  generalization.The full descriptors are implicit, but they define the structure of actual instances. Features of a classifier that have private visibility are not visible to descendants of the classifier.&#13;&#10;&#13;&#10;If a classifier has no parent, then its full descriptor is the same as its segment descriptor. If a classifier has one or more parents, then its full descriptor contains the union of the features from its own segment descriptor and the segment descriptors of all of its ancestors. No attribute, operation, or association end with the same signature may be declared in more than one of the segments (in other words, they may not be redefined). A method may be declared in more than one segment. A method declared in any segment supersedes and replaces a method with the same signature declared in any ancestor. If two or more methods nevertheless remain, then they conflict and the model is ill-formed. The constraints on the full descriptor are the union of the constraints on the segment itself and all of its ancestors. If any of them are inconsistent, then the model is ill-formed.&#13;&#10;&#13;&#10;In any full descriptor for a classifier, each method must have a corresponding operation. In a concrete classifier, each operation in its full descriptor must have a corresponding method in the full descriptor.&#13;&#10;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="child" lowerBound="1" eType="#//cwm/objectmodel/core/Classifier" eOpposite="#//cwm/objectmodel/core/Classifier/generalization">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Classifier instance that acts as a child in the Generalization relationship."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="parent" lowerBound="1" eType="#//cwm/objectmodel/core/Classifier" eOpposite="#//cwm/objectmodel/core/Classifier/specialization">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Classifier instance that acts as a parent in an inheritance hierarchy."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EEnum" name="AggregationKind">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An enumeration that denotes what kind of aggregation an Association defines. When placed on a target end, specifies the relationship of the target end to the source end. &#13;&#10;&#13;&#10;The default value is ak_none."/>
          </eAnnotations>
          <eLiterals name="ak_none">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The end is not an aggregate."/>
            </eAnnotations>
          </eLiterals>
          <eLiterals name="ak_aggregate" value="1">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The end is an aggregate; therefore, the other end is a part and must have the&#13;&#10;aggregation value of none. The part may be contained in other aggregates."/>
            </eAnnotations>
          </eLiterals>
          <eLiterals name="ak_composite" value="2">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The end is a composite; therefore, the other end is a part and must have the aggregation value of none. The part is strongly owned by the composite and may not be part of any other composite.&#13;&#10;"/>
            </eAnnotations>
          </eLiterals>
        </eClassifiers>
      </eSubpackages>
      <eSubpackages name="instance" nsURI="http:///orgomg/cwm/objectmodel/instance.ecore" nsPrefix="orgomg.cwm.objectmodel.instance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The Instance metamodel depends on the following package:&#13;&#10;&#13;&#10;    org.omg::CWM::ObjectModel::Core&#13;&#10;&#13;&#10;In addition to the metadata normally interchanged with CWM, it is sometimes useful to interchange specific data instances as well. The ObjectModel’s Instance metamodel allows the inclusion of data instances with the metadata.&#13;&#10;&#13;&#10;OCL Representation of Instance Constraints&#13;&#10;&#13;&#10;Constraints&#13;&#10;&#13;&#10;[C-6-1] A DataValue originates from a Classifier that is a DataType.&#13;&#10;context DataValue inv:&#13;&#10;self.classifier.oclIsKindOf(DataType)&#13;&#10;&#13;&#10;[C-6-2] A DataValue has no Slots.&#13;&#10;context DataValue inv:&#13;&#10;self.valueSlot-&gt;isEmpty&#13;&#10;&#13;&#10;[C-6-3] An Object may only own Objects and DataValues.&#13;&#10;context Object inv:&#13;&#10;self.contents-&gt;forAll(c | c.oclIsKindOf(Object) or c.oclIsKindOf(DataValue))&#13;&#10;&#13;&#10;[C-6-4] If an Object represents an association, at least two of its ends must be not be empty.&#13;&#10;context Object inv:&#13;&#10;self.classifier.oclIsKindOf(Association) implies&#13;&#10;self.slot.feature-&gt;iterate( ae ; cnt : Integer = 0 |&#13;&#10;if ae.oclIsKindOf(AssociationEnd) and ae.value.notEmpty then&#13;&#10;   cnt + 1&#13;&#10;else&#13;&#10;   cnt&#13;&#10;end if ) &gt; 1&#13;&#10;&#13;&#10;[C-6-5] If the StructuralFeature describing a Slot is an AssociationEnd, the Classifier associated with the Object owning the Slot must be an Association.&#13;&#10;context Slot inv:&#13;&#10;self.feature.oclIsKindOf(AssociationEnd) implies&#13;&#10;self.value.classifier.oclIsKindOf(Association)&#13;&#10;"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="Instance" abstract="true" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The instance construct defines an entity to which a set of operations can be applied and which has a state that stores the effects of the operations. In the metamodel Instance is connected to a Classifier that declares its structure and behavior. It has a set of attribute values matching the definition of its Classifier. The set of attribute values implements the current state of the Instance. Because Instance is an abstract class, all Instances are either Object or DataValue instances.&#13;&#10;&#13;&#10;The data content of an Instance comprises one value for each attribute in its full descriptor (and nothing more). The value must be consistent with the type of the attribute. An instance must obey any constraints on the full descriptor of the Classifier&#13;&#10;of which it is an instance (including both explicit constraints and built-in constraints such as multiplicity).&#13;&#10;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="valueSlot" upperBound="-1" eType="#//cwm/objectmodel/instance/Slot" eOpposite="#//cwm/objectmodel/instance/Slot/value">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the set of Slot instances for which the DataValue or Object instance contains the current value."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="classifier" lowerBound="1" eType="#//cwm/objectmodel/core/Classifier" eOpposite="#//cwm/objectmodel/core/Classifier/instance">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Classifier that describes the structure of the Instance."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Slot" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A slot is a named location in an Object instance that holds the current value of the StructuralFeature associated with the Slot instance. Normally, the StructuralFeature associated with the slot will be either an Attribute instance or an AssociationEnd instance. Slots are owned by Objects; DataValues do not have slots."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1" eType="#//cwm/objectmodel/instance/Instance" eOpposite="#//cwm/objectmodel/instance/Instance/valueSlot">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Instance subtype (either a DataValue or an Object) that holds the current value represented by the Slot instance."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="object" eType="#//cwm/objectmodel/instance/Object" transient="true" eOpposite="#//cwm/objectmodel/instance/Object/slot">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Object instance that owns the Slot instance."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="feature" lowerBound="1" eType="#//cwm/objectmodel/core/StructuralFeature" eOpposite="#//cwm/objectmodel/core/StructuralFeature/slot">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the StructuralFeature instance for which the Slot instance contains the current value."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="DataValue" eSuperTypes="#//cwm/objectmodel/instance/Instance">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A data value is an instance with no identity. In the metamodel, DataValue is a child of Instance that cannot change its state, i.e. all operations that are applicable to it are pure functions or queries that do not cause any side effects. DataValues are typically used&#13;&#10;as attribute values.&#13;&#10;&#13;&#10;Since it is not possible to differentiate between two data values that appear to be the same, it becomes more of a philosophical issue whether there are several data values representing the same value or just one for each value. In addition, a data value cannot change its data type and it does not have contained instances."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A string representation of the value."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Object" eSuperTypes="#//cwm/objectmodel/instance/Instance">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An object is an instance that originates from a class.&#13;&#10;&#13;&#10;In the metamodel, Object is a subclass of Instance originating from a Class. The Class may be modified dynamically, which means that the set of features of the Object may change during its life-time.&#13;&#10;&#13;&#10;An object is an instance that originates from a class; it is structured and behaves according to its class. All objects originating from the same class are structured in the same way, although each of them has its own set of attribute slots. Each attribute slot references an instance, usually a data value or possibly, another object. The number of attribute slots with the same name fulfills the multiplicity of the corresponding attribute in the class. The set may be modified according to the specification in the corresponding attribute, e.g. each referenced instance must originate from (a specialization of) the type of the attribute, and attribute slots may be added or removed according to the changeable property of the attribute."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="slot" upperBound="-1" eType="#//cwm/objectmodel/instance/Slot" containment="true" eOpposite="#//cwm/objectmodel/instance/Slot/object">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the set of Slot instances owned by the Object instance."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Extent" eSuperTypes="#//cwm/objectmodel/core/Package">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Each instance of Extent owns a collection of instances and is used to link such collections to their structural and behavioral definitions in CWM Resource packages. Because Extent is a subclass of package, it owns member instances via the&#13;&#10;ElementOwnership associaton."/>
          </eAnnotations>
        </eClassifiers>
      </eSubpackages>
    </eSubpackages>
    <eSubpackages name="foundation" nsURI="http:///orgomg/cwm/foundation.ecore" nsPrefix="orgomg.cwm.foundation">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The Foundation is a collection of metamodel packages that contain model elements representing concepts and structures that are shared by other CWM packages. Consequently, Foundation model elements often have a more general-purpose nature than model elements found in packages at higher CWM organizational levels.&#13;&#10;&#13;&#10;Foundation model elements in a particular metamodel package are not necessarily intended to describe fully all aspects of concepts and structures they represent. Rather, they are meant to provide a common foundation which other packages can extend as necessary to meet their specific needs.&#13;&#10;&#13;&#10;Foundation model elements differ from ObjectModel elements because they are specific to the goals and purposes of CWM. ObjectModel elements, in contrast, are of a general purpose nature and applicable in diverse areas.&#13;&#10;&#13;&#10;The CWM uses packages to control complexity and create groupings of logically interrelated classes. The Foundation is a collection of packages that are described together because they all provide metamodel services to other CWM packages. A subsection of this chapter is devoted to each of the Foundation packages, presented in alphabetical order. The relationship between the Foundation and each of its constituent packages is shown diagrammatically in the figure.&#13;&#10;&#13;&#10;Organizing the Foundation in this fashion allows the individual metamodel packages to be understood and used independently of each other without sacrificing their common purpose. For example, a CWM extension package supporting a programming language might need the DataTypes, Expressions, TypeMapping and SoftwareDeployment packages but not need the KeysIndexes or BusinessInformation packages.&#13;&#10;"/>
      </eAnnotations>
      <eSubpackages name="businessinformation" nsURI="http:///orgomg/cwm/foundation/businessinformation.ecore" nsPrefix="orgomg.cwm.foundation.businessinformation">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The Business Information package depends on the following package:&#13;&#10;&#13;&#10;    org.omg::CWM::ObjectModel::Core&#13;&#10;&#13;&#10;The Business Information Metamodel provides general purpose services available to all CWM packages for defining business-oriented information about model elements. The business-oriented services described here are designed to support the needs of data warehousing and business intelligence systems; they are not intended as a complete representation of general purpose business intelligence metamodel.&#13;&#10;&#13;&#10;Business Information Metamodel services support the notions of responsible parties and information about how to contact them, identification of off-line documentation and support for general-purpose descriptive information. Three CWM classes &quot;anchor&quot; these services: ResponsibleParty, Document and Description, respectively.&#13;&#10;&#13;&#10;To aid in representing the diversity of organizational structures and documentation relationships that may be encountered in a business intelligence system, the metamodel provides robust relationships between the anchor classes and every model element in the CWM metamodel. The necessary robustness is achieved in several ways.&#13;&#10;&#13;&#10;First, every CWM model element may have zero or more instances of each anchor class associated with it. This means, for example, that a single Description instance can be used to describe many different model elements. Conversely, a single model element may be described by many different Description instances. Likewise, Document and ResponsibleParty instances can be associated in completely ad hoc ways with any model element. Extending this idea means, for example, that Description instances could be used to further describe ResponsibleParty and Document instance, if needed.&#13;&#10;&#13;&#10;Second, because they are Namespaces, the anchor classes can be organized into hierarchies using the ElementOwnership association. For instance, an organizational structure can be represented by a hierarchy of ResponsibleParty instances. Also, the internal structure of a document (i.e., its chapters, sections, subsections, etc.) might be represented by a hierarchy of Document instances.&#13;&#10;&#13;&#10;Finally, instances of the three anchor classes can be associated with any model element (via their individual associations to ModelElement) and referenced by multiple instances of any of the three anchor classes. Because of the strong containment of the ElementOwnership association in the ObjectModel, anchor class instances can only participate in one hierarchy, but there are no restrictions preventing anchor class instances embedded in a hierarchy from referencing, or being referenced by, other model elements (even other members of the same hierarchy).&#13;&#10;&#13;&#10;To illustrate some of the ways that the metamodel can be used, the following figure shows a simple document hierarchy with responsibility assignments and descriptive comments (boxes represent instances of metamodel classes and labelled lines represent metamodel associations connecting instances). In the example, the product plan document for the Widget product is composed of three subplans: a marketing plan, an engineering plan, and a resource plan. The relationships between the subplans documents is shown as a hierarchy with the product plan owning the three subordinate plans via the ElementOwnership association. Each part of the plan is assigned to a reponsible party using the ModelElementResponsibility association. Finally, Description instances are used to record roles for the responsible parties.&#13;&#10;&#13;&#10;OCL Representation of BusinessInformation Constraints&#13;&#10;&#13;&#10;[C-3-1] A Description may not describe itself.&#13;&#10;context Description inv:&#13;&#10;self.modelElement-&gt;forAll(p | p &lt;&gt; self)&#13;&#10;&#13;&#10;[C-3-2] A Document may not describe itself.&#13;&#10;context Document inv:&#13;&#10;self.modelElement-&gt;forAll(p | p &lt;&gt; self)&#13;&#10;&#13;&#10;[C-3-3] A ResponsibleParty may not describe itself.&#13;&#10;context ResponsibleParty inv:&#13;&#10;self.modelElement-&gt;forAll(p | p &lt;&gt; self)"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="ResponsibleParty" eSuperTypes="#//cwm/objectmodel/core/Namespace">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The ResponsibleParty class allows representation of entities within an information system that are in some way interested in receiving information about, or are otherwise responsible for, particular ModelElements. Each ResponsibleParty may own multiple sets of contact information, and a single ResponsibleParty may be associated with many ModelElements.&#13;&#10;&#13;&#10;ResponsibleParty instances may represent any entity appropriate to the system being modeled and need not be limited to people. For example, a ResponsibleParty instance might represent an individual such as &quot;George Washington&quot;, a role (the &quot;President&quot;), or an organization (&quot;Congress&quot;), depending upon the needs of the system being modeled. Similarly, the precise semantics of the responsibility attribute are open to intrepretation and may be adapted on a system-by-system basis.&#13;&#10;&#13;&#10;Because ResponsibleParty instances are Namespaces, they can be organized into hierarchies of ResponsibleParty instances, capturing organizational structures or similar relationships."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="responsibility" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Textual identification or description of the ResponsibleParty in a usage-dependent format."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="modelElement" upperBound="-1" eType="#//cwm/objectmodel/core/ModelElement" eOpposite="#//cwm/objectmodel/core/ModelElement/responsibleParty">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the model elements for which this ResponsibleParty instance has some interest or responsibility. "/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Telephone" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Instances of the Telephone class represent telephone contact information.&#13;&#10;&#13;&#10;Because telephones are first class objects within the CWM, they can be used for purposes beyond those associated with the CWM Foundation’s Business Information concepts."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="phoneNumber" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A textual representation of the telephone’s number."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="phoneType" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A textual representation of the telephone’s type, such as &quot;multi-line&quot;, or its usage,&#13;&#10;such as &quot;home&quot;, &quot;work&quot;, &quot;fax&quot;, or &quot;mobile&quot;."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="contact" upperBound="-1" eType="#//cwm/foundation/businessinformation/Contact" eOpposite="#//cwm/foundation/businessinformation/Contact/telephone">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Contact instance(s) for which the Telephone instance is relevant."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Email" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An Email instance identifies a single email address. Via a Contact instance, an email address can be associated with one or more ResponsibleParty instances. Email instances might, for example, be used by an automated tool to send an automatically generated email message to a ResponsibleParty instance responsible about some change of state for a particular ModelElement. Multiple Email instances may be associated with a single Contact instance and the ordering of the association between them may be used to represent the sequence in which the Email instances should be contacted.&#13;&#10;&#13;&#10;Because email addresses are first class objects within the CWM, they can be used for purposes beyond those associated with the CWMFoundation’s Business Information concepts."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="emailAddress" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A textual representation of an email address."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="emailType" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Contains a textual representation of the type of the email address. Interesting values might include location information such as &quot;home&quot; or &quot;work&quot;, or perhaps an indication of the type of email system for which the eMailAddress is formatted, such as &quot;SMTP&quot; or &quot;X.400&quot;."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="contact" upperBound="-1" eType="#//cwm/foundation/businessinformation/Contact" eOpposite="#//cwm/foundation/businessinformation/Contact/email">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Email instances associated with this Contact instance. The ordered constraint may be used to identify the order in which Email instances should be contacted."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Location" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Instances of the Location class represent physical locations. Note that the name of a Location is derived from its superclass, ModelElement.&#13;&#10;&#13;&#10;Because Locations are first class objects within the CWM, they can be used for purposes beyond those associated with the CWM Foundation’s Business Information concepts. If additional attributes about Location instances are required, they should be added by creating subtypes of the Location class and placing the additional attributes therein."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="locationType" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Descriptive information about the character or identity of the Location instance."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="address" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The address of the Location instance. The precise content of this string is usage-defined."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="city" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The name of the city in which the Location instance is found. The precise content of this string is usage-defined."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="postCode" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The postal code of the Location instance. The precise content of this string is usage-defined."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="area" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The area in which the Location instance is found. The precise content of this string is usage-defined, but a common usage would be to refer to a geographical subdivision such as a state or province."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="country" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The name of the country in which the Location instance is found. The precise content of this string is usage-defined."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="contact" upperBound="-1" eType="#//cwm/foundation/businessinformation/Contact" eOpposite="#//cwm/foundation/businessinformation/Contact/location">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Contact instance(s) with which this Location instance is associated."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Contact" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Each Contact instance collects together the various types of related contact information. Each Contact instance can be associated with multiple Email, Location and Telephone instances. Conversely, each Email, Location, ResourceLocator and Telephone instance can be associated with many Contact instances. The ordering constraints on the associations between these classes and the Contact class can be used to represent a prioritized sequence in which the various types of contact information  should be used.&#13;&#10;&#13;&#10;A particular ResponsibleParty instance may have multiple instances of Contact associated with it via the ResponsiblePartyContact association. This association is ordered to support representation of the sequence in which Contact instances should be used. For example, a ResponsibleParty instance representing an employee might be associated with Contact instances representing their office, home, and mobile contact information with an indication that the employee should be contacted first at the office, then at home, and finally via their mobile phone.&#13;&#10;&#13;&#10;To maximize flexibility of the metamodel, Contact instances may provide contact information for multiple ResponsibleParty instances."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="email" upperBound="-1" eType="#//cwm/foundation/businessinformation/Email" eOpposite="#//cwm/foundation/businessinformation/Email/contact">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Contact instance(s) for which this Email instance is relevant."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="location" upperBound="-1" eType="#//cwm/foundation/businessinformation/Location" eOpposite="#//cwm/foundation/businessinformation/Location/contact">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Location instances associated with this Contact instance. The ordered constraint may be used to identify the order in which Location instances should be contacted."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="url" upperBound="-1" eType="#//cwm/foundation/businessinformation/ResourceLocator" eOpposite="#//cwm/foundation/businessinformation/ResourceLocator/contact">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ResourceLocator instances related to this ContactInfo instance. Note that the ordered constraint on this role can be used to indicate the sequence in which ResourceLocator should be contacted."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="telephone" upperBound="-1" eType="#//cwm/foundation/businessinformation/Telephone" eOpposite="#//cwm/foundation/businessinformation/Telephone/contact">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Telephone instance associated with this Contact instance. The ordered constraint may be used to identify the order in which Telephone instances should be contacted."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Description" eSuperTypes="#//cwm/objectmodel/core/Namespace">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Instances of the Description class contain arbitrary textual information relevant to a particular ModelElement. While Description instances may contain any desired textual information, they will typically contain documentation or references to external reference information about the owning ModelElement.&#13;&#10;&#13;&#10;Any ModelElement may have multiple Description instances associated with it. Indeed, a ModelElement instance that is a Description instance may itself have multiple Description instances linked to it. Also, a hierarchies of Description instances can be constructed.&#13;&#10;&#13;&#10;Description instances are meant to hold descriptive textual information that will be stored in the metamodel itself. In contrast, Document instances are meant to describe the location documentary information stored outside the metamodel.&#13;&#10;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="body" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Contains a textual description of information pertaining to the owning ModelElement. "/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="language" eType="#//cwm/objectmodel/core/Name">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Contains an identification of the language in which the content of the body attribute is specified. If desired, the language specification may be applied to the name attribute derived from ModelElement as well."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Contains a textual description of the type of information the Description represents. Specific contents are usage defined."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="modelElement" upperBound="-1" eType="#//cwm/objectmodel/core/ModelElement" eOpposite="#//cwm/objectmodel/core/ModelElement/description">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ModelElement instances for which this Description instance is relevant."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Document" eSuperTypes="#//cwm/objectmodel/core/Namespace">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The Document class represents externally stored descriptive information about some aspect of the modeled system. An instance of Document might be associated with one or more ModelElements. The name of a Document instance is derived from its superclasses.&#13;&#10;&#13;&#10;Although the purposes of the Description and Document types may overlap somewhat, their chief distinction is that Description instances are stored with the CWM metadata whereas Documentation instances are stored externally to the CWM metadata. Although there is an implication here that Documentation instances might represent more voluminous information than Description instances, there is no particular requirement that this be so.&#13;&#10;&#13;&#10;Because Documentation instances are themselves Namespace instances, hierarchical relationships between various externally stored documents can be represented."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="reference" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Contains a textual representation of the identification, and perhaps the physical location, of externally maintained documentary information about some aspect of the ModelElement(s) with which the Document instance is associated."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Contains a textual description of the type of information the Document represents. Specific contents are usage defined."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="modelElement" upperBound="-1" eType="#//cwm/objectmodel/core/ModelElement" eOpposite="#//cwm/objectmodel/core/ModelElement/document">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ModelElement instances for which this Document instance is relevant."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ResourceLocator" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Instances of the ResourceLocator class provide a general means for describing the resources whose location is not defined by a traditional mailing address. For example, a ResourceLocator instance could refer to anything from a location within a building (&quot;Room 317, third file cabinet, 2nd drawer&quot;) to a web location (&quot;www.omg.org&quot;).&#13;&#10;&#13;&#10;Because they are first class objects in the CWM, ResourceLocator instances may also be used for purposes beyond those associated with the CWM Foundation's Business Information concepts."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="url" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Contains the text of the resource location. For Internet locations, this will be a web URL (Uniform Resource Locator) but there is no requirement that this be so. In fact, the string can contain any text meaningful to its intended use in a particular environment."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="contact" upperBound="-1" eType="#//cwm/foundation/businessinformation/Contact" eOpposite="#//cwm/foundation/businessinformation/Contact/url">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Contact instances for which a ResourceLocator instance is relevant."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
      </eSubpackages>
      <eSubpackages name="datatypes" nsURI="http:///orgomg/cwm/foundation/datatypes.ecore" nsPrefix="orgomg.cwm.foundation.datatypes">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The DataTypes package depends on the following packages:&#13;&#10;&#13;&#10;    org.omg::CWM::ObjectModel::Core&#13;&#10;&#13;&#10;The CWM DataTypes metamodel supports definition of metamodel constructs that modelers can use to create the specific data types they need. Although the CWM Foundation itself does not contain specific data type definitions, a number of data type definitions for widely used environments are provided (in the CWM Data Types chapter) as examples of the appropriate usage of CWM Foundation classes for creating&#13;&#10;data type definitions.&#13;&#10;&#13;&#10;OCL Representation of DataTypes Constraints&#13;&#10;&#13;&#10;[C-4-1] A TypeAlias instance cannot alias itself.&#13;&#10;context TypeAlias inv:&#13;&#10;self.type &lt;&gt; self&#13;&#10;&#13;&#10;[C-4-2] A Union can have at most one default UnionMember instance.&#13;&#10;context Union inv:&#13;&#10;self.allFeatures-&gt;select(isDefault)-&gt;size &lt;= 1&#13;&#10;"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="Enumeration" eSuperTypes="#//cwm/objectmodel/core/DataType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The Enumeration class is intended as a starting point from which enumerated data types can be created. An enumerated data type is a collection of identifiers often used as the permitted states that some other attribute or property of the enumerated type may take.&#13;&#10;&#13;&#10;The isOrdered attribute of an Enumeration instance is used to determine if the ordered constraint on the EnumerationLiterals association is relevant for the enumeration. The particular ordering of EnumerationLiteral instances is obtained from the ordered constraint on the association even if the value attributes of the EnumerationLiteral instances contain non-null values that might be used to determine ordering. This is done to provide more flexible ordering semantics.&#13;&#10;&#13;&#10;An instance of Enumeration is also required to create a range data type. Refer to the EnumerationLiteral class for details."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isOrdered" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="If True, the ordered constraint on the EnumerationLiterals association is relevant. Otherwise, the ordering of EnumerationLiteral instances is considered unspecified.&#13;&#10;"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="literal" lowerBound="1" upperBound="-1" eType="#//cwm/foundation/datatypes/EnumerationLiteral" containment="true" eOpposite="#//cwm/foundation/datatypes/EnumerationLiteral/enumeration">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the EnumerationLiteral instances relevant for a particular Enumeration instance. If the Enumeration’s isOrdered attribute is True, the ordering constraint on this association end can be used to determine a logical ordering for the EnumerationLiteral instances. Otherwise, ordering is ignored."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="EnumerationLiteral" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="EnumerationLiteral instances describe the enumeration identifiers, and possibly the&#13;&#10;values, associated with an enumerated data type. Enumeration identifiers are contained&#13;&#10;in the name attribute derived from the EnumerationLiteral instance’s ModelElement superclass.&#13;&#10;&#13;&#10;EnumerationLiteral instances may also be used to define expression-based values such as ranges. To do so, simply state the membership expression in the instance’s value. For example, a range literal can be created by setting the value attribute to &quot;m..n&quot;, where m represents the lower bound of the range, and n, the upper bound. In this way, ranges and other more complicated expressions can be intermixed with simple&#13;&#10;enumeration literals. For example, an enumeration might contain the literals &quot;1&quot;, &quot;2&quot;, &quot;4..7&quot;, and &quot;&gt; 10&quot;.&#13;&#10;&#13;&#10;Consequently, a simple range data type can be created with an Enumeration instance that owns a single EnumerationLiteral instance. For example, a data type for positive integers could be created as shown in the following instance diagram. A model attribute of this data type might then be declared as &quot;posInt : PositiveInteger&quot;."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="value" eType="#//cwm/objectmodel/core/Expression" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The value associated with an enumeration identifier can be stored here. The attribute is optional because enumeration literals are not required to have a specific, displayable value. This is indicated by either an empty value attribute or a value attribute value whose expression body attribute is a zero-length string."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="enumeration" lowerBound="1" eType="#//cwm/foundation/datatypes/Enumeration" transient="true" eOpposite="#//cwm/foundation/datatypes/Enumeration/literal">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Enumeration instance for which this enumeration literal is relevant."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="QueryExpression" eSuperTypes="#//cwm/objectmodel/core/ProcedureExpression">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="QueryExpression instances contain query statements in language-dependent form."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeAlias" eSuperTypes="#//cwm/objectmodel/core/DataType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The TypeAlias class is intended to provide a renaming capability for Classifier instances. This class is required to support situations in which creation of an alias for a class effectively creates a new class. For example, CORBA IDL type aliases have different typeCodes than their base types and are therefore treated as distinct types."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="#//cwm/objectmodel/core/Classifier" eOpposite="#//cwm/objectmodel/core/Classifier/alias">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Classifier instance for which this TypeAlias instance acts as an alias."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Union" eSuperTypes="#//cwm/objectmodel/core/Classifier">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The Union class represents programming language unions and similarly structured data types. Because of the diversity of union semantics found across software systems, the Union and UnionMember classes are likely candidates for specialization to better capture union semantics in specific language extension packages.&#13;&#10;&#13;&#10;A discriminated Union has a collection of UnionMembers that determine the sets of contents that the Union may contain. Such Unions have an attribute called the discriminator that identifies the memberCase value of the UnionMember that the Union currently contains. The discriminator is found via the UnionDiscriminator association to StructuralFeature. The discriminator may be embedded within UnionMembers or may be located outside the discriminator. If it is located within UnionMembers, the discriminator should occur in every UnionMember at the same location (often, the first).&#13;&#10;&#13;&#10;Undiscriminated unions (for example, a C language union) are also supported, but have an empty discriminator reference, and the memberCase attribute of the UnionMembers it contains is ignored.&#13;&#10;&#13;&#10;Undiscriminated Unions are often used to represent alternate views of a single physical&#13;&#10;storage area. A fine degree of control over this aspect of Unions may be obtained by&#13;&#10;creating a class that derives from both UnionMember and FixedOffsetField (in the&#13;&#10;CWM Record package) and setting the offset attribute instances of that class&#13;&#10;accordingly."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="discriminator" eType="#//cwm/objectmodel/core/StructuralFeature" eOpposite="#//cwm/objectmodel/core/StructuralFeature/discriminatedUnion">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the StructuralFeature instance that serves as the discriminator for the Union."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="UnionMember" eSuperTypes="#//cwm/objectmodel/core/Attribute">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="UnionMembers are described as features of a Union and each represents one of the members of a Union. Note, however, that multiple case values can map to a single UnionMember. If isDefault is true, the union member is the default member.&#13;&#10;&#13;&#10;UnionMember instances are allowed to have a memberCase and be the default case. UnionMember instances often represent structured storage areas. A particular UnionMember may be associated with a Classifier that describes its internal structure via the StructuralFeatureType association (defined in the ObjectModel::Core package). For example, the Record::Group class, itself a Classifier, can be used as the type of a UnionMember in a manner completely analogous to how it is used to describe the type of a structured field (see the instance diagrams in the Record metamodel chapter for details)."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="memberCase" eType="#//cwm/objectmodel/core/Expression" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Contains the value of the Union’s discriminator for this UnionMember."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDefault" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Indicates if this UnionMember is the default member of the Union (implying that when unstated, the Union’s discriminator would assume this instance’s memberCase value)."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
      </eSubpackages>
      <eSubpackages name="expressions" nsURI="http:///orgomg/cwm/foundation/expressions.ecore" nsPrefix="orgomg.cwm.foundation.expressions">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The Expressions package depends on the following packages:&#13;&#10;&#13;&#10;    org.omg::CWM::ObjectModel::Core&#13;&#10;&#13;&#10;The CWM Expressions metamodel provides basic support for the definition of expression trees within the CWM. The intent of the Expressions metamodel is to provide a place for other CWM packages (such as Transformation) and CWM compliant tools to record shared expressions in a common form that can be used for interchange and lineage tracking.&#13;&#10;&#13;&#10;The expression concept in the CWM Foundation takes a functional view of expression trees, resulting in the ability of relatively few expression types to represent a broad range of expressions. Every function or traditional mathematical operator that appears in an expression hierarchy is represented as a FeatureNode. For example, the arithmetic plus operation “a + b” can be thought of as the function “sum(a, b).” The semantics of a particular function or operation are left to specific tool implementations and are not captured by the CWM. &#13;&#10;&#13;&#10;The hierarchical nature of the CWM’s representation of expressions is achieved by the recursive nature of the OperationArgument association. This association allows the sub-hierarchies within an expression to be treated as actual parameters of their parent nodes.&#13;&#10;&#13;&#10;OCL Representation of Expressions Constraints&#13;&#10;&#13;&#10;[C-5-1] A FeatureNode that has parameters other than the&quot;this&quot; parameter represents a Feature that is also an Operation.&#13;&#10;context FeatureNode inv:&#13;&#10;if self.feature.ownerScope = #instance&#13;&#10;then self.argument-&gt;size &gt; 1 implies&#13;&#10;   self.feature.oclIsKindOf(Operation)&#13;&#10;else self.argument-&gt;size &gt; 0 implies&#13;&#10;   self.feature.oclIsKindOf(Operation)&#13;&#10;endif&#13;&#10;&#13;&#10;[C-5-2] If the FeatureNode represents an instance-scope feature, the first argument is a &quot;this&quot; or &quot;self&quot; argument; that is, the object invoking the feature. The convention is enforced by checking that the type of the first argument is the same as the type of the feature.&#13;&#10;context FeatureNode inv:&#13;&#10;self.feature.ownerScope = #instance implies&#13;&#10;self.argument-&gt;first.type.allFeatures-&gt;includes(self.feature)&#13;&#10;&#13;&#10;[C-5-3] If the FeatureNode represents a BehavioralFeature, the number of arguments must be equal to the number of the BehavioralFeature’s parameters, plus one for the “this” parameter if the BehavioralFeature is of instance scope.&#13;&#10;context FeatureNode inv:&#13;&#10;self.feature.oclIsKindOf(BehavioralFeature) implies&#13;&#10;(if self.feature.ownerScope = #instance&#13;&#10;   then self.argument-&gt;size =&#13;&#10;      self.feature.oclAsType(BehavioralFeature).parameters-&gt;size + 1&#13;&#10;   else self.argument-&gt;size =&#13;&#10;      self.feature.oclAsType(BehavioralFeature).parameters-&gt;size&#13;&#10;endif)"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="ExpressionNode" eSuperTypes="#//cwm/objectmodel/core/Element">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="All node types within an expression are derived from the ExpressionNode type.&#13;&#10;&#13;&#10;An expression is stored as a collection of instances of the subtypes of ExpressionNode arranged in a hierarchical fashion. The ExpressionNode instance at the top (or “root”) of the hierarchy represents the value of the expression and serves as a starting point for expression evaluation. Refer to the descriptions of the subtypes of ExpressionNode (ElementNode, ConstantNode, and FeatureNode) for additional information about the representation of expressions.&#13;&#10;&#13;&#10;One important purpose for providing storage of expressions as a general feature of the CWM is to promote sharing them between tools and to provide a means for recording lineage relationships between components within expressions. Specific details of the implementation of expression operators are left to the implementing tools.&#13;&#10;&#13;&#10;When ExpressionNode is used as the type of an Attribute, an instance of the Attribute can contain either an expression tree as described here or a textual representation of the expression in body and language values of in an attribute of type Expression (defined ObjectModel). The expression attribute is provided for the latter usage. To obtain CWM’s sharing and lineage tracking features for elements within an expression, the expression must be represented as an expression hierarcy."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="expression" eType="#//cwm/objectmodel/core/Expression" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Contains a textual representation of the expression relevant for this ExpressionNode instance."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//cwm/objectmodel/core/Classifier" eOpposite="#//cwm/objectmodel/core/Classifier/expressionNode">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Classifier instance that represents the type of the expression at this level in the expression hierarchy. Although, formally, each node within an expression tree is capable of having a value and therefore, a data type, this reference is optional because modeling the data type of intermediate nodes in an expression tree is not always interesting, thereby reducing the effort required to create expression trees."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="featureNode" eType="#//cwm/foundation/expressions/FeatureNode" transient="true" eOpposite="#//cwm/foundation/expressions/FeatureNode/argument">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the FeatureNode for which this ExpressionNode instance represents the value of an argument. Because arguments can themselves represent entire expression sub-trees, this reference is used to create hierarchies of expression nodes, permitting representation of entire expression trees within the CWM."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ConstantNode" eSuperTypes="#//cwm/foundation/expressions/ExpressionNode">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Instances of the ConstantNode class are ExpressionNodes that represent constant values within expressions. Appropriate uses of the ConstantNode class place the values of constants in the value attribute, rather than in the expression::body attribute inherited from ExpressionNode. The latter attribute is intended for a different purpose; see the description of the ExpressionNode class for details."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="#//cwm/objectmodel/core/Any">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The value of a constant in an expression tree."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ElementNode" eSuperTypes="#//cwm/foundation/expressions/ExpressionNode">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An ElementNode is a node in an expression that references some ModelElement instance. This subclass of ExpressionNode allows an expression to reference any CWM model element that is not a Feature and cannot, therefore, be represented as a FeatureNode.&#13;&#10;&#13;&#10;Typically, use of this subclass of ExpressionNode implies that a tool attempting to evaluate the expression will be able to determine if the referenced ModelElement instance is also an instance of some interesting subclass of ModelElement that contains a value of interest in the expression.&#13;&#10;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="modelElement" lowerBound="1" eType="#//cwm/objectmodel/core/ModelElement" eOpposite="#//cwm/objectmodel/core/ModelElement/elementNode">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ModelElement instance which this ElementNode references."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="FeatureNode" eSuperTypes="#//cwm/foundation/expressions/ExpressionNode">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The FeatureNode class represents ExpressionNode instances that are features (i.e., attributes or operations) of some Classifier instance within the CWM.&#13;&#10;&#13;&#10;A FeatureNode with a null OperationArgument association represents either a parameter-less operation or an attribute value obtained from some StructuralFeature instance."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="feature" lowerBound="1" eType="#//cwm/objectmodel/core/Feature" eOpposite="#//cwm/objectmodel/core/Feature/featureNode">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Feature (attribute or operation) which this FeatureNode instance represents."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="argument" upperBound="-1" eType="#//cwm/foundation/expressions/ExpressionNode" containment="true" eOpposite="#//cwm/foundation/expressions/ExpressionNode/featureNode">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ExpressionNode instances that represent the actual arguments for this FeatureNode. If the argument reference is null, the FeatureNode is an attribute or parameter-less function or operation."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
      </eSubpackages>
      <eSubpackages name="keysindexes" nsURI="http:///orgomg/cwm/foundation/keysindexes.ecore" nsPrefix="orgomg.cwm.foundation.keysindexes">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The KeysIndexes package depends on the following package:&#13;&#10;&#13;&#10;    org.omg::CWM::ObjectModel::Core&#13;&#10;&#13;&#10;Keys and indexes as means for specifying instances and for identifying alternate sortings of instances are  epresented in the CWMFoundation so that they can be shared among the various data models that employ hem. The CWM Foundation defines the base concepts (uniqueness and relationships implemented as keys)  pon which more specific key structures can be built by other CWM and tool-specific packages.&#13;&#10;&#13;&#10;The concepts of key and index have been placed in the CWM Foundation because they are available in many  types of data resources. In the CWM Foundation class and association descriptions that follow, relational model  examples are frequently used when discussing the definition and usage of key and index types. This is done because of the wide-spread availability of relational systems and is thought to promote an understanding of the underlying concepts. These concepts, however, are no less applicable to other data models as well.&#13;&#10;&#13;&#10;The two central classes for representing the concept of keys are UniqueKey and KeyRelationship. UniqueKey instances correspond to the notion that keys represent the identity of instances -- similar to the relational model’s concept of a primary key or an object model’s concept of an object identity. In contrast, KeyRelationship instancescorrespond to the notion that keys embedded in an instance can be used to determine the identity of other related instances -- similar to the relational model concept of foreign key and the object model concept of a reference. Consequently, UniqueKey and KeyRelationship are best thought of as representing roles that collections of Features of Classifiers play rather than Classifiers describing the internal structure of keys. Representing keys as roles rather than structural entities provides greater flexibility and allows the reuse of  Features in multiple keys and in differing relationships to each other. Associations within the KeysIndexes package describe how UniqueKey and KeyRelationship instances describe the roles they play for various&#13;&#10;Class instances and the StructuralFeature instances they contain.&#13;&#10;&#13;&#10;OCL Representation of KeysIndexes Constraints&#13;&#10;&#13;&#10;[C-6-1]The isAscending attribute is valid only if the isSorted attribute is True.&#13;&#10;context IndexedFeature inv:&#13;&#10;self.isAscending-&gt;notEmpty implies self.index.isSorted&#13;&#10;&#13;&#10;[C-6-2] A KeyRelationship instance must be owned by one and only one Class&#13;&#10;instance.&#13;&#10;context KeyRelationship inv:&#13;&#10;(self.namespace-&gt;size = 1) and self.namespace.oclIsKindOf(Class)&#13;&#10;&#13;&#10;[C-6-3] An UniqueKey instance must be owned by one and only one Class instance.&#13;&#10;context UniqueKey inv:&#13;&#10;(self.namespace-&gt;size = 1) and self.namespace.oclIsKindOf(Class)"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="UniqueKey" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A UniqueKey represents a collection of features of some Class that, taken together, uniquely identify instances of the Class. Instances of UniqueKey for which all features are required to have non-null values are candidates for use as primary keys such as those defined by relational DBMSs."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="feature" lowerBound="1" upperBound="-1" eType="#//cwm/objectmodel/core/StructuralFeature" eOpposite="#//cwm/objectmodel/core/StructuralFeature/uniqueKey">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the StructuralFeature instances that make up the unique key. The ordered constraint is used to represent the sequence of StructuralFeature instances that make up the UniqueKey instance’s key.&#13;&#10;"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="keyRelationship" upperBound="-1" eType="#//cwm/foundation/keysindexes/KeyRelationship" eOpposite="#//cwm/foundation/keysindexes/KeyRelationship/uniqueKey">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the KeyRelationship instances that reference this UniqueKey instance. In the relational case, this reference identifies the foreign keys that reference this primary key."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Index" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Instances of the Index class represent the ordering of the instances of some other Class, and the Index is said to &quot;span&quot; the Class. Indexes normally have an ordered set of attributes of the Class instance they span that make up the &quot;key&quot; of the index; this set of relationships is represented by the IndexedFeature class that indicates how the attributes are used by the Index instance.&#13;&#10;&#13;&#10;The Index class is intended primarily as a starting point for tools that require the notion&#13;&#10;of an index."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isPartitioning" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="If True, this Index instance is used as a partitioning index."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isSorted" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="If True, the Index instance is maintained in a sorted order."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isUnique" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The isUnique attribute is True if the Index instance guarantees all of its instances have a unique key value."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="indexedFeature" upperBound="-1" eType="#//cwm/foundation/keysindexes/IndexedFeature" containment="true" eOpposite="#//cwm/foundation/keysindexes/IndexedFeature/index">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the IndexedFeature instance that associates this Index with one of the StructuralFeature elements of the Index’s key. The ordered constraint on this reference can be used to represent the sequential order of elements of the Index’s key."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="spannedClass" lowerBound="1" eType="#//cwm/objectmodel/core/Class" eOpposite="#//cwm/objectmodel/core/Class/index">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Class instance the Index instance spans."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="KeyRelationship" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="KeyRelationship instances represent relationships between UniqueKey instances and the Class(es) that reference them. This class is intended as a starting point for the creation of &quot;foreign key&quot; and other associative relationships."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="feature" lowerBound="1" upperBound="-1" eType="#//cwm/objectmodel/core/StructuralFeature" eOpposite="#//cwm/objectmodel/core/StructuralFeature/keyRelationship">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the StructuralFeature instances that make up the unique key. The ordered constraint is used to represent the sequence of StructuralFeature instances that make up the UniqueKey instance’s key. In the relational model case, these StructuralFeature instances identify the columns that make up a table’s primary key."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="uniqueKey" lowerBound="1" eType="#//cwm/foundation/keysindexes/UniqueKey" eOpposite="#//cwm/foundation/keysindexes/UniqueKey/keyRelationship">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the UniqueKey instance that serves as the &quot;primary key&quot; for this KeyRelationship instance."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="IndexedFeature" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Instances of the IndexedFeature class map StructuralFeature instances of the spanned Class instance to the Index instances that employ them as (part of) their key. Attributes of IndexedFeature instances indicate how specific StructuralFeature instance are used in Index keys."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isAscending" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The isAscending attribute is true if the feature is sorted in ascending order and false, if descending order."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="feature" lowerBound="1" eType="#//cwm/objectmodel/core/StructuralFeature" eOpposite="#//cwm/objectmodel/core/StructuralFeature/indexedFeature">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the StructuralFeature instance for which this IndexedFeature instance is relevant."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="index" lowerBound="1" eType="#//cwm/foundation/keysindexes/Index" transient="true" eOpposite="#//cwm/foundation/keysindexes/Index/indexedFeature">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Index instance for which this IndexedFeature instance is relevant."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
      </eSubpackages>
      <eSubpackages name="softwaredeployment" nsURI="http:///orgomg/cwm/foundation/softwaredeployment.ecore" nsPrefix="orgomg.cwm.foundation.softwaredeployment">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The Software Deployment package depends on the following packages:&#13;&#10;&#13;&#10;    org.omg::CWM::ObjectModel::Core&#13;&#10;    org.omg::CWM::Foundation::BusinessInformation&#13;&#10;    org.omg::CWM::Foundation::TypeMapping&#13;&#10;&#13;&#10;The Software Deployment package contains classes to record how the software in a data warehouse is used.&#13;&#10;&#13;&#10;A software package is represented as a SoftwareSystem object, which is a subtype of Subsystem. A SoftwareSystem may reference one or more TypeSystems that define the datatypes supported by the SoftwareSystem. The mappings between datatypes in different TypeSystems may be recorded as TypeMappings, as described in the TypeMapping metamodel.&#13;&#10;&#13;&#10;The separate components of a software package are each represented as Components that are either owned or imported by the SoftwareSystem. When a SoftwareSystem is installed, the deployment is recorded as a DeployedSoftwareSystem and a set of DeployedComponents.&#13;&#10;&#13;&#10;A DeployedComponent represents the deployment of a specific Component on a specific computer. Dependencies between DeployedComponents on the same computer may be documented as Usage dependencies between them.&#13;&#10;&#13;&#10;Individual computers are represented as Machine objects, located at a Site. A Site represents a geographical location, which may be recorded at any relevant level of granularity, e.g. a country, a building, or a room in a building. Hierarchical links between Sites at different levels of granularity may be documented.&#13;&#10;&#13;&#10;A DataManager is a DeployedComponent such as a DBMS or file management system that provides access to data. It may be associated with one or more data Packages identifying the Schema, Relational Catalog, Files or other data containers that it provides access to.&#13;&#10;&#13;&#10;A DataProvider is a DeployedComponent that acts as a client to provide access to data held by a DataManager. For example, an ODBC or JDBC client on a specific Machine would be represented as a DataProvider. A DataProvider may have several ProviderConnections, each identifying a DataManager that may be accessed using the DataProvider.&#13;&#10;&#13;&#10;If a DataProvider uses a name for a data Package that is different from the actual name used by the DataManager, a PackageUsage object can be added to record this. &#13;&#10;&#13;&#10;As a DataProvider is a subtype of DataManager, it is possible for a DataProvider to access data from a DataManager which is actually a DataProvider acting as a client to yet another DataManager.&#13;&#10;&#13;&#10;The model for the Software Deployment package is shown in three diagrams. The first diagram shows the objects related to software deployment, while the second diagram displays the DataManager and DataProvider area of the model. The third diagram shows the inheritance structure for all the classes in the Software Deployment package.&#13;&#10;&#13;&#10;OCL Representation of SoftwareDeployment Constraints&#13;&#10;&#13;&#10;[C-8-1] A PackageUsage must have a single Package (or subtype of Package) as its supplier&#13;&#10;context PackageUsage inv:&#13;&#10;self.supplier-&gt;size=1 and&#13;&#10;self.supplier-&gt;at(1).oclIsKindOf(Package)&#13;&#10;&#13;&#10;[C-8-2] A ProviderConnection must not associate a DataProvider with itself&#13;&#10;context ProviderConnection inv:&#13;&#10;self.dataManager &lt;&gt; self.dataProvider&#13;&#10;&#13;&#10;[C-8-3] A Site must not have a containingSite reference that refers to itself.&#13;&#10;context Site inv:&#13;&#10;self.containingSite -&gt; forAll (c | c &lt;&gt; self)"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="Site" eSuperTypes="#//cwm/foundation/businessinformation/Location">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A Site represents a geographical location. It provides a grouping mechanism for a group of machines at the same location.&#13;&#10;&#13;&#10;Sites may be documented at different levels of granularity; containment links may be used to record hierarchical relationships between Sites."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="containingSite" upperBound="-1" eType="#//cwm/foundation/softwaredeployment/Site" eOpposite="#//cwm/foundation/softwaredeployment/Site/containedSite">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies other Sites of which the current Site forms a part."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="containedSite" upperBound="-1" eType="#//cwm/foundation/softwaredeployment/Site" eOpposite="#//cwm/foundation/softwaredeployment/Site/containingSite">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies other Sites that are part of the current Site."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="machine" upperBound="-1" eType="#//cwm/foundation/softwaredeployment/Machine" eOpposite="#//cwm/foundation/softwaredeployment/Machine/site">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Machines located at the Site."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Machine" eSuperTypes="#//cwm/objectmodel/core/Namespace">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A Machine represents a computer. The Site at which the Machine is located and the Components deployed on the Machine may be recorded."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="ipAddress" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A fixed IP address for the Machine."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="hostName" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A Host Name for the Machine. This may be used to identify the Machine on the network when IP addresses are dynamically allocated."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="machineID" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="An identification code for the Machine."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="deployedComponent" upperBound="-1" eType="#//cwm/foundation/softwaredeployment/DeployedComponent" containment="true" eOpposite="#//cwm/foundation/softwaredeployment/DeployedComponent/machine">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the DeployedComponents on the Machine."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="site" eType="#//cwm/foundation/softwaredeployment/Site" eOpposite="#//cwm/foundation/softwaredeployment/Site/machine">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Site on which the Machine is located."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="SoftwareSystem" eSuperTypes="#//cwm/objectmodel/core/Subsystem">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A SoftwareSystem represents a specific release of a software product. It consists of a set of software Components."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the type of the software product. One of the following predefined values should be used if appropriate:&#13;&#10;&#13;&#10;    OS, DBMS, MDDB, FileSystem, ODBC, JDBC or Application."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="subtype" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="This is used in conjunction with the type attribute to provide additional information about the type of the software product.&#13;&#10;&#13;&#10;For some of the predefined types, suggested subtype values are listed below:&#13;&#10;&#13;&#10;   For an Operating System product (type OS):  &#13;&#10;      AIX, Linux, MVS, NT, Solaris, SunOS, VMS or Windows.&#13;&#10;   For a Database Management System product (type DBMS): &#13;&#10;      DB2, DMS II, IMS, Informix, Oracle, SQLServer or Sybase.&#13;&#10;   For a Multidimensional Database product (type MDDB): &#13;&#10;      Essbase or Express."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="supplier" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The supplier of the software product."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="version" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The version identification for the software product."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="deployment" upperBound="-1" eType="#//cwm/foundation/softwaredeployment/DeployedSoftwareSystem" eOpposite="#//cwm/foundation/softwaredeployment/DeployedSoftwareSystem/softwareSystem">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the deployments of the SoftwareSystem."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="typespace" upperBound="-1" eType="#//cwm/foundation/typemapping/TypeSystem" eOpposite="#//cwm/foundation/typemapping/TypeSystem/supportingSystem">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a TypeSystem containing datatypes supported by the SoftwareSystem."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="DeployedComponent" eSuperTypes="#//cwm/objectmodel/core/Package">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A DeployedComponent represents the deployment of a Component on a specific Machine.&#13;&#10;&#13;&#10;It may represent the deployment of any type of Component. However, if the Component is part of a SoftwareSystem, the DeployedComponent should be part of a DeployedSoftwareSystem.&#13;&#10;&#13;&#10;Usage dependencies may be used to document that one DeployedComponent uses another DeployedComponent."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="pathname" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A pathname for the DeployedComponent within the Machine’s file system."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="machine" lowerBound="1" eType="#//cwm/foundation/softwaredeployment/Machine" transient="true" eOpposite="#//cwm/foundation/softwaredeployment/Machine/deployedComponent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Machine on which a DeployedComponent is deployed."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="deployedSoftwareSystem" upperBound="-1" eType="#//cwm/foundation/softwaredeployment/DeployedSoftwareSystem" eOpposite="#//cwm/foundation/softwaredeployment/DeployedSoftwareSystem/deployedComponent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the DeployedSoftwareSystem."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="component" lowerBound="1" eType="#//cwm/foundation/softwaredeployment/Component" eOpposite="#//cwm/foundation/softwaredeployment/Component/deployment">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Component deployed."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="DeployedSoftwareSystem" eSuperTypes="#//cwm/objectmodel/core/Package">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A DeployedSoftwareSystem represents a deployment of a SoftwareSystem.&#13;&#10;&#13;&#10;Its associated DeployedComponents identify the individual Component deployments that constitute the DeployedSoftwareSystem. These DeployedComponents are not necessarily all deployed on the same Machine."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="softwareSystem" lowerBound="1" eType="#//cwm/foundation/softwaredeployment/SoftwareSystem" eOpposite="#//cwm/foundation/softwaredeployment/SoftwareSystem/deployment">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the SoftwareSystem deployed."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="deployedComponent" upperBound="-1" eType="#//cwm/foundation/softwaredeployment/DeployedComponent" eOpposite="#//cwm/foundation/softwaredeployment/DeployedComponent/deployedSoftwareSystem">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the DeployedComponent."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="DataManager" eSuperTypes="#//cwm/foundation/softwaredeployment/DeployedComponent">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A DataManager represents a DeployedComponent that manages access to data. For example, a deployed DBMS or File Management System would be represented as a DataManager.&#13;&#10;&#13;&#10;The DataManager may be associated with one or more data Packages identifying the Schema, Relational Catalog, Files, or other data container that it provides access to."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isCaseSensitive" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Indicates whether or not the DataManager treats lower case letters within object names as being different from the corresponding upper case letters."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="clientConnection" upperBound="-1" eType="#//cwm/foundation/softwaredeployment/ProviderConnection" eOpposite="#//cwm/foundation/softwaredeployment/ProviderConnection/dataManager">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ProviderConnections that may be used by clients to access the data provided by this DataManager. "/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dataPackage" upperBound="-1" eType="#//cwm/objectmodel/core/Package" eOpposite="#//cwm/objectmodel/core/Package/dataManager">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a Package containing the definition of the data made available by the&#13;&#10;DataManager."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="DataProvider" eSuperTypes="#//cwm/foundation/softwaredeployment/DataManager">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A DataProvider is a deployed software Component that acts as a client to provide access to data that is managed by another product. For instance, a DataProvider might represent a deployed ODBC or JDBC product.&#13;&#10;&#13;&#10;The DataProvider may have resourceConnection references to ProviderConnections identifying the DataManagers to which it provides access."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="resourceConnection" upperBound="-1" eType="#//cwm/foundation/softwaredeployment/ProviderConnection" containment="true" eOpposite="#//cwm/foundation/softwaredeployment/ProviderConnection/dataProvider">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ProviderConnections that the DataProvider may use to access DataManagers."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ProviderConnection" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A ProviderConnection represents a connection that allows a DataProvider acting as a client to access data from a specific DataManager. For example a ProviderConnection could represent a connection from an ODBC or JDBC client to a DBMS."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isReadOnly" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Indicates whether the ProviderConnection only allows read access to the DataManager."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dataProvider" lowerBound="1" eType="#//cwm/foundation/softwaredeployment/DataProvider" transient="true" eOpposite="#//cwm/foundation/softwaredeployment/DataProvider/resourceConnection">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the DataProvider that uses the ProviderConnection."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dataManager" lowerBound="1" eType="#//cwm/foundation/softwaredeployment/DataManager" eOpposite="#//cwm/foundation/softwaredeployment/DataManager/clientConnection">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the DataManager accessed by the ProviderConnection."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Component" eSuperTypes="#//cwm/objectmodel/core/Classifier">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A Component represents a physical piece of implementation of a system, including software code (source, binary or executable) or equivalents such as scripts or command files. A Component is a subtype of Classifier, and so may have its own Features, such as Attributes and Operations.&#13;&#10;&#13;&#10;Deployment of a Component on a specific Machine is represented as a DeployedComponent."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="deployment" upperBound="-1" eType="#//cwm/foundation/softwaredeployment/DeployedComponent" eOpposite="#//cwm/foundation/softwaredeployment/DeployedComponent/component">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the DeployedComponent."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="PackageUsage" eSuperTypes="#//cwm/objectmodel/core/Dependency">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A PackageUsage represents a usage of a Package. It is particularly relevant in situations where a specific usage uses an alternative name for the Package, as this alternative name can be recorded using the packageAlias attribute.&#13;&#10;&#13;&#10;For example, if a DataProvider representing an ODBC or JDBC client uses a name for a relational database that is different from the dataPackage name used by the RDBMS server, a PackageUsage that has the relevant ProviderConnection as client and the server’s data Package as supplier can be added. Its packageAlias attribute can be used to record the name by which the data Package is known to the DataProvider."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="packageAlias" eType="#//cwm/objectmodel/core/Name">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="If this attribute is present, it identifies the name by which the Package is known to the client."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
      </eSubpackages>
      <eSubpackages name="typemapping" nsURI="http:///orgomg/cwm/foundation/typemapping.ecore" nsPrefix="orgomg.cwm.foundation.typemapping">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The TypeMapping package depends on the following packages:&#13;&#10;&#13;&#10;    org.omg::CWM::ObjectModel::Core&#13;&#10;&#13;&#10;The TypeMapping package supports the mapping of data types between different systems. The purpose of these mappings is to indicate data types in different systems that are sufficiently compatible that data values can be interchanged between them. Multiple mappings are allowed between any pair of types and a means of identifying the preferred mapping is provided.&#13;&#10;&#13;&#10;OCL Representation of TypeMapping Constraints&#13;&#10;&#13;&#10;[C-8-1] The sourceType and targetType references may not refer to the same&#13;&#10;Classifier instance.&#13;&#10;context TypeMapping inv:&#13;&#10;self.sourceType &lt;&gt; self.targetType&#13;&#10;&#13;&#10;[C-8-2] A TypeSystem may own only Classifiers and TypeMappings.&#13;&#10;context TypeSystem inv:&#13;&#10;self.ownedElement-&gt;forAll( e | e.oclIsKindOf(Classifier) or e.oclIsKindOf(TypeMapping))"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="TypeMapping" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="TypeMapping instances permit the creation of mappings between data types defined within different environments and are used to indicate data type compatibilities that permit direct assignment of values from one environment (the &quot;source&quot; type) into equivalent values in another environment (the &quot;target&quot; type). For example, an integer field data type in a record-oriented DBMS (the source type) might be mapped to a compatible integer data type in a relational DBMS (the target type).&#13;&#10;&#13;&#10;Whereas the actual transfer of data values between environments is accomplished using the CWM’s Transformation package, TypeMapping instances can be used the identify both the permissible and preferred mappings between data types. Value interchange between a pair of data types is considered permissible if a TypeMapping instance is defined for the pair. A TypeMapping instance is considered the preferred mapping if the instance’s isBestMatch attribute has the value true.&#13;&#10;&#13;&#10;Typically, there will be one TypeMapping Instance between a pair of data types that is considered the preferred mapping. To promote flexible use of this feature, there is no requirement that a preferred TypeMapping instance must be identified between a pair of data types nor are multiple preferred instances prohibited. In these latter cases, however, the precise semantics are usage-defined.&#13;&#10;&#13;&#10;Interchange between data types defined by non-preferred mappings may often function as intended. However, the isLossy boolean may be set to indicate that such interchanges may be subject to validity restrictions in certain circumstances. For example, it may be valid to move data values from a 32-bit integer data type to a 16-bit integer data type as long as the actual values in the 32-bit underlying data type do not exceed the range permitted for 16-bit integers. The CWM Foundation leaves the understanding and handling of such differences to individual tools. If such differences must be modeled, consider using the CWM Transformation package to filter data values during interchange.&#13;&#10;&#13;&#10;TypeMapping instances are unidirectional, so two instances are required to show that a data type pair can be mutually interchanged between environments."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isBestMatch" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="True if this TypeMapping instance represents the best available mapping between a pair of data types in different software systems."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isLossy" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="True if this TypeMapping instance may result in a data conversion error if the source data is within certain ranges. For example, storing a 32-bit unsigned integer value into a 16-bit unsigned integer container will result in a data conversion error only when the source data has a value greater than 65535."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="sourceType" lowerBound="1" eType="#//cwm/objectmodel/core/Classifier" eOpposite="#//cwm/objectmodel/core/Classifier/mappingFrom">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Classifier instance that is the source of information exchange."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="targetType" lowerBound="1" eType="#//cwm/objectmodel/core/Classifier" eOpposite="#//cwm/objectmodel/core/Classifier/mappingTo">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Classifier instance that is the target of information exchange."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TypeSystem" eSuperTypes="#//cwm/objectmodel/core/Package">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Instances of the TypeSystem class collect together the data types (subclasses of Classifier) defined by a software system and the TypeMapping instances defining how they are mapped to data types in other TypeSystems. TypeMapping instances collected by a TypeSystem instance include both those in which the software system’s data types act as sources and as targets of mappings. Classifiers and TapeMappings are&#13;&#10;maintained in a single collection via the ElementOwnership association but can be distinguished by their respective types.&#13;&#10;&#13;&#10;Because it is a Package, a TypeSystem can also serve to collect together the Classifier instances for a particular software system."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="supportingSystem" upperBound="-1" eType="#//cwm/foundation/softwaredeployment/SoftwareSystem" eOpposite="#//cwm/foundation/softwaredeployment/SoftwareSystem/typespace">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a SoftwareSystem that supports the datatypes defined by the TypeSystem."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="version" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A string describing the version identification of the type system represented."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
      </eSubpackages>
    </eSubpackages>
    <eSubpackages name="resource" nsURI="http:///orgomg/cwm/resource.ecore" nsPrefix="orgomg.cwm.resource">
      <eSubpackages name="relational" nsURI="http:///orgomg/cwm/resource/relational.ecore" nsPrefix="orgomg.cwm.resource.relational">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The Relational package describes data accessible through a relational interface such as a native RDBMS, ODBC, or JDBC. The Relational package is based on the [SQL] standard section concerning RDBMS catalogs.&#13;&#10;&#13;&#10;The scope of the top level container, Catalog, is intended to cover all the tables a user can use in a single statement. A catalog is also the unit which is managed by a data resource. A catalog contains schemas which themselves contain tables. Tables are made of columns which have an associated data type.&#13;&#10;&#13;&#10;The Relational package uses constructs in the ObjectModel package to describe the object extensions added to SQL by the [SQL] standards. &#13;&#10;&#13;&#10;The Relational package also addresses the issues of indexing, primary keys and foreign keys by extending the corresponding concepts from the Foundation packages.&#13;&#10;&#13;&#10;The Relational package depends on the following packages:&#13;&#10;&#13;&#10;    org.omg::CWM::ObjectModel::Behavioral&#13;&#10;    org.omg::CWM::ObjectModel::Core&#13;&#10;    org.omg::CWM::ObjectModel::Instance&#13;&#10;    org.omg::CWM::Foundation::DataTypes&#13;&#10;    org.omg::CWM::Foundation::KeysIndexes&#13;&#10;&#13;&#10;The Relational package references the ObjectModel and Foundation packages.&#13;&#10;&#13;&#10;OCL Representation of Relational Constraints&#13;&#10;&#13;&#10;[C-1] temporaryScope is valid only if the isTemporary is True.&#13;&#10;context Tabl e inv:&#13;&#10;self.temporaryScope.notEmpty implies self.isTemporary=True&#13;&#10;&#13;&#10;[C-2] checkOption is valid only if isReadOnly is False.&#13;&#10;context View inv:&#13;&#10;self.checkOption implies self.isReadOnly=False&#13;&#10;&#13;&#10;[C-3] scale is valid only if precision is specified.&#13;&#10;context Column inv:&#13;&#10;self.scale.nonEmpty implies self.precision.notEmpty"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="Catalog" eSuperTypes="#//cwm/objectmodel/core/Package">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A Catalog is the unit of logon and identification. It also identifies the scope of SQL statements: the tables contained in a catalog can be used in a single SQL statement."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="defaultCharacterSetName" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The name of the default character set used for the values in the column.&#13;&#10;This field applies only to columns whose datatype is a character string."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="defaultCollationName" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The name of the default collation sequence used to sort the data values in the column."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Schema" eSuperTypes="#//cwm/objectmodel/core/Package">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A schema is a named collection of tables"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ColumnSet" eSuperTypes="#//cwm/objectmodel/core/Class">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A set of columns, representing either the result of a query, a view or a physical table."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="NamedColumnSet" eSuperTypes="#//cwm/resource/relational/ColumnSet">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A catalogued set of columns, which may be Table or View.&#13;&#10;&#13;&#10;Note for typed tables: It is assumed that the typed table will own a set of columns conforming to the type they are OF. This set of columns allows the manipulation of the table by products which ignore this [SQL] extension. It also allows the columns of type REF, to be copied to a column with a SCOPE reference."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="usingTrigger" upperBound="-1" eType="#//cwm/resource/relational/Trigger" eOpposite="#//cwm/resource/relational/Trigger/usedColumnSet">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A Trigger which references this table in its expression"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#//cwm/resource/relational/SQLStructuredType" eOpposite="#//cwm/resource/relational/SQLStructuredType/columnSet">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="For typed Tables and Views, reference to the base SQLStructuredType.&#13;&#10;"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="optionScopeColumn" upperBound="-1" eType="#//cwm/resource/relational/Column" eOpposite="#//cwm/resource/relational/Column/optionScopeColumnSet">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Reference to the Column which contains theSCOPE clause."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Table" eSuperTypes="#//cwm/resource/relational/NamedColumnSet">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A materialized NamedColumnSet."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isTemporary" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Indicates that the table content is temporary. SQL92 standards provide two types of temporary tables (local Temporary and Global Temporary). However, RDBMS products have implemented variations on this theme. It is recommended that the product manufacturers provide specific temporary information (besides the temporaryScope attribute) in their extensions. "/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="temporaryScope" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="This attribute is meaningful only when the isTemporary flag is True [C-1]. The scope indicates when the data of this table are available. &quot;SESSION&quot;, &quot;APPLICATION&quot; are examples of possible values. Look at the Scope attribute for Global Temporary tables in the SQL standards for more details."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isSystem" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Indicates that the Table is a System Table (generally part of or view on the system catalog)."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="trigger" upperBound="-1" eType="#//cwm/resource/relational/Trigger" eOpposite="#//cwm/resource/relational/Trigger/table">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Associates triggers executed during changes to the table."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="View" eSuperTypes="#//cwm/resource/relational/NamedColumnSet">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A view is a non-materialized set of rows, defined by the associated query.&#13;&#10;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isReadOnly" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Indicates whether the underlying tables can be updated through an update to this View."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="checkOption" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="This field is meaningful only if the view is not ReadOnly. CheckOption indicates that the RDBMS will validate that changes made to the data verify the view filtering condition and belong to the view result set."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="queryExpression" eType="#//cwm/foundation/datatypes/QueryExpression" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The query associated with the View.&#13;&#10;&#13;&#10;The query result must match the set of Columns associated with the View (in parent class ColumnSet)"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="QueryColumnSet" eSuperTypes="#//cwm/resource/relational/ColumnSet">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The result set of a query."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="query" eType="#//cwm/foundation/datatypes/QueryExpression" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The query expression generating this result. The language attribute of the expression should generally begin with &quot;SQL&quot;"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="SQLDataType" abstract="true" eSuperTypes="#//cwm/objectmodel/core/Classifier">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A SQLDataType is used to reference any datatype associated with a column"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="typeNumber" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The number assigned to the datatype by the owning RDBMS"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="SQLDistinctType" eSuperTypes="#//cwm/resource/relational/SQLDataType #//cwm/foundation/datatypes/TypeAlias">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A datatype defined as a Distinct Type, per [SQL] standard."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="length" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The length of fixed length character or byte strings. Maximum length if length is&#13;&#10;variable."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="precision" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The total number of digits in the field"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="scale" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The number of digits on the right of the decimal separator."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="sqlSimpleType" lowerBound="1" eType="#//cwm/resource/relational/SQLSimpleType" eOpposite="#//cwm/resource/relational/SQLSimpleType/sqlDistinctType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Simple type used to define the distinct class."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="SQLSimpleType" eSuperTypes="#//cwm/resource/relational/SQLDataType #//cwm/objectmodel/core/DataType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A simple datatype used with an SQL column. Examples are Integer, Varchar, LOB, CLOB, etc..."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="characterMaximumLength" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="characterOctetLength" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="numericPrecision" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="numericPrecisionRadix" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="numericScale" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="dateTimePrecision" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="See [SQL], corresponding field in DATA_TYPE_DESCRIPTOR"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="sqlDistinctType" upperBound="-1" eType="#//cwm/resource/relational/SQLDistinctType" eOpposite="#//cwm/resource/relational/SQLDistinctType/sqlSimpleType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Distinct types that use this simple type."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="SQLStructuredType" eSuperTypes="#//cwm/objectmodel/core/Class #//cwm/resource/relational/SQLDataType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A Datatype defined as Structured Type, per [SQL] standard."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="columnSet" upperBound="-1" eType="#//cwm/resource/relational/NamedColumnSet" eOpposite="#//cwm/resource/relational/NamedColumnSet/type">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A NamedColumnSet created as of this type."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="referencingColumn" upperBound="-1" eType="#//cwm/resource/relational/Column" eOpposite="#//cwm/resource/relational/Column/referencedTableType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Reference to a column of an SQLStructuredType (otherType) which is created with a REF clause referencing this SQLStructuredType (thisType). Note that in general, otherType and thisType are two different instances of SQLStructuredType."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Column" eSuperTypes="#//cwm/objectmodel/core/Attribute">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A column in a result set, a view, a table, or an SQLStructuredType."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="precision" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The total number of digits in the field."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="scale" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The number of digits on the right of the decimal separator."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isNullable" eType="#//cwm/resource/relational/enumerations/NullableType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Indicates if null values are valid in this column.&#13;&#10;&#13;&#10;Note: Default values for Column data are provided in initialValue in the UML Attribute class (the class from which the Column class inherits)."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="length" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The length of fixed length character or byte strings. Maximum length if length is variable."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="collationName" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The name of the collation sequence used to sort the data values in the column.&#13;&#10;This applies only to columns whose datatype is a form of character string."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="characterSetName" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The name of the character set used for the values in the column.&#13;&#10;This field applies only to columns whose datatype is a character string."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="referencedTableType" eType="#//cwm/resource/relational/SQLStructuredType" eOpposite="#//cwm/resource/relational/SQLStructuredType/referencingColumn">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The column, used in an SQLStructuredType is a REF to a type. This references the REF’ed SQLStructuredType. "/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="optionScopeColumnSet" eType="#//cwm/resource/relational/NamedColumnSet" eOpposite="#//cwm/resource/relational/NamedColumnSet/optionScopeColumn">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Reference to the NamedColumnSet indicated in the SCOPE clause of the Column definition.&#13;&#10;&#13;&#10;&#13;&#10;"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Procedure" eSuperTypes="#//cwm/objectmodel/behavioral/Method">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This class describes Relational DBMS Stored procedures and functions."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//cwm/resource/relational/enumerations/ProcedureType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A Procedure can be either a Function or a true Procedure. This indicates whether this object returns a value or not."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Trigger" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An action run by the DBMS when specified events occur on the table owning the Trigger"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="eventManipulation" eType="#//cwm/resource/relational/enumerations/EventManipulationType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Indicates what types of events are using the current Trigger."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="actionCondition" eType="#//cwm/objectmodel/core/BooleanExpression" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A boolean expression which defines when the trigger has to be executed"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="actionStatement" eType="#//cwm/objectmodel/core/ProcedureExpression" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Trigger action itself"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="actionOrientation" eType="#//cwm/resource/relational/enumerations/ActionOrientationType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="It indicates if the trigger is called once per statement execution or before or after each row of the table is modified."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="conditionTiming" eType="#//cwm/resource/relational/enumerations/ConditionTimingType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="It indicates if the trigger activity is run before or after the statement or row is modified."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="conditionReferenceNewTable" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The alias for the owning table name, used in the actionStatement, to represent the state of the table after the insert/delete/update"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="conditionReferenceOldTable" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The alias for the name of the owning table, used in the actionStatement, to represent the state of the table before the update/delete/insert."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="usedColumnSet" upperBound="-1" eType="#//cwm/resource/relational/NamedColumnSet" eOpposite="#//cwm/resource/relational/NamedColumnSet/usingTrigger">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="NamedColumnSets referenced by the actionStatement or the actionCondition."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="table" lowerBound="1" eType="#//cwm/resource/relational/Table" eOpposite="#//cwm/resource/relational/Table/trigger">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The table which owns the Trigger"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="SQLIndex" eSuperTypes="#//cwm/foundation/keysindexes/Index">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An Index on a table."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="filterCondition" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Which subset of the table is indexed"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isNullable" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Entries in this index can be null"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="autoUpdate" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The index is updated automatically"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="UniqueConstraint" eSuperTypes="#//cwm/foundation/keysindexes/UniqueKey">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A condition to define uniqueness of rows in a table. An example of UniqueConstraint is a primary key"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="deferrability" eType="#//cwm/resource/relational/enumerations/DeferrabilityType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Indicates if the validity of the UniqueConstraint is to be tested at each statement or at the end of a transaction."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ForeignKey" eSuperTypes="#//cwm/foundation/keysindexes/KeyRelationship">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A Foreign Key associates columns from one table with columns of another table.&#13;&#10;&#13;&#10;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="deleteRule" eType="#//cwm/resource/relational/enumerations/ReferentialRuleType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="An enumerated type. Indicates the disposition of the data records containing the foreign key value when the record of the matching primary key is deleted."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="updateRule" eType="#//cwm/resource/relational/enumerations/ReferentialRuleType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Same as deleteRule for updates of the primary key data record"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="deferrability" eType="#//cwm/resource/relational/enumerations/DeferrabilityType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Indicates if the validity of the ForeignKey is to be tested at each statement or at the end of a transaction."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="SQLIndexColumn" eSuperTypes="#//cwm/foundation/keysindexes/IndexedFeature">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Associates an index with its columns.&#13;&#10;&#13;&#10;This is really an association (link) class. It is associated with one index and one column.&#13;&#10;"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="PrimaryKey" eSuperTypes="#//cwm/resource/relational/UniqueConstraint">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="There is only one UniqueConstraint of type PrimaryKey per Table. It is implemented specifically by each RDBMS."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Row" eSuperTypes="#//cwm/objectmodel/instance/Object">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An instance of a ColumnSet."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ColumnValue" eSuperTypes="#//cwm/objectmodel/instance/DataValue">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The value in a column instance."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CheckConstraint" eSuperTypes="#//cwm/objectmodel/core/Constraint">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A rule that specifies the values allowed in one or more columns of every row of a table."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="deferrability" eType="#//cwm/resource/relational/enumerations/DeferrabilityType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Indicates the timing of the constraint enforcement during multiple-user updates."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="RowSet" eSuperTypes="#//cwm/objectmodel/instance/Extent">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Each instance of RowSet owns a collection of Row instances. The inherited association between Namespace (a superclass of Package) and ModelElement is used to contain Instances."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="SQLParameter" eSuperTypes="#//cwm/objectmodel/behavioral/Parameter">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Parameters of stored procedures."/>
          </eAnnotations>
        </eClassifiers>
        <eSubpackages name="enumerations" nsURI="http:///orgomg/cwm/resource/relational/enumerations.ecore" nsPrefix="orgomg.cwm.resource.relational.enumerations">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The enumerations and datatypes used in the Relational model."/>
          </eAnnotations>
          <eClassifiers xsi:type="ecore:EEnum" name="ActionOrientationType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Used in Trigger. &#13;&#10;It indicates if the trigger is called once per statement execution or before/after each row of the table is modified."/>
            </eAnnotations>
            <eLiterals name="row">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="The Trigger is executed befors/after each row modification, even if the SQL statement modifies several rows of the table."/>
              </eAnnotations>
            </eLiterals>
            <eLiterals name="statement" value="1">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="The Trigger is called once per statement execution, independently of the number of changes made by the statement."/>
              </eAnnotations>
            </eLiterals>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EEnum" name="ConditionTimingType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Used in Triggers.&#13;&#10;It indicates if the trigger activity is run before or after the statement or row is modified."/>
            </eAnnotations>
            <eLiterals name="before">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="The Trigger activity is run before the data is changed in the table."/>
              </eAnnotations>
            </eLiterals>
            <eLiterals name="after" value="1">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="This Trigger activity is run after the data are modified in the table."/>
              </eAnnotations>
            </eLiterals>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EEnum" name="DeferrabilityType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Used in Foreign Keys&#13;&#10;Indicates if the Foreign Key validation should be deferred to the end of the transaction or executed immadiately at the end of the statement.&#13;&#10;This is the value used at the beginning of a transaction. It can be changed within a transaction."/>
            </eAnnotations>
            <eLiterals name="initiallyDeferred">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="By default, the test for Foreign Key validity is performed at the end of the transaction"/>
              </eAnnotations>
            </eLiterals>
            <eLiterals name="initiallyImmediate" value="1">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="By default, the test for ForeignKey validity is performed at each statement"/>
              </eAnnotations>
            </eLiterals>
            <eLiterals name="notDeferrable" value="2">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="The test for Foreign Key validity is performed at each statement and cannot be changed in the transaction."/>
              </eAnnotations>
            </eLiterals>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EEnum" name="EventManipulationType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Used in Trigger.&#13;&#10;Indicates what types of events are using the current Trigger. &#13;&#10;"/>
            </eAnnotations>
            <eLiterals name="insert">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="The Trigger activity is used for each insert statement on the table."/>
              </eAnnotations>
            </eLiterals>
            <eLiterals name="delete" value="1">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="The Trigger is used for each delete statement on the table."/>
              </eAnnotations>
            </eLiterals>
            <eLiterals name="update" value="2">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="The Trigger is used for each update statement of the table. "/>
              </eAnnotations>
            </eLiterals>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EEnum" name="NullableType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Used in Column.&#13;&#10;Indicates if a Column may contain null values."/>
            </eAnnotations>
            <eLiterals name="columnNoNulls">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="The Column may not contain null values"/>
              </eAnnotations>
            </eLiterals>
            <eLiterals name="columnNullable" value="1">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="The column may contain null values"/>
              </eAnnotations>
            </eLiterals>
            <eLiterals name="columnNullableUnknown" value="2">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="It is not known whether null values are allowed or not. "/>
              </eAnnotations>
            </eLiterals>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EEnum" name="ProcedureType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Used in Procedure.&#13;&#10;Indicates if the Procedure is a Function or a Procedure"/>
            </eAnnotations>
            <eLiterals name="procedure">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="This is a procedure, without returned value."/>
              </eAnnotations>
            </eLiterals>
            <eLiterals name="function" value="1">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="This is a function, with a returned value."/>
              </eAnnotations>
            </eLiterals>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EEnum" name="ReferentialRuleType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Used in Foreign Key.&#13;&#10;It indicates the action taken on the row containing a foreign key value, when the primary key value referenced is deleted or updated."/>
            </eAnnotations>
            <eLiterals name="importedKeyNoAction">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="The row with the foreign key remains and the foreign key will not match a primary key."/>
              </eAnnotations>
            </eLiterals>
            <eLiterals name="importedKeyCascade" value="1">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="The row with the foreign key is deleted."/>
              </eAnnotations>
            </eLiterals>
            <eLiterals name="importedKeySetNull" value="2">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="The foreign key value is set to NULL."/>
              </eAnnotations>
            </eLiterals>
            <eLiterals name="importedKeyRestrict" value="3">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="The deletion or update of the primary key is not permitted and will fail."/>
              </eAnnotations>
            </eLiterals>
            <eLiterals name="importedKeySetDefault" value="4">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="The foreign key is set to the default value of its column."/>
              </eAnnotations>
            </eLiterals>
          </eClassifiers>
        </eSubpackages>
      </eSubpackages>
      <eSubpackages name="record" nsURI="http:///orgomg/cwm/resource/record.ecore" nsPrefix="orgomg.cwm.resource.record">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The Record package covers the basic concept of a record and its structure. The package takes a broad view of the notion of record, including both traditional data records such as those stored in files and databases, as well as programming language structured data types. In fact, the concepts described here can be used as a foundation for extension packages describing any information structure that is fundamentally hierarchical, or &quot;nested,&quot; in nature such as documents, questionnaires, and organizational structures.&#13;&#10;&#13;&#10;The Record package depends on the following packages:&#13;&#10;&#13;&#10;    org.omg::CWM::ObjectModel::Core&#13;&#10;    org.omg::CWM::ObjectModel::Instance&#13;&#10;&#13;&#10;Because of the antiquity of many record-based models, individual system implementations employing record models may have unusual features (such as occurs-depending arrays, various COBOL rename/remapping semantics, etc.) that are not shared with other implementations. When such features are limited to single&#13;&#10;implementations or languages, they have been purposefully left out of the Record metamodel. Rather, unusual features of this sort should be placed into extension packages designed to meet the needs of those implementations or languages. For example, record structuring features endemic to the COBOL language have been placed in the COBOLData metamodel in the CWMX package described in Volume 2 and do not appear here. In this way, COBOL-only features do not burden other record oriented implementations unnecessarily.&#13;&#10;&#13;&#10;OCL Representation of Record Constraints&#13;&#10;&#13;&#10;[C-1] The owner of a Field and the type of a Field may not refer to the same Classifier instance.&#13;&#10;context Field inv:&#13;&#10;self.owner &lt;&gt; self.type&#13;&#10;&#13;&#10;[C-2] The scale attribute is valid only if the precision attribute is specified.&#13;&#10;context Field inv:&#13;&#10;self.scale-&gt;notEmpty implies self.precision-&gt;notEmpty&#13;&#10;&#13;&#10;[C-3] The precision attribute is valid only if the length attribute is not specified.&#13;&#10;context Field inv:&#13;&#10;self.precision-&gt;notEmpty implies self.length-&gt;isEmpty::filely one"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="Field" eSuperTypes="#//cwm/objectmodel/core/Attribute">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A Field is the fundamental information container within a RecordDef. It holds one piece of information, which may itself have structure. The inherited associations StructuralFeatureType and ElementOwnership provide access to a Field instance’s type and owning classifier, respectively."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="length" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The length of a fixed length character or byte string field."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="precision" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The total number of digits in a numeric field."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="scale" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The number of digits on the right of the decimal separator in a numeric field."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="RecordDef" eSuperTypes="#//cwm/objectmodel/core/Class">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A RecordDef is an ordered collection of Fields representing the structure of a Record.&#13;&#10;&#13;&#10;Examples of RecordDefs include definitions of&#13;&#10;&#13;&#10;    language-specific data structures&#13;&#10;    database records&#13;&#10;    IMS segments&#13;&#10;&#13;&#10;The internal structure of a RecordDef instance is constructed by adding Field instances as features (using the ElementOwnership association) and pointing each Field instance’s inherited type reference to the Classifier instance representing the Field’s data type. The referenced instance can be either a primitive data type (an instance of DataType, such as &quot;integer&quot;) or a structured data type (such as a Group instance).&#13;&#10;&#13;&#10;Refer to the example for more details of the relationships between RecordDefs, Fields, Records, and their values."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="fieldDelimiter" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The value of a fieldDelimiter used to separate field values in an input stream."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isFixedWidth" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="True if the record is fixed length. Otherwise, the record can be of variable length."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="textDelimiter" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The delimiter of a text string in the record, such as a quote."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="file" upperBound="-1" eType="#//cwm/resource/record/RecordFile" eOpposite="#//cwm/resource/record/RecordFile/record">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the set of files in which a record is stored."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="FixedOffsetField" eSuperTypes="#//cwm/resource/record/Field">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Instances of FixeOffsetField represent fields that have a fixed location in a record.&#13;&#10;&#13;&#10;FixedOffsetFields can be used as a foundation for recording details of physical record layouts and as a means of representing the internal structure of undiscriminated (ie, C-type) unions."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="offset" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies the offset of the field within its container in units of the number of bits indicated in the offsetUnitBits attribute."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="offsetUnitBits" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The number of bits making up one record offset unit. For example, for a byte-relative offset, the value of this attribute would typically be 8."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="RecordFile" eSuperTypes="#//cwm/objectmodel/core/Package">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A RecordFile is the definition of a file. It may have one or more RecordDefs, defining the structure of the records in the file. Each of these RecordDefs defines a valid structure for records in the file. Subclasses of RecordFile in extensions to support specific languages and systems may be used to represent specific types of files such as COBOL CopyLib files and C-language header files.&#13;&#10;&#13;&#10;Physical deployments of a RecordFile can be found via the DataManagerDataPackage association in the SoftwareDeployment package ."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isSelfDescribing" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="True if the contents of fields in the first record of the file contain field names applicable to subsequent records."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="recordDelimiter" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Contains the value that serves as a logical end-of-record indication in a stream-oriented file. A common examples include the usage of carriage-return characters and carriage-return/line-feed character pairs as new-line characters in ASCII text files."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="skipRecords" eType="#//cwm/objectmodel/core/Integer">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The number of records to ignore at the beginning of a file. The specific semantics of records that are skipped may be beyond the scope of CWM."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="record" upperBound="-1" eType="#//cwm/resource/record/RecordDef" eOpposite="#//cwm/resource/record/RecordDef/file">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the set of records stored in the file. The ordering may indicate the physical ordering of records with different layouts."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="FieldValue" eSuperTypes="#//cwm/objectmodel/instance/DataValue">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The value currently held in a Field instance."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Record" eSuperTypes="#//cwm/objectmodel/instance/Object">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A Record, a subclass of Object, represents a single data record. Each Record is described by a RecordDef instance found via the Object’s InstanceClassifier association."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="RecordSet" eSuperTypes="#//cwm/objectmodel/instance/Extent">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A RecordSet represents a collection of Record instances."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Group" eSuperTypes="#//cwm/objectmodel/core/Classifier">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A Group is a structured data type and is used to collect together Field instances within a Record. Groups can be used in RecordDef instances as shown in the foregoing example."/>
          </eAnnotations>
        </eClassifiers>
      </eSubpackages>
      <eSubpackages name="multidimensional" nsURI="http:///orgomg/cwm/resource/multidimensional.ecore" nsPrefix="orgomg.cwm.resource.multidimensional">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The CWM Multidimensional metamodel is a generic representation of a multidimensional database.&#13;&#10;&#13;&#10;Multidimensional databases are OLAP databases that are directly implemented by multidimensional database systems. In a multidimensional database, key OLAP constructs (dimensions, hierarchies, etc.) are represented by the internal data structures of a ultidimensional database server, and common OLAP operations (consolidation, drill-down, etc.) are performed by the server acting on those data structures. &#13;&#10;&#13;&#10;Multidimensional databases are often classified as &quot;physical OLAP&quot; or &quot;MOLAP&quot; (memory-based OLAP) databases.&#13;&#10;&#13;&#10;Multidimensional databases offer enhanced performance and flexibility over OLAP systems that simulate multidimensional functionality using other technologies (e.g., relational database or spreadsheet):&#13;&#10;&#13;&#10;Performance: Multidimensional databases provide rapid consolidation times and formula calculations, and consistent query response times regardless of query complexity. This is accomplished, in part, through the use of efficient cell storage techniques and highly-optimized index paths.&#13;&#10;&#13;&#10;Flexibility: The specification and use of multidimensional schemas and queries (including the design of cubes, dimensions, hierarchies, member formulas, the manipulation of query result sets, etc.) can be accomplished in a relatively straight-forward manner, since the server directly supports (and exposes) the multidimensional paradigm.&#13;&#10;&#13;&#10;The CWM Multidimensional metamodel does not attempt to provide a complete representation of all aspects of commercially available, multidimensional databases. Unlike relational database management systems, multidimensional databases tend to be proprietary in structure, and there are no published, widely agreed upon, standard representations of the logical schema of a multidimensional database. Therefore, the CWM Multidimensional Database metamodel is oriented toward complete generality of specification. Tool-specific extensions to the metamodel are relatively easy to formulate, and several examples are provided in Volume 2, Extensions, of the CWM Specification.&#13;&#10;&#13;&#10;The Multidimensional package depends on the following packages:&#13;&#10;&#13;&#10;    org.omg::CWM::ObjectModel::Core&#13;&#10;    org.omg::CWM::ObjectModel::Instance&#13;&#10;&#13;&#10;The major classes and associations of the Multidimensional metamodel are shown in Figure 11-1.&#13;&#10;&#13;&#10;Schema is the container of all elements comprising a Multidimensional model. It also represents the logical unit of deployment of a Multidimensional database instance.&#13;&#10;Dimension represents a physical dimension in a Multidimensional database. Whereas&#13;&#10;the OLAP metamodel defines “dimension” as a purely conceptual entity, this&#13;&#10;Dimension represents the dimension object exposed by the programming model of a&#13;&#10;Multidimensional database.&#13;&#10;A Dimension may reference other instances of Dimension to form arbitrarily complex&#13;&#10;dimensional structures (e.g., hierarchies with varying levels of detail).&#13;&#10;&#13;&#10;DimensionedObject represents an attribute of Dimension. Examples of DimensionedObjects include measures (variables), formulas, consolidation functions, member alias names, etc. DimensionedObjects are contained by the Schema and referenced by the Dimensions that use them. &#13;&#10;&#13;&#10;MemberSet represents the collection of Members associated with an instance of Dimension, and MemberValue represents an instance value of a Member. MemberSet, Member and MemberValue enable the specification and interchange of both M1-level Multidimensional models and associated M0-level data values.&#13;&#10;&#13;&#10;Figure 11-2 illustrates the inheritance of the Multidimensional classes from metaclasses of the Object Model.&#13;&#10;&#13;&#10;OCL Representation of Multidimensional Constraints&#13;&#10;&#13;&#10;[C-1] A Dimension may not reference itself as a component, nor as a composite.&#13;&#10;context Dimension&#13;&#10;inv: self.component-&gt;excludes( self )&#13;&#10;inv: self.composite-&gt;excludes( self )&#13;&#10;&#13;&#10;The transitive closure of components of an instance of Dimension must not include the&#13;&#10;Dimension instance.&#13;&#10;&#13;&#10;The transitive closure of composites of an instance of Dimension must not include the&#13;&#10;Dimension instance."/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="Dimension" eSuperTypes="#//cwm/objectmodel/core/Class">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Dimension represents physical dimension in a multidimensional database (e.g., a dimension object defined by the programming model/API of an OLAP database server). Tool-specific extensions to the Multidimensional package will generally contain classes that derive from Dimension."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dimensionedObject" upperBound="-1" eType="#//cwm/resource/multidimensional/DimensionedObject" eOpposite="#//cwm/resource/multidimensional/DimensionedObject/dimension">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="DimensionedObjects referenced by Dimensions."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="composite" upperBound="-1" eType="#//cwm/resource/multidimensional/Dimension" eOpposite="#//cwm/resource/multidimensional/Dimension/component">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="&quot;Composite&quot; Dimensions referencing &quot;Component&quot; Dimensions."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="component" upperBound="-1" eType="#//cwm/resource/multidimensional/Dimension" eOpposite="#//cwm/resource/multidimensional/Dimension/composite">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="&quot;Component&quot; Dimensions referenced by &quot;Composite&quot; Dimensions."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="schema" lowerBound="1" eType="#//cwm/resource/multidimensional/Schema" transient="true" eOpposite="#//cwm/resource/multidimensional/Schema/dimension">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Schema owning Dimensions."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="memberSet" upperBound="-1" eType="#//cwm/resource/multidimensional/MemberSet" containment="true" eOpposite="#//cwm/resource/multidimensional/MemberSet/dimension">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="MemberSets owned by a Dimension."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="DimensionedObject" eSuperTypes="#//cwm/objectmodel/core/Attribute">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="DimensionedObject represents an attribute of Dimension."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dimension" upperBound="-1" eType="#//cwm/resource/multidimensional/Dimension" eOpposite="#//cwm/resource/multidimensional/Dimension/dimensionedObject">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Dimensions referencing DimensionedObjects."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="schema" lowerBound="1" eType="#//cwm/resource/multidimensional/Schema" transient="true" eOpposite="#//cwm/resource/multidimensional/Schema/dimensionedObject">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Schema owning DimensionedObjects."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Member" eSuperTypes="#//cwm/objectmodel/instance/Object">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Member represents a member of a Dimension."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="MemberSet" eSuperTypes="#//cwm/objectmodel/instance/Extent">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="MemberSet represents the collection of Members associated with an instance of Dimension."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dimension" lowerBound="1" eType="#//cwm/resource/multidimensional/Dimension" transient="true" eOpposite="#//cwm/resource/multidimensional/Dimension/memberSet">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Dimension owning MemberSets."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="MemberValue" eSuperTypes="#//cwm/objectmodel/instance/DataValue">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="MemberValue represents an instance value of a Member."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Schema" eSuperTypes="#//cwm/objectmodel/core/Package">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Schema contains all elements comprising a Multidimensional database."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dimensionedObject" upperBound="-1" eType="#//cwm/resource/multidimensional/DimensionedObject" containment="true" eOpposite="#//cwm/resource/multidimensional/DimensionedObject/schema">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="DimensionedObjects owned by a Schema."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dimension" upperBound="-1" eType="#//cwm/resource/multidimensional/Dimension" containment="true" eOpposite="#//cwm/resource/multidimensional/Dimension/schema">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Dimensions owned by a Schema."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
      </eSubpackages>
      <eSubpackages name="xml" nsURI="http:///orgomg/cwm/resource/xml.ecore" nsPrefix="orgomg.cwm.resource.xml">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="XML is rapidly becoming a very important type of data resource, especially in the Internet environment. On the one hand, HTML is evolving to be XML-compliant; in the near future, all HTML documents can be expected to become valid XML documents. On the other hand, XML is quickly becoming the standard format for interchange of data and/or metadata (e.g., XMI). Therefore, XML documents (or streams) representing data and/or metadata can be expected to appear everywhere. &#13;&#10;&#13;&#10;The XML package contains classes and associations that represent common metadata describing XML data resources. It is based on XML 1.0 [XML]. XML Schema is an ongoing activity in the W3C. As future standards are adopted by the W3C on XML Schema, this package will be revised and extended accordingly.&#13;&#10;&#13;&#10;This section provides a description of the main features of the XML package.&#13;&#10;&#13;&#10;An XML schema contains a set of definitions and declarations, in the form of XML element type definitions. An XML element type may contain a set of XML attributes and/or a content model. An attribute can have one of the following defaults: required, implied, default, or fixed. The content model can be one of the following types: empty, any, mixed, or element. Except for the empty content model, a content model consists of constituent parts, particularly element type references. The allowed occurrence of the constituents can be one of the following types: one, zero or one, zero or more, or&#13;&#10;one or more.&#13;&#10;&#13;&#10;An any content model consists of any element types. A mixed content model consists of character data and specified element type references. An element content model consists of specified element type references and/or element content models. An element content model can be one of the following types: choice or sequence.&#13;&#10;&#13;&#10;The XML package depends on the following packages:&#13;&#10;&#13;&#10;    omg.org::CWM::ObjectModel::Core&#13;&#10;    omg.org::CWM::ObjectModel::Instance&#13;&#10;    omg.org::CWM::Foundation::DataTypes&#13;&#10;&#13;&#10;The metamodel diagram for the XML package is split into two parts. The first diagram shows the XML classes and associations, while the second shows the inheritance hierarchy.&#13;&#10;&#13;&#10;OCL Representation of XML Constraints&#13;&#10;&#13;&#10;   None"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="Schema" eSuperTypes="#//cwm/objectmodel/core/Package">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents an XML schema which contains a set of definitions and declarations. In XML, this is known as document type definition, or DTD, which provides a grammar for a class of documents."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="version" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the version of the XML."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="xmlNamespace" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the XML namespace of the Schema."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ElementType" eSuperTypes="#//cwm/objectmodel/core/Class">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents an XML element type definition. In XML, each document contains one or more elements. The element structure may, for validation purposes, be constrained using element type and attribute declarations. An element type declaration constrains the element’s content."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="content" eType="#//cwm/resource/xml/Content" eOpposite="#//cwm/resource/xml/Content/elementType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Content of the ElementType."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Attribute" eSuperTypes="#//cwm/objectmodel/core/Attribute">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents an XML attribute declaration. In XML, attributes are used to associate name-value pairs with elements. Each attribute declaration specifies the name, data type, and default value (if any) of each attribute associated with a given element type."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="defaultKind" eType="#//cwm/resource/xml/AttributeDefault">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the kind of attribute default."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Content" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents the content model of an ElementType. In XML, each document contains one or more elements, the boundaries of which are normally delimited by start-tags and end-tags. The body between the start-tag and end-tag is called the element’s content. An element type declaration constrains the element’s content."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//cwm/resource/xml/ContentType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the type of the content model."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="occurrence" eType="#//cwm/resource/xml/OccurrenceType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the allowed occurrence of the content constituents."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="elementType" upperBound="-1" eType="#//cwm/resource/xml/ElementType" eOpposite="#//cwm/resource/xml/ElementType/content">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ElementType."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedElementType" upperBound="-1" eType="#//cwm/resource/xml/ElementTypeReference" eOpposite="#//cwm/resource/xml/ElementTypeReference/ownerContent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the owned ElementTypeReferences."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ElementContent" eSuperTypes="#//cwm/resource/xml/Content">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents an element content which contains only ElementTypeReferences. In XML, an element type has element content when elements of that type must contain only child elements (no character data), optionally separated by white space. In this case, the constraint includes a content model that governs the allowed types of the child elements and the order in which they are allowed to appear."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="order" eType="#//cwm/resource/xml/ElementOrderType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the order type of the element content."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownerContent" upperBound="-1" eType="#//cwm/resource/xml/ElementContent" eOpposite="#//cwm/resource/xml/ElementContent/ownedContent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the owner ElementContent."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownedContent" upperBound="-1" eType="#//cwm/resource/xml/ElementContent" eOpposite="#//cwm/resource/xml/ElementContent/ownerContent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the owned ElementContents."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="MixedContent" eSuperTypes="#//cwm/resource/xml/Content">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents a mixed content of character data and ElementTypeReferences. In XML, an element type has mixed content when elements of that type may contain character data, optionally interspersed with child elements. In this case, the types of the child elements may be constrained, but not their order or their number of occurrences."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="text" lowerBound="1" eType="#//cwm/resource/xml/Text" containment="true" eOpposite="#//cwm/resource/xml/Text/ownerContent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Text of the MixedContent."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EEnum" name="AttributeDefault">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="required, implied, default, fixed"/>
          </eAnnotations>
          <eLiterals name="xml_required"/>
          <eLiterals name="xml_implied" value="1"/>
          <eLiterals name="xml_default" value="2"/>
          <eLiterals name="xml_fixed" value="3"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EEnum" name="ContentType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="empty, any, mixed, element"/>
          </eAnnotations>
          <eLiterals name="xml_empty"/>
          <eLiterals name="xml_any" value="1"/>
          <eLiterals name="xml_mixed" value="2"/>
          <eLiterals name="xml_element" value="3"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EEnum" name="OccurrenceType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="one, zeroOrOne, zeroOrMore, OneOrMore"/>
          </eAnnotations>
          <eLiterals name="xml_one"/>
          <eLiterals name="xml_zeroOrOne" value="1"/>
          <eLiterals name="xml_zeroOrMore" value="2"/>
          <eLiterals name="xml_oneOrMore" value="3"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EEnum" name="ElementOrderType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="choice, sequence"/>
          </eAnnotations>
          <eLiterals name="xml_choice"/>
          <eLiterals name="xml_sequence" value="1"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ElementTypeReference" eSuperTypes="#//cwm/objectmodel/core/Attribute">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents an XML element type reference. In XML, an element content or a mixed content of an element type may contain references to element type definitions."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="occurrence" eType="#//cwm/resource/xml/OccurrenceType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the allowed occurrence of the ElementTypeReference."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownerContent" upperBound="-1" eType="#//cwm/resource/xml/Content" eOpposite="#//cwm/resource/xml/Content/ownedElementType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the owner Content."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Text" eSuperTypes="#//cwm/objectmodel/core/Attribute">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents character data. In XML, a mixed content of an element type may contain text."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="ownerContent" lowerBound="1" eType="#//cwm/resource/xml/MixedContent" transient="true" eOpposite="#//cwm/resource/xml/MixedContent/text">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the owner MixedContent."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Element" eSuperTypes="#//cwm/objectmodel/instance/Object">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents an instance of an ElementType."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Document" eSuperTypes="#//cwm/objectmodel/instance/Extent">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents an XML document, which is a collection of XML Elements."/>
          </eAnnotations>
        </eClassifiers>
      </eSubpackages>
    </eSubpackages>
    <eSubpackages name="analysis" nsURI="http:///orgomg/cwm/analysis.ecore" nsPrefix="orgomg.cwm.analysis">
      <eSubpackages name="transformation" nsURI="http:///orgomg/cwm/analysis/transformation.ecore" nsPrefix="orgomg.cwm.analysis.transformation">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A key aspect of data warehousing is to extract, transform, and load data from&#13;&#10;operational resources to a data warehouse or data mart for analysis. Extraction,&#13;&#10;transformation, and loading can all be characterized as transformations. In fact,&#13;&#10;whenever data needs to be converted from one form to another in data warehousing,&#13;&#10;whether for storage, retrieval, or presentation purposes, transformations are involved.&#13;&#10;Transformation, therefore, is central to data warehousing.&#13;&#10;The Transformation package contains classes and associations that represent common&#13;&#10;transformation metadata used in data warehousing. It covers basic transformations&#13;&#10;among all types of data sources and targets: object-oriented, relational, record,&#13;&#10;multidimensional, XML, OLAP, and data mining.&#13;&#10;The Transformation package is designed to enable interchange of common metadata about transformation tools and activities. Specifically it is designed to: &#13;&#10;&#13;&#10;1. Relate a transformation with its data sources and targets. These data sources and targets can be of any type (e.g., object-oriented, relational) or granularity (e.g., class, attribute, table, column). They can be persistent (e.g., stored in a relational database) or transient.&#13;&#10;&#13;&#10;2. Accommodate both &quot;black box&quot; and &quot;white box&quot; transformations. In the case of &quot;black box&quot; transformations, data sources and targets are related to a transformation and to each other at a coarse-grain level. We know the data sources and targets are related through the transformation, but we don’t know how a specific piece of a data source is related to a specific piece of a data target. In the case of &quot;white box&quot; transformations, however, data sources and targets are related to a transformation and to each other at a fine-grain level. We know exactly how a specific piece of a data source is related to a specific piece of a data target through a specific part of the transformation.&#13;&#10;&#13;&#10;3. Allow grouping of transformations into logical units. At the functional level, a logical unit defines a single unit of work, within which all transformations must be executed and completed together. At the execution level, logical units can be used to define the execution grouping and sequencing (either explicitly through precedence constraints or implicitly through data dependencies). A key consideration here is that both parallel and sequential executions (or a combination of both) can be accommodated.&#13;&#10;&#13;&#10;The Transformation package assumes the existence of the following packages that represent types of potential data sources or targets: ObjectModel (object-oriented), Relational, Record, Multidimensional, XML, OLAP, and Data Mining. The Transformation package is an integral part of the following packages: OLAP, Data Mining, Warehouse Process, and Warehouse Operation. In particular, the Transformation and Warehouse Process packages together provide metamodel constructs that facilitate scheduling and execution in data warehousing, and the Transformation and Warehouse Operation packages together provide metamodel constructs that enable data lineage in data  warehousing.&#13;&#10;&#13;&#10;This section provides a description of the main features of the Transformation package,&#13;&#10;as illustrated in Figure 13-1 (see specification document for figure).&#13;&#10;&#13;&#10;A transformation transforms a set of source objects into a set of target objects. The elements of a data object set can be any ObjectModel model elements, but typically are tables, columns, or model elements that represent transient, in memory, objects. Data object sets can be both sources and targets for different transformations. In particular, a given data object set can be the target of one transformation and the source of one or more transformations within the same logical unit. This is often the case with transformation that produce and consume temporary objects. &#13;&#10;&#13;&#10;Transformations allow a wide range of types (and granularity) to be defined for their data sources and targets. For example, the source type of a transformation can be an XML schema while the target type is a column, if the transformation deals with storing an XML document in a column of a relational database. More typically, the source types of a transformation are classes and attributes while the target types are tables and columns, or vice versa, if the transformation deals with converting object data into relational data, or vice versa.&#13;&#10;&#13;&#10;Existing programs, queries, or rules (in fact, any ObjectModel operations) can be used to perform a transformation by associating them with the transformation using the transformation use dependency.&#13;&#10;&#13;&#10;Transformations can be grouped into logical units. At the functional level, they are grouped into transformation tasks, each of which defines a set of transformations that must be executed and completed together - a logical unit of work. At the execution level, transformation steps are used to coordinate the flow of control between transformation tasks, with each transformation step executing a single transformation task. The transformation steps are further grouped into transformation activities.&#13;&#10;Within each transformation activity, the execution sequence of its transformation steps are defined either explicitly by using the step precedence dependency or precedence constraint, or implicitly through data dependency.&#13;&#10;&#13;&#10;There are certain &quot;white-box&quot; transformations which are commonly used and which can relate data sources and targets to a transformation and to each other at a detailed level. These transformations are convenient to use and they provide data lineage at a fine-grain level. One such transformation is the transformation map which consists of a set of classifier maps that in turn consists of a set of feature maps or classifier-feature maps. The other is the transformation tree, which represents a transformation as an unary or binary expression tree. For an example usage of the transformation map, please see Figure 13-4.&#13;&#10;&#13;&#10;The Transformation package depends on the following packages: &#13;&#10;&#13;&#10;    omg.org::CWM::ObjectModel::Behavioral&#13;&#10;    omg.org::CWM::ObjectModel::Core&#13;&#10;    omg.org::CWM::Foundation::Expressions&#13;&#10;    omg.org::CWM::Foundation::SoftwareDeployment&#13;&#10;&#13;&#10;The CWM uses packages to control complexity and create groupings of logically interrelated classes and associations. The Transformation package is one such package. Within the Transformation package itself, however, the definition of subpackages is purposefully left out to reduce the length and complexity of the fully qualified names of Transformation classes and associations. There are, however, several groupings of classes and associations that form related sets of functionality within the Transformation package. Although separate subpackages have not been created for these functional areas, their identification improves the understandability of the Transformation package.&#13;&#10;&#13;&#10;The Transformation package contains metamodel elements that support the following functions:&#13;&#10;&#13;&#10;1. Transformation and data lineage. These classes and associations deal with transformations and their sources, targets, constraints, and operations.&#13;&#10;&#13;&#10;2. Transformation grouping and execution. These classes and associations deal with grouping of transformations to form logical units and to define execution sequences.&#13;&#10;&#13;&#10;3. Specialized transformations. These classes and associations define specialized, &quot;white box&quot;, transformations that are commonly used in data warehousing. The specific Transformation classes and associations supporting each functional area are delineated in Table 13-1 (see specification document for table).&#13;&#10;&#13;&#10;The metamodel diagram for the Transformation package is split into four parts. The first two diagrams show the Transformation classes and associations, while the last two show the inheritance hierarchy.&#13;&#10;&#13;&#10;13.5 OCL Representation of Transformation Constraints&#13;&#10;&#13;&#10;[C-1] The preceding step and succeeding step of StepPrecedence must not be the same.&#13;&#10;context StepPrecedence&#13;&#10;inv: self.precedingStep-&gt;forAll( p | self.succeedingStep-&gt;forAll( q | p &lt;&gt; q ) )&#13;&#10;&#13;&#10;[C-2] A TransformationTask may not be its own inverse task.&#13;&#10;Identifies the Transformation&#13;&#10;context TransformationTask&#13;&#10;inv: self.inverseTask-&gt;forAll( p | p &lt;&gt; self )&#13;&#10;&#13;&#10;[C-3] A TransformationTask may not be its own original task.&#13;&#10;context TransformationTask&#13;&#10;inv: self.originalTask-&gt;forAll( p | p &lt;&gt; self )&#13;&#10;&#13;&#10;[C-4] The ClassifierMapToCFMap association is derived from the Namespace-ModelElement association. All ownedElement ends of the association must be ClassifierFeatureMaps.&#13;&#10;context ClassifierMapToCFMap&#13;&#10;inv Namespace-ModelElement.allInstances.select( ownedElement.oclIsKindOf(&#13;&#10;ClassifierFeatureMap ) )&#13;&#10;&#13;&#10;[C-5] The ClassifierMapToFeatureMap association is derived from the Namespace-ModelElement association. All ownedElement ends of the association must be FeatureMaps.&#13;&#10;context ClassifierMapToFeatureMap&#13;&#10;inv Namespace-ModelElement.allInstances.select( ownedElement.oclIsKindOf(&#13;&#10;FeatureMap ) )"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="Transformation" eSuperTypes="#//cwm/objectmodel/core/Namespace">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents a transformation from a set of sources to a set of targets. &#13;&#10;&#13;&#10;If a model already exists for the object that performs the Transformation, then the model can be related to the Transformation via a TransformationUse dependency.&#13;&#10;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="function" eType="#//cwm/objectmodel/core/ProcedureExpression" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Any code or script for the Transformation."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="functionDescription" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A short description for any code or script performed by the Transformation."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isPrimary" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="This Transformation is the primary transformation for the associated TransformationTask."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="source" upperBound="-1" eType="#//cwm/analysis/transformation/DataObjectSet" eOpposite="#//cwm/analysis/transformation/DataObjectSet/sourceTransformation">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the sources of the Transformation"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="target" upperBound="-1" eType="#//cwm/analysis/transformation/DataObjectSet" eOpposite="#//cwm/analysis/transformation/DataObjectSet/targetTransformation">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the targets of the Transformation"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="task" upperBound="-1" eType="#//cwm/analysis/transformation/TransformationTask" eOpposite="#//cwm/analysis/transformation/TransformationTask/transformation">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the TransformationTask"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="DataObjectSet" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents a set of data objects that can be the source or target of a Transformation."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="sourceTransformation" upperBound="-1" eType="#//cwm/analysis/transformation/Transformation" eOpposite="#//cwm/analysis/transformation/Transformation/source">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Transformation"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="targetTransformation" upperBound="-1" eType="#//cwm/analysis/transformation/Transformation" eOpposite="#//cwm/analysis/transformation/Transformation/target">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Transformation"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="element" lowerBound="1" upperBound="-1" eType="#//cwm/objectmodel/core/ModelElement" eOpposite="#//cwm/objectmodel/core/ModelElement/set">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the elements in the DataObjectSet"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TransformationTask" eSuperTypes="#//cwm/foundation/softwaredeployment/Component">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents a set of Transformations that must be executed together as a single task (logical unit).&#13;&#10;&#13;&#10;A TransformationTask may have an inverse task. A transformation task that maps a source set &quot;A&quot; into a target set &quot;B&quot; can be reversed by the inverse transformation task that maps &quot;B&quot; into &quot;A&quot;."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="step" upperBound="-1" eType="#//cwm/analysis/transformation/TransformationStep" eOpposite="#//cwm/analysis/transformation/TransformationStep/task">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the TransformationStep"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="originalTask" upperBound="-1" eType="#//cwm/analysis/transformation/TransformationTask" eOpposite="#//cwm/analysis/transformation/TransformationTask/inverseTask">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the original TransformationTask"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="inverseTask" upperBound="-1" eType="#//cwm/analysis/transformation/TransformationTask" eOpposite="#//cwm/analysis/transformation/TransformationTask/originalTask">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the inverse TransformationTaskclass: TransformationTask"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="transformation" lowerBound="1" upperBound="-1" eType="#//cwm/analysis/transformation/Transformation" eOpposite="#//cwm/analysis/transformation/Transformation/task">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Transformations"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TransformationStep" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents the usage of a TransformationTask in a TransformationActivity. A TransformationStep relates to one TransformationTask. &#13;&#10;&#13;&#10;TransformationSteps are used to coordinate the flow of control between their TransformationTasks. Ordering of the TransformationSteps are defined using the PrecedenceConstrainedBy dependency."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="task" lowerBound="1" eType="#//cwm/analysis/transformation/TransformationTask" eOpposite="#//cwm/analysis/transformation/TransformationTask/step">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the TransformationTask"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="warehouseStep" upperBound="-1" eType="#//cwm/management/warehouseprocess/WarehouseStep" eOpposite="#//cwm/management/warehouseprocess/WarehouseStep/transformationStep">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the WarehouseSteps that perform a TranformationStep."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="execution" upperBound="-1" eType="#//cwm/management/warehouseoperation/StepExecution" eOpposite="#//cwm/management/warehouseoperation/StepExecution/transformationStep">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a StepExecution recording details of a specific execution of a&#13;&#10;TransformationStep."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TransformationActivity" eSuperTypes="#//cwm/objectmodel/core/Subsystem">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents a transformation activity. Each TransformationActivity consists of a set&#13;&#10;of TransformationSteps."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="creationDate" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="When the TransformationActivity was created."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="warehouseActivity" upperBound="-1" eType="#//cwm/management/warehouseprocess/WarehouseActivity" eOpposite="#//cwm/management/warehouseprocess/WarehouseActivity/transformationActivity">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the set of WarehouseActivities that run the TransformationActivity."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="execution" upperBound="-1" eType="#//cwm/management/warehouseoperation/ActivityExecution" eOpposite="#//cwm/management/warehouseoperation/ActivityExecution/transformationActivity">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies an ActivityExecution recording details of a specific execution of a TransformationActivity."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="PrecedenceConstraint" eSuperTypes="#//cwm/objectmodel/core/Constraint">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This is used to define order-of-execution constraint among TransformationSteps. It may be used independent of or in conjunction with StepPrecedence."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TransformationUse" eSuperTypes="#//cwm/objectmodel/core/Dependency">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This is a specialized dependency used to associate a Transformation to the model of an existing object (e.g., program, query, or rule) that performs the transformation."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the type of object that can perform the transformation."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TransformationMap" eSuperTypes="#//cwm/analysis/transformation/Transformation">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents a specialized Transformation which consists of a group of ClassifierMaps."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TransformationTree" eSuperTypes="#//cwm/analysis/transformation/Transformation">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents a specialized Transformation which can be modeled as an expression tree. "/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//cwm/analysis/transformation/TreeType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the type of TransformationTree, which can be unary or binary."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="body" eType="#//cwm/foundation/expressions/ExpressionNode" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the expression tree that embodies the TransformationTree."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ClassifierMap" eSuperTypes="#//cwm/objectmodel/core/Namespace">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents a mapping of source Classifiers to target Classifiers. A ClassifierMap may consists of a group of ClassifierFeatureMaps and/or FeatureMaps."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="function" eType="#//cwm/objectmodel/core/ProcedureExpression" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Any code or script for the ClassifierMap."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="functionDescription" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A short description for any code or script performed by the ClassifierMap."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="featureMap" upperBound="-1" eType="#//cwm/analysis/transformation/FeatureMap" containment="true" eOpposite="#//cwm/analysis/transformation/FeatureMap/classifierMap">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the owned FeatureMaps"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="cfMap" upperBound="-1" eType="#//cwm/analysis/transformation/ClassifierFeatureMap" containment="true" eOpposite="#//cwm/analysis/transformation/ClassifierFeatureMap/classifierMap">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the owned ClassifierFeatureMaps"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1" upperBound="-1" eType="#//cwm/objectmodel/core/Classifier" eOpposite="#//cwm/objectmodel/core/Classifier/classifierMap">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the source Classifiers of the ClassifierMap"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="FeatureMap" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents a mapping of source Features to target Features."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="function" eType="#//cwm/objectmodel/core/ProcedureExpression" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Any code or script for the FeatureMap."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="functionDescription" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A short description for any code or script performed by the FeatureMap."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="classifierMap" eType="#//cwm/analysis/transformation/ClassifierMap" transient="true" eOpposite="#//cwm/analysis/transformation/ClassifierMap/featureMap">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the owning ClassifierMap"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1" upperBound="-1" eType="#//cwm/objectmodel/core/Feature" eOpposite="#//cwm/objectmodel/core/Feature/featureMap">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the target Features of the FeatureMap"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EEnum" name="TreeType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="unary, binary"/>
          </eAnnotations>
          <eLiterals name="tfm_unary"/>
          <eLiterals name="tfm_binary" value="1"/>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="StepPrecedence" eSuperTypes="#//cwm/objectmodel/core/Dependency">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This is used to define explicit order-of-execution relationships among TransformationSteps. It may be used independent of or in conjunction with PrecedenceConstraint"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ClassifierFeatureMap" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents a mapping of Classifiers to Features."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="function" eType="#//cwm/objectmodel/core/ProcedureExpression" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Any code or script for the FeatureMap."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="functionDescription" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A short description for any code or script performed by the FeatureMap."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="classifierToFeature" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies if the mapping is from Classifiers (source) to Features (target). The default is true."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="classifierMap" eType="#//cwm/analysis/transformation/ClassifierMap" transient="true" eOpposite="#//cwm/analysis/transformation/ClassifierMap/cfMap">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the owning ClassifierMap"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="classifier" lowerBound="1" upperBound="-1" eType="#//cwm/objectmodel/core/Classifier" eOpposite="#//cwm/objectmodel/core/Classifier/cfMap">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the source/target Classifiers of the ClassifierFeatureMap"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="feature" lowerBound="1" upperBound="-1" eType="#//cwm/objectmodel/core/Feature" eOpposite="#//cwm/objectmodel/core/Feature/cfMap">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the source/target Features of the ClassifierFeatureMap"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
      </eSubpackages>
      <eSubpackages name="olap" nsURI="http:///orgomg/cwm/analysis/olap.ecore" nsPrefix="orgomg.cwm.analysis.olap">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Online Analytical Processing (OLAP) is a class of analytic application software that exposes business data in a multidimensional format. This multidimensional format usually includes the consolidation of data drawn from multiple and diverse information sources. Unlike more traditionally structured representations (e.g., the tabular format of a relational database), the multidimensional orientation is a more natural expression of the way business enterprises view their strategic data. For example, an analyst might use an OLAP application to examine total sales revenue by product and geographic region over time, or, perhaps, compare sales margins for the same fiscal periods of two consecutive years. The ultimate objective of OLAP is the efficient construction of analytical models that transform raw business data into strategic business insight.&#13;&#10;&#13;&#10;There are many ways to implement OLAP. Most OLAP systems are constructed using OLAP server tools that enable logical OLAP structures to be built on top of a variety of physical database systems, such as relational or native multidimensional databases.&#13;&#10;&#13;&#10;The following features are generally found in most OLAP systems:&#13;&#10;&#13;&#10;    Multidimensional representation of business data.&#13;&#10;    Upward consolidation of multidimensional data in a hierarchical manner, possibly with the application of specialized processing rules.&#13;&#10;    The ability to navigate a hierarchy from a consolidated value to the lower level values forming it.&#13;&#10;    Support for time-series analysis; i.e., OLAP users are generally concerned with data and consolidations at specific points in time -- By date, week, quarter, etc.&#13;&#10;    Support for modeling and scenario analysis -- A user should be able to apply arbitrary &quot;what-if&quot; analyses to a result set without affecting the stored information.&#13;&#10;    Consistent response times, regardless of how queries are formulated -- This is critical for effective analysis and modeling.&#13;&#10;&#13;&#10;OLAP applications integrate well into the data warehousing environment, because a data warehouse provides relatively clean and stable data stores to drive the OLAP application. These data stores are usually maintained in relational tables that can be read directly by OLAP tools or loaded into OLAP servers. These relational tables are often structured in a manner that reveals the inherent dimensionality of the data (such as the ubiquitous Star and Snowflake schemas). Also, the data transformation and mapping services provided by a data warehouse can be used to supply OLAP systems with both metadata and data. Transformation-related metadata can be used to track the&#13;&#10;lineage of consolidated OLAP data back to its various sources.&#13;&#10;&#13;&#10;The primary objectives of the CWM OLAP package are:&#13;&#10;&#13;&#10;    Define a metamodel of essential OLAP concepts common to most OLAP systems.&#13;&#10;    Provide a facility whereby instances of the OLAP metamodel are mapped to deployment-capable structures (i.e., models of physical data resources, such as the CWM Relational and Multidimensional packages).&#13;&#10;    Ensure that navigation through the logical OLAP model hierarchy and its various resource models is always performed in a uniform manner (i.e., by defining a standard usage of the CWM Transformation package as a means of implementing these mappings).&#13;&#10;    Leverage services provided by other CWM packages, where appropriate (e.g., use the CWM Foundation package to supply a standard representation of expressions).&#13;&#10;&#13;&#10;The OLAP package depends on the following packages:&#13;&#10;&#13;&#10;   org.omg::CWM::ObjectModel::Core&#13;&#10;   org.omg::CWM::Foundation::Expressions&#13;&#10;   org.omg::CWM::Analysis::Transformation&#13;&#10;&#13;&#10;The major classes and associations of the OLAP metamodel are shown in Figure 14-1.  Schema is the logical container of all elements comprising an OLAP model. It is the root element of the model hierarchy and marks the entry point for navigating OLAP models.&#13;&#10;&#13;&#10;A Schema contains Dimensions and Cubes. A Dimension is an ordinate within a multidimensional structure and consists of a list of unique values (i.e., members) that share a common semantic meaning within the domain being modeled. Each member designates a unique position along its ordinate.&#13;&#10;&#13;&#10;A Cube is a collection of analytic values (i.e., measures) that share the same dimensionality. This dimensionality is specified by a set of unique Dimensions from the Schema. Each unique combination of members in the Cartesian product of the Cube’s Dimensions identifies precisely one data cell within a multidimensional structure.&#13;&#10;&#13;&#10;CubeDimensionAssociation relates a Cube to its defining Dimensions. Features relevant to Cube-Dimension relationships (e.g., calcHierarchy) are exposed by this class.&#13;&#10;&#13;&#10;A Dimension has zero or more Hierarchies. A Hierarchy is an organizational structure that describes a traversal pattern through a Dimension, based on parent/child relationships between members of a Dimension. Hierarchies are used to define both navigational and consolidation/computational paths through the Dimension (i.e., a value associated with a child member is aggregated by one or more parents). For example, a Time Dimension with a base periodicity of days might have a Hierarchy&#13;&#10;specifying the consolidation of days into weeks, weeks into months, months into quarters, and quarters into years.&#13;&#10;&#13;&#10;A specific Hierarchy may be designated as the default Hierarchy for display purposes (e.g., a user interface that displays the Dimension as a hierarchical tree of members).  CubeDimensionAssociation can also identify a particular Hierarchy as the default Hierarchy for consolidation calculations performed on the Cube.&#13;&#10;&#13;&#10;MemberSelection models mechanisms capable of partitioning a Dimension’s collection of members. For example, consider a Geography Dimension with members representing cities, states, and regions. An OLAP client interested specifically in cities might define an instance of MemberSelection that extracts the city members.&#13;&#10;&#13;&#10;CubeRegion models a sub-unit of a Cube that is of the same dimensionality as the Cube itself. Each &quot;dimension&quot; of a CubeRegion is represented by a MemberSelection of the corresponding Dimension  of the Cube. Each MemberSelection may define some subset of its Dimension’s members.&#13;&#10;&#13;&#10;CubeRegions are used to implement Cubes. A Cube may be realized by a set of CubeRegions that map portions of the logical Cube to physical data sources. The MemberSelections defining CubeRegions can also be grouped together via MemberSelectionGroups, enabling the definition of CubeRegions with specific semantics. For example, one can specify a CubeRegion containing only the &quot;input level&quot; data cells of a Cube.&#13;&#10;&#13;&#10;A CubeRegion may own any number of CubeDeployments. CubeDeployment is a metaclass that represents an implementation strategy for a multidimensional structure. The ordering of the CubeDeployment classes may optionally be given some implementation-specific meaning (e.g., desired order of selection of several possible deployment strategies, based on optimization considerations).&#13;&#10;&#13;&#10;The OLAP metamodel defines two special types of Dimension: Time and Measure. A Time Dimension provides a means of representing time-series data within a multidimensional structure. The members of a Time Dimension usually define some base periodicity (e.g., days of the week). The implementation of a Time Dimension might provide support for advanced &quot;time-intelligent&quot; functionality, such as the ability to automatically convert between different periodicities and calendars.&#13;&#10;&#13;&#10;The members of a Measure Dimension describe the meaning of the analytic values stored in each data cell of a multidimensional structure. For example, an OLAP application may define Sales, Quantity and Weight as its measures. In this case, each data cell within the Cube stores three values, with each value corresponding to one of the three measures. A measure may have an associated data type. For example, Sales might be of a monetary type, Quantity an integer, and Weight a real number.&#13;&#10;&#13;&#10;The OLAP metamodel specifies two subclasses of Hierarchy: LevelBasedHierarchy and ValueBasedHierarchy.&#13;&#10;&#13;&#10;LevelBasedHierarchy describes hierarchical relationships between specific levels of a Dimension. LevelBasedHierarchy is used to model both &quot;pure level&quot; hierarchies (e.g., dimension-level tables) and &quot;mixed&quot; hierarchies (i.e., levels plus linked nodes). Dimensional levels are modeled by the Level class, a subclass of MemberSelection that partitions a Dimension’s members into disjoint subsets, each representing a distinct level.&#13;&#10;&#13;&#10;For example, the Geography Dimension cited earlier contains members representing cities, states, and regions, such as &quot;Stamford&quot;, &quot;Connecticut&quot;, and &quot;NorthEast&quot;. It might also contain a single member called &quot;USA&quot; representing all regions of the United States. Therefore, the Geography Dimension could have four Levels named &quot;City&quot;, &quot;State&quot;, 'Region&quot;, and &quot;ALL&quot;, respectively. Each Level specifies the subset of members belonging to it: All cities belong to the &quot;City&quot; Level, all states belong to the &quot;State&quot; Level, all regions belong to the &quot;Region&quot; Level, and the single &quot;USA&quot; member belongs to the &quot;ALL&quot; Level.&#13;&#10;&#13;&#10;When used in the definition of a consolidation path, the meaning of &quot;level&quot; is quite clear: Members occupying a given Level consolidate into the next higher Level (e.g., City rolls up into State, State into Region, and Region into ALL).&#13;&#10;&#13;&#10;LevelBasedHierarchy contains an ordered collection of HierarchyLevelAssocations that defines the natural hierarchy of the Dimension. The ordering defines the hierarchical structure in top-down fashion (i.e., the &quot;first&quot; HierarchyLevelAssociation in the ordered collection represents the upper-most level of the dimensional hierarchy).&#13;&#10;&#13;&#10;A HierarchyLevelAssociation may own any number of DimensionDeployments. DimensionDeployment is a metaclass that represents an implementation strategy for hierarchical Dimensions. The ordering of the DimensionDeployment classes may optionally be given an implementation-specific meaning (e.g., desired order of selection of several possible deployment strategies, based on optimization&#13;&#10;considerations).&#13;&#10;&#13;&#10;A ValueBasedHierarchy defines a hierarchical ordering of members in which the concept of level has little or no significance. Instead, the topological structure of the hierarchy conveys meaning. ValueBasedHierarchies are often used to model situations where members are classified or ranked according to their distance from a common root member (e.g., an organizational chart of a corporation). In this case, each member of the hierarchy has some specific &quot;metric&quot; or &quot;value&quot; associated it with it. ValueBasedHierarchy can be used to model pure &quot;linked node&quot; hierarchies (e.g.,&#13;&#10;asymmetric hierarchical graphs or parent-child tables). &#13;&#10;&#13;&#10;As with LevelBasedHierarchy, ValueBasedHierarchy also has an ordered collection of dimensionDeployments, where the ordering semantics are left to implementations to define.&#13;&#10;&#13;&#10;Figure 14-3 illustrates how classes of the OLAP metamodel inherit from the CWM&#13;&#10;Object Model. Two classes requiring further explanation are:&#13;&#10;&#13;&#10;    Measure: A subclass of Attribute that describes the meaning of values stored in the data cells of a multidimensional structure. Different OLAP models often give different interpretations to the term &quot;measure&quot;. In a relational Star Schema, individual measures might be represented by non-key columns of a Fact table (e.g., &quot;Sales&quot; and &quot;Quantity&quot; columns). In this case, measure may be an attribute of a Cube or CubeRegion that models the Fact table. On the other hand, measures can&#13;&#10;also be represented by members of a Measure Dimension. A Fact table supporting this representation has a single Measure column with column values consisting of the members &quot;Sales&quot; and &quot;Quantity&quot;, and a single &quot;value&quot; column (i.e., an implicit data dimension) storing the corresponding measure values. A similar notion of Measure Dimension is used in modeling pure hypercube representations of&#13;&#10;multidimensional servers. Thus, the concept of measure can be represented either as a Dimenson or as an Attribute, depending on the type of OLAP system being modeled.&#13;&#10;&#13;&#10;    Coded Level: A subclass of Level that assigns a unique encoding, or label, to each of its members. CodedLevel is not essential to the OLAP metamodel, but is provided as a helper class for certain applications that might benefit from the ability of OLAP systems to structure data hierarchically. For example, CodedLevel could be used to model systems of nomenclature or classification.&#13;&#10;&#13;&#10;The CWM OLAP metamodel describes logical models of OLAP systems, but does not directly specify how an OLAP system is physically deployed. Modeling the deployment of an OLAP system requires mapping instances of OLAP metaclasses to instances of other CWM metaclasses representing physical resources (e.g., mapping an OLAP Dimension to a Relational Table). This approach offers several advantages:&#13;&#10;&#13;&#10;    The status of the OLAP metamodel as a conceptual model is preserved by this level of indirection. When using OLAP, a client may perceive to be working directly with OLAP objects, but the actual implementation of those objects is hidden from the client. For example, a client may view a member as a value of a Dimension, but whether that member value comes from a row of a relational table, or from a cell in a multidimensional database, is usually not obvious to the client. On the other hand, if a client needs to determine how a logical OLAP structure is physically realized, the metadata describing this mapping is fully available (assuming that the implementation allows the client to drill-down through the metadata).&#13;&#10;&#13;&#10;    The possibility of defining mappings based on expressions means that the amount of metadata required to describe large models (e.g., Dimensions containing large collections of members) can be kept within reasonable bounds. It is generally more efficient to provide expressions that specify where large metadata sets reside, how to connect to them, and how to map their contents, rather than representing them directly as part of the metadata content.&#13;&#10;&#13;&#10;All of the OLAP metaclasses are potential candidates for such deployment mappings. In addition, some OLAP models may also define mappings between several OLAP metaclass instances, forming a natural hierarchy of logical objects (e.g., Dimension Attributes are mapped to Level Attributes which, in turn, are mapped to Table Columns).&#13;&#10;&#13;&#10;The CWM Transformation package is used as the primary means of describing these mappings. A modeler constructing an OLAP model based on CWM will generally define instances of the TransformationMap metaclass to link logical OLAP objects together, and to link those logical objects to other objects representing their physical data sources.&#13;&#10;&#13;&#10;StructureMap is a subclass of TransformationMap that models structure-oriented transformation mappings (i.e., member identity and hierarchical structure). This type of transformation mapping needs to be connected to the OLAP metamodel in a very specific way (according to Level and Hierarchy), so the StructureMap subclass is defined to make these associations explicit. Two specific usages of StructureMap are defined: ListOfValues, which maps attributes identifying members residing at a specific Level, or at a specific Level within a particular Hierarchy, and ImmediateParent, which maps attributes identifying the hierarchical parent(s) of the members.&#13;&#10;&#13;&#10;On the other hand, relatively simple TransformationMaps can be defined within any OLAP model to represent attribute-oriented transformations (e.g., mapping Dimension Attributes to Table Columns that store attribute values).&#13;&#10;&#13;&#10;ContentMap is a subclass of TransformationMap that models content-oriented transformaton mappings (i.e., cell data or measure values). For example, an instance of ContentMap might be used to map each of a CubeRegion’s Measures to Columns of an underlying Fact Table.&#13;&#10;&#13;&#10;Note that, in either case (structural mapping or content mapping), the traversal patterns used by any CWM OLAP implementation are always the same, since both deployment mappings are based on the same usage of CWM TransformationMaps. In addition to representing structural mappings, instances of TransformationMap and its subclasses are also capable of storing implementation-dependent functions or procedures that yield the instance values associated with mapped model elements. For example, a &quot;list of values&quot; StructureMap might store an SQL statement such as &quot;select memberName from Product where productFamily = ’consumerElectronics’ &quot;, as the value of its formula attribute.&#13;&#10;&#13;&#10;Figure 14-4 illustrates the CWM metaclasses and associations that describe deployment mappings between logical OLAP models and physical resource models. Note that it is possible to combine both Cube (content) and Dimension (structure) deployments together within the context of a single OLAP Schema (via the DeploymentGroup metaclass). Thus, an OLAP Schema can have several possible deployments that users may select based on implementation-specific considerations (e.g., physical optimizations).&#13;&#10;&#13;&#10;OCL Representation of OLAP Constraints&#13;&#10;&#13;&#10;[C-1] Ensure that the Dimensions defining a Cube are unique.&#13;&#10;context Cube inv:&#13;&#10;self.cubeDimensionAssociation-&gt;forAll( c1, c2 | c1 &lt;&gt; c2 implies&#13;&#10;c1.dimension &lt;&gt; c2.dimension )&#13;&#10;&#13;&#10;[C-2] A Cube without CubeRegions cannot be mapped to a deployment structure (i.e., physical source of data).&#13;&#10;context Cube inv:&#13;&#10;self.cubeRegion-&gt;isEmpty implies self.isVirtual = true&#13;&#10;&#13;&#10;[C-3] If a calcHierarchy is defined, it must be a Hierarchy owned by the Dimension referenced by the CubeDimensionAssociation.&#13;&#10;context CubeDimensionAssociation inv:&#13;&#10;self.calcHierarchy-&gt;notEmpty implies self.calcHierarchy.dimension = self.dimension&#13;&#10;&#13;&#10;[C-4] A &quot;fully realized&quot; CubeRegion has no MemberSelectionGroups (and hence, no MemberSelections).&#13;&#10;context CubeRegion inv:&#13;&#10;self.isFullyRealized implies self.memberSelectionGroup-&gt;isEmpty&#13;&#10;&#13;&#10;[C-5] A CubeRegion defined by MemberSelections must have, for each Dimension of its owning Cube, a corresponding MemberSelection within each of its&#13;&#10;MemberSelectionGroups.&#13;&#10;context CubeRegion inv:&#13;&#10;self.memberSelectionGroup-&gt;notEmpty implies&#13;&#10;self.cube.cubeDimensionAssociation-&gt;forAll( d |&#13;&#10;self.memberSelectionGroup-&gt;forAll( g |&#13;&#10;g.memberSelection-&gt;exists( m | m.dimension = d.dimension ) ) )&#13;&#10;&#13;&#10;[C-6] A CubeRegion defined by MemberSelections must have, within each MemberSelectionGroup, a MemberSelection corresponding to each Dimension of its&#13;&#10;owning Cube.&#13;&#10;context CubeRegion inv:&#13;&#10;self.memberSelectionGroup-&gt;notEmpty implies&#13;&#10;self.memberSelectionGroup-&gt;forAll( g |&#13;&#10;g.memberSelection-&gt;forAll( m |&#13;&#10;self.cube.cubeDimensionAssociation-&gt;exists( d | d.dimension = m.dimension ) ) )&#13;&#10;&#13;&#10;[C-7] A Dimension may be a Time Dimension, a Measure Dimension, or neither, but never both types at the same time.&#13;&#10;context Dimension inv:&#13;&#10;not ( self.isTime and self.isMeasure )&#13;&#10;&#13;&#10;[C-8] The default display Hierarchy (if defined) must be one of the Hierarchies owned by the Dimension.&#13;&#10;context Dimension inv:&#13;&#10;self.displayDefault-&gt;notEmpty implies self.hierarchy-&gt;includes( self.displayDefault )&#13;&#10;&#13;&#10;[C-9] An instance of DimensionDeployment must be referenced exclusively by either a HierarchyLevelAssociation or a ValueBasedHierarchy.&#13;&#10;context DimensionDeployment inv:&#13;&#10;self.hierarchyLevelAssociation-&gt;isEmpty xor self.valueBasedHierarchy-&gt;isEmpty&#13;&#10;&#13;&#10;[C-10] Within a DimensionDeployment, an &quot;immediate parent&quot; StructureMap must always have an associated and distinct &quot;list of values&quot; StructureMap.&#13;&#10;context DimensionDeployment inv:&#13;&#10;self.immediateParent-&gt;notEmpty implies&#13;&#10;( self.listOfValues-&gt;notEmpty and self.listOfValues &lt;&gt; self.immediateParent )&#13;&#10;&#13;&#10;[C-11] A StructureMap referenced as a &quot;list of values&quot; StructureMap must not reside outside of the DimensionDeployment’s collection of StructureMaps.&#13;&#10;context DimensionDeployment inv:&#13;&#10;self.listOfValues-&gt;notEmpty implies self.structureMap-&gt;includes( self.listOfValues )&#13;&#10;&#13;&#10;[C-12] A StructureMap referenced as an &quot;immediate parent&quot; StructureMap must not reside outside of the DimensionDeployment’s collection of StructureMaps.&#13;&#10;context DimensionDeployment inv:&#13;&#10;self.immediateParent-&gt;notEmpty implies&#13;&#10;self.structureMap-&gt;includes( self.immediateParent )&#13;&#10;&#13;&#10;[C-13] The currentLevel of each HierarchyLevelAssociation must refer to a Level owned by the Dimension of the LevelBasedHierarchy containing the HierarchyLevelAssociation.&#13;&#10;context LevelBasedHierarchy inv:&#13;&#10;self.hierarchyLevelAssociation-&gt;notEmpty implies&#13;&#10;self.hierarchyLevelAssociation-&gt;forAll( h |&#13;&#10;self.dimension.memberSelection&#13;&#10;-&gt;select( oclType = Olap::Level )-&gt;includes( h.currentLevel ) )&#13;&#10;&#13;&#10;[C-14] No two HierarchyLevelAssociations may designate the same Level instance as their &quot;current level&quot;.&#13;&#10;context LevelBasedHierarchy inv:&#13;&#10;self.hierarchyLevelAssociation-&gt;forAll( h1, h2 | h1 &lt;&gt; h2 implies&#13;&#10;h1.currentLevel &lt;&gt; h2.currentLevel )"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="ContentMap" eSuperTypes="#//cwm/analysis/transformation/TransformationMap">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="ContentMap is a subclass of TransformationMap that maps CubeRegion attributes to their physical data sources."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="cubeDeployment" lowerBound="1" eType="#//cwm/analysis/olap/CubeDeployment" transient="true" eOpposite="#//cwm/analysis/olap/CubeDeployment/contentMap">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The CubeDeployment owning a ContentMap."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Cube" eSuperTypes="#//cwm/objectmodel/core/Class">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A Cube is a collection of analytic values (i.e., measures) that share the same dimensionality.  This dimensionality is specified by a set of unique Dimensions from the Schema.  Each unique combination of members in the Cartesian product of the Cube’s Dimensions identifies precisely one data cell within a multidimensional structure.&#13;&#10;&#13;&#10;Synonyms: Multidimensional Array, Hypercube, Hypervolume.&#13;&#10;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isVirtual" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="If true, then this Cube is a Virtual Cube (i.e., it has no physical realization)."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="cubeDimensionAssociation" upperBound="-1" eType="#//cwm/analysis/olap/CubeDimensionAssociation" containment="true" eOpposite="#//cwm/analysis/olap/CubeDimensionAssociation/cube">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="CubeDimAssocs owned by the Cube."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="schema" lowerBound="1" eType="#//cwm/analysis/olap/Schema" transient="true" eOpposite="#//cwm/analysis/olap/Schema/cube">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Schema owning a Cube."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="cubeRegion" upperBound="-1" eType="#//cwm/analysis/olap/CubeRegion" containment="true" eOpposite="#//cwm/analysis/olap/CubeRegion/cube">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="CubeRegions owned by the Cube."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CubeDeployment" eSuperTypes="#//cwm/objectmodel/core/Class">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="CubeDeployment represents a particular implementation strategy for the data portions of an OLAP model.  It does so by organizing a collection of ContentMaps, which in turn define a mapping to an implementation model."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="cubeRegion" lowerBound="1" eType="#//cwm/analysis/olap/CubeRegion" transient="true" eOpposite="#//cwm/analysis/olap/CubeRegion/cubeDeployment">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The CubeRegion owning a CubeDeployment."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="deploymentGroup" lowerBound="1" eType="#//cwm/analysis/olap/DeploymentGroup" eOpposite="#//cwm/analysis/olap/DeploymentGroup/cubeDeployment">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The DeploymentGroups referencing a CubeDeployment."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="contentMap" upperBound="-1" eType="#//cwm/analysis/olap/ContentMap" containment="true" eOpposite="#//cwm/analysis/olap/ContentMap/cubeDeployment">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The collection of ContentMaps owned by a CubeDeployment."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CubeDimensionAssociation" eSuperTypes="#//cwm/objectmodel/core/Class">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="CubeDimensionAssociation relates a Cube to the Dimensions that define it.  Features relevant to Cube-Dimension relationships (e.g., calcHierarchy) are exposed by this class.&#13;&#10;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="cube" lowerBound="1" eType="#//cwm/analysis/olap/Cube" transient="true" eOpposite="#//cwm/analysis/olap/Cube/cubeDimensionAssociation">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Cube owning CubeDimAssocs."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dimension" lowerBound="1" eType="#//cwm/analysis/olap/Dimension" eOpposite="#//cwm/analysis/olap/Dimension/cubeDimensionAssociation">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Dimension referenced by CubeDimAssocs."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="calcHierarchy" eType="#//cwm/analysis/olap/Hierarchy" eOpposite="#//cwm/analysis/olap/Hierarchy/cubeDimensionAssociation">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Hierarchy designated by a CubeDimAssoc as the default Hierarchy to be used in consolidation calculations performed on the Cube."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CubeRegion" eSuperTypes="#//cwm/objectmodel/core/Class">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="CubeRegion models a sub-unit of a Cube of the same dimensionality as the Cube itself, with each Dimension optionally subsetted in its list of members.&#13;&#10;&#13;&#10;When mapped to its physical source, a CubeRegion contains data cells identified by the member combinations of the Cartesian product of the CubeRegion's associated Dimensions and Measures.&#13;&#10;&#13;&#10;The relative ordering of CubeDeployment classes optionally implies a desired order of selection of the CubeDeployments, based on implementation-specific considerations (e.g., optimized access of aggregate data).&#13;&#10;&#13;&#10;Synonyms: Sub-Cube, Partition, Slice, Region, Area.&#13;&#10;&#13;&#10;Misc. notes:&#13;&#10;1.  A CubeRegion is not a Cube, and a Cube is not a CubeRegion.&#13;&#10;2.  A Cube has a Measure and CubeRegion may have a corresponding measure (Measures are Attributes).&#13;&#10;3.  A Cube may or may not have CubeRegions.&#13;&#10;4.  If a Cube does not have a CubeRegion, then it's not physically mapped (it's virtual).  All physical mapping is based on the CubeRegion , not the Cube."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isReadOnly" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="If true, then the CubeRegion content is read-only (i.e., may not be written or updated through the CubeRegion -- e.g., a CubeRegion implemented via an SQL view may not permit updates to the underlying base table)."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isFullyRealized" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="If true, then this CubeRegion has a direct physical realization and is not bound by any MemberSelections."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="cube" lowerBound="1" eType="#//cwm/analysis/olap/Cube" transient="true" eOpposite="#//cwm/analysis/olap/Cube/cubeRegion">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Cube owning CubeRegions."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="memberSelectionGroup" upperBound="-1" eType="#//cwm/analysis/olap/MemberSelectionGroup" containment="true" eOpposite="#//cwm/analysis/olap/MemberSelectionGroup/cubeRegion">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="MemberSelectionGroups owned by the CubeRegion."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="cubeDeployment" upperBound="-1" eType="#//cwm/analysis/olap/CubeDeployment" containment="true" eOpposite="#//cwm/analysis/olap/CubeDeployment/cubeRegion">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The CubeDeployments owned by a CubeRegion."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="DeploymentGroup" eSuperTypes="#//cwm/objectmodel/core/Package">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="DeploymentGroup represents a logical grouping of model elements defining a single, complete deployment of an instance of Olap Schema (i.e., CubeDeployments and DimensionDeployments).&#13;&#10;&#13;&#10;The usage of DeploymentGroup is as follows: A user may specify a particular DeploymentGroup as the session-wide, default deployment for all metadata queries performed throughout the session. Alternatively, for queries involving some particular deployed object (e.g., a Cube or a Dimension), the user may be asked to choose from a list of deployments.  This either becomes the default deployment for the remainder of the session, or the user may continue to be asked to specify a deployment for each  subsequent query against deployed objects."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="schema" lowerBound="1" eType="#//cwm/analysis/olap/Schema" transient="true" eOpposite="#//cwm/analysis/olap/Schema/deploymentGroup">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Schema owning a DeploymentGroup."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="cubeDeployment" upperBound="-1" eType="#//cwm/analysis/olap/CubeDeployment" eOpposite="#//cwm/analysis/olap/CubeDeployment/deploymentGroup">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The CubeDeployments referenced by a DeploymentGroup."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dimensionDeployment" upperBound="-1" eType="#//cwm/analysis/olap/DimensionDeployment" eOpposite="#//cwm/analysis/olap/DimensionDeployment/deploymentGroup">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The DimensionDeployments referenced by a DeploymentGroup."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Dimension" eSuperTypes="#//cwm/objectmodel/core/Class">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A Dimension is an ordinate within a multidimensional structure, and consists of an ordered list of values (i.e.,  members) that share a common semantic meaning within the domain being modeled.  Each member designates a unique position along its ordinate.&#13;&#10;&#13;&#10;Typical Dimensions are: Time, Product, Geography, Scenario (e.g., actual, budget, forecast), Measure (e.g., sales, quantity).&#13;&#10;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isTime" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="If true, then this Dimension is a Time Dimension (i.e., its members collectively represent a time series)."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isMeasure" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="If true, then this Dimension is a Measure Dimension (i.e., its members represent Measures)."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="memberSelection" upperBound="-1" eType="#//cwm/analysis/olap/MemberSelection" containment="true" eOpposite="#//cwm/analysis/olap/MemberSelection/dimension">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="MemberSelections owned by the Dimension."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="cubeDimensionAssociation" upperBound="-1" eType="#//cwm/analysis/olap/CubeDimensionAssociation" eOpposite="#//cwm/analysis/olap/CubeDimensionAssociation/dimension">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="CubeDimAssocs referencing the Dimension."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="hierarchy" upperBound="-1" eType="#//cwm/analysis/olap/Hierarchy" containment="true" eOpposite="#//cwm/analysis/olap/Hierarchy/dimension">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Hierarchies owned by the Dimension."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="displayDefault" eType="#//cwm/analysis/olap/Hierarchy" eOpposite="#//cwm/analysis/olap/Hierarchy/defaultedDimension">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Hierarchy designated by the Dimension as its default Hierarchy for display purposes."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="schema" lowerBound="1" eType="#//cwm/analysis/olap/Schema" transient="true" eOpposite="#//cwm/analysis/olap/Schema/dimension">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Schema owning a Dimension"/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="DimensionDeployment" eSuperTypes="#//cwm/objectmodel/core/Class">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="DimensionDeployment represents a particular implementation strategy for the dimensional/hierarchical portions of an OLAP model.  It does so by organizing a collection of StructureMaps, which in turn define a mapping to an implementation model.&#13;&#10;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="hierarchyLevelAssociation" eType="#//cwm/analysis/olap/HierarchyLevelAssociation" transient="true" eOpposite="#//cwm/analysis/olap/HierarchyLevelAssociation/dimensionDeployment">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The HierarchyLevelAssociation owning DimensionDeployments."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="valueBasedHierarchy" eType="#//cwm/analysis/olap/ValueBasedHierarchy" transient="true" eOpposite="#//cwm/analysis/olap/ValueBasedHierarchy/dimensionDeployment">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The ValueBasedHierarchy owning a DimensionDeployment."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="structureMap" upperBound="-1" eType="#//cwm/analysis/olap/StructureMap" containment="true" eOpposite="#//cwm/analysis/olap/StructureMap/dimensionDeployment">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The StructureMaps owned by a DimensionDeployment."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="listOfValues" eType="#//cwm/analysis/olap/StructureMap" eOpposite="#//cwm/analysis/olap/StructureMap/dimensionDeploymentLV">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The StructureMap referenced by a DimensionDeployment as its &quot;list of values&quot; StructureMap."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="immediateParent" eType="#//cwm/analysis/olap/StructureMap" eOpposite="#//cwm/analysis/olap/StructureMap/dimensionDeploymentIP">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The StructureMap referenced by a DimensionDeployment as its &quot;immediate parent&quot;."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="deploymentGroup" lowerBound="1" eType="#//cwm/analysis/olap/DeploymentGroup" eOpposite="#//cwm/analysis/olap/DeploymentGroup/dimensionDeployment">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The DeploymentGroups referencing a DimensionDeployment."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Hierarchy" abstract="true" eSuperTypes="#//cwm/objectmodel/core/Class">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A Hierarchy is an organizational structure that imposes a parent/child ordering on the members of the Dimension, usually to define either a navigational or consolidation/computational paths through the Dimension (i.e., a value associated with a child member is aggregated into one or more parents). "/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dimension" lowerBound="1" eType="#//cwm/analysis/olap/Dimension" transient="true" eOpposite="#//cwm/analysis/olap/Dimension/hierarchy">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Dimension owning Hierarchies."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="defaultedDimension" eType="#//cwm/analysis/olap/Dimension" eOpposite="#//cwm/analysis/olap/Dimension/displayDefault">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Dimension designating the Hierarchy as its default Hierarchy for display purposes."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="cubeDimensionAssociation" upperBound="-1" eType="#//cwm/analysis/olap/CubeDimensionAssociation" eOpposite="#//cwm/analysis/olap/CubeDimensionAssociation/calcHierarchy">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="CubeDimAssocs designating the default Hierarchy to be used in consolidation calculations performed on the Cube."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="HierarchyLevelAssociation" eSuperTypes="#//cwm/objectmodel/core/Class">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="HierarchyLevelAssociation is a class that orders Levels within a LevelBasedHierarchy, and provides a means of mapping Level/Hierarchy-oriented  Dimension attributes to one or more physical deployments.&#13;&#10;&#13;&#10;The relative ordering of DimensionDeployment classes optionally implies a desired order of selection of DimensionDeployments, based on implementation-specific considerations (e.g., optimized access of aggregate data)."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="levelBasedHierarchy" lowerBound="1" eType="#//cwm/analysis/olap/LevelBasedHierarchy" transient="true" eOpposite="#//cwm/analysis/olap/LevelBasedHierarchy/hierarchyLevelAssociation">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The LevelBasedHierarchy owning HierarchyLevelAssocs."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="currentLevel" lowerBound="1" eType="#//cwm/analysis/olap/Level" eOpposite="#//cwm/analysis/olap/Level/hierarchyLevelAssociation">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Level designated by a HierarchyLevelAssoc as its current level."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dimensionDeployment" upperBound="-1" eType="#//cwm/analysis/olap/DimensionDeployment" containment="true" eOpposite="#//cwm/analysis/olap/DimensionDeployment/hierarchyLevelAssociation">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The DimensionDepolyments owned by a HierarchyLevelAssociation."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="LevelBasedHierarchy" eSuperTypes="#//cwm/analysis/olap/Hierarchy">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A LevelBasedHierarchy is a hierarchy that describes relationships between specific levels of a Dimension. LevelBasedHierarchy can be used to model to &quot;pure level&quot; hierarchies (e.g., dimension-level tables) and &quot;mixed&quot; hierarchies (i.e., levels + linked nodes).&#13;&#10;"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="hierarchyLevelAssociation" upperBound="-1" eType="#//cwm/analysis/olap/HierarchyLevelAssociation" containment="true" eOpposite="#//cwm/analysis/olap/HierarchyLevelAssociation/levelBasedHierarchy">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="HierarchyLevelAssocs owned by the LevelBasedHierarchy."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="MemberSelectionGroup" eSuperTypes="#//cwm/objectmodel/core/Class">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="MemberSelectionGroup enables the grouping together of semantically-related MemberSelections."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="memberSelection" lowerBound="1" upperBound="-1" eType="#//cwm/analysis/olap/MemberSelection" eOpposite="#//cwm/analysis/olap/MemberSelection/memberSelectionGroup">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="MemberSelections referenced by MemberSelGrps."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="cubeRegion" lowerBound="1" eType="#//cwm/analysis/olap/CubeRegion" transient="true" eOpposite="#//cwm/analysis/olap/CubeRegion/memberSelectionGroup">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The CubeRegion owning MemberSelectionGroups."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="MemberSelection" eSuperTypes="#//cwm/objectmodel/core/Class">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="MemberSelection represents an arbitrary subset of the members of a Dimension."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dimension" lowerBound="1" eType="#//cwm/analysis/olap/Dimension" transient="true" eOpposite="#//cwm/analysis/olap/Dimension/memberSelection">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Dimension owning MemberSelections."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="memberSelectionGroup" upperBound="-1" eType="#//cwm/analysis/olap/MemberSelectionGroup" eOpposite="#//cwm/analysis/olap/MemberSelectionGroup/memberSelection">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="MemberSelGrps referencing MemberSelections."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Schema" eSuperTypes="#//cwm/objectmodel/core/Package">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Schema contains all elements comprising an OLAP model.  A Schema may also contain any number of DeploymentGroups, representing the various physical deployments of the logical Schema."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="cube" upperBound="-1" eType="#//cwm/analysis/olap/Cube" containment="true" eOpposite="#//cwm/analysis/olap/Cube/schema">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Cubes owned by a Schema."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dimension" upperBound="-1" eType="#//cwm/analysis/olap/Dimension" containment="true" eOpposite="#//cwm/analysis/olap/Dimension/schema">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Dimension owned by a Schema."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="deploymentGroup" upperBound="-1" eType="#//cwm/analysis/olap/DeploymentGroup" containment="true" eOpposite="#//cwm/analysis/olap/DeploymentGroup/schema">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The DeploymentGroups owned by a Schema."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ValueBasedHierarchy" eSuperTypes="#//cwm/analysis/olap/Hierarchy">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="ValueBasedHierarchy is a subclass of Hierarchy that ranks Dimension members according to their relative distance from the root.  Each member of a ValueBasedHierarchy has a specific &quot;metric&quot; or &quot;value&quot; associated with it.&#13;&#10;ValueBasedHierarchy is used to model pure &quot;linked node&quot; hierarchies (e.g., parent-child tables)."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dimensionDeployment" upperBound="-1" eType="#//cwm/analysis/olap/DimensionDeployment" containment="true" eOpposite="#//cwm/analysis/olap/DimensionDeployment/valueBasedHierarchy">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The DimensionDepolyments owned by a ValueBasedHierarchy."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Level" eSuperTypes="#//cwm/analysis/olap/MemberSelection">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Level is a subclass of MemberSelection that assigns each member of a Dimension to a specific hierarchical level within the Dimension."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="hierarchyLevelAssociation" upperBound="-1" eType="#//cwm/analysis/olap/HierarchyLevelAssociation" eOpposite="#//cwm/analysis/olap/HierarchyLevelAssociation/currentLevel">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The HierarchyLevelAssocs designating this Level as their current level."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="CodedLevel" eSuperTypes="#//cwm/analysis/olap/Level">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="CodedLevel is a subclass of Level that assigns a unique encoding, or label, to each of its Dimension members."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="encoding" eType="#//cwm/foundation/expressions/ExpressionNode" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Encoding is an expression that generates a unique encoding, or label, for each member of a CodedLevel."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Measure" eSuperTypes="#//cwm/objectmodel/core/Attribute">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Measure is a subclass of Attribute representing Dimension Measures (e.g., Sales, Quantity, Weight).  Synonym: Variable."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="StructureMap" eSuperTypes="#//cwm/analysis/transformation/TransformationMap">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="StructureMap is a subclass of TransformationMap that maps Dimension attributes to their physical data sources.&#13;&#10;&#13;&#10;(Note: Multiple StructureMaps may be grouped together into single, cohesive unit via TransformationTask.)"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dimensionDeployment" lowerBound="1" eType="#//cwm/analysis/olap/DimensionDeployment" transient="true" eOpposite="#//cwm/analysis/olap/DimensionDeployment/structureMap">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The DimensionDeployment owning a StructureMap."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dimensionDeploymentLV" eType="#//cwm/analysis/olap/DimensionDeployment" eOpposite="#//cwm/analysis/olap/DimensionDeployment/listOfValues">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The DimensionDeployment referencing a &quot;list of values&quot; StructureMap."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="dimensionDeploymentIP" eType="#//cwm/analysis/olap/DimensionDeployment" eOpposite="#//cwm/analysis/olap/DimensionDeployment/immediateParent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The DimensionDeployment referencing an &quot;immedate parent&quot; StructureMap."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
      </eSubpackages>
      <eSubpackages name="informationvisualization" nsURI="http:///orgomg/cwm/analysis/informationvisualization.ecore" nsPrefix="orgomg.cwm.analysis.informationvisualization">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The CWM Information Visualization metamodel defines metadata supporting the problem domain of &quot;information publishing&quot; or, more generally, &quot;information visualization&quot;.&#13;&#10;&#13;&#10;Within the data warehousing environment, data is collected from numerous, diverse sources and transformed into a unified representation that facilitates the analysis of data for purposes of gaining business insight. Robust and flexible information visualization tools are key to the effective analysis of this information. Information visualization tools must be capable of understanding and preserving the &quot;logical structure&quot; of data warehouse information, while enabling the user to perform any number of &quot;rendering transformations&quot; on information content (e.g., displaying the same query result set in several different formats, such as a printed report, Web page, pie chart, bar graph, etc.).&#13;&#10;&#13;&#10;Since information visualization is a very broad problem domain, with a diverse set of possible solutions and many evolving standards, the CWM Information Visualization metamodel defines very generic, container-like metadata constructs that either contain or reference more complex visualization mechanisms at the M1-level. These metadata structures are intended to support the minimal metadata required to interchange more complex M1 models of visualization mechanisms.&#13;&#10;&#13;&#10;The Information Visualization package depends on the following packages:&#13;&#10;&#13;&#10;    org.omg.cwm.objectmodel.core&#13;&#10;    org.omg.cwm.foundation.expressions&#13;&#10;&#13;&#10;RenderedObject is the logical proxy for an arbitrary ModelElement that is to be rendered via some rendering transformation or process. A RenderedObject may be composed of an arbitrary number of other RenderedObjects (i.e., components), and may have topological relationships to still other RenderedObjects. The formula attribute allows for the specification of any implementation-dependent expression that completes the definition of a RenderedObject. For example, the formula might specify the position of the RenderedObject within a two-dimensional grid, or in relation to one of its neighbors; e.g., formula = &quot;neighbor(x, y) + (delta-x, delta-y)&quot;.&#13;&#10;&#13;&#10;A RenderedObject generally references one or more Renderings that specify how the enderedObject is actually presented. One of these associated Renderings may optionally be designated as a default Rendering. &#13;&#10;&#13;&#10;A Rendering is semantically equivalent to a transformation, in that it transforms a source RenderedObject to some target &quot;displayed&quot; (or otherwise &quot;presented&quot; object -- e.g., a displayed image or an audio clip) . An instance of Rendering is fully specified via its formula attribute, which, like RenderedObject, contains an implementation-dependent expression.&#13;&#10;&#13;&#10;Thus, a RenderedObject may be viewed as the &quot;logical description&quot; of an object to be rendered, independently of how it is actually presented by any of its associated Renderings, and Renderings may be viewed as transformations that control the presentation of the RenderedObject while preserving its logical structure. &#13;&#10;&#13;&#10;Note that a RenderedObject may be the target of a complex transformation (i.e., utilizing the CWM Transformation package). For example, an N-dimensional OLAP cube might be transformed into an equivalent, two-dimensional, composite RenderedObject, with several dimensions mapped to row and column edges, respectively, and all other dimensions constrained to single member values. Several Renderings may then be defined and associated with the resultant RenderedObject, mapping the two-dimensional logical structure to the surface of a display screen in various different formats (e.g., spreadsheet, pie chart, bar graph, etc.).&#13;&#10;&#13;&#10;Possible types of Renderings include: Screen, paper, voice, Web, HTML documents, XML/XSL, languages based on extensions to XML, SVG, visual objects, responses to keying (e.g., keying interception plus rules), etc. &#13;&#10;&#13;&#10;XSLRendering represents a useful subtype of Rendering that’s based on XSL (e.g., this subtype’s formula might contain a procedure that uses XSL to create an HTML document).&#13;&#10;&#13;&#10;Finally, RenderedObjectSet represents a simple container of both logical RenderedObjects and available Renderings.&#13;&#10;&#13;&#10;The inheritance of the Information Visualization metamodel from the Object Model is shown in Fig. 16-2.&#13;&#10;&#13;&#10;OCL Representation of Information Visualization Constraints&#13;&#10;&#13;&#10;[C-1] The set of Renderings includes the default Rendering.&#13;&#10;context RenderedObject inv:&#13;&#10;self.defaultRendering-&gt;notEmpty implies&#13;&#10;self.rendering-&gt;includes( self.defaultRendering )&#13;&#10;&#13;&#10;[C-2] A RenderedObject may not reference itself as a Neighbor nor as a Component.&#13;&#10;context RenderedObject&#13;&#10;inv: self.neighbor-&gt;excludes( self )&#13;&#10;inv: self.component-&gt;excludes( self )&#13;&#10;&#13;&#10;[C-3] A RenderedObject may not reference one of its Neighbors as a Component (and vice versa).&#13;&#10;context RenderedObject inv:&#13;&#10;(self.neighbor-&gt;notEmpty and self.component-&gt;notEmpty) implies&#13;&#10;self.neighbor-&gt;intersection( self.component )-&gt;isEmpty&#13;&#10;&#13;&#10;The transitive closure of Neighbors of an instance of RenderedObject must not include the RenderedObject instance.&#13;&#10;&#13;&#10;The transitive closure of Components of an instance of RenderedObject must not include the RenderedObject instance."/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="RenderedObject" eSuperTypes="#//cwm/objectmodel/core/Classifier">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="RenderedObject serves as a logical &quot;proxy&quot; for an arbitrary ModelElement that is to be&#13;&#10;rendered."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="formula" eType="#//cwm/foundation/expressions/ExpressionNode" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Allows for the specification of any implementation-dependent expression that completes the definition of a RenderedObject."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="action" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies some implementation-dependent action associated with a RenderedObject."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="fileName" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies the name of a file persisting an instance of RenderedObject."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies some implementation-dependent type associated with a RenderedObject"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="url" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies a URL identifying some instance of RenderedObject."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="composite" upperBound="-1" eType="#//cwm/analysis/informationvisualization/RenderedObject" eOpposite="#//cwm/analysis/informationvisualization/RenderedObject/component">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="&quot;Composite&quot; RenderedObjects referencing &quot;component&quot; RenderedObjects."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="component" upperBound="-1" eType="#//cwm/analysis/informationvisualization/RenderedObject" eOpposite="#//cwm/analysis/informationvisualization/RenderedObject/composite">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="&quot;Component&quot; RenderedObjects referenced by &quot;composite&quot; RenderedObjects."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="defaultRendering" eType="#//cwm/analysis/informationvisualization/Rendering" eOpposite="#//cwm/analysis/informationvisualization/Rendering/defaultedRenderedObject">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Rendering referenced by one or more RenderedObjects as the default Rendering."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="modelElement" eType="#//cwm/objectmodel/core/ModelElement" eOpposite="#//cwm/objectmodel/core/ModelElement/renderedObject">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The Model Element referenced by Rendered Objects."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="neighbor" upperBound="-1" eType="#//cwm/analysis/informationvisualization/RenderedObject" eOpposite="#//cwm/analysis/informationvisualization/RenderedObject/referencingNeighbor">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="RenderedObjects referenced by this RenderedObject as its &quot;neighbor&quot; (or neighboring object)."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="referencingNeighbor" upperBound="-1" eType="#//cwm/analysis/informationvisualization/RenderedObject" eOpposite="#//cwm/analysis/informationvisualization/RenderedObject/neighbor">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="RenderedObjects referencing this RenderedObject as its &quot;neighbor&quot;."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="RenderedObjectSet" eSuperTypes="#//cwm/objectmodel/core/Package">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="RenderedObjectSet is a container of RenderedObjects and available Renderings."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="rendering" upperBound="-1" eType="#//cwm/analysis/informationvisualization/Rendering" containment="true" eOpposite="#//cwm/analysis/informationvisualization/Rendering/renderedObjectSet">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Renderings owned by a RenderedObjectSet."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Rendering" eSuperTypes="#//cwm/objectmodel/core/Feature">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Rendering is a specification of how an associated RenderedObject is to be &quot;rendered&quot; in some medium.  This usually consists of a projection of an object of arbitrary dimensionality onto a 2-dimensional surface, but it may also include non-physical representations as well (such as audio).&#13;&#10;&#13;&#10;A Rendering is semantically equivalent to a Transformation, in that it transforms a source RenderedObject to some target &quot;presented&quot; object.  An instance of Rendering is fully specified via its formula attribute, which contains an implementation-dependent expression that defines the transformation and tracks transformation lineage.&#13;&#10;&#13;&#10;Possible types of instances of Rendering:&#13;&#10;Screen, Paper, Voice, Web, HTML Document, XML/XSL, languages based on extensions to XML, SVG, Visual objects, responses to keying (keying interception plus rules), etc."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="formula" eType="#//cwm/foundation/expressions/ExpressionNode" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Implementation-dependent procedure for generating the Rendering (e.g., a usage of XSL to generate an HTML document).  Tracks the transformation lineage of the Rendering."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="action" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies some implementation-dependent action associated with a Rendering."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="fileName" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies the name of a file persisting an instance of Rendering."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies some implementation-dependent type associated with a Rendering."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="url" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Specifies a URL identifying some instance of Rendering."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="defaultedRenderedObject" upperBound="-1" eType="#//cwm/analysis/informationvisualization/RenderedObject" eOpposite="#//cwm/analysis/informationvisualization/RenderedObject/defaultRendering">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="RenderedObjects referencing this Rendering as the default Rendering."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="renderedObjectSet" lowerBound="1" eType="#//cwm/analysis/informationvisualization/RenderedObjectSet" transient="true" eOpposite="#//cwm/analysis/informationvisualization/RenderedObjectSet/rendering">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="RenderedObjectSet owning Renderings."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="XSLRendering" eSuperTypes="#//cwm/analysis/informationvisualization/Rendering">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="XSLRendering represents a useful subclass of Rendering based on XSL (i.e., this subclass' formula might contain a procedure that uses XSL to create an HTML document)."/>
          </eAnnotations>
        </eClassifiers>
      </eSubpackages>
      <eSubpackages name="businessnomenclature" nsURI="http:///orgomg/cwm/analysis/businessnomenclature.ecore" nsPrefix="orgomg.cwm.analysis.businessnomenclature">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Business users of data warehouses need to have a good understanding of what information and tools exist in a data warehouse. They need to understand what the information means from a business perspective, how it is derived, from what data resources it is derived, and what analysis and reporting tools exist for manipulating and reporting the information. They may also need to subscribe to analysis and reporting tools, and have them run with results delivered to them on a regular basis.&#13;&#10; &#13;&#10;The BusinessNomenclature package contains classes and associations that can be used to represent business metadata. Easy access to this business metadata enables business users to exploit the value of the information in a data warehouse. It can also aid technical users in certain tasks. An example is the use of common business terms and concepts for discussing information requirements with business users. Another example is accessing business intelligence tools for analyzing the impact of warehouse design changes.&#13;&#10;&#13;&#10;The scope of the BusinessNomenclature package is restricted to the domain of data warehousing and business intelligence.&#13;&#10;&#13;&#10;This section provides a description of the main features of the BusinessNomenclature package.&#13;&#10;&#13;&#10;The BusinessNomenclature package provides two main constructs to represent business terms and concepts and related semantics:&#13;&#10;&#13;&#10;    Taxonomy is a collection of concepts that provide the context for the meaning of a particular term.&#13;&#10;    Glossary is a collection of terms and various related forms of the term.&#13;&#10;&#13;&#10;A taxonomy is a collection of concepts. Concepts represent semantic information and relationships. Concepts are identified by terms, which in turn are manifested by a word or phrase. More than one term may describe the same concept and a given term may describe more than one concept.&#13;&#10;A glossary is a collection of terms that are related through explicit or implicit relationships. Terms may be preferred (the term best representing its concept) and thus represent the vocabulary of a business domain or user. Terms may be synonyms and point at the preferred term. A preferred term and its synonyms represent the fact that several terms describe the same concept although with different shades of meaning.&#13;&#10;&#13;&#10;Terms may be arranged into a hierarchy of more generic and more specific elements. This relationship allows substituting a narrower term, such as &quot;USA&quot;, for a wider term, such as &quot;country&quot;.&#13;&#10;&#13;&#10;The BusinessNomenclature package depends on the following packages:&#13;&#10;&#13;&#10;    omg.org::CWM::ObjectModel::Core&#13;&#10;&#13;&#10;The metamodel diagram for the BusinessNomenclature package is split into two parts. The first diagram shows the BusinessNomenclature classes and associations, while the second shows the inheritance hierarchy.&#13;&#10;&#13;&#10;OCL Representation of Business Nomenclature Constraints&#13;&#10;[C-1] A Concept may not relate to itself.&#13;&#10;context Concept&#13;&#10;inv: self.relatedConcept-&gt;forAll ( p | p &lt;&gt; self )&#13;&#10;&#13;&#10;[C-2] The parent of a Glossary must be a Glossary.&#13;&#10;context Glossary&#13;&#10;inv: self.parent.oclIsKindOf( Glossary )&#13;&#10;&#13;&#10;[C-3] The child of a Glossary must be a Glossary.&#13;&#10;context Glossary&#13;&#10;inv: self.child-&gt;forAll( p | p.oclIsKindOf( Glossary ) )&#13;&#10;&#13;&#10;[C-4] The parent of a Taxonomy must be a Taxonomy.&#13;&#10;context Taxonomy&#13;&#10;inv: self.parent.oclIsKindOf( Taxonomy )&#13;&#10;&#13;&#10;[C-5] The child of a Taxonomy must be a Taxonomy.&#13;&#10;context Taxonomy&#13;&#10;inv: self.child-&gt;forAll( p | p.oclIsKindOf( Taxonomy ) )&#13;&#10;&#13;&#10;[C-6] A Term may not relate to itself.&#13;&#10;context Term&#13;&#10;inv: self.relatedTerm-&gt;forAll ( p | p &lt;&gt; self )&#13;&#10;&#13;&#10;[C-7] A VocabularyElement may not relate to itself.&#13;&#10;context Vocabulary&#13;&#10;inv: self.relatedElement-&gt;forAll ( p | p &lt;&gt; self )&#13;&#10;&#13;&#10;[C-8] The RelatedConcepts association is derived from the RelatedVocabularyElements association. All ends of the RelatedConcepts association must be Concepts.&#13;&#10;context RelatedConcepts&#13;&#10;inv: RelatedVocabularyElements.allInstances.select( element.oclIsKindOf( Concept )&#13;&#10;and relatedElement.oclIsKindOf( Concept ) )&#13;&#10;&#13;&#10;[C-9] The RelatedTerms association is derived from the RelatedVocabularyElements association. All ends of the RelatedTerms association must beTerms.&#13;&#10;context RelatedTerms&#13;&#10;inv: RelatedVocabularyElements.allInstances.select( element.oclIsKindOf( Term ) and&#13;&#10;relatedElement.oclIsKindOf( Term ) )"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="VocabularyElement" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents a common superclass for Concepts and Terms."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="definition" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Provides the definition of the VocabularyElement."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="example" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Provides examples of the VocabularyElement."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="usage" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies typical usage of the VocabularyElement."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="relatedElement" upperBound="-1" eType="#//cwm/analysis/businessnomenclature/VocabularyElement" eOpposite="#//cwm/analysis/businessnomenclature/VocabularyElement/element">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the related VocabularyElements."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="element" upperBound="-1" eType="#//cwm/analysis/businessnomenclature/VocabularyElement" eOpposite="#//cwm/analysis/businessnomenclature/VocabularyElement/relatedElement">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a VocabularyElement."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="modelElement" upperBound="-1" eType="#//cwm/objectmodel/core/ModelElement" eOpposite="#//cwm/objectmodel/core/ModelElement/vocabularyElement">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ModelElements for which the VocabularyElement provides business meaning."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Nomenclature" eSuperTypes="#//cwm/objectmodel/core/Package">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents a common superclass for Taxonomy and Glossary."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="parent" eType="#//cwm/analysis/businessnomenclature/Nomenclature" transient="true" eOpposite="#//cwm/analysis/businessnomenclature/Nomenclature/child">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the parent Nomenclature."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="child" upperBound="-1" eType="#//cwm/analysis/businessnomenclature/Nomenclature" containment="true" eOpposite="#//cwm/analysis/businessnomenclature/Nomenclature/parent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the child Nomenclatures."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Taxonomy" eSuperTypes="#//cwm/analysis/businessnomenclature/Nomenclature">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents a collection of Concepts that form an ontology."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="glossary" upperBound="-1" eType="#//cwm/analysis/businessnomenclature/Glossary" eOpposite="#//cwm/analysis/businessnomenclature/Glossary/taxonomy">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a Glossary."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Glossary" eSuperTypes="#//cwm/analysis/businessnomenclature/Nomenclature">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents a collection of Terms."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="language" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the language that the Glossary is represented in."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="taxonomy" upperBound="-1" eType="#//cwm/analysis/businessnomenclature/Taxonomy" eOpposite="#//cwm/analysis/businessnomenclature/Taxonomy/glossary">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Taxonomies from which the Glossary is derived."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="BusinessDomain" eSuperTypes="#//cwm/objectmodel/core/Package">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents a business domain."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Concept" eSuperTypes="#//cwm/analysis/businessnomenclature/VocabularyElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents a business idea or notion. &#13;&#10;&#13;&#10;Concepts are represented by Terms. Users use Terms that are familiar to them in their business environment to refer to Concepts."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="term" upperBound="-1" eType="#//cwm/analysis/businessnomenclature/Term" eOpposite="#//cwm/analysis/businessnomenclature/Term/concept">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a Term."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="relatedConcept" upperBound="-1" eType="#//cwm/analysis/businessnomenclature/Concept" eOpposite="#//cwm/analysis/businessnomenclature/Concept/concept">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the related Concepts."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="concept" upperBound="-1" eType="#//cwm/analysis/businessnomenclature/Concept" eOpposite="#//cwm/analysis/businessnomenclature/Concept/relatedConcept">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a Concept."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Term" eSuperTypes="#//cwm/analysis/businessnomenclature/VocabularyElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents words or phrases used by business users to refer to Concepts.&#13;&#10;&#13;&#10;A Term has a definition in a specific context. The context is provided by the referenced Concept that describes the underlying semantics."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="concept" upperBound="-1" eType="#//cwm/analysis/businessnomenclature/Concept" eOpposite="#//cwm/analysis/businessnomenclature/Concept/term">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the Concepts from which the Term is derived."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="relatedTerm" upperBound="-1" eType="#//cwm/analysis/businessnomenclature/Term" eOpposite="#//cwm/analysis/businessnomenclature/Term/term">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the related Terms."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="term" upperBound="-1" eType="#//cwm/analysis/businessnomenclature/Term" eOpposite="#//cwm/analysis/businessnomenclature/Term/relatedTerm">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a Term."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="preferredTerm" eType="#//cwm/analysis/businessnomenclature/Term" eOpposite="#//cwm/analysis/businessnomenclature/Term/synonym">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the preferred term for the synonym."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="synonym" upperBound="-1" eType="#//cwm/analysis/businessnomenclature/Term" eOpposite="#//cwm/analysis/businessnomenclature/Term/preferredTerm">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a Term."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="widerTerm" upperBound="-1" eType="#//cwm/analysis/businessnomenclature/Term" eOpposite="#//cwm/analysis/businessnomenclature/Term/narrowerTerm">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a Term."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="narrowerTerm" upperBound="-1" eType="#//cwm/analysis/businessnomenclature/Term" eOpposite="#//cwm/analysis/businessnomenclature/Term/widerTerm">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the narrower terms for the wider term."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
      </eSubpackages>
    </eSubpackages>
    <eSubpackages name="management" nsURI="http:///orgomg/cwm/management.ecore" nsPrefix="orgomg.cwm.management">
      <eSubpackages name="warehouseprocess" nsURI="http:///orgomg/cwm/management/warehouseprocess.ecore" nsPrefix="orgomg.cwm.management.warehouseprocess">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The Warehouse Process package documents the process flows used to execute transformations. These process flows may be documented at the level of a complete TransformationActivity or its individual TransformationSteps. A WarehouseProcess object associates a transformation with a set of events which will be used to trigger the execution of the transformation.&#13;&#10;&#13;&#10;The Warehouse Process package depends on the following packages:&#13;&#10;&#13;&#10;    org.omg::CWM::ObjectModel::Core&#13;&#10;    org.omg::CWM::ObjectModel::Behavioral&#13;&#10;    org.omg::CWM::Analysis::Transformation&#13;&#10;&#13;&#10;A WarehouseProcess object represents the processing of a transformation. It is instantiated as one of its subtypes WarehouseActivity or WarehouseStep, depending on whether it represents the processing of a TransformationActivity or a Transformation Step.&#13;&#10;&#13;&#10;A WarehouseProcess may be associated with one or more WarehouseEvents, each identifying events that cause the processing to be initiated. It may also be associated with one or more internal events that will be triggered when processing terminates. A ProcessPackage may be used to group together related WarehouseActivities.&#13;&#10;&#13;&#10;WarehouseEvents are divided into three categories: scheduled, external and internal. Scheduled events can either be defined as a point in time (each Wednesday at 2 pm) or be defined by intervals (every five minutes). A point in time event can be defined as a custom calendar which contains a set of calendar dates. This allows a series of dates to be reused across several WarehouseProcesses.&#13;&#10;&#13;&#10;External events are triggered by something happening outside the data warehouse, for example by a batch process which is not described as a WarehouseProcess. Internal events are triggered by the termination of a WarehouseProcess. They can be either retry events or cascade events. Retry events normally trigger a rerun of the same WarehouseProcess, whereas cascade events normally trigger a different WarehouseProcess. An internal event may define a condition that determines whether or not the event is triggered. This condition can use details of the execution of the triggering WarehouseProcess recorded in the relevant ActivityExecution and StepExecution objects.&#13;&#10;&#13;&#10;OCL Representation of Warehouse Process Constraints&#13;&#10;&#13;&#10;[C-1] month must be specified when recurringType is everyYear.&#13;&#10;context RecurringPointInTimeEvent inv:&#13;&#10;self.recurringType=everyYear implies self.month-&gt;notEmpty&#13;&#10;&#13;&#10;[C-2] month must be between 1 and 12 (inclusive) when specified.&#13;&#10;context RecurringPointInTimeEvent inv:&#13;&#10;self.month-&gt;notEmpty implies 1 &lt;= self.month &lt;= 12&#13;&#10;&#13;&#10;[C-3] dayOfMonth must be specified when recurringType is everyYear or&#13;&#10;everyMonth.&#13;&#10;context RecurringPointInTimeEvent inv:&#13;&#10;self.recurringType=everyYear or self.recurringType=everyMonth&#13;&#10;implies self.dayOfMonth-&gt;notEmpty&#13;&#10;&#13;&#10;[C-4] dayOfMonth must be between 1 and 31 (inclusive) when specified.&#13;&#10;context RecurringPointInTimeEvent inv:&#13;&#10;self.dayOfMonth-&gt;notEmpty implies 1 &lt;= self.dayOfMonth &lt;= 31&#13;&#10;&#13;&#10;[C-5] dayOfWeek must be specified when recurringType is everyWeek.&#13;&#10;context RecurringPointInTimeEvent inv:&#13;&#10;self.recurringType=everyWeek implies self.dayOfWeek-&gt;notEmpty&#13;&#10;&#13;&#10;[C-6] hour must be specified when recurringType is everyYear or everyMonth or&#13;&#10;everyWeek or everyDay.&#13;&#10;context RecurringPointInTimeEvent inv:&#13;&#10;self.recurringType=everyYear or self.recurringType=everyMonth or&#13;&#10;self.recurringType=everyWeek or self.recurringType=everyDay&#13;&#10;implies self.hour-&gt;notEmpty&#13;&#10;&#13;&#10;[C-7] hour must be between 0 and 23 (inclusive) when specified.&#13;&#10;context RecurringPointInTimeEvent inv:&#13;&#10;self.hour-&gt;notEmpty implies 0 &lt;= hour &lt;= 23&#13;&#10;&#13;&#10;[C-8] minute must be specified when recurringType is not everyMinute.&#13;&#10;context RecurringPointInTimeEvent inv:&#13;&#10;self.recurringType&lt;&gt;everyMinute implies self.minute-&gt;notEmpty&#13;&#10;&#13;&#10;[C-9] minute must be between 0 and 59 (inclusive) when specified.&#13;&#10;context RecurringPointInTimeEvent inv:&#13;&#10;self.minute-&gt;notEmpty implies 0 &lt;= self.minute &lt;= 59&#13;&#10;&#13;&#10;[C-10] second must be between 0 and 59 (inclusive).&#13;&#10;context RecurringPointInTimeEvent inv:&#13;&#10;0 &lt;= self.second &lt;= 59"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="WarehouseProcess" abstract="true" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A WarehouseProcess represents the processing of a transformation. It is instantiated as one of its subtypes WarehouseActivity or WarehouseStep, depending on whether it represents the processing of a TransformationActivity or a Transformation Step.&#13;&#10;A WarehouseProcess may be associated with one or more WarehouseEvents, each identifying events that cause the processing to be initiated. It may also be associated with one or more internal events that will be triggered when processing terminates."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="staticDefinition" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="When a WarehouseProcess is a constant mapping (such as a Relational View of legacy data or a continuous data propagation process), this flag indicates that the mapping does not require to be run for the target to be up-to-date and in sync with&#13;&#10;the source.&#13;&#10;&#13;&#10;"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="isSequential" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="This flag indicates if more than one instance of this WarehouseProcess may run at a time. If this flag is true, the scheduler should fail any attempt to trigger this WarehouseProcess while an instance is already in progress."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="warehouseEvent" upperBound="-1" eType="#//cwm/management/warehouseprocess/events/WarehouseEvent" containment="true" eOpposite="#//cwm/management/warehouseprocess/events/WarehouseEvent/warehouseProcess">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a set of events of various types, which will be used to trigger the execution of the warehouse process and its associated transformations.&#9;&#13;&#10;"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="internalEvent" upperBound="-1" eType="#//cwm/management/warehouseprocess/events/InternalEvent" eOpposite="#//cwm/management/warehouseprocess/events/InternalEvent/triggeringWP">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies an internal event triggered by the termination of the WarehouseProcess. "/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="WarehouseStep" eSuperTypes="#//cwm/management/warehouseprocess/WarehouseProcess">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A WarehouseStep is a component of a WarehouseActivity. It represents the processing of an individual TransformationStep. It may be used to identify WarehouseEvents that trigger the processing of the TransformationStep and/or InternalEvents that are&#13;&#10;triggered by the conclusion of the processing of the TransformationStep.&#13;&#10;&#13;&#10;For example, a WarehouseStep may be used to document how a specific TransformationStep should be retried upon failure."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="transformationStep" lowerBound="1" eType="#//cwm/analysis/transformation/TransformationStep" eOpposite="#//cwm/analysis/transformation/TransformationStep/warehouseStep">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Associates a WarehouseStep with the TransformationStep it performs."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="warehouseActivity" lowerBound="1" eType="#//cwm/management/warehouseprocess/WarehouseActivity" transient="true" eOpposite="#//cwm/management/warehouseprocess/WarehouseActivity/warehouseStep">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the WarehouseActivity of which a WarehouseStep is a component."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ProcessPackage" eSuperTypes="#//cwm/objectmodel/core/Package">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A group of related WarehouseActivities."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="WarehouseActivity" eSuperTypes="#//cwm/management/warehouseprocess/WarehouseProcess">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A WarehouseActivity is a subtype of WarehouseProcess that represents the processing of a TransformationActivity. It may identify WarehouseEvents that trigger the processing of the TransformationActivity and InternalEvents that are triggered by the&#13;&#10;conclusion of this processing. It may contain a set of WarehouseSteps that define in more detail the processing of the individual TransformationSteps of the TransformationActivity."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="warehouseStep" upperBound="-1" eType="#//cwm/management/warehouseprocess/WarehouseStep" containment="true" eOpposite="#//cwm/management/warehouseprocess/WarehouseStep/warehouseActivity">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a WarehouseStep that is a component of the WarehouseActivity."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="transformationActivity" lowerBound="1" eType="#//cwm/analysis/transformation/TransformationActivity" eOpposite="#//cwm/analysis/transformation/TransformationActivity/warehouseActivity">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the TransformationActivity run by the WarehouseActivity."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eSubpackages name="datatype" nsURI="http:///orgomg/cwm/management/warehouseprocess/datatype.ecore" nsPrefix="orgomg.cwm.management.warehouseprocess.datatype">
          <eClassifiers xsi:type="ecore:EEnum" name="RecurringType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="everyYear, everyMonth, everyWeek, everyDay, everyHour, everyMinute"/>
            </eAnnotations>
            <eLiterals name="everyYear"/>
            <eLiterals name="everyMonth" value="1"/>
            <eLiterals name="everyWeek" value="2"/>
            <eLiterals name="everyDay" value="3"/>
            <eLiterals name="everyHour" value="4"/>
            <eLiterals name="everyMinute" value="5"/>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EEnum" name="DayOfWeek">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday, workingDay, nonworkingDay"/>
            </eAnnotations>
            <eLiterals name="monday"/>
            <eLiterals name="tuesday" value="1"/>
            <eLiterals name="wednesday" value="2"/>
            <eLiterals name="thursday" value="3"/>
            <eLiterals name="friday" value="4"/>
            <eLiterals name="saturday" value="5"/>
            <eLiterals name="sunday" value="6"/>
            <eLiterals name="workingDay" value="7"/>
            <eLiterals name="nonworkingDay" value="8"/>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EEnum" name="WaitRuleType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="waitForAll, waitForAny"/>
            </eAnnotations>
            <eLiterals name="waitForAll"/>
            <eLiterals name="waitForAny" value="1"/>
          </eClassifiers>
        </eSubpackages>
        <eSubpackages name="events" nsURI="http:///orgomg/cwm/management/warehouseprocess/events.ecore" nsPrefix="orgomg.cwm.management.warehouseprocess.events">
          <eClassifiers xsi:type="ecore:EClass" name="WarehouseEvent" abstract="true" eSuperTypes="#//cwm/objectmodel/behavioral/Event">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A virtual class to refer to any Event.&#13;&#10;&#13;&#10;A WarehouseEvent (or its derivations) represents what triggers the running of a WarehouseProcess. An event can be initiated by a clock, by an external trigger, or by an internal trigger (the conclusion of some WarehouseProcess)."/>
            </eAnnotations>
            <eStructuralFeatures xsi:type="ecore:EReference" name="warehouseProcess" lowerBound="1" eType="#//cwm/management/warehouseprocess/WarehouseProcess" transient="true" eOpposite="#//cwm/management/warehouseprocess/WarehouseProcess/warehouseEvent">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="Identifies the warehouse process which will triggered by the event."/>
              </eAnnotations>
            </eStructuralFeatures>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EClass" name="ScheduleEvent" abstract="true" eSuperTypes="#//cwm/management/warehouseprocess/events/WarehouseEvent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A ScheduleEvent is an abstract class which covers all the clock based events."/>
            </eAnnotations>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EClass" name="PointInTimeEvent" eSuperTypes="#//cwm/management/warehouseprocess/events/ScheduleEvent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A PointInTime event is triggered at a fixed time, independently of any external context.&#13;&#10;&#13;&#10;The triggering time can be either defined functionally (as in the RecurringPointInTimeEvent extension of this class), or by an explicit list of times (CustomCalendarEvent)."/>
            </eAnnotations>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EClass" name="CustomCalendarEvent" eSuperTypes="#//cwm/management/warehouseprocess/events/PointInTimeEvent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="This event is controlled by a list of dates and times. To make the list easily shareable between multiple WarehouseProcesses the calendar itself is in a separate class."/>
            </eAnnotations>
            <eStructuralFeatures xsi:type="ecore:EReference" name="customCalendar" lowerBound="1" eType="#//cwm/management/warehouseprocess/events/CustomCalendar" eOpposite="#//cwm/management/warehouseprocess/events/CustomCalendar/customCalendarEvent">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="Indicates which custom calendar is used for this event.&#13;&#10;"/>
              </eAnnotations>
            </eStructuralFeatures>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EClass" name="CustomCalendar" eSuperTypes="#//cwm/objectmodel/core/Package">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A named list of dates and times. "/>
            </eAnnotations>
            <eStructuralFeatures xsi:type="ecore:EReference" name="customCalendarEvent" upperBound="-1" eType="#//cwm/management/warehouseprocess/events/CustomCalendarEvent" eOpposite="#//cwm/management/warehouseprocess/events/CustomCalendarEvent/customCalendar">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="Indicates which event uses this custom calendar."/>
              </eAnnotations>
            </eStructuralFeatures>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EClass" name="CalendarDate" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="An entry in a CustomCalendar representing a specific date and time."/>
            </eAnnotations>
            <eStructuralFeatures xsi:type="ecore:EAttribute" name="specificDate" eType="#//cwm/objectmodel/core/Time">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="The value of the date. "/>
              </eAnnotations>
            </eStructuralFeatures>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EClass" name="IntervalEvent" eSuperTypes="#//cwm/management/warehouseprocess/events/ScheduleEvent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="An IntervalEvent controls a continuous run of a WarehouseProcess. The Warehouse Process will run, then wait for the duration specified in the event, then run again.&#13;&#10;&#13;&#10;An IntervalEvent is not affected by the result of the WarehouseProcess.&#13;&#10;&#13;&#10;"/>
            </eAnnotations>
            <eStructuralFeatures xsi:type="ecore:EAttribute" name="duration" eType="#//cwm/objectmodel/core/Float">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="Indicates the length of time (in seconds) to wait after a run of the WarehouseProcess before triggering the next one.&#13;&#10;"/>
              </eAnnotations>
            </eStructuralFeatures>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EClass" name="ExternalEvent" eSuperTypes="#//cwm/management/warehouseprocess/events/WarehouseEvent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="An ExternalEvent allows the description of the triggering of a WarehouseProcess by a task which is not described in the model. This is merely a place holder. The actual behavior and the connection with the external trigger is left to the implementation of&#13;&#10;the scheduler."/>
            </eAnnotations>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EClass" name="InternalEvent" eSuperTypes="#//cwm/management/warehouseprocess/events/WarehouseEvent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="An event which may be triggered, depending on whether or not a condition is satisfied, by the conclusion of one or more WarehouseProcess runs.&#13;&#10;&#13;&#10;There are two types of InternalEvents, depending whether the event triggers a series of different WarehouseProcesses, or whether the event triggers the same WarehouseProcess in an attempt to retry a failed run."/>
            </eAnnotations>
            <eStructuralFeatures xsi:type="ecore:EReference" name="triggeringWP" lowerBound="1" upperBound="-1" eType="#//cwm/management/warehouseprocess/WarehouseProcess" eOpposite="#//cwm/management/warehouseprocess/WarehouseProcess/internalEvent">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="Identifies the triggering warehouse process. "/>
              </eAnnotations>
            </eStructuralFeatures>
            <eStructuralFeatures xsi:type="ecore:EReference" name="condition" eType="#//cwm/objectmodel/core/BooleanExpression" containment="true" resolveProxies="false">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="Indicates what condition the triggering WarehouseProcess run must meet to be considered (success, failure, warnings, etc.).&#13;&#10;&#13;&#10;How the condition is expressed, and how the result of a Transform is generated is left to the implementation of the scheduler and the transformation, respectively."/>
              </eAnnotations>
            </eStructuralFeatures>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EClass" name="CascadeEvent" eSuperTypes="#//cwm/management/warehouseprocess/events/InternalEvent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A CascadeEvent indicates that completion of one or more triggering WarehouseProcesses triggers another WarehouseProcess."/>
            </eAnnotations>
            <eStructuralFeatures xsi:type="ecore:EAttribute" name="waitRule" eType="#//cwm/management/warehouseprocess/datatype/WaitRuleType">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="Indicates if the event should be triggered as soon as any of the triggering WarehouseProcesses has completed that satisfies the condition (inherited from InternalEvent) or only when all the triggering WarehouseProcesses have completed (provided the condition is satisfied)."/>
              </eAnnotations>
            </eStructuralFeatures>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EClass" name="RetryEvent" eSuperTypes="#//cwm/management/warehouseprocess/events/InternalEvent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Indicates that a WarehouseProcess should be retried upon failure. This type of event is used for example when a WarehouseProcess relies on sources with uncertain availability (connection or uptime).&#13;&#10;&#13;&#10;In general, the triggering WarehouseProcess and the triggered WarehouseProcess are the same, and only one WarehouseProcess is involved. But this is not an imposed limitation. It is left to the schedulers to decide on the implementation behavior for complex cases."/>
            </eAnnotations>
            <eStructuralFeatures xsi:type="ecore:EAttribute" name="waitDuration" eType="#//cwm/objectmodel/core/Float">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="Indicates the length of time (in seconds) to wait before retrying the triggered WarehouseProcess."/>
              </eAnnotations>
            </eStructuralFeatures>
            <eStructuralFeatures xsi:type="ecore:EAttribute" name="maxCount" eType="#//cwm/objectmodel/core/Integer">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="Indicates how many times the triggered WarehouseProcess should be retried before being declared failed."/>
              </eAnnotations>
            </eStructuralFeatures>
          </eClassifiers>
          <eClassifiers xsi:type="ecore:EClass" name="RecurringPointInTimeEvent" eSuperTypes="#//cwm/management/warehouseprocess/events/PointInTimeEvent">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="This event triggers a WarehouseProcess on a regular basis such as a specific date or time (for example, the Wednesday of every other week, at 2:30 pm)."/>
            </eAnnotations>
            <eStructuralFeatures xsi:type="ecore:EAttribute" name="recurringType" eType="#//cwm/management/warehouseprocess/datatype/RecurringType">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="Indicates how often the event should be triggered (weekly, daily, etc.)."/>
              </eAnnotations>
            </eStructuralFeatures>
            <eStructuralFeatures xsi:type="ecore:EAttribute" name="frequencyFactor" eType="#//cwm/objectmodel/core/Integer">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="Indicates the repetition of the event. For example, for a weekly recurringType, a value of 1 will mean that it is to be triggered every week, a value of 2 will mean that it is to be triggered every other week, etc."/>
              </eAnnotations>
            </eStructuralFeatures>
            <eStructuralFeatures xsi:type="ecore:EAttribute" name="month" eType="#//cwm/objectmodel/core/Integer">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="Indicates which month of the year (from 1 to 12) an annual event is to be triggered.&#13;&#10;"/>
              </eAnnotations>
            </eStructuralFeatures>
            <eStructuralFeatures xsi:type="ecore:EAttribute" name="dayOfMonth" eType="#//cwm/objectmodel/core/Integer">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="Indicates which day of the month (from 1 to 31) a monthly or annual event is to be triggered. For a monthly event, if the day of the month is greater than the number of days in the month, it is assumed that the scheduler will run the WarehouseProcess on the last day of the month.&#13;&#10;"/>
              </eAnnotations>
            </eStructuralFeatures>
            <eStructuralFeatures xsi:type="ecore:EAttribute" name="dayOfWeek" eType="#//cwm/management/warehouseprocess/datatype/DayOfWeek">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="Indicates which day of the week a weekly schedule is running.&#13;&#10;"/>
              </eAnnotations>
            </eStructuralFeatures>
            <eStructuralFeatures xsi:type="ecore:EAttribute" name="hour" eType="#//cwm/objectmodel/core/Integer">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="Indicates at what hour (from 0 to 23) an annual, monthly, weekly, or daily event is being triggered.&#13;&#10;"/>
              </eAnnotations>
            </eStructuralFeatures>
            <eStructuralFeatures xsi:type="ecore:EAttribute" name="minute" eType="#//cwm/objectmodel/core/Integer">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="Indicates at what minute (from 0 to 59) an event is triggered. Applies to all events except the &quot;everyMinute&quot; ones."/>
              </eAnnotations>
            </eStructuralFeatures>
            <eStructuralFeatures xsi:type="ecore:EAttribute" name="second" eType="#//cwm/objectmodel/core/Integer">
              <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
                <details key="documentation" value="Indicates at what second (from 0 to 59) an event must be run. Applies to all events.&#13;&#10;"/>
              </eAnnotations>
            </eStructuralFeatures>
          </eClassifiers>
        </eSubpackages>
      </eSubpackages>
      <eSubpackages name="warehouseoperation" nsURI="http:///orgomg/cwm/management/warehouseoperation.ecore" nsPrefix="orgomg.cwm.management.warehouseoperation">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The Warehouse Operation package contains classes recording the day-to-day operation of the warehouse processes.&#13;&#10;&#13;&#10;The package covers three separate areas:&#13;&#10;&#13;&#10;    Transformation Executions&#13;&#10;    Measurements&#13;&#10;    Change Requests&#13;&#10;&#13;&#10;Details of the most recent executions of transformations can be recorded, identifying when they ran and whether they completed successfully. This can be used to determine how complete and up-to-date specific information in the data warehouse is.&#13;&#10;&#13;&#10;An ActivityExecution represents an execution of a whole TransformationActivity, and a StepExecution object represents an execution of an individual TransformationStep. If a TransformationStep involves the use of an Operation , an associated StepExecution may reference a CallAction that records the actual arguments passed to the Operation. These classes allow the lineage of data in a data warehouse to be preserved, by recording when and how it was derived, and where it came from.&#13;&#10;&#13;&#10;Measurement objects allow metrics to be held for any ModelElement. For example, they may be used to hold actual, estimated or planned values for the size of a table.&#13;&#10;&#13;&#10;ChangeRequests allow details of proposed changes affecting any ModelElement to be recorded. They may also be used to keep a historical record of changes implemented or rejected. &#13;&#10;&#13;&#10;The Warehouse Operation package depends on the following packages:&#13;&#10;&#13;&#10;    org.omg::CWM::ObjectModel::Core&#13;&#10;    org.omg::CWM::ObjectModel::Behavioral&#13;&#10;    org.omg::CWM::Analysis::Transformation&#13;&#10;&#13;&#10;Separate model diagrams are shown below for each of the three main areas supported by the package.&#13;&#10;&#13;&#10;OCL Representation of Warehouse Operation Constraints&#13;&#10;&#13;&#10;[C-1] A ChangeRequest instance must not apply to itself.&#13;&#10;context ChangeRequest&#13;&#10;inv: self.modelElement -&gt; forAll (element | element &lt;&gt; self)&#13;&#10;&#13;&#10;[C-2] A completionDate may only be provided for a completed ChangeRequest.&#13;&#10;context ChangeRequest&#13;&#10;inv: self.completionDate-&gt;notEmpty implies self.completed&#13;&#10;&#13;&#10;[C-3] A Measurement instance must not apply to itself.&#13;&#10;context Measurement&#13;&#10;inv: self.modelElement &lt;&gt; self&#13;&#10;&#13;&#10;[C-4] If the TransformationExecution is not inProgress, the successful, status and endDate attributes must be present, and endDate must not be earlier than startDate.&#13;&#10;context TransformationExecution&#13;&#10;inv: self.inProgress=false implies (self.successful-&gt;notEmpty and&#13;&#10;self.status-&gt;notEmpty and self.endDate-&gt;notEmpty and&#13;&#10;self.endDate &gt;= self.startDate)&#13;&#10;"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="Measurement" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A Measurement object indicates the value of some attribute of an object. It can be the number of rows in a table, the number of pages in an index, the number of different values in a column, etc. &#13;&#10;&#13;&#10;The flexibility of this class allows for product specific extensions, without changing the model. "/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="#//cwm/objectmodel/core/Float">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The value of this Measurement."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="unit" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The unit of measurement."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="type" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies how the value was computed.&#13;&#10;&#13;&#10;The following values have specific meanings:&#13;&#10;&#13;&#10;   measure (measured value)&#13;&#10;   estimate (estimated value)&#13;&#10;   plan (planned value)&#13;&#10;   minimum (minimum value)&#13;&#10;   maximum (maximum value)&#13;&#10;   average (average value)"/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="creationDate" eType="#//cwm/objectmodel/core/Time">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="When the value has been computed (see also effectiveDate)."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="effectiveDate" eType="#//cwm/objectmodel/core/Time">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="When the value is effective. For measured values, effective and creation dates should be the same. For estimated actual values, the creation date may be later than the effective date. For plan values, the effective date is normally later than the creation date."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="modelElement" lowerBound="1" eType="#//cwm/objectmodel/core/ModelElement" eOpposite="#//cwm/objectmodel/core/ModelElement/measurement">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ModelElement to which a Measurement relates."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ChangeRequest" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This represents a request for change affecting one or more ModelElements. The change request may represent a proposed change or one that has been implemented or rejected."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="changeDescription" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A description of the change."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="changeReason" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The reason or justification for the ChangeRequest."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="status" eType="#//cwm/objectmodel/core/String">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The status of the ChangeRequest. This would normally contain a string such as proposed, agreed, implemented or rejected."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="completed" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Indicates that no further action is required for this change request, i.e. it has either&#13;&#10;been implemented or been rejected."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="requestDate" eType="#//cwm/objectmodel/core/Time">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="When the change request was raised."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="completionDate" eType="#//cwm/objectmodel/core/Time">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The date when all action on the change request was completed (i.e. when implementation was completed or it was rejected)."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="modelElement" lowerBound="1" upperBound="-1" eType="#//cwm/objectmodel/core/ModelElement" eOpposite="#//cwm/objectmodel/core/ModelElement/changeRequest">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies a ModelElement affected by a ChangeRequest."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="TransformationExecution" eSuperTypes="#//cwm/objectmodel/core/ModelElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A TransformationExecution is used to record details of a specific execution."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="startDate" eType="#//cwm/objectmodel/core/Time">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The date and time when the execution started."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="endDate" eType="#//cwm/objectmodel/core/Time">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The date and time when the execution ended."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="inProgress" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A boolean indicating whether or not the execution is in progress."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="successful" eType="#//cwm/objectmodel/core/Boolean">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A boolean indicating whether or not the execution completed successfully."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="status" eType="#//cwm/objectmodel/core/Expression" containment="true" resolveProxies="false">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="An expression that may be used to provide status details of the execution. For example it could provide comments for a successful execution, or details of errors for an unsuccessful execution."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ActivityExecution" eSuperTypes="#//cwm/management/warehouseoperation/TransformationExecution">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An ActivityExecution is used to record details of a specific execution of a TransformationActivity."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="transformationActivity" lowerBound="1" eType="#//cwm/analysis/transformation/TransformationActivity" eOpposite="#//cwm/analysis/transformation/TransformationActivity/execution">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the TransformationActivity."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="stepExecution" upperBound="-1" eType="#//cwm/management/warehouseoperation/StepExecution" containment="true" eOpposite="#//cwm/management/warehouseoperation/StepExecution/activityExecution">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the StepExecutions recording the results of executing the individual&#13;&#10;TransformationSteps."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="StepExecution" eSuperTypes="#//cwm/management/warehouseoperation/TransformationExecution">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A StepExecution is used to record details of a specific execution of a TransformationStep."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="transformationStep" lowerBound="1" eType="#//cwm/analysis/transformation/TransformationStep" eOpposite="#//cwm/analysis/transformation/TransformationStep/execution">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the TransformationStep."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="activityExecution" eType="#//cwm/management/warehouseoperation/ActivityExecution" transient="true" eOpposite="#//cwm/management/warehouseoperation/ActivityExecution/stepExecution">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the ActivityExecution of which the StepExecution is a part."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="callAction" eType="#//cwm/objectmodel/behavioral/CallAction" eOpposite="#//cwm/objectmodel/behavioral/CallAction/stepExecution">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Identifies the CallAction for a StepExecution."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
      </eSubpackages>
    </eSubpackages>
    <eSubpackages name="cwmcomplete" nsURI="http:///orgomg/cwm/cwmcomplete.ecore" nsPrefix="orgomg.cwm.cwmcomplete">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="CWMComplete is a package that invokes all other CWM packages.  It does this by listing all of the other CWM metamodel packages in declaration order in the uml2mof.clusteredImport property of the MOF tab.  &#13;&#10;&#13;&#10;CWMComplete is included as a convenience for software that wants to generate the entire CWM package.  It is non-normative, is not included in any normative CWM dtd file, and is not documented in either volume of the CWM specification."/>
      </eAnnotations>
    </eSubpackages>
  </eSubpackages>
</ecore:EPackage>
