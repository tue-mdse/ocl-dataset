<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns='http://www.w3.org/1999/xhtml' xml:lang='en' lang='en'>
<head>
<title>org.eclipse.ocl.git - OCL</title>
<meta name='generator' content='cgit v0.11.2-4-g4a35'/>
<meta name='robots' content='index, nofollow'/>
<link rel='stylesheet' type='text/css' href=''/>
<link rel='shortcut icon' href='/favicon.ico'/>
<link rel='alternate' title='Atom feed' href='http://git.eclipse.org/c/ocl/org.eclipse.ocl.git/atom/examples/org.eclipse.ocl.examples.uml25/model/UML.ocl?h=master' type='application/atom+xml'/>
<link rel='vcs-git' href='git://git.eclipse.org/gitroot/ocl/org.eclipse.ocl.git' title='org.eclipse.ocl.git Git repository'/>
<link rel='vcs-git' href='ssh://git.eclipse.org/gitroot/ocl/org.eclipse.ocl.git' title='org.eclipse.ocl.git Git repository'/>
<link rel='vcs-git' href='http://git.eclipse.org/gitroot/ocl/org.eclipse.ocl.git' title='org.eclipse.ocl.git Git repository'/>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="keywords" content="eclipse.org, Eclipse Foundation, Eclipse, Git, Source code, Source" />
    <link href="//fonts.googleapis.com/css?family=Open+Sans:400,700,300,600,100" rel="stylesheet" type="text/css">
    <link rel="shortcut icon" href="/eclipse.org-common/themes/solstice/public/images/favicon.ico"/>
    <link rel="stylesheet" href="/eclipse.org-common/themes/solstice/public/stylesheets/barebone-footer.min.css">
    <link rel="stylesheet" type="text/css" href="/cgit.css" media="screen" />

</head>
<body>
<div class="barebone-layout">
<a class="sr-only" href="#content">Skip to main content</a>
<header role="banner" class="thin-header padding-top-10" id="header-wrapper">
  <div class="container-fluid">
    <div class="row" id="header-row">
      <div class="col-sm-6 col-md-6 col-lg-5" id="header-left">
        <div class="wrapper-logo-default"><a href="https://www.eclipse.org/"><img class="logo-eclipse-default img-responsive hidden-xs" alt="logo" src="/eclipse.org-common/themes/solstice/public/images/logo/eclipse-426x100.png"/></a></div>
      </div>
      <div class="col-sm-18 col-md-18 col-lg-19" id="main-menu-wrapper">
        <div class="navbar yamm navbar-right" id="main-menu">
          <div id="navbar-collapse-1" class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
              <li class="visible-thin"><a href="https://www.eclipse.org/downloads/" target="_self">Download</a></li>
              <li><a href="https://www.eclipse.org/users/" target="_self">Getting Started</a></li>
              <li><a href="https://www.eclipse.org/membership/" target="_self">Members</a></li>
              <li><a href="https://www.eclipse.org/projects/" target="_self">Projects</a></li>
              <li class="dropdown visible-xs">
                <a href="#" data-toggle="dropdown" class="dropdown-toggle">Community <b class="caret"></b></a>
                <ul class="dropdown-menu">
                  <li><a href="http://marketplace.eclipse.org">Marketplace</a></li>
                  <li><a href="http://events.eclipse.org">Events</a></li>
                  <li><a href="http://www.planeteclipse.org/">Planet Eclipse</a></li>
                  <li><a href="https://www.eclipse.org/community/eclipse_newsletter/">Newsletter</a></li>
                  <li><a href="https://www.youtube.com/user/EclipseFdn">Videos</a></li>
                </ul>
              </li>
              <li class="dropdown visible-xs">
                <a href="#" data-toggle="dropdown" class="dropdown-toggle">Participate <b class="caret"></b></a>
                <ul class="dropdown-menu">
                  <li><a href="https://bugs.eclipse.org/bugs/">Report a Bug</a></li>
                  <li><a href="https://www.eclipse.org/forums/">Forums</a></li>
                  <li><a href="https://www.eclipse.org/mail/">Mailing Lists</a></li>
                  <li><a href="https://wiki.eclipse.org/">Wiki</a></li>
                  <li><a href="https://wiki.eclipse.org/IRC">IRC</a></li>
                  <li><a href="https://www.eclipse.org/contribute/">How to Contribute</a></li>
                </ul>
              </li>
              <li class="dropdown visible-xs">
                <a href="#" data-toggle="dropdown" class="dropdown-toggle">Working Groups <b class="caret"></b></a>
                <ul class="dropdown-menu">
                  <li><a href="http://wiki.eclipse.org/Auto_IWG">Automotive</a></li>
                  <li><a href="http://iot.eclipse.org">Internet of Things</a></li>
                  <li><a href="http://locationtech.org">LocationTech</a></li>
                  <li><a href="http://lts.eclipse.org">Long-Term Support</a></li>
                  <li><a href="http://polarsys.org">PolarSys</a></li>
                  <li><a href="http://science.eclipse.org">Science</a></li>
                  <li><a href="http://www.openmdm.org">OpenMDM</a></li>
                </ul>
              </li>
              <!-- More -->
              <li class="dropdown eclipse-more hidden-xs">
                <a data-toggle="dropdown" class="dropdown-toggle">More<b class="caret"></b></a>
                <ul class="dropdown-menu">
                  <li>
                    <!-- Content container to add padding -->
                    <div class="yamm-content">
                      <div class="row">
                        <ul class="col-sm-8 list-unstyled">
                          <li>
                            <p><strong>Community</strong></p>
                          </li>
                          <li><a href="http://marketplace.eclipse.org">Marketplace</a></li>
                          <li><a href="http://events.eclipse.org">Events</a></li>
                          <li><a href="http://www.planeteclipse.org/">Planet Eclipse</a></li>
                          <li><a href="https://www.eclipse.org/community/eclipse_newsletter/">Newsletter</a></li>
                          <li><a href="https://www.youtube.com/user/EclipseFdn">Videos</a></li>
                        </ul>
                        <ul class="col-sm-8 list-unstyled">
                          <li>
                            <p><strong>Participate</strong></p>
                          </li>
                          <li><a href="https://bugs.eclipse.org/bugs/">Report a Bug</a></li>
                          <li><a href="https://www.eclipse.org/forums/">Forums</a></li>
                          <li><a href="https://www.eclipse.org/mail/">Mailing Lists</a></li>
                          <li><a href="https://wiki.eclipse.org/">Wiki</a></li>
                          <li><a href="https://wiki.eclipse.org/IRC">IRC</a></li>
                          <li><a href="https://www.eclipse.org/contribute/">How to Contribute</a></li>
                        </ul>
                        <ul class="col-sm-8 list-unstyled">
                          <li>
                            <p><strong>Working Groups</strong></p>
                          </li>
                          <li><a href="http://wiki.eclipse.org/Auto_IWG">Automotive</a></li>
                          <li><a href="http://iot.eclipse.org">Internet of Things</a></li>
                          <li><a href="http://locationtech.org">LocationTech</a></li>
                          <li><a href="http://lts.eclipse.org">Long-Term Support</a></li>
                          <li><a href="http://polarsys.org">PolarSys</a></li>
                          <li><a href="http://science.eclipse.org">Science</a></li>
                          <li><a href="http://www.openmdm.org">OpenMDM</a></li>
                        </ul>
                      </div>
                    </div>
                  </li>
                </ul>
              </li>
            </ul>
          </div>
          <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar-collapse-1">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            </button>
            <div class="wrapper-logo-mobile"><a class="navbar-brand visible-xs" href="https://www.eclipse.org/"><img class="logo-eclipse-default-mobile img-responsive" alt="logo" src="/eclipse.org-common/themes/solstice/public/images/logo/eclipse-800x188.png"/></a></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>
<section class="hidden-print default-breadcrumbs" id="breadcrumb">
  <div class="container-fluid">
    <h3 class="sr-only">Breadcrumbs</h3>
    <div class="col-xs-24">
      <ol class="breadcrumb">
        <li><a href="https://www.eclipse.org/">Home</a></li>
        <li><a href="https://www.eclipse.org/contribute/">Contribute</a></li>
        <li><a href="/c/">Source code</a></li>
      </ol>
    </div>
  </div>
</section>
<main role="main">
<div class="container-fluid background-image-none" id="novaContent">
<br /><br />
<div id='cgit'><table id='header'>
<tr>
<td class='logo' rowspan='2'><a href='/c/'><img src='/git.png' alt='cgit logo'/></a></td>
<td class='main'><a href='/c/'>index</a> : <a title='org.eclipse.ocl.git' href='/c/ocl/org.eclipse.ocl.git/'>org.eclipse.ocl.git</a></td><td class='form'><form method='get' action=''>
<select name='h' onchange='this.form.submit();'>
<option value='Kepler_SR0'>Kepler_SR0</option>
<option value='archive/352950'>archive/352950</option>
<option value='archive/364797'>archive/364797</option>
<option value='archive/373968'>archive/373968</option>
<option value='archive/378469'>archive/378469</option>
<option value='archive/402172'>archive/402172</option>
<option value='archive/419462'>archive/419462</option>
<option value='archive/427020'>archive/427020</option>
<option value='archive/435807'>archive/435807</option>
<option value='archive/462386'>archive/462386</option>
<option value='archive/464193'>archive/464193</option>
<option value='archive/492004'>archive/492004</option>
<option value='asanchez/397429'>asanchez/397429</option>
<option value='asanchez/468152'>asanchez/468152</option>
<option value='asanchez/486499'>asanchez/486499</option>
<option value='asanchez/500803'>asanchez/500803</option>
<option value='asanchez/cyclicOCLDependencies'>asanchez/cyclicOCLDependencies</option>
<option value='asanchez/master'>asanchez/master</option>
<option value='asanchez/models2016'>asanchez/models2016</option>
<option value='asanchez/partitionedLookups'>asanchez/partitionedLookups</option>
<option value='asanchez/pathElementCSWithName'>asanchez/pathElementCSWithName</option>
<option value='asanchez/revampingPathNameCS'>asanchez/revampingPathNameCS</option>
<option value='asanchez/thesis'>asanchez/thesis</option>
<option value='asbh/codegenFailingTestCase'>asbh/codegenFailingTestCase</option>
<option value='asbh/cs2as'>asbh/cs2as</option>
<option value='asbh/nameReso'>asbh/nameReso</option>
<option value='bug/349300'>bug/349300</option>
<option value='bug/351579'>bug/351579</option>
<option value='bug/367892'>bug/367892</option>
<option value='bug/369123'>bug/369123</option>
<option value='bug/371018'>bug/371018</option>
<option value='bug/382283'>bug/382283</option>
<option value='bug/389542'>bug/389542</option>
<option value='cvs/Europa'>cvs/Europa</option>
<option value='cvs/MDT_OCL_3_0_0_ReflectiveLibrary'>cvs/MDT_OCL_3_0_0_ReflectiveLibrary</option>
<option value='cvs/MDT_OCL_3_0_0_Releng_Experimental'>cvs/MDT_OCL_3_0_0_Releng_Experimental</option>
<option value='cvs/OCL_2_0_support'>cvs/OCL_2_0_support</option>
<option value='cvs/OCL_2_1_on_LPGv2_Experimental'>cvs/OCL_2_1_on_LPGv2_Experimental</option>
<option value='edw/393341'>edw/393341</option>
<option value='edw/411630'>edw/411630</option>
<option value='ewillink/415146'>ewillink/415146</option>
<option value='ewillink/437586'>ewillink/437586</option>
<option value='ewillink/439471'>ewillink/439471</option>
<option value='ewillink/443195'>ewillink/443195</option>
<option value='ewillink/447557'>ewillink/447557</option>
<option value='ewillink/454602'>ewillink/454602</option>
<option value='ewillink/458359'>ewillink/458359</option>
<option value='ewillink/467340'>ewillink/467340</option>
<option value='ewillink/469012'>ewillink/469012</option>
<option value='ewillink/469371'>ewillink/469371</option>
<option value='ewillink/470034'>ewillink/470034</option>
<option value='ewillink/470738'>ewillink/470738</option>
<option value='ewillink/471593'>ewillink/471593</option>
<option value='ewillink/472086'>ewillink/472086</option>
<option value='ewillink/479445'>ewillink/479445</option>
<option value='ewillink/482143'>ewillink/482143</option>
<option value='ewillink/484723'>ewillink/484723</option>
<option value='ewillink/486853'>ewillink/486853</option>
<option value='ewillink/486872'>ewillink/486872</option>
<option value='ewillink/492430'>ewillink/492430</option>
<option value='ewillink/492801'>ewillink/492801</option>
<option value='ewillink/493322'>ewillink/493322</option>
<option value='ewillink/494252'>ewillink/494252</option>
<option value='ewillink/496810'>ewillink/496810</option>
<option value='ewillink/498931'>ewillink/498931</option>
<option value='ewillink/500519'>ewillink/500519</option>
<option value='ewillink/apidelta'>ewillink/apidelta</option>
<option value='ewillink/baseline'>ewillink/baseline</option>
<option value='ewillink/cs2as'>ewillink/cs2as</option>
<option value='ewillink/cyclicOCLDependencies'>ewillink/cyclicOCLDependencies</option>
<option value='ewillink/master'>ewillink/master</option>
<option value='ewillink/modelAlignment'>ewillink/modelAlignment</option>
<option value='ewillink/pathElementCSWithName'>ewillink/pathElementCSWithName</option>
<option value='ewillink/patterns'>ewillink/patterns</option>
<option value='ewillink/templateParameters'>ewillink/templateParameters</option>
<option value='ewillink/uml2as'>ewillink/uml2as</option>
<option value='ewillink/xtextLabels'>ewillink/xtextLabels</option>
<option value='maintenance/R1_0'>maintenance/R1_0</option>
<option value='maintenance/R1_1'>maintenance/R1_1</option>
<option value='maintenance/R1_2'>maintenance/R1_2</option>
<option value='maintenance/R3_0'>maintenance/R3_0</option>
<option value='maintenance/R3_1'>maintenance/R3_1</option>
<option value='maintenance/R4_0'>maintenance/R4_0</option>
<option value='maintenance/R4_1'>maintenance/R4_1</option>
<option value='maintenance/R5_0'>maintenance/R5_0</option>
<option value='maintenance/R6_0'>maintenance/R6_0</option>
<option value='maintenance/R6_1'>maintenance/R6_1</option>
<option value='maintenance/R6_2'>maintenance/R6_2</option>
<option value='master' selected='selected'>master</option>
<option value='origin'>origin</option>
</select> <input type='submit' name='' value='switch'/></form></td></tr>
<tr><td class='sub'>OCL</td><td class='sub right'>Code Review</td></tr></table>
<table class='tabs'><tr><td>
<a href='/c/ocl/org.eclipse.ocl.git/about/'>about</a><a href='/c/ocl/org.eclipse.ocl.git/'>summary</a><a href='/c/ocl/org.eclipse.ocl.git/refs/'>refs</a><a href='/c/ocl/org.eclipse.ocl.git/log/examples/org.eclipse.ocl.examples.uml25/model/UML.ocl'>log</a><a class='active' href='/c/ocl/org.eclipse.ocl.git/tree/examples/org.eclipse.ocl.examples.uml25/model/UML.ocl'>tree</a><a href='/c/ocl/org.eclipse.ocl.git/commit/examples/org.eclipse.ocl.examples.uml25/model/UML.ocl'>commit</a><a href='/c/ocl/org.eclipse.ocl.git/diff/examples/org.eclipse.ocl.examples.uml25/model/UML.ocl'>diff</a><a href='/c/ocl/org.eclipse.ocl.git/stats/examples/org.eclipse.ocl.examples.uml25/model/UML.ocl'>stats</a></td><td class='form'><form class='right' method='get' action='/c/ocl/org.eclipse.ocl.git/log/examples/org.eclipse.ocl.examples.uml25/model/UML.ocl'>
<select name='qt'>
<option value='grep'>log msg</option>
<option value='author'>author</option>
<option value='committer'>committer</option>
<option value='range'>range</option>
</select>
<input class='txt' type='text' size='10' name='q' value=''/>
<input type='submit' value='search'/>
</form>
</td></tr></table>
<div class='path'>path: <a href='/c/ocl/org.eclipse.ocl.git/tree/'>root</a>/<a href='/c/ocl/org.eclipse.ocl.git/tree/examples'>examples</a>/<a href='/c/ocl/org.eclipse.ocl.git/tree/examples/org.eclipse.ocl.examples.uml25'>org.eclipse.ocl.examples.uml25</a>/<a href='/c/ocl/org.eclipse.ocl.git/tree/examples/org.eclipse.ocl.examples.uml25/model'>model</a>/<a href='/c/ocl/org.eclipse.ocl.git/tree/examples/org.eclipse.ocl.examples.uml25/model/UML.ocl'>UML.ocl</a></div><div class='content'>blob: fa1957744dbe7e2d997dbe002b7409b396f737b5 (<a href='/c/ocl/org.eclipse.ocl.git/plain/examples/org.eclipse.ocl.examples.uml25/model/UML.ocl'>plain</a>)
<table summary='blob content' class='blob'>
<tr><td class='linenumbers'><pre><a id='n1' href='#n1'>1</a>
<a id='n2' href='#n2'>2</a>
<a id='n3' href='#n3'>3</a>
<a id='n4' href='#n4'>4</a>
<a id='n5' href='#n5'>5</a>
<a id='n6' href='#n6'>6</a>
<a id='n7' href='#n7'>7</a>
<a id='n8' href='#n8'>8</a>
<a id='n9' href='#n9'>9</a>
<a id='n10' href='#n10'>10</a>
<a id='n11' href='#n11'>11</a>
<a id='n12' href='#n12'>12</a>
<a id='n13' href='#n13'>13</a>
<a id='n14' href='#n14'>14</a>
<a id='n15' href='#n15'>15</a>
<a id='n16' href='#n16'>16</a>
<a id='n17' href='#n17'>17</a>
<a id='n18' href='#n18'>18</a>
<a id='n19' href='#n19'>19</a>
<a id='n20' href='#n20'>20</a>
<a id='n21' href='#n21'>21</a>
<a id='n22' href='#n22'>22</a>
<a id='n23' href='#n23'>23</a>
<a id='n24' href='#n24'>24</a>
<a id='n25' href='#n25'>25</a>
<a id='n26' href='#n26'>26</a>
<a id='n27' href='#n27'>27</a>
<a id='n28' href='#n28'>28</a>
<a id='n29' href='#n29'>29</a>
<a id='n30' href='#n30'>30</a>
<a id='n31' href='#n31'>31</a>
<a id='n32' href='#n32'>32</a>
<a id='n33' href='#n33'>33</a>
<a id='n34' href='#n34'>34</a>
<a id='n35' href='#n35'>35</a>
<a id='n36' href='#n36'>36</a>
<a id='n37' href='#n37'>37</a>
<a id='n38' href='#n38'>38</a>
<a id='n39' href='#n39'>39</a>
<a id='n40' href='#n40'>40</a>
<a id='n41' href='#n41'>41</a>
<a id='n42' href='#n42'>42</a>
<a id='n43' href='#n43'>43</a>
<a id='n44' href='#n44'>44</a>
<a id='n45' href='#n45'>45</a>
<a id='n46' href='#n46'>46</a>
<a id='n47' href='#n47'>47</a>
<a id='n48' href='#n48'>48</a>
<a id='n49' href='#n49'>49</a>
<a id='n50' href='#n50'>50</a>
<a id='n51' href='#n51'>51</a>
<a id='n52' href='#n52'>52</a>
<a id='n53' href='#n53'>53</a>
<a id='n54' href='#n54'>54</a>
<a id='n55' href='#n55'>55</a>
<a id='n56' href='#n56'>56</a>
<a id='n57' href='#n57'>57</a>
<a id='n58' href='#n58'>58</a>
<a id='n59' href='#n59'>59</a>
<a id='n60' href='#n60'>60</a>
<a id='n61' href='#n61'>61</a>
<a id='n62' href='#n62'>62</a>
<a id='n63' href='#n63'>63</a>
<a id='n64' href='#n64'>64</a>
<a id='n65' href='#n65'>65</a>
<a id='n66' href='#n66'>66</a>
<a id='n67' href='#n67'>67</a>
<a id='n68' href='#n68'>68</a>
<a id='n69' href='#n69'>69</a>
<a id='n70' href='#n70'>70</a>
<a id='n71' href='#n71'>71</a>
<a id='n72' href='#n72'>72</a>
<a id='n73' href='#n73'>73</a>
<a id='n74' href='#n74'>74</a>
<a id='n75' href='#n75'>75</a>
<a id='n76' href='#n76'>76</a>
<a id='n77' href='#n77'>77</a>
<a id='n78' href='#n78'>78</a>
<a id='n79' href='#n79'>79</a>
<a id='n80' href='#n80'>80</a>
<a id='n81' href='#n81'>81</a>
<a id='n82' href='#n82'>82</a>
<a id='n83' href='#n83'>83</a>
<a id='n84' href='#n84'>84</a>
<a id='n85' href='#n85'>85</a>
<a id='n86' href='#n86'>86</a>
<a id='n87' href='#n87'>87</a>
<a id='n88' href='#n88'>88</a>
<a id='n89' href='#n89'>89</a>
<a id='n90' href='#n90'>90</a>
<a id='n91' href='#n91'>91</a>
<a id='n92' href='#n92'>92</a>
<a id='n93' href='#n93'>93</a>
<a id='n94' href='#n94'>94</a>
<a id='n95' href='#n95'>95</a>
<a id='n96' href='#n96'>96</a>
<a id='n97' href='#n97'>97</a>
<a id='n98' href='#n98'>98</a>
<a id='n99' href='#n99'>99</a>
<a id='n100' href='#n100'>100</a>
<a id='n101' href='#n101'>101</a>
<a id='n102' href='#n102'>102</a>
<a id='n103' href='#n103'>103</a>
<a id='n104' href='#n104'>104</a>
<a id='n105' href='#n105'>105</a>
<a id='n106' href='#n106'>106</a>
<a id='n107' href='#n107'>107</a>
<a id='n108' href='#n108'>108</a>
<a id='n109' href='#n109'>109</a>
<a id='n110' href='#n110'>110</a>
<a id='n111' href='#n111'>111</a>
<a id='n112' href='#n112'>112</a>
<a id='n113' href='#n113'>113</a>
<a id='n114' href='#n114'>114</a>
<a id='n115' href='#n115'>115</a>
<a id='n116' href='#n116'>116</a>
<a id='n117' href='#n117'>117</a>
<a id='n118' href='#n118'>118</a>
<a id='n119' href='#n119'>119</a>
<a id='n120' href='#n120'>120</a>
<a id='n121' href='#n121'>121</a>
<a id='n122' href='#n122'>122</a>
<a id='n123' href='#n123'>123</a>
<a id='n124' href='#n124'>124</a>
<a id='n125' href='#n125'>125</a>
<a id='n126' href='#n126'>126</a>
<a id='n127' href='#n127'>127</a>
<a id='n128' href='#n128'>128</a>
<a id='n129' href='#n129'>129</a>
<a id='n130' href='#n130'>130</a>
<a id='n131' href='#n131'>131</a>
<a id='n132' href='#n132'>132</a>
<a id='n133' href='#n133'>133</a>
<a id='n134' href='#n134'>134</a>
<a id='n135' href='#n135'>135</a>
<a id='n136' href='#n136'>136</a>
<a id='n137' href='#n137'>137</a>
<a id='n138' href='#n138'>138</a>
<a id='n139' href='#n139'>139</a>
<a id='n140' href='#n140'>140</a>
<a id='n141' href='#n141'>141</a>
<a id='n142' href='#n142'>142</a>
<a id='n143' href='#n143'>143</a>
<a id='n144' href='#n144'>144</a>
<a id='n145' href='#n145'>145</a>
<a id='n146' href='#n146'>146</a>
<a id='n147' href='#n147'>147</a>
<a id='n148' href='#n148'>148</a>
<a id='n149' href='#n149'>149</a>
<a id='n150' href='#n150'>150</a>
<a id='n151' href='#n151'>151</a>
<a id='n152' href='#n152'>152</a>
<a id='n153' href='#n153'>153</a>
<a id='n154' href='#n154'>154</a>
<a id='n155' href='#n155'>155</a>
<a id='n156' href='#n156'>156</a>
<a id='n157' href='#n157'>157</a>
<a id='n158' href='#n158'>158</a>
<a id='n159' href='#n159'>159</a>
<a id='n160' href='#n160'>160</a>
<a id='n161' href='#n161'>161</a>
<a id='n162' href='#n162'>162</a>
<a id='n163' href='#n163'>163</a>
<a id='n164' href='#n164'>164</a>
<a id='n165' href='#n165'>165</a>
<a id='n166' href='#n166'>166</a>
<a id='n167' href='#n167'>167</a>
<a id='n168' href='#n168'>168</a>
<a id='n169' href='#n169'>169</a>
<a id='n170' href='#n170'>170</a>
<a id='n171' href='#n171'>171</a>
<a id='n172' href='#n172'>172</a>
<a id='n173' href='#n173'>173</a>
<a id='n174' href='#n174'>174</a>
<a id='n175' href='#n175'>175</a>
<a id='n176' href='#n176'>176</a>
<a id='n177' href='#n177'>177</a>
<a id='n178' href='#n178'>178</a>
<a id='n179' href='#n179'>179</a>
<a id='n180' href='#n180'>180</a>
<a id='n181' href='#n181'>181</a>
<a id='n182' href='#n182'>182</a>
<a id='n183' href='#n183'>183</a>
<a id='n184' href='#n184'>184</a>
<a id='n185' href='#n185'>185</a>
<a id='n186' href='#n186'>186</a>
<a id='n187' href='#n187'>187</a>
<a id='n188' href='#n188'>188</a>
<a id='n189' href='#n189'>189</a>
<a id='n190' href='#n190'>190</a>
<a id='n191' href='#n191'>191</a>
<a id='n192' href='#n192'>192</a>
<a id='n193' href='#n193'>193</a>
<a id='n194' href='#n194'>194</a>
<a id='n195' href='#n195'>195</a>
<a id='n196' href='#n196'>196</a>
<a id='n197' href='#n197'>197</a>
<a id='n198' href='#n198'>198</a>
<a id='n199' href='#n199'>199</a>
<a id='n200' href='#n200'>200</a>
<a id='n201' href='#n201'>201</a>
<a id='n202' href='#n202'>202</a>
<a id='n203' href='#n203'>203</a>
<a id='n204' href='#n204'>204</a>
<a id='n205' href='#n205'>205</a>
<a id='n206' href='#n206'>206</a>
<a id='n207' href='#n207'>207</a>
<a id='n208' href='#n208'>208</a>
<a id='n209' href='#n209'>209</a>
<a id='n210' href='#n210'>210</a>
<a id='n211' href='#n211'>211</a>
<a id='n212' href='#n212'>212</a>
<a id='n213' href='#n213'>213</a>
<a id='n214' href='#n214'>214</a>
<a id='n215' href='#n215'>215</a>
<a id='n216' href='#n216'>216</a>
<a id='n217' href='#n217'>217</a>
<a id='n218' href='#n218'>218</a>
<a id='n219' href='#n219'>219</a>
<a id='n220' href='#n220'>220</a>
<a id='n221' href='#n221'>221</a>
<a id='n222' href='#n222'>222</a>
<a id='n223' href='#n223'>223</a>
<a id='n224' href='#n224'>224</a>
<a id='n225' href='#n225'>225</a>
<a id='n226' href='#n226'>226</a>
<a id='n227' href='#n227'>227</a>
<a id='n228' href='#n228'>228</a>
<a id='n229' href='#n229'>229</a>
<a id='n230' href='#n230'>230</a>
<a id='n231' href='#n231'>231</a>
<a id='n232' href='#n232'>232</a>
<a id='n233' href='#n233'>233</a>
<a id='n234' href='#n234'>234</a>
<a id='n235' href='#n235'>235</a>
<a id='n236' href='#n236'>236</a>
<a id='n237' href='#n237'>237</a>
<a id='n238' href='#n238'>238</a>
<a id='n239' href='#n239'>239</a>
<a id='n240' href='#n240'>240</a>
<a id='n241' href='#n241'>241</a>
<a id='n242' href='#n242'>242</a>
<a id='n243' href='#n243'>243</a>
<a id='n244' href='#n244'>244</a>
<a id='n245' href='#n245'>245</a>
<a id='n246' href='#n246'>246</a>
<a id='n247' href='#n247'>247</a>
<a id='n248' href='#n248'>248</a>
<a id='n249' href='#n249'>249</a>
<a id='n250' href='#n250'>250</a>
<a id='n251' href='#n251'>251</a>
<a id='n252' href='#n252'>252</a>
<a id='n253' href='#n253'>253</a>
<a id='n254' href='#n254'>254</a>
<a id='n255' href='#n255'>255</a>
<a id='n256' href='#n256'>256</a>
<a id='n257' href='#n257'>257</a>
<a id='n258' href='#n258'>258</a>
<a id='n259' href='#n259'>259</a>
<a id='n260' href='#n260'>260</a>
<a id='n261' href='#n261'>261</a>
<a id='n262' href='#n262'>262</a>
<a id='n263' href='#n263'>263</a>
<a id='n264' href='#n264'>264</a>
<a id='n265' href='#n265'>265</a>
<a id='n266' href='#n266'>266</a>
<a id='n267' href='#n267'>267</a>
<a id='n268' href='#n268'>268</a>
<a id='n269' href='#n269'>269</a>
<a id='n270' href='#n270'>270</a>
<a id='n271' href='#n271'>271</a>
<a id='n272' href='#n272'>272</a>
<a id='n273' href='#n273'>273</a>
<a id='n274' href='#n274'>274</a>
<a id='n275' href='#n275'>275</a>
<a id='n276' href='#n276'>276</a>
<a id='n277' href='#n277'>277</a>
<a id='n278' href='#n278'>278</a>
<a id='n279' href='#n279'>279</a>
<a id='n280' href='#n280'>280</a>
<a id='n281' href='#n281'>281</a>
<a id='n282' href='#n282'>282</a>
<a id='n283' href='#n283'>283</a>
<a id='n284' href='#n284'>284</a>
<a id='n285' href='#n285'>285</a>
<a id='n286' href='#n286'>286</a>
<a id='n287' href='#n287'>287</a>
<a id='n288' href='#n288'>288</a>
<a id='n289' href='#n289'>289</a>
<a id='n290' href='#n290'>290</a>
<a id='n291' href='#n291'>291</a>
<a id='n292' href='#n292'>292</a>
<a id='n293' href='#n293'>293</a>
<a id='n294' href='#n294'>294</a>
<a id='n295' href='#n295'>295</a>
<a id='n296' href='#n296'>296</a>
<a id='n297' href='#n297'>297</a>
<a id='n298' href='#n298'>298</a>
<a id='n299' href='#n299'>299</a>
<a id='n300' href='#n300'>300</a>
<a id='n301' href='#n301'>301</a>
<a id='n302' href='#n302'>302</a>
<a id='n303' href='#n303'>303</a>
<a id='n304' href='#n304'>304</a>
<a id='n305' href='#n305'>305</a>
<a id='n306' href='#n306'>306</a>
<a id='n307' href='#n307'>307</a>
<a id='n308' href='#n308'>308</a>
<a id='n309' href='#n309'>309</a>
<a id='n310' href='#n310'>310</a>
<a id='n311' href='#n311'>311</a>
<a id='n312' href='#n312'>312</a>
<a id='n313' href='#n313'>313</a>
<a id='n314' href='#n314'>314</a>
<a id='n315' href='#n315'>315</a>
<a id='n316' href='#n316'>316</a>
<a id='n317' href='#n317'>317</a>
<a id='n318' href='#n318'>318</a>
<a id='n319' href='#n319'>319</a>
<a id='n320' href='#n320'>320</a>
<a id='n321' href='#n321'>321</a>
<a id='n322' href='#n322'>322</a>
<a id='n323' href='#n323'>323</a>
<a id='n324' href='#n324'>324</a>
<a id='n325' href='#n325'>325</a>
<a id='n326' href='#n326'>326</a>
<a id='n327' href='#n327'>327</a>
<a id='n328' href='#n328'>328</a>
<a id='n329' href='#n329'>329</a>
<a id='n330' href='#n330'>330</a>
<a id='n331' href='#n331'>331</a>
<a id='n332' href='#n332'>332</a>
<a id='n333' href='#n333'>333</a>
<a id='n334' href='#n334'>334</a>
<a id='n335' href='#n335'>335</a>
<a id='n336' href='#n336'>336</a>
<a id='n337' href='#n337'>337</a>
<a id='n338' href='#n338'>338</a>
<a id='n339' href='#n339'>339</a>
<a id='n340' href='#n340'>340</a>
<a id='n341' href='#n341'>341</a>
<a id='n342' href='#n342'>342</a>
<a id='n343' href='#n343'>343</a>
<a id='n344' href='#n344'>344</a>
<a id='n345' href='#n345'>345</a>
<a id='n346' href='#n346'>346</a>
<a id='n347' href='#n347'>347</a>
<a id='n348' href='#n348'>348</a>
<a id='n349' href='#n349'>349</a>
<a id='n350' href='#n350'>350</a>
<a id='n351' href='#n351'>351</a>
<a id='n352' href='#n352'>352</a>
<a id='n353' href='#n353'>353</a>
<a id='n354' href='#n354'>354</a>
<a id='n355' href='#n355'>355</a>
<a id='n356' href='#n356'>356</a>
<a id='n357' href='#n357'>357</a>
<a id='n358' href='#n358'>358</a>
<a id='n359' href='#n359'>359</a>
<a id='n360' href='#n360'>360</a>
<a id='n361' href='#n361'>361</a>
<a id='n362' href='#n362'>362</a>
<a id='n363' href='#n363'>363</a>
<a id='n364' href='#n364'>364</a>
<a id='n365' href='#n365'>365</a>
<a id='n366' href='#n366'>366</a>
<a id='n367' href='#n367'>367</a>
<a id='n368' href='#n368'>368</a>
<a id='n369' href='#n369'>369</a>
<a id='n370' href='#n370'>370</a>
<a id='n371' href='#n371'>371</a>
<a id='n372' href='#n372'>372</a>
<a id='n373' href='#n373'>373</a>
<a id='n374' href='#n374'>374</a>
<a id='n375' href='#n375'>375</a>
<a id='n376' href='#n376'>376</a>
<a id='n377' href='#n377'>377</a>
<a id='n378' href='#n378'>378</a>
<a id='n379' href='#n379'>379</a>
<a id='n380' href='#n380'>380</a>
<a id='n381' href='#n381'>381</a>
<a id='n382' href='#n382'>382</a>
<a id='n383' href='#n383'>383</a>
<a id='n384' href='#n384'>384</a>
<a id='n385' href='#n385'>385</a>
<a id='n386' href='#n386'>386</a>
<a id='n387' href='#n387'>387</a>
<a id='n388' href='#n388'>388</a>
<a id='n389' href='#n389'>389</a>
<a id='n390' href='#n390'>390</a>
<a id='n391' href='#n391'>391</a>
<a id='n392' href='#n392'>392</a>
<a id='n393' href='#n393'>393</a>
<a id='n394' href='#n394'>394</a>
<a id='n395' href='#n395'>395</a>
<a id='n396' href='#n396'>396</a>
<a id='n397' href='#n397'>397</a>
<a id='n398' href='#n398'>398</a>
<a id='n399' href='#n399'>399</a>
<a id='n400' href='#n400'>400</a>
<a id='n401' href='#n401'>401</a>
<a id='n402' href='#n402'>402</a>
<a id='n403' href='#n403'>403</a>
<a id='n404' href='#n404'>404</a>
<a id='n405' href='#n405'>405</a>
<a id='n406' href='#n406'>406</a>
<a id='n407' href='#n407'>407</a>
<a id='n408' href='#n408'>408</a>
<a id='n409' href='#n409'>409</a>
<a id='n410' href='#n410'>410</a>
<a id='n411' href='#n411'>411</a>
<a id='n412' href='#n412'>412</a>
<a id='n413' href='#n413'>413</a>
<a id='n414' href='#n414'>414</a>
<a id='n415' href='#n415'>415</a>
<a id='n416' href='#n416'>416</a>
<a id='n417' href='#n417'>417</a>
<a id='n418' href='#n418'>418</a>
<a id='n419' href='#n419'>419</a>
<a id='n420' href='#n420'>420</a>
<a id='n421' href='#n421'>421</a>
<a id='n422' href='#n422'>422</a>
<a id='n423' href='#n423'>423</a>
<a id='n424' href='#n424'>424</a>
<a id='n425' href='#n425'>425</a>
<a id='n426' href='#n426'>426</a>
<a id='n427' href='#n427'>427</a>
<a id='n428' href='#n428'>428</a>
<a id='n429' href='#n429'>429</a>
<a id='n430' href='#n430'>430</a>
<a id='n431' href='#n431'>431</a>
<a id='n432' href='#n432'>432</a>
<a id='n433' href='#n433'>433</a>
<a id='n434' href='#n434'>434</a>
<a id='n435' href='#n435'>435</a>
<a id='n436' href='#n436'>436</a>
<a id='n437' href='#n437'>437</a>
<a id='n438' href='#n438'>438</a>
<a id='n439' href='#n439'>439</a>
<a id='n440' href='#n440'>440</a>
<a id='n441' href='#n441'>441</a>
<a id='n442' href='#n442'>442</a>
<a id='n443' href='#n443'>443</a>
<a id='n444' href='#n444'>444</a>
<a id='n445' href='#n445'>445</a>
<a id='n446' href='#n446'>446</a>
<a id='n447' href='#n447'>447</a>
<a id='n448' href='#n448'>448</a>
<a id='n449' href='#n449'>449</a>
<a id='n450' href='#n450'>450</a>
<a id='n451' href='#n451'>451</a>
<a id='n452' href='#n452'>452</a>
<a id='n453' href='#n453'>453</a>
<a id='n454' href='#n454'>454</a>
<a id='n455' href='#n455'>455</a>
<a id='n456' href='#n456'>456</a>
<a id='n457' href='#n457'>457</a>
<a id='n458' href='#n458'>458</a>
<a id='n459' href='#n459'>459</a>
<a id='n460' href='#n460'>460</a>
<a id='n461' href='#n461'>461</a>
<a id='n462' href='#n462'>462</a>
<a id='n463' href='#n463'>463</a>
<a id='n464' href='#n464'>464</a>
<a id='n465' href='#n465'>465</a>
<a id='n466' href='#n466'>466</a>
<a id='n467' href='#n467'>467</a>
<a id='n468' href='#n468'>468</a>
<a id='n469' href='#n469'>469</a>
<a id='n470' href='#n470'>470</a>
<a id='n471' href='#n471'>471</a>
<a id='n472' href='#n472'>472</a>
<a id='n473' href='#n473'>473</a>
<a id='n474' href='#n474'>474</a>
<a id='n475' href='#n475'>475</a>
<a id='n476' href='#n476'>476</a>
<a id='n477' href='#n477'>477</a>
<a id='n478' href='#n478'>478</a>
<a id='n479' href='#n479'>479</a>
<a id='n480' href='#n480'>480</a>
<a id='n481' href='#n481'>481</a>
<a id='n482' href='#n482'>482</a>
<a id='n483' href='#n483'>483</a>
<a id='n484' href='#n484'>484</a>
<a id='n485' href='#n485'>485</a>
<a id='n486' href='#n486'>486</a>
<a id='n487' href='#n487'>487</a>
<a id='n488' href='#n488'>488</a>
<a id='n489' href='#n489'>489</a>
<a id='n490' href='#n490'>490</a>
<a id='n491' href='#n491'>491</a>
<a id='n492' href='#n492'>492</a>
<a id='n493' href='#n493'>493</a>
<a id='n494' href='#n494'>494</a>
<a id='n495' href='#n495'>495</a>
<a id='n496' href='#n496'>496</a>
<a id='n497' href='#n497'>497</a>
<a id='n498' href='#n498'>498</a>
<a id='n499' href='#n499'>499</a>
<a id='n500' href='#n500'>500</a>
<a id='n501' href='#n501'>501</a>
<a id='n502' href='#n502'>502</a>
<a id='n503' href='#n503'>503</a>
<a id='n504' href='#n504'>504</a>
<a id='n505' href='#n505'>505</a>
<a id='n506' href='#n506'>506</a>
<a id='n507' href='#n507'>507</a>
<a id='n508' href='#n508'>508</a>
<a id='n509' href='#n509'>509</a>
<a id='n510' href='#n510'>510</a>
<a id='n511' href='#n511'>511</a>
<a id='n512' href='#n512'>512</a>
<a id='n513' href='#n513'>513</a>
<a id='n514' href='#n514'>514</a>
<a id='n515' href='#n515'>515</a>
<a id='n516' href='#n516'>516</a>
<a id='n517' href='#n517'>517</a>
<a id='n518' href='#n518'>518</a>
<a id='n519' href='#n519'>519</a>
<a id='n520' href='#n520'>520</a>
<a id='n521' href='#n521'>521</a>
<a id='n522' href='#n522'>522</a>
<a id='n523' href='#n523'>523</a>
<a id='n524' href='#n524'>524</a>
<a id='n525' href='#n525'>525</a>
<a id='n526' href='#n526'>526</a>
<a id='n527' href='#n527'>527</a>
<a id='n528' href='#n528'>528</a>
<a id='n529' href='#n529'>529</a>
<a id='n530' href='#n530'>530</a>
<a id='n531' href='#n531'>531</a>
<a id='n532' href='#n532'>532</a>
<a id='n533' href='#n533'>533</a>
<a id='n534' href='#n534'>534</a>
<a id='n535' href='#n535'>535</a>
<a id='n536' href='#n536'>536</a>
<a id='n537' href='#n537'>537</a>
<a id='n538' href='#n538'>538</a>
<a id='n539' href='#n539'>539</a>
<a id='n540' href='#n540'>540</a>
<a id='n541' href='#n541'>541</a>
<a id='n542' href='#n542'>542</a>
<a id='n543' href='#n543'>543</a>
<a id='n544' href='#n544'>544</a>
<a id='n545' href='#n545'>545</a>
<a id='n546' href='#n546'>546</a>
<a id='n547' href='#n547'>547</a>
<a id='n548' href='#n548'>548</a>
<a id='n549' href='#n549'>549</a>
<a id='n550' href='#n550'>550</a>
<a id='n551' href='#n551'>551</a>
<a id='n552' href='#n552'>552</a>
<a id='n553' href='#n553'>553</a>
<a id='n554' href='#n554'>554</a>
<a id='n555' href='#n555'>555</a>
<a id='n556' href='#n556'>556</a>
<a id='n557' href='#n557'>557</a>
<a id='n558' href='#n558'>558</a>
<a id='n559' href='#n559'>559</a>
<a id='n560' href='#n560'>560</a>
<a id='n561' href='#n561'>561</a>
<a id='n562' href='#n562'>562</a>
<a id='n563' href='#n563'>563</a>
<a id='n564' href='#n564'>564</a>
<a id='n565' href='#n565'>565</a>
<a id='n566' href='#n566'>566</a>
<a id='n567' href='#n567'>567</a>
<a id='n568' href='#n568'>568</a>
<a id='n569' href='#n569'>569</a>
<a id='n570' href='#n570'>570</a>
<a id='n571' href='#n571'>571</a>
<a id='n572' href='#n572'>572</a>
<a id='n573' href='#n573'>573</a>
<a id='n574' href='#n574'>574</a>
<a id='n575' href='#n575'>575</a>
<a id='n576' href='#n576'>576</a>
<a id='n577' href='#n577'>577</a>
<a id='n578' href='#n578'>578</a>
<a id='n579' href='#n579'>579</a>
<a id='n580' href='#n580'>580</a>
<a id='n581' href='#n581'>581</a>
<a id='n582' href='#n582'>582</a>
<a id='n583' href='#n583'>583</a>
<a id='n584' href='#n584'>584</a>
<a id='n585' href='#n585'>585</a>
<a id='n586' href='#n586'>586</a>
<a id='n587' href='#n587'>587</a>
<a id='n588' href='#n588'>588</a>
<a id='n589' href='#n589'>589</a>
<a id='n590' href='#n590'>590</a>
<a id='n591' href='#n591'>591</a>
<a id='n592' href='#n592'>592</a>
<a id='n593' href='#n593'>593</a>
<a id='n594' href='#n594'>594</a>
<a id='n595' href='#n595'>595</a>
<a id='n596' href='#n596'>596</a>
<a id='n597' href='#n597'>597</a>
<a id='n598' href='#n598'>598</a>
<a id='n599' href='#n599'>599</a>
<a id='n600' href='#n600'>600</a>
<a id='n601' href='#n601'>601</a>
<a id='n602' href='#n602'>602</a>
<a id='n603' href='#n603'>603</a>
<a id='n604' href='#n604'>604</a>
<a id='n605' href='#n605'>605</a>
<a id='n606' href='#n606'>606</a>
<a id='n607' href='#n607'>607</a>
<a id='n608' href='#n608'>608</a>
<a id='n609' href='#n609'>609</a>
<a id='n610' href='#n610'>610</a>
<a id='n611' href='#n611'>611</a>
<a id='n612' href='#n612'>612</a>
<a id='n613' href='#n613'>613</a>
<a id='n614' href='#n614'>614</a>
<a id='n615' href='#n615'>615</a>
<a id='n616' href='#n616'>616</a>
<a id='n617' href='#n617'>617</a>
<a id='n618' href='#n618'>618</a>
<a id='n619' href='#n619'>619</a>
<a id='n620' href='#n620'>620</a>
<a id='n621' href='#n621'>621</a>
<a id='n622' href='#n622'>622</a>
<a id='n623' href='#n623'>623</a>
<a id='n624' href='#n624'>624</a>
<a id='n625' href='#n625'>625</a>
<a id='n626' href='#n626'>626</a>
<a id='n627' href='#n627'>627</a>
<a id='n628' href='#n628'>628</a>
<a id='n629' href='#n629'>629</a>
<a id='n630' href='#n630'>630</a>
<a id='n631' href='#n631'>631</a>
<a id='n632' href='#n632'>632</a>
<a id='n633' href='#n633'>633</a>
<a id='n634' href='#n634'>634</a>
<a id='n635' href='#n635'>635</a>
<a id='n636' href='#n636'>636</a>
<a id='n637' href='#n637'>637</a>
<a id='n638' href='#n638'>638</a>
<a id='n639' href='#n639'>639</a>
<a id='n640' href='#n640'>640</a>
<a id='n641' href='#n641'>641</a>
<a id='n642' href='#n642'>642</a>
<a id='n643' href='#n643'>643</a>
<a id='n644' href='#n644'>644</a>
<a id='n645' href='#n645'>645</a>
<a id='n646' href='#n646'>646</a>
<a id='n647' href='#n647'>647</a>
<a id='n648' href='#n648'>648</a>
<a id='n649' href='#n649'>649</a>
<a id='n650' href='#n650'>650</a>
<a id='n651' href='#n651'>651</a>
<a id='n652' href='#n652'>652</a>
<a id='n653' href='#n653'>653</a>
<a id='n654' href='#n654'>654</a>
<a id='n655' href='#n655'>655</a>
<a id='n656' href='#n656'>656</a>
<a id='n657' href='#n657'>657</a>
<a id='n658' href='#n658'>658</a>
<a id='n659' href='#n659'>659</a>
<a id='n660' href='#n660'>660</a>
<a id='n661' href='#n661'>661</a>
<a id='n662' href='#n662'>662</a>
<a id='n663' href='#n663'>663</a>
<a id='n664' href='#n664'>664</a>
<a id='n665' href='#n665'>665</a>
<a id='n666' href='#n666'>666</a>
<a id='n667' href='#n667'>667</a>
<a id='n668' href='#n668'>668</a>
<a id='n669' href='#n669'>669</a>
<a id='n670' href='#n670'>670</a>
<a id='n671' href='#n671'>671</a>
<a id='n672' href='#n672'>672</a>
<a id='n673' href='#n673'>673</a>
<a id='n674' href='#n674'>674</a>
<a id='n675' href='#n675'>675</a>
<a id='n676' href='#n676'>676</a>
<a id='n677' href='#n677'>677</a>
<a id='n678' href='#n678'>678</a>
<a id='n679' href='#n679'>679</a>
<a id='n680' href='#n680'>680</a>
<a id='n681' href='#n681'>681</a>
<a id='n682' href='#n682'>682</a>
<a id='n683' href='#n683'>683</a>
<a id='n684' href='#n684'>684</a>
<a id='n685' href='#n685'>685</a>
<a id='n686' href='#n686'>686</a>
<a id='n687' href='#n687'>687</a>
<a id='n688' href='#n688'>688</a>
<a id='n689' href='#n689'>689</a>
<a id='n690' href='#n690'>690</a>
<a id='n691' href='#n691'>691</a>
<a id='n692' href='#n692'>692</a>
<a id='n693' href='#n693'>693</a>
<a id='n694' href='#n694'>694</a>
<a id='n695' href='#n695'>695</a>
<a id='n696' href='#n696'>696</a>
<a id='n697' href='#n697'>697</a>
<a id='n698' href='#n698'>698</a>
<a id='n699' href='#n699'>699</a>
<a id='n700' href='#n700'>700</a>
<a id='n701' href='#n701'>701</a>
<a id='n702' href='#n702'>702</a>
<a id='n703' href='#n703'>703</a>
<a id='n704' href='#n704'>704</a>
<a id='n705' href='#n705'>705</a>
<a id='n706' href='#n706'>706</a>
<a id='n707' href='#n707'>707</a>
<a id='n708' href='#n708'>708</a>
<a id='n709' href='#n709'>709</a>
<a id='n710' href='#n710'>710</a>
<a id='n711' href='#n711'>711</a>
<a id='n712' href='#n712'>712</a>
<a id='n713' href='#n713'>713</a>
<a id='n714' href='#n714'>714</a>
<a id='n715' href='#n715'>715</a>
<a id='n716' href='#n716'>716</a>
<a id='n717' href='#n717'>717</a>
<a id='n718' href='#n718'>718</a>
<a id='n719' href='#n719'>719</a>
<a id='n720' href='#n720'>720</a>
<a id='n721' href='#n721'>721</a>
<a id='n722' href='#n722'>722</a>
<a id='n723' href='#n723'>723</a>
<a id='n724' href='#n724'>724</a>
<a id='n725' href='#n725'>725</a>
<a id='n726' href='#n726'>726</a>
<a id='n727' href='#n727'>727</a>
<a id='n728' href='#n728'>728</a>
<a id='n729' href='#n729'>729</a>
<a id='n730' href='#n730'>730</a>
<a id='n731' href='#n731'>731</a>
<a id='n732' href='#n732'>732</a>
<a id='n733' href='#n733'>733</a>
<a id='n734' href='#n734'>734</a>
<a id='n735' href='#n735'>735</a>
<a id='n736' href='#n736'>736</a>
<a id='n737' href='#n737'>737</a>
<a id='n738' href='#n738'>738</a>
<a id='n739' href='#n739'>739</a>
<a id='n740' href='#n740'>740</a>
<a id='n741' href='#n741'>741</a>
<a id='n742' href='#n742'>742</a>
<a id='n743' href='#n743'>743</a>
<a id='n744' href='#n744'>744</a>
<a id='n745' href='#n745'>745</a>
<a id='n746' href='#n746'>746</a>
<a id='n747' href='#n747'>747</a>
<a id='n748' href='#n748'>748</a>
<a id='n749' href='#n749'>749</a>
<a id='n750' href='#n750'>750</a>
<a id='n751' href='#n751'>751</a>
<a id='n752' href='#n752'>752</a>
<a id='n753' href='#n753'>753</a>
<a id='n754' href='#n754'>754</a>
<a id='n755' href='#n755'>755</a>
<a id='n756' href='#n756'>756</a>
<a id='n757' href='#n757'>757</a>
<a id='n758' href='#n758'>758</a>
<a id='n759' href='#n759'>759</a>
<a id='n760' href='#n760'>760</a>
<a id='n761' href='#n761'>761</a>
<a id='n762' href='#n762'>762</a>
<a id='n763' href='#n763'>763</a>
<a id='n764' href='#n764'>764</a>
<a id='n765' href='#n765'>765</a>
<a id='n766' href='#n766'>766</a>
<a id='n767' href='#n767'>767</a>
<a id='n768' href='#n768'>768</a>
<a id='n769' href='#n769'>769</a>
<a id='n770' href='#n770'>770</a>
<a id='n771' href='#n771'>771</a>
<a id='n772' href='#n772'>772</a>
<a id='n773' href='#n773'>773</a>
<a id='n774' href='#n774'>774</a>
<a id='n775' href='#n775'>775</a>
<a id='n776' href='#n776'>776</a>
<a id='n777' href='#n777'>777</a>
<a id='n778' href='#n778'>778</a>
<a id='n779' href='#n779'>779</a>
<a id='n780' href='#n780'>780</a>
<a id='n781' href='#n781'>781</a>
<a id='n782' href='#n782'>782</a>
<a id='n783' href='#n783'>783</a>
<a id='n784' href='#n784'>784</a>
<a id='n785' href='#n785'>785</a>
<a id='n786' href='#n786'>786</a>
<a id='n787' href='#n787'>787</a>
<a id='n788' href='#n788'>788</a>
<a id='n789' href='#n789'>789</a>
<a id='n790' href='#n790'>790</a>
<a id='n791' href='#n791'>791</a>
<a id='n792' href='#n792'>792</a>
<a id='n793' href='#n793'>793</a>
<a id='n794' href='#n794'>794</a>
<a id='n795' href='#n795'>795</a>
<a id='n796' href='#n796'>796</a>
<a id='n797' href='#n797'>797</a>
<a id='n798' href='#n798'>798</a>
<a id='n799' href='#n799'>799</a>
<a id='n800' href='#n800'>800</a>
<a id='n801' href='#n801'>801</a>
<a id='n802' href='#n802'>802</a>
<a id='n803' href='#n803'>803</a>
<a id='n804' href='#n804'>804</a>
<a id='n805' href='#n805'>805</a>
<a id='n806' href='#n806'>806</a>
<a id='n807' href='#n807'>807</a>
<a id='n808' href='#n808'>808</a>
<a id='n809' href='#n809'>809</a>
<a id='n810' href='#n810'>810</a>
<a id='n811' href='#n811'>811</a>
<a id='n812' href='#n812'>812</a>
<a id='n813' href='#n813'>813</a>
<a id='n814' href='#n814'>814</a>
<a id='n815' href='#n815'>815</a>
<a id='n816' href='#n816'>816</a>
<a id='n817' href='#n817'>817</a>
<a id='n818' href='#n818'>818</a>
<a id='n819' href='#n819'>819</a>
<a id='n820' href='#n820'>820</a>
<a id='n821' href='#n821'>821</a>
<a id='n822' href='#n822'>822</a>
<a id='n823' href='#n823'>823</a>
<a id='n824' href='#n824'>824</a>
<a id='n825' href='#n825'>825</a>
<a id='n826' href='#n826'>826</a>
<a id='n827' href='#n827'>827</a>
<a id='n828' href='#n828'>828</a>
<a id='n829' href='#n829'>829</a>
<a id='n830' href='#n830'>830</a>
<a id='n831' href='#n831'>831</a>
<a id='n832' href='#n832'>832</a>
<a id='n833' href='#n833'>833</a>
<a id='n834' href='#n834'>834</a>
<a id='n835' href='#n835'>835</a>
<a id='n836' href='#n836'>836</a>
<a id='n837' href='#n837'>837</a>
<a id='n838' href='#n838'>838</a>
<a id='n839' href='#n839'>839</a>
<a id='n840' href='#n840'>840</a>
<a id='n841' href='#n841'>841</a>
<a id='n842' href='#n842'>842</a>
<a id='n843' href='#n843'>843</a>
<a id='n844' href='#n844'>844</a>
<a id='n845' href='#n845'>845</a>
<a id='n846' href='#n846'>846</a>
<a id='n847' href='#n847'>847</a>
<a id='n848' href='#n848'>848</a>
<a id='n849' href='#n849'>849</a>
<a id='n850' href='#n850'>850</a>
<a id='n851' href='#n851'>851</a>
<a id='n852' href='#n852'>852</a>
<a id='n853' href='#n853'>853</a>
<a id='n854' href='#n854'>854</a>
<a id='n855' href='#n855'>855</a>
<a id='n856' href='#n856'>856</a>
<a id='n857' href='#n857'>857</a>
<a id='n858' href='#n858'>858</a>
<a id='n859' href='#n859'>859</a>
<a id='n860' href='#n860'>860</a>
<a id='n861' href='#n861'>861</a>
<a id='n862' href='#n862'>862</a>
<a id='n863' href='#n863'>863</a>
<a id='n864' href='#n864'>864</a>
<a id='n865' href='#n865'>865</a>
<a id='n866' href='#n866'>866</a>
<a id='n867' href='#n867'>867</a>
<a id='n868' href='#n868'>868</a>
<a id='n869' href='#n869'>869</a>
<a id='n870' href='#n870'>870</a>
<a id='n871' href='#n871'>871</a>
<a id='n872' href='#n872'>872</a>
<a id='n873' href='#n873'>873</a>
<a id='n874' href='#n874'>874</a>
<a id='n875' href='#n875'>875</a>
<a id='n876' href='#n876'>876</a>
<a id='n877' href='#n877'>877</a>
<a id='n878' href='#n878'>878</a>
<a id='n879' href='#n879'>879</a>
<a id='n880' href='#n880'>880</a>
<a id='n881' href='#n881'>881</a>
<a id='n882' href='#n882'>882</a>
<a id='n883' href='#n883'>883</a>
<a id='n884' href='#n884'>884</a>
<a id='n885' href='#n885'>885</a>
<a id='n886' href='#n886'>886</a>
<a id='n887' href='#n887'>887</a>
<a id='n888' href='#n888'>888</a>
<a id='n889' href='#n889'>889</a>
<a id='n890' href='#n890'>890</a>
<a id='n891' href='#n891'>891</a>
<a id='n892' href='#n892'>892</a>
<a id='n893' href='#n893'>893</a>
<a id='n894' href='#n894'>894</a>
<a id='n895' href='#n895'>895</a>
<a id='n896' href='#n896'>896</a>
<a id='n897' href='#n897'>897</a>
<a id='n898' href='#n898'>898</a>
<a id='n899' href='#n899'>899</a>
<a id='n900' href='#n900'>900</a>
<a id='n901' href='#n901'>901</a>
<a id='n902' href='#n902'>902</a>
<a id='n903' href='#n903'>903</a>
<a id='n904' href='#n904'>904</a>
<a id='n905' href='#n905'>905</a>
<a id='n906' href='#n906'>906</a>
<a id='n907' href='#n907'>907</a>
<a id='n908' href='#n908'>908</a>
<a id='n909' href='#n909'>909</a>
<a id='n910' href='#n910'>910</a>
<a id='n911' href='#n911'>911</a>
<a id='n912' href='#n912'>912</a>
<a id='n913' href='#n913'>913</a>
<a id='n914' href='#n914'>914</a>
<a id='n915' href='#n915'>915</a>
<a id='n916' href='#n916'>916</a>
<a id='n917' href='#n917'>917</a>
<a id='n918' href='#n918'>918</a>
<a id='n919' href='#n919'>919</a>
<a id='n920' href='#n920'>920</a>
<a id='n921' href='#n921'>921</a>
<a id='n922' href='#n922'>922</a>
<a id='n923' href='#n923'>923</a>
<a id='n924' href='#n924'>924</a>
<a id='n925' href='#n925'>925</a>
<a id='n926' href='#n926'>926</a>
<a id='n927' href='#n927'>927</a>
<a id='n928' href='#n928'>928</a>
<a id='n929' href='#n929'>929</a>
<a id='n930' href='#n930'>930</a>
<a id='n931' href='#n931'>931</a>
<a id='n932' href='#n932'>932</a>
<a id='n933' href='#n933'>933</a>
<a id='n934' href='#n934'>934</a>
<a id='n935' href='#n935'>935</a>
<a id='n936' href='#n936'>936</a>
<a id='n937' href='#n937'>937</a>
<a id='n938' href='#n938'>938</a>
<a id='n939' href='#n939'>939</a>
<a id='n940' href='#n940'>940</a>
<a id='n941' href='#n941'>941</a>
<a id='n942' href='#n942'>942</a>
<a id='n943' href='#n943'>943</a>
<a id='n944' href='#n944'>944</a>
<a id='n945' href='#n945'>945</a>
<a id='n946' href='#n946'>946</a>
<a id='n947' href='#n947'>947</a>
<a id='n948' href='#n948'>948</a>
<a id='n949' href='#n949'>949</a>
<a id='n950' href='#n950'>950</a>
<a id='n951' href='#n951'>951</a>
<a id='n952' href='#n952'>952</a>
<a id='n953' href='#n953'>953</a>
<a id='n954' href='#n954'>954</a>
<a id='n955' href='#n955'>955</a>
<a id='n956' href='#n956'>956</a>
<a id='n957' href='#n957'>957</a>
<a id='n958' href='#n958'>958</a>
<a id='n959' href='#n959'>959</a>
<a id='n960' href='#n960'>960</a>
<a id='n961' href='#n961'>961</a>
<a id='n962' href='#n962'>962</a>
<a id='n963' href='#n963'>963</a>
<a id='n964' href='#n964'>964</a>
<a id='n965' href='#n965'>965</a>
<a id='n966' href='#n966'>966</a>
<a id='n967' href='#n967'>967</a>
<a id='n968' href='#n968'>968</a>
<a id='n969' href='#n969'>969</a>
<a id='n970' href='#n970'>970</a>
<a id='n971' href='#n971'>971</a>
<a id='n972' href='#n972'>972</a>
<a id='n973' href='#n973'>973</a>
<a id='n974' href='#n974'>974</a>
<a id='n975' href='#n975'>975</a>
<a id='n976' href='#n976'>976</a>
<a id='n977' href='#n977'>977</a>
<a id='n978' href='#n978'>978</a>
<a id='n979' href='#n979'>979</a>
<a id='n980' href='#n980'>980</a>
<a id='n981' href='#n981'>981</a>
<a id='n982' href='#n982'>982</a>
<a id='n983' href='#n983'>983</a>
<a id='n984' href='#n984'>984</a>
<a id='n985' href='#n985'>985</a>
<a id='n986' href='#n986'>986</a>
<a id='n987' href='#n987'>987</a>
<a id='n988' href='#n988'>988</a>
<a id='n989' href='#n989'>989</a>
<a id='n990' href='#n990'>990</a>
<a id='n991' href='#n991'>991</a>
<a id='n992' href='#n992'>992</a>
<a id='n993' href='#n993'>993</a>
<a id='n994' href='#n994'>994</a>
<a id='n995' href='#n995'>995</a>
<a id='n996' href='#n996'>996</a>
<a id='n997' href='#n997'>997</a>
<a id='n998' href='#n998'>998</a>
<a id='n999' href='#n999'>999</a>
<a id='n1000' href='#n1000'>1000</a>
<a id='n1001' href='#n1001'>1001</a>
<a id='n1002' href='#n1002'>1002</a>
<a id='n1003' href='#n1003'>1003</a>
<a id='n1004' href='#n1004'>1004</a>
<a id='n1005' href='#n1005'>1005</a>
<a id='n1006' href='#n1006'>1006</a>
<a id='n1007' href='#n1007'>1007</a>
<a id='n1008' href='#n1008'>1008</a>
<a id='n1009' href='#n1009'>1009</a>
<a id='n1010' href='#n1010'>1010</a>
<a id='n1011' href='#n1011'>1011</a>
<a id='n1012' href='#n1012'>1012</a>
<a id='n1013' href='#n1013'>1013</a>
<a id='n1014' href='#n1014'>1014</a>
<a id='n1015' href='#n1015'>1015</a>
<a id='n1016' href='#n1016'>1016</a>
<a id='n1017' href='#n1017'>1017</a>
<a id='n1018' href='#n1018'>1018</a>
<a id='n1019' href='#n1019'>1019</a>
<a id='n1020' href='#n1020'>1020</a>
<a id='n1021' href='#n1021'>1021</a>
<a id='n1022' href='#n1022'>1022</a>
<a id='n1023' href='#n1023'>1023</a>
<a id='n1024' href='#n1024'>1024</a>
<a id='n1025' href='#n1025'>1025</a>
<a id='n1026' href='#n1026'>1026</a>
<a id='n1027' href='#n1027'>1027</a>
<a id='n1028' href='#n1028'>1028</a>
<a id='n1029' href='#n1029'>1029</a>
<a id='n1030' href='#n1030'>1030</a>
<a id='n1031' href='#n1031'>1031</a>
<a id='n1032' href='#n1032'>1032</a>
<a id='n1033' href='#n1033'>1033</a>
<a id='n1034' href='#n1034'>1034</a>
<a id='n1035' href='#n1035'>1035</a>
<a id='n1036' href='#n1036'>1036</a>
<a id='n1037' href='#n1037'>1037</a>
<a id='n1038' href='#n1038'>1038</a>
<a id='n1039' href='#n1039'>1039</a>
<a id='n1040' href='#n1040'>1040</a>
<a id='n1041' href='#n1041'>1041</a>
<a id='n1042' href='#n1042'>1042</a>
<a id='n1043' href='#n1043'>1043</a>
<a id='n1044' href='#n1044'>1044</a>
<a id='n1045' href='#n1045'>1045</a>
<a id='n1046' href='#n1046'>1046</a>
<a id='n1047' href='#n1047'>1047</a>
<a id='n1048' href='#n1048'>1048</a>
<a id='n1049' href='#n1049'>1049</a>
<a id='n1050' href='#n1050'>1050</a>
<a id='n1051' href='#n1051'>1051</a>
<a id='n1052' href='#n1052'>1052</a>
<a id='n1053' href='#n1053'>1053</a>
<a id='n1054' href='#n1054'>1054</a>
<a id='n1055' href='#n1055'>1055</a>
<a id='n1056' href='#n1056'>1056</a>
<a id='n1057' href='#n1057'>1057</a>
<a id='n1058' href='#n1058'>1058</a>
<a id='n1059' href='#n1059'>1059</a>
<a id='n1060' href='#n1060'>1060</a>
<a id='n1061' href='#n1061'>1061</a>
<a id='n1062' href='#n1062'>1062</a>
<a id='n1063' href='#n1063'>1063</a>
<a id='n1064' href='#n1064'>1064</a>
<a id='n1065' href='#n1065'>1065</a>
<a id='n1066' href='#n1066'>1066</a>
<a id='n1067' href='#n1067'>1067</a>
<a id='n1068' href='#n1068'>1068</a>
<a id='n1069' href='#n1069'>1069</a>
<a id='n1070' href='#n1070'>1070</a>
<a id='n1071' href='#n1071'>1071</a>
<a id='n1072' href='#n1072'>1072</a>
<a id='n1073' href='#n1073'>1073</a>
<a id='n1074' href='#n1074'>1074</a>
<a id='n1075' href='#n1075'>1075</a>
<a id='n1076' href='#n1076'>1076</a>
<a id='n1077' href='#n1077'>1077</a>
<a id='n1078' href='#n1078'>1078</a>
<a id='n1079' href='#n1079'>1079</a>
<a id='n1080' href='#n1080'>1080</a>
<a id='n1081' href='#n1081'>1081</a>
<a id='n1082' href='#n1082'>1082</a>
<a id='n1083' href='#n1083'>1083</a>
<a id='n1084' href='#n1084'>1084</a>
<a id='n1085' href='#n1085'>1085</a>
<a id='n1086' href='#n1086'>1086</a>
<a id='n1087' href='#n1087'>1087</a>
<a id='n1088' href='#n1088'>1088</a>
<a id='n1089' href='#n1089'>1089</a>
<a id='n1090' href='#n1090'>1090</a>
<a id='n1091' href='#n1091'>1091</a>
<a id='n1092' href='#n1092'>1092</a>
<a id='n1093' href='#n1093'>1093</a>
<a id='n1094' href='#n1094'>1094</a>
<a id='n1095' href='#n1095'>1095</a>
<a id='n1096' href='#n1096'>1096</a>
<a id='n1097' href='#n1097'>1097</a>
<a id='n1098' href='#n1098'>1098</a>
<a id='n1099' href='#n1099'>1099</a>
<a id='n1100' href='#n1100'>1100</a>
<a id='n1101' href='#n1101'>1101</a>
<a id='n1102' href='#n1102'>1102</a>
<a id='n1103' href='#n1103'>1103</a>
<a id='n1104' href='#n1104'>1104</a>
<a id='n1105' href='#n1105'>1105</a>
<a id='n1106' href='#n1106'>1106</a>
<a id='n1107' href='#n1107'>1107</a>
<a id='n1108' href='#n1108'>1108</a>
<a id='n1109' href='#n1109'>1109</a>
<a id='n1110' href='#n1110'>1110</a>
<a id='n1111' href='#n1111'>1111</a>
<a id='n1112' href='#n1112'>1112</a>
<a id='n1113' href='#n1113'>1113</a>
<a id='n1114' href='#n1114'>1114</a>
<a id='n1115' href='#n1115'>1115</a>
<a id='n1116' href='#n1116'>1116</a>
<a id='n1117' href='#n1117'>1117</a>
<a id='n1118' href='#n1118'>1118</a>
<a id='n1119' href='#n1119'>1119</a>
<a id='n1120' href='#n1120'>1120</a>
<a id='n1121' href='#n1121'>1121</a>
<a id='n1122' href='#n1122'>1122</a>
<a id='n1123' href='#n1123'>1123</a>
<a id='n1124' href='#n1124'>1124</a>
<a id='n1125' href='#n1125'>1125</a>
<a id='n1126' href='#n1126'>1126</a>
<a id='n1127' href='#n1127'>1127</a>
<a id='n1128' href='#n1128'>1128</a>
<a id='n1129' href='#n1129'>1129</a>
<a id='n1130' href='#n1130'>1130</a>
<a id='n1131' href='#n1131'>1131</a>
<a id='n1132' href='#n1132'>1132</a>
<a id='n1133' href='#n1133'>1133</a>
<a id='n1134' href='#n1134'>1134</a>
<a id='n1135' href='#n1135'>1135</a>
<a id='n1136' href='#n1136'>1136</a>
<a id='n1137' href='#n1137'>1137</a>
<a id='n1138' href='#n1138'>1138</a>
<a id='n1139' href='#n1139'>1139</a>
<a id='n1140' href='#n1140'>1140</a>
<a id='n1141' href='#n1141'>1141</a>
<a id='n1142' href='#n1142'>1142</a>
<a id='n1143' href='#n1143'>1143</a>
<a id='n1144' href='#n1144'>1144</a>
<a id='n1145' href='#n1145'>1145</a>
<a id='n1146' href='#n1146'>1146</a>
<a id='n1147' href='#n1147'>1147</a>
<a id='n1148' href='#n1148'>1148</a>
<a id='n1149' href='#n1149'>1149</a>
<a id='n1150' href='#n1150'>1150</a>
<a id='n1151' href='#n1151'>1151</a>
<a id='n1152' href='#n1152'>1152</a>
<a id='n1153' href='#n1153'>1153</a>
<a id='n1154' href='#n1154'>1154</a>
<a id='n1155' href='#n1155'>1155</a>
<a id='n1156' href='#n1156'>1156</a>
<a id='n1157' href='#n1157'>1157</a>
<a id='n1158' href='#n1158'>1158</a>
<a id='n1159' href='#n1159'>1159</a>
<a id='n1160' href='#n1160'>1160</a>
<a id='n1161' href='#n1161'>1161</a>
<a id='n1162' href='#n1162'>1162</a>
<a id='n1163' href='#n1163'>1163</a>
<a id='n1164' href='#n1164'>1164</a>
<a id='n1165' href='#n1165'>1165</a>
<a id='n1166' href='#n1166'>1166</a>
<a id='n1167' href='#n1167'>1167</a>
<a id='n1168' href='#n1168'>1168</a>
<a id='n1169' href='#n1169'>1169</a>
<a id='n1170' href='#n1170'>1170</a>
<a id='n1171' href='#n1171'>1171</a>
<a id='n1172' href='#n1172'>1172</a>
<a id='n1173' href='#n1173'>1173</a>
<a id='n1174' href='#n1174'>1174</a>
<a id='n1175' href='#n1175'>1175</a>
<a id='n1176' href='#n1176'>1176</a>
<a id='n1177' href='#n1177'>1177</a>
<a id='n1178' href='#n1178'>1178</a>
<a id='n1179' href='#n1179'>1179</a>
<a id='n1180' href='#n1180'>1180</a>
<a id='n1181' href='#n1181'>1181</a>
<a id='n1182' href='#n1182'>1182</a>
<a id='n1183' href='#n1183'>1183</a>
<a id='n1184' href='#n1184'>1184</a>
<a id='n1185' href='#n1185'>1185</a>
<a id='n1186' href='#n1186'>1186</a>
<a id='n1187' href='#n1187'>1187</a>
<a id='n1188' href='#n1188'>1188</a>
<a id='n1189' href='#n1189'>1189</a>
<a id='n1190' href='#n1190'>1190</a>
<a id='n1191' href='#n1191'>1191</a>
<a id='n1192' href='#n1192'>1192</a>
<a id='n1193' href='#n1193'>1193</a>
<a id='n1194' href='#n1194'>1194</a>
<a id='n1195' href='#n1195'>1195</a>
<a id='n1196' href='#n1196'>1196</a>
<a id='n1197' href='#n1197'>1197</a>
<a id='n1198' href='#n1198'>1198</a>
<a id='n1199' href='#n1199'>1199</a>
<a id='n1200' href='#n1200'>1200</a>
<a id='n1201' href='#n1201'>1201</a>
<a id='n1202' href='#n1202'>1202</a>
<a id='n1203' href='#n1203'>1203</a>
<a id='n1204' href='#n1204'>1204</a>
<a id='n1205' href='#n1205'>1205</a>
<a id='n1206' href='#n1206'>1206</a>
<a id='n1207' href='#n1207'>1207</a>
<a id='n1208' href='#n1208'>1208</a>
<a id='n1209' href='#n1209'>1209</a>
<a id='n1210' href='#n1210'>1210</a>
<a id='n1211' href='#n1211'>1211</a>
<a id='n1212' href='#n1212'>1212</a>
<a id='n1213' href='#n1213'>1213</a>
<a id='n1214' href='#n1214'>1214</a>
<a id='n1215' href='#n1215'>1215</a>
<a id='n1216' href='#n1216'>1216</a>
<a id='n1217' href='#n1217'>1217</a>
<a id='n1218' href='#n1218'>1218</a>
<a id='n1219' href='#n1219'>1219</a>
<a id='n1220' href='#n1220'>1220</a>
<a id='n1221' href='#n1221'>1221</a>
<a id='n1222' href='#n1222'>1222</a>
<a id='n1223' href='#n1223'>1223</a>
<a id='n1224' href='#n1224'>1224</a>
<a id='n1225' href='#n1225'>1225</a>
<a id='n1226' href='#n1226'>1226</a>
<a id='n1227' href='#n1227'>1227</a>
<a id='n1228' href='#n1228'>1228</a>
<a id='n1229' href='#n1229'>1229</a>
<a id='n1230' href='#n1230'>1230</a>
<a id='n1231' href='#n1231'>1231</a>
<a id='n1232' href='#n1232'>1232</a>
<a id='n1233' href='#n1233'>1233</a>
<a id='n1234' href='#n1234'>1234</a>
<a id='n1235' href='#n1235'>1235</a>
<a id='n1236' href='#n1236'>1236</a>
<a id='n1237' href='#n1237'>1237</a>
<a id='n1238' href='#n1238'>1238</a>
<a id='n1239' href='#n1239'>1239</a>
<a id='n1240' href='#n1240'>1240</a>
<a id='n1241' href='#n1241'>1241</a>
<a id='n1242' href='#n1242'>1242</a>
<a id='n1243' href='#n1243'>1243</a>
<a id='n1244' href='#n1244'>1244</a>
<a id='n1245' href='#n1245'>1245</a>
<a id='n1246' href='#n1246'>1246</a>
<a id='n1247' href='#n1247'>1247</a>
<a id='n1248' href='#n1248'>1248</a>
<a id='n1249' href='#n1249'>1249</a>
<a id='n1250' href='#n1250'>1250</a>
<a id='n1251' href='#n1251'>1251</a>
<a id='n1252' href='#n1252'>1252</a>
<a id='n1253' href='#n1253'>1253</a>
<a id='n1254' href='#n1254'>1254</a>
<a id='n1255' href='#n1255'>1255</a>
<a id='n1256' href='#n1256'>1256</a>
<a id='n1257' href='#n1257'>1257</a>
<a id='n1258' href='#n1258'>1258</a>
<a id='n1259' href='#n1259'>1259</a>
<a id='n1260' href='#n1260'>1260</a>
<a id='n1261' href='#n1261'>1261</a>
<a id='n1262' href='#n1262'>1262</a>
<a id='n1263' href='#n1263'>1263</a>
<a id='n1264' href='#n1264'>1264</a>
<a id='n1265' href='#n1265'>1265</a>
<a id='n1266' href='#n1266'>1266</a>
<a id='n1267' href='#n1267'>1267</a>
<a id='n1268' href='#n1268'>1268</a>
<a id='n1269' href='#n1269'>1269</a>
<a id='n1270' href='#n1270'>1270</a>
<a id='n1271' href='#n1271'>1271</a>
<a id='n1272' href='#n1272'>1272</a>
<a id='n1273' href='#n1273'>1273</a>
<a id='n1274' href='#n1274'>1274</a>
<a id='n1275' href='#n1275'>1275</a>
<a id='n1276' href='#n1276'>1276</a>
<a id='n1277' href='#n1277'>1277</a>
<a id='n1278' href='#n1278'>1278</a>
<a id='n1279' href='#n1279'>1279</a>
<a id='n1280' href='#n1280'>1280</a>
<a id='n1281' href='#n1281'>1281</a>
<a id='n1282' href='#n1282'>1282</a>
<a id='n1283' href='#n1283'>1283</a>
<a id='n1284' href='#n1284'>1284</a>
<a id='n1285' href='#n1285'>1285</a>
<a id='n1286' href='#n1286'>1286</a>
<a id='n1287' href='#n1287'>1287</a>
<a id='n1288' href='#n1288'>1288</a>
<a id='n1289' href='#n1289'>1289</a>
<a id='n1290' href='#n1290'>1290</a>
<a id='n1291' href='#n1291'>1291</a>
<a id='n1292' href='#n1292'>1292</a>
<a id='n1293' href='#n1293'>1293</a>
<a id='n1294' href='#n1294'>1294</a>
<a id='n1295' href='#n1295'>1295</a>
<a id='n1296' href='#n1296'>1296</a>
<a id='n1297' href='#n1297'>1297</a>
<a id='n1298' href='#n1298'>1298</a>
<a id='n1299' href='#n1299'>1299</a>
<a id='n1300' href='#n1300'>1300</a>
<a id='n1301' href='#n1301'>1301</a>
<a id='n1302' href='#n1302'>1302</a>
<a id='n1303' href='#n1303'>1303</a>
<a id='n1304' href='#n1304'>1304</a>
<a id='n1305' href='#n1305'>1305</a>
<a id='n1306' href='#n1306'>1306</a>
<a id='n1307' href='#n1307'>1307</a>
<a id='n1308' href='#n1308'>1308</a>
<a id='n1309' href='#n1309'>1309</a>
<a id='n1310' href='#n1310'>1310</a>
<a id='n1311' href='#n1311'>1311</a>
<a id='n1312' href='#n1312'>1312</a>
<a id='n1313' href='#n1313'>1313</a>
<a id='n1314' href='#n1314'>1314</a>
<a id='n1315' href='#n1315'>1315</a>
<a id='n1316' href='#n1316'>1316</a>
<a id='n1317' href='#n1317'>1317</a>
<a id='n1318' href='#n1318'>1318</a>
<a id='n1319' href='#n1319'>1319</a>
<a id='n1320' href='#n1320'>1320</a>
<a id='n1321' href='#n1321'>1321</a>
<a id='n1322' href='#n1322'>1322</a>
<a id='n1323' href='#n1323'>1323</a>
<a id='n1324' href='#n1324'>1324</a>
<a id='n1325' href='#n1325'>1325</a>
<a id='n1326' href='#n1326'>1326</a>
<a id='n1327' href='#n1327'>1327</a>
<a id='n1328' href='#n1328'>1328</a>
<a id='n1329' href='#n1329'>1329</a>
<a id='n1330' href='#n1330'>1330</a>
<a id='n1331' href='#n1331'>1331</a>
<a id='n1332' href='#n1332'>1332</a>
<a id='n1333' href='#n1333'>1333</a>
<a id='n1334' href='#n1334'>1334</a>
<a id='n1335' href='#n1335'>1335</a>
<a id='n1336' href='#n1336'>1336</a>
<a id='n1337' href='#n1337'>1337</a>
<a id='n1338' href='#n1338'>1338</a>
<a id='n1339' href='#n1339'>1339</a>
<a id='n1340' href='#n1340'>1340</a>
<a id='n1341' href='#n1341'>1341</a>
<a id='n1342' href='#n1342'>1342</a>
<a id='n1343' href='#n1343'>1343</a>
<a id='n1344' href='#n1344'>1344</a>
<a id='n1345' href='#n1345'>1345</a>
<a id='n1346' href='#n1346'>1346</a>
<a id='n1347' href='#n1347'>1347</a>
<a id='n1348' href='#n1348'>1348</a>
<a id='n1349' href='#n1349'>1349</a>
<a id='n1350' href='#n1350'>1350</a>
<a id='n1351' href='#n1351'>1351</a>
<a id='n1352' href='#n1352'>1352</a>
<a id='n1353' href='#n1353'>1353</a>
<a id='n1354' href='#n1354'>1354</a>
<a id='n1355' href='#n1355'>1355</a>
<a id='n1356' href='#n1356'>1356</a>
<a id='n1357' href='#n1357'>1357</a>
<a id='n1358' href='#n1358'>1358</a>
<a id='n1359' href='#n1359'>1359</a>
<a id='n1360' href='#n1360'>1360</a>
<a id='n1361' href='#n1361'>1361</a>
<a id='n1362' href='#n1362'>1362</a>
<a id='n1363' href='#n1363'>1363</a>
<a id='n1364' href='#n1364'>1364</a>
<a id='n1365' href='#n1365'>1365</a>
<a id='n1366' href='#n1366'>1366</a>
<a id='n1367' href='#n1367'>1367</a>
<a id='n1368' href='#n1368'>1368</a>
<a id='n1369' href='#n1369'>1369</a>
<a id='n1370' href='#n1370'>1370</a>
<a id='n1371' href='#n1371'>1371</a>
<a id='n1372' href='#n1372'>1372</a>
<a id='n1373' href='#n1373'>1373</a>
<a id='n1374' href='#n1374'>1374</a>
<a id='n1375' href='#n1375'>1375</a>
<a id='n1376' href='#n1376'>1376</a>
<a id='n1377' href='#n1377'>1377</a>
<a id='n1378' href='#n1378'>1378</a>
<a id='n1379' href='#n1379'>1379</a>
<a id='n1380' href='#n1380'>1380</a>
<a id='n1381' href='#n1381'>1381</a>
<a id='n1382' href='#n1382'>1382</a>
<a id='n1383' href='#n1383'>1383</a>
<a id='n1384' href='#n1384'>1384</a>
<a id='n1385' href='#n1385'>1385</a>
<a id='n1386' href='#n1386'>1386</a>
<a id='n1387' href='#n1387'>1387</a>
<a id='n1388' href='#n1388'>1388</a>
<a id='n1389' href='#n1389'>1389</a>
<a id='n1390' href='#n1390'>1390</a>
<a id='n1391' href='#n1391'>1391</a>
<a id='n1392' href='#n1392'>1392</a>
<a id='n1393' href='#n1393'>1393</a>
<a id='n1394' href='#n1394'>1394</a>
<a id='n1395' href='#n1395'>1395</a>
<a id='n1396' href='#n1396'>1396</a>
<a id='n1397' href='#n1397'>1397</a>
<a id='n1398' href='#n1398'>1398</a>
<a id='n1399' href='#n1399'>1399</a>
<a id='n1400' href='#n1400'>1400</a>
<a id='n1401' href='#n1401'>1401</a>
<a id='n1402' href='#n1402'>1402</a>
<a id='n1403' href='#n1403'>1403</a>
<a id='n1404' href='#n1404'>1404</a>
<a id='n1405' href='#n1405'>1405</a>
<a id='n1406' href='#n1406'>1406</a>
<a id='n1407' href='#n1407'>1407</a>
<a id='n1408' href='#n1408'>1408</a>
<a id='n1409' href='#n1409'>1409</a>
<a id='n1410' href='#n1410'>1410</a>
<a id='n1411' href='#n1411'>1411</a>
<a id='n1412' href='#n1412'>1412</a>
<a id='n1413' href='#n1413'>1413</a>
<a id='n1414' href='#n1414'>1414</a>
<a id='n1415' href='#n1415'>1415</a>
<a id='n1416' href='#n1416'>1416</a>
<a id='n1417' href='#n1417'>1417</a>
<a id='n1418' href='#n1418'>1418</a>
<a id='n1419' href='#n1419'>1419</a>
<a id='n1420' href='#n1420'>1420</a>
<a id='n1421' href='#n1421'>1421</a>
<a id='n1422' href='#n1422'>1422</a>
<a id='n1423' href='#n1423'>1423</a>
<a id='n1424' href='#n1424'>1424</a>
<a id='n1425' href='#n1425'>1425</a>
<a id='n1426' href='#n1426'>1426</a>
<a id='n1427' href='#n1427'>1427</a>
<a id='n1428' href='#n1428'>1428</a>
<a id='n1429' href='#n1429'>1429</a>
<a id='n1430' href='#n1430'>1430</a>
<a id='n1431' href='#n1431'>1431</a>
<a id='n1432' href='#n1432'>1432</a>
<a id='n1433' href='#n1433'>1433</a>
<a id='n1434' href='#n1434'>1434</a>
<a id='n1435' href='#n1435'>1435</a>
<a id='n1436' href='#n1436'>1436</a>
<a id='n1437' href='#n1437'>1437</a>
<a id='n1438' href='#n1438'>1438</a>
<a id='n1439' href='#n1439'>1439</a>
<a id='n1440' href='#n1440'>1440</a>
<a id='n1441' href='#n1441'>1441</a>
<a id='n1442' href='#n1442'>1442</a>
<a id='n1443' href='#n1443'>1443</a>
<a id='n1444' href='#n1444'>1444</a>
<a id='n1445' href='#n1445'>1445</a>
<a id='n1446' href='#n1446'>1446</a>
<a id='n1447' href='#n1447'>1447</a>
<a id='n1448' href='#n1448'>1448</a>
<a id='n1449' href='#n1449'>1449</a>
<a id='n1450' href='#n1450'>1450</a>
<a id='n1451' href='#n1451'>1451</a>
<a id='n1452' href='#n1452'>1452</a>
<a id='n1453' href='#n1453'>1453</a>
<a id='n1454' href='#n1454'>1454</a>
<a id='n1455' href='#n1455'>1455</a>
<a id='n1456' href='#n1456'>1456</a>
<a id='n1457' href='#n1457'>1457</a>
<a id='n1458' href='#n1458'>1458</a>
<a id='n1459' href='#n1459'>1459</a>
<a id='n1460' href='#n1460'>1460</a>
<a id='n1461' href='#n1461'>1461</a>
<a id='n1462' href='#n1462'>1462</a>
<a id='n1463' href='#n1463'>1463</a>
<a id='n1464' href='#n1464'>1464</a>
<a id='n1465' href='#n1465'>1465</a>
<a id='n1466' href='#n1466'>1466</a>
<a id='n1467' href='#n1467'>1467</a>
<a id='n1468' href='#n1468'>1468</a>
<a id='n1469' href='#n1469'>1469</a>
<a id='n1470' href='#n1470'>1470</a>
<a id='n1471' href='#n1471'>1471</a>
<a id='n1472' href='#n1472'>1472</a>
<a id='n1473' href='#n1473'>1473</a>
<a id='n1474' href='#n1474'>1474</a>
<a id='n1475' href='#n1475'>1475</a>
<a id='n1476' href='#n1476'>1476</a>
<a id='n1477' href='#n1477'>1477</a>
<a id='n1478' href='#n1478'>1478</a>
<a id='n1479' href='#n1479'>1479</a>
<a id='n1480' href='#n1480'>1480</a>
<a id='n1481' href='#n1481'>1481</a>
<a id='n1482' href='#n1482'>1482</a>
<a id='n1483' href='#n1483'>1483</a>
<a id='n1484' href='#n1484'>1484</a>
<a id='n1485' href='#n1485'>1485</a>
<a id='n1486' href='#n1486'>1486</a>
<a id='n1487' href='#n1487'>1487</a>
<a id='n1488' href='#n1488'>1488</a>
<a id='n1489' href='#n1489'>1489</a>
<a id='n1490' href='#n1490'>1490</a>
<a id='n1491' href='#n1491'>1491</a>
<a id='n1492' href='#n1492'>1492</a>
<a id='n1493' href='#n1493'>1493</a>
<a id='n1494' href='#n1494'>1494</a>
<a id='n1495' href='#n1495'>1495</a>
<a id='n1496' href='#n1496'>1496</a>
<a id='n1497' href='#n1497'>1497</a>
<a id='n1498' href='#n1498'>1498</a>
<a id='n1499' href='#n1499'>1499</a>
<a id='n1500' href='#n1500'>1500</a>
<a id='n1501' href='#n1501'>1501</a>
<a id='n1502' href='#n1502'>1502</a>
<a id='n1503' href='#n1503'>1503</a>
<a id='n1504' href='#n1504'>1504</a>
<a id='n1505' href='#n1505'>1505</a>
<a id='n1506' href='#n1506'>1506</a>
<a id='n1507' href='#n1507'>1507</a>
<a id='n1508' href='#n1508'>1508</a>
<a id='n1509' href='#n1509'>1509</a>
<a id='n1510' href='#n1510'>1510</a>
<a id='n1511' href='#n1511'>1511</a>
<a id='n1512' href='#n1512'>1512</a>
<a id='n1513' href='#n1513'>1513</a>
<a id='n1514' href='#n1514'>1514</a>
<a id='n1515' href='#n1515'>1515</a>
<a id='n1516' href='#n1516'>1516</a>
<a id='n1517' href='#n1517'>1517</a>
<a id='n1518' href='#n1518'>1518</a>
<a id='n1519' href='#n1519'>1519</a>
<a id='n1520' href='#n1520'>1520</a>
<a id='n1521' href='#n1521'>1521</a>
<a id='n1522' href='#n1522'>1522</a>
<a id='n1523' href='#n1523'>1523</a>
<a id='n1524' href='#n1524'>1524</a>
<a id='n1525' href='#n1525'>1525</a>
<a id='n1526' href='#n1526'>1526</a>
<a id='n1527' href='#n1527'>1527</a>
<a id='n1528' href='#n1528'>1528</a>
<a id='n1529' href='#n1529'>1529</a>
<a id='n1530' href='#n1530'>1530</a>
<a id='n1531' href='#n1531'>1531</a>
<a id='n1532' href='#n1532'>1532</a>
<a id='n1533' href='#n1533'>1533</a>
<a id='n1534' href='#n1534'>1534</a>
<a id='n1535' href='#n1535'>1535</a>
<a id='n1536' href='#n1536'>1536</a>
<a id='n1537' href='#n1537'>1537</a>
<a id='n1538' href='#n1538'>1538</a>
<a id='n1539' href='#n1539'>1539</a>
<a id='n1540' href='#n1540'>1540</a>
<a id='n1541' href='#n1541'>1541</a>
<a id='n1542' href='#n1542'>1542</a>
<a id='n1543' href='#n1543'>1543</a>
<a id='n1544' href='#n1544'>1544</a>
<a id='n1545' href='#n1545'>1545</a>
<a id='n1546' href='#n1546'>1546</a>
<a id='n1547' href='#n1547'>1547</a>
<a id='n1548' href='#n1548'>1548</a>
<a id='n1549' href='#n1549'>1549</a>
<a id='n1550' href='#n1550'>1550</a>
<a id='n1551' href='#n1551'>1551</a>
<a id='n1552' href='#n1552'>1552</a>
<a id='n1553' href='#n1553'>1553</a>
<a id='n1554' href='#n1554'>1554</a>
<a id='n1555' href='#n1555'>1555</a>
<a id='n1556' href='#n1556'>1556</a>
<a id='n1557' href='#n1557'>1557</a>
<a id='n1558' href='#n1558'>1558</a>
<a id='n1559' href='#n1559'>1559</a>
<a id='n1560' href='#n1560'>1560</a>
<a id='n1561' href='#n1561'>1561</a>
<a id='n1562' href='#n1562'>1562</a>
<a id='n1563' href='#n1563'>1563</a>
<a id='n1564' href='#n1564'>1564</a>
<a id='n1565' href='#n1565'>1565</a>
<a id='n1566' href='#n1566'>1566</a>
<a id='n1567' href='#n1567'>1567</a>
<a id='n1568' href='#n1568'>1568</a>
<a id='n1569' href='#n1569'>1569</a>
<a id='n1570' href='#n1570'>1570</a>
<a id='n1571' href='#n1571'>1571</a>
<a id='n1572' href='#n1572'>1572</a>
<a id='n1573' href='#n1573'>1573</a>
<a id='n1574' href='#n1574'>1574</a>
<a id='n1575' href='#n1575'>1575</a>
<a id='n1576' href='#n1576'>1576</a>
<a id='n1577' href='#n1577'>1577</a>
<a id='n1578' href='#n1578'>1578</a>
<a id='n1579' href='#n1579'>1579</a>
<a id='n1580' href='#n1580'>1580</a>
<a id='n1581' href='#n1581'>1581</a>
<a id='n1582' href='#n1582'>1582</a>
<a id='n1583' href='#n1583'>1583</a>
<a id='n1584' href='#n1584'>1584</a>
<a id='n1585' href='#n1585'>1585</a>
<a id='n1586' href='#n1586'>1586</a>
<a id='n1587' href='#n1587'>1587</a>
<a id='n1588' href='#n1588'>1588</a>
<a id='n1589' href='#n1589'>1589</a>
<a id='n1590' href='#n1590'>1590</a>
<a id='n1591' href='#n1591'>1591</a>
<a id='n1592' href='#n1592'>1592</a>
<a id='n1593' href='#n1593'>1593</a>
<a id='n1594' href='#n1594'>1594</a>
<a id='n1595' href='#n1595'>1595</a>
<a id='n1596' href='#n1596'>1596</a>
<a id='n1597' href='#n1597'>1597</a>
<a id='n1598' href='#n1598'>1598</a>
<a id='n1599' href='#n1599'>1599</a>
<a id='n1600' href='#n1600'>1600</a>
<a id='n1601' href='#n1601'>1601</a>
<a id='n1602' href='#n1602'>1602</a>
<a id='n1603' href='#n1603'>1603</a>
<a id='n1604' href='#n1604'>1604</a>
<a id='n1605' href='#n1605'>1605</a>
<a id='n1606' href='#n1606'>1606</a>
<a id='n1607' href='#n1607'>1607</a>
<a id='n1608' href='#n1608'>1608</a>
<a id='n1609' href='#n1609'>1609</a>
<a id='n1610' href='#n1610'>1610</a>
<a id='n1611' href='#n1611'>1611</a>
<a id='n1612' href='#n1612'>1612</a>
<a id='n1613' href='#n1613'>1613</a>
<a id='n1614' href='#n1614'>1614</a>
<a id='n1615' href='#n1615'>1615</a>
<a id='n1616' href='#n1616'>1616</a>
<a id='n1617' href='#n1617'>1617</a>
<a id='n1618' href='#n1618'>1618</a>
<a id='n1619' href='#n1619'>1619</a>
<a id='n1620' href='#n1620'>1620</a>
<a id='n1621' href='#n1621'>1621</a>
<a id='n1622' href='#n1622'>1622</a>
<a id='n1623' href='#n1623'>1623</a>
<a id='n1624' href='#n1624'>1624</a>
<a id='n1625' href='#n1625'>1625</a>
<a id='n1626' href='#n1626'>1626</a>
<a id='n1627' href='#n1627'>1627</a>
<a id='n1628' href='#n1628'>1628</a>
<a id='n1629' href='#n1629'>1629</a>
<a id='n1630' href='#n1630'>1630</a>
<a id='n1631' href='#n1631'>1631</a>
<a id='n1632' href='#n1632'>1632</a>
<a id='n1633' href='#n1633'>1633</a>
<a id='n1634' href='#n1634'>1634</a>
<a id='n1635' href='#n1635'>1635</a>
<a id='n1636' href='#n1636'>1636</a>
<a id='n1637' href='#n1637'>1637</a>
<a id='n1638' href='#n1638'>1638</a>
<a id='n1639' href='#n1639'>1639</a>
<a id='n1640' href='#n1640'>1640</a>
<a id='n1641' href='#n1641'>1641</a>
<a id='n1642' href='#n1642'>1642</a>
<a id='n1643' href='#n1643'>1643</a>
<a id='n1644' href='#n1644'>1644</a>
<a id='n1645' href='#n1645'>1645</a>
<a id='n1646' href='#n1646'>1646</a>
<a id='n1647' href='#n1647'>1647</a>
<a id='n1648' href='#n1648'>1648</a>
<a id='n1649' href='#n1649'>1649</a>
<a id='n1650' href='#n1650'>1650</a>
<a id='n1651' href='#n1651'>1651</a>
<a id='n1652' href='#n1652'>1652</a>
<a id='n1653' href='#n1653'>1653</a>
<a id='n1654' href='#n1654'>1654</a>
<a id='n1655' href='#n1655'>1655</a>
<a id='n1656' href='#n1656'>1656</a>
<a id='n1657' href='#n1657'>1657</a>
<a id='n1658' href='#n1658'>1658</a>
<a id='n1659' href='#n1659'>1659</a>
<a id='n1660' href='#n1660'>1660</a>
<a id='n1661' href='#n1661'>1661</a>
<a id='n1662' href='#n1662'>1662</a>
<a id='n1663' href='#n1663'>1663</a>
<a id='n1664' href='#n1664'>1664</a>
<a id='n1665' href='#n1665'>1665</a>
<a id='n1666' href='#n1666'>1666</a>
<a id='n1667' href='#n1667'>1667</a>
<a id='n1668' href='#n1668'>1668</a>
<a id='n1669' href='#n1669'>1669</a>
<a id='n1670' href='#n1670'>1670</a>
<a id='n1671' href='#n1671'>1671</a>
<a id='n1672' href='#n1672'>1672</a>
<a id='n1673' href='#n1673'>1673</a>
<a id='n1674' href='#n1674'>1674</a>
<a id='n1675' href='#n1675'>1675</a>
<a id='n1676' href='#n1676'>1676</a>
<a id='n1677' href='#n1677'>1677</a>
<a id='n1678' href='#n1678'>1678</a>
<a id='n1679' href='#n1679'>1679</a>
<a id='n1680' href='#n1680'>1680</a>
<a id='n1681' href='#n1681'>1681</a>
<a id='n1682' href='#n1682'>1682</a>
<a id='n1683' href='#n1683'>1683</a>
<a id='n1684' href='#n1684'>1684</a>
<a id='n1685' href='#n1685'>1685</a>
<a id='n1686' href='#n1686'>1686</a>
<a id='n1687' href='#n1687'>1687</a>
<a id='n1688' href='#n1688'>1688</a>
<a id='n1689' href='#n1689'>1689</a>
<a id='n1690' href='#n1690'>1690</a>
<a id='n1691' href='#n1691'>1691</a>
<a id='n1692' href='#n1692'>1692</a>
<a id='n1693' href='#n1693'>1693</a>
<a id='n1694' href='#n1694'>1694</a>
<a id='n1695' href='#n1695'>1695</a>
<a id='n1696' href='#n1696'>1696</a>
<a id='n1697' href='#n1697'>1697</a>
<a id='n1698' href='#n1698'>1698</a>
<a id='n1699' href='#n1699'>1699</a>
<a id='n1700' href='#n1700'>1700</a>
<a id='n1701' href='#n1701'>1701</a>
<a id='n1702' href='#n1702'>1702</a>
<a id='n1703' href='#n1703'>1703</a>
<a id='n1704' href='#n1704'>1704</a>
<a id='n1705' href='#n1705'>1705</a>
<a id='n1706' href='#n1706'>1706</a>
<a id='n1707' href='#n1707'>1707</a>
<a id='n1708' href='#n1708'>1708</a>
<a id='n1709' href='#n1709'>1709</a>
<a id='n1710' href='#n1710'>1710</a>
<a id='n1711' href='#n1711'>1711</a>
<a id='n1712' href='#n1712'>1712</a>
<a id='n1713' href='#n1713'>1713</a>
<a id='n1714' href='#n1714'>1714</a>
<a id='n1715' href='#n1715'>1715</a>
<a id='n1716' href='#n1716'>1716</a>
<a id='n1717' href='#n1717'>1717</a>
<a id='n1718' href='#n1718'>1718</a>
<a id='n1719' href='#n1719'>1719</a>
<a id='n1720' href='#n1720'>1720</a>
<a id='n1721' href='#n1721'>1721</a>
<a id='n1722' href='#n1722'>1722</a>
<a id='n1723' href='#n1723'>1723</a>
<a id='n1724' href='#n1724'>1724</a>
<a id='n1725' href='#n1725'>1725</a>
<a id='n1726' href='#n1726'>1726</a>
<a id='n1727' href='#n1727'>1727</a>
<a id='n1728' href='#n1728'>1728</a>
<a id='n1729' href='#n1729'>1729</a>
<a id='n1730' href='#n1730'>1730</a>
<a id='n1731' href='#n1731'>1731</a>
<a id='n1732' href='#n1732'>1732</a>
<a id='n1733' href='#n1733'>1733</a>
<a id='n1734' href='#n1734'>1734</a>
<a id='n1735' href='#n1735'>1735</a>
<a id='n1736' href='#n1736'>1736</a>
<a id='n1737' href='#n1737'>1737</a>
<a id='n1738' href='#n1738'>1738</a>
<a id='n1739' href='#n1739'>1739</a>
<a id='n1740' href='#n1740'>1740</a>
<a id='n1741' href='#n1741'>1741</a>
<a id='n1742' href='#n1742'>1742</a>
<a id='n1743' href='#n1743'>1743</a>
<a id='n1744' href='#n1744'>1744</a>
<a id='n1745' href='#n1745'>1745</a>
<a id='n1746' href='#n1746'>1746</a>
<a id='n1747' href='#n1747'>1747</a>
<a id='n1748' href='#n1748'>1748</a>
<a id='n1749' href='#n1749'>1749</a>
<a id='n1750' href='#n1750'>1750</a>
<a id='n1751' href='#n1751'>1751</a>
<a id='n1752' href='#n1752'>1752</a>
<a id='n1753' href='#n1753'>1753</a>
<a id='n1754' href='#n1754'>1754</a>
<a id='n1755' href='#n1755'>1755</a>
<a id='n1756' href='#n1756'>1756</a>
<a id='n1757' href='#n1757'>1757</a>
<a id='n1758' href='#n1758'>1758</a>
<a id='n1759' href='#n1759'>1759</a>
<a id='n1760' href='#n1760'>1760</a>
<a id='n1761' href='#n1761'>1761</a>
<a id='n1762' href='#n1762'>1762</a>
<a id='n1763' href='#n1763'>1763</a>
<a id='n1764' href='#n1764'>1764</a>
<a id='n1765' href='#n1765'>1765</a>
<a id='n1766' href='#n1766'>1766</a>
<a id='n1767' href='#n1767'>1767</a>
<a id='n1768' href='#n1768'>1768</a>
<a id='n1769' href='#n1769'>1769</a>
<a id='n1770' href='#n1770'>1770</a>
<a id='n1771' href='#n1771'>1771</a>
<a id='n1772' href='#n1772'>1772</a>
<a id='n1773' href='#n1773'>1773</a>
<a id='n1774' href='#n1774'>1774</a>
<a id='n1775' href='#n1775'>1775</a>
<a id='n1776' href='#n1776'>1776</a>
<a id='n1777' href='#n1777'>1777</a>
<a id='n1778' href='#n1778'>1778</a>
<a id='n1779' href='#n1779'>1779</a>
<a id='n1780' href='#n1780'>1780</a>
<a id='n1781' href='#n1781'>1781</a>
<a id='n1782' href='#n1782'>1782</a>
<a id='n1783' href='#n1783'>1783</a>
<a id='n1784' href='#n1784'>1784</a>
<a id='n1785' href='#n1785'>1785</a>
<a id='n1786' href='#n1786'>1786</a>
<a id='n1787' href='#n1787'>1787</a>
<a id='n1788' href='#n1788'>1788</a>
<a id='n1789' href='#n1789'>1789</a>
<a id='n1790' href='#n1790'>1790</a>
<a id='n1791' href='#n1791'>1791</a>
<a id='n1792' href='#n1792'>1792</a>
<a id='n1793' href='#n1793'>1793</a>
<a id='n1794' href='#n1794'>1794</a>
<a id='n1795' href='#n1795'>1795</a>
<a id='n1796' href='#n1796'>1796</a>
<a id='n1797' href='#n1797'>1797</a>
<a id='n1798' href='#n1798'>1798</a>
<a id='n1799' href='#n1799'>1799</a>
<a id='n1800' href='#n1800'>1800</a>
<a id='n1801' href='#n1801'>1801</a>
<a id='n1802' href='#n1802'>1802</a>
<a id='n1803' href='#n1803'>1803</a>
<a id='n1804' href='#n1804'>1804</a>
<a id='n1805' href='#n1805'>1805</a>
<a id='n1806' href='#n1806'>1806</a>
<a id='n1807' href='#n1807'>1807</a>
<a id='n1808' href='#n1808'>1808</a>
<a id='n1809' href='#n1809'>1809</a>
<a id='n1810' href='#n1810'>1810</a>
<a id='n1811' href='#n1811'>1811</a>
<a id='n1812' href='#n1812'>1812</a>
<a id='n1813' href='#n1813'>1813</a>
<a id='n1814' href='#n1814'>1814</a>
<a id='n1815' href='#n1815'>1815</a>
<a id='n1816' href='#n1816'>1816</a>
<a id='n1817' href='#n1817'>1817</a>
<a id='n1818' href='#n1818'>1818</a>
<a id='n1819' href='#n1819'>1819</a>
<a id='n1820' href='#n1820'>1820</a>
<a id='n1821' href='#n1821'>1821</a>
<a id='n1822' href='#n1822'>1822</a>
<a id='n1823' href='#n1823'>1823</a>
<a id='n1824' href='#n1824'>1824</a>
<a id='n1825' href='#n1825'>1825</a>
<a id='n1826' href='#n1826'>1826</a>
<a id='n1827' href='#n1827'>1827</a>
<a id='n1828' href='#n1828'>1828</a>
<a id='n1829' href='#n1829'>1829</a>
<a id='n1830' href='#n1830'>1830</a>
<a id='n1831' href='#n1831'>1831</a>
<a id='n1832' href='#n1832'>1832</a>
<a id='n1833' href='#n1833'>1833</a>
<a id='n1834' href='#n1834'>1834</a>
<a id='n1835' href='#n1835'>1835</a>
<a id='n1836' href='#n1836'>1836</a>
<a id='n1837' href='#n1837'>1837</a>
<a id='n1838' href='#n1838'>1838</a>
<a id='n1839' href='#n1839'>1839</a>
<a id='n1840' href='#n1840'>1840</a>
<a id='n1841' href='#n1841'>1841</a>
<a id='n1842' href='#n1842'>1842</a>
<a id='n1843' href='#n1843'>1843</a>
<a id='n1844' href='#n1844'>1844</a>
<a id='n1845' href='#n1845'>1845</a>
<a id='n1846' href='#n1846'>1846</a>
<a id='n1847' href='#n1847'>1847</a>
<a id='n1848' href='#n1848'>1848</a>
<a id='n1849' href='#n1849'>1849</a>
<a id='n1850' href='#n1850'>1850</a>
<a id='n1851' href='#n1851'>1851</a>
<a id='n1852' href='#n1852'>1852</a>
<a id='n1853' href='#n1853'>1853</a>
<a id='n1854' href='#n1854'>1854</a>
<a id='n1855' href='#n1855'>1855</a>
<a id='n1856' href='#n1856'>1856</a>
<a id='n1857' href='#n1857'>1857</a>
<a id='n1858' href='#n1858'>1858</a>
<a id='n1859' href='#n1859'>1859</a>
<a id='n1860' href='#n1860'>1860</a>
<a id='n1861' href='#n1861'>1861</a>
<a id='n1862' href='#n1862'>1862</a>
<a id='n1863' href='#n1863'>1863</a>
<a id='n1864' href='#n1864'>1864</a>
<a id='n1865' href='#n1865'>1865</a>
<a id='n1866' href='#n1866'>1866</a>
<a id='n1867' href='#n1867'>1867</a>
<a id='n1868' href='#n1868'>1868</a>
<a id='n1869' href='#n1869'>1869</a>
<a id='n1870' href='#n1870'>1870</a>
<a id='n1871' href='#n1871'>1871</a>
<a id='n1872' href='#n1872'>1872</a>
<a id='n1873' href='#n1873'>1873</a>
<a id='n1874' href='#n1874'>1874</a>
<a id='n1875' href='#n1875'>1875</a>
<a id='n1876' href='#n1876'>1876</a>
<a id='n1877' href='#n1877'>1877</a>
<a id='n1878' href='#n1878'>1878</a>
<a id='n1879' href='#n1879'>1879</a>
<a id='n1880' href='#n1880'>1880</a>
<a id='n1881' href='#n1881'>1881</a>
<a id='n1882' href='#n1882'>1882</a>
<a id='n1883' href='#n1883'>1883</a>
<a id='n1884' href='#n1884'>1884</a>
<a id='n1885' href='#n1885'>1885</a>
<a id='n1886' href='#n1886'>1886</a>
<a id='n1887' href='#n1887'>1887</a>
<a id='n1888' href='#n1888'>1888</a>
<a id='n1889' href='#n1889'>1889</a>
<a id='n1890' href='#n1890'>1890</a>
<a id='n1891' href='#n1891'>1891</a>
<a id='n1892' href='#n1892'>1892</a>
<a id='n1893' href='#n1893'>1893</a>
<a id='n1894' href='#n1894'>1894</a>
<a id='n1895' href='#n1895'>1895</a>
<a id='n1896' href='#n1896'>1896</a>
<a id='n1897' href='#n1897'>1897</a>
<a id='n1898' href='#n1898'>1898</a>
<a id='n1899' href='#n1899'>1899</a>
<a id='n1900' href='#n1900'>1900</a>
<a id='n1901' href='#n1901'>1901</a>
<a id='n1902' href='#n1902'>1902</a>
<a id='n1903' href='#n1903'>1903</a>
<a id='n1904' href='#n1904'>1904</a>
<a id='n1905' href='#n1905'>1905</a>
<a id='n1906' href='#n1906'>1906</a>
<a id='n1907' href='#n1907'>1907</a>
<a id='n1908' href='#n1908'>1908</a>
<a id='n1909' href='#n1909'>1909</a>
<a id='n1910' href='#n1910'>1910</a>
<a id='n1911' href='#n1911'>1911</a>
<a id='n1912' href='#n1912'>1912</a>
<a id='n1913' href='#n1913'>1913</a>
<a id='n1914' href='#n1914'>1914</a>
<a id='n1915' href='#n1915'>1915</a>
<a id='n1916' href='#n1916'>1916</a>
<a id='n1917' href='#n1917'>1917</a>
<a id='n1918' href='#n1918'>1918</a>
<a id='n1919' href='#n1919'>1919</a>
<a id='n1920' href='#n1920'>1920</a>
<a id='n1921' href='#n1921'>1921</a>
<a id='n1922' href='#n1922'>1922</a>
<a id='n1923' href='#n1923'>1923</a>
<a id='n1924' href='#n1924'>1924</a>
<a id='n1925' href='#n1925'>1925</a>
<a id='n1926' href='#n1926'>1926</a>
<a id='n1927' href='#n1927'>1927</a>
<a id='n1928' href='#n1928'>1928</a>
<a id='n1929' href='#n1929'>1929</a>
<a id='n1930' href='#n1930'>1930</a>
<a id='n1931' href='#n1931'>1931</a>
<a id='n1932' href='#n1932'>1932</a>
<a id='n1933' href='#n1933'>1933</a>
<a id='n1934' href='#n1934'>1934</a>
<a id='n1935' href='#n1935'>1935</a>
<a id='n1936' href='#n1936'>1936</a>
<a id='n1937' href='#n1937'>1937</a>
<a id='n1938' href='#n1938'>1938</a>
<a id='n1939' href='#n1939'>1939</a>
<a id='n1940' href='#n1940'>1940</a>
<a id='n1941' href='#n1941'>1941</a>
<a id='n1942' href='#n1942'>1942</a>
<a id='n1943' href='#n1943'>1943</a>
<a id='n1944' href='#n1944'>1944</a>
<a id='n1945' href='#n1945'>1945</a>
<a id='n1946' href='#n1946'>1946</a>
<a id='n1947' href='#n1947'>1947</a>
<a id='n1948' href='#n1948'>1948</a>
<a id='n1949' href='#n1949'>1949</a>
<a id='n1950' href='#n1950'>1950</a>
<a id='n1951' href='#n1951'>1951</a>
<a id='n1952' href='#n1952'>1952</a>
<a id='n1953' href='#n1953'>1953</a>
<a id='n1954' href='#n1954'>1954</a>
<a id='n1955' href='#n1955'>1955</a>
<a id='n1956' href='#n1956'>1956</a>
<a id='n1957' href='#n1957'>1957</a>
<a id='n1958' href='#n1958'>1958</a>
<a id='n1959' href='#n1959'>1959</a>
<a id='n1960' href='#n1960'>1960</a>
<a id='n1961' href='#n1961'>1961</a>
<a id='n1962' href='#n1962'>1962</a>
<a id='n1963' href='#n1963'>1963</a>
<a id='n1964' href='#n1964'>1964</a>
<a id='n1965' href='#n1965'>1965</a>
<a id='n1966' href='#n1966'>1966</a>
<a id='n1967' href='#n1967'>1967</a>
<a id='n1968' href='#n1968'>1968</a>
<a id='n1969' href='#n1969'>1969</a>
<a id='n1970' href='#n1970'>1970</a>
<a id='n1971' href='#n1971'>1971</a>
<a id='n1972' href='#n1972'>1972</a>
<a id='n1973' href='#n1973'>1973</a>
<a id='n1974' href='#n1974'>1974</a>
<a id='n1975' href='#n1975'>1975</a>
<a id='n1976' href='#n1976'>1976</a>
<a id='n1977' href='#n1977'>1977</a>
<a id='n1978' href='#n1978'>1978</a>
<a id='n1979' href='#n1979'>1979</a>
<a id='n1980' href='#n1980'>1980</a>
<a id='n1981' href='#n1981'>1981</a>
<a id='n1982' href='#n1982'>1982</a>
<a id='n1983' href='#n1983'>1983</a>
<a id='n1984' href='#n1984'>1984</a>
<a id='n1985' href='#n1985'>1985</a>
<a id='n1986' href='#n1986'>1986</a>
<a id='n1987' href='#n1987'>1987</a>
<a id='n1988' href='#n1988'>1988</a>
<a id='n1989' href='#n1989'>1989</a>
<a id='n1990' href='#n1990'>1990</a>
<a id='n1991' href='#n1991'>1991</a>
<a id='n1992' href='#n1992'>1992</a>
<a id='n1993' href='#n1993'>1993</a>
<a id='n1994' href='#n1994'>1994</a>
<a id='n1995' href='#n1995'>1995</a>
<a id='n1996' href='#n1996'>1996</a>
<a id='n1997' href='#n1997'>1997</a>
<a id='n1998' href='#n1998'>1998</a>
<a id='n1999' href='#n1999'>1999</a>
<a id='n2000' href='#n2000'>2000</a>
<a id='n2001' href='#n2001'>2001</a>
<a id='n2002' href='#n2002'>2002</a>
<a id='n2003' href='#n2003'>2003</a>
<a id='n2004' href='#n2004'>2004</a>
<a id='n2005' href='#n2005'>2005</a>
<a id='n2006' href='#n2006'>2006</a>
<a id='n2007' href='#n2007'>2007</a>
<a id='n2008' href='#n2008'>2008</a>
<a id='n2009' href='#n2009'>2009</a>
<a id='n2010' href='#n2010'>2010</a>
<a id='n2011' href='#n2011'>2011</a>
<a id='n2012' href='#n2012'>2012</a>
<a id='n2013' href='#n2013'>2013</a>
<a id='n2014' href='#n2014'>2014</a>
<a id='n2015' href='#n2015'>2015</a>
<a id='n2016' href='#n2016'>2016</a>
<a id='n2017' href='#n2017'>2017</a>
<a id='n2018' href='#n2018'>2018</a>
<a id='n2019' href='#n2019'>2019</a>
<a id='n2020' href='#n2020'>2020</a>
<a id='n2021' href='#n2021'>2021</a>
<a id='n2022' href='#n2022'>2022</a>
<a id='n2023' href='#n2023'>2023</a>
<a id='n2024' href='#n2024'>2024</a>
<a id='n2025' href='#n2025'>2025</a>
<a id='n2026' href='#n2026'>2026</a>
<a id='n2027' href='#n2027'>2027</a>
<a id='n2028' href='#n2028'>2028</a>
<a id='n2029' href='#n2029'>2029</a>
<a id='n2030' href='#n2030'>2030</a>
<a id='n2031' href='#n2031'>2031</a>
<a id='n2032' href='#n2032'>2032</a>
<a id='n2033' href='#n2033'>2033</a>
<a id='n2034' href='#n2034'>2034</a>
<a id='n2035' href='#n2035'>2035</a>
<a id='n2036' href='#n2036'>2036</a>
<a id='n2037' href='#n2037'>2037</a>
<a id='n2038' href='#n2038'>2038</a>
<a id='n2039' href='#n2039'>2039</a>
<a id='n2040' href='#n2040'>2040</a>
<a id='n2041' href='#n2041'>2041</a>
<a id='n2042' href='#n2042'>2042</a>
<a id='n2043' href='#n2043'>2043</a>
<a id='n2044' href='#n2044'>2044</a>
<a id='n2045' href='#n2045'>2045</a>
<a id='n2046' href='#n2046'>2046</a>
<a id='n2047' href='#n2047'>2047</a>
<a id='n2048' href='#n2048'>2048</a>
<a id='n2049' href='#n2049'>2049</a>
<a id='n2050' href='#n2050'>2050</a>
<a id='n2051' href='#n2051'>2051</a>
<a id='n2052' href='#n2052'>2052</a>
<a id='n2053' href='#n2053'>2053</a>
<a id='n2054' href='#n2054'>2054</a>
<a id='n2055' href='#n2055'>2055</a>
<a id='n2056' href='#n2056'>2056</a>
<a id='n2057' href='#n2057'>2057</a>
<a id='n2058' href='#n2058'>2058</a>
<a id='n2059' href='#n2059'>2059</a>
<a id='n2060' href='#n2060'>2060</a>
<a id='n2061' href='#n2061'>2061</a>
<a id='n2062' href='#n2062'>2062</a>
<a id='n2063' href='#n2063'>2063</a>
<a id='n2064' href='#n2064'>2064</a>
<a id='n2065' href='#n2065'>2065</a>
<a id='n2066' href='#n2066'>2066</a>
<a id='n2067' href='#n2067'>2067</a>
<a id='n2068' href='#n2068'>2068</a>
<a id='n2069' href='#n2069'>2069</a>
<a id='n2070' href='#n2070'>2070</a>
<a id='n2071' href='#n2071'>2071</a>
<a id='n2072' href='#n2072'>2072</a>
<a id='n2073' href='#n2073'>2073</a>
<a id='n2074' href='#n2074'>2074</a>
<a id='n2075' href='#n2075'>2075</a>
<a id='n2076' href='#n2076'>2076</a>
<a id='n2077' href='#n2077'>2077</a>
<a id='n2078' href='#n2078'>2078</a>
<a id='n2079' href='#n2079'>2079</a>
<a id='n2080' href='#n2080'>2080</a>
<a id='n2081' href='#n2081'>2081</a>
<a id='n2082' href='#n2082'>2082</a>
<a id='n2083' href='#n2083'>2083</a>
<a id='n2084' href='#n2084'>2084</a>
<a id='n2085' href='#n2085'>2085</a>
<a id='n2086' href='#n2086'>2086</a>
<a id='n2087' href='#n2087'>2087</a>
<a id='n2088' href='#n2088'>2088</a>
<a id='n2089' href='#n2089'>2089</a>
<a id='n2090' href='#n2090'>2090</a>
<a id='n2091' href='#n2091'>2091</a>
<a id='n2092' href='#n2092'>2092</a>
<a id='n2093' href='#n2093'>2093</a>
<a id='n2094' href='#n2094'>2094</a>
<a id='n2095' href='#n2095'>2095</a>
<a id='n2096' href='#n2096'>2096</a>
<a id='n2097' href='#n2097'>2097</a>
<a id='n2098' href='#n2098'>2098</a>
<a id='n2099' href='#n2099'>2099</a>
<a id='n2100' href='#n2100'>2100</a>
<a id='n2101' href='#n2101'>2101</a>
<a id='n2102' href='#n2102'>2102</a>
<a id='n2103' href='#n2103'>2103</a>
<a id='n2104' href='#n2104'>2104</a>
<a id='n2105' href='#n2105'>2105</a>
<a id='n2106' href='#n2106'>2106</a>
<a id='n2107' href='#n2107'>2107</a>
<a id='n2108' href='#n2108'>2108</a>
<a id='n2109' href='#n2109'>2109</a>
<a id='n2110' href='#n2110'>2110</a>
<a id='n2111' href='#n2111'>2111</a>
<a id='n2112' href='#n2112'>2112</a>
<a id='n2113' href='#n2113'>2113</a>
<a id='n2114' href='#n2114'>2114</a>
<a id='n2115' href='#n2115'>2115</a>
<a id='n2116' href='#n2116'>2116</a>
<a id='n2117' href='#n2117'>2117</a>
<a id='n2118' href='#n2118'>2118</a>
<a id='n2119' href='#n2119'>2119</a>
<a id='n2120' href='#n2120'>2120</a>
<a id='n2121' href='#n2121'>2121</a>
<a id='n2122' href='#n2122'>2122</a>
<a id='n2123' href='#n2123'>2123</a>
<a id='n2124' href='#n2124'>2124</a>
<a id='n2125' href='#n2125'>2125</a>
<a id='n2126' href='#n2126'>2126</a>
<a id='n2127' href='#n2127'>2127</a>
<a id='n2128' href='#n2128'>2128</a>
<a id='n2129' href='#n2129'>2129</a>
<a id='n2130' href='#n2130'>2130</a>
<a id='n2131' href='#n2131'>2131</a>
<a id='n2132' href='#n2132'>2132</a>
<a id='n2133' href='#n2133'>2133</a>
<a id='n2134' href='#n2134'>2134</a>
<a id='n2135' href='#n2135'>2135</a>
<a id='n2136' href='#n2136'>2136</a>
<a id='n2137' href='#n2137'>2137</a>
<a id='n2138' href='#n2138'>2138</a>
<a id='n2139' href='#n2139'>2139</a>
<a id='n2140' href='#n2140'>2140</a>
<a id='n2141' href='#n2141'>2141</a>
<a id='n2142' href='#n2142'>2142</a>
<a id='n2143' href='#n2143'>2143</a>
<a id='n2144' href='#n2144'>2144</a>
<a id='n2145' href='#n2145'>2145</a>
<a id='n2146' href='#n2146'>2146</a>
<a id='n2147' href='#n2147'>2147</a>
<a id='n2148' href='#n2148'>2148</a>
<a id='n2149' href='#n2149'>2149</a>
<a id='n2150' href='#n2150'>2150</a>
<a id='n2151' href='#n2151'>2151</a>
<a id='n2152' href='#n2152'>2152</a>
<a id='n2153' href='#n2153'>2153</a>
<a id='n2154' href='#n2154'>2154</a>
<a id='n2155' href='#n2155'>2155</a>
<a id='n2156' href='#n2156'>2156</a>
<a id='n2157' href='#n2157'>2157</a>
<a id='n2158' href='#n2158'>2158</a>
<a id='n2159' href='#n2159'>2159</a>
<a id='n2160' href='#n2160'>2160</a>
<a id='n2161' href='#n2161'>2161</a>
<a id='n2162' href='#n2162'>2162</a>
<a id='n2163' href='#n2163'>2163</a>
<a id='n2164' href='#n2164'>2164</a>
<a id='n2165' href='#n2165'>2165</a>
<a id='n2166' href='#n2166'>2166</a>
<a id='n2167' href='#n2167'>2167</a>
<a id='n2168' href='#n2168'>2168</a>
<a id='n2169' href='#n2169'>2169</a>
<a id='n2170' href='#n2170'>2170</a>
<a id='n2171' href='#n2171'>2171</a>
<a id='n2172' href='#n2172'>2172</a>
<a id='n2173' href='#n2173'>2173</a>
<a id='n2174' href='#n2174'>2174</a>
<a id='n2175' href='#n2175'>2175</a>
<a id='n2176' href='#n2176'>2176</a>
<a id='n2177' href='#n2177'>2177</a>
<a id='n2178' href='#n2178'>2178</a>
<a id='n2179' href='#n2179'>2179</a>
<a id='n2180' href='#n2180'>2180</a>
<a id='n2181' href='#n2181'>2181</a>
<a id='n2182' href='#n2182'>2182</a>
<a id='n2183' href='#n2183'>2183</a>
<a id='n2184' href='#n2184'>2184</a>
<a id='n2185' href='#n2185'>2185</a>
<a id='n2186' href='#n2186'>2186</a>
<a id='n2187' href='#n2187'>2187</a>
<a id='n2188' href='#n2188'>2188</a>
<a id='n2189' href='#n2189'>2189</a>
<a id='n2190' href='#n2190'>2190</a>
<a id='n2191' href='#n2191'>2191</a>
<a id='n2192' href='#n2192'>2192</a>
<a id='n2193' href='#n2193'>2193</a>
<a id='n2194' href='#n2194'>2194</a>
<a id='n2195' href='#n2195'>2195</a>
<a id='n2196' href='#n2196'>2196</a>
<a id='n2197' href='#n2197'>2197</a>
<a id='n2198' href='#n2198'>2198</a>
<a id='n2199' href='#n2199'>2199</a>
<a id='n2200' href='#n2200'>2200</a>
<a id='n2201' href='#n2201'>2201</a>
<a id='n2202' href='#n2202'>2202</a>
<a id='n2203' href='#n2203'>2203</a>
<a id='n2204' href='#n2204'>2204</a>
<a id='n2205' href='#n2205'>2205</a>
<a id='n2206' href='#n2206'>2206</a>
<a id='n2207' href='#n2207'>2207</a>
<a id='n2208' href='#n2208'>2208</a>
<a id='n2209' href='#n2209'>2209</a>
<a id='n2210' href='#n2210'>2210</a>
<a id='n2211' href='#n2211'>2211</a>
<a id='n2212' href='#n2212'>2212</a>
<a id='n2213' href='#n2213'>2213</a>
<a id='n2214' href='#n2214'>2214</a>
<a id='n2215' href='#n2215'>2215</a>
<a id='n2216' href='#n2216'>2216</a>
<a id='n2217' href='#n2217'>2217</a>
<a id='n2218' href='#n2218'>2218</a>
<a id='n2219' href='#n2219'>2219</a>
<a id='n2220' href='#n2220'>2220</a>
<a id='n2221' href='#n2221'>2221</a>
<a id='n2222' href='#n2222'>2222</a>
<a id='n2223' href='#n2223'>2223</a>
<a id='n2224' href='#n2224'>2224</a>
<a id='n2225' href='#n2225'>2225</a>
<a id='n2226' href='#n2226'>2226</a>
<a id='n2227' href='#n2227'>2227</a>
<a id='n2228' href='#n2228'>2228</a>
<a id='n2229' href='#n2229'>2229</a>
<a id='n2230' href='#n2230'>2230</a>
<a id='n2231' href='#n2231'>2231</a>
<a id='n2232' href='#n2232'>2232</a>
<a id='n2233' href='#n2233'>2233</a>
<a id='n2234' href='#n2234'>2234</a>
<a id='n2235' href='#n2235'>2235</a>
<a id='n2236' href='#n2236'>2236</a>
<a id='n2237' href='#n2237'>2237</a>
<a id='n2238' href='#n2238'>2238</a>
<a id='n2239' href='#n2239'>2239</a>
<a id='n2240' href='#n2240'>2240</a>
<a id='n2241' href='#n2241'>2241</a>
<a id='n2242' href='#n2242'>2242</a>
<a id='n2243' href='#n2243'>2243</a>
<a id='n2244' href='#n2244'>2244</a>
<a id='n2245' href='#n2245'>2245</a>
<a id='n2246' href='#n2246'>2246</a>
<a id='n2247' href='#n2247'>2247</a>
<a id='n2248' href='#n2248'>2248</a>
<a id='n2249' href='#n2249'>2249</a>
<a id='n2250' href='#n2250'>2250</a>
<a id='n2251' href='#n2251'>2251</a>
<a id='n2252' href='#n2252'>2252</a>
<a id='n2253' href='#n2253'>2253</a>
<a id='n2254' href='#n2254'>2254</a>
<a id='n2255' href='#n2255'>2255</a>
<a id='n2256' href='#n2256'>2256</a>
<a id='n2257' href='#n2257'>2257</a>
<a id='n2258' href='#n2258'>2258</a>
<a id='n2259' href='#n2259'>2259</a>
<a id='n2260' href='#n2260'>2260</a>
<a id='n2261' href='#n2261'>2261</a>
<a id='n2262' href='#n2262'>2262</a>
<a id='n2263' href='#n2263'>2263</a>
<a id='n2264' href='#n2264'>2264</a>
<a id='n2265' href='#n2265'>2265</a>
<a id='n2266' href='#n2266'>2266</a>
<a id='n2267' href='#n2267'>2267</a>
<a id='n2268' href='#n2268'>2268</a>
<a id='n2269' href='#n2269'>2269</a>
<a id='n2270' href='#n2270'>2270</a>
<a id='n2271' href='#n2271'>2271</a>
<a id='n2272' href='#n2272'>2272</a>
<a id='n2273' href='#n2273'>2273</a>
<a id='n2274' href='#n2274'>2274</a>
<a id='n2275' href='#n2275'>2275</a>
<a id='n2276' href='#n2276'>2276</a>
<a id='n2277' href='#n2277'>2277</a>
<a id='n2278' href='#n2278'>2278</a>
<a id='n2279' href='#n2279'>2279</a>
<a id='n2280' href='#n2280'>2280</a>
<a id='n2281' href='#n2281'>2281</a>
<a id='n2282' href='#n2282'>2282</a>
<a id='n2283' href='#n2283'>2283</a>
<a id='n2284' href='#n2284'>2284</a>
<a id='n2285' href='#n2285'>2285</a>
<a id='n2286' href='#n2286'>2286</a>
<a id='n2287' href='#n2287'>2287</a>
<a id='n2288' href='#n2288'>2288</a>
<a id='n2289' href='#n2289'>2289</a>
<a id='n2290' href='#n2290'>2290</a>
<a id='n2291' href='#n2291'>2291</a>
<a id='n2292' href='#n2292'>2292</a>
<a id='n2293' href='#n2293'>2293</a>
<a id='n2294' href='#n2294'>2294</a>
<a id='n2295' href='#n2295'>2295</a>
<a id='n2296' href='#n2296'>2296</a>
<a id='n2297' href='#n2297'>2297</a>
<a id='n2298' href='#n2298'>2298</a>
<a id='n2299' href='#n2299'>2299</a>
<a id='n2300' href='#n2300'>2300</a>
<a id='n2301' href='#n2301'>2301</a>
<a id='n2302' href='#n2302'>2302</a>
<a id='n2303' href='#n2303'>2303</a>
<a id='n2304' href='#n2304'>2304</a>
<a id='n2305' href='#n2305'>2305</a>
<a id='n2306' href='#n2306'>2306</a>
<a id='n2307' href='#n2307'>2307</a>
<a id='n2308' href='#n2308'>2308</a>
<a id='n2309' href='#n2309'>2309</a>
<a id='n2310' href='#n2310'>2310</a>
<a id='n2311' href='#n2311'>2311</a>
<a id='n2312' href='#n2312'>2312</a>
<a id='n2313' href='#n2313'>2313</a>
<a id='n2314' href='#n2314'>2314</a>
<a id='n2315' href='#n2315'>2315</a>
<a id='n2316' href='#n2316'>2316</a>
<a id='n2317' href='#n2317'>2317</a>
<a id='n2318' href='#n2318'>2318</a>
<a id='n2319' href='#n2319'>2319</a>
<a id='n2320' href='#n2320'>2320</a>
<a id='n2321' href='#n2321'>2321</a>
<a id='n2322' href='#n2322'>2322</a>
<a id='n2323' href='#n2323'>2323</a>
<a id='n2324' href='#n2324'>2324</a>
<a id='n2325' href='#n2325'>2325</a>
<a id='n2326' href='#n2326'>2326</a>
<a id='n2327' href='#n2327'>2327</a>
<a id='n2328' href='#n2328'>2328</a>
<a id='n2329' href='#n2329'>2329</a>
<a id='n2330' href='#n2330'>2330</a>
<a id='n2331' href='#n2331'>2331</a>
<a id='n2332' href='#n2332'>2332</a>
<a id='n2333' href='#n2333'>2333</a>
<a id='n2334' href='#n2334'>2334</a>
<a id='n2335' href='#n2335'>2335</a>
<a id='n2336' href='#n2336'>2336</a>
<a id='n2337' href='#n2337'>2337</a>
<a id='n2338' href='#n2338'>2338</a>
<a id='n2339' href='#n2339'>2339</a>
<a id='n2340' href='#n2340'>2340</a>
<a id='n2341' href='#n2341'>2341</a>
<a id='n2342' href='#n2342'>2342</a>
<a id='n2343' href='#n2343'>2343</a>
<a id='n2344' href='#n2344'>2344</a>
<a id='n2345' href='#n2345'>2345</a>
<a id='n2346' href='#n2346'>2346</a>
<a id='n2347' href='#n2347'>2347</a>
<a id='n2348' href='#n2348'>2348</a>
<a id='n2349' href='#n2349'>2349</a>
<a id='n2350' href='#n2350'>2350</a>
<a id='n2351' href='#n2351'>2351</a>
<a id='n2352' href='#n2352'>2352</a>
<a id='n2353' href='#n2353'>2353</a>
<a id='n2354' href='#n2354'>2354</a>
<a id='n2355' href='#n2355'>2355</a>
<a id='n2356' href='#n2356'>2356</a>
<a id='n2357' href='#n2357'>2357</a>
<a id='n2358' href='#n2358'>2358</a>
<a id='n2359' href='#n2359'>2359</a>
<a id='n2360' href='#n2360'>2360</a>
<a id='n2361' href='#n2361'>2361</a>
<a id='n2362' href='#n2362'>2362</a>
<a id='n2363' href='#n2363'>2363</a>
<a id='n2364' href='#n2364'>2364</a>
<a id='n2365' href='#n2365'>2365</a>
<a id='n2366' href='#n2366'>2366</a>
<a id='n2367' href='#n2367'>2367</a>
<a id='n2368' href='#n2368'>2368</a>
<a id='n2369' href='#n2369'>2369</a>
<a id='n2370' href='#n2370'>2370</a>
<a id='n2371' href='#n2371'>2371</a>
<a id='n2372' href='#n2372'>2372</a>
<a id='n2373' href='#n2373'>2373</a>
<a id='n2374' href='#n2374'>2374</a>
<a id='n2375' href='#n2375'>2375</a>
<a id='n2376' href='#n2376'>2376</a>
<a id='n2377' href='#n2377'>2377</a>
<a id='n2378' href='#n2378'>2378</a>
<a id='n2379' href='#n2379'>2379</a>
<a id='n2380' href='#n2380'>2380</a>
<a id='n2381' href='#n2381'>2381</a>
<a id='n2382' href='#n2382'>2382</a>
<a id='n2383' href='#n2383'>2383</a>
<a id='n2384' href='#n2384'>2384</a>
<a id='n2385' href='#n2385'>2385</a>
<a id='n2386' href='#n2386'>2386</a>
<a id='n2387' href='#n2387'>2387</a>
<a id='n2388' href='#n2388'>2388</a>
<a id='n2389' href='#n2389'>2389</a>
<a id='n2390' href='#n2390'>2390</a>
<a id='n2391' href='#n2391'>2391</a>
<a id='n2392' href='#n2392'>2392</a>
<a id='n2393' href='#n2393'>2393</a>
<a id='n2394' href='#n2394'>2394</a>
<a id='n2395' href='#n2395'>2395</a>
<a id='n2396' href='#n2396'>2396</a>
<a id='n2397' href='#n2397'>2397</a>
<a id='n2398' href='#n2398'>2398</a>
<a id='n2399' href='#n2399'>2399</a>
<a id='n2400' href='#n2400'>2400</a>
<a id='n2401' href='#n2401'>2401</a>
<a id='n2402' href='#n2402'>2402</a>
<a id='n2403' href='#n2403'>2403</a>
<a id='n2404' href='#n2404'>2404</a>
<a id='n2405' href='#n2405'>2405</a>
<a id='n2406' href='#n2406'>2406</a>
<a id='n2407' href='#n2407'>2407</a>
<a id='n2408' href='#n2408'>2408</a>
<a id='n2409' href='#n2409'>2409</a>
<a id='n2410' href='#n2410'>2410</a>
<a id='n2411' href='#n2411'>2411</a>
<a id='n2412' href='#n2412'>2412</a>
<a id='n2413' href='#n2413'>2413</a>
<a id='n2414' href='#n2414'>2414</a>
<a id='n2415' href='#n2415'>2415</a>
<a id='n2416' href='#n2416'>2416</a>
<a id='n2417' href='#n2417'>2417</a>
<a id='n2418' href='#n2418'>2418</a>
<a id='n2419' href='#n2419'>2419</a>
<a id='n2420' href='#n2420'>2420</a>
<a id='n2421' href='#n2421'>2421</a>
<a id='n2422' href='#n2422'>2422</a>
<a id='n2423' href='#n2423'>2423</a>
<a id='n2424' href='#n2424'>2424</a>
<a id='n2425' href='#n2425'>2425</a>
<a id='n2426' href='#n2426'>2426</a>
<a id='n2427' href='#n2427'>2427</a>
<a id='n2428' href='#n2428'>2428</a>
<a id='n2429' href='#n2429'>2429</a>
<a id='n2430' href='#n2430'>2430</a>
<a id='n2431' href='#n2431'>2431</a>
<a id='n2432' href='#n2432'>2432</a>
<a id='n2433' href='#n2433'>2433</a>
<a id='n2434' href='#n2434'>2434</a>
<a id='n2435' href='#n2435'>2435</a>
<a id='n2436' href='#n2436'>2436</a>
<a id='n2437' href='#n2437'>2437</a>
<a id='n2438' href='#n2438'>2438</a>
<a id='n2439' href='#n2439'>2439</a>
<a id='n2440' href='#n2440'>2440</a>
<a id='n2441' href='#n2441'>2441</a>
<a id='n2442' href='#n2442'>2442</a>
<a id='n2443' href='#n2443'>2443</a>
<a id='n2444' href='#n2444'>2444</a>
<a id='n2445' href='#n2445'>2445</a>
<a id='n2446' href='#n2446'>2446</a>
<a id='n2447' href='#n2447'>2447</a>
<a id='n2448' href='#n2448'>2448</a>
<a id='n2449' href='#n2449'>2449</a>
<a id='n2450' href='#n2450'>2450</a>
<a id='n2451' href='#n2451'>2451</a>
<a id='n2452' href='#n2452'>2452</a>
<a id='n2453' href='#n2453'>2453</a>
<a id='n2454' href='#n2454'>2454</a>
<a id='n2455' href='#n2455'>2455</a>
<a id='n2456' href='#n2456'>2456</a>
<a id='n2457' href='#n2457'>2457</a>
<a id='n2458' href='#n2458'>2458</a>
<a id='n2459' href='#n2459'>2459</a>
<a id='n2460' href='#n2460'>2460</a>
<a id='n2461' href='#n2461'>2461</a>
<a id='n2462' href='#n2462'>2462</a>
<a id='n2463' href='#n2463'>2463</a>
<a id='n2464' href='#n2464'>2464</a>
<a id='n2465' href='#n2465'>2465</a>
<a id='n2466' href='#n2466'>2466</a>
<a id='n2467' href='#n2467'>2467</a>
<a id='n2468' href='#n2468'>2468</a>
<a id='n2469' href='#n2469'>2469</a>
<a id='n2470' href='#n2470'>2470</a>
<a id='n2471' href='#n2471'>2471</a>
<a id='n2472' href='#n2472'>2472</a>
<a id='n2473' href='#n2473'>2473</a>
<a id='n2474' href='#n2474'>2474</a>
<a id='n2475' href='#n2475'>2475</a>
<a id='n2476' href='#n2476'>2476</a>
<a id='n2477' href='#n2477'>2477</a>
<a id='n2478' href='#n2478'>2478</a>
<a id='n2479' href='#n2479'>2479</a>
<a id='n2480' href='#n2480'>2480</a>
<a id='n2481' href='#n2481'>2481</a>
<a id='n2482' href='#n2482'>2482</a>
<a id='n2483' href='#n2483'>2483</a>
<a id='n2484' href='#n2484'>2484</a>
<a id='n2485' href='#n2485'>2485</a>
<a id='n2486' href='#n2486'>2486</a>
<a id='n2487' href='#n2487'>2487</a>
<a id='n2488' href='#n2488'>2488</a>
<a id='n2489' href='#n2489'>2489</a>
<a id='n2490' href='#n2490'>2490</a>
<a id='n2491' href='#n2491'>2491</a>
<a id='n2492' href='#n2492'>2492</a>
<a id='n2493' href='#n2493'>2493</a>
<a id='n2494' href='#n2494'>2494</a>
<a id='n2495' href='#n2495'>2495</a>
<a id='n2496' href='#n2496'>2496</a>
<a id='n2497' href='#n2497'>2497</a>
<a id='n2498' href='#n2498'>2498</a>
<a id='n2499' href='#n2499'>2499</a>
<a id='n2500' href='#n2500'>2500</a>
<a id='n2501' href='#n2501'>2501</a>
<a id='n2502' href='#n2502'>2502</a>
<a id='n2503' href='#n2503'>2503</a>
<a id='n2504' href='#n2504'>2504</a>
<a id='n2505' href='#n2505'>2505</a>
<a id='n2506' href='#n2506'>2506</a>
<a id='n2507' href='#n2507'>2507</a>
<a id='n2508' href='#n2508'>2508</a>
<a id='n2509' href='#n2509'>2509</a>
<a id='n2510' href='#n2510'>2510</a>
<a id='n2511' href='#n2511'>2511</a>
<a id='n2512' href='#n2512'>2512</a>
<a id='n2513' href='#n2513'>2513</a>
<a id='n2514' href='#n2514'>2514</a>
<a id='n2515' href='#n2515'>2515</a>
<a id='n2516' href='#n2516'>2516</a>
<a id='n2517' href='#n2517'>2517</a>
<a id='n2518' href='#n2518'>2518</a>
<a id='n2519' href='#n2519'>2519</a>
<a id='n2520' href='#n2520'>2520</a>
<a id='n2521' href='#n2521'>2521</a>
<a id='n2522' href='#n2522'>2522</a>
<a id='n2523' href='#n2523'>2523</a>
<a id='n2524' href='#n2524'>2524</a>
<a id='n2525' href='#n2525'>2525</a>
<a id='n2526' href='#n2526'>2526</a>
<a id='n2527' href='#n2527'>2527</a>
<a id='n2528' href='#n2528'>2528</a>
<a id='n2529' href='#n2529'>2529</a>
<a id='n2530' href='#n2530'>2530</a>
<a id='n2531' href='#n2531'>2531</a>
<a id='n2532' href='#n2532'>2532</a>
<a id='n2533' href='#n2533'>2533</a>
<a id='n2534' href='#n2534'>2534</a>
<a id='n2535' href='#n2535'>2535</a>
<a id='n2536' href='#n2536'>2536</a>
<a id='n2537' href='#n2537'>2537</a>
<a id='n2538' href='#n2538'>2538</a>
<a id='n2539' href='#n2539'>2539</a>
<a id='n2540' href='#n2540'>2540</a>
<a id='n2541' href='#n2541'>2541</a>
<a id='n2542' href='#n2542'>2542</a>
<a id='n2543' href='#n2543'>2543</a>
<a id='n2544' href='#n2544'>2544</a>
<a id='n2545' href='#n2545'>2545</a>
<a id='n2546' href='#n2546'>2546</a>
<a id='n2547' href='#n2547'>2547</a>
<a id='n2548' href='#n2548'>2548</a>
<a id='n2549' href='#n2549'>2549</a>
<a id='n2550' href='#n2550'>2550</a>
<a id='n2551' href='#n2551'>2551</a>
<a id='n2552' href='#n2552'>2552</a>
<a id='n2553' href='#n2553'>2553</a>
<a id='n2554' href='#n2554'>2554</a>
<a id='n2555' href='#n2555'>2555</a>
<a id='n2556' href='#n2556'>2556</a>
<a id='n2557' href='#n2557'>2557</a>
<a id='n2558' href='#n2558'>2558</a>
<a id='n2559' href='#n2559'>2559</a>
<a id='n2560' href='#n2560'>2560</a>
<a id='n2561' href='#n2561'>2561</a>
<a id='n2562' href='#n2562'>2562</a>
<a id='n2563' href='#n2563'>2563</a>
<a id='n2564' href='#n2564'>2564</a>
<a id='n2565' href='#n2565'>2565</a>
<a id='n2566' href='#n2566'>2566</a>
<a id='n2567' href='#n2567'>2567</a>
<a id='n2568' href='#n2568'>2568</a>
<a id='n2569' href='#n2569'>2569</a>
<a id='n2570' href='#n2570'>2570</a>
<a id='n2571' href='#n2571'>2571</a>
<a id='n2572' href='#n2572'>2572</a>
<a id='n2573' href='#n2573'>2573</a>
<a id='n2574' href='#n2574'>2574</a>
<a id='n2575' href='#n2575'>2575</a>
<a id='n2576' href='#n2576'>2576</a>
<a id='n2577' href='#n2577'>2577</a>
<a id='n2578' href='#n2578'>2578</a>
<a id='n2579' href='#n2579'>2579</a>
<a id='n2580' href='#n2580'>2580</a>
<a id='n2581' href='#n2581'>2581</a>
<a id='n2582' href='#n2582'>2582</a>
<a id='n2583' href='#n2583'>2583</a>
<a id='n2584' href='#n2584'>2584</a>
<a id='n2585' href='#n2585'>2585</a>
<a id='n2586' href='#n2586'>2586</a>
<a id='n2587' href='#n2587'>2587</a>
<a id='n2588' href='#n2588'>2588</a>
<a id='n2589' href='#n2589'>2589</a>
<a id='n2590' href='#n2590'>2590</a>
<a id='n2591' href='#n2591'>2591</a>
<a id='n2592' href='#n2592'>2592</a>
<a id='n2593' href='#n2593'>2593</a>
<a id='n2594' href='#n2594'>2594</a>
<a id='n2595' href='#n2595'>2595</a>
<a id='n2596' href='#n2596'>2596</a>
<a id='n2597' href='#n2597'>2597</a>
<a id='n2598' href='#n2598'>2598</a>
<a id='n2599' href='#n2599'>2599</a>
<a id='n2600' href='#n2600'>2600</a>
<a id='n2601' href='#n2601'>2601</a>
<a id='n2602' href='#n2602'>2602</a>
<a id='n2603' href='#n2603'>2603</a>
<a id='n2604' href='#n2604'>2604</a>
<a id='n2605' href='#n2605'>2605</a>
<a id='n2606' href='#n2606'>2606</a>
<a id='n2607' href='#n2607'>2607</a>
<a id='n2608' href='#n2608'>2608</a>
<a id='n2609' href='#n2609'>2609</a>
<a id='n2610' href='#n2610'>2610</a>
<a id='n2611' href='#n2611'>2611</a>
<a id='n2612' href='#n2612'>2612</a>
<a id='n2613' href='#n2613'>2613</a>
<a id='n2614' href='#n2614'>2614</a>
<a id='n2615' href='#n2615'>2615</a>
<a id='n2616' href='#n2616'>2616</a>
<a id='n2617' href='#n2617'>2617</a>
<a id='n2618' href='#n2618'>2618</a>
<a id='n2619' href='#n2619'>2619</a>
<a id='n2620' href='#n2620'>2620</a>
<a id='n2621' href='#n2621'>2621</a>
<a id='n2622' href='#n2622'>2622</a>
<a id='n2623' href='#n2623'>2623</a>
<a id='n2624' href='#n2624'>2624</a>
<a id='n2625' href='#n2625'>2625</a>
<a id='n2626' href='#n2626'>2626</a>
<a id='n2627' href='#n2627'>2627</a>
<a id='n2628' href='#n2628'>2628</a>
<a id='n2629' href='#n2629'>2629</a>
<a id='n2630' href='#n2630'>2630</a>
<a id='n2631' href='#n2631'>2631</a>
<a id='n2632' href='#n2632'>2632</a>
<a id='n2633' href='#n2633'>2633</a>
<a id='n2634' href='#n2634'>2634</a>
<a id='n2635' href='#n2635'>2635</a>
<a id='n2636' href='#n2636'>2636</a>
<a id='n2637' href='#n2637'>2637</a>
<a id='n2638' href='#n2638'>2638</a>
<a id='n2639' href='#n2639'>2639</a>
<a id='n2640' href='#n2640'>2640</a>
<a id='n2641' href='#n2641'>2641</a>
<a id='n2642' href='#n2642'>2642</a>
<a id='n2643' href='#n2643'>2643</a>
<a id='n2644' href='#n2644'>2644</a>
<a id='n2645' href='#n2645'>2645</a>
<a id='n2646' href='#n2646'>2646</a>
<a id='n2647' href='#n2647'>2647</a>
<a id='n2648' href='#n2648'>2648</a>
<a id='n2649' href='#n2649'>2649</a>
<a id='n2650' href='#n2650'>2650</a>
<a id='n2651' href='#n2651'>2651</a>
<a id='n2652' href='#n2652'>2652</a>
<a id='n2653' href='#n2653'>2653</a>
<a id='n2654' href='#n2654'>2654</a>
<a id='n2655' href='#n2655'>2655</a>
<a id='n2656' href='#n2656'>2656</a>
<a id='n2657' href='#n2657'>2657</a>
<a id='n2658' href='#n2658'>2658</a>
<a id='n2659' href='#n2659'>2659</a>
<a id='n2660' href='#n2660'>2660</a>
<a id='n2661' href='#n2661'>2661</a>
<a id='n2662' href='#n2662'>2662</a>
<a id='n2663' href='#n2663'>2663</a>
<a id='n2664' href='#n2664'>2664</a>
<a id='n2665' href='#n2665'>2665</a>
<a id='n2666' href='#n2666'>2666</a>
<a id='n2667' href='#n2667'>2667</a>
<a id='n2668' href='#n2668'>2668</a>
<a id='n2669' href='#n2669'>2669</a>
<a id='n2670' href='#n2670'>2670</a>
<a id='n2671' href='#n2671'>2671</a>
<a id='n2672' href='#n2672'>2672</a>
<a id='n2673' href='#n2673'>2673</a>
<a id='n2674' href='#n2674'>2674</a>
<a id='n2675' href='#n2675'>2675</a>
<a id='n2676' href='#n2676'>2676</a>
<a id='n2677' href='#n2677'>2677</a>
<a id='n2678' href='#n2678'>2678</a>
<a id='n2679' href='#n2679'>2679</a>
<a id='n2680' href='#n2680'>2680</a>
<a id='n2681' href='#n2681'>2681</a>
<a id='n2682' href='#n2682'>2682</a>
<a id='n2683' href='#n2683'>2683</a>
<a id='n2684' href='#n2684'>2684</a>
<a id='n2685' href='#n2685'>2685</a>
<a id='n2686' href='#n2686'>2686</a>
<a id='n2687' href='#n2687'>2687</a>
<a id='n2688' href='#n2688'>2688</a>
<a id='n2689' href='#n2689'>2689</a>
<a id='n2690' href='#n2690'>2690</a>
<a id='n2691' href='#n2691'>2691</a>
<a id='n2692' href='#n2692'>2692</a>
<a id='n2693' href='#n2693'>2693</a>
<a id='n2694' href='#n2694'>2694</a>
<a id='n2695' href='#n2695'>2695</a>
<a id='n2696' href='#n2696'>2696</a>
<a id='n2697' href='#n2697'>2697</a>
<a id='n2698' href='#n2698'>2698</a>
<a id='n2699' href='#n2699'>2699</a>
<a id='n2700' href='#n2700'>2700</a>
<a id='n2701' href='#n2701'>2701</a>
<a id='n2702' href='#n2702'>2702</a>
<a id='n2703' href='#n2703'>2703</a>
<a id='n2704' href='#n2704'>2704</a>
<a id='n2705' href='#n2705'>2705</a>
<a id='n2706' href='#n2706'>2706</a>
<a id='n2707' href='#n2707'>2707</a>
<a id='n2708' href='#n2708'>2708</a>
<a id='n2709' href='#n2709'>2709</a>
<a id='n2710' href='#n2710'>2710</a>
<a id='n2711' href='#n2711'>2711</a>
<a id='n2712' href='#n2712'>2712</a>
<a id='n2713' href='#n2713'>2713</a>
<a id='n2714' href='#n2714'>2714</a>
<a id='n2715' href='#n2715'>2715</a>
<a id='n2716' href='#n2716'>2716</a>
<a id='n2717' href='#n2717'>2717</a>
<a id='n2718' href='#n2718'>2718</a>
<a id='n2719' href='#n2719'>2719</a>
<a id='n2720' href='#n2720'>2720</a>
<a id='n2721' href='#n2721'>2721</a>
<a id='n2722' href='#n2722'>2722</a>
<a id='n2723' href='#n2723'>2723</a>
<a id='n2724' href='#n2724'>2724</a>
<a id='n2725' href='#n2725'>2725</a>
<a id='n2726' href='#n2726'>2726</a>
<a id='n2727' href='#n2727'>2727</a>
<a id='n2728' href='#n2728'>2728</a>
<a id='n2729' href='#n2729'>2729</a>
<a id='n2730' href='#n2730'>2730</a>
<a id='n2731' href='#n2731'>2731</a>
<a id='n2732' href='#n2732'>2732</a>
<a id='n2733' href='#n2733'>2733</a>
<a id='n2734' href='#n2734'>2734</a>
<a id='n2735' href='#n2735'>2735</a>
<a id='n2736' href='#n2736'>2736</a>
<a id='n2737' href='#n2737'>2737</a>
<a id='n2738' href='#n2738'>2738</a>
<a id='n2739' href='#n2739'>2739</a>
<a id='n2740' href='#n2740'>2740</a>
<a id='n2741' href='#n2741'>2741</a>
<a id='n2742' href='#n2742'>2742</a>
<a id='n2743' href='#n2743'>2743</a>
<a id='n2744' href='#n2744'>2744</a>
<a id='n2745' href='#n2745'>2745</a>
<a id='n2746' href='#n2746'>2746</a>
<a id='n2747' href='#n2747'>2747</a>
<a id='n2748' href='#n2748'>2748</a>
<a id='n2749' href='#n2749'>2749</a>
<a id='n2750' href='#n2750'>2750</a>
<a id='n2751' href='#n2751'>2751</a>
<a id='n2752' href='#n2752'>2752</a>
<a id='n2753' href='#n2753'>2753</a>
<a id='n2754' href='#n2754'>2754</a>
<a id='n2755' href='#n2755'>2755</a>
<a id='n2756' href='#n2756'>2756</a>
<a id='n2757' href='#n2757'>2757</a>
<a id='n2758' href='#n2758'>2758</a>
<a id='n2759' href='#n2759'>2759</a>
<a id='n2760' href='#n2760'>2760</a>
<a id='n2761' href='#n2761'>2761</a>
<a id='n2762' href='#n2762'>2762</a>
<a id='n2763' href='#n2763'>2763</a>
<a id='n2764' href='#n2764'>2764</a>
<a id='n2765' href='#n2765'>2765</a>
<a id='n2766' href='#n2766'>2766</a>
<a id='n2767' href='#n2767'>2767</a>
<a id='n2768' href='#n2768'>2768</a>
<a id='n2769' href='#n2769'>2769</a>
<a id='n2770' href='#n2770'>2770</a>
<a id='n2771' href='#n2771'>2771</a>
<a id='n2772' href='#n2772'>2772</a>
<a id='n2773' href='#n2773'>2773</a>
<a id='n2774' href='#n2774'>2774</a>
<a id='n2775' href='#n2775'>2775</a>
<a id='n2776' href='#n2776'>2776</a>
<a id='n2777' href='#n2777'>2777</a>
<a id='n2778' href='#n2778'>2778</a>
<a id='n2779' href='#n2779'>2779</a>
<a id='n2780' href='#n2780'>2780</a>
<a id='n2781' href='#n2781'>2781</a>
<a id='n2782' href='#n2782'>2782</a>
<a id='n2783' href='#n2783'>2783</a>
<a id='n2784' href='#n2784'>2784</a>
<a id='n2785' href='#n2785'>2785</a>
<a id='n2786' href='#n2786'>2786</a>
<a id='n2787' href='#n2787'>2787</a>
<a id='n2788' href='#n2788'>2788</a>
<a id='n2789' href='#n2789'>2789</a>
<a id='n2790' href='#n2790'>2790</a>
<a id='n2791' href='#n2791'>2791</a>
<a id='n2792' href='#n2792'>2792</a>
<a id='n2793' href='#n2793'>2793</a>
<a id='n2794' href='#n2794'>2794</a>
<a id='n2795' href='#n2795'>2795</a>
<a id='n2796' href='#n2796'>2796</a>
<a id='n2797' href='#n2797'>2797</a>
<a id='n2798' href='#n2798'>2798</a>
<a id='n2799' href='#n2799'>2799</a>
<a id='n2800' href='#n2800'>2800</a>
<a id='n2801' href='#n2801'>2801</a>
<a id='n2802' href='#n2802'>2802</a>
<a id='n2803' href='#n2803'>2803</a>
<a id='n2804' href='#n2804'>2804</a>
<a id='n2805' href='#n2805'>2805</a>
<a id='n2806' href='#n2806'>2806</a>
<a id='n2807' href='#n2807'>2807</a>
<a id='n2808' href='#n2808'>2808</a>
<a id='n2809' href='#n2809'>2809</a>
<a id='n2810' href='#n2810'>2810</a>
<a id='n2811' href='#n2811'>2811</a>
<a id='n2812' href='#n2812'>2812</a>
<a id='n2813' href='#n2813'>2813</a>
<a id='n2814' href='#n2814'>2814</a>
<a id='n2815' href='#n2815'>2815</a>
<a id='n2816' href='#n2816'>2816</a>
<a id='n2817' href='#n2817'>2817</a>
<a id='n2818' href='#n2818'>2818</a>
<a id='n2819' href='#n2819'>2819</a>
<a id='n2820' href='#n2820'>2820</a>
<a id='n2821' href='#n2821'>2821</a>
<a id='n2822' href='#n2822'>2822</a>
<a id='n2823' href='#n2823'>2823</a>
<a id='n2824' href='#n2824'>2824</a>
<a id='n2825' href='#n2825'>2825</a>
<a id='n2826' href='#n2826'>2826</a>
<a id='n2827' href='#n2827'>2827</a>
<a id='n2828' href='#n2828'>2828</a>
<a id='n2829' href='#n2829'>2829</a>
<a id='n2830' href='#n2830'>2830</a>
<a id='n2831' href='#n2831'>2831</a>
<a id='n2832' href='#n2832'>2832</a>
<a id='n2833' href='#n2833'>2833</a>
<a id='n2834' href='#n2834'>2834</a>
<a id='n2835' href='#n2835'>2835</a>
<a id='n2836' href='#n2836'>2836</a>
<a id='n2837' href='#n2837'>2837</a>
<a id='n2838' href='#n2838'>2838</a>
<a id='n2839' href='#n2839'>2839</a>
<a id='n2840' href='#n2840'>2840</a>
<a id='n2841' href='#n2841'>2841</a>
<a id='n2842' href='#n2842'>2842</a>
<a id='n2843' href='#n2843'>2843</a>
<a id='n2844' href='#n2844'>2844</a>
<a id='n2845' href='#n2845'>2845</a>
<a id='n2846' href='#n2846'>2846</a>
<a id='n2847' href='#n2847'>2847</a>
<a id='n2848' href='#n2848'>2848</a>
<a id='n2849' href='#n2849'>2849</a>
<a id='n2850' href='#n2850'>2850</a>
<a id='n2851' href='#n2851'>2851</a>
<a id='n2852' href='#n2852'>2852</a>
<a id='n2853' href='#n2853'>2853</a>
<a id='n2854' href='#n2854'>2854</a>
<a id='n2855' href='#n2855'>2855</a>
<a id='n2856' href='#n2856'>2856</a>
<a id='n2857' href='#n2857'>2857</a>
<a id='n2858' href='#n2858'>2858</a>
<a id='n2859' href='#n2859'>2859</a>
<a id='n2860' href='#n2860'>2860</a>
<a id='n2861' href='#n2861'>2861</a>
<a id='n2862' href='#n2862'>2862</a>
<a id='n2863' href='#n2863'>2863</a>
<a id='n2864' href='#n2864'>2864</a>
<a id='n2865' href='#n2865'>2865</a>
<a id='n2866' href='#n2866'>2866</a>
<a id='n2867' href='#n2867'>2867</a>
<a id='n2868' href='#n2868'>2868</a>
<a id='n2869' href='#n2869'>2869</a>
<a id='n2870' href='#n2870'>2870</a>
<a id='n2871' href='#n2871'>2871</a>
<a id='n2872' href='#n2872'>2872</a>
<a id='n2873' href='#n2873'>2873</a>
<a id='n2874' href='#n2874'>2874</a>
<a id='n2875' href='#n2875'>2875</a>
<a id='n2876' href='#n2876'>2876</a>
<a id='n2877' href='#n2877'>2877</a>
<a id='n2878' href='#n2878'>2878</a>
<a id='n2879' href='#n2879'>2879</a>
<a id='n2880' href='#n2880'>2880</a>
<a id='n2881' href='#n2881'>2881</a>
<a id='n2882' href='#n2882'>2882</a>
<a id='n2883' href='#n2883'>2883</a>
<a id='n2884' href='#n2884'>2884</a>
<a id='n2885' href='#n2885'>2885</a>
<a id='n2886' href='#n2886'>2886</a>
<a id='n2887' href='#n2887'>2887</a>
<a id='n2888' href='#n2888'>2888</a>
<a id='n2889' href='#n2889'>2889</a>
<a id='n2890' href='#n2890'>2890</a>
<a id='n2891' href='#n2891'>2891</a>
<a id='n2892' href='#n2892'>2892</a>
<a id='n2893' href='#n2893'>2893</a>
<a id='n2894' href='#n2894'>2894</a>
<a id='n2895' href='#n2895'>2895</a>
<a id='n2896' href='#n2896'>2896</a>
<a id='n2897' href='#n2897'>2897</a>
<a id='n2898' href='#n2898'>2898</a>
<a id='n2899' href='#n2899'>2899</a>
<a id='n2900' href='#n2900'>2900</a>
<a id='n2901' href='#n2901'>2901</a>
<a id='n2902' href='#n2902'>2902</a>
<a id='n2903' href='#n2903'>2903</a>
<a id='n2904' href='#n2904'>2904</a>
<a id='n2905' href='#n2905'>2905</a>
<a id='n2906' href='#n2906'>2906</a>
<a id='n2907' href='#n2907'>2907</a>
<a id='n2908' href='#n2908'>2908</a>
<a id='n2909' href='#n2909'>2909</a>
<a id='n2910' href='#n2910'>2910</a>
<a id='n2911' href='#n2911'>2911</a>
<a id='n2912' href='#n2912'>2912</a>
<a id='n2913' href='#n2913'>2913</a>
<a id='n2914' href='#n2914'>2914</a>
<a id='n2915' href='#n2915'>2915</a>
<a id='n2916' href='#n2916'>2916</a>
<a id='n2917' href='#n2917'>2917</a>
<a id='n2918' href='#n2918'>2918</a>
<a id='n2919' href='#n2919'>2919</a>
<a id='n2920' href='#n2920'>2920</a>
<a id='n2921' href='#n2921'>2921</a>
<a id='n2922' href='#n2922'>2922</a>
<a id='n2923' href='#n2923'>2923</a>
<a id='n2924' href='#n2924'>2924</a>
<a id='n2925' href='#n2925'>2925</a>
<a id='n2926' href='#n2926'>2926</a>
<a id='n2927' href='#n2927'>2927</a>
<a id='n2928' href='#n2928'>2928</a>
<a id='n2929' href='#n2929'>2929</a>
<a id='n2930' href='#n2930'>2930</a>
<a id='n2931' href='#n2931'>2931</a>
<a id='n2932' href='#n2932'>2932</a>
<a id='n2933' href='#n2933'>2933</a>
<a id='n2934' href='#n2934'>2934</a>
<a id='n2935' href='#n2935'>2935</a>
<a id='n2936' href='#n2936'>2936</a>
<a id='n2937' href='#n2937'>2937</a>
<a id='n2938' href='#n2938'>2938</a>
<a id='n2939' href='#n2939'>2939</a>
<a id='n2940' href='#n2940'>2940</a>
<a id='n2941' href='#n2941'>2941</a>
<a id='n2942' href='#n2942'>2942</a>
<a id='n2943' href='#n2943'>2943</a>
<a id='n2944' href='#n2944'>2944</a>
<a id='n2945' href='#n2945'>2945</a>
<a id='n2946' href='#n2946'>2946</a>
<a id='n2947' href='#n2947'>2947</a>
<a id='n2948' href='#n2948'>2948</a>
<a id='n2949' href='#n2949'>2949</a>
<a id='n2950' href='#n2950'>2950</a>
<a id='n2951' href='#n2951'>2951</a>
<a id='n2952' href='#n2952'>2952</a>
<a id='n2953' href='#n2953'>2953</a>
<a id='n2954' href='#n2954'>2954</a>
<a id='n2955' href='#n2955'>2955</a>
<a id='n2956' href='#n2956'>2956</a>
<a id='n2957' href='#n2957'>2957</a>
<a id='n2958' href='#n2958'>2958</a>
<a id='n2959' href='#n2959'>2959</a>
<a id='n2960' href='#n2960'>2960</a>
<a id='n2961' href='#n2961'>2961</a>
<a id='n2962' href='#n2962'>2962</a>
<a id='n2963' href='#n2963'>2963</a>
<a id='n2964' href='#n2964'>2964</a>
<a id='n2965' href='#n2965'>2965</a>
<a id='n2966' href='#n2966'>2966</a>
<a id='n2967' href='#n2967'>2967</a>
<a id='n2968' href='#n2968'>2968</a>
<a id='n2969' href='#n2969'>2969</a>
<a id='n2970' href='#n2970'>2970</a>
<a id='n2971' href='#n2971'>2971</a>
<a id='n2972' href='#n2972'>2972</a>
<a id='n2973' href='#n2973'>2973</a>
<a id='n2974' href='#n2974'>2974</a>
<a id='n2975' href='#n2975'>2975</a>
<a id='n2976' href='#n2976'>2976</a>
<a id='n2977' href='#n2977'>2977</a>
<a id='n2978' href='#n2978'>2978</a>
<a id='n2979' href='#n2979'>2979</a>
<a id='n2980' href='#n2980'>2980</a>
<a id='n2981' href='#n2981'>2981</a>
<a id='n2982' href='#n2982'>2982</a>
<a id='n2983' href='#n2983'>2983</a>
<a id='n2984' href='#n2984'>2984</a>
<a id='n2985' href='#n2985'>2985</a>
<a id='n2986' href='#n2986'>2986</a>
<a id='n2987' href='#n2987'>2987</a>
<a id='n2988' href='#n2988'>2988</a>
<a id='n2989' href='#n2989'>2989</a>
<a id='n2990' href='#n2990'>2990</a>
<a id='n2991' href='#n2991'>2991</a>
<a id='n2992' href='#n2992'>2992</a>
<a id='n2993' href='#n2993'>2993</a>
<a id='n2994' href='#n2994'>2994</a>
<a id='n2995' href='#n2995'>2995</a>
<a id='n2996' href='#n2996'>2996</a>
<a id='n2997' href='#n2997'>2997</a>
<a id='n2998' href='#n2998'>2998</a>
<a id='n2999' href='#n2999'>2999</a>
<a id='n3000' href='#n3000'>3000</a>
<a id='n3001' href='#n3001'>3001</a>
<a id='n3002' href='#n3002'>3002</a>
<a id='n3003' href='#n3003'>3003</a>
<a id='n3004' href='#n3004'>3004</a>
<a id='n3005' href='#n3005'>3005</a>
<a id='n3006' href='#n3006'>3006</a>
<a id='n3007' href='#n3007'>3007</a>
<a id='n3008' href='#n3008'>3008</a>
<a id='n3009' href='#n3009'>3009</a>
<a id='n3010' href='#n3010'>3010</a>
<a id='n3011' href='#n3011'>3011</a>
<a id='n3012' href='#n3012'>3012</a>
<a id='n3013' href='#n3013'>3013</a>
<a id='n3014' href='#n3014'>3014</a>
<a id='n3015' href='#n3015'>3015</a>
<a id='n3016' href='#n3016'>3016</a>
<a id='n3017' href='#n3017'>3017</a>
<a id='n3018' href='#n3018'>3018</a>
<a id='n3019' href='#n3019'>3019</a>
<a id='n3020' href='#n3020'>3020</a>
<a id='n3021' href='#n3021'>3021</a>
<a id='n3022' href='#n3022'>3022</a>
<a id='n3023' href='#n3023'>3023</a>
<a id='n3024' href='#n3024'>3024</a>
<a id='n3025' href='#n3025'>3025</a>
<a id='n3026' href='#n3026'>3026</a>
<a id='n3027' href='#n3027'>3027</a>
<a id='n3028' href='#n3028'>3028</a>
<a id='n3029' href='#n3029'>3029</a>
<a id='n3030' href='#n3030'>3030</a>
<a id='n3031' href='#n3031'>3031</a>
<a id='n3032' href='#n3032'>3032</a>
<a id='n3033' href='#n3033'>3033</a>
<a id='n3034' href='#n3034'>3034</a>
<a id='n3035' href='#n3035'>3035</a>
<a id='n3036' href='#n3036'>3036</a>
<a id='n3037' href='#n3037'>3037</a>
<a id='n3038' href='#n3038'>3038</a>
<a id='n3039' href='#n3039'>3039</a>
<a id='n3040' href='#n3040'>3040</a>
<a id='n3041' href='#n3041'>3041</a>
<a id='n3042' href='#n3042'>3042</a>
<a id='n3043' href='#n3043'>3043</a>
<a id='n3044' href='#n3044'>3044</a>
<a id='n3045' href='#n3045'>3045</a>
<a id='n3046' href='#n3046'>3046</a>
<a id='n3047' href='#n3047'>3047</a>
<a id='n3048' href='#n3048'>3048</a>
<a id='n3049' href='#n3049'>3049</a>
<a id='n3050' href='#n3050'>3050</a>
<a id='n3051' href='#n3051'>3051</a>
<a id='n3052' href='#n3052'>3052</a>
<a id='n3053' href='#n3053'>3053</a>
<a id='n3054' href='#n3054'>3054</a>
<a id='n3055' href='#n3055'>3055</a>
<a id='n3056' href='#n3056'>3056</a>
<a id='n3057' href='#n3057'>3057</a>
<a id='n3058' href='#n3058'>3058</a>
<a id='n3059' href='#n3059'>3059</a>
<a id='n3060' href='#n3060'>3060</a>
<a id='n3061' href='#n3061'>3061</a>
<a id='n3062' href='#n3062'>3062</a>
<a id='n3063' href='#n3063'>3063</a>
<a id='n3064' href='#n3064'>3064</a>
<a id='n3065' href='#n3065'>3065</a>
<a id='n3066' href='#n3066'>3066</a>
<a id='n3067' href='#n3067'>3067</a>
<a id='n3068' href='#n3068'>3068</a>
<a id='n3069' href='#n3069'>3069</a>
<a id='n3070' href='#n3070'>3070</a>
<a id='n3071' href='#n3071'>3071</a>
<a id='n3072' href='#n3072'>3072</a>
<a id='n3073' href='#n3073'>3073</a>
<a id='n3074' href='#n3074'>3074</a>
<a id='n3075' href='#n3075'>3075</a>
<a id='n3076' href='#n3076'>3076</a>
<a id='n3077' href='#n3077'>3077</a>
<a id='n3078' href='#n3078'>3078</a>
<a id='n3079' href='#n3079'>3079</a>
<a id='n3080' href='#n3080'>3080</a>
<a id='n3081' href='#n3081'>3081</a>
<a id='n3082' href='#n3082'>3082</a>
<a id='n3083' href='#n3083'>3083</a>
<a id='n3084' href='#n3084'>3084</a>
<a id='n3085' href='#n3085'>3085</a>
<a id='n3086' href='#n3086'>3086</a>
<a id='n3087' href='#n3087'>3087</a>
<a id='n3088' href='#n3088'>3088</a>
<a id='n3089' href='#n3089'>3089</a>
<a id='n3090' href='#n3090'>3090</a>
<a id='n3091' href='#n3091'>3091</a>
<a id='n3092' href='#n3092'>3092</a>
<a id='n3093' href='#n3093'>3093</a>
<a id='n3094' href='#n3094'>3094</a>
<a id='n3095' href='#n3095'>3095</a>
<a id='n3096' href='#n3096'>3096</a>
<a id='n3097' href='#n3097'>3097</a>
<a id='n3098' href='#n3098'>3098</a>
<a id='n3099' href='#n3099'>3099</a>
<a id='n3100' href='#n3100'>3100</a>
<a id='n3101' href='#n3101'>3101</a>
<a id='n3102' href='#n3102'>3102</a>
<a id='n3103' href='#n3103'>3103</a>
<a id='n3104' href='#n3104'>3104</a>
<a id='n3105' href='#n3105'>3105</a>
<a id='n3106' href='#n3106'>3106</a>
<a id='n3107' href='#n3107'>3107</a>
<a id='n3108' href='#n3108'>3108</a>
<a id='n3109' href='#n3109'>3109</a>
<a id='n3110' href='#n3110'>3110</a>
<a id='n3111' href='#n3111'>3111</a>
<a id='n3112' href='#n3112'>3112</a>
<a id='n3113' href='#n3113'>3113</a>
<a id='n3114' href='#n3114'>3114</a>
<a id='n3115' href='#n3115'>3115</a>
<a id='n3116' href='#n3116'>3116</a>
<a id='n3117' href='#n3117'>3117</a>
<a id='n3118' href='#n3118'>3118</a>
<a id='n3119' href='#n3119'>3119</a>
<a id='n3120' href='#n3120'>3120</a>
<a id='n3121' href='#n3121'>3121</a>
<a id='n3122' href='#n3122'>3122</a>
<a id='n3123' href='#n3123'>3123</a>
<a id='n3124' href='#n3124'>3124</a>
<a id='n3125' href='#n3125'>3125</a>
<a id='n3126' href='#n3126'>3126</a>
<a id='n3127' href='#n3127'>3127</a>
<a id='n3128' href='#n3128'>3128</a>
<a id='n3129' href='#n3129'>3129</a>
<a id='n3130' href='#n3130'>3130</a>
<a id='n3131' href='#n3131'>3131</a>
<a id='n3132' href='#n3132'>3132</a>
<a id='n3133' href='#n3133'>3133</a>
<a id='n3134' href='#n3134'>3134</a>
<a id='n3135' href='#n3135'>3135</a>
<a id='n3136' href='#n3136'>3136</a>
<a id='n3137' href='#n3137'>3137</a>
<a id='n3138' href='#n3138'>3138</a>
<a id='n3139' href='#n3139'>3139</a>
<a id='n3140' href='#n3140'>3140</a>
<a id='n3141' href='#n3141'>3141</a>
<a id='n3142' href='#n3142'>3142</a>
<a id='n3143' href='#n3143'>3143</a>
<a id='n3144' href='#n3144'>3144</a>
<a id='n3145' href='#n3145'>3145</a>
<a id='n3146' href='#n3146'>3146</a>
<a id='n3147' href='#n3147'>3147</a>
<a id='n3148' href='#n3148'>3148</a>
<a id='n3149' href='#n3149'>3149</a>
<a id='n3150' href='#n3150'>3150</a>
<a id='n3151' href='#n3151'>3151</a>
<a id='n3152' href='#n3152'>3152</a>
<a id='n3153' href='#n3153'>3153</a>
<a id='n3154' href='#n3154'>3154</a>
<a id='n3155' href='#n3155'>3155</a>
<a id='n3156' href='#n3156'>3156</a>
<a id='n3157' href='#n3157'>3157</a>
<a id='n3158' href='#n3158'>3158</a>
<a id='n3159' href='#n3159'>3159</a>
<a id='n3160' href='#n3160'>3160</a>
<a id='n3161' href='#n3161'>3161</a>
<a id='n3162' href='#n3162'>3162</a>
<a id='n3163' href='#n3163'>3163</a>
<a id='n3164' href='#n3164'>3164</a>
<a id='n3165' href='#n3165'>3165</a>
<a id='n3166' href='#n3166'>3166</a>
<a id='n3167' href='#n3167'>3167</a>
<a id='n3168' href='#n3168'>3168</a>
<a id='n3169' href='#n3169'>3169</a>
<a id='n3170' href='#n3170'>3170</a>
<a id='n3171' href='#n3171'>3171</a>
<a id='n3172' href='#n3172'>3172</a>
<a id='n3173' href='#n3173'>3173</a>
<a id='n3174' href='#n3174'>3174</a>
<a id='n3175' href='#n3175'>3175</a>
<a id='n3176' href='#n3176'>3176</a>
<a id='n3177' href='#n3177'>3177</a>
<a id='n3178' href='#n3178'>3178</a>
<a id='n3179' href='#n3179'>3179</a>
<a id='n3180' href='#n3180'>3180</a>
<a id='n3181' href='#n3181'>3181</a>
<a id='n3182' href='#n3182'>3182</a>
<a id='n3183' href='#n3183'>3183</a>
<a id='n3184' href='#n3184'>3184</a>
<a id='n3185' href='#n3185'>3185</a>
<a id='n3186' href='#n3186'>3186</a>
<a id='n3187' href='#n3187'>3187</a>
<a id='n3188' href='#n3188'>3188</a>
<a id='n3189' href='#n3189'>3189</a>
<a id='n3190' href='#n3190'>3190</a>
<a id='n3191' href='#n3191'>3191</a>
<a id='n3192' href='#n3192'>3192</a>
<a id='n3193' href='#n3193'>3193</a>
<a id='n3194' href='#n3194'>3194</a>
<a id='n3195' href='#n3195'>3195</a>
<a id='n3196' href='#n3196'>3196</a>
<a id='n3197' href='#n3197'>3197</a>
<a id='n3198' href='#n3198'>3198</a>
<a id='n3199' href='#n3199'>3199</a>
<a id='n3200' href='#n3200'>3200</a>
<a id='n3201' href='#n3201'>3201</a>
<a id='n3202' href='#n3202'>3202</a>
<a id='n3203' href='#n3203'>3203</a>
<a id='n3204' href='#n3204'>3204</a>
<a id='n3205' href='#n3205'>3205</a>
<a id='n3206' href='#n3206'>3206</a>
<a id='n3207' href='#n3207'>3207</a>
<a id='n3208' href='#n3208'>3208</a>
<a id='n3209' href='#n3209'>3209</a>
<a id='n3210' href='#n3210'>3210</a>
<a id='n3211' href='#n3211'>3211</a>
<a id='n3212' href='#n3212'>3212</a>
<a id='n3213' href='#n3213'>3213</a>
<a id='n3214' href='#n3214'>3214</a>
<a id='n3215' href='#n3215'>3215</a>
<a id='n3216' href='#n3216'>3216</a>
<a id='n3217' href='#n3217'>3217</a>
<a id='n3218' href='#n3218'>3218</a>
<a id='n3219' href='#n3219'>3219</a>
<a id='n3220' href='#n3220'>3220</a>
<a id='n3221' href='#n3221'>3221</a>
<a id='n3222' href='#n3222'>3222</a>
<a id='n3223' href='#n3223'>3223</a>
<a id='n3224' href='#n3224'>3224</a>
<a id='n3225' href='#n3225'>3225</a>
<a id='n3226' href='#n3226'>3226</a>
<a id='n3227' href='#n3227'>3227</a>
<a id='n3228' href='#n3228'>3228</a>
<a id='n3229' href='#n3229'>3229</a>
<a id='n3230' href='#n3230'>3230</a>
<a id='n3231' href='#n3231'>3231</a>
<a id='n3232' href='#n3232'>3232</a>
<a id='n3233' href='#n3233'>3233</a>
<a id='n3234' href='#n3234'>3234</a>
<a id='n3235' href='#n3235'>3235</a>
<a id='n3236' href='#n3236'>3236</a>
<a id='n3237' href='#n3237'>3237</a>
<a id='n3238' href='#n3238'>3238</a>
<a id='n3239' href='#n3239'>3239</a>
<a id='n3240' href='#n3240'>3240</a>
<a id='n3241' href='#n3241'>3241</a>
<a id='n3242' href='#n3242'>3242</a>
<a id='n3243' href='#n3243'>3243</a>
<a id='n3244' href='#n3244'>3244</a>
<a id='n3245' href='#n3245'>3245</a>
<a id='n3246' href='#n3246'>3246</a>
<a id='n3247' href='#n3247'>3247</a>
<a id='n3248' href='#n3248'>3248</a>
<a id='n3249' href='#n3249'>3249</a>
<a id='n3250' href='#n3250'>3250</a>
<a id='n3251' href='#n3251'>3251</a>
<a id='n3252' href='#n3252'>3252</a>
<a id='n3253' href='#n3253'>3253</a>
<a id='n3254' href='#n3254'>3254</a>
<a id='n3255' href='#n3255'>3255</a>
<a id='n3256' href='#n3256'>3256</a>
<a id='n3257' href='#n3257'>3257</a>
<a id='n3258' href='#n3258'>3258</a>
<a id='n3259' href='#n3259'>3259</a>
<a id='n3260' href='#n3260'>3260</a>
<a id='n3261' href='#n3261'>3261</a>
<a id='n3262' href='#n3262'>3262</a>
<a id='n3263' href='#n3263'>3263</a>
<a id='n3264' href='#n3264'>3264</a>
<a id='n3265' href='#n3265'>3265</a>
<a id='n3266' href='#n3266'>3266</a>
<a id='n3267' href='#n3267'>3267</a>
<a id='n3268' href='#n3268'>3268</a>
<a id='n3269' href='#n3269'>3269</a>
<a id='n3270' href='#n3270'>3270</a>
<a id='n3271' href='#n3271'>3271</a>
<a id='n3272' href='#n3272'>3272</a>
<a id='n3273' href='#n3273'>3273</a>
<a id='n3274' href='#n3274'>3274</a>
<a id='n3275' href='#n3275'>3275</a>
<a id='n3276' href='#n3276'>3276</a>
<a id='n3277' href='#n3277'>3277</a>
<a id='n3278' href='#n3278'>3278</a>
<a id='n3279' href='#n3279'>3279</a>
<a id='n3280' href='#n3280'>3280</a>
<a id='n3281' href='#n3281'>3281</a>
<a id='n3282' href='#n3282'>3282</a>
<a id='n3283' href='#n3283'>3283</a>
<a id='n3284' href='#n3284'>3284</a>
<a id='n3285' href='#n3285'>3285</a>
<a id='n3286' href='#n3286'>3286</a>
<a id='n3287' href='#n3287'>3287</a>
<a id='n3288' href='#n3288'>3288</a>
<a id='n3289' href='#n3289'>3289</a>
<a id='n3290' href='#n3290'>3290</a>
<a id='n3291' href='#n3291'>3291</a>
<a id='n3292' href='#n3292'>3292</a>
<a id='n3293' href='#n3293'>3293</a>
<a id='n3294' href='#n3294'>3294</a>
<a id='n3295' href='#n3295'>3295</a>
<a id='n3296' href='#n3296'>3296</a>
<a id='n3297' href='#n3297'>3297</a>
<a id='n3298' href='#n3298'>3298</a>
<a id='n3299' href='#n3299'>3299</a>
<a id='n3300' href='#n3300'>3300</a>
<a id='n3301' href='#n3301'>3301</a>
<a id='n3302' href='#n3302'>3302</a>
<a id='n3303' href='#n3303'>3303</a>
<a id='n3304' href='#n3304'>3304</a>
<a id='n3305' href='#n3305'>3305</a>
<a id='n3306' href='#n3306'>3306</a>
<a id='n3307' href='#n3307'>3307</a>
<a id='n3308' href='#n3308'>3308</a>
<a id='n3309' href='#n3309'>3309</a>
<a id='n3310' href='#n3310'>3310</a>
<a id='n3311' href='#n3311'>3311</a>
<a id='n3312' href='#n3312'>3312</a>
<a id='n3313' href='#n3313'>3313</a>
<a id='n3314' href='#n3314'>3314</a>
<a id='n3315' href='#n3315'>3315</a>
<a id='n3316' href='#n3316'>3316</a>
<a id='n3317' href='#n3317'>3317</a>
<a id='n3318' href='#n3318'>3318</a>
<a id='n3319' href='#n3319'>3319</a>
<a id='n3320' href='#n3320'>3320</a>
<a id='n3321' href='#n3321'>3321</a>
<a id='n3322' href='#n3322'>3322</a>
<a id='n3323' href='#n3323'>3323</a>
<a id='n3324' href='#n3324'>3324</a>
<a id='n3325' href='#n3325'>3325</a>
<a id='n3326' href='#n3326'>3326</a>
<a id='n3327' href='#n3327'>3327</a>
<a id='n3328' href='#n3328'>3328</a>
<a id='n3329' href='#n3329'>3329</a>
<a id='n3330' href='#n3330'>3330</a>
<a id='n3331' href='#n3331'>3331</a>
<a id='n3332' href='#n3332'>3332</a>
<a id='n3333' href='#n3333'>3333</a>
<a id='n3334' href='#n3334'>3334</a>
<a id='n3335' href='#n3335'>3335</a>
<a id='n3336' href='#n3336'>3336</a>
<a id='n3337' href='#n3337'>3337</a>
<a id='n3338' href='#n3338'>3338</a>
<a id='n3339' href='#n3339'>3339</a>
<a id='n3340' href='#n3340'>3340</a>
<a id='n3341' href='#n3341'>3341</a>
<a id='n3342' href='#n3342'>3342</a>
<a id='n3343' href='#n3343'>3343</a>
<a id='n3344' href='#n3344'>3344</a>
<a id='n3345' href='#n3345'>3345</a>
<a id='n3346' href='#n3346'>3346</a>
<a id='n3347' href='#n3347'>3347</a>
<a id='n3348' href='#n3348'>3348</a>
<a id='n3349' href='#n3349'>3349</a>
<a id='n3350' href='#n3350'>3350</a>
<a id='n3351' href='#n3351'>3351</a>
<a id='n3352' href='#n3352'>3352</a>
<a id='n3353' href='#n3353'>3353</a>
<a id='n3354' href='#n3354'>3354</a>
<a id='n3355' href='#n3355'>3355</a>
<a id='n3356' href='#n3356'>3356</a>
<a id='n3357' href='#n3357'>3357</a>
<a id='n3358' href='#n3358'>3358</a>
<a id='n3359' href='#n3359'>3359</a>
<a id='n3360' href='#n3360'>3360</a>
<a id='n3361' href='#n3361'>3361</a>
<a id='n3362' href='#n3362'>3362</a>
<a id='n3363' href='#n3363'>3363</a>
<a id='n3364' href='#n3364'>3364</a>
<a id='n3365' href='#n3365'>3365</a>
<a id='n3366' href='#n3366'>3366</a>
<a id='n3367' href='#n3367'>3367</a>
<a id='n3368' href='#n3368'>3368</a>
<a id='n3369' href='#n3369'>3369</a>
<a id='n3370' href='#n3370'>3370</a>
<a id='n3371' href='#n3371'>3371</a>
<a id='n3372' href='#n3372'>3372</a>
<a id='n3373' href='#n3373'>3373</a>
<a id='n3374' href='#n3374'>3374</a>
<a id='n3375' href='#n3375'>3375</a>
<a id='n3376' href='#n3376'>3376</a>
<a id='n3377' href='#n3377'>3377</a>
<a id='n3378' href='#n3378'>3378</a>
<a id='n3379' href='#n3379'>3379</a>
<a id='n3380' href='#n3380'>3380</a>
<a id='n3381' href='#n3381'>3381</a>
<a id='n3382' href='#n3382'>3382</a>
<a id='n3383' href='#n3383'>3383</a>
<a id='n3384' href='#n3384'>3384</a>
<a id='n3385' href='#n3385'>3385</a>
<a id='n3386' href='#n3386'>3386</a>
<a id='n3387' href='#n3387'>3387</a>
<a id='n3388' href='#n3388'>3388</a>
<a id='n3389' href='#n3389'>3389</a>
<a id='n3390' href='#n3390'>3390</a>
<a id='n3391' href='#n3391'>3391</a>
<a id='n3392' href='#n3392'>3392</a>
<a id='n3393' href='#n3393'>3393</a>
<a id='n3394' href='#n3394'>3394</a>
<a id='n3395' href='#n3395'>3395</a>
<a id='n3396' href='#n3396'>3396</a>
<a id='n3397' href='#n3397'>3397</a>
<a id='n3398' href='#n3398'>3398</a>
<a id='n3399' href='#n3399'>3399</a>
<a id='n3400' href='#n3400'>3400</a>
<a id='n3401' href='#n3401'>3401</a>
<a id='n3402' href='#n3402'>3402</a>
<a id='n3403' href='#n3403'>3403</a>
<a id='n3404' href='#n3404'>3404</a>
<a id='n3405' href='#n3405'>3405</a>
<a id='n3406' href='#n3406'>3406</a>
<a id='n3407' href='#n3407'>3407</a>
<a id='n3408' href='#n3408'>3408</a>
<a id='n3409' href='#n3409'>3409</a>
<a id='n3410' href='#n3410'>3410</a>
<a id='n3411' href='#n3411'>3411</a>
<a id='n3412' href='#n3412'>3412</a>
<a id='n3413' href='#n3413'>3413</a>
<a id='n3414' href='#n3414'>3414</a>
<a id='n3415' href='#n3415'>3415</a>
<a id='n3416' href='#n3416'>3416</a>
<a id='n3417' href='#n3417'>3417</a>
<a id='n3418' href='#n3418'>3418</a>
<a id='n3419' href='#n3419'>3419</a>
<a id='n3420' href='#n3420'>3420</a>
<a id='n3421' href='#n3421'>3421</a>
<a id='n3422' href='#n3422'>3422</a>
<a id='n3423' href='#n3423'>3423</a>
<a id='n3424' href='#n3424'>3424</a>
<a id='n3425' href='#n3425'>3425</a>
<a id='n3426' href='#n3426'>3426</a>
<a id='n3427' href='#n3427'>3427</a>
<a id='n3428' href='#n3428'>3428</a>
<a id='n3429' href='#n3429'>3429</a>
<a id='n3430' href='#n3430'>3430</a>
<a id='n3431' href='#n3431'>3431</a>
<a id='n3432' href='#n3432'>3432</a>
<a id='n3433' href='#n3433'>3433</a>
<a id='n3434' href='#n3434'>3434</a>
<a id='n3435' href='#n3435'>3435</a>
<a id='n3436' href='#n3436'>3436</a>
<a id='n3437' href='#n3437'>3437</a>
<a id='n3438' href='#n3438'>3438</a>
<a id='n3439' href='#n3439'>3439</a>
<a id='n3440' href='#n3440'>3440</a>
<a id='n3441' href='#n3441'>3441</a>
<a id='n3442' href='#n3442'>3442</a>
<a id='n3443' href='#n3443'>3443</a>
<a id='n3444' href='#n3444'>3444</a>
<a id='n3445' href='#n3445'>3445</a>
<a id='n3446' href='#n3446'>3446</a>
<a id='n3447' href='#n3447'>3447</a>
<a id='n3448' href='#n3448'>3448</a>
<a id='n3449' href='#n3449'>3449</a>
<a id='n3450' href='#n3450'>3450</a>
<a id='n3451' href='#n3451'>3451</a>
<a id='n3452' href='#n3452'>3452</a>
<a id='n3453' href='#n3453'>3453</a>
<a id='n3454' href='#n3454'>3454</a>
<a id='n3455' href='#n3455'>3455</a>
<a id='n3456' href='#n3456'>3456</a>
<a id='n3457' href='#n3457'>3457</a>
<a id='n3458' href='#n3458'>3458</a>
<a id='n3459' href='#n3459'>3459</a>
<a id='n3460' href='#n3460'>3460</a>
<a id='n3461' href='#n3461'>3461</a>
<a id='n3462' href='#n3462'>3462</a>
<a id='n3463' href='#n3463'>3463</a>
<a id='n3464' href='#n3464'>3464</a>
<a id='n3465' href='#n3465'>3465</a>
<a id='n3466' href='#n3466'>3466</a>
<a id='n3467' href='#n3467'>3467</a>
<a id='n3468' href='#n3468'>3468</a>
<a id='n3469' href='#n3469'>3469</a>
<a id='n3470' href='#n3470'>3470</a>
<a id='n3471' href='#n3471'>3471</a>
<a id='n3472' href='#n3472'>3472</a>
<a id='n3473' href='#n3473'>3473</a>
<a id='n3474' href='#n3474'>3474</a>
<a id='n3475' href='#n3475'>3475</a>
<a id='n3476' href='#n3476'>3476</a>
<a id='n3477' href='#n3477'>3477</a>
<a id='n3478' href='#n3478'>3478</a>
<a id='n3479' href='#n3479'>3479</a>
<a id='n3480' href='#n3480'>3480</a>
<a id='n3481' href='#n3481'>3481</a>
<a id='n3482' href='#n3482'>3482</a>
<a id='n3483' href='#n3483'>3483</a>
<a id='n3484' href='#n3484'>3484</a>
<a id='n3485' href='#n3485'>3485</a>
<a id='n3486' href='#n3486'>3486</a>
<a id='n3487' href='#n3487'>3487</a>
<a id='n3488' href='#n3488'>3488</a>
<a id='n3489' href='#n3489'>3489</a>
<a id='n3490' href='#n3490'>3490</a>
<a id='n3491' href='#n3491'>3491</a>
<a id='n3492' href='#n3492'>3492</a>
<a id='n3493' href='#n3493'>3493</a>
<a id='n3494' href='#n3494'>3494</a>
<a id='n3495' href='#n3495'>3495</a>
<a id='n3496' href='#n3496'>3496</a>
<a id='n3497' href='#n3497'>3497</a>
<a id='n3498' href='#n3498'>3498</a>
<a id='n3499' href='#n3499'>3499</a>
<a id='n3500' href='#n3500'>3500</a>
<a id='n3501' href='#n3501'>3501</a>
<a id='n3502' href='#n3502'>3502</a>
<a id='n3503' href='#n3503'>3503</a>
<a id='n3504' href='#n3504'>3504</a>
<a id='n3505' href='#n3505'>3505</a>
<a id='n3506' href='#n3506'>3506</a>
<a id='n3507' href='#n3507'>3507</a>
<a id='n3508' href='#n3508'>3508</a>
<a id='n3509' href='#n3509'>3509</a>
<a id='n3510' href='#n3510'>3510</a>
<a id='n3511' href='#n3511'>3511</a>
<a id='n3512' href='#n3512'>3512</a>
<a id='n3513' href='#n3513'>3513</a>
<a id='n3514' href='#n3514'>3514</a>
<a id='n3515' href='#n3515'>3515</a>
<a id='n3516' href='#n3516'>3516</a>
<a id='n3517' href='#n3517'>3517</a>
<a id='n3518' href='#n3518'>3518</a>
<a id='n3519' href='#n3519'>3519</a>
<a id='n3520' href='#n3520'>3520</a>
<a id='n3521' href='#n3521'>3521</a>
<a id='n3522' href='#n3522'>3522</a>
<a id='n3523' href='#n3523'>3523</a>
<a id='n3524' href='#n3524'>3524</a>
<a id='n3525' href='#n3525'>3525</a>
<a id='n3526' href='#n3526'>3526</a>
<a id='n3527' href='#n3527'>3527</a>
<a id='n3528' href='#n3528'>3528</a>
<a id='n3529' href='#n3529'>3529</a>
<a id='n3530' href='#n3530'>3530</a>
<a id='n3531' href='#n3531'>3531</a>
<a id='n3532' href='#n3532'>3532</a>
<a id='n3533' href='#n3533'>3533</a>
<a id='n3534' href='#n3534'>3534</a>
<a id='n3535' href='#n3535'>3535</a>
<a id='n3536' href='#n3536'>3536</a>
<a id='n3537' href='#n3537'>3537</a>
<a id='n3538' href='#n3538'>3538</a>
<a id='n3539' href='#n3539'>3539</a>
<a id='n3540' href='#n3540'>3540</a>
<a id='n3541' href='#n3541'>3541</a>
<a id='n3542' href='#n3542'>3542</a>
<a id='n3543' href='#n3543'>3543</a>
<a id='n3544' href='#n3544'>3544</a>
<a id='n3545' href='#n3545'>3545</a>
<a id='n3546' href='#n3546'>3546</a>
<a id='n3547' href='#n3547'>3547</a>
<a id='n3548' href='#n3548'>3548</a>
<a id='n3549' href='#n3549'>3549</a>
<a id='n3550' href='#n3550'>3550</a>
<a id='n3551' href='#n3551'>3551</a>
<a id='n3552' href='#n3552'>3552</a>
<a id='n3553' href='#n3553'>3553</a>
<a id='n3554' href='#n3554'>3554</a>
<a id='n3555' href='#n3555'>3555</a>
<a id='n3556' href='#n3556'>3556</a>
<a id='n3557' href='#n3557'>3557</a>
<a id='n3558' href='#n3558'>3558</a>
<a id='n3559' href='#n3559'>3559</a>
<a id='n3560' href='#n3560'>3560</a>
<a id='n3561' href='#n3561'>3561</a>
<a id='n3562' href='#n3562'>3562</a>
<a id='n3563' href='#n3563'>3563</a>
<a id='n3564' href='#n3564'>3564</a>
<a id='n3565' href='#n3565'>3565</a>
<a id='n3566' href='#n3566'>3566</a>
<a id='n3567' href='#n3567'>3567</a>
<a id='n3568' href='#n3568'>3568</a>
<a id='n3569' href='#n3569'>3569</a>
<a id='n3570' href='#n3570'>3570</a>
<a id='n3571' href='#n3571'>3571</a>
<a id='n3572' href='#n3572'>3572</a>
<a id='n3573' href='#n3573'>3573</a>
<a id='n3574' href='#n3574'>3574</a>
<a id='n3575' href='#n3575'>3575</a>
<a id='n3576' href='#n3576'>3576</a>
<a id='n3577' href='#n3577'>3577</a>
<a id='n3578' href='#n3578'>3578</a>
<a id='n3579' href='#n3579'>3579</a>
<a id='n3580' href='#n3580'>3580</a>
<a id='n3581' href='#n3581'>3581</a>
<a id='n3582' href='#n3582'>3582</a>
<a id='n3583' href='#n3583'>3583</a>
<a id='n3584' href='#n3584'>3584</a>
<a id='n3585' href='#n3585'>3585</a>
<a id='n3586' href='#n3586'>3586</a>
<a id='n3587' href='#n3587'>3587</a>
<a id='n3588' href='#n3588'>3588</a>
<a id='n3589' href='#n3589'>3589</a>
<a id='n3590' href='#n3590'>3590</a>
<a id='n3591' href='#n3591'>3591</a>
<a id='n3592' href='#n3592'>3592</a>
<a id='n3593' href='#n3593'>3593</a>
<a id='n3594' href='#n3594'>3594</a>
<a id='n3595' href='#n3595'>3595</a>
<a id='n3596' href='#n3596'>3596</a>
<a id='n3597' href='#n3597'>3597</a>
<a id='n3598' href='#n3598'>3598</a>
<a id='n3599' href='#n3599'>3599</a>
<a id='n3600' href='#n3600'>3600</a>
<a id='n3601' href='#n3601'>3601</a>
<a id='n3602' href='#n3602'>3602</a>
<a id='n3603' href='#n3603'>3603</a>
<a id='n3604' href='#n3604'>3604</a>
<a id='n3605' href='#n3605'>3605</a>
<a id='n3606' href='#n3606'>3606</a>
<a id='n3607' href='#n3607'>3607</a>
<a id='n3608' href='#n3608'>3608</a>
<a id='n3609' href='#n3609'>3609</a>
<a id='n3610' href='#n3610'>3610</a>
<a id='n3611' href='#n3611'>3611</a>
<a id='n3612' href='#n3612'>3612</a>
<a id='n3613' href='#n3613'>3613</a>
<a id='n3614' href='#n3614'>3614</a>
<a id='n3615' href='#n3615'>3615</a>
<a id='n3616' href='#n3616'>3616</a>
<a id='n3617' href='#n3617'>3617</a>
<a id='n3618' href='#n3618'>3618</a>
<a id='n3619' href='#n3619'>3619</a>
<a id='n3620' href='#n3620'>3620</a>
<a id='n3621' href='#n3621'>3621</a>
<a id='n3622' href='#n3622'>3622</a>
<a id='n3623' href='#n3623'>3623</a>
<a id='n3624' href='#n3624'>3624</a>
<a id='n3625' href='#n3625'>3625</a>
<a id='n3626' href='#n3626'>3626</a>
<a id='n3627' href='#n3627'>3627</a>
<a id='n3628' href='#n3628'>3628</a>
<a id='n3629' href='#n3629'>3629</a>
<a id='n3630' href='#n3630'>3630</a>
<a id='n3631' href='#n3631'>3631</a>
<a id='n3632' href='#n3632'>3632</a>
<a id='n3633' href='#n3633'>3633</a>
<a id='n3634' href='#n3634'>3634</a>
<a id='n3635' href='#n3635'>3635</a>
<a id='n3636' href='#n3636'>3636</a>
<a id='n3637' href='#n3637'>3637</a>
<a id='n3638' href='#n3638'>3638</a>
<a id='n3639' href='#n3639'>3639</a>
<a id='n3640' href='#n3640'>3640</a>
<a id='n3641' href='#n3641'>3641</a>
<a id='n3642' href='#n3642'>3642</a>
<a id='n3643' href='#n3643'>3643</a>
<a id='n3644' href='#n3644'>3644</a>
<a id='n3645' href='#n3645'>3645</a>
<a id='n3646' href='#n3646'>3646</a>
<a id='n3647' href='#n3647'>3647</a>
<a id='n3648' href='#n3648'>3648</a>
<a id='n3649' href='#n3649'>3649</a>
<a id='n3650' href='#n3650'>3650</a>
<a id='n3651' href='#n3651'>3651</a>
<a id='n3652' href='#n3652'>3652</a>
<a id='n3653' href='#n3653'>3653</a>
<a id='n3654' href='#n3654'>3654</a>
<a id='n3655' href='#n3655'>3655</a>
<a id='n3656' href='#n3656'>3656</a>
<a id='n3657' href='#n3657'>3657</a>
<a id='n3658' href='#n3658'>3658</a>
<a id='n3659' href='#n3659'>3659</a>
<a id='n3660' href='#n3660'>3660</a>
<a id='n3661' href='#n3661'>3661</a>
<a id='n3662' href='#n3662'>3662</a>
<a id='n3663' href='#n3663'>3663</a>
<a id='n3664' href='#n3664'>3664</a>
<a id='n3665' href='#n3665'>3665</a>
<a id='n3666' href='#n3666'>3666</a>
<a id='n3667' href='#n3667'>3667</a>
<a id='n3668' href='#n3668'>3668</a>
<a id='n3669' href='#n3669'>3669</a>
<a id='n3670' href='#n3670'>3670</a>
<a id='n3671' href='#n3671'>3671</a>
<a id='n3672' href='#n3672'>3672</a>
<a id='n3673' href='#n3673'>3673</a>
<a id='n3674' href='#n3674'>3674</a>
<a id='n3675' href='#n3675'>3675</a>
<a id='n3676' href='#n3676'>3676</a>
<a id='n3677' href='#n3677'>3677</a>
<a id='n3678' href='#n3678'>3678</a>
<a id='n3679' href='#n3679'>3679</a>
<a id='n3680' href='#n3680'>3680</a>
<a id='n3681' href='#n3681'>3681</a>
<a id='n3682' href='#n3682'>3682</a>
<a id='n3683' href='#n3683'>3683</a>
<a id='n3684' href='#n3684'>3684</a>
<a id='n3685' href='#n3685'>3685</a>
<a id='n3686' href='#n3686'>3686</a>
<a id='n3687' href='#n3687'>3687</a>
<a id='n3688' href='#n3688'>3688</a>
<a id='n3689' href='#n3689'>3689</a>
<a id='n3690' href='#n3690'>3690</a>
<a id='n3691' href='#n3691'>3691</a>
<a id='n3692' href='#n3692'>3692</a>
<a id='n3693' href='#n3693'>3693</a>
<a id='n3694' href='#n3694'>3694</a>
<a id='n3695' href='#n3695'>3695</a>
<a id='n3696' href='#n3696'>3696</a>
<a id='n3697' href='#n3697'>3697</a>
<a id='n3698' href='#n3698'>3698</a>
<a id='n3699' href='#n3699'>3699</a>
<a id='n3700' href='#n3700'>3700</a>
<a id='n3701' href='#n3701'>3701</a>
<a id='n3702' href='#n3702'>3702</a>
<a id='n3703' href='#n3703'>3703</a>
<a id='n3704' href='#n3704'>3704</a>
<a id='n3705' href='#n3705'>3705</a>
<a id='n3706' href='#n3706'>3706</a>
<a id='n3707' href='#n3707'>3707</a>
<a id='n3708' href='#n3708'>3708</a>
<a id='n3709' href='#n3709'>3709</a>
<a id='n3710' href='#n3710'>3710</a>
<a id='n3711' href='#n3711'>3711</a>
<a id='n3712' href='#n3712'>3712</a>
<a id='n3713' href='#n3713'>3713</a>
<a id='n3714' href='#n3714'>3714</a>
<a id='n3715' href='#n3715'>3715</a>
<a id='n3716' href='#n3716'>3716</a>
<a id='n3717' href='#n3717'>3717</a>
<a id='n3718' href='#n3718'>3718</a>
<a id='n3719' href='#n3719'>3719</a>
<a id='n3720' href='#n3720'>3720</a>
<a id='n3721' href='#n3721'>3721</a>
<a id='n3722' href='#n3722'>3722</a>
<a id='n3723' href='#n3723'>3723</a>
<a id='n3724' href='#n3724'>3724</a>
<a id='n3725' href='#n3725'>3725</a>
<a id='n3726' href='#n3726'>3726</a>
<a id='n3727' href='#n3727'>3727</a>
<a id='n3728' href='#n3728'>3728</a>
<a id='n3729' href='#n3729'>3729</a>
<a id='n3730' href='#n3730'>3730</a>
<a id='n3731' href='#n3731'>3731</a>
<a id='n3732' href='#n3732'>3732</a>
<a id='n3733' href='#n3733'>3733</a>
<a id='n3734' href='#n3734'>3734</a>
<a id='n3735' href='#n3735'>3735</a>
<a id='n3736' href='#n3736'>3736</a>
<a id='n3737' href='#n3737'>3737</a>
<a id='n3738' href='#n3738'>3738</a>
<a id='n3739' href='#n3739'>3739</a>
<a id='n3740' href='#n3740'>3740</a>
<a id='n3741' href='#n3741'>3741</a>
<a id='n3742' href='#n3742'>3742</a>
<a id='n3743' href='#n3743'>3743</a>
<a id='n3744' href='#n3744'>3744</a>
<a id='n3745' href='#n3745'>3745</a>
<a id='n3746' href='#n3746'>3746</a>
<a id='n3747' href='#n3747'>3747</a>
<a id='n3748' href='#n3748'>3748</a>
<a id='n3749' href='#n3749'>3749</a>
<a id='n3750' href='#n3750'>3750</a>
<a id='n3751' href='#n3751'>3751</a>
<a id='n3752' href='#n3752'>3752</a>
<a id='n3753' href='#n3753'>3753</a>
<a id='n3754' href='#n3754'>3754</a>
<a id='n3755' href='#n3755'>3755</a>
<a id='n3756' href='#n3756'>3756</a>
<a id='n3757' href='#n3757'>3757</a>
<a id='n3758' href='#n3758'>3758</a>
<a id='n3759' href='#n3759'>3759</a>
<a id='n3760' href='#n3760'>3760</a>
<a id='n3761' href='#n3761'>3761</a>
<a id='n3762' href='#n3762'>3762</a>
<a id='n3763' href='#n3763'>3763</a>
<a id='n3764' href='#n3764'>3764</a>
<a id='n3765' href='#n3765'>3765</a>
<a id='n3766' href='#n3766'>3766</a>
<a id='n3767' href='#n3767'>3767</a>
<a id='n3768' href='#n3768'>3768</a>
<a id='n3769' href='#n3769'>3769</a>
<a id='n3770' href='#n3770'>3770</a>
<a id='n3771' href='#n3771'>3771</a>
<a id='n3772' href='#n3772'>3772</a>
<a id='n3773' href='#n3773'>3773</a>
<a id='n3774' href='#n3774'>3774</a>
<a id='n3775' href='#n3775'>3775</a>
<a id='n3776' href='#n3776'>3776</a>
<a id='n3777' href='#n3777'>3777</a>
<a id='n3778' href='#n3778'>3778</a>
<a id='n3779' href='#n3779'>3779</a>
<a id='n3780' href='#n3780'>3780</a>
<a id='n3781' href='#n3781'>3781</a>
<a id='n3782' href='#n3782'>3782</a>
<a id='n3783' href='#n3783'>3783</a>
<a id='n3784' href='#n3784'>3784</a>
<a id='n3785' href='#n3785'>3785</a>
<a id='n3786' href='#n3786'>3786</a>
<a id='n3787' href='#n3787'>3787</a>
<a id='n3788' href='#n3788'>3788</a>
<a id='n3789' href='#n3789'>3789</a>
<a id='n3790' href='#n3790'>3790</a>
<a id='n3791' href='#n3791'>3791</a>
<a id='n3792' href='#n3792'>3792</a>
<a id='n3793' href='#n3793'>3793</a>
<a id='n3794' href='#n3794'>3794</a>
<a id='n3795' href='#n3795'>3795</a>
<a id='n3796' href='#n3796'>3796</a>
<a id='n3797' href='#n3797'>3797</a>
<a id='n3798' href='#n3798'>3798</a>
<a id='n3799' href='#n3799'>3799</a>
<a id='n3800' href='#n3800'>3800</a>
<a id='n3801' href='#n3801'>3801</a>
<a id='n3802' href='#n3802'>3802</a>
<a id='n3803' href='#n3803'>3803</a>
<a id='n3804' href='#n3804'>3804</a>
<a id='n3805' href='#n3805'>3805</a>
<a id='n3806' href='#n3806'>3806</a>
<a id='n3807' href='#n3807'>3807</a>
<a id='n3808' href='#n3808'>3808</a>
<a id='n3809' href='#n3809'>3809</a>
<a id='n3810' href='#n3810'>3810</a>
<a id='n3811' href='#n3811'>3811</a>
<a id='n3812' href='#n3812'>3812</a>
<a id='n3813' href='#n3813'>3813</a>
<a id='n3814' href='#n3814'>3814</a>
<a id='n3815' href='#n3815'>3815</a>
<a id='n3816' href='#n3816'>3816</a>
<a id='n3817' href='#n3817'>3817</a>
<a id='n3818' href='#n3818'>3818</a>
<a id='n3819' href='#n3819'>3819</a>
<a id='n3820' href='#n3820'>3820</a>
<a id='n3821' href='#n3821'>3821</a>
<a id='n3822' href='#n3822'>3822</a>
<a id='n3823' href='#n3823'>3823</a>
<a id='n3824' href='#n3824'>3824</a>
<a id='n3825' href='#n3825'>3825</a>
<a id='n3826' href='#n3826'>3826</a>
<a id='n3827' href='#n3827'>3827</a>
<a id='n3828' href='#n3828'>3828</a>
<a id='n3829' href='#n3829'>3829</a>
<a id='n3830' href='#n3830'>3830</a>
<a id='n3831' href='#n3831'>3831</a>
<a id='n3832' href='#n3832'>3832</a>
<a id='n3833' href='#n3833'>3833</a>
<a id='n3834' href='#n3834'>3834</a>
<a id='n3835' href='#n3835'>3835</a>
<a id='n3836' href='#n3836'>3836</a>
<a id='n3837' href='#n3837'>3837</a>
<a id='n3838' href='#n3838'>3838</a>
<a id='n3839' href='#n3839'>3839</a>
<a id='n3840' href='#n3840'>3840</a>
<a id='n3841' href='#n3841'>3841</a>
<a id='n3842' href='#n3842'>3842</a>
<a id='n3843' href='#n3843'>3843</a>
<a id='n3844' href='#n3844'>3844</a>
<a id='n3845' href='#n3845'>3845</a>
<a id='n3846' href='#n3846'>3846</a>
<a id='n3847' href='#n3847'>3847</a>
<a id='n3848' href='#n3848'>3848</a>
<a id='n3849' href='#n3849'>3849</a>
<a id='n3850' href='#n3850'>3850</a>
<a id='n3851' href='#n3851'>3851</a>
<a id='n3852' href='#n3852'>3852</a>
<a id='n3853' href='#n3853'>3853</a>
<a id='n3854' href='#n3854'>3854</a>
<a id='n3855' href='#n3855'>3855</a>
<a id='n3856' href='#n3856'>3856</a>
<a id='n3857' href='#n3857'>3857</a>
<a id='n3858' href='#n3858'>3858</a>
<a id='n3859' href='#n3859'>3859</a>
<a id='n3860' href='#n3860'>3860</a>
<a id='n3861' href='#n3861'>3861</a>
<a id='n3862' href='#n3862'>3862</a>
<a id='n3863' href='#n3863'>3863</a>
<a id='n3864' href='#n3864'>3864</a>
<a id='n3865' href='#n3865'>3865</a>
<a id='n3866' href='#n3866'>3866</a>
<a id='n3867' href='#n3867'>3867</a>
<a id='n3868' href='#n3868'>3868</a>
<a id='n3869' href='#n3869'>3869</a>
<a id='n3870' href='#n3870'>3870</a>
<a id='n3871' href='#n3871'>3871</a>
<a id='n3872' href='#n3872'>3872</a>
<a id='n3873' href='#n3873'>3873</a>
<a id='n3874' href='#n3874'>3874</a>
<a id='n3875' href='#n3875'>3875</a>
<a id='n3876' href='#n3876'>3876</a>
<a id='n3877' href='#n3877'>3877</a>
<a id='n3878' href='#n3878'>3878</a>
<a id='n3879' href='#n3879'>3879</a>
<a id='n3880' href='#n3880'>3880</a>
<a id='n3881' href='#n3881'>3881</a>
<a id='n3882' href='#n3882'>3882</a>
<a id='n3883' href='#n3883'>3883</a>
<a id='n3884' href='#n3884'>3884</a>
<a id='n3885' href='#n3885'>3885</a>
<a id='n3886' href='#n3886'>3886</a>
<a id='n3887' href='#n3887'>3887</a>
<a id='n3888' href='#n3888'>3888</a>
<a id='n3889' href='#n3889'>3889</a>
<a id='n3890' href='#n3890'>3890</a>
<a id='n3891' href='#n3891'>3891</a>
<a id='n3892' href='#n3892'>3892</a>
<a id='n3893' href='#n3893'>3893</a>
<a id='n3894' href='#n3894'>3894</a>
<a id='n3895' href='#n3895'>3895</a>
<a id='n3896' href='#n3896'>3896</a>
<a id='n3897' href='#n3897'>3897</a>
<a id='n3898' href='#n3898'>3898</a>
<a id='n3899' href='#n3899'>3899</a>
<a id='n3900' href='#n3900'>3900</a>
<a id='n3901' href='#n3901'>3901</a>
<a id='n3902' href='#n3902'>3902</a>
<a id='n3903' href='#n3903'>3903</a>
<a id='n3904' href='#n3904'>3904</a>
<a id='n3905' href='#n3905'>3905</a>
<a id='n3906' href='#n3906'>3906</a>
<a id='n3907' href='#n3907'>3907</a>
<a id='n3908' href='#n3908'>3908</a>
<a id='n3909' href='#n3909'>3909</a>
<a id='n3910' href='#n3910'>3910</a>
<a id='n3911' href='#n3911'>3911</a>
<a id='n3912' href='#n3912'>3912</a>
<a id='n3913' href='#n3913'>3913</a>
<a id='n3914' href='#n3914'>3914</a>
<a id='n3915' href='#n3915'>3915</a>
<a id='n3916' href='#n3916'>3916</a>
<a id='n3917' href='#n3917'>3917</a>
<a id='n3918' href='#n3918'>3918</a>
<a id='n3919' href='#n3919'>3919</a>
<a id='n3920' href='#n3920'>3920</a>
<a id='n3921' href='#n3921'>3921</a>
<a id='n3922' href='#n3922'>3922</a>
<a id='n3923' href='#n3923'>3923</a>
<a id='n3924' href='#n3924'>3924</a>
<a id='n3925' href='#n3925'>3925</a>
<a id='n3926' href='#n3926'>3926</a>
<a id='n3927' href='#n3927'>3927</a>
<a id='n3928' href='#n3928'>3928</a>
<a id='n3929' href='#n3929'>3929</a>
<a id='n3930' href='#n3930'>3930</a>
<a id='n3931' href='#n3931'>3931</a>
<a id='n3932' href='#n3932'>3932</a>
<a id='n3933' href='#n3933'>3933</a>
<a id='n3934' href='#n3934'>3934</a>
<a id='n3935' href='#n3935'>3935</a>
<a id='n3936' href='#n3936'>3936</a>
<a id='n3937' href='#n3937'>3937</a>
<a id='n3938' href='#n3938'>3938</a>
<a id='n3939' href='#n3939'>3939</a>
<a id='n3940' href='#n3940'>3940</a>
<a id='n3941' href='#n3941'>3941</a>
<a id='n3942' href='#n3942'>3942</a>
<a id='n3943' href='#n3943'>3943</a>
<a id='n3944' href='#n3944'>3944</a>
<a id='n3945' href='#n3945'>3945</a>
<a id='n3946' href='#n3946'>3946</a>
<a id='n3947' href='#n3947'>3947</a>
<a id='n3948' href='#n3948'>3948</a>
<a id='n3949' href='#n3949'>3949</a>
<a id='n3950' href='#n3950'>3950</a>
<a id='n3951' href='#n3951'>3951</a>
<a id='n3952' href='#n3952'>3952</a>
<a id='n3953' href='#n3953'>3953</a>
<a id='n3954' href='#n3954'>3954</a>
<a id='n3955' href='#n3955'>3955</a>
<a id='n3956' href='#n3956'>3956</a>
<a id='n3957' href='#n3957'>3957</a>
<a id='n3958' href='#n3958'>3958</a>
<a id='n3959' href='#n3959'>3959</a>
<a id='n3960' href='#n3960'>3960</a>
<a id='n3961' href='#n3961'>3961</a>
<a id='n3962' href='#n3962'>3962</a>
<a id='n3963' href='#n3963'>3963</a>
<a id='n3964' href='#n3964'>3964</a>
<a id='n3965' href='#n3965'>3965</a>
<a id='n3966' href='#n3966'>3966</a>
<a id='n3967' href='#n3967'>3967</a>
<a id='n3968' href='#n3968'>3968</a>
<a id='n3969' href='#n3969'>3969</a>
<a id='n3970' href='#n3970'>3970</a>
<a id='n3971' href='#n3971'>3971</a>
<a id='n3972' href='#n3972'>3972</a>
<a id='n3973' href='#n3973'>3973</a>
<a id='n3974' href='#n3974'>3974</a>
<a id='n3975' href='#n3975'>3975</a>
<a id='n3976' href='#n3976'>3976</a>
<a id='n3977' href='#n3977'>3977</a>
<a id='n3978' href='#n3978'>3978</a>
<a id='n3979' href='#n3979'>3979</a>
<a id='n3980' href='#n3980'>3980</a>
<a id='n3981' href='#n3981'>3981</a>
<a id='n3982' href='#n3982'>3982</a>
<a id='n3983' href='#n3983'>3983</a>
<a id='n3984' href='#n3984'>3984</a>
<a id='n3985' href='#n3985'>3985</a>
<a id='n3986' href='#n3986'>3986</a>
<a id='n3987' href='#n3987'>3987</a>
<a id='n3988' href='#n3988'>3988</a>
<a id='n3989' href='#n3989'>3989</a>
<a id='n3990' href='#n3990'>3990</a>
<a id='n3991' href='#n3991'>3991</a>
<a id='n3992' href='#n3992'>3992</a>
<a id='n3993' href='#n3993'>3993</a>
<a id='n3994' href='#n3994'>3994</a>
<a id='n3995' href='#n3995'>3995</a>
<a id='n3996' href='#n3996'>3996</a>
<a id='n3997' href='#n3997'>3997</a>
<a id='n3998' href='#n3998'>3998</a>
<a id='n3999' href='#n3999'>3999</a>
<a id='n4000' href='#n4000'>4000</a>
<a id='n4001' href='#n4001'>4001</a>
<a id='n4002' href='#n4002'>4002</a>
<a id='n4003' href='#n4003'>4003</a>
<a id='n4004' href='#n4004'>4004</a>
<a id='n4005' href='#n4005'>4005</a>
<a id='n4006' href='#n4006'>4006</a>
<a id='n4007' href='#n4007'>4007</a>
<a id='n4008' href='#n4008'>4008</a>
<a id='n4009' href='#n4009'>4009</a>
<a id='n4010' href='#n4010'>4010</a>
<a id='n4011' href='#n4011'>4011</a>
<a id='n4012' href='#n4012'>4012</a>
<a id='n4013' href='#n4013'>4013</a>
<a id='n4014' href='#n4014'>4014</a>
<a id='n4015' href='#n4015'>4015</a>
<a id='n4016' href='#n4016'>4016</a>
<a id='n4017' href='#n4017'>4017</a>
<a id='n4018' href='#n4018'>4018</a>
<a id='n4019' href='#n4019'>4019</a>
<a id='n4020' href='#n4020'>4020</a>
<a id='n4021' href='#n4021'>4021</a>
<a id='n4022' href='#n4022'>4022</a>
<a id='n4023' href='#n4023'>4023</a>
<a id='n4024' href='#n4024'>4024</a>
<a id='n4025' href='#n4025'>4025</a>
<a id='n4026' href='#n4026'>4026</a>
<a id='n4027' href='#n4027'>4027</a>
<a id='n4028' href='#n4028'>4028</a>
<a id='n4029' href='#n4029'>4029</a>
<a id='n4030' href='#n4030'>4030</a>
<a id='n4031' href='#n4031'>4031</a>
<a id='n4032' href='#n4032'>4032</a>
<a id='n4033' href='#n4033'>4033</a>
<a id='n4034' href='#n4034'>4034</a>
<a id='n4035' href='#n4035'>4035</a>
<a id='n4036' href='#n4036'>4036</a>
<a id='n4037' href='#n4037'>4037</a>
<a id='n4038' href='#n4038'>4038</a>
<a id='n4039' href='#n4039'>4039</a>
<a id='n4040' href='#n4040'>4040</a>
<a id='n4041' href='#n4041'>4041</a>
<a id='n4042' href='#n4042'>4042</a>
<a id='n4043' href='#n4043'>4043</a>
<a id='n4044' href='#n4044'>4044</a>
<a id='n4045' href='#n4045'>4045</a>
<a id='n4046' href='#n4046'>4046</a>
<a id='n4047' href='#n4047'>4047</a>
<a id='n4048' href='#n4048'>4048</a>
<a id='n4049' href='#n4049'>4049</a>
<a id='n4050' href='#n4050'>4050</a>
<a id='n4051' href='#n4051'>4051</a>
<a id='n4052' href='#n4052'>4052</a>
<a id='n4053' href='#n4053'>4053</a>
<a id='n4054' href='#n4054'>4054</a>
<a id='n4055' href='#n4055'>4055</a>
<a id='n4056' href='#n4056'>4056</a>
<a id='n4057' href='#n4057'>4057</a>
<a id='n4058' href='#n4058'>4058</a>
<a id='n4059' href='#n4059'>4059</a>
<a id='n4060' href='#n4060'>4060</a>
<a id='n4061' href='#n4061'>4061</a>
<a id='n4062' href='#n4062'>4062</a>
<a id='n4063' href='#n4063'>4063</a>
<a id='n4064' href='#n4064'>4064</a>
<a id='n4065' href='#n4065'>4065</a>
<a id='n4066' href='#n4066'>4066</a>
<a id='n4067' href='#n4067'>4067</a>
<a id='n4068' href='#n4068'>4068</a>
<a id='n4069' href='#n4069'>4069</a>
<a id='n4070' href='#n4070'>4070</a>
<a id='n4071' href='#n4071'>4071</a>
<a id='n4072' href='#n4072'>4072</a>
<a id='n4073' href='#n4073'>4073</a>
<a id='n4074' href='#n4074'>4074</a>
<a id='n4075' href='#n4075'>4075</a>
<a id='n4076' href='#n4076'>4076</a>
<a id='n4077' href='#n4077'>4077</a>
<a id='n4078' href='#n4078'>4078</a>
<a id='n4079' href='#n4079'>4079</a>
<a id='n4080' href='#n4080'>4080</a>
<a id='n4081' href='#n4081'>4081</a>
<a id='n4082' href='#n4082'>4082</a>
<a id='n4083' href='#n4083'>4083</a>
<a id='n4084' href='#n4084'>4084</a>
<a id='n4085' href='#n4085'>4085</a>
<a id='n4086' href='#n4086'>4086</a>
<a id='n4087' href='#n4087'>4087</a>
<a id='n4088' href='#n4088'>4088</a>
<a id='n4089' href='#n4089'>4089</a>
<a id='n4090' href='#n4090'>4090</a>
<a id='n4091' href='#n4091'>4091</a>
<a id='n4092' href='#n4092'>4092</a>
<a id='n4093' href='#n4093'>4093</a>
<a id='n4094' href='#n4094'>4094</a>
<a id='n4095' href='#n4095'>4095</a>
<a id='n4096' href='#n4096'>4096</a>
<a id='n4097' href='#n4097'>4097</a>
<a id='n4098' href='#n4098'>4098</a>
<a id='n4099' href='#n4099'>4099</a>
<a id='n4100' href='#n4100'>4100</a>
<a id='n4101' href='#n4101'>4101</a>
<a id='n4102' href='#n4102'>4102</a>
<a id='n4103' href='#n4103'>4103</a>
<a id='n4104' href='#n4104'>4104</a>
<a id='n4105' href='#n4105'>4105</a>
<a id='n4106' href='#n4106'>4106</a>
<a id='n4107' href='#n4107'>4107</a>
<a id='n4108' href='#n4108'>4108</a>
<a id='n4109' href='#n4109'>4109</a>
<a id='n4110' href='#n4110'>4110</a>
<a id='n4111' href='#n4111'>4111</a>
<a id='n4112' href='#n4112'>4112</a>
<a id='n4113' href='#n4113'>4113</a>
<a id='n4114' href='#n4114'>4114</a>
<a id='n4115' href='#n4115'>4115</a>
<a id='n4116' href='#n4116'>4116</a>
<a id='n4117' href='#n4117'>4117</a>
<a id='n4118' href='#n4118'>4118</a>
<a id='n4119' href='#n4119'>4119</a>
<a id='n4120' href='#n4120'>4120</a>
<a id='n4121' href='#n4121'>4121</a>
<a id='n4122' href='#n4122'>4122</a>
<a id='n4123' href='#n4123'>4123</a>
<a id='n4124' href='#n4124'>4124</a>
<a id='n4125' href='#n4125'>4125</a>
<a id='n4126' href='#n4126'>4126</a>
<a id='n4127' href='#n4127'>4127</a>
<a id='n4128' href='#n4128'>4128</a>
<a id='n4129' href='#n4129'>4129</a>
<a id='n4130' href='#n4130'>4130</a>
<a id='n4131' href='#n4131'>4131</a>
<a id='n4132' href='#n4132'>4132</a>
<a id='n4133' href='#n4133'>4133</a>
<a id='n4134' href='#n4134'>4134</a>
<a id='n4135' href='#n4135'>4135</a>
<a id='n4136' href='#n4136'>4136</a>
<a id='n4137' href='#n4137'>4137</a>
<a id='n4138' href='#n4138'>4138</a>
<a id='n4139' href='#n4139'>4139</a>
<a id='n4140' href='#n4140'>4140</a>
<a id='n4141' href='#n4141'>4141</a>
<a id='n4142' href='#n4142'>4142</a>
<a id='n4143' href='#n4143'>4143</a>
<a id='n4144' href='#n4144'>4144</a>
<a id='n4145' href='#n4145'>4145</a>
<a id='n4146' href='#n4146'>4146</a>
<a id='n4147' href='#n4147'>4147</a>
<a id='n4148' href='#n4148'>4148</a>
<a id='n4149' href='#n4149'>4149</a>
<a id='n4150' href='#n4150'>4150</a>
<a id='n4151' href='#n4151'>4151</a>
<a id='n4152' href='#n4152'>4152</a>
<a id='n4153' href='#n4153'>4153</a>
<a id='n4154' href='#n4154'>4154</a>
<a id='n4155' href='#n4155'>4155</a>
<a id='n4156' href='#n4156'>4156</a>
<a id='n4157' href='#n4157'>4157</a>
<a id='n4158' href='#n4158'>4158</a>
<a id='n4159' href='#n4159'>4159</a>
<a id='n4160' href='#n4160'>4160</a>
<a id='n4161' href='#n4161'>4161</a>
<a id='n4162' href='#n4162'>4162</a>
<a id='n4163' href='#n4163'>4163</a>
<a id='n4164' href='#n4164'>4164</a>
<a id='n4165' href='#n4165'>4165</a>
<a id='n4166' href='#n4166'>4166</a>
<a id='n4167' href='#n4167'>4167</a>
<a id='n4168' href='#n4168'>4168</a>
<a id='n4169' href='#n4169'>4169</a>
<a id='n4170' href='#n4170'>4170</a>
<a id='n4171' href='#n4171'>4171</a>
<a id='n4172' href='#n4172'>4172</a>
<a id='n4173' href='#n4173'>4173</a>
<a id='n4174' href='#n4174'>4174</a>
<a id='n4175' href='#n4175'>4175</a>
<a id='n4176' href='#n4176'>4176</a>
<a id='n4177' href='#n4177'>4177</a>
<a id='n4178' href='#n4178'>4178</a>
<a id='n4179' href='#n4179'>4179</a>
<a id='n4180' href='#n4180'>4180</a>
<a id='n4181' href='#n4181'>4181</a>
<a id='n4182' href='#n4182'>4182</a>
<a id='n4183' href='#n4183'>4183</a>
<a id='n4184' href='#n4184'>4184</a>
<a id='n4185' href='#n4185'>4185</a>
<a id='n4186' href='#n4186'>4186</a>
<a id='n4187' href='#n4187'>4187</a>
<a id='n4188' href='#n4188'>4188</a>
<a id='n4189' href='#n4189'>4189</a>
<a id='n4190' href='#n4190'>4190</a>
<a id='n4191' href='#n4191'>4191</a>
<a id='n4192' href='#n4192'>4192</a>
<a id='n4193' href='#n4193'>4193</a>
<a id='n4194' href='#n4194'>4194</a>
<a id='n4195' href='#n4195'>4195</a>
<a id='n4196' href='#n4196'>4196</a>
<a id='n4197' href='#n4197'>4197</a>
<a id='n4198' href='#n4198'>4198</a>
<a id='n4199' href='#n4199'>4199</a>
<a id='n4200' href='#n4200'>4200</a>
<a id='n4201' href='#n4201'>4201</a>
<a id='n4202' href='#n4202'>4202</a>
<a id='n4203' href='#n4203'>4203</a>
<a id='n4204' href='#n4204'>4204</a>
<a id='n4205' href='#n4205'>4205</a>
<a id='n4206' href='#n4206'>4206</a>
<a id='n4207' href='#n4207'>4207</a>
<a id='n4208' href='#n4208'>4208</a>
<a id='n4209' href='#n4209'>4209</a>
<a id='n4210' href='#n4210'>4210</a>
<a id='n4211' href='#n4211'>4211</a>
<a id='n4212' href='#n4212'>4212</a>
<a id='n4213' href='#n4213'>4213</a>
<a id='n4214' href='#n4214'>4214</a>
<a id='n4215' href='#n4215'>4215</a>
<a id='n4216' href='#n4216'>4216</a>
<a id='n4217' href='#n4217'>4217</a>
<a id='n4218' href='#n4218'>4218</a>
<a id='n4219' href='#n4219'>4219</a>
<a id='n4220' href='#n4220'>4220</a>
<a id='n4221' href='#n4221'>4221</a>
<a id='n4222' href='#n4222'>4222</a>
<a id='n4223' href='#n4223'>4223</a>
<a id='n4224' href='#n4224'>4224</a>
<a id='n4225' href='#n4225'>4225</a>
<a id='n4226' href='#n4226'>4226</a>
<a id='n4227' href='#n4227'>4227</a>
<a id='n4228' href='#n4228'>4228</a>
<a id='n4229' href='#n4229'>4229</a>
<a id='n4230' href='#n4230'>4230</a>
<a id='n4231' href='#n4231'>4231</a>
<a id='n4232' href='#n4232'>4232</a>
<a id='n4233' href='#n4233'>4233</a>
<a id='n4234' href='#n4234'>4234</a>
<a id='n4235' href='#n4235'>4235</a>
<a id='n4236' href='#n4236'>4236</a>
<a id='n4237' href='#n4237'>4237</a>
<a id='n4238' href='#n4238'>4238</a>
<a id='n4239' href='#n4239'>4239</a>
<a id='n4240' href='#n4240'>4240</a>
<a id='n4241' href='#n4241'>4241</a>
<a id='n4242' href='#n4242'>4242</a>
<a id='n4243' href='#n4243'>4243</a>
<a id='n4244' href='#n4244'>4244</a>
<a id='n4245' href='#n4245'>4245</a>
<a id='n4246' href='#n4246'>4246</a>
<a id='n4247' href='#n4247'>4247</a>
<a id='n4248' href='#n4248'>4248</a>
<a id='n4249' href='#n4249'>4249</a>
<a id='n4250' href='#n4250'>4250</a>
<a id='n4251' href='#n4251'>4251</a>
<a id='n4252' href='#n4252'>4252</a>
<a id='n4253' href='#n4253'>4253</a>
<a id='n4254' href='#n4254'>4254</a>
<a id='n4255' href='#n4255'>4255</a>
<a id='n4256' href='#n4256'>4256</a>
<a id='n4257' href='#n4257'>4257</a>
<a id='n4258' href='#n4258'>4258</a>
<a id='n4259' href='#n4259'>4259</a>
<a id='n4260' href='#n4260'>4260</a>
<a id='n4261' href='#n4261'>4261</a>
<a id='n4262' href='#n4262'>4262</a>
<a id='n4263' href='#n4263'>4263</a>
<a id='n4264' href='#n4264'>4264</a>
<a id='n4265' href='#n4265'>4265</a>
<a id='n4266' href='#n4266'>4266</a>
<a id='n4267' href='#n4267'>4267</a>
<a id='n4268' href='#n4268'>4268</a>
<a id='n4269' href='#n4269'>4269</a>
<a id='n4270' href='#n4270'>4270</a>
<a id='n4271' href='#n4271'>4271</a>
<a id='n4272' href='#n4272'>4272</a>
<a id='n4273' href='#n4273'>4273</a>
<a id='n4274' href='#n4274'>4274</a>
<a id='n4275' href='#n4275'>4275</a>
<a id='n4276' href='#n4276'>4276</a>
<a id='n4277' href='#n4277'>4277</a>
<a id='n4278' href='#n4278'>4278</a>
<a id='n4279' href='#n4279'>4279</a>
<a id='n4280' href='#n4280'>4280</a>
<a id='n4281' href='#n4281'>4281</a>
<a id='n4282' href='#n4282'>4282</a>
<a id='n4283' href='#n4283'>4283</a>
<a id='n4284' href='#n4284'>4284</a>
<a id='n4285' href='#n4285'>4285</a>
<a id='n4286' href='#n4286'>4286</a>
<a id='n4287' href='#n4287'>4287</a>
<a id='n4288' href='#n4288'>4288</a>
<a id='n4289' href='#n4289'>4289</a>
<a id='n4290' href='#n4290'>4290</a>
<a id='n4291' href='#n4291'>4291</a>
<a id='n4292' href='#n4292'>4292</a>
<a id='n4293' href='#n4293'>4293</a>
<a id='n4294' href='#n4294'>4294</a>
<a id='n4295' href='#n4295'>4295</a>
<a id='n4296' href='#n4296'>4296</a>
<a id='n4297' href='#n4297'>4297</a>
<a id='n4298' href='#n4298'>4298</a>
<a id='n4299' href='#n4299'>4299</a>
<a id='n4300' href='#n4300'>4300</a>
<a id='n4301' href='#n4301'>4301</a>
<a id='n4302' href='#n4302'>4302</a>
<a id='n4303' href='#n4303'>4303</a>
<a id='n4304' href='#n4304'>4304</a>
<a id='n4305' href='#n4305'>4305</a>
<a id='n4306' href='#n4306'>4306</a>
<a id='n4307' href='#n4307'>4307</a>
<a id='n4308' href='#n4308'>4308</a>
<a id='n4309' href='#n4309'>4309</a>
<a id='n4310' href='#n4310'>4310</a>
<a id='n4311' href='#n4311'>4311</a>
<a id='n4312' href='#n4312'>4312</a>
<a id='n4313' href='#n4313'>4313</a>
<a id='n4314' href='#n4314'>4314</a>
<a id='n4315' href='#n4315'>4315</a>
<a id='n4316' href='#n4316'>4316</a>
<a id='n4317' href='#n4317'>4317</a>
<a id='n4318' href='#n4318'>4318</a>
<a id='n4319' href='#n4319'>4319</a>
<a id='n4320' href='#n4320'>4320</a>
<a id='n4321' href='#n4321'>4321</a>
<a id='n4322' href='#n4322'>4322</a>
<a id='n4323' href='#n4323'>4323</a>
<a id='n4324' href='#n4324'>4324</a>
<a id='n4325' href='#n4325'>4325</a>
<a id='n4326' href='#n4326'>4326</a>
<a id='n4327' href='#n4327'>4327</a>
<a id='n4328' href='#n4328'>4328</a>
<a id='n4329' href='#n4329'>4329</a>
<a id='n4330' href='#n4330'>4330</a>
<a id='n4331' href='#n4331'>4331</a>
<a id='n4332' href='#n4332'>4332</a>
<a id='n4333' href='#n4333'>4333</a>
<a id='n4334' href='#n4334'>4334</a>
<a id='n4335' href='#n4335'>4335</a>
<a id='n4336' href='#n4336'>4336</a>
<a id='n4337' href='#n4337'>4337</a>
<a id='n4338' href='#n4338'>4338</a>
<a id='n4339' href='#n4339'>4339</a>
<a id='n4340' href='#n4340'>4340</a>
<a id='n4341' href='#n4341'>4341</a>
<a id='n4342' href='#n4342'>4342</a>
<a id='n4343' href='#n4343'>4343</a>
<a id='n4344' href='#n4344'>4344</a>
<a id='n4345' href='#n4345'>4345</a>
<a id='n4346' href='#n4346'>4346</a>
<a id='n4347' href='#n4347'>4347</a>
<a id='n4348' href='#n4348'>4348</a>
<a id='n4349' href='#n4349'>4349</a>
<a id='n4350' href='#n4350'>4350</a>
<a id='n4351' href='#n4351'>4351</a>
<a id='n4352' href='#n4352'>4352</a>
<a id='n4353' href='#n4353'>4353</a>
<a id='n4354' href='#n4354'>4354</a>
<a id='n4355' href='#n4355'>4355</a>
<a id='n4356' href='#n4356'>4356</a>
<a id='n4357' href='#n4357'>4357</a>
<a id='n4358' href='#n4358'>4358</a>
<a id='n4359' href='#n4359'>4359</a>
<a id='n4360' href='#n4360'>4360</a>
<a id='n4361' href='#n4361'>4361</a>
<a id='n4362' href='#n4362'>4362</a>
<a id='n4363' href='#n4363'>4363</a>
<a id='n4364' href='#n4364'>4364</a>
<a id='n4365' href='#n4365'>4365</a>
<a id='n4366' href='#n4366'>4366</a>
<a id='n4367' href='#n4367'>4367</a>
<a id='n4368' href='#n4368'>4368</a>
<a id='n4369' href='#n4369'>4369</a>
<a id='n4370' href='#n4370'>4370</a>
<a id='n4371' href='#n4371'>4371</a>
<a id='n4372' href='#n4372'>4372</a>
<a id='n4373' href='#n4373'>4373</a>
<a id='n4374' href='#n4374'>4374</a>
<a id='n4375' href='#n4375'>4375</a>
<a id='n4376' href='#n4376'>4376</a>
<a id='n4377' href='#n4377'>4377</a>
<a id='n4378' href='#n4378'>4378</a>
<a id='n4379' href='#n4379'>4379</a>
<a id='n4380' href='#n4380'>4380</a>
<a id='n4381' href='#n4381'>4381</a>
<a id='n4382' href='#n4382'>4382</a>
<a id='n4383' href='#n4383'>4383</a>
<a id='n4384' href='#n4384'>4384</a>
<a id='n4385' href='#n4385'>4385</a>
<a id='n4386' href='#n4386'>4386</a>
<a id='n4387' href='#n4387'>4387</a>
<a id='n4388' href='#n4388'>4388</a>
<a id='n4389' href='#n4389'>4389</a>
<a id='n4390' href='#n4390'>4390</a>
<a id='n4391' href='#n4391'>4391</a>
<a id='n4392' href='#n4392'>4392</a>
<a id='n4393' href='#n4393'>4393</a>
<a id='n4394' href='#n4394'>4394</a>
<a id='n4395' href='#n4395'>4395</a>
<a id='n4396' href='#n4396'>4396</a>
<a id='n4397' href='#n4397'>4397</a>
<a id='n4398' href='#n4398'>4398</a>
<a id='n4399' href='#n4399'>4399</a>
<a id='n4400' href='#n4400'>4400</a>
<a id='n4401' href='#n4401'>4401</a>
<a id='n4402' href='#n4402'>4402</a>
<a id='n4403' href='#n4403'>4403</a>
<a id='n4404' href='#n4404'>4404</a>
<a id='n4405' href='#n4405'>4405</a>
<a id='n4406' href='#n4406'>4406</a>
<a id='n4407' href='#n4407'>4407</a>
<a id='n4408' href='#n4408'>4408</a>
<a id='n4409' href='#n4409'>4409</a>
<a id='n4410' href='#n4410'>4410</a>
<a id='n4411' href='#n4411'>4411</a>
<a id='n4412' href='#n4412'>4412</a>
<a id='n4413' href='#n4413'>4413</a>
<a id='n4414' href='#n4414'>4414</a>
<a id='n4415' href='#n4415'>4415</a>
<a id='n4416' href='#n4416'>4416</a>
<a id='n4417' href='#n4417'>4417</a>
<a id='n4418' href='#n4418'>4418</a>
<a id='n4419' href='#n4419'>4419</a>
<a id='n4420' href='#n4420'>4420</a>
<a id='n4421' href='#n4421'>4421</a>
<a id='n4422' href='#n4422'>4422</a>
<a id='n4423' href='#n4423'>4423</a>
<a id='n4424' href='#n4424'>4424</a>
<a id='n4425' href='#n4425'>4425</a>
<a id='n4426' href='#n4426'>4426</a>
<a id='n4427' href='#n4427'>4427</a>
<a id='n4428' href='#n4428'>4428</a>
<a id='n4429' href='#n4429'>4429</a>
<a id='n4430' href='#n4430'>4430</a>
<a id='n4431' href='#n4431'>4431</a>
<a id='n4432' href='#n4432'>4432</a>
<a id='n4433' href='#n4433'>4433</a>
<a id='n4434' href='#n4434'>4434</a>
<a id='n4435' href='#n4435'>4435</a>
<a id='n4436' href='#n4436'>4436</a>
<a id='n4437' href='#n4437'>4437</a>
<a id='n4438' href='#n4438'>4438</a>
<a id='n4439' href='#n4439'>4439</a>
<a id='n4440' href='#n4440'>4440</a>
<a id='n4441' href='#n4441'>4441</a>
<a id='n4442' href='#n4442'>4442</a>
<a id='n4443' href='#n4443'>4443</a>
<a id='n4444' href='#n4444'>4444</a>
<a id='n4445' href='#n4445'>4445</a>
<a id='n4446' href='#n4446'>4446</a>
<a id='n4447' href='#n4447'>4447</a>
<a id='n4448' href='#n4448'>4448</a>
<a id='n4449' href='#n4449'>4449</a>
<a id='n4450' href='#n4450'>4450</a>
<a id='n4451' href='#n4451'>4451</a>
<a id='n4452' href='#n4452'>4452</a>
<a id='n4453' href='#n4453'>4453</a>
<a id='n4454' href='#n4454'>4454</a>
<a id='n4455' href='#n4455'>4455</a>
<a id='n4456' href='#n4456'>4456</a>
<a id='n4457' href='#n4457'>4457</a>
<a id='n4458' href='#n4458'>4458</a>
<a id='n4459' href='#n4459'>4459</a>
<a id='n4460' href='#n4460'>4460</a>
<a id='n4461' href='#n4461'>4461</a>
<a id='n4462' href='#n4462'>4462</a>
<a id='n4463' href='#n4463'>4463</a>
<a id='n4464' href='#n4464'>4464</a>
<a id='n4465' href='#n4465'>4465</a>
<a id='n4466' href='#n4466'>4466</a>
<a id='n4467' href='#n4467'>4467</a>
<a id='n4468' href='#n4468'>4468</a>
<a id='n4469' href='#n4469'>4469</a>
<a id='n4470' href='#n4470'>4470</a>
<a id='n4471' href='#n4471'>4471</a>
<a id='n4472' href='#n4472'>4472</a>
<a id='n4473' href='#n4473'>4473</a>
<a id='n4474' href='#n4474'>4474</a>
<a id='n4475' href='#n4475'>4475</a>
<a id='n4476' href='#n4476'>4476</a>
<a id='n4477' href='#n4477'>4477</a>
<a id='n4478' href='#n4478'>4478</a>
<a id='n4479' href='#n4479'>4479</a>
<a id='n4480' href='#n4480'>4480</a>
<a id='n4481' href='#n4481'>4481</a>
<a id='n4482' href='#n4482'>4482</a>
<a id='n4483' href='#n4483'>4483</a>
<a id='n4484' href='#n4484'>4484</a>
<a id='n4485' href='#n4485'>4485</a>
<a id='n4486' href='#n4486'>4486</a>
<a id='n4487' href='#n4487'>4487</a>
<a id='n4488' href='#n4488'>4488</a>
<a id='n4489' href='#n4489'>4489</a>
<a id='n4490' href='#n4490'>4490</a>
<a id='n4491' href='#n4491'>4491</a>
<a id='n4492' href='#n4492'>4492</a>
<a id='n4493' href='#n4493'>4493</a>
<a id='n4494' href='#n4494'>4494</a>
<a id='n4495' href='#n4495'>4495</a>
<a id='n4496' href='#n4496'>4496</a>
<a id='n4497' href='#n4497'>4497</a>
<a id='n4498' href='#n4498'>4498</a>
<a id='n4499' href='#n4499'>4499</a>
<a id='n4500' href='#n4500'>4500</a>
<a id='n4501' href='#n4501'>4501</a>
<a id='n4502' href='#n4502'>4502</a>
<a id='n4503' href='#n4503'>4503</a>
<a id='n4504' href='#n4504'>4504</a>
<a id='n4505' href='#n4505'>4505</a>
<a id='n4506' href='#n4506'>4506</a>
<a id='n4507' href='#n4507'>4507</a>
<a id='n4508' href='#n4508'>4508</a>
<a id='n4509' href='#n4509'>4509</a>
<a id='n4510' href='#n4510'>4510</a>
<a id='n4511' href='#n4511'>4511</a>
<a id='n4512' href='#n4512'>4512</a>
<a id='n4513' href='#n4513'>4513</a>
<a id='n4514' href='#n4514'>4514</a>
<a id='n4515' href='#n4515'>4515</a>
<a id='n4516' href='#n4516'>4516</a>
<a id='n4517' href='#n4517'>4517</a>
<a id='n4518' href='#n4518'>4518</a>
<a id='n4519' href='#n4519'>4519</a>
<a id='n4520' href='#n4520'>4520</a>
<a id='n4521' href='#n4521'>4521</a>
<a id='n4522' href='#n4522'>4522</a>
<a id='n4523' href='#n4523'>4523</a>
<a id='n4524' href='#n4524'>4524</a>
<a id='n4525' href='#n4525'>4525</a>
<a id='n4526' href='#n4526'>4526</a>
<a id='n4527' href='#n4527'>4527</a>
<a id='n4528' href='#n4528'>4528</a>
<a id='n4529' href='#n4529'>4529</a>
<a id='n4530' href='#n4530'>4530</a>
<a id='n4531' href='#n4531'>4531</a>
<a id='n4532' href='#n4532'>4532</a>
<a id='n4533' href='#n4533'>4533</a>
<a id='n4534' href='#n4534'>4534</a>
<a id='n4535' href='#n4535'>4535</a>
<a id='n4536' href='#n4536'>4536</a>
<a id='n4537' href='#n4537'>4537</a>
<a id='n4538' href='#n4538'>4538</a>
<a id='n4539' href='#n4539'>4539</a>
<a id='n4540' href='#n4540'>4540</a>
<a id='n4541' href='#n4541'>4541</a>
<a id='n4542' href='#n4542'>4542</a>
<a id='n4543' href='#n4543'>4543</a>
<a id='n4544' href='#n4544'>4544</a>
<a id='n4545' href='#n4545'>4545</a>
<a id='n4546' href='#n4546'>4546</a>
<a id='n4547' href='#n4547'>4547</a>
<a id='n4548' href='#n4548'>4548</a>
<a id='n4549' href='#n4549'>4549</a>
<a id='n4550' href='#n4550'>4550</a>
<a id='n4551' href='#n4551'>4551</a>
<a id='n4552' href='#n4552'>4552</a>
<a id='n4553' href='#n4553'>4553</a>
<a id='n4554' href='#n4554'>4554</a>
<a id='n4555' href='#n4555'>4555</a>
<a id='n4556' href='#n4556'>4556</a>
<a id='n4557' href='#n4557'>4557</a>
<a id='n4558' href='#n4558'>4558</a>
<a id='n4559' href='#n4559'>4559</a>
<a id='n4560' href='#n4560'>4560</a>
<a id='n4561' href='#n4561'>4561</a>
<a id='n4562' href='#n4562'>4562</a>
<a id='n4563' href='#n4563'>4563</a>
<a id='n4564' href='#n4564'>4564</a>
<a id='n4565' href='#n4565'>4565</a>
<a id='n4566' href='#n4566'>4566</a>
<a id='n4567' href='#n4567'>4567</a>
<a id='n4568' href='#n4568'>4568</a>
<a id='n4569' href='#n4569'>4569</a>
<a id='n4570' href='#n4570'>4570</a>
<a id='n4571' href='#n4571'>4571</a>
<a id='n4572' href='#n4572'>4572</a>
<a id='n4573' href='#n4573'>4573</a>
<a id='n4574' href='#n4574'>4574</a>
<a id='n4575' href='#n4575'>4575</a>
<a id='n4576' href='#n4576'>4576</a>
<a id='n4577' href='#n4577'>4577</a>
<a id='n4578' href='#n4578'>4578</a>
<a id='n4579' href='#n4579'>4579</a>
<a id='n4580' href='#n4580'>4580</a>
<a id='n4581' href='#n4581'>4581</a>
<a id='n4582' href='#n4582'>4582</a>
<a id='n4583' href='#n4583'>4583</a>
<a id='n4584' href='#n4584'>4584</a>
<a id='n4585' href='#n4585'>4585</a>
<a id='n4586' href='#n4586'>4586</a>
<a id='n4587' href='#n4587'>4587</a>
<a id='n4588' href='#n4588'>4588</a>
<a id='n4589' href='#n4589'>4589</a>
<a id='n4590' href='#n4590'>4590</a>
<a id='n4591' href='#n4591'>4591</a>
<a id='n4592' href='#n4592'>4592</a>
<a id='n4593' href='#n4593'>4593</a>
<a id='n4594' href='#n4594'>4594</a>
<a id='n4595' href='#n4595'>4595</a>
<a id='n4596' href='#n4596'>4596</a>
<a id='n4597' href='#n4597'>4597</a>
<a id='n4598' href='#n4598'>4598</a>
<a id='n4599' href='#n4599'>4599</a>
<a id='n4600' href='#n4600'>4600</a>
<a id='n4601' href='#n4601'>4601</a>
<a id='n4602' href='#n4602'>4602</a>
<a id='n4603' href='#n4603'>4603</a>
<a id='n4604' href='#n4604'>4604</a>
<a id='n4605' href='#n4605'>4605</a>
<a id='n4606' href='#n4606'>4606</a>
<a id='n4607' href='#n4607'>4607</a>
<a id='n4608' href='#n4608'>4608</a>
<a id='n4609' href='#n4609'>4609</a>
<a id='n4610' href='#n4610'>4610</a>
<a id='n4611' href='#n4611'>4611</a>
<a id='n4612' href='#n4612'>4612</a>
<a id='n4613' href='#n4613'>4613</a>
<a id='n4614' href='#n4614'>4614</a>
<a id='n4615' href='#n4615'>4615</a>
<a id='n4616' href='#n4616'>4616</a>
<a id='n4617' href='#n4617'>4617</a>
<a id='n4618' href='#n4618'>4618</a>
<a id='n4619' href='#n4619'>4619</a>
<a id='n4620' href='#n4620'>4620</a>
<a id='n4621' href='#n4621'>4621</a>
<a id='n4622' href='#n4622'>4622</a>
<a id='n4623' href='#n4623'>4623</a>
<a id='n4624' href='#n4624'>4624</a>
<a id='n4625' href='#n4625'>4625</a>
<a id='n4626' href='#n4626'>4626</a>
<a id='n4627' href='#n4627'>4627</a>
<a id='n4628' href='#n4628'>4628</a>
<a id='n4629' href='#n4629'>4629</a>
<a id='n4630' href='#n4630'>4630</a>
<a id='n4631' href='#n4631'>4631</a>
<a id='n4632' href='#n4632'>4632</a>
<a id='n4633' href='#n4633'>4633</a>
<a id='n4634' href='#n4634'>4634</a>
<a id='n4635' href='#n4635'>4635</a>
<a id='n4636' href='#n4636'>4636</a>
<a id='n4637' href='#n4637'>4637</a>
<a id='n4638' href='#n4638'>4638</a>
<a id='n4639' href='#n4639'>4639</a>
<a id='n4640' href='#n4640'>4640</a>
<a id='n4641' href='#n4641'>4641</a>
<a id='n4642' href='#n4642'>4642</a>
<a id='n4643' href='#n4643'>4643</a>
<a id='n4644' href='#n4644'>4644</a>
<a id='n4645' href='#n4645'>4645</a>
<a id='n4646' href='#n4646'>4646</a>
<a id='n4647' href='#n4647'>4647</a>
<a id='n4648' href='#n4648'>4648</a>
<a id='n4649' href='#n4649'>4649</a>
<a id='n4650' href='#n4650'>4650</a>
<a id='n4651' href='#n4651'>4651</a>
<a id='n4652' href='#n4652'>4652</a>
<a id='n4653' href='#n4653'>4653</a>
<a id='n4654' href='#n4654'>4654</a>
<a id='n4655' href='#n4655'>4655</a>
<a id='n4656' href='#n4656'>4656</a>
<a id='n4657' href='#n4657'>4657</a>
<a id='n4658' href='#n4658'>4658</a>
<a id='n4659' href='#n4659'>4659</a>
<a id='n4660' href='#n4660'>4660</a>
<a id='n4661' href='#n4661'>4661</a>
<a id='n4662' href='#n4662'>4662</a>
<a id='n4663' href='#n4663'>4663</a>
<a id='n4664' href='#n4664'>4664</a>
<a id='n4665' href='#n4665'>4665</a>
<a id='n4666' href='#n4666'>4666</a>
<a id='n4667' href='#n4667'>4667</a>
<a id='n4668' href='#n4668'>4668</a>
<a id='n4669' href='#n4669'>4669</a>
<a id='n4670' href='#n4670'>4670</a>
<a id='n4671' href='#n4671'>4671</a>
<a id='n4672' href='#n4672'>4672</a>
<a id='n4673' href='#n4673'>4673</a>
<a id='n4674' href='#n4674'>4674</a>
<a id='n4675' href='#n4675'>4675</a>
<a id='n4676' href='#n4676'>4676</a>
<a id='n4677' href='#n4677'>4677</a>
<a id='n4678' href='#n4678'>4678</a>
<a id='n4679' href='#n4679'>4679</a>
<a id='n4680' href='#n4680'>4680</a>
<a id='n4681' href='#n4681'>4681</a>
<a id='n4682' href='#n4682'>4682</a>
<a id='n4683' href='#n4683'>4683</a>
<a id='n4684' href='#n4684'>4684</a>
<a id='n4685' href='#n4685'>4685</a>
<a id='n4686' href='#n4686'>4686</a>
<a id='n4687' href='#n4687'>4687</a>
<a id='n4688' href='#n4688'>4688</a>
<a id='n4689' href='#n4689'>4689</a>
<a id='n4690' href='#n4690'>4690</a>
<a id='n4691' href='#n4691'>4691</a>
<a id='n4692' href='#n4692'>4692</a>
<a id='n4693' href='#n4693'>4693</a>
<a id='n4694' href='#n4694'>4694</a>
<a id='n4695' href='#n4695'>4695</a>
<a id='n4696' href='#n4696'>4696</a>
<a id='n4697' href='#n4697'>4697</a>
<a id='n4698' href='#n4698'>4698</a>
<a id='n4699' href='#n4699'>4699</a>
<a id='n4700' href='#n4700'>4700</a>
<a id='n4701' href='#n4701'>4701</a>
<a id='n4702' href='#n4702'>4702</a>
<a id='n4703' href='#n4703'>4703</a>
<a id='n4704' href='#n4704'>4704</a>
<a id='n4705' href='#n4705'>4705</a>
<a id='n4706' href='#n4706'>4706</a>
<a id='n4707' href='#n4707'>4707</a>
<a id='n4708' href='#n4708'>4708</a>
<a id='n4709' href='#n4709'>4709</a>
<a id='n4710' href='#n4710'>4710</a>
<a id='n4711' href='#n4711'>4711</a>
<a id='n4712' href='#n4712'>4712</a>
<a id='n4713' href='#n4713'>4713</a>
<a id='n4714' href='#n4714'>4714</a>
<a id='n4715' href='#n4715'>4715</a>
<a id='n4716' href='#n4716'>4716</a>
<a id='n4717' href='#n4717'>4717</a>
<a id='n4718' href='#n4718'>4718</a>
<a id='n4719' href='#n4719'>4719</a>
<a id='n4720' href='#n4720'>4720</a>
<a id='n4721' href='#n4721'>4721</a>
<a id='n4722' href='#n4722'>4722</a>
<a id='n4723' href='#n4723'>4723</a>
<a id='n4724' href='#n4724'>4724</a>
<a id='n4725' href='#n4725'>4725</a>
<a id='n4726' href='#n4726'>4726</a>
<a id='n4727' href='#n4727'>4727</a>
<a id='n4728' href='#n4728'>4728</a>
<a id='n4729' href='#n4729'>4729</a>
<a id='n4730' href='#n4730'>4730</a>
<a id='n4731' href='#n4731'>4731</a>
<a id='n4732' href='#n4732'>4732</a>
<a id='n4733' href='#n4733'>4733</a>
<a id='n4734' href='#n4734'>4734</a>
<a id='n4735' href='#n4735'>4735</a>
<a id='n4736' href='#n4736'>4736</a>
<a id='n4737' href='#n4737'>4737</a>
<a id='n4738' href='#n4738'>4738</a>
<a id='n4739' href='#n4739'>4739</a>
<a id='n4740' href='#n4740'>4740</a>
<a id='n4741' href='#n4741'>4741</a>
<a id='n4742' href='#n4742'>4742</a>
<a id='n4743' href='#n4743'>4743</a>
<a id='n4744' href='#n4744'>4744</a>
<a id='n4745' href='#n4745'>4745</a>
<a id='n4746' href='#n4746'>4746</a>
<a id='n4747' href='#n4747'>4747</a>
<a id='n4748' href='#n4748'>4748</a>
<a id='n4749' href='#n4749'>4749</a>
<a id='n4750' href='#n4750'>4750</a>
<a id='n4751' href='#n4751'>4751</a>
<a id='n4752' href='#n4752'>4752</a>
<a id='n4753' href='#n4753'>4753</a>
<a id='n4754' href='#n4754'>4754</a>
<a id='n4755' href='#n4755'>4755</a>
<a id='n4756' href='#n4756'>4756</a>
<a id='n4757' href='#n4757'>4757</a>
<a id='n4758' href='#n4758'>4758</a>
<a id='n4759' href='#n4759'>4759</a>
<a id='n4760' href='#n4760'>4760</a>
<a id='n4761' href='#n4761'>4761</a>
<a id='n4762' href='#n4762'>4762</a>
<a id='n4763' href='#n4763'>4763</a>
<a id='n4764' href='#n4764'>4764</a>
<a id='n4765' href='#n4765'>4765</a>
<a id='n4766' href='#n4766'>4766</a>
<a id='n4767' href='#n4767'>4767</a>
<a id='n4768' href='#n4768'>4768</a>
<a id='n4769' href='#n4769'>4769</a>
<a id='n4770' href='#n4770'>4770</a>
<a id='n4771' href='#n4771'>4771</a>
<a id='n4772' href='#n4772'>4772</a>
<a id='n4773' href='#n4773'>4773</a>
<a id='n4774' href='#n4774'>4774</a>
<a id='n4775' href='#n4775'>4775</a>
<a id='n4776' href='#n4776'>4776</a>
<a id='n4777' href='#n4777'>4777</a>
<a id='n4778' href='#n4778'>4778</a>
<a id='n4779' href='#n4779'>4779</a>
<a id='n4780' href='#n4780'>4780</a>
<a id='n4781' href='#n4781'>4781</a>
<a id='n4782' href='#n4782'>4782</a>
<a id='n4783' href='#n4783'>4783</a>
<a id='n4784' href='#n4784'>4784</a>
<a id='n4785' href='#n4785'>4785</a>
<a id='n4786' href='#n4786'>4786</a>
<a id='n4787' href='#n4787'>4787</a>
<a id='n4788' href='#n4788'>4788</a>
<a id='n4789' href='#n4789'>4789</a>
<a id='n4790' href='#n4790'>4790</a>
<a id='n4791' href='#n4791'>4791</a>
<a id='n4792' href='#n4792'>4792</a>
<a id='n4793' href='#n4793'>4793</a>
<a id='n4794' href='#n4794'>4794</a>
<a id='n4795' href='#n4795'>4795</a>
<a id='n4796' href='#n4796'>4796</a>
<a id='n4797' href='#n4797'>4797</a>
<a id='n4798' href='#n4798'>4798</a>
<a id='n4799' href='#n4799'>4799</a>
<a id='n4800' href='#n4800'>4800</a>
<a id='n4801' href='#n4801'>4801</a>
<a id='n4802' href='#n4802'>4802</a>
<a id='n4803' href='#n4803'>4803</a>
<a id='n4804' href='#n4804'>4804</a>
<a id='n4805' href='#n4805'>4805</a>
<a id='n4806' href='#n4806'>4806</a>
<a id='n4807' href='#n4807'>4807</a>
<a id='n4808' href='#n4808'>4808</a>
<a id='n4809' href='#n4809'>4809</a>
<a id='n4810' href='#n4810'>4810</a>
<a id='n4811' href='#n4811'>4811</a>
<a id='n4812' href='#n4812'>4812</a>
<a id='n4813' href='#n4813'>4813</a>
<a id='n4814' href='#n4814'>4814</a>
<a id='n4815' href='#n4815'>4815</a>
<a id='n4816' href='#n4816'>4816</a>
<a id='n4817' href='#n4817'>4817</a>
<a id='n4818' href='#n4818'>4818</a>
<a id='n4819' href='#n4819'>4819</a>
<a id='n4820' href='#n4820'>4820</a>
<a id='n4821' href='#n4821'>4821</a>
<a id='n4822' href='#n4822'>4822</a>
<a id='n4823' href='#n4823'>4823</a>
<a id='n4824' href='#n4824'>4824</a>
<a id='n4825' href='#n4825'>4825</a>
<a id='n4826' href='#n4826'>4826</a>
<a id='n4827' href='#n4827'>4827</a>
<a id='n4828' href='#n4828'>4828</a>
<a id='n4829' href='#n4829'>4829</a>
<a id='n4830' href='#n4830'>4830</a>
<a id='n4831' href='#n4831'>4831</a>
<a id='n4832' href='#n4832'>4832</a>
<a id='n4833' href='#n4833'>4833</a>
<a id='n4834' href='#n4834'>4834</a>
<a id='n4835' href='#n4835'>4835</a>
<a id='n4836' href='#n4836'>4836</a>
<a id='n4837' href='#n4837'>4837</a>
<a id='n4838' href='#n4838'>4838</a>
<a id='n4839' href='#n4839'>4839</a>
<a id='n4840' href='#n4840'>4840</a>
<a id='n4841' href='#n4841'>4841</a>
<a id='n4842' href='#n4842'>4842</a>
<a id='n4843' href='#n4843'>4843</a>
<a id='n4844' href='#n4844'>4844</a>
<a id='n4845' href='#n4845'>4845</a>
<a id='n4846' href='#n4846'>4846</a>
<a id='n4847' href='#n4847'>4847</a>
<a id='n4848' href='#n4848'>4848</a>
<a id='n4849' href='#n4849'>4849</a>
<a id='n4850' href='#n4850'>4850</a>
<a id='n4851' href='#n4851'>4851</a>
<a id='n4852' href='#n4852'>4852</a>
<a id='n4853' href='#n4853'>4853</a>
<a id='n4854' href='#n4854'>4854</a>
<a id='n4855' href='#n4855'>4855</a>
</pre></td>
<td class='lines'><pre><code>import primitives : 'platform:/resource/org.eclipse.ocl.examples.uml25/model/PrimitiveTypes.xmi#_0'
import uml : 'platform:/resource/org.eclipse.ocl.examples.uml25/model/UML.xmi#_0'
import actions : 'platform:/resource/org.eclipse.ocl.examples.uml25/model/UML.xmi#Actions'
import activities : 'platform:/resource/org.eclipse.ocl.examples.uml25/model/UML.xmi#Activities'
import classification : 'platform:/resource/org.eclipse.ocl.examples.uml25/model/UML.xmi#Classification'
import commonBehavior : 'platform:/resource/org.eclipse.ocl.examples.uml25/model/UML.xmi#CommonBehavior'
import commonStructure : 'platform:/resource/org.eclipse.ocl.examples.uml25/model/UML.xmi#CommonStructure'
import deployments : 'platform:/resource/org.eclipse.ocl.examples.uml25/model/UML.xmi#Deployments'
import informationFlows : 'platform:/resource/org.eclipse.ocl.examples.uml25/model/UML.xmi#InformationFlows'
import interactions : 'platform:/resource/org.eclipse.ocl.examples.uml25/model/UML.xmi#Interactions'
import packages : 'platform:/resource/org.eclipse.ocl.examples.uml25/model/UML.xmi#Packages'
import simpleClassifiers : 'platform:/resource/org.eclipse.ocl.examples.uml25/model/UML.xmi#SimpleClassifiers'
import stateMachines : 'platform:/resource/org.eclipse.ocl.examples.uml25/model/UML.xmi#StateMachines'
import structuredClassifiers : 'platform:/resource/org.eclipse.ocl.examples.uml25/model/UML.xmi#StructuredClassifiers'
import useCases : 'platform:/resource/org.eclipse.ocl.examples.uml25/model/UML.xmi#UseCases'
import values : 'platform:/resource/org.eclipse.ocl.examples.uml25/model/UML.xmi#Values'

package uml::Activities

	context uml::Activities::Activity

	inv maximum_one_parameter_node:
		ownedParameter-&gt;forAll(p | p.direction &lt;&gt; UML::Classification::ParameterDirectionKind::inout implies
		  node-&gt;select(
		    (
		      oclIsKindOf(activities::ActivityParameterNode) and
		      oclAsType(activities::ActivityParameterNode).parameter = p
		    ))
		  -&gt;size() = 1)

	inv maximum_two_parameter_nodes:
		ownedParameter-&gt;forAll(p | p.direction = UML::Classification::ParameterDirectionKind::inout implies
		  let
		    associatedNodes : Set(activities::ActivityNode) = node-&gt;select(
		      oclIsKindOf(activities::ActivityParameterNode) and
		      oclAsType(activities::ActivityParameterNode).parameter = p)
		  in
		    associatedNodes-&gt;size() = 2 and
		    associatedNodes-&gt;select(incoming-&gt;notEmpty())
		    -&gt;size() &lt;= 1 and
		    associatedNodes-&gt;select(outgoing-&gt;notEmpty())
		    -&gt;size() &lt;= 1)

	context uml::Activities::Activity::isReadOnly : Boolean

	init:
	false

	context uml::Activities::Activity::isSingleExecution : Boolean

	init:
	false

	context uml::Activities::ActivityEdge

	inv source_and_target:
		activity &lt;&gt; null implies
		source.containingActivity() = activity and
		target.containingActivity() = activity

	context ActivityEdge::isConsistentWith(redefiningElement : uml::Classification::RedefinableElement) : Boolean

	body:
	(redefiningElement.oclIsKindOf(ActivityEdge))

	context uml::Activities::ActivityGroup

	inv nodes_and_edges:
		containedNode-&gt;forAll(activity = self.containingActivity()) and
		containedEdge-&gt;forAll(activity = self.containingActivity())

	inv not_contained:
		subgroup-&gt;closure(subgroup)
		.containedNode-&gt;excludesAll(containedNode) and
		superGroup-&gt;closure(superGroup)
		.containedNode-&gt;excludesAll(containedNode) and
		subgroup-&gt;closure(subgroup)
		.containedEdge-&gt;excludesAll(containedEdge) and
		superGroup-&gt;closure(superGroup)
		.containedEdge-&gt;excludesAll(containedEdge)

	context ActivityGroup::containingActivity() : uml::Activities::Activity

	body:
	(if superGroup&lt;&gt;null then superGroup.containingActivity()
else inActivity
endif)

	context uml::Activities::ActivityParameterNode

	inv no_outgoing_edges:
		incoming-&gt;notEmpty() and
		outgoing-&gt;isEmpty() implies parameter.direction = UML::Classification::ParameterDirectionKind::out or parameter.direction = UML::Classification::ParameterDirectionKind::inout or parameter.direction = UML::Classification::ParameterDirectionKind::return

	inv has_parameters:
		activity.ownedParameter-&gt;includes(parameter)

	inv same_type:
		type = parameter.type

	inv no_incoming_edges:
		outgoing-&gt;notEmpty() and
		incoming-&gt;isEmpty() implies parameter.direction = UML::Classification::ParameterDirectionKind::_'in' or parameter.direction = UML::Classification::ParameterDirectionKind::inout

	inv no_edges:
		incoming-&gt;isEmpty() or outgoing-&gt;isEmpty()

	context uml::Activities::ActivityPartition

	inv represents_classifier:
		not isExternal and
		represents.oclIsKindOf(classification::Classifier) and
		superPartition-&gt;notEmpty() implies
		let
		  representedClassifier : classification::Classifier = represents.oclAsType(classification::Classifier)
		in
		  superPartition.represents.oclIsKindOf(classification::Classifier) and
		  let
		    representedSuperClassifier : classification::Classifier = superPartition.represents.oclAsType(classification::Classifier)
		  in
		    (
		      representedSuperClassifier.oclIsKindOf(simpleClassifiers::BehavioredClassifier) and
		      representedClassifier.oclIsKindOf(commonBehavior::Behavior) and
		      representedSuperClassifier.oclAsType(simpleClassifiers::BehavioredClassifier)
		      .ownedBehavior-&gt;includes(
		        representedClassifier.oclAsType(commonBehavior::Behavior)) or
		      representedSuperClassifier.oclIsKindOf(structuredClassifiers::Class) and
		      representedSuperClassifier.oclAsType(structuredClassifiers::Class)
		      .nestedClassifier-&gt;includes(representedClassifier) or
		      structuredClassifiers::Association.allInstances()
		      -&gt;exists(a |
		        a.memberEnd-&gt;exists(end1 | end1.isComposite and end1.type = representedClassifier and
		          a.memberEnd-&gt;exists(end2 | end1 &lt;&gt; end2 and end2.type = representedSuperClassifier)))
		    )

	inv represents_property_and_is_contained:
		represents.oclIsKindOf(classification::Property) and
		superPartition-&gt;notEmpty() implies
		superPartition.represents.oclIsKindOf(classification::Classifier) and represents.owner = superPartition.represents or
		superPartition.represents.oclIsKindOf(classification::Property) and represents.owner =
		superPartition.represents.oclAsType(classification::Property).type

	inv represents_property:
		represents.oclIsKindOf(classification::Property) and
		superPartition-&gt;notEmpty() and
		superPartition.represents.oclIsKindOf(classification::Classifier) implies
		let
		  representedClassifier : classification::Classifier = superPartition.represents.oclAsType(classification::Classifier)
		in
		  superPartition.subpartition-&gt;reject(isExternal)
		  -&gt;forAll(p |
		    p.represents.oclIsKindOf(classification::Property) and p.owner = representedClassifier)

	inv dimension_not_contained:
		isDimension implies superPartition-&gt;isEmpty()

	context uml::Activities::ActivityPartition::isDimension : Boolean

	init:
	false

	context uml::Activities::ActivityPartition::isExternal : Boolean

	init:
	false

	context uml::Activities::ControlFlow

	inv object_nodes:
		(
		  source.oclIsKindOf(activities::ObjectNode) implies
		  source.oclAsType(activities::ObjectNode).isControlType
		) and
		(
		  target.oclIsKindOf(activities::ObjectNode) implies
		  target.oclAsType(activities::ObjectNode).isControlType
		)

	context uml::Activities::DecisionNode

	inv zero_input_parameters:
		decisionInput &lt;&gt; null and decisionInputFlow = null and
		incoming-&gt;exists(oclIsKindOf(activities::ControlFlow)) implies
		decisionInput.inputParameters()
		-&gt;isEmpty()

	inv edges:
		let
		  allEdges : Set(activities::ActivityEdge) = incoming-&gt;union(outgoing)
		in
		  let
		    allRelevantEdges : Set(activities::ActivityEdge) = if
		      decisionInputFlow-&gt;notEmpty()
		    then allEdges-&gt;excluding(decisionInputFlow)
		    else allEdges
		    endif
		  in
		    allRelevantEdges-&gt;forAll(
		      oclIsKindOf(activities::ControlFlow)) or
		    allRelevantEdges-&gt;forAll(
		      oclIsKindOf(activities::ObjectFlow))

	inv decision_input_flow_incoming:
		incoming-&gt;includes(decisionInputFlow)

	inv two_input_parameters:
		decisionInput &lt;&gt; null and decisionInputFlow &lt;&gt; null and
		incoming-&gt;forAll(oclIsKindOf(activities::ObjectFlow)) implies
		decisionInput.inputParameters()
		-&gt;size() = 2

	inv incoming_outgoing_edges:
		(incoming-&gt;size() = 1 or incoming-&gt;size() = 2
		) and
		outgoing-&gt;size() &gt; 0

	inv incoming_control_one_input_parameter:
		decisionInput &lt;&gt; null and decisionInputFlow &lt;&gt; null and
		incoming-&gt;exists(oclIsKindOf(activities::ControlFlow)) implies
		decisionInput.inputParameters()
		-&gt;size() = 1

	inv parameters:
		decisionInput &lt;&gt; null implies
		decisionInput.ownedParameter-&gt;forAll(par | par.direction &lt;&gt; UML::Classification::ParameterDirectionKind::out and par.direction &lt;&gt; UML::Classification::ParameterDirectionKind::inout) and
		decisionInput.ownedParameter-&gt;one(par | par.direction &lt;&gt; UML::Classification::ParameterDirectionKind::return)

	inv incoming_object_one_input_parameter:
		decisionInput &lt;&gt; null and decisionInputFlow = null and
		incoming-&gt;forAll(oclIsKindOf(activities::ObjectFlow)) implies
		decisionInput.inputParameters()
		-&gt;size() = 1

	context uml::Activities::ExceptionHandler

	inv handler_body_edges:
		handlerBody.incoming-&gt;isEmpty() and
		handlerBody.outgoing-&gt;isEmpty() and
		exceptionInput.incoming-&gt;isEmpty()

	inv output_pins:
		protectedNode.oclIsKindOf(actions::Action) and
		protectedNode.oclAsType(actions::Action)
		.output-&gt;notEmpty() implies
		handlerBody.oclIsKindOf(actions::Action) and
		let
		  protectedNodeOutput : OrderedSet(actions::OutputPin) = protectedNode.oclAsType(actions::Action).output
		in
		  let
		    handlerBodyOutput : OrderedSet(actions::OutputPin) = handlerBody.oclAsType(actions::Action).output
		  in
		    protectedNodeOutput-&gt;size() =
		    handlerBodyOutput-&gt;size() and
		    Sequence{1..protectedNodeOutput-&gt;size()
		    }
		    -&gt;forAll(i |
		      handlerBodyOutput-&gt;at(i)
		      .type.conformsTo(protectedNodeOutput-&gt;at(i).type) and
		      handlerBodyOutput-&gt;at(i).isOrdered =
		      protectedNodeOutput-&gt;at(i).isOrdered and
		      handlerBodyOutput-&gt;at(i)
		      .compatibleWith(protectedNodeOutput-&gt;at(i)))

	inv one_input:
		handlerBody.oclIsKindOf(actions::Action) and
		let
		  inputs : OrderedSet(actions::InputPin) = handlerBody.oclAsType(actions::Action).input
		in inputs-&gt;size() = 1 and inputs-&gt;first() = exceptionInput

	inv edge_source_target:
		let
		  nodes : Set(activities::ActivityNode) = handlerBody.oclAsType(actions::Action)
		  .allOwnedNodes()
		in
		  nodes.outgoing-&gt;forAll(nodes-&gt;includes(target)) and
		  nodes.incoming-&gt;forAll(nodes-&gt;includes(source))

	inv handler_body_owner:
		handlerBody.owner = protectedNode.owner

	inv exception_input_type:
		exceptionInput.type = null or
		exceptionType-&gt;forAll(
		  conformsTo(
		    exceptionInput.type.oclAsType(classification::Classifier)))

	context uml::Activities::FinalNode

	inv no_outgoing_edges:
		outgoing-&gt;isEmpty()

	context uml::Activities::ForkNode

	inv edges:
		let
		  allEdges : Set(activities::ActivityEdge) = incoming-&gt;union(outgoing)
		in
		  allEdges-&gt;forAll(oclIsKindOf(activities::ControlFlow)) or
		  allEdges-&gt;forAll(oclIsKindOf(activities::ObjectFlow))

	inv one_incoming_edge:
		incoming-&gt;size() = 1

	context uml::Activities::InitialNode

	inv no_incoming_edges:
		incoming-&gt;isEmpty()

	inv control_edges:
		outgoing-&gt;forAll(oclIsKindOf(activities::ControlFlow))

	context uml::Activities::InterruptibleActivityRegion

	inv interrupting_edges:
		interruptingEdge-&gt;forAll(edge |
		  node-&gt;includes(edge.source) and
		  node-&gt;excludes(edge.target) and
		  edge.target.containingActivity() = inActivity)

	context uml::Activities::JoinNode

	inv one_outgoing_edge:
		outgoing-&gt;size() = 1

	inv incoming_object_flow:
		if
		  incoming-&gt;exists(oclIsKindOf(activities::ObjectFlow))
		then
		  outgoing-&gt;forAll(oclIsKindOf(activities::ObjectFlow))
		else
		  outgoing-&gt;forAll(oclIsKindOf(activities::ControlFlow))
		endif

	context uml::Activities::JoinNode::isCombineDuplicate : Boolean

	init:
	true

	context uml::Activities::MergeNode

	inv one_outgoing_edge:
		outgoing-&gt;size() = 1

	inv edges:
		let
		  allEdges : Set(activities::ActivityEdge) = incoming-&gt;union(outgoing)
		in
		  allEdges-&gt;forAll(oclIsKindOf(activities::ControlFlow)) or
		  allEdges-&gt;forAll(oclIsKindOf(activities::ObjectFlow))

	context uml::Activities::ObjectFlow

	inv input_and_output_parameter:
		selection &lt;&gt; null implies
		selection.inputParameters()
		-&gt;size() = 1 and
		selection.inputParameters()
		-&gt;forAll(not isUnique and is(0, *)) and
		selection.outputParameters()
		-&gt;size() = 1

	inv no_executable_nodes:
		not (
		  source.oclIsKindOf(activities::ExecutableNode) or
		  target.oclIsKindOf(activities::ExecutableNode)
		)

	inv transformation_behavior:
		transformation &lt;&gt; null implies
		transformation.inputParameters()
		-&gt;size() = 1 and
		transformation.outputParameters()
		-&gt;size() = 1

	inv selection_behavior:
		selection &lt;&gt; null implies
		source.oclIsKindOf(activities::ObjectNode)

	inv compatible_types:
		null

	inv same_upper_bounds:
		null

	inv target:
		null

	inv is_multicast_or_is_multireceive:
		not (isMulticast and isMultireceive)

	context uml::Activities::ObjectFlow::isMulticast : Boolean

	init:
	false

	context uml::Activities::ObjectFlow::isMultireceive : Boolean

	init:
	false

	context uml::Activities::ObjectNode

	inv input_output_parameter:
		selection &lt;&gt; null implies
		selection.inputParameters()
		-&gt;size() = 1 and
		selection.inputParameters()
		-&gt;forAll(p | not p.isUnique and
		  p.is(0, *) and
		  self.type.conformsTo(p.type)) and
		selection.outputParameters()
		-&gt;size() = 1 and
		selection.inputParameters()
		-&gt;forAll(p | self.type.conformsTo(p.type))

	inv selection_behavior:
		selection &lt;&gt; null = ordering = UML::Activities::ObjectNodeOrderingKind::ordered

	inv object_flow_edges:
		not isControlType implies
		incoming-&gt;union(outgoing)
		-&gt;forAll(oclIsKindOf(activities::ObjectFlow))

	context uml::Activities::ObjectNode::isControlType : Boolean

	init:
	false

	context uml::Activities::ObjectNode::ordering : uml::Activities::ObjectNodeOrderingKind

	init:
	UML::Activities::ObjectNodeOrderingKind::FIFO

	context ActivityNode::containingActivity() : uml::Activities::Activity

	body:
	(if inStructuredNode&lt;&gt;null then inStructuredNode.containingActivity()
else activity
endif)

	context ActivityNode::isConsistentWith(redefiningElement : uml::Classification::RedefinableElement) : Boolean

	body:
	(redefiningElement.oclIsKindOf(ActivityNode))

	context Variable::isAccessibleBy(a : uml::Actions::Action) : Boolean

	body:
	(if scope&lt;&gt;null then scope.allOwnedNodes()-&gt;includes(a)
else a.containingActivity()=activityScope
endif)

endpackage

package uml::Values

	context uml::Values::Duration

	inv no_expr_requires_observation:
		expr = null implies
		observation-&gt;size() = 1 and
		observation-&gt;forAll(
		  oclIsKindOf(values::DurationObservation))

	context uml::Values::DurationConstraint

	inv first_event_multiplicity:
		if constrainedElement-&gt;size() = 2
		then firstEvent-&gt;size() = 2
		else firstEvent-&gt;size() = 0
		endif

	inv has_one_or_two_constrainedElements:
		constrainedElement-&gt;size() = 1 or constrainedElement-&gt;size() = 2

	context uml::Values::DurationObservation

	inv first_event_multiplicity:
		if event-&gt;size() = 2
		then firstEvent-&gt;size() = 2
		else firstEvent-&gt;size() = 0
		endif

	context uml::Values::OpaqueExpression

	inv language_body_size:
		language-&gt;notEmpty() implies _'body'-&gt;size() = language-&gt;size()

	inv one_return_result_parameter:
		behavior &lt;&gt; null implies
		behavior.ownedParameter-&gt;select(direction = UML::Classification::ParameterDirectionKind::return)
		-&gt;size() = 1

	inv only_return_result_parameters:
		behavior &lt;&gt; null implies
		behavior.ownedParameter-&gt;select(direction &lt;&gt; UML::Classification::ParameterDirectionKind::return)
		-&gt;isEmpty()

	context OpaqueExpression::isNonNegative() : Boolean

	pre _'pre':
		self.isIntegral()

	body:
	(false)

	context OpaqueExpression::isPositive() : Boolean

	pre _'pre':
		self.isIntegral()

	body:
	(false)

	context OpaqueExpression::value() : Integer

	pre _'pre':
		self.isIntegral()

	body:
	(0)

	context OpaqueExpression::isIntegral() : Boolean

	body:
	(false)

	context OpaqueExpression::result() : uml::Classification::Parameter

	body:
	(if behavior = null then
	null
else
	behavior.ownedParameter-&gt;first()
endif)

	context uml::Values::StringExpression

	inv operands:
		operand-&gt;forAll(oclIsKindOf(values::LiteralString))

	inv subexpressions:
		if subExpression-&gt;notEmpty()
		then operand-&gt;isEmpty()
		else operand-&gt;notEmpty()
		endif

	context StringExpression::stringValue() : String

	body:
	(if subExpression-&gt;notEmpty()
then subExpression-&gt;iterate(se; stringValue: String = '' | stringValue.concat(se.stringValue()))
else operand-&gt;iterate(op; stringValue: String = '' | stringValue.concat(op.stringValue()))
endif)

	context uml::Values::TimeConstraint

	inv has_one_constrainedElement:
		constrainedElement-&gt;size() = 1

	context uml::Values::TimeConstraint::firstEvent : Boolean

	init:
	true

	context uml::Values::TimeExpression

	inv no_expr_requires_observation:
		expr = null implies
		observation-&gt;size() = 1 and
		observation-&gt;forAll(
		  oclIsKindOf(values::TimeObservation))

	context LiteralBoolean::booleanValue() : Boolean

	body:
	(value)

	context LiteralBoolean::isComputable() : Boolean

	body:
	(true)

	context uml::Values::LiteralBoolean::value : Boolean

	init:
	false

	context LiteralInteger::integerValue() : Integer

	body:
	(value)

	context LiteralInteger::isComputable() : Boolean

	body:
	(true)

	context uml::Values::LiteralInteger::value : Integer

	init:
	0

	context LiteralNull::isComputable() : Boolean

	body:
	(true)

	context LiteralNull::isNull() : Boolean

	body:
	(true)

	context LiteralReal::isComputable() : Boolean

	body:
	(true)

	context LiteralReal::realValue() : Real

	body:
	(value)

	context LiteralString::isComputable() : Boolean

	body:
	(true)

	context LiteralString::stringValue() : String

	body:
	(value)

	context LiteralUnlimitedNatural::isComputable() : Boolean

	body:
	(true)

	context LiteralUnlimitedNatural::unlimitedValue() : UnlimitedNatural

	body:
	(value)

	context uml::Values::LiteralUnlimitedNatural::value : UnlimitedNatural

	init:
	0

	context uml::Values::TimeObservation::firstEvent : Boolean

	init:
	true

	context ValueSpecification::booleanValue() : Boolean

	body:
	(null)

	context ValueSpecification::integerValue() : Integer

	body:
	(null)

	context ValueSpecification::isCompatibleWith(p : uml::CommonStructure::ParameterableElement) : Boolean

	body:
	(self.oclIsKindOf(p.oclType()) and (p.oclIsKindOf(TypedElement) implies 
self.type.conformsTo(p.oclAsType(TypedElement).type)))

	context ValueSpecification::isComputable() : Boolean

	body:
	(false)

	context ValueSpecification::isNull() : Boolean

	body:
	(false)

	context ValueSpecification::realValue() : Real

	body:
	(null)

	context ValueSpecification::stringValue() : String

	body:
	(null)

	context ValueSpecification::unlimitedValue() : UnlimitedNatural

	body:
	(null)

endpackage

package uml::UseCases

	context uml::UseCases::Actor

	inv associations:
		structuredClassifiers::Association.allInstances()
		-&gt;forAll(a |
		  a.memberEnd-&gt;collect(type)
		  -&gt;includes(self) implies
		  a.memberEnd-&gt;size() = 2 and
		  let actorEnd : classification::Property = a.memberEnd-&gt;any(type = self)
		  in
		    (
		      actorEnd.opposite.class.oclIsKindOf(useCases::UseCase) or
		      actorEnd.opposite.class.oclIsKindOf(structuredClassifiers::Class) and
		      not actorEnd.opposite.class.oclIsKindOf(commonBehavior::Behavior)
		    ))

	inv must_have_name:
		name-&gt;notEmpty()

	context uml::UseCases::Extend

	inv extension_points:
		extensionLocation-&gt;forAll(xp | extendedCase.extensionPoint-&gt;includes(xp))

	context uml::UseCases::ExtensionPoint

	inv must_have_name:
		name-&gt;notEmpty()

	context uml::UseCases::UseCase

	inv binary_associations:
		structuredClassifiers::Association.allInstances()
		-&gt;forAll(a |
		  a.memberEnd.type-&gt;includes(self) implies
		  a.memberEnd-&gt;size() = 2)

	inv no_association_to_use_case:
		structuredClassifiers::Association.allInstances()
		-&gt;forAll(a |
		  a.memberEnd.type-&gt;includes(self) implies
		  let
		    usecases : Set(useCases::UseCase) = a.memberEnd.type-&gt;select(
		      oclIsKindOf(useCases::UseCase))
		    -&gt;collect(oclAsType(useCases::UseCase))
		    -&gt;asSet()
		  in
		    usecases-&gt;size() &gt; 1 implies
		    usecases-&gt;collect(subject)
		    -&gt;size() &gt; 1)

	inv cannot_include_self:
		not allIncludedUseCases()-&gt;includes(self)

	inv must_have_name:
		name-&gt;notEmpty()

	context UseCase::allIncludedUseCases() : Set(uml::UseCases::UseCase)

	body:
	(self.include.addition-&gt;union(self.include.addition-&gt;collect(uc | uc.allIncludedUseCases()))-&gt;asSet())

endpackage

package uml::StructuredClassifiers

	context uml::StructuredClassifiers::Association

	inv specialized_end_number:
		parents()
		-&gt;select(
		  oclIsKindOf(structuredClassifiers::Association))
		.oclAsType(structuredClassifiers::Association)
		-&gt;forAll(p | p.memberEnd-&gt;size() = self.memberEnd-&gt;size())

	inv specialized_end_types:
		Sequence{1..memberEnd-&gt;size()
		}
		-&gt;forAll(i |
		  general-&gt;select(
		    oclIsKindOf(structuredClassifiers::Association))
		  .oclAsType(structuredClassifiers::Association)
		  -&gt;forAll(ga |
		    self.memberEnd-&gt;at(i)
		    .type.conformsTo(ga.memberEnd-&gt;at(i).type)))

	inv binary_associations:
		memberEnd-&gt;exists(aggregation &lt;&gt; UML::Classification::AggregationKind::none) implies
		memberEnd-&gt;size() = 2 and
		memberEnd-&gt;exists(aggregation = UML::Classification::AggregationKind::none)

	inv association_ends:
		memberEnd-&gt;size() &gt; 2 implies ownedEnd-&gt;includesAll(memberEnd)

	inv ends_must_be_typed:
		memberEnd-&gt;forAll(type-&gt;notEmpty())

	context Association::endType() : Set(uml::CommonStructure::Type)

	body:
	(memberEnd-&gt;collect(type)-&gt;asSet())

	context uml::StructuredClassifiers::Association::isDerived : Boolean

	init:
	false

	context uml::StructuredClassifiers::AssociationClass

	inv cannot_be_defined:
		self.endType()
		-&gt;excludes(self) and
		self.endType()
		-&gt;collect(et |
		  et.oclAsType(classification::Classifier)
		  .allParents())
		-&gt;flatten()
		-&gt;excludes(self)

	inv disjoint_attributes_ends:
		ownedAttribute-&gt;intersection(ownedEnd)-&gt;isEmpty()

	context uml::StructuredClassifiers::Class

	inv passive_class:
		not isActive implies ownedReception-&gt;isEmpty() and classifierBehavior = null

	context Class::extension() : Set(uml::Packages::Extension)

	body:
	(Extension.allInstances()-&gt;select(ext | 
  let endTypes : Sequence(Classifier) = ext.memberEnd-&gt;collect(type.oclAsType(Classifier)) in
  endTypes-&gt;includes(self) or endTypes.allParents()-&gt;includes(self) ))

	context Class::superClass() : Set(uml::StructuredClassifiers::Class)

	body:
	(self.general()-&gt;select(oclIsKindOf(Class))-&gt;collect(oclAsType(Class))-&gt;asSet())

	context uml::StructuredClassifiers::Class::isAbstract : Boolean

	init:
	false

	context uml::StructuredClassifiers::Class::isActive : Boolean

	init:
	false

	context uml::StructuredClassifiers::CollaborationUse

	inv client_elements:
		roleBinding-&gt;collect(client)
		-&gt;forAll(ne1, ne2 |
		  ne1.oclIsKindOf(structuredClassifiers::ConnectableElement) and
		  ne2.oclIsKindOf(structuredClassifiers::ConnectableElement) and
		  let
		    ce1 : structuredClassifiers::ConnectableElement = ne1.oclAsType(structuredClassifiers::ConnectableElement)
		  in
		    let
		      ce2 : structuredClassifiers::ConnectableElement = ne2.oclAsType(structuredClassifiers::ConnectableElement)
		    in ce1.structuredClassifier = ce2.structuredClassifier) and
		roleBinding-&gt;collect(supplier)
		-&gt;forAll(ne1, ne2 |
		  ne1.oclIsKindOf(structuredClassifiers::ConnectableElement) and
		  ne2.oclIsKindOf(structuredClassifiers::ConnectableElement) and
		  let
		    ce1 : structuredClassifiers::ConnectableElement = ne1.oclAsType(structuredClassifiers::ConnectableElement)
		  in
		    let
		      ce2 : structuredClassifiers::ConnectableElement = ne2.oclAsType(structuredClassifiers::ConnectableElement)
		    in ce1.collaboration = ce2.collaboration)

	inv every_role:
		type.collaborationRole-&gt;forAll(role |
		  roleBinding-&gt;exists(rb | rb.supplier-&gt;includes(role)))

	inv connectors:
		type.ownedConnector-&gt;forAll(connector |
		  let
		    rolesConnectedInCollab : Set(structuredClassifiers::ConnectableElement) = connector.end.role-&gt;asSet()
		  in
		    let
		      relevantBindings : Set(commonStructure::Dependency) = roleBinding-&gt;select(rb |
		        rb.supplier-&gt;intersection(rolesConnectedInCollab)
		        -&gt;notEmpty())
		    in
		      let
		        boundRoles : Set(structuredClassifiers::ConnectableElement) = relevantBindings-&gt;collect(
		          client.oclAsType(structuredClassifiers::ConnectableElement))
		        -&gt;asSet()
		      in
		        let
		          contextClassifier : structuredClassifiers::StructuredClassifier = boundRoles-&gt;any(true)
		          .structuredClassifier-&gt;any(true)
		        in
		          contextClassifier.ownedConnector-&gt;exists(correspondingConnector |
		            correspondingConnector.end.role-&gt;forAll(role |
		              boundRoles-&gt;includes(role)) and
		            connector.type-&gt;notEmpty() and
		            correspondingConnector.type-&gt;notEmpty() implies
		            connector.type-&gt;forAll(
		              conformsTo(correspondingConnector.type))))

	context uml::StructuredClassifiers::Component

	inv no_nested_classifiers:
		nestedClassifier-&gt;isEmpty()

	inv no_packaged_elements:
		nestingClass &lt;&gt; null implies packagedElement-&gt;isEmpty()

	context Component::provided() : Set(uml::SimpleClassifiers::Interface)

	body:
	(let 	ris : Set(Interface) = allRealizedInterfaces(),
        realizingClassifiers : Set(Classifier) =  self.realization.realizingClassifier-&gt;union(self.allParents()-&gt;collect(realization.realizingClassifier))-&gt;asSet(),
        allRealizingClassifiers : Set(Classifier) = realizingClassifiers-&gt;union(realizingClassifiers.allParents())-&gt;asSet(),
        realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers-&gt;iterate(c; rci : Set(Interface) = Set{} | rci-&gt;union(c.allRealizedInterfaces())),
        ports : Set(Port) = self.ownedPort-&gt;union(allParents()-&gt;collect(ownedPort))-&gt;asSet(),
        providedByPorts : Set(Interface) = ports.provided-&gt;asSet()
in     ris-&gt;union(realizingClassifierInterfaces) -&gt;union(providedByPorts)-&gt;asSet())

	context Component::required() : Set(uml::SimpleClassifiers::Interface)

	body:
	(let 	uis : Set(Interface) = allUsedInterfaces(),
        realizingClassifiers : Set(Classifier) = self.realization.realizingClassifier-&gt;union(self.allParents()-&gt;collect(realization.realizingClassifier))-&gt;asSet(),
        allRealizingClassifiers : Set(Classifier) = realizingClassifiers-&gt;union(realizingClassifiers.allParents())-&gt;asSet(),
        realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers-&gt;iterate(c; rci : Set(Interface) = Set{} | rci-&gt;union(c.allUsedInterfaces())),
        ports : Set(Port) = self.ownedPort-&gt;union(allParents()-&gt;collect(ownedPort))-&gt;asSet(),
        usedByPorts : Set(Interface) = ports.required-&gt;asSet()
in	    uis-&gt;union(realizingClassifierInterfaces)-&gt;union(usedByPorts)-&gt;asSet()
)

	context uml::StructuredClassifiers::Component::isIndirectlyInstantiated : Boolean

	init:
	true

	context uml::StructuredClassifiers::Connector

	inv types:
		type &lt;&gt; null implies
		let noOfEnds : Integer = end-&gt;size()
		in
		  type.memberEnd-&gt;size() = noOfEnds and
		  Sequence{1..noOfEnds
		  }
		  -&gt;forAll(i |
		    end-&gt;at(i)
		    .role.type.conformsTo(type.memberEnd-&gt;at(i).type))

	inv roles:
		structuredClassifier &lt;&gt; null and
		end-&gt;forAll(e |
		  (
		    structuredClassifier.allRoles()
		    -&gt;includes(e.role) or
		    e.role.oclIsKindOf(structuredClassifiers::Port) and
		    structuredClassifier.allRoles()
		    -&gt;includes(e.partWithPort)
		  ))

	context Connector::kind() : uml::StructuredClassifiers::ConnectorKind

	body:
	(if end-&gt;exists(
		role.oclIsKindOf(Port) 
		and partWithPort-&gt;isEmpty()
		and not role.oclAsType(Port).isBehavior)
then ConnectorKind::delegation 
else ConnectorKind::assembly 
endif)

	context uml::StructuredClassifiers::ConnectorEnd

	inv role_and_part_with_port:
		partWithPort-&gt;notEmpty() implies
		role.oclIsKindOf(structuredClassifiers::Port) and
		partWithPort.type.oclAsType(commonStructure::Namespace)
		.member-&gt;includes(role)

	inv part_with_port_empty:
		role.oclIsKindOf(structuredClassifiers::Port) and role.owner = connector.owner implies
		partWithPort-&gt;isEmpty()

	inv multiplicity:
		self.compatibleWith(definingEnd)

	inv self_part_with_port:
		partWithPort-&gt;notEmpty() implies
		not partWithPort.oclIsKindOf(structuredClassifiers::Port)

	context ConnectorEnd::definingEnd() : uml::Classification::Property

	body:
	(if connector.type = null 
then
  null 
else
  let index : Integer = connector.end-&gt;indexOf(self) in
    connector.type.memberEnd-&gt;at(index)
endif)

	context uml::StructuredClassifiers::Port

	inv port_aggregation:
		aggregation = UML::Classification::AggregationKind::composite

	inv default_value:
		type.oclIsKindOf(simpleClassifiers::Interface) implies
		defaultValue-&gt;isEmpty()

	inv encapsulated_owner:
		owner = encapsulatedClassifier

	context Port::provided() : Set(uml::SimpleClassifiers::Interface)

	body:
	(if isConjugated then basicRequired() else basicProvided() endif)

	context Port::required() : Set(uml::SimpleClassifiers::Interface)

	body:
	(if isConjugated then basicProvided() else basicRequired() endif)

	context Port::basicProvided() : Set(uml::SimpleClassifiers::Interface)

	body:
	(if type.oclIsKindOf(Interface) 
then type.oclAsType(Interface)-&gt;asSet() 
else type.oclAsType(Classifier).allRealizedInterfaces() 
endif)

	context Port::basicRequired() : Set(uml::SimpleClassifiers::Interface)

	body:
	( type.oclAsType(Classifier).allUsedInterfaces() )

	context uml::StructuredClassifiers::Port::isBehavior : Boolean

	init:
	false

	context uml::StructuredClassifiers::Port::isConjugated : Boolean

	init:
	false

	context uml::StructuredClassifiers::Port::isService : Boolean

	init:
	true

	context ConnectableElement::end() : Set(uml::StructuredClassifiers::ConnectorEnd)

	body:
	(ConnectorEnd.allInstances()-&gt;select(role = self))

	context EncapsulatedClassifier::ownedPort() : OrderedSet(uml::StructuredClassifiers::Port)

	body:
	(ownedAttribute-&gt;select(oclIsKindOf(Port))-&gt;collect(oclAsType(Port))-&gt;asOrderedSet())

	context StructuredClassifier::part() : Set(uml::Classification::Property)

	body:
	(ownedAttribute-&gt;select(isComposite))

	context StructuredClassifier::allRoles() : Set(uml::StructuredClassifiers::ConnectableElement)

	body:
	(allFeatures()-&gt;select(oclIsKindOf(ConnectableElement))-&gt;collect(oclAsType(ConnectableElement))-&gt;asSet())

endpackage

package uml::StateMachines

	context uml::StateMachines::ConnectionPointReference

	inv exit_pseudostates:
		exit-&gt;forAll(kind = UML::StateMachines::PseudostateKind::exitPoint)

	inv entry_pseudostates:
		entry-&gt;forAll(kind = UML::StateMachines::PseudostateKind::entryPoint)

	context uml::StateMachines::FinalState

	inv no_exit_behavior:
		exit-&gt;isEmpty()

	inv no_outgoing_transitions:
		outgoing-&gt;size() = 0

	inv no_regions:
		region-&gt;size() = 0

	inv cannot_reference_submachine:
		submachine-&gt;isEmpty()

	inv no_entry_behavior:
		entry-&gt;isEmpty()

	inv no_state_behavior:
		doActivity-&gt;isEmpty()

	context uml::StateMachines::ProtocolStateMachine

	inv classifier_context:
		_'context' &lt;&gt; null and specification = null

	inv deep_or_shallow_history:
		region-&gt;forAll(r |
		  r.subvertex-&gt;forAll(v |
		    v.oclIsKindOf(stateMachines::Pseudostate) implies
		    v.oclAsType(stateMachines::Pseudostate).kind &lt;&gt; UML::StateMachines::PseudostateKind::deepHistory and
		    v.oclAsType(stateMachines::Pseudostate).kind &lt;&gt; UML::StateMachines::PseudostateKind::shallowHistory))

	inv entry_exit_do:
		region-&gt;forAll(r |
		  r.subvertex-&gt;forAll(v |
		    v.oclIsKindOf(stateMachines::State) implies
		    v.oclAsType(stateMachines::State)
		    .entry-&gt;isEmpty() and
		    v.oclAsType(stateMachines::State)
		    .exit-&gt;isEmpty() and
		    v.oclAsType(stateMachines::State)
		    .doActivity-&gt;isEmpty()))

	inv protocol_transitions:
		region-&gt;forAll(r |
		  r.transition-&gt;forAll(t |
		    t.oclIsTypeOf(stateMachines::ProtocolTransition)))

	context uml::StateMachines::ProtocolTransition

	inv refers_to_operation:
		if referred()-&gt;notEmpty() and containingStateMachine()._'context'-&gt;notEmpty()
		then
		  containingStateMachine()
		  ._'context'.oclAsType(simpleClassifiers::BehavioredClassifier)
		  .allFeatures()
		  -&gt;includesAll(referred())
		else true
		endif

	inv associated_actions:
		effect = null

	inv belongs_to_psm:
		container.belongsToPSM()

	context ProtocolTransition::referred() : Set(uml::Classification::Operation)

	body:
	(trigger-&gt;collect(event)-&gt;select(oclIsKindOf(CallEvent))-&gt;collect(oclAsType(CallEvent).operation)-&gt;asSet())

	context uml::StateMachines::Pseudostate

	inv transitions_outgoing:
		kind = UML::StateMachines::PseudostateKind::fork implies
		outgoing-&gt;forAll(t1, t2 |
		  let
		    contState : stateMachines::State = containingStateMachine()
		    .LCAState(t1.target, t2.target)
		  in contState &lt;&gt; null and
		    contState.region-&gt;exists(r1, r2 | r1 &lt;&gt; r2 and
		      t1.target.isContainedInRegion(r1) and
		      t2.target.isContainedInRegion(r2)))

	inv choice_vertex:
		kind = UML::StateMachines::PseudostateKind::choice implies
		incoming-&gt;size() &gt;= 1 and
		outgoing-&gt;size() &gt;= 1

	inv outgoing_from_initial:
		kind = UML::StateMachines::PseudostateKind::initial implies outgoing.guard = null and
		outgoing.trigger-&gt;isEmpty()

	inv join_vertex:
		kind = UML::StateMachines::PseudostateKind::join implies
		outgoing-&gt;size() = 1 and
		incoming-&gt;size() &gt;= 2

	inv junction_vertex:
		kind = UML::StateMachines::PseudostateKind::junction implies
		incoming-&gt;size() &gt;= 1 and
		outgoing-&gt;size() &gt;= 1

	inv history_vertices:
		kind = UML::StateMachines::PseudostateKind::deepHistory or kind = UML::StateMachines::PseudostateKind::shallowHistory implies
		outgoing-&gt;size() &lt;= 1

	inv initial_vertex:
		kind = UML::StateMachines::PseudostateKind::initial implies outgoing-&gt;size() &lt;= 1

	inv fork_vertex:
		kind = UML::StateMachines::PseudostateKind::fork implies
		incoming-&gt;size() = 1 and
		outgoing-&gt;size() &gt;= 2

	inv transitions_incoming:
		kind = UML::StateMachines::PseudostateKind::join implies
		incoming-&gt;forAll(t1, t2 |
		  let
		    contState : stateMachines::State = containingStateMachine()
		    .LCAState(t1.source, t2.source)
		  in contState &lt;&gt; null and
		    contState.region-&gt;exists(r1, r2 | r1 &lt;&gt; r2 and
		      t1.source.isContainedInRegion(r1) and
		      t2.source.isContainedInRegion(r2)))

	context uml::StateMachines::Pseudostate::kind : uml::StateMachines::PseudostateKind

	init:
	UML::StateMachines::PseudostateKind::initial

	context uml::StateMachines::Region

	inv deep_history_vertex:
		self.subvertex-&gt;select(
		  oclIsKindOf(stateMachines::Pseudostate))
		-&gt;collect(oclAsType(stateMachines::Pseudostate))
		-&gt;select((kind = UML::StateMachines::PseudostateKind::deepHistory))
		-&gt;size() &lt;= 1

	inv shallow_history_vertex:
		subvertex-&gt;select(
		  oclIsKindOf(stateMachines::Pseudostate))
		-&gt;collect(oclAsType(stateMachines::Pseudostate))
		-&gt;select((kind = UML::StateMachines::PseudostateKind::shallowHistory))
		-&gt;size() &lt;= 1

	inv owned:
		(stateMachine &lt;&gt; null implies state = null
		) and
		(state &lt;&gt; null implies stateMachine = null
		)

	inv initial_vertex:
		self.subvertex-&gt;select(
		  oclIsKindOf(stateMachines::Pseudostate))
		-&gt;collect(oclAsType(stateMachines::Pseudostate))
		-&gt;select((kind = UML::StateMachines::PseudostateKind::initial))
		-&gt;size() &lt;= 1

	context Region::isConsistentWith(redefiningElement : uml::Classification::RedefinableElement) : Boolean

	pre _'pre':
		redefiningElement.isRedefinitionContextValid(self)

	body:
	(-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profiles
true)

	context Region::belongsToPSM() : Boolean

	body:
	(if  stateMachine &lt;&gt; null 
then
  stateMachine.oclIsKindOf(ProtocolStateMachine)
else 
  state &lt;&gt; null  implies  state.container.belongsToPSM()
endif )

	context Region::containingStateMachine() : uml::StateMachines::StateMachine

	body:
	(if stateMachine = null 
then
  state.containingStateMachine()
else
  stateMachine
endif)

	context Region::isRedefinitionContextValid(redefinedElement : uml::Classification::RedefinableElement) : Boolean

	body:
	(if redefinedElement.oclIsKindOf(Region) then
  let redefinedRegion : Region = redefinedElement.oclAsType(Region) in
    if stateMachine-&gt;isEmpty() then
    -- the Region is owned by a State
      (state.redefinedState-&gt;notEmpty() and state.redefinedState.region-&gt;includes(redefinedRegion))
    else -- the region is owned by a StateMachine
      (stateMachine.extendedStateMachine-&gt;notEmpty() and
        stateMachine.extendedStateMachine-&gt;exists(sm : StateMachine |
          sm.region-&gt;includes(redefinedRegion)))
    endif
else
  false
endif)

	context Region::redefinitionContext() : uml::Classification::Classifier

	body:
	(let sm : StateMachine = containingStateMachine() in
if sm._'context' = null or sm.general-&gt;notEmpty() then
  sm
else
  sm._'context'
endif)

	context uml::StateMachines::State

	inv entry_or_exit:
		connectionPoint-&gt;forAll(kind = UML::StateMachines::PseudostateKind::entryPoint or kind = UML::StateMachines::PseudostateKind::exitPoint)

	inv submachine_states:
		isSubmachineState implies connection-&gt;notEmpty()

	inv composite_states:
		connectionPoint-&gt;notEmpty() implies isComposite

	inv destinations_or_sources_of_transitions:
		self.isSubmachineState implies
		self.connection-&gt;forAll(cp |
		  cp.entry-&gt;forAll(ps | ps.stateMachine = self.submachine) and
		  cp.exit-&gt;forAll(ps | ps.stateMachine = self.submachine))

	inv submachine_or_regions:
		isComposite implies not isSubmachineState

	context State::isConsistentWith(redefiningElement : uml::Classification::RedefinableElement) : Boolean

	pre _'pre':
		redefiningElement.isRedefinitionContextValid(self)

	body:
	(-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profiles
true)

	context State::containingStateMachine() : uml::StateMachines::StateMachine

	body:
	(container.containingStateMachine())

	context State::isComposite() : Boolean

	body:
	(region-&gt;notEmpty())

	context State::isOrthogonal() : Boolean

	body:
	(region-&gt;size () &gt; 1)

	context State::isRedefinitionContextValid(redefinedElement : uml::Classification::RedefinableElement) : Boolean

	body:
	(if redefinedElement.oclIsKindOf(State) then
  let redefinedState : State = redefinedElement.oclAsType(State) in
    container.redefinedElement.oclAsType(Region)-&gt;exists(r:Region |
      r.subvertex-&gt;includes(redefinedState))
else
  false
endif)

	context State::isSimple() : Boolean

	body:
	((region-&gt;isEmpty()) and not isSubmachineState())

	context State::isSubmachineState() : Boolean

	body:
	(submachine &lt;&gt; null)

	context State::redefinitionContext() : uml::Classification::Classifier

	body:
	(let sm : StateMachine = containingStateMachine() in
if sm._'context' = null or sm.general-&gt;notEmpty() then
  sm
else
  sm._'context'
endif)

	context uml::StateMachines::StateMachine

	inv connection_points:
		connectionPoint-&gt;forAll(kind = UML::StateMachines::PseudostateKind::entryPoint or kind = UML::StateMachines::PseudostateKind::exitPoint)

	inv classifier_context:
		_'context' &lt;&gt; null implies
		not _'context'.oclIsKindOf(simpleClassifiers::Interface)

	inv method:
		specification &lt;&gt; null implies connectionPoint-&gt;isEmpty()

	inv context_classifier:
		specification &lt;&gt; null implies _'context' &lt;&gt; null and
		specification.featuringClassifier-&gt;exists(c | c = _'context')

	context StateMachine::LCA(s1 : uml::StateMachines::Vertex, s2 : uml::StateMachines::Vertex) :
	uml::StateMachines::Region

	body:
	(if ancestor(s1, s2) then 
    s2.container
else
	if ancestor(s2, s1) then
	    s1.container 
	else 
	    LCA(s1.container.state, s2.container.state)
	endif
endif)

	context StateMachine::ancestor(s1 : uml::StateMachines::Vertex, s2 : uml::StateMachines::Vertex) : Boolean

	body:
	(if (s2 = s1) then 
	true 
else 
	if s1.container.stateMachine-&gt;notEmpty() then 
	    true
	else 
	    if s2.container.stateMachine-&gt;notEmpty() then 
	        false
	    else
	        ancestor(s1, s2.container.state)
	     endif
	 endif
endif  )

	context StateMachine::isConsistentWith(redefiningElement : uml::Classification::RedefinableElement) : Boolean

	body:
	(-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profiles
true)

	context StateMachine::isRedefinitionContextValid(redefinedElement : uml::Classification::RedefinableElement) :
	Boolean

	body:
	(if redefinedElement.oclIsKindOf(StateMachine) then
  let redefinedStateMachine : StateMachine = redefinedElement.oclAsType(StateMachine) in
    self._'context'().oclAsType(BehavioredClassifier).redefinedClassifier-&gt;
      includes(redefinedStateMachine._'context'())
else
  false
endif)

	context StateMachine::LCAState(v1 : uml::StateMachines::Vertex, v2 : uml::StateMachines::Vertex) :
	uml::StateMachines::State

	body:
	(if v2.oclIsTypeOf(State) and ancestor(v1, v2) then
	v2.oclAsType(State)
else if v1.oclIsTypeOf(State) and ancestor(v2, v1) then
	v1.oclAsType(State)
else if (v1.container.state-&gt;isEmpty() or v2.container.state-&gt;isEmpty()) then 
	null.oclAsType(State)
else LCAState(v1.container.state, v2.container.state)
endif endif endif)

	context uml::StateMachines::Transition

	inv state_is_external:
		kind = UML::StateMachines::TransitionKind::external implies
		not (
		  source.oclIsKindOf(stateMachines::Pseudostate) and
		  source.oclAsType(stateMachines::Pseudostate).kind = UML::StateMachines::PseudostateKind::entryPoint
		)

	inv join_segment_guards:
		target.oclIsKindOf(stateMachines::Pseudostate) and
		target.oclAsType(stateMachines::Pseudostate).kind = UML::StateMachines::PseudostateKind::join implies guard = null and
		trigger-&gt;isEmpty()

	inv state_is_internal:
		kind = UML::StateMachines::TransitionKind::internal implies
		source.oclIsKindOf(stateMachines::State) and source = target

	inv outgoing_pseudostates:
		source.oclIsKindOf(stateMachines::Pseudostate) and
		source.oclAsType(stateMachines::Pseudostate).kind &lt;&gt; UML::StateMachines::PseudostateKind::initial implies
		trigger-&gt;isEmpty()

	inv join_segment_state:
		target.oclIsKindOf(stateMachines::Pseudostate) and
		target.oclAsType(stateMachines::Pseudostate).kind = UML::StateMachines::PseudostateKind::join implies
		source.oclIsKindOf(stateMachines::State)

	inv fork_segment_state:
		source.oclIsKindOf(stateMachines::Pseudostate) and
		source.oclAsType(stateMachines::Pseudostate).kind = UML::StateMachines::PseudostateKind::fork implies
		target.oclIsKindOf(stateMachines::State)

	inv state_is_local:
		kind = UML::StateMachines::TransitionKind::local implies
		source.oclIsKindOf(stateMachines::State) and
		source.oclAsType(stateMachines::State).isComposite or
		source.oclIsKindOf(stateMachines::Pseudostate) and
		source.oclAsType(stateMachines::Pseudostate).kind = UML::StateMachines::PseudostateKind::entryPoint

	inv initial_transition:
		source.oclIsKindOf(stateMachines::Pseudostate) and
		container.stateMachine-&gt;notEmpty() implies
		trigger-&gt;isEmpty()

	inv fork_segment_guards:
		source.oclIsKindOf(stateMachines::Pseudostate) and
		source.oclAsType(stateMachines::Pseudostate).kind = UML::StateMachines::PseudostateKind::fork implies guard = null and
		trigger-&gt;isEmpty()

	context Transition::isConsistentWith(redefiningElement : uml::Classification::RedefinableElement) : Boolean

	pre _'pre':
		redefiningElement.isRedefinitionContextValid(self)

	body:
	(-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profiles
true)

	context Transition::containingStateMachine() : uml::StateMachines::StateMachine

	body:
	(container.containingStateMachine())

	context Transition::redefinitionContext() : uml::Classification::Classifier

	body:
	(let sm : StateMachine = containingStateMachine() in
if sm._'context' = null or sm.general-&gt;notEmpty() then
  sm
else
  sm._'context'
endif)

	context uml::StateMachines::Transition::kind : uml::StateMachines::TransitionKind

	init:
	UML::StateMachines::TransitionKind::external

	context Vertex::containingStateMachine() : uml::StateMachines::StateMachine

	body:
	(if container &lt;&gt; null
then
-- the container is a region
   container.containingStateMachine()
else 
   if (self.oclIsKindOf(Pseudostate)) and ((self.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint) or (self.oclAsType(Pseudostate).kind = PseudostateKind::exitPoint)) then
      self.oclAsType(Pseudostate).stateMachine
   else 
      if (self.oclIsKindOf(ConnectionPointReference)) then
          self.oclAsType(ConnectionPointReference).state.containingStateMachine() -- no other valid cases possible
      else 
          null
      endif
   endif
endif

)

	context Vertex::incoming() : Set(uml::StateMachines::Transition)

	body:
	(Transition.allInstances()-&gt;select(target=self))

	context Vertex::outgoing() : Set(uml::StateMachines::Transition)

	body:
	(Transition.allInstances()-&gt;select(source=self))

	context Vertex::isContainedInState(s : uml::StateMachines::State) : Boolean

	body:
	(if not s.isComposite() or container-&gt;isEmpty() then
	false
else
	if container.state = s then 
		true
	else
		container.state.isContainedInState(s)
	endif
endif)

	context Vertex::isContainedInRegion(r : uml::StateMachines::Region) : Boolean

	body:
	(if (container = r) then
	true
else
	if (r.state-&gt;isEmpty()) then
		false
	else
		container.state.isContainedInRegion(r)
	endif
endif)

endpackage

package uml::SimpleClassifiers

	context uml::SimpleClassifiers::BehavioredClassifier

	inv class_behavior:
		classifierBehavior-&gt;notEmpty() implies
		classifierBehavior.specification-&gt;isEmpty()

	context uml::SimpleClassifiers::Enumeration

	inv immutable:
		ownedAttribute-&gt;forAll(isReadOnly)

	context uml::SimpleClassifiers::Interface

	inv visibility:
		feature-&gt;forAll(visibility = UML::CommonStructure::VisibilityKind::public)

	context uml::SimpleClassifiers::Reception

	inv same_name_as_signal:
		name = signal.name

	inv same_structure_as_signal:
		signal.ownedAttribute-&gt;size() =
		ownedParameter-&gt;size() and
		Sequence{1..signal.ownedAttribute-&gt;size()
		}
		-&gt;forAll(i |
		  ownedParameter-&gt;at(i).direction = UML::Classification::ParameterDirectionKind::_'in' and
		  ownedParameter-&gt;at(i).name =
		  signal.ownedAttribute-&gt;at(i).name and
		  ownedParameter-&gt;at(i).type =
		  signal.ownedAttribute-&gt;at(i).type and
		  ownedParameter-&gt;at(i)
		  .lowerBound() =
		  signal.ownedAttribute-&gt;at(i)
		  .lowerBound() and
		  ownedParameter-&gt;at(i)
		  .upperBound() =
		  signal.ownedAttribute-&gt;at(i)
		  .upperBound())

	context EnumerationLiteral::classifier() : uml::SimpleClassifiers::Enumeration

	body:
	(enumeration)

endpackage

package uml::Packages

	context uml::Packages::Extension

	inv non_owned_end:
		metaclassEnd()
		-&gt;notEmpty() and
		metaclassEnd()
		.type.oclIsKindOf(structuredClassifiers::Class)

	inv is_binary:
		memberEnd-&gt;size() = 2

	context Extension::isRequired() : Boolean

	body:
	(ownedEnd.lowerBound() = 1)

	context Extension::metaclass() : uml::StructuredClassifiers::Class

	body:
	(metaclassEnd().type.oclAsType(Class))

	context Extension::metaclassEnd() : uml::Classification::Property

	body:
	(memberEnd-&gt;reject(p | ownedEnd-&gt;includes(p.oclAsType(ExtensionEnd)))-&gt;any(true))

	context uml::Packages::ExtensionEnd

	inv multiplicity:
		(lowerBound() = 0 or lowerBound() = 1
		) and
		upperBound() = 1

	inv aggregation:
		self.aggregation = UML::Classification::AggregationKind::composite

	context ExtensionEnd::lowerBound() : Integer

	body:
	(if lowerValue=null then 0 else lowerValue.integerValue() endif)

	context uml::Packages::Package

	inv elements_public_or_private:
		packagedElement-&gt;forAll(e | e.visibility &lt;&gt; null implies e.visibility = UML::CommonStructure::VisibilityKind::public or e.visibility = UML::CommonStructure::VisibilityKind::private)

	context Package::makesVisible(el : uml::CommonStructure::NamedElement) : Boolean

	pre _'pre':
		member-&gt;includes(el)

	body:
	(ownedMember-&gt;includes(el) or
(elementImport-&gt;select(ei|ei.importedElement = VisibilityKind::public)-&gt;collect(importedElement.oclAsType(NamedElement))-&gt;includes(el)) or
(packageImport-&gt;select(visibility = VisibilityKind::public)-&gt;collect(importedPackage.member-&gt;includes(el))-&gt;notEmpty()))

	context Package::allApplicableStereotypes() : Set(uml::Packages::Stereotype)

	body:
	(let ownedPackages : Bag(Package) = ownedMember-&gt;select(oclIsKindOf(Package))-&gt;collect(oclAsType(Package)) in
 ownedStereotype-&gt;union(ownedPackages.allApplicableStereotypes())-&gt;flatten()-&gt;asSet()
)

	context Package::containingProfile() : uml::Packages::Profile

	body:
	(if self.oclIsKindOf(Profile) then 
	self.oclAsType(Profile)
else
	self.namespace.oclAsType(Package).containingProfile()
endif)

	context Package::mustBeOwned() : Boolean

	body:
	(false)

	context Package::nestedPackage() : Set(uml::Packages::Package)

	body:
	(packagedElement-&gt;select(oclIsKindOf(Package))-&gt;collect(oclAsType(Package))-&gt;asSet())

	context Package::ownedStereotype() : Set(uml::Packages::Stereotype)

	body:
	(packagedElement-&gt;select(oclIsKindOf(Stereotype))-&gt;collect(oclAsType(Stereotype))-&gt;asSet())

	context Package::ownedType() : Set(uml::CommonStructure::Type)

	body:
	(packagedElement-&gt;select(oclIsKindOf(Type))-&gt;collect(oclAsType(Type))-&gt;asSet())

	context Package::visibleMembers() : Set(uml::CommonStructure::PackageableElement)

	body:
	(member-&gt;select( m | m.oclIsKindOf(PackageableElement) and self.makesVisible(m))-&gt;collect(oclAsType(PackageableElement))-&gt;asSet())

	context uml::Packages::Profile

	inv metaclass_reference_not_specialized:
		metaclassReference.importedElement-&gt;select(c |
		  c.oclIsKindOf(classification::Classifier) and
		  c.oclAsType(classification::Classifier)
		  .allParents()
		  -&gt;collect(namespace)
		  -&gt;includes(self))
		-&gt;isEmpty() and
		packagedElement-&gt;select(
		  oclIsKindOf(classification::Classifier))
		-&gt;collect(
		  oclAsType(classification::Classifier)
		  .allParents())
		-&gt;intersection(
		  metaclassReference.importedElement-&gt;select(
		    oclIsKindOf(classification::Classifier))
		  -&gt;collect(oclAsType(classification::Classifier)))
		-&gt;isEmpty()

	inv references_same_metamodel:
		metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()
		-&gt;union(metaclassReference.importedElement.allOwningPackages())
		-&gt;notEmpty()

	context uml::Packages::Stereotype

	inv binaryAssociationsOnly:
		ownedAttribute.association-&gt;forAll(memberEnd-&gt;size() = 2)

	inv generalize:
		allParents()
		-&gt;forAll(oclIsKindOf(packages::Stereotype)) and
		classification::Classifier.allInstances()
		-&gt;forAll(c |
		  (
		    c.allParents()
		    -&gt;exists(oclIsKindOf(packages::Stereotype)) implies
		    c.oclIsKindOf(packages::Stereotype)
		  ))

	inv name_not_clash:
		null

	inv associationEndOwnership:
		ownedAttribute-&gt;select(
		  association-&gt;notEmpty() and
		  not association.oclIsKindOf(packages::Extension) and
		  not type.oclIsKindOf(packages::Stereotype))
		-&gt;forAll(opposite.owner = association)

	inv base_property_upper_bound:
		null

	inv base_property_multiplicity_single_extension:
		null

	inv base_property_multiplicity_multiple_extension:
		null

	context Stereotype::containingProfile() : uml::Packages::Profile

	body:
	(self.namespace.oclAsType(Package).containingProfile())

	context Stereotype::profile() : uml::Packages::Profile

	body:
	(self.containingProfile())

	context uml::Packages::ProfileApplication::isStrict : Boolean

	init:
	false

endpackage

package uml::Interactions

	context uml::Interactions::ActionExecutionSpecification

	inv action_referenced:
		(
		  enclosingInteraction-&gt;notEmpty() or
		  enclosingOperand.combinedFragment-&gt;notEmpty()
		) and
		let
		  parentInteraction : Set(interactions::Interaction) = enclosingInteraction.oclAsType(interactions::Interaction)
		  -&gt;asSet()
		  -&gt;union(
		    enclosingOperand.combinedFragment-&gt;closure(enclosingOperand.combinedFragment)
		    -&gt;collect(enclosingInteraction)
		    .oclAsType(interactions::Interaction)
		    -&gt;asSet())
		in
		  parentInteraction-&gt;size() = 1 and
		  self.action.interaction-&gt;asSet() = parentInteraction

	context uml::Interactions::CombinedFragment

	inv break:
		interactionOperator = UML::Interactions::InteractionOperatorKind::break implies
		enclosingInteraction.oclAsType(interactions::InteractionFragment)
		-&gt;asSet()
		-&gt;union(
		  enclosingOperand.oclAsType(interactions::InteractionFragment)
		  -&gt;asSet())
		.covered-&gt;asSet() =
		self.covered-&gt;asSet()

	inv consider_and_ignore:
		interactionOperator = UML::Interactions::InteractionOperatorKind::consider or interactionOperator = UML::Interactions::InteractionOperatorKind::ignore implies
		oclIsKindOf(interactions::ConsiderIgnoreFragment)

	inv opt_loop_break_neg:
		interactionOperator = UML::Interactions::InteractionOperatorKind::opt or interactionOperator = UML::Interactions::InteractionOperatorKind::loop or interactionOperator = UML::Interactions::InteractionOperatorKind::break or interactionOperator = UML::Interactions::InteractionOperatorKind::assert or interactionOperator = UML::Interactions::InteractionOperatorKind::neg implies
		operand-&gt;size() = 1

	context uml::Interactions::CombinedFragment::interactionOperator : uml::Interactions::InteractionOperatorKind

	init:
	UML::Interactions::InteractionOperatorKind::seq

	context uml::Interactions::ConsiderIgnoreFragment

	inv consider_or_ignore:
		interactionOperator = UML::Interactions::InteractionOperatorKind::consider or interactionOperator = UML::Interactions::InteractionOperatorKind::ignore

	inv type:
		message-&gt;forAll(m |
		  m.oclIsKindOf(classification::Operation) or
		  m.oclIsKindOf(simpleClassifiers::Signal))

	context uml::Interactions::Continuation

	inv first_or_last_interaction_fragment:
		enclosingOperand-&gt;notEmpty() and
		let peerFragments : OrderedSet(interactions::InteractionFragment) = enclosingOperand.fragment
		in
		  peerFragments-&gt;notEmpty() and
		  (peerFragments-&gt;first() = self or peerFragments-&gt;last() = self
		  )

	inv same_name:
		enclosingOperand.combinedFragment-&gt;notEmpty() and
		let
		  parentInteraction : Set(interactions::Interaction) = enclosingOperand.combinedFragment-&gt;closure(enclosingOperand.combinedFragment)
		  -&gt;collect(enclosingInteraction)
		  .oclAsType(interactions::Interaction)
		  -&gt;asSet()
		in
		  parentInteraction-&gt;size() = 1 and
		  let
		    peerInteractions : Set(interactions::Interaction) = parentInteraction-&gt;union(
		      parentInteraction-&gt;collect(_'context')
		      -&gt;collect(behavior)
		      -&gt;select(oclIsKindOf(interactions::Interaction))
		      .oclAsType(interactions::Interaction)
		      -&gt;asSet())
		    -&gt;asSet()
		  in
		    peerInteractions-&gt;notEmpty() and
		    let
		      combinedFragments1 : Set(interactions::CombinedFragment) = peerInteractions.fragment-&gt;select(
		        oclIsKindOf(interactions::CombinedFragment))
		      .oclAsType(interactions::CombinedFragment)
		      -&gt;asSet()
		    in
		      combinedFragments1-&gt;notEmpty() and
		      combinedFragments1-&gt;closure(
		        operand.fragment-&gt;select(
		          oclIsKindOf(interactions::CombinedFragment))
		        .oclAsType(interactions::CombinedFragment))
		      -&gt;asSet()
		      .operand.fragment-&gt;select(
		        oclIsKindOf(interactions::Continuation))
		      .oclAsType(interactions::Continuation)
		      -&gt;asSet()
		      -&gt;forAll(c |
		        (c.name = self.name implies
		          c.covered-&gt;asSet()
		          -&gt;forAll(cl |
		            self.covered-&gt;asSet()
		            -&gt;select(
		              (represents = cl.represents and selector = cl.selector
		              ))
		            -&gt;asSet()
		            -&gt;size() = 1) and
		          self.covered-&gt;asSet()
		          -&gt;forAll(cl |
		            c.covered-&gt;asSet()
		            -&gt;select(
		              (represents = cl.represents and selector = cl.selector
		              ))
		            -&gt;asSet()
		            -&gt;size() = 1)
		        ))

	inv global:
		enclosingOperand-&gt;notEmpty() and
		let operandLifelines : Set(interactions::Lifeline) = enclosingOperand.covered
		in
		  operandLifelines-&gt;notEmpty() and
		  operandLifelines-&gt;forAll(ol | self.covered-&gt;includes(ol))

	context uml::Interactions::Continuation::setting : Boolean

	init:
	true

	context uml::Interactions::DestructionOccurrenceSpecification

	inv no_occurrence_specifications_below:
		let o : interactions::InteractionOperand = enclosingOperand
		in
		  o-&gt;notEmpty() and
		  let
		    peerEvents : OrderedSet(interactions::OccurrenceSpecification) = covered.events-&gt;select(enclosingOperand = o)
		  in peerEvents-&gt;last() = self

	context uml::Interactions::ExecutionSpecification

	inv same_lifeline:
		start.covered = finish.covered

	context uml::Interactions::Gate

	inv actual_gate_matched:
		interactionUse-&gt;notEmpty() implies
		interactionUse.refersTo.formalGate-&gt;select(matches(self))
		-&gt;size() = 1

	inv inside_cf_matched:
		isInsideCF() implies
		combinedFragment.cfragmentGate-&gt;select(
		  (isOutsideCF() and matches(self)
		  ))
		-&gt;size() = 1

	inv outside_cf_matched:
		isOutsideCF() implies
		if
		  self.combinedFragment.interactionOperator-&gt;asOrderedSet()
		  -&gt;first() = UML::Interactions::InteractionOperatorKind::alt
		then
		  self.combinedFragment.operand-&gt;forAll(op |
		    self.combinedFragment.cfragmentGate-&gt;select(
		      (
		        isInsideCF() and
		        oppositeEnd()
		        .enclosingFragment()
		        -&gt;includes(self.combinedFragment) and
		        matches(self)
		      ))
		    -&gt;size() = 1)
		else
		  self.combinedFragment.cfragmentGate-&gt;select(
		    (isInsideCF() and matches(self)
		    ))
		  -&gt;size() = 1
		endif

	inv formal_gate_distinguishable:
		isFormal() implies
		interaction.formalGate-&gt;select(getName() = self.getName())
		-&gt;size() = 1

	inv actual_gate_distinguishable:
		isActual() implies
		interactionUse.actualGate-&gt;select(getName() = self.getName())
		-&gt;size() = 1

	inv outside_cf_gate_distinguishable:
		isOutsideCF() implies
		combinedFragment.cfragmentGate-&gt;select(getName() = self.getName())
		-&gt;size() = 1

	inv inside_cf_gate_distinguishable:
		isInsideCF() implies
		let selfOperand : interactions::InteractionOperand = self.getOperand()
		in
		  combinedFragment.cfragmentGate-&gt;select(
		    (isInsideCF() and getName() = self.getName()
		    ))
		  -&gt;select(getOperand() = selfOperand)
		  -&gt;size() = 1

	context Gate::isOutsideCF() : Boolean

	body:
	(self.oppositeEnd()-&gt; notEmpty() and combinedFragment-&gt;notEmpty() implies
let oppEnd : MessageEnd = self.oppositeEnd()-&gt;asOrderedSet()-&gt;first() in
if oppEnd.oclIsKindOf(MessageOccurrenceSpecification) 
then let oppMOS : MessageOccurrenceSpecification = oppEnd.oclAsType(MessageOccurrenceSpecification)
in  self.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)-&gt;asSet()-&gt;
     union(self.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)-&gt;asSet()) =
     oppMOS.enclosingInteraction.oclAsType(InteractionFragment)-&gt;asSet()-&gt;
     union(oppMOS.enclosingOperand.oclAsType(InteractionFragment)-&gt;asSet())
else let oppGate : Gate = oppEnd.oclAsType(Gate) 
in self.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)-&gt;asSet()-&gt;
     union(self.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)-&gt;asSet()) =
     oppGate.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)-&gt;asSet()-&gt;
     union(oppGate.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)-&gt;asSet())
endif)

	context Gate::isInsideCF() : Boolean

	body:
	(self.oppositeEnd()-&gt; notEmpty() and combinedFragment-&gt;notEmpty() implies
let oppEnd : MessageEnd = self.oppositeEnd()-&gt;asOrderedSet()-&gt;first() in
if oppEnd.oclIsKindOf(MessageOccurrenceSpecification)
then let oppMOS : MessageOccurrenceSpecification
= oppEnd.oclAsType(MessageOccurrenceSpecification)
in combinedFragment = oppMOS.enclosingOperand.combinedFragment
else let oppGate : Gate = oppEnd.oclAsType(Gate)
in combinedFragment = oppGate.combinedFragment.enclosingOperand.combinedFragment
endif)

	context Gate::isActual() : Boolean

	body:
	(interactionUse-&gt;notEmpty())

	context Gate::isFormal() : Boolean

	body:
	(interaction-&gt;notEmpty())

	context Gate::getName() : String

	body:
	(if name-&gt;notEmpty() then name-&gt;asOrderedSet()-&gt;first()
else  if isActual() or isOutsideCF() 
  then if isSend() 
    then 'out_'.concat(self.message.name-&gt;asOrderedSet()-&gt;first())
    else 'in_'.concat(self.message.name-&gt;asOrderedSet()-&gt;first())
    endif
  else if isSend()
    then 'in_'.concat(self.message.name-&gt;asOrderedSet()-&gt;first())
    else 'out_'.concat(self.message.name-&gt;asOrderedSet()-&gt;first())
    endif
  endif
endif)

	context Gate::matches(gateToMatch : uml::Interactions::Gate) : Boolean

	body:
	(self.getName() = gateToMatch.getName() and 
self.message.messageSort = gateToMatch.message.messageSort and
self.message.name = gateToMatch.message.name and
self.message.sendEvent-&gt;includes(self) implies gateToMatch.message.receiveEvent-&gt;includes(gateToMatch)  and
self.message.receiveEvent-&gt;includes(self) implies gateToMatch.message.sendEvent-&gt;includes(gateToMatch) and
self.message.signature = gateToMatch.message.signature)

	context Gate::isDistinguishableFrom(n : uml::CommonStructure::NamedElement, ns : uml::CommonStructure::Namespace) :
	Boolean

	body:
	(true)

	context Gate::getOperand() : uml::Interactions::InteractionOperand

	body:
	(if isInsideCF() then
  let oppEnd : MessageEnd = self.oppositeEnd()-&gt;asOrderedSet()-&gt;first() in
    if oppEnd.oclIsKindOf(MessageOccurrenceSpecification)
    then let oppMOS : MessageOccurrenceSpecification = oppEnd.oclAsType(MessageOccurrenceSpecification)
        in oppMOS.enclosingOperand-&gt;asOrderedSet()-&gt;first()
    else let oppGate : Gate = oppEnd.oclAsType(Gate)
        in oppGate.combinedFragment.enclosingOperand-&gt;asOrderedSet()-&gt;first()
    endif
  else null
endif)

	context uml::Interactions::GeneralOrdering

	inv irreflexive_transitive_closure:
		after-&gt;closure(toAfter.after)-&gt;excludes(before)

	context uml::Interactions::Interaction

	inv not_contained:
		enclosingInteraction-&gt;isEmpty()

	context uml::Interactions::InteractionConstraint

	inv minint_maxint:
		maxint-&gt;notEmpty() or
		minint-&gt;notEmpty() implies interactionOperand.combinedFragment.interactionOperator = UML::Interactions::InteractionOperatorKind::loop

	inv minint_non_negative:
		minint-&gt;notEmpty() implies minint-&gt;asSequence()-&gt;first().integerValue() &gt;= 0

	inv maxint_positive:
		maxint-&gt;notEmpty() implies maxint-&gt;asSequence()-&gt;first().integerValue() &gt; 0

	inv dynamic_variables:
		null

	inv global_data:
		null

	inv maxint_greater_equal_minint:
		maxint-&gt;notEmpty() implies
		minint-&gt;notEmpty() and
		maxint-&gt;asSequence()
		-&gt;first()
		.integerValue() &gt;=
		minint-&gt;asSequence()
		-&gt;first()
		.integerValue()

	context uml::Interactions::InteractionOperand

	inv guard_contain_references:
		null

	inv guard_directly_prior:
		null

	context uml::Interactions::InteractionUse

	inv gates_match:
		actualGate-&gt;notEmpty() implies
		refersTo.formalGate-&gt;forAll(fg |
		  self.actualGate-&gt;select(matches(fg))
		  -&gt;size() = 1) and
		self.actualGate-&gt;forAll(ag |
		  refersTo.formalGate-&gt;select(matches(ag))
		  -&gt;size() = 1)

	inv arguments_are_constants:
		null

	inv returnValueRecipient_coverage:
		returnValueRecipient-&gt;asSet()
		-&gt;notEmpty() implies
		let
		  covCE : Set(structuredClassifiers::ConnectableElement) = covered.represents-&gt;asSet()
		in
		  covCE-&gt;notEmpty() and
		  let
		    classes : Set(classification::Classifier) = covCE.type.oclIsKindOf(classification::Classifier)
		    .oclAsType(classification::Classifier)
		    -&gt;asSet()
		  in
		    let
		      allProps : Set(classification::Property) = classes.attribute-&gt;union(
		        classes.allParents().attribute)
		      -&gt;asSet()
		    in allProps-&gt;includes(returnValueRecipient)

	inv arguments_correspond_to_parameters:
		null

	inv returnValue_type_recipient_correspondence:
		returnValue.type-&gt;asSequence()
		-&gt;notEmpty() implies
		returnValue.type-&gt;asSequence()
		-&gt;first() =
		returnValueRecipient.type-&gt;asSequence()
		-&gt;first()

	inv all_lifelines:
		let
		  parentInteraction : Set(interactions::Interaction) = enclosingInteraction-&gt;asSet()
		  -&gt;union(
		    enclosingOperand.combinedFragment-&gt;closure(enclosingOperand.combinedFragment)
		    -&gt;collect(enclosingInteraction)
		    .oclAsType(interactions::Interaction)
		    -&gt;asSet())
		in
		  parentInteraction-&gt;size() = 1 and
		  let refInteraction : interactions::Interaction = refersTo
		  in
		    parentInteraction.covered-&gt;forAll(intLifeline |
		      refInteraction.covered-&gt;forAll(refLifeline |
		        (refLifeline.represents = intLifeline.represents and
		          (
		            refLifeline.selector.oclIsKindOf(values::LiteralString) implies
		            intLifeline.selector.oclIsKindOf(values::LiteralString) and
		            refLifeline.selector.oclAsType(values::LiteralString).value =
		            intLifeline.selector.oclAsType(values::LiteralString).value
		          ) and
		          (
		            refLifeline.selector.oclIsKindOf(values::LiteralInteger) implies
		            intLifeline.selector.oclIsKindOf(values::LiteralInteger) and
		            refLifeline.selector.oclAsType(values::LiteralInteger).value =
		            intLifeline.selector.oclAsType(values::LiteralInteger).value
		          ) implies
		          self.covered-&gt;asSet()
		          -&gt;includes(intLifeline)
		        )))

	context uml::Interactions::Lifeline

	inv selector_specified:
		self.selector-&gt;notEmpty() =
		(
		  self.represents.oclIsKindOf(commonStructure::MultiplicityElement) and
		  self.represents.oclAsType(commonStructure::MultiplicityElement)
		  .isMultivalued()
		)

	inv interaction_uses_share_lifeline:
		let intUses : Set(interactions::InteractionUse) = interaction.interactionUse
		in
		  intUses-&gt;forAll(iuse |
		    let
		      usingInteraction : Set(interactions::Interaction) = iuse.enclosingInteraction-&gt;asSet()
		      -&gt;union(
		        iuse.enclosingOperand.combinedFragment-&gt;asSet()
		        -&gt;closure(enclosingOperand.combinedFragment)
		        .enclosingInteraction-&gt;asSet())
		    in
		      let
		        peerUses : Set(interactions::InteractionUse) = usingInteraction.fragment-&gt;select(
		          oclIsKindOf(interactions::InteractionUse))
		        .oclAsType(interactions::InteractionUse)
		        -&gt;asSet()
		        -&gt;union(
		          usingInteraction.fragment-&gt;select(
		            oclIsKindOf(interactions::CombinedFragment))
		          .oclAsType(interactions::CombinedFragment)
		          -&gt;asSet()
		          -&gt;closure(
		            operand.fragment-&gt;select(
		              oclIsKindOf(interactions::CombinedFragment))
		            .oclAsType(interactions::CombinedFragment))
		          .operand.fragment-&gt;select(
		            oclIsKindOf(interactions::InteractionUse))
		          .oclAsType(interactions::InteractionUse)
		          -&gt;asSet())
		        -&gt;excluding(iuse)
		      in
		        peerUses-&gt;forAll(peerUse |
		          peerUse.refersTo.lifeline-&gt;forAll(l | l.represents = self.represents and
		            (
		              self.selector.oclIsKindOf(values::LiteralString) implies
		              l.selector.oclIsKindOf(values::LiteralString) and
		              self.selector.oclAsType(values::LiteralString).value =
		              l.selector.oclAsType(values::LiteralString).value
		            ) and
		            (
		              self.selector.oclIsKindOf(values::LiteralInteger) implies
		              l.selector.oclIsKindOf(values::LiteralInteger) and
		              self.selector.oclAsType(values::LiteralInteger).value =
		              l.selector.oclAsType(values::LiteralInteger).value
		            ) implies
		            usingInteraction.lifeline-&gt;exists(represents = self.represents and
		              (
		                self.selector.oclIsKindOf(values::LiteralString) implies
		                l.selector.oclIsKindOf(values::LiteralString) and
		                self.selector.oclAsType(values::LiteralString).value =
		                l.selector.oclAsType(values::LiteralString).value
		              ) and
		              (
		                self.selector.oclIsKindOf(values::LiteralInteger) implies
		                l.selector.oclIsKindOf(values::LiteralInteger) and
		                self.selector.oclAsType(values::LiteralInteger).value =
		                l.selector.oclAsType(values::LiteralInteger).value
		              )))))

	inv same_classifier:
		represents.namespace-&gt;closure(namespace)
		-&gt;includes(interaction._'context')

	inv selector_int_or_string:
		self.selector-&gt;notEmpty() implies
		self.selector.oclIsKindOf(values::LiteralInteger) or
		self.selector.oclIsKindOf(values::LiteralString)

	context uml::Interactions::Message

	inv sending_receiving_message_event:
		receiveEvent.oclIsKindOf(interactions::MessageOccurrenceSpecification) implies
		let
		  f : interactions::Lifeline = sendEvent-&gt;select(
		    oclIsKindOf(interactions::MessageOccurrenceSpecification))
		  .oclAsType(interactions::MessageOccurrenceSpecification)
		  -&gt;asOrderedSet()
		  -&gt;first().covered
		in f =
		  receiveEvent-&gt;select(
		    oclIsKindOf(interactions::MessageOccurrenceSpecification))
		  .oclAsType(interactions::MessageOccurrenceSpecification)
		  -&gt;asOrderedSet()
		  -&gt;first().covered implies
		  f.events-&gt;indexOf(
		    sendEvent.oclAsType(interactions::MessageOccurrenceSpecification)
		    -&gt;asOrderedSet()
		    -&gt;first()) &lt;
		  f.events-&gt;indexOf(
		    receiveEvent.oclAsType(interactions::MessageOccurrenceSpecification)
		    -&gt;asOrderedSet()
		    -&gt;first())

	inv arguments:
		null

	inv cannot_cross_boundaries:
		sendEvent-&gt;notEmpty() and
		receiveEvent-&gt;notEmpty() implies
		let
		  sendEnclosingFrag : Set(interactions::InteractionFragment) = sendEvent-&gt;asOrderedSet()
		  -&gt;first()
		  .enclosingFragment()
		in
		  let
		    receiveEnclosingFrag : Set(interactions::InteractionFragment) = receiveEvent-&gt;asOrderedSet()
		    -&gt;first()
		    .enclosingFragment()
		  in sendEnclosingFrag = receiveEnclosingFrag

	inv signature_is_signal:
		messageSort = UML::Interactions::MessageSort::asynchSignal and
		signature.oclIsKindOf(simpleClassifiers::Signal) implies
		let
		  signalAttributes : OrderedSet(classification::Property) = signature.oclAsType(simpleClassifiers::Signal)
		  .inheritedMember()
		  -&gt;select(n |
		    n.oclIsTypeOf(classification::Property))
		  -&gt;collect(oclAsType(classification::Property))
		  -&gt;asOrderedSet()
		in
		  signalAttributes-&gt;size() =
		  self.argument-&gt;size() and
		  self.argument-&gt;forAll(o |
		    (
		      not (
		        o.oclIsKindOf(values::Expression) and
		        o.oclAsType(values::Expression)
		        .symbol-&gt;size() = 0 and
		        o.oclAsType(values::Expression)
		        .operand-&gt;isEmpty()
		      ) implies
		      let
		        p : classification::Property = signalAttributes-&gt;at(
		          self.argument-&gt;indexOf(o))
		      in
		        o.type.oclAsType(classification::Classifier)
		        .conformsTo(
		          p.type.oclAsType(classification::Classifier))
		    ))

	inv occurrence_specifications:
		null

	inv signature_refer_to:
		signature-&gt;notEmpty() implies
		(
		  signature.oclIsKindOf(classification::Operation) and
		  (messageSort = UML::Interactions::MessageSort::asynchCall or messageSort = UML::Interactions::MessageSort::synchCall or messageSort = UML::Interactions::MessageSort::reply
		  ) or
		  signature.oclIsKindOf(simpleClassifiers::Signal) and messageSort = UML::Interactions::MessageSort::asynchSignal
		) and name = signature.name

	inv signature_is_operation_request:
		(messageSort = UML::Interactions::MessageSort::asynchCall or messageSort = UML::Interactions::MessageSort::synchCall
		) and
		signature.oclIsKindOf(classification::Operation) implies
		let
		  requestParms : OrderedSet(classification::Parameter) = signature.oclAsType(classification::Operation)
		  .ownedParameter-&gt;select(direction = UML::Classification::ParameterDirectionKind::inout or direction = UML::Classification::ParameterDirectionKind::_'in')
		in
		  requestParms-&gt;size() =
		  self.argument-&gt;size() and
		  self.argument-&gt;forAll(o |
		    (
		      not (
		        o.oclIsKindOf(values::Expression) and
		        o.oclAsType(values::Expression)
		        .symbol-&gt;size() = 0 and
		        o.oclAsType(values::Expression)
		        .operand-&gt;isEmpty()
		      ) implies
		      let
		        p : classification::Parameter = requestParms-&gt;at(
		          self.argument-&gt;indexOf(o))
		      in
		        o.type.oclAsType(classification::Classifier)
		        .conformsTo(
		          p.type.oclAsType(classification::Classifier))
		    ))

	inv signature_is_operation_reply:
		messageSort = UML::Interactions::MessageSort::reply and
		signature.oclIsKindOf(classification::Operation) implies
		let
		  replyParms : OrderedSet(classification::Parameter) = signature.oclAsType(classification::Operation)
		  .ownedParameter-&gt;select(direction = UML::Classification::ParameterDirectionKind::inout or direction = UML::Classification::ParameterDirectionKind::out or direction = UML::Classification::ParameterDirectionKind::return)
		in
		  replyParms-&gt;size() =
		  self.argument-&gt;size() and
		  self.argument-&gt;forAll(o |
		    o.oclIsKindOf(values::Expression) and
		    let
		      e : values::Expression = o.oclAsType(values::Expression)
		    in
		      (
		        e.operand-&gt;notEmpty() implies
		        let
		          p : classification::Parameter = replyParms-&gt;at(
		            self.argument-&gt;indexOf(o))
		        in
		          e.operand-&gt;asSequence()
		          -&gt;first()
		          .type.oclAsType(classification::Classifier)
		          .conformsTo(
		            p.type.oclAsType(classification::Classifier))
		      ))

	context Message::messageKind() : uml::Interactions::MessageKind

	body:
	(messageKind)

	context Message::isDistinguishableFrom(n : uml::CommonStructure::NamedElement, ns : uml::CommonStructure::Namespace)
	: Boolean

	body:
	(true)

	context uml::Interactions::Message::messageSort : uml::Interactions::MessageSort

	init:
	UML::Interactions::MessageSort::synchCall

	context MessageEnd::oppositeEnd() : Set(uml::Interactions::MessageEnd)

	pre _'pre':
		message-&gt;notEmpty()

	body:
	(message-&gt;asSet().messageEnd-&gt;asSet()-&gt;excluding(self))

	context MessageEnd::isSend() : Boolean

	pre _'pre':
		message-&gt;notEmpty()

	body:
	(message.sendEvent-&gt;asSet()-&gt;includes(self))

	context MessageEnd::isReceive() : Boolean

	pre _'pre':
		message-&gt;notEmpty()

	body:
	(message.receiveEvent-&gt;asSet()-&gt;includes(self))

	context MessageEnd::enclosingFragment() : Set(uml::Interactions::InteractionFragment)

	body:
	(if self-&gt;select(oclIsKindOf(Gate))-&gt;notEmpty() 
then -- it is a Gate
let endGate : Gate = 
  self-&gt;select(oclIsKindOf(Gate)).oclAsType(Gate)-&gt;asOrderedSet()-&gt;first()
  in
  if endGate.isOutsideCF() 
  then endGate.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)-&gt;asSet()-&gt;
     union(endGate.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)-&gt;asSet())
  else if endGate.isInsideCF() 
    then endGate.combinedFragment.oclAsType(InteractionFragment)-&gt;asSet()
    else if endGate.isFormal() 
      then endGate.interaction.oclAsType(InteractionFragment)-&gt;asSet()
      else if endGate.isActual() 
        then endGate.interactionUse.enclosingInteraction.oclAsType(InteractionFragment)-&gt;asSet()-&gt;
     union(endGate.interactionUse.enclosingOperand.oclAsType(InteractionFragment)-&gt;asSet())
        else null
        endif
      endif
    endif
  endif
else -- it is a MessageOccurrenceSpecification
let endMOS : MessageOccurrenceSpecification  = 
  self-&gt;select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)-&gt;asOrderedSet()-&gt;first() 
  in
  if endMOS.enclosingInteraction-&gt;notEmpty() 
  then endMOS.enclosingInteraction.oclAsType(InteractionFragment)-&gt;asSet()
  else endMOS.enclosingOperand.oclAsType(InteractionFragment)-&gt;asSet()
  endif
endif)

	context uml::Interactions::PartDecomposition

	inv commutativity_of_decomposition:
		null

	inv assume:
		null

	inv parts_of_internal_structures:
		null

endpackage

package uml::InformationFlows

	context uml::InformationFlows::InformationFlow

	inv must_conform:
		null

	inv sources_and_targets_kind:
		self.informationSource-&gt;forAll(sis |
		  (
		    oclIsKindOf(useCases::Actor) or
		    oclIsKindOf(deployments::Node) or
		    oclIsKindOf(useCases::UseCase) or
		    oclIsKindOf(deployments::Artifact) or
		    oclIsKindOf(structuredClassifiers::Class) or
		    oclIsKindOf(structuredClassifiers::Component) or
		    oclIsKindOf(structuredClassifiers::Port) or
		    oclIsKindOf(classification::Property) or
		    oclIsKindOf(simpleClassifiers::Interface) or
		    oclIsKindOf(packages::Package) or
		    oclIsKindOf(activities::ActivityNode) or
		    oclIsKindOf(activities::ActivityPartition) or
		    oclIsKindOf(classification::InstanceSpecification) and
		    not sis.oclAsType(classification::InstanceSpecification)
		    .classifier-&gt;exists(
		      oclIsKindOf(commonStructure::Relationship))
		  )) and
		self.informationTarget-&gt;forAll(sit |
		  (
		    oclIsKindOf(useCases::Actor) or
		    oclIsKindOf(deployments::Node) or
		    oclIsKindOf(useCases::UseCase) or
		    oclIsKindOf(deployments::Artifact) or
		    oclIsKindOf(structuredClassifiers::Class) or
		    oclIsKindOf(structuredClassifiers::Component) or
		    oclIsKindOf(structuredClassifiers::Port) or
		    oclIsKindOf(classification::Property) or
		    oclIsKindOf(simpleClassifiers::Interface) or
		    oclIsKindOf(packages::Package) or
		    oclIsKindOf(activities::ActivityNode) or
		    oclIsKindOf(activities::ActivityPartition) or
		    oclIsKindOf(classification::InstanceSpecification) and
		    not sit.oclAsType(classification::InstanceSpecification)
		    .classifier-&gt;exists(
		      oclIsKindOf(commonStructure::Relationship))
		  ))

	inv convey_classifiers:
		self.conveyed-&gt;forAll(
		  oclIsKindOf(structuredClassifiers::Class) or
		  oclIsKindOf(simpleClassifiers::Interface) or
		  oclIsKindOf(informationFlows::InformationItem) or
		  oclIsKindOf(simpleClassifiers::Signal) or
		  oclIsKindOf(structuredClassifiers::Component))

	context uml::InformationFlows::InformationItem

	inv sources_and_targets:
		self.represented-&gt;select(
		  oclIsKindOf(informationFlows::InformationItem))
		-&gt;forAll(p |
		  p.conveyingFlow.source-&gt;forAll(q | self.conveyingFlow.source-&gt;includes(q)) and
		  p.conveyingFlow.target-&gt;forAll(q | self.conveyingFlow.target-&gt;includes(q))) and
		self.represented-&gt;forAll(
		  (
		    oclIsKindOf(structuredClassifiers::Class) or
		    oclIsKindOf(simpleClassifiers::Interface) or
		    oclIsKindOf(informationFlows::InformationItem) or
		    oclIsKindOf(simpleClassifiers::Signal) or
		    oclIsKindOf(structuredClassifiers::Component)
		  ))

	inv has_no:
		self.generalization-&gt;isEmpty() and self.feature-&gt;isEmpty()

	inv not_instantiable:
		isAbstract

endpackage

package uml::Deployments

	context uml::Deployments::CommunicationPath

	inv association_ends:
		endType-&gt;forAll(
		  oclIsKindOf(deployments::DeploymentTarget))

	context uml::Deployments::DeploymentSpecification

	inv deployment_target:
		deployment-&gt;forAll(
		  location.oclIsKindOf(deployments::ExecutionEnvironment))

	inv deployed_elements:
		deployment-&gt;forAll(
		  location.deployedElement-&gt;forAll(
		    oclIsKindOf(structuredClassifiers::Component)))

	context uml::Deployments::Node

	inv internal_structure:
		part-&gt;forAll(oclIsKindOf(deployments::Node))

	context DeploymentTarget::deployedElement() : Set(uml::CommonStructure::PackageableElement)

	body:
	(deployment.deployedArtifact-&gt;select(oclIsKindOf(Artifact))-&gt;collect(oclAsType(Artifact).manifestation)-&gt;collect(utilizedElement)-&gt;asSet())

endpackage

package uml::CommonStructure

	context uml::CommonStructure::Constraint

	inv boolean_value:
		null

	inv no_side_effects:
		null

	inv not_apply_to_self:
		not constrainedElement-&gt;includes(self)

	context uml::CommonStructure::Element

	inv has_owner:
		mustBeOwned() implies owner-&gt;notEmpty()

	inv not_own_self:
		not allOwnedElements()-&gt;includes(self)

	context Element::allOwnedElements() : Set(uml::CommonStructure::Element)

	body:
	(ownedElement-&gt;union(ownedElement-&gt;collect(e | e.allOwnedElements()))-&gt;asSet())

	context Element::mustBeOwned() : Boolean

	body:
	(true)

	context uml::CommonStructure::ElementImport

	inv imported_element_is_public:
		importedElement.visibility &lt;&gt; null implies importedElement.visibility = UML::CommonStructure::VisibilityKind::public

	inv visibility_public_or_private:
		visibility = UML::CommonStructure::VisibilityKind::public or visibility = UML::CommonStructure::VisibilityKind::private

	context ElementImport::getName() : String

	body:
	(if alias-&gt;notEmpty() then
  alias
else
  importedElement.name
endif)

	context uml::CommonStructure::ElementImport::visibility : uml::CommonStructure::VisibilityKind

	init:
	UML::CommonStructure::VisibilityKind::public

	context uml::CommonStructure::MultiplicityElement

	inv upper_ge_lower:
		upperBound() &gt;= lowerBound()

	inv lower_ge_0:
		lowerBound() &gt;= 0

	inv value_specification_no_side_effects:
		null

	inv value_specification_constant:
		null

	inv lower_is_integer:
		lowerValue &lt;&gt; null implies lowerValue.integerValue() &lt;&gt; null

	inv upper_is_unlimitedNatural:
		upperValue &lt;&gt; null implies upperValue.unlimitedValue() &lt;&gt; null

	context MultiplicityElement::includesMultiplicity(M : uml::CommonStructure::MultiplicityElement) : Boolean

	pre _'pre':
		self.upperBound()
		-&gt;notEmpty() and
		self.lowerBound()
		-&gt;notEmpty() and
		M.upperBound()
		-&gt;notEmpty() and
		M.lowerBound()
		-&gt;notEmpty()

	body:
	((self.lowerBound() &lt;= M.lowerBound()) and (self.upperBound() &gt;= M.upperBound()))

	context MultiplicityElement::isMultivalued() : Boolean

	pre _'pre':
		upperBound()-&gt;notEmpty()

	body:
	(upperBound() &gt; 1)

	context MultiplicityElement::compatibleWith(other : uml::CommonStructure::MultiplicityElement) : Boolean

	body:
	((other.lowerBound() &lt;= self.lowerBound()) and ((other.upperBound() = *) or (self.upperBound() &lt;= other.upperBound())))

	context MultiplicityElement::is(lowerbound : Integer, upperbound : UnlimitedNatural) : Boolean

	body:
	(lowerbound = self.lowerBound() and upperbound = self.upperBound())

	context MultiplicityElement::lower() : Integer

	body:
	(lowerBound())

	context MultiplicityElement::lowerBound() : Integer

	body:
	(if (lowerValue=null or lowerValue.integerValue()=null) then 1 else lowerValue.integerValue() endif)

	context MultiplicityElement::upper() : UnlimitedNatural

	body:
	(upperBound())

	context MultiplicityElement::upperBound() : UnlimitedNatural

	body:
	(if (upperValue=null or upperValue.unlimitedValue()=null) then 1 else upperValue.unlimitedValue() endif)

	context uml::CommonStructure::MultiplicityElement::isOrdered : Boolean

	init:
	false

	context uml::CommonStructure::MultiplicityElement::isUnique : Boolean

	init:
	true

	context uml::CommonStructure::NamedElement

	inv visibility_needs_ownership:
		namespace = null and owner &lt;&gt; null implies visibility = null

	inv has_qualified_name:
		name &lt;&gt; null and
		allNamespaces()
		-&gt;select(ns | ns.name = null)
		-&gt;isEmpty() implies qualifiedName =
		allNamespaces()
		-&gt;iterate(ns; agg : String = name |
		  ns.name.concat(self.separator())
		  .concat(agg))

	inv has_no_qualified_name:
		name = null or
		allNamespaces()
		-&gt;select(ns | ns.name = null)
		-&gt;notEmpty() implies qualifiedName = null

	context NamedElement::allNamespaces() : OrderedSet(uml::CommonStructure::Namespace)

	body:
	(if owner.oclIsKindOf(TemplateParameter) and
  owner.oclAsType(TemplateParameter).signature.template.oclIsKindOf(Namespace) then
    let enclosingNamespace : Namespace =
      owner.oclAsType(TemplateParameter).signature.template.oclAsType(Namespace) in
        enclosingNamespace.allNamespaces()-&gt;prepend(enclosingNamespace)
else
  if namespace-&gt;isEmpty()
    then OrderedSet{}
  else
    namespace.allNamespaces()-&gt;prepend(namespace)
  endif
endif)

	context NamedElement::allOwningPackages() : Set(uml::Packages::Package)

	body:
	(if namespace.oclIsKindOf(Package)
then
  let owningPackage : Package = namespace.oclAsType(Package) in
    owningPackage-&gt;union(owningPackage.allOwningPackages())
else
  null
endif)

	context NamedElement::isDistinguishableFrom(n : uml::CommonStructure::NamedElement, ns :
		uml::CommonStructure::Namespace) : Boolean

	body:
	((self.oclIsKindOf(n.oclType()) or n.oclIsKindOf(self.oclType())) implies
    ns.getNamesOfMember(self)-&gt;intersection(ns.getNamesOfMember(n))-&gt;isEmpty()
)

	context NamedElement::qualifiedName() : String

	body:
	(if self.name &lt;&gt; null and self.allNamespaces()-&gt;select( ns | ns.name=null )-&gt;isEmpty()
then 
    self.allNamespaces()-&gt;iterate( ns : Namespace; agg: String = self.name | ns.name.concat(self.separator()).concat(agg))
else
   null
endif)

	context NamedElement::separator() : String

	body:
	('::')

	context NamedElement::clientDependency() : Set(uml::CommonStructure::Dependency)

	body:
	(Dependency.allInstances()-&gt;select(d | d.client-&gt;includes(self)))

	context uml::CommonStructure::Namespace

	inv members_distinguishable:
		membersAreDistinguishable()

	inv cannot_import_self:
		packageImport.importedPackage.oclAsType(commonStructure::Namespace)
		-&gt;excludes(self)

	inv cannot_import_ownedMembers:
		elementImport.importedElement.oclAsType(commonStructure::Element)
		-&gt;excludesAll(ownedMember)

	context Namespace::excludeCollisions(imps : Set(uml::CommonStructure::PackageableElement)) :
	Set(uml::CommonStructure::PackageableElement)

	body:
	(imps-&gt;reject(imp1  | imps-&gt;exists(imp2 | not imp1.isDistinguishableFrom(imp2, self))))

	context Namespace::getNamesOfMember(element : uml::CommonStructure::NamedElement) : Set(String)

	body:
	(if self.ownedMember -&gt;includes(element)
then Set{element.name}
else let elementImports : Set(ElementImport) = self.elementImport-&gt;select(ei | ei.importedElement = element) in
  if elementImports-&gt;notEmpty()
  then
     elementImports-&gt;collect(el | el.getName())-&gt;asSet()
  else 
     self.packageImport-&gt;select(pi | pi.importedPackage.visibleMembers().oclAsType(NamedElement)-&gt;includes(element))-&gt; collect(pi | pi.importedPackage.getNamesOfMember(element))-&gt;asSet()
  endif
endif)

	context Namespace::importMembers(imps : Set(uml::CommonStructure::PackageableElement)) :
	Set(uml::CommonStructure::PackageableElement)

	body:
	(self.excludeCollisions(imps)-&gt;select(imp | self.ownedMember-&gt;forAll(mem | imp.isDistinguishableFrom(mem, self))))

	context Namespace::importedMember() : Set(uml::CommonStructure::PackageableElement)

	body:
	(self.importMembers(elementImport.importedElement-&gt;asSet()-&gt;union(packageImport.importedPackage-&gt;collect(p | p.visibleMembers()))-&gt;asSet()))

	context Namespace::membersAreDistinguishable() : Boolean

	body:
	(member-&gt;forAll( memb |
   member-&gt;excluding(memb)-&gt;forAll(other |
       memb.isDistinguishableFrom(other, self))))

	context uml::CommonStructure::PackageableElement

	inv namespace_needs_visibility:
		visibility = null implies namespace = null

	context uml::CommonStructure::PackageableElement::visibility : uml::CommonStructure::VisibilityKind

	init:
	UML::CommonStructure::VisibilityKind::public

	context uml::CommonStructure::PackageImport

	inv public_or_private:
		visibility = UML::CommonStructure::VisibilityKind::public or visibility = UML::CommonStructure::VisibilityKind::private

	context uml::CommonStructure::PackageImport::visibility : uml::CommonStructure::VisibilityKind

	init:
	UML::CommonStructure::VisibilityKind::public

	context uml::CommonStructure::TemplateBinding

	inv parameter_substitution_formal:
		parameterSubstitution-&gt;forAll(b |
		  signature.parameter-&gt;includes(b.formal))

	inv one_parameter_substitution:
		signature.parameter-&gt;forAll(p |
		  parameterSubstitution-&gt;select(b | (b.formal = p))
		  -&gt;size() &lt;= 1)

	context uml::CommonStructure::TemplateParameter

	inv must_be_compatible:
		default &lt;&gt; null implies
		default.isCompatibleWith(parameteredElement)

	context uml::CommonStructure::TemplateParameterSubstitution

	inv must_be_compatible:
		actual-&gt;forAll(a |
		  a.isCompatibleWith(formal.parameteredElement))

	context uml::CommonStructure::TemplateSignature

	inv own_elements:
		template.ownedElement-&gt;includesAll(
		  parameter.parameteredElement-&gt;asSet() -
		  parameter.ownedParameteredElement-&gt;asSet())

	inv unique_parameters:
		parameter-&gt;forAll(p1, p2 | p1 &lt;&gt; p2 and
		  p1.parameteredElement.oclIsKindOf(commonStructure::NamedElement) and
		  p2.parameteredElement.oclIsKindOf(commonStructure::NamedElement) implies
		  p1.parameteredElement.oclAsType(commonStructure::NamedElement).name &lt;&gt;
		  p2.parameteredElement.oclAsType(commonStructure::NamedElement).name)

	context ParameterableElement::isCompatibleWith(p : uml::CommonStructure::ParameterableElement) : Boolean

	body:
	(self.oclIsKindOf(p.oclType()))

	context ParameterableElement::isTemplateParameter() : Boolean

	body:
	(templateParameter-&gt;notEmpty())

	context TemplateableElement::isTemplate() : Boolean

	body:
	(ownedTemplateSignature &lt;&gt; null)

	context TemplateableElement::parameterableElements() : Set(uml::CommonStructure::ParameterableElement)

	body:
	(self.allOwnedElements()-&gt;select(oclIsKindOf(ParameterableElement)).oclAsType(ParameterableElement)-&gt;asSet())

	context Type::conformsTo(other : uml::CommonStructure::Type) : Boolean

	body:
	(false)

endpackage

package uml::CommonBehavior

	context uml::CommonBehavior::Behavior

	inv most_one_behavior:
		specification &lt;&gt; null implies
		_'context'.ownedBehavior-&gt;select(specification = self.specification)
		-&gt;size() = 1

	inv parameters_match:
		specification &lt;&gt; null implies
		ownedParameter-&gt;size() =
		specification.ownedParameter-&gt;size()

	inv feature_of_context_classifier:
		_'context'.feature-&gt;includes(specification)

	context Behavior::behavioredClassifier(from : uml::CommonStructure::Element) :
	uml::SimpleClassifiers::BehavioredClassifier

	pre spec:
		if
		  from.oclIsKindOf(simpleClassifiers::BehavioredClassifier)
		then
		  from.oclAsType(simpleClassifiers::BehavioredClassifier)
		else
		  if from.owner = null
		  then null
		  else self.behavioredClassifier(from.owner)
		  endif
		endif

	context Behavior::_'context'() : uml::SimpleClassifiers::BehavioredClassifier

	body:
	(if nestingClass &lt;&gt; null then
    null
else
    let b:BehavioredClassifier = self.behavioredClassifier(self.owner) in
    if b.oclIsKindOf(Behavior) and b.oclAsType(Behavior)._'context' &lt;&gt; null then 
        b.oclAsType(Behavior)._'context'
    else 
        b 
    endif
endif
        )

	context Behavior::inputParameters() : OrderedSet(uml::Classification::Parameter)

	body:
	(ownedParameter-&gt;select(direction=ParameterDirectionKind::_'in' or direction=ParameterDirectionKind::inout))

	context Behavior::outputParameters() : OrderedSet(uml::Classification::Parameter)

	body:
	(ownedParameter-&gt;select(direction=ParameterDirectionKind::out or direction=ParameterDirectionKind::inout or direction=ParameterDirectionKind::return))

	context uml::CommonBehavior::Behavior::isReentrant : Boolean

	init:
	true

	context uml::CommonBehavior::FunctionBehavior

	inv one_output_parameter:
		self.ownedParameter-&gt;select(p |
		  (p.direction = UML::Classification::ParameterDirectionKind::out or p.direction = UML::Classification::ParameterDirectionKind::inout or p.direction = UML::Classification::ParameterDirectionKind::return
		  ))
		-&gt;size() &gt;= 1

	inv types_of_parameters:
		ownedParameter-&gt;forAll(p | p.type &lt;&gt; null and
		  p.type.oclIsTypeOf(simpleClassifiers::DataType) and
		  hasAllDataTypeAttributes(
		    p.type.oclAsType(simpleClassifiers::DataType)))

	context FunctionBehavior::hasAllDataTypeAttributes(d : uml::SimpleClassifiers::DataType) : Boolean

	body:
	(d.ownedAttribute-&gt;forAll(a |
    a.type.oclIsKindOf(DataType) and
      hasAllDataTypeAttributes(a.type.oclAsType(DataType))))

	context uml::CommonBehavior::TimeEvent

	inv when_non_negative:
		when.integerValue() &gt;= 0

	context uml::CommonBehavior::TimeEvent::isRelative : Boolean

	init:
	false

	context uml::CommonBehavior::Trigger

	inv trigger_with_ports:
		port-&gt;notEmpty() implies
		event.oclIsKindOf(commonBehavior::MessageEvent)

endpackage

package uml::Classification

	context uml::Classification::BehavioralFeature

	inv abstract_no_method:
		isAbstract implies method-&gt;isEmpty()

	context BehavioralFeature::isDistinguishableFrom(n : uml::CommonStructure::NamedElement, ns :
		uml::CommonStructure::Namespace) : Boolean

	body:
	((n.oclIsKindOf(BehavioralFeature) and ns.getNamesOfMember(self)-&gt;intersection(ns.getNamesOfMember(n))-&gt;notEmpty()) implies
  Set{self}-&gt;including(n.oclAsType(BehavioralFeature))-&gt;isUnique(ownedParameter-&gt;collect(p|
  Tuple { name=p.name, type=p.type,effect=p.effect,direction=p.direction,isException=p.isException,
              isStream=p.isStream,isOrdered=p.isOrdered,isUnique=p.isUnique,lower=p.lower, upper=p.upper }))
  )

	context BehavioralFeature::inputParameters() : OrderedSet(uml::Classification::Parameter)

	body:
	(ownedParameter-&gt;select(direction=ParameterDirectionKind::_'in' or direction=ParameterDirectionKind::inout))

	context BehavioralFeature::outputParameters() : OrderedSet(uml::Classification::Parameter)

	body:
	(ownedParameter-&gt;select(direction=ParameterDirectionKind::out or direction=ParameterDirectionKind::inout or direction=ParameterDirectionKind::return))

	context uml::Classification::BehavioralFeature::concurrency : uml::Classification::CallConcurrencyKind

	init:
	UML::Classification::CallConcurrencyKind::sequential

	context uml::Classification::BehavioralFeature::isAbstract : Boolean

	init:
	false

	context uml::Classification::Classifier

	inv specialize_type:
		parents()-&gt;forAll(c | self.maySpecializeType(c))

	inv maps_to_generalization_set:
		powertypeExtent-&gt;forAll(gs |
		  gs.generalization-&gt;forAll(gen |
		    not (gen.general = self
		    ) and
		    not gen.general.allParents()
		    -&gt;includes(self) and
		    not (gen.specific = self
		    ) and
		    not self.allParents()
		    -&gt;includes(gen.specific)))

	inv non_final_parents:
		parents()-&gt;forAll(not isFinalSpecialization)

	inv no_cycles_in_generalization:
		not allParents()-&gt;includes(self)

	context Classifier::hasVisibilityOf(n : uml::CommonStructure::NamedElement) : Boolean

	pre _'pre':
		allParents()-&gt;including(self)-&gt;collect(member)-&gt;includes(n)

	body:
	(n.visibility &lt;&gt; VisibilityKind::private)

	context Classifier::inheritableMembers(c : uml::Classification::Classifier) : Set(uml::CommonStructure::NamedElement)

	pre _'pre':
		c.allParents()-&gt;includes(self)

	body:
	(member-&gt;select(m | c.hasVisibilityOf(m)))

	context Classifier::allFeatures() : Set(uml::Classification::Feature)

	body:
	(member-&gt;select(oclIsKindOf(Feature))-&gt;collect(oclAsType(Feature))-&gt;asSet())

	context Classifier::allParents() : Set(uml::Classification::Classifier)

	body:
	(parents()-&gt;union(parents()-&gt;collect(allParents())-&gt;asSet()))

	context Classifier::conformsTo(other : uml::CommonStructure::Type) : Boolean

	body:
	(if other.oclIsKindOf(Classifier) then
  let otherClassifier : Classifier = other.oclAsType(Classifier) in
    self = otherClassifier or allParents()-&gt;includes(otherClassifier)
else
  false
endif)

	context Classifier::general() : Set(uml::Classification::Classifier)

	body:
	(parents())

	context Classifier::inherit(inhs : Set(uml::CommonStructure::NamedElement)) : Set(uml::CommonStructure::NamedElement)

	body:
	(inhs-&gt;reject(inh |
  inh.oclIsKindOf(RedefinableElement) and
  ownedMember-&gt;select(oclIsKindOf(RedefinableElement))-&gt;
    select(redefinedElement-&gt;includes(inh.oclAsType(RedefinableElement)))
       -&gt;notEmpty()))

	context Classifier::inheritedMember() : Set(uml::CommonStructure::NamedElement)

	body:
	(inherit(parents()-&gt;collect(inheritableMembers(self))-&gt;asSet()))

	context Classifier::isTemplate() : Boolean

	body:
	(ownedTemplateSignature &lt;&gt; null or general-&gt;exists(g | g.isTemplate()))

	context Classifier::maySpecializeType(c : uml::Classification::Classifier) : Boolean

	body:
	(self.oclIsKindOf(c.oclType()))

	context Classifier::parents() : Set(uml::Classification::Classifier)

	body:
	(generalization.general-&gt;asSet())

	context Classifier::directlyRealizedInterfaces() : Set(uml::SimpleClassifiers::Interface)

	body:
	((clientDependency-&gt;
  select(oclIsKindOf(Realization) and supplier-&gt;forAll(oclIsKindOf(Interface))))-&gt;
      collect(supplier.oclAsType(Interface))-&gt;asSet())

	context Classifier::directlyUsedInterfaces() : Set(uml::SimpleClassifiers::Interface)

	body:
	((supplierDependency-&gt;
  select(oclIsKindOf(Usage) and client-&gt;forAll(oclIsKindOf(Interface))))-&gt;
    collect(client.oclAsType(Interface))-&gt;asSet())

	context Classifier::allRealizedInterfaces() : Set(uml::SimpleClassifiers::Interface)

	body:
	(directlyRealizedInterfaces()-&gt;union(self.allParents()-&gt;collect(directlyRealizedInterfaces()))-&gt;asSet())

	context Classifier::allUsedInterfaces() : Set(uml::SimpleClassifiers::Interface)

	body:
	(directlyUsedInterfaces()-&gt;union(self.allParents()-&gt;collect(directlyUsedInterfaces()))-&gt;asSet())

	context Classifier::isSubstitutableFor(contract : uml::Classification::Classifier) : Boolean

	body:
	(substitution.contract-&gt;includes(contract))

	context Classifier::allAttributes() : OrderedSet(uml::Classification::Property)

	body:
	(attribute-&gt;asSequence()-&gt;union(parents()-&gt;asSequence().allAttributes())-&gt;select(p | member-&gt;includes(p))-&gt;asOrderedSet())

	context Classifier::allSlottableFeatures() : Set(uml::Classification::StructuralFeature)

	body:
	(member-&gt;select(oclIsKindOf(StructuralFeature))-&gt;
  collect(oclAsType(StructuralFeature))-&gt;
   union(self.inherit(self.allParents()-&gt;collect(p | p.attribute)-&gt;asSet())-&gt;
     collect(oclAsType(StructuralFeature)))-&gt;asSet())

	context uml::Classification::Classifier::isAbstract : Boolean

	init:
	false

	context uml::Classification::Classifier::isFinalSpecialization : Boolean

	init:
	false

	context uml::Classification::ClassifierTemplateParameter

	inv has_constraining_classifier:
		allowSubstitutable implies constrainingClassifier-&gt;notEmpty()

	inv parametered_element_no_features:
		parameteredElement.feature-&gt;isEmpty() and
		(
		  constrainingClassifier-&gt;isEmpty() implies
		  parameteredElement.allParents()
		  -&gt;isEmpty()
		)

	inv matching_abstract:
		not parameteredElement.isAbstract implies
		templateParameterSubstitution.actual-&gt;forAll(a |
		  not a.oclAsType(classification::Classifier).isAbstract)

	inv actual_is_classifier:
		templateParameterSubstitution.actual-&gt;forAll(a |
		  a.oclIsKindOf(classification::Classifier))

	inv constraining_classifiers_constrain_args:
		templateParameterSubstitution.actual-&gt;forAll(a |
		  let
		    arg : classification::Classifier = a.oclAsType(classification::Classifier)
		  in
		    constrainingClassifier-&gt;forAll(cc | arg = cc or
		      arg.conformsTo(cc) or allowSubstitutable and
		      arg.isSubstitutableFor(cc)))

	inv constraining_classifiers_constrain_parametered_element:
		constrainingClassifier-&gt;forAll(cc | parameteredElement = cc or
		  parameteredElement.conformsTo(cc) or allowSubstitutable and
		  parameteredElement.isSubstitutableFor(cc))

	context uml::Classification::ClassifierTemplateParameter::allowSubstitutable : Boolean

	init:
	true

	context uml::Classification::GeneralizationSet

	inv generalization_same_classifier:
		generalization-&gt;collect(general)-&gt;asSet()-&gt;size() &lt;= 1

	inv maps_to_generalization_set:
		powertype &lt;&gt; null implies
		generalization-&gt;forAll(gen |
		  not (gen.general = powertype
		  ) and
		  not gen.general.allParents()
		  -&gt;includes(powertype) and
		  not (gen.specific = powertype
		  ) and
		  not powertype.allParents()
		  -&gt;includes(gen.specific))

	context uml::Classification::GeneralizationSet::isCovering : Boolean

	init:
	false

	context uml::Classification::GeneralizationSet::isDisjoint : Boolean

	init:
	false

	context uml::Classification::InstanceSpecification

	inv deployment_artifact:
		deploymentForArtifact-&gt;notEmpty() implies
		classifier-&gt;exists(oclIsKindOf(deployments::Artifact))

	inv structural_feature:
		classifier-&gt;forAll(c |
		  c.allSlottableFeatures()
		  -&gt;forAll(f |
		    slot-&gt;select(s | (s.definingFeature = f))
		    -&gt;size() &lt;= 1))

	inv defining_feature:
		slot-&gt;forAll(s |
		  classifier-&gt;exists(c |
		    c.allSlottableFeatures()
		    -&gt;includes(s.definingFeature)))

	inv deployment_target:
		deployment-&gt;notEmpty() implies
		classifier-&gt;exists(node |
		  node.oclIsKindOf(deployments::Node) and
		  deployments::Node.allInstances()
		  -&gt;exists(n | n.part-&gt;exists(p | p.type = node)))

	context uml::Classification::Operation

	inv at_most_one_return:
		self.ownedParameter-&gt;select(
		  (direction = UML::Classification::ParameterDirectionKind::return
		  ))
		-&gt;size() &lt;= 1

	inv only_body_for_query:
		bodyCondition &lt;&gt; null implies isQuery

	context Operation::isConsistentWith(redefiningElement : uml::Classification::RedefinableElement) : Boolean

	pre _'pre':
		redefiningElement.isRedefinitionContextValid(self)

	body:
	(redefiningElement.oclIsKindOf(Operation) and
let op : Operation = redefiningElement.oclAsType(Operation) in
	self.ownedParameter-&gt;size() = op.ownedParameter-&gt;size() and
	Sequence{1..self.ownedParameter-&gt;size()}-&gt;
		forAll(i |  
		  let redefiningParam : Parameter = op.ownedParameter-&gt;at(i),
               redefinedParam : Parameter = self.ownedParameter-&gt;at(i) in
                 (redefiningParam.isUnique = redefinedParam.isUnique) and
                 (redefiningParam.isOrdered = redefinedParam. isOrdered) and
                 (redefiningParam.direction = redefinedParam.direction) and
                 (redefiningParam.type.conformsTo(redefinedParam.type) or
                     redefinedParam.type.conformsTo(redefiningParam.type)) and
                 (redefiningParam.direction = ParameterDirectionKind::inout implies
                         (redefinedParam.compatibleWith(redefiningParam) and
                         redefiningParam.compatibleWith(redefinedParam))) and
                 (redefiningParam.direction = ParameterDirectionKind::_'in' implies
                         redefinedParam.compatibleWith(redefiningParam)) and
                 ((redefiningParam.direction = ParameterDirectionKind::out or
                      redefiningParam.direction = ParameterDirectionKind::return) implies
                         redefiningParam.compatibleWith(redefinedParam))
		))

	context Operation::isOrdered() : Boolean

	body:
	(if returnResult()-&gt;notEmpty() then returnResult()-&gt; exists(isOrdered) else false endif)

	context Operation::isUnique() : Boolean

	body:
	(if returnResult()-&gt;notEmpty() then returnResult()-&gt;exists(isUnique) else true endif)

	context Operation::lower() : Integer

	body:
	(if returnResult()-&gt;notEmpty() then returnResult()-&gt;any(true).lower else null endif)

	context Operation::returnResult() : Set(uml::Classification::Parameter)

	body:
	(ownedParameter-&gt;select (direction = ParameterDirectionKind::return))

	context Operation::type() : uml::CommonStructure::Type

	body:
	(if returnResult()-&gt;notEmpty() then returnResult()-&gt;any(true).type else null endif)

	context Operation::upper() : UnlimitedNatural

	body:
	(if returnResult()-&gt;notEmpty() then returnResult()-&gt;any(true).upper else null endif)

	context uml::Classification::Operation::isQuery : Boolean

	init:
	false

	context uml::Classification::OperationTemplateParameter

	inv match_default_signature:
		default-&gt;notEmpty() implies
		default.oclIsKindOf(classification::Operation) and
		let
		  defaultOp : classification::Operation = default.oclAsType(classification::Operation)
		in
		  defaultOp.ownedParameter-&gt;size() =
		  parameteredElement.ownedParameter-&gt;size() and
		  Sequence{1..defaultOp.ownedParameter-&gt;size()
		  }
		  -&gt;forAll(ix |
		    let p1 : classification::Parameter = defaultOp.ownedParameter-&gt;at(ix)
		    in
		      let
		        p2 : classification::Parameter = parameteredElement.ownedParameter-&gt;at(ix)
		      in p1.type = p2.type and p1.upper = p2.upper and p1.lower = p2.lower and p1.direction = p2.direction and p1.isOrdered = p2.isOrdered and p1.isUnique = p2.isUnique)

	context uml::Classification::Parameter

	inv in_and_out:
		(effect = UML::Classification::ParameterEffectKind::delete implies direction = UML::Classification::ParameterDirectionKind::_'in' or direction = UML::Classification::ParameterDirectionKind::inout
		) and
		(effect = UML::Classification::ParameterEffectKind::create implies direction = UML::Classification::ParameterDirectionKind::out or direction = UML::Classification::ParameterDirectionKind::inout or direction = UML::Classification::ParameterDirectionKind::return
		)

	inv not_exception:
		isException implies direction &lt;&gt; UML::Classification::ParameterDirectionKind::_'in' and direction &lt;&gt; UML::Classification::ParameterDirectionKind::inout

	inv connector_end:
		end-&gt;notEmpty() implies collaboration-&gt;notEmpty()

	inv reentrant_behaviors:
		isStream and behavior &lt;&gt; null implies not behavior.isReentrant

	inv stream_and_exception:
		not (isException and isStream)

	inv object_effect:
		type.oclIsKindOf(simpleClassifiers::DataType) implies effect = null

	context Parameter::default() : String

	body:
	(if self.type = String then defaultValue.stringValue() else null endif)

	context uml::Classification::Parameter::direction : uml::Classification::ParameterDirectionKind

	init:
	UML::Classification::ParameterDirectionKind::_'in'

	context uml::Classification::Parameter::isException : Boolean

	init:
	false

	context uml::Classification::Parameter::isStream : Boolean

	init:
	false

	context uml::Classification::ParameterSet

	inv same_parameterized_entity:
		parameter-&gt;forAll(p1, p2 | self.owner = p1.owner and self.owner = p2.owner and p1.direction = p2.direction)

	inv input:
		(
		  parameter-&gt;exists(direction = UML::Classification::ParameterDirectionKind::_'in') implies
		  behavioralFeature.ownedParameter-&gt;select(p | p.direction = UML::Classification::ParameterDirectionKind::_'in' and
		    p.parameterSet-&gt;isEmpty())
		  -&gt;forAll(isStream)
		) and
		(
		  parameter-&gt;exists(direction = UML::Classification::ParameterDirectionKind::out) implies
		  behavioralFeature.ownedParameter-&gt;select(p | p.direction = UML::Classification::ParameterDirectionKind::out and
		    p.parameterSet-&gt;isEmpty())
		  -&gt;forAll(isStream)
		)

	inv two_parameter_sets:
		parameter-&gt;forAll(
		  parameterSet-&gt;forAll(s1, s2 |
		    s1-&gt;size() =
		    s2-&gt;size() implies
		    s1.parameter-&gt;exists(p | not s2.parameter-&gt;includes(p))))

	context uml::Classification::Property

	inv subsetting_context_conforms:
		subsettedProperty-&gt;notEmpty() implies
		subsettingContext()
		-&gt;notEmpty() and
		subsettingContext()
		-&gt;forAll(sc |
		  subsettedProperty-&gt;forAll(sp |
		    sp.subsettingContext()
		    -&gt;exists(c | sc.conformsTo(c))))

	inv derived_union_is_read_only:
		isDerivedUnion implies isReadOnly

	inv multiplicity_of_composite:
		isComposite and association &lt;&gt; null implies opposite.upperBound() &lt;= 1

	inv redefined_property_inherited:
		redefinedProperty-&gt;notEmpty() implies
		redefinitionContext-&gt;notEmpty() and
		redefinedProperty-&gt;forAll(rp |
		  redefinitionContext-&gt;collect(fc | fc.allParents())
		  -&gt;asSet()
		  -&gt;collect(c | c.allFeatures())
		  -&gt;asSet()
		  -&gt;includes(rp))

	inv subsetting_rules:
		subsettedProperty-&gt;forAll(sp |
		  self.type.conformsTo(sp.type) and
		  (
		    self.upperBound()
		    -&gt;notEmpty() and
		    sp.upperBound()
		    -&gt;notEmpty() implies
		    self.upperBound() &lt;=
		    sp.upperBound()
		  ))

	inv binding_to_attribute:
		self.isAttribute() and
		templateParameterSubstitution-&gt;notEmpty() implies
		templateParameterSubstitution-&gt;forAll(ts |
		  ts.formal.oclIsKindOf(classification::Property) and
		  ts.formal.oclAsType(classification::Property)
		  .isAttribute())

	inv derived_union_is_derived:
		isDerivedUnion implies isDerived

	inv deployment_target:
		deployment-&gt;notEmpty() implies
		owner.oclIsKindOf(deployments::Node) and
		deployments::Node.allInstances()
		-&gt;exists(n | n.part-&gt;exists(p | p = self))

	inv subsetted_property_names:
		subsettedProperty-&gt;forAll(sp | sp.name &lt;&gt; name)

	inv type_of_opposite_end:
		opposite-&gt;notEmpty() and owningAssociation-&gt;isEmpty() implies classifier = opposite.type

	inv qualified_is_association_end:
		qualifier-&gt;notEmpty() implies association-&gt;notEmpty()

	context Property::isConsistentWith(redefiningElement : uml::Classification::RedefinableElement) : Boolean

	pre _'pre':
		redefiningElement.isRedefinitionContextValid(self)

	body:
	(redefiningElement.oclIsKindOf(Property) and 
  let prop : Property = redefiningElement.oclAsType(Property) in 
  (prop.type.conformsTo(self.type) and 
  ((prop.lowerBound()-&gt;notEmpty() and self.lowerBound()-&gt;notEmpty()) implies prop.lowerBound() &gt;= self.lowerBound()) and 
  ((prop.upperBound()-&gt;notEmpty() and self.upperBound()-&gt;notEmpty()) implies prop.lowerBound() &lt;= self.lowerBound()) and 
  (self.isComposite implies prop.isComposite)))

	context Property::isAttribute() : Boolean

	body:
	(not classifier-&gt;isEmpty())

	context Property::isCompatibleWith(p : uml::CommonStructure::ParameterableElement) : Boolean

	body:
	(self.oclIsKindOf(p.oclType()) and (p.oclIsKindOf(TypedElement) implies
self.type.conformsTo(p.oclAsType(TypedElement).type)))

	context Property::isComposite() : Boolean

	body:
	(aggregation = AggregationKind::composite)

	context Property::isNavigable() : Boolean

	body:
	(not classifier-&gt;isEmpty() or association.navigableOwnedEnd-&gt;includes(self))

	context Property::opposite() : uml::Classification::Property

	body:
	(if association &lt;&gt; null and association.memberEnd-&gt;size() = 2
then
    association.memberEnd-&gt;any(e | e &lt;&gt; self)
else
    null
endif)

	context Property::subsettingContext() : Set(uml::CommonStructure::Type)

	body:
	(if association &lt;&gt; null
then association.memberEnd-&gt;excluding(self)-&gt;collect(type)-&gt;asSet()
else 
  if classifier&lt;&gt;null
  then classifier-&gt;asSet()
  else Set{} 
  endif
endif)

	context uml::Classification::Property::aggregation : uml::Classification::AggregationKind

	init:
	UML::Classification::AggregationKind::none

	context uml::Classification::Property::isComposite : Boolean

	init:
	false

	context uml::Classification::Property::isDerived : Boolean

	init:
	false

	context uml::Classification::Property::isDerivedUnion : Boolean

	init:
	false

	context uml::Classification::Property::isID : Boolean

	init:
	false

	context uml::Classification::RedefinableElement

	inv redefinition_consistent:
		redefinedElement-&gt;forAll(re | re.isConsistentWith(self))

	inv non_leaf_redefinition:
		redefinedElement-&gt;forAll(re | not re.isLeaf)

	inv redefinition_context_valid:
		redefinedElement-&gt;forAll(re | self.isRedefinitionContextValid(re))

	context RedefinableElement::isConsistentWith(redefiningElement : uml::Classification::RedefinableElement) : Boolean

	pre _'pre':
		redefiningElement.isRedefinitionContextValid(self)

	body:
	(false)

	context RedefinableElement::isRedefinitionContextValid(redefinedElement : uml::Classification::RedefinableElement) :
	Boolean

	body:
	(redefinitionContext-&gt;exists(c | c.allParents()-&gt;includesAll(redefinedElement.redefinitionContext)))

	context uml::Classification::RedefinableElement::isLeaf : Boolean

	init:
	false

	context uml::Classification::RedefinableTemplateSignature

	inv redefines_parents:
		classifier.allParents()
		-&gt;forAll(c |
		  c.ownedTemplateSignature-&gt;notEmpty() implies
		  self-&gt;closure(extendedSignature)
		  -&gt;includes(c.ownedTemplateSignature))

	context RedefinableTemplateSignature::isConsistentWith(redefiningElement : uml::Classification::RedefinableElement) :
	Boolean

	pre _'pre':
		redefiningElement.isRedefinitionContextValid(self)

	body:
	(redefiningElement.oclIsKindOf(RedefinableTemplateSignature))

	context RedefinableTemplateSignature::inheritedParameter() : Set(uml::CommonStructure::TemplateParameter)

	body:
	(if extendedSignature-&gt;isEmpty() then Set{} else extendedSignature.parameter-&gt;asSet() endif)

	context uml::Classification::Feature::isStatic : Boolean

	init:
	false

	context uml::Classification::Generalization::isSubstitutable : Boolean

	init:
	true

	context uml::Classification::StructuralFeature::isReadOnly : Boolean

	init:
	false

endpackage

package uml::Actions

	context uml::Actions::ValueSpecificationAction

	inv multiplicity:
		result.is(1, 1)

	inv compatible_type:
		value.type.conformsTo(result.type)

	context uml::Actions::VariableAction

	inv scope_of_variable:
		variable.isAccessibleBy(self)

	context uml::Actions::WriteLinkAction

	inv allow_access:
		endData.end-&gt;exists(end | end.type = _'context' or end.visibility = UML::CommonStructure::VisibilityKind::public or end.visibility = UML::CommonStructure::VisibilityKind::protected and
		  endData.end-&gt;exists(other | other &lt;&gt; end and
		    _'context'.conformsTo(
		      other.type.oclAsType(classification::Classifier))))

	context uml::Actions::WriteStructuralFeatureAction

	inv multiplicity_of_result:
		result &lt;&gt; null implies result.is(1, 1)

	inv type_of_value:
		value &lt;&gt; null implies
		value.type.conformsTo(structuralFeature.type)

	inv multiplicity_of_value:
		value &lt;&gt; null implies value.is(1, 1)

	inv type_of_result:
		result &lt;&gt; null implies result.type = object.type

	context uml::Actions::WriteVariableAction

	inv value_type:
		value &lt;&gt; null implies value.type.conformsTo(variable.type)

	inv multiplicity:
		value &lt;&gt; null implies value.is(1, 1)

	context uml::Actions::AcceptCallAction

	inv result_pins:
		let
		  parameter : OrderedSet(classification::Parameter) = trigger.event-&gt;asSequence()
		  -&gt;first()
		  .oclAsType(commonBehavior::CallEvent)
		  .operation.inputParameters()
		in
		  result-&gt;size() =
		  parameter-&gt;size() and
		  Sequence{1..result-&gt;size()
		  }
		  -&gt;forAll(i |
		    parameter-&gt;at(i)
		    .type.conformsTo(result-&gt;at(i).type) and
		    parameter-&gt;at(i).isOrdered =
		    result-&gt;at(i).isOrdered and
		    parameter-&gt;at(i)
		    .compatibleWith(result-&gt;at(i)))

	inv trigger_call_event:
		trigger-&gt;size() = 1 and
		trigger-&gt;asSequence()
		-&gt;first()
		.event.oclIsKindOf(commonBehavior::CallEvent)

	inv unmarshall:
		isUnmarshall = true

	context uml::Actions::AcceptEventAction

	inv one_output_pin:
		not isUnmarshall and
		trigger-&gt;exists(
		  (
		    event.oclIsKindOf(commonBehavior::SignalEvent) or
		    event.oclIsKindOf(commonBehavior::TimeEvent)
		  )) implies
		output-&gt;size() = 1 and
		output-&gt;first()
		.is(1, 1)

	inv no_input_pins:
		input-&gt;size() = 0

	inv no_output_pins:
		self.oclIsTypeOf(actions::AcceptEventAction) and
		trigger-&gt;forAll(
		  (
		    event.oclIsKindOf(commonBehavior::ChangeEvent) or
		    event.oclIsKindOf(commonBehavior::CallEvent)
		  )) implies
		output-&gt;size() = 0

	inv unmarshall_signal_events:
		isUnmarshall and
		self.oclIsTypeOf(actions::AcceptEventAction) implies
		trigger-&gt;size() = 1 and
		trigger-&gt;asSequence()
		-&gt;first()
		.event.oclIsKindOf(commonBehavior::SignalEvent) and
		let
		  attribute : OrderedSet(classification::Property) = trigger-&gt;asSequence()
		  -&gt;first()
		  .event.oclAsType(commonBehavior::SignalEvent)
		  .signal.allAttributes()
		in
		  attribute-&gt;size() &gt; 0 and
		  result-&gt;size() =
		  attribute-&gt;size() and
		  Sequence{1..result-&gt;size()
		  }
		  -&gt;forAll(i |
		    result-&gt;at(i).type =
		    attribute-&gt;at(i).type and
		    result-&gt;at(i).isOrdered =
		    attribute-&gt;at(i).isOrdered and
		    result-&gt;at(i)
		    .includesMultiplicity(attribute-&gt;at(i)))

	inv conforming_type:
		not isUnmarshall implies
		result-&gt;isEmpty() or
		let type : commonStructure::Type = result-&gt;first().type
		in type = null or
		  trigger-&gt;forAll(
		    event.oclIsKindOf(commonBehavior::SignalEvent)) and
		  trigger.event.oclAsType(commonBehavior::SignalEvent)
		  .signal-&gt;forAll(s | s.conformsTo(type))

	context uml::Actions::AcceptEventAction::isUnmarshall : Boolean

	init:
	false

	context uml::Actions::ActionInputPin

	inv input_pin:
		fromAction.input-&gt;forAll(
		  oclIsKindOf(actions::ActionInputPin))

	inv one_output_pin:
		fromAction.output-&gt;size() = 1

	inv no_control_or_object_flow:
		fromAction.incoming-&gt;union(outgoing)
		-&gt;isEmpty() and
		fromAction.input.incoming-&gt;isEmpty() and
		fromAction.output.outgoing-&gt;isEmpty()

	context uml::Actions::AddStructuralFeatureValueAction

	inv required_value:
		value &lt;&gt; null

	inv insertAt_pin:
		if not structuralFeature.isOrdered
		then insertAt = null
		else not isReplaceAll implies insertAt &lt;&gt; null and
		  insertAt-&gt;forAll(type = UnlimitedNatural and
		    is(1, 1.oclAsType(UnlimitedNatural)))
		endif

	context uml::Actions::AddStructuralFeatureValueAction::isReplaceAll : Boolean

	init:
	false

	context uml::Actions::AddVariableValueAction

	inv required_value:
		value &lt;&gt; null

	inv insertAt_pin:
		if not variable.isOrdered
		then insertAt = null
		else not isReplaceAll implies insertAt &lt;&gt; null and
		  insertAt-&gt;forAll(type = UnlimitedNatural and
		    is(1, 1.oclAsType(UnlimitedNatural)))
		endif

	context uml::Actions::AddVariableValueAction::isReplaceAll : Boolean

	init:
	false

	context uml::Actions::BroadcastSignalAction

	inv number_of_arguments:
		argument-&gt;size() = signal.allAttributes()-&gt;size()

	inv type_ordering_multiplicity:
		let attribute : OrderedSet(classification::Property) = signal.allAttributes()
		in
		  Sequence{1..argument-&gt;size()
		  }
		  -&gt;forAll(i |
		    argument-&gt;at(i)
		    .type.conformsTo(attribute-&gt;at(i).type) and
		    argument-&gt;at(i).isOrdered =
		    attribute-&gt;at(i).isOrdered and
		    argument-&gt;at(i)
		    .compatibleWith(attribute-&gt;at(i)))

	inv no_onport:
		onPort = null

	context uml::Actions::CallAction

	inv argument_pins:
		let parameter : OrderedSet(classification::Parameter) = self.inputParameters()
		in
		  argument-&gt;size() =
		  parameter-&gt;size() and
		  Sequence{1..argument-&gt;size()
		  }
		  -&gt;forAll(i |
		    argument-&gt;at(i)
		    .type.conformsTo(parameter-&gt;at(i).type) and
		    argument-&gt;at(i).isOrdered =
		    parameter-&gt;at(i).isOrdered and
		    argument-&gt;at(i)
		    .compatibleWith(parameter-&gt;at(i)))

	inv result_pins:
		let
		  parameter : OrderedSet(classification::Parameter) = self.outputParameters()
		in
		  result-&gt;size() =
		  parameter-&gt;size() and
		  Sequence{1..result-&gt;size()
		  }
		  -&gt;forAll(i |
		    parameter-&gt;at(i)
		    .type.conformsTo(result-&gt;at(i).type) and
		    parameter-&gt;at(i).isOrdered =
		    result-&gt;at(i).isOrdered and
		    parameter-&gt;at(i)
		    .compatibleWith(result-&gt;at(i)))

	inv synchronous_call:
		result-&gt;notEmpty() implies isSynchronous

	context uml::Actions::CallAction::isSynchronous : Boolean

	init:
	true

	context uml::Actions::CallBehaviorAction

	inv no_onport:
		onPort = null

	context CallBehaviorAction::outputParameters() : OrderedSet(uml::Classification::Parameter)

	body:
	(behavior.outputParameters())

	context CallBehaviorAction::inputParameters() : OrderedSet(uml::Classification::Parameter)

	body:
	(behavior.inputParameters())

	context uml::Actions::CallOperationAction

	inv type_target_pin:
		if onPort = null
		then
		  target.type.oclAsType(classification::Classifier)
		  .allFeatures()
		  -&gt;includes(operation)
		else
		  target.type.oclAsType(classification::Classifier)
		  .allFeatures()
		  -&gt;includes(onPort) and
		  onPort.provided-&gt;union(onPort.required)
		  .allFeatures()
		  -&gt;includes(operation)
		endif

	context CallOperationAction::outputParameters() : OrderedSet(uml::Classification::Parameter)

	body:
	(operation.outputParameters())

	context CallOperationAction::inputParameters() : OrderedSet(uml::Classification::Parameter)

	body:
	(operation.inputParameters())

	context uml::Actions::Clause

	inv body_output_pins:
		_'body'.oclAsType(actions::Action)
		.allActions()
		.output-&gt;includesAll(bodyOutput)

	inv decider_output:
		test.oclAsType(actions::Action)
		.allActions()
		.output-&gt;includes(decider) and decider.type = Boolean and
		decider.is(1, 1)

	inv test_and_body:
		test-&gt;intersection(_'body')-&gt;isEmpty()

	context uml::Actions::ClearAssociationAction

	inv multiplicity:
		object.is(1, 1)

	inv same_type:
		association.memberEnd-&gt;exists(self.object.type.conformsTo(type))

	context uml::Actions::ClearStructuralFeatureAction

	inv type_of_result:
		result &lt;&gt; null implies result.type = object.type

	inv multiplicity_of_result:
		result &lt;&gt; null implies result.is(1, 1)

	context uml::Actions::ConditionalNode

	inv result_no_incoming:
		result.incoming-&gt;isEmpty()

	inv no_input_pins:
		input-&gt;isEmpty()

	inv one_clause_with_executable_node:
		node-&gt;select(oclIsKindOf(activities::ExecutableNode))
		.oclAsType(activities::ExecutableNode)
		-&gt;forAll(n |
		  self.clause-&gt;select(test-&gt;union(_'body')-&gt;includes(n))
		  -&gt;size() = 1)

	inv matching_output_pins:
		clause-&gt;forAll(
		  bodyOutput-&gt;size() =
		  self.result-&gt;size() and
		  Sequence{1..self.result-&gt;size()
		  }
		  -&gt;forAll(i |
		    bodyOutput-&gt;at(i)
		    .type.conformsTo(result-&gt;at(i).type) and
		    bodyOutput-&gt;at(i).isOrdered =
		    result-&gt;at(i).isOrdered and
		    bodyOutput-&gt;at(i).isUnique =
		    result-&gt;at(i).isUnique and
		    bodyOutput-&gt;at(i)
		    .compatibleWith(result-&gt;at(i))))

	inv executable_nodes:
		clause.test-&gt;union(clause._'body') =
		node-&gt;select(oclIsKindOf(activities::ExecutableNode))
		.oclAsType(activities::ExecutableNode)

	inv clause_no_predecessor:
		clause-&gt;closure(predecessorClause)
		-&gt;intersection(clause)
		-&gt;isEmpty()

	context ConditionalNode::allActions() : Set(uml::Actions::Action)

	body:
	(self-&gt;asSet())

	context uml::Actions::ConditionalNode::isAssured : Boolean

	init:
	false

	context uml::Actions::ConditionalNode::isDeterminate : Boolean

	init:
	false

	context uml::Actions::CreateLinkAction

	inv association_not_abstract:
		not self.association().isAbstract

	context uml::Actions::CreateLinkObjectAction

	inv multiplicity:
		result.is(1, 1)

	inv type_of_result:
		result.type = association()

	inv association_class:
		self.association()
		.oclIsKindOf(structuredClassifiers::AssociationClass)

	context uml::Actions::CreateObjectAction

	inv classifier_not_abstract:
		not classifier.isAbstract

	inv multiplicity:
		result.is(1, 1)

	inv classifier_not_association_class:
		not classifier.oclIsKindOf(structuredClassifiers::AssociationClass)

	inv same_type:
		result.type = classifier

	context uml::Actions::DestroyObjectAction

	inv multiplicity:
		target.is(1, 1)

	inv no_type:
		target.type = null

	context uml::Actions::DestroyObjectAction::isDestroyLinks : Boolean

	init:
	false

	context uml::Actions::DestroyObjectAction::isDestroyOwnedObjects : Boolean

	init:
	false

	context uml::Actions::ExpansionNode

	inv region_as_input_or_output:
		regionAsInput-&gt;notEmpty() xor regionAsOutput-&gt;notEmpty()

	context uml::Actions::InputPin

	inv outgoing_edges_structured_only:
		outgoing-&gt;notEmpty() implies action &lt;&gt; null and
		action.oclIsKindOf(actions::StructuredActivityNode) and
		action.oclAsType(actions::StructuredActivityNode)
		.allOwnedNodes()
		-&gt;includesAll(outgoing.target)

	context uml::Actions::LinkAction

	inv same_pins:
		inputValue-&gt;asBag() = endData.allPins()

	inv same_association:
		endData.end = self.association().memberEnd-&gt;asBag()

	inv not_static:
		endData-&gt;forAll(not end.isStatic)

	context LinkAction::association() : uml::StructuredClassifiers::Association

	body:
	(endData-&gt;asSequence()-&gt;first().end.association)

	context uml::Actions::LinkEndCreationData

	inv insertAt_pin:
		if not end.isOrdered
		then insertAt = null
		else not isReplaceAll = false implies insertAt &lt;&gt; null and
		  insertAt-&gt;forAll(type = UnlimitedNatural and is(1, 1))
		endif

	context LinkEndCreationData::allPins() : Bag(uml::Actions::InputPin)

	body:
	(self.LinkEndData::allPins()-&gt;including(insertAt))

	context uml::Actions::LinkEndCreationData::isReplaceAll : Boolean

	init:
	false

	context uml::Actions::LinkEndData

	inv same_type:
		value &lt;&gt; null implies value.type.conformsTo(end.type)

	inv multiplicity:
		value &lt;&gt; null implies value.is(1, 1)

	inv end_object_input_pin:
		value-&gt;excludesAll(qualifier.value)

	inv property_is_association_end:
		end.association &lt;&gt; null

	inv qualifiers:
		end.qualifier-&gt;includesAll(qualifier.qualifier)

	context LinkEndData::allPins() : Bag(uml::Actions::InputPin)

	body:
	(value-&gt;asBag()-&gt;union(qualifier.value))

	context uml::Actions::LinkEndDestructionData

	inv destroyAt_pin:
		if not end.isOrdered or end.isUnique or isDestroyDuplicates
		then destroyAt = null
		else destroyAt &lt;&gt; null and
		  destroyAt-&gt;forAll(type = UnlimitedNatural and is(1, 1))
		endif

	context LinkEndDestructionData::allPins() : Bag(uml::Actions::InputPin)

	body:
	(self.LinkEndData::allPins()-&gt;including(destroyAt))

	context uml::Actions::LinkEndDestructionData::isDestroyDuplicates : Boolean

	init:
	false

	context uml::Actions::LoopNode

	inv result_no_incoming:
		result.incoming-&gt;isEmpty()

	inv input_edges:
		loopVariableInput.outgoing-&gt;isEmpty()

	inv executable_nodes:
		setupPart-&gt;union(test)
		-&gt;union(bodyPart) =
		node-&gt;select(oclIsKindOf(activities::ExecutableNode))
		.oclAsType(activities::ExecutableNode)
		-&gt;asSet()

	inv body_output_pins:
		bodyPart.oclAsType(actions::Action)
		.allActions()
		.output-&gt;includesAll(bodyOutput)

	inv setup_test_and_body:
		setupPart-&gt;intersection(test)
		-&gt;isEmpty() and
		setupPart-&gt;intersection(bodyPart)
		-&gt;isEmpty() and
		test-&gt;intersection(bodyPart)
		-&gt;isEmpty()

	inv matching_output_pins:
		bodyOutput-&gt;size() =
		loopVariable-&gt;size() and
		Sequence{1..loopVariable-&gt;size()
		}
		-&gt;forAll(i |
		  bodyOutput-&gt;at(i)
		  .type.conformsTo(loopVariable-&gt;at(i).type) and
		  bodyOutput-&gt;at(i).isOrdered =
		  loopVariable-&gt;at(i).isOrdered and
		  bodyOutput-&gt;at(i).isUnique =
		  loopVariable-&gt;at(i).isUnique and
		  loopVariable-&gt;at(i)
		  .includesMultiplicity(bodyOutput-&gt;at(i)))

	inv matching_loop_variables:
		loopVariableInput-&gt;size() =
		loopVariable-&gt;size() and loopVariableInput.type = loopVariable.type and loopVariableInput.isUnique = loopVariable.isUnique and loopVariableInput.lower = loopVariable.lower and loopVariableInput.upper = loopVariable.upper

	inv matching_result_pins:
		result-&gt;size() =
		loopVariable-&gt;size() and result.type = loopVariable.type and result.isUnique = loopVariable.isUnique and result.lower = loopVariable.lower and result.upper = loopVariable.upper

	inv loop_variable_outgoing:
		allOwnedNodes()
		-&gt;includesAll(loopVariable.outgoing.target)

	context LoopNode::allActions() : Set(uml::Actions::Action)

	body:
	(self-&gt;asSet())

	context LoopNode::sourceNodes() : Set(uml::Activities::ActivityNode)

	body:
	(self.StructuredActivityNode::sourceNodes()-&gt;union(loopVariable))

	context uml::Actions::LoopNode::isTestedFirst : Boolean

	init:
	false

	context uml::Actions::OpaqueAction

	inv language_body_size:
		language-&gt;notEmpty() implies _'body'-&gt;size() = language-&gt;size()

	context uml::Actions::OutputPin

	inv incoming_edges_structured_only:
		incoming-&gt;notEmpty() implies action &lt;&gt; null and
		action.oclIsKindOf(actions::StructuredActivityNode) and
		action.oclAsType(actions::StructuredActivityNode)
		.allOwnedNodes()
		-&gt;includesAll(incoming.source)

	context uml::Actions::Pin

	inv control_pins:
		isControl implies isControlType

	inv not_unique:
		not isUnique

	context uml::Actions::Pin::isControl : Boolean

	init:
	false

	context uml::Actions::QualifierValue

	inv multiplicity_of_qualifier:
		value.is(1, 1)

	inv type_of_qualifier:
		value.type.conformsTo(qualifier.type)

	inv qualifier_attribute:
		linkEndData.end.qualifier-&gt;includes(qualifier)

	context uml::Actions::ReadExtentAction

	inv type_is_classifier:
		result.type = classifier

	inv multiplicity_of_result:
		result.is(0, *)

	context uml::Actions::ReadIsClassifiedObjectAction

	inv no_type:
		object.type = null

	inv multiplicity_of_output:
		result.is(1, 1)

	inv boolean_result:
		result.type = Boolean

	inv multiplicity_of_input:
		object.is(1, 1)

	context uml::Actions::ReadIsClassifiedObjectAction::isDirect : Boolean

	init:
	false

	context uml::Actions::ReadLinkAction

	inv type_and_ordering:
		self.openEnd()
		-&gt;forAll(type = result.type and isOrdered = result.isOrdered)

	inv compatible_multiplicity:
		self.openEnd()-&gt;first().compatibleWith(result)

	inv visibility:
		let openEnd : classification::Property = self.openEnd()-&gt;first()
		in openEnd.visibility = UML::CommonStructure::VisibilityKind::public or
		  endData-&gt;exists(oed | oed.end &lt;&gt; openEnd and
		    (_'context' = oed.end.type or openEnd.visibility = UML::CommonStructure::VisibilityKind::protected and
		      _'context'.conformsTo(
		        oed.end.type.oclAsType(classification::Classifier))
		    ))

	inv one_open_end:
		self.openEnd()-&gt;size() = 1

	inv navigable_open_end:
		self.openEnd()-&gt;first().isNavigable()

	context ReadLinkAction::openEnd() : OrderedSet(uml::Classification::Property)

	body:
	(endData-&gt;select(value=null).end-&gt;asOrderedSet())

	context uml::Actions::ReadLinkObjectEndAction

	inv property:
		end.association &lt;&gt; null

	inv multiplicity_of_object:
		object.is(1, 1)

	inv ends_of_association:
		end.association.memberEnd-&gt;forAll(e | not e.isStatic)

	inv type_of_result:
		result.type = end.type

	inv multiplicity_of_result:
		result.is(1, 1)

	inv type_of_object:
		object.type = end.association

	inv association_of_association:
		end.association.oclIsKindOf(structuredClassifiers::AssociationClass)

	context uml::Actions::ReadLinkObjectEndQualifierAction

	inv multiplicity_of_object:
		object.is(1, 1)

	inv type_of_object:
		object.type = qualifier.associationEnd.association

	inv multiplicity_of_qualifier:
		qualifier.is(1, 1)

	inv ends_of_association:
		qualifier.associationEnd.association.memberEnd-&gt;forAll(e | not e.isStatic)

	inv multiplicity_of_result:
		result.is(1, 1)

	inv same_type:
		result.type = qualifier.type

	inv association_of_association:
		qualifier.associationEnd.association.oclIsKindOf(structuredClassifiers::AssociationClass)

	inv qualifier_attribute:
		qualifier.associationEnd &lt;&gt; null

	context uml::Actions::ReadSelfAction

	inv contained:
		_'context' &lt;&gt; null

	inv multiplicity:
		result.is(1, 1)

	inv not_static:
		let behavior : commonBehavior::Behavior = self.containingBehavior()
		in behavior.specification &lt;&gt; null implies not behavior.specification.isStatic

	inv type:
		result.type = _'context'

	context uml::Actions::ReadStructuralFeatureAction

	inv multiplicity:
		structuralFeature.compatibleWith(result)

	inv type_and_ordering:
		result.type = structuralFeature.type and result.isOrdered = structuralFeature.isOrdered

	context uml::Actions::ReadVariableAction

	inv type_and_ordering:
		result.type = variable.type and result.isOrdered = variable.isOrdered

	inv compatible_multiplicity:
		variable.compatibleWith(result)

	context uml::Actions::ReclassifyObjectAction

	inv input_pin:
		object.type = null

	inv classifier_not_abstract:
		not newClassifier-&gt;exists(isAbstract)

	inv multiplicity:
		object.is(1, 1)

	context uml::Actions::ReclassifyObjectAction::isReplaceAll : Boolean

	init:
	false

	context uml::Actions::ReduceAction

	inv reducer_inputs_output:
		let inputs : OrderedSet(classification::Parameter) = reducer.inputParameters()
		in
		  let
		    outputs : OrderedSet(classification::Parameter) = reducer.outputParameters()
		  in
		    inputs-&gt;size() = 2 and
		    outputs-&gt;size() = 1 and
		    inputs.type-&gt;forAll(t |
		      (
		        outputs.type-&gt;forAll(conformsTo(t)) and
		        collection.upperBound() &gt; 1 implies
		        collection.type.conformsTo(t)
		      ))

	inv input_type_is_collection:
		null

	inv output_types_are_compatible:
		reducer.outputParameters()
		.type-&gt;forAll(conformsTo(result.type))

	context uml::Actions::ReduceAction::isOrdered : Boolean

	init:
	false

	context uml::Actions::RemoveStructuralFeatureValueAction

	inv removeAt_and_value:
		if structuralFeature.isOrdered and not structuralFeature.isUnique and not isRemoveDuplicates
		then value = null and removeAt &lt;&gt; null and removeAt.type = UnlimitedNatural and
		  removeAt.is(1, 1)
		else removeAt = null and value &lt;&gt; null
		endif

	context uml::Actions::RemoveStructuralFeatureValueAction::isRemoveDuplicates : Boolean

	init:
	false

	context uml::Actions::RemoveVariableValueAction

	inv removeAt_and_value:
		if variable.isOrdered and not variable.isUnique and not isRemoveDuplicates
		then value = null and removeAt &lt;&gt; null and removeAt.type = UnlimitedNatural and
		  removeAt.is(1, 1)
		else removeAt = null and value &lt;&gt; null
		endif

	context uml::Actions::RemoveVariableValueAction::isRemoveDuplicates : Boolean

	init:
	false

	context uml::Actions::ReplyAction

	inv pins_match_parameter:
		let
		  parameter : OrderedSet(classification::Parameter) = replyToCall.event.oclAsType(commonBehavior::CallEvent)
		  .operation.outputParameters()
		in
		  replyValue-&gt;size() =
		  parameter-&gt;size() and
		  Sequence{1..replyValue-&gt;size()
		  }
		  -&gt;forAll(i |
		    replyValue-&gt;at(i)
		    .type.conformsTo(parameter-&gt;at(i).type) and
		    replyValue-&gt;at(i).isOrdered =
		    parameter-&gt;at(i).isOrdered and
		    replyValue-&gt;at(i)
		    .compatibleWith(parameter-&gt;at(i)))

	inv event_on_reply_to_call_trigger:
		replyToCall.event.oclIsKindOf(commonBehavior::CallEvent)

	context uml::Actions::SendObjectAction

	inv type_target_pin:
		onPort &lt;&gt; null implies
		target.type.oclAsType(classification::Classifier)
		.allFeatures()
		-&gt;includes(onPort)

	context uml::Actions::SendSignalAction

	inv type_ordering_multiplicity:
		let attribute : OrderedSet(classification::Property) = signal.allAttributes()
		in
		  Sequence{1..argument-&gt;size()
		  }
		  -&gt;forAll(i |
		    argument-&gt;at(i)
		    .type.conformsTo(attribute-&gt;at(i).type) and
		    argument-&gt;at(i).isOrdered =
		    attribute-&gt;at(i).isOrdered and
		    argument-&gt;at(i)
		    .compatibleWith(attribute-&gt;at(i)))

	inv number_order:
		argument-&gt;size() = signal.allAttributes()-&gt;size()

	inv type_target_pin:
		not onPort-&gt;isEmpty() implies
		target.type.oclAsType(classification::Classifier)
		.allFeatures()
		-&gt;includes(onPort)

	context uml::Actions::StartClassifierBehaviorAction

	inv multiplicity:
		object.is(1, 1)

	inv type_has_classifier:
		object.type-&gt;notEmpty() implies
		object.type.oclIsKindOf(simpleClassifiers::BehavioredClassifier) and
		object.type.oclAsType(simpleClassifiers::BehavioredClassifier).classifierBehavior &lt;&gt; null

	context uml::Actions::StartObjectBehaviorAction

	inv multiplicity_of_object:
		object.is(1, 1)

	inv type_of_object:
		self.behavior() &lt;&gt; null

	inv no_onport:
		onPort-&gt;isEmpty()

	context StartObjectBehaviorAction::outputParameters() : OrderedSet(uml::Classification::Parameter)

	body:
	(self.behavior().outputParameters())

	context StartObjectBehaviorAction::inputParameters() : OrderedSet(uml::Classification::Parameter)

	body:
	(self.behavior().inputParameters())

	context StartObjectBehaviorAction::behavior() : uml::CommonBehavior::Behavior

	body:
	(if object.type.oclIsKindOf(Behavior) then
  object.type.oclAsType(Behavior)
else if object.type.oclIsKindOf(BehavioredClassifier) then
  object.type.oclAsType(BehavioredClassifier).classifierBehavior
else
  null
endif
endif)

	context uml::Actions::StructuralFeatureAction

	inv multiplicity:
		object.is(1, 1)

	inv object_type:
		object.type.oclAsType(classification::Classifier)
		.allFeatures()
		-&gt;includes(structuralFeature) or
		object.type.conformsTo(
		  structuralFeature.oclAsType(classification::Property).opposite.type)

	inv visibility:
		structuralFeature.visibility = UML::CommonStructure::VisibilityKind::public or
		_'context'.allFeatures()
		-&gt;includes(structuralFeature) or structuralFeature.visibility = UML::CommonStructure::VisibilityKind::protected and
		_'context'.conformsTo(
		  structuralFeature.oclAsType(classification::Property)
		  .opposite.type.oclAsType(classification::Classifier))

	inv not_static:
		not structuralFeature.isStatic

	inv one_featuring_classifier:
		structuralFeature.featuringClassifier-&gt;size() = 1

	context uml::Actions::StructuredActivityNode

	inv output_pin_edges:
		output.outgoing.target-&gt;excludesAll(allOwnedNodes() - input)

	inv edges:
		edge =
		self.sourceNodes()
		.outgoing-&gt;intersection(self.allOwnedNodes().incoming)
		-&gt;union(
		  self.targetNodes()
		  .incoming-&gt;intersection(self.allOwnedNodes().outgoing))
		-&gt;asSet()

	inv input_pin_edges:
		input.incoming.source-&gt;excludesAll(allOwnedNodes() - output)

	context StructuredActivityNode::allActions() : Set(uml::Actions::Action)

	body:
	(node-&gt;select(oclIsKindOf(Action)).oclAsType(Action).allActions()-&gt;including(self)-&gt;asSet())

	context StructuredActivityNode::allOwnedNodes() : Set(uml::Activities::ActivityNode)

	body:
	(self.Action::allOwnedNodes()-&gt;union(node)-&gt;union(node-&gt;select(oclIsKindOf(Action)).oclAsType(Action).allOwnedNodes())-&gt;asSet())

	context StructuredActivityNode::sourceNodes() : Set(uml::Activities::ActivityNode)

	body:
	(node-&gt;union(input.oclAsType(ActivityNode)-&gt;asSet())-&gt;
  union(node-&gt;select(oclIsKindOf(Action)).oclAsType(Action).output)-&gt;asSet())

	context StructuredActivityNode::targetNodes() : Set(uml::Activities::ActivityNode)

	body:
	(node-&gt;union(output.oclAsType(ActivityNode)-&gt;asSet())-&gt;
  union(node-&gt;select(oclIsKindOf(Action)).oclAsType(Action).input)-&gt;asSet())

	context StructuredActivityNode::containingActivity() : uml::Activities::Activity

	body:
	(self.Action::containingActivity())

	context uml::Actions::StructuredActivityNode::mustIsolate : Boolean

	init:
	false

	context uml::Actions::TestIdentityAction

	inv multiplicity:
		first.is(1, 1) and second.is(1, 1)

	inv no_type:
		first.type = null and second.type = null

	inv result_is_boolean:
		result.type = Boolean

	context uml::Actions::UnmarshallAction

	inv structural_feature:
		unmarshallType.allAttributes()-&gt;size() &gt;= 1

	inv number_of_result:
		unmarshallType.allAttributes()-&gt;size() = result-&gt;size()

	inv type_ordering_and_multiplicity:
		let
		  attribute : OrderedSet(classification::Property) = unmarshallType.allAttributes()
		in
		  Sequence{1..result-&gt;size()
		  }
		  -&gt;forAll(i |
		    attribute-&gt;at(i)
		    .type.conformsTo(result-&gt;at(i).type) and
		    attribute-&gt;at(i).isOrdered =
		    result-&gt;at(i).isOrdered and
		    attribute-&gt;at(i)
		    .compatibleWith(result-&gt;at(i)))

	inv multiplicity_of_object:
		object.is(1, 1)

	inv object_type:
		object.type.conformsTo(unmarshallType)

	context uml::Actions::ValuePin

	inv no_incoming_edges:
		incoming-&gt;isEmpty()

	inv compatible_type:
		value.type.conformsTo(type)

	context Action::_'context'() : uml::Classification::Classifier

	body:
	(let behavior: Behavior = self.containingBehavior() in
if behavior=null then null
else if behavior._'context' = null then behavior
else behavior._'context'
endif
endif)

	context Action::allActions() : Set(uml::Actions::Action)

	body:
	(self-&gt;asSet())

	context Action::allOwnedNodes() : Set(uml::Activities::ActivityNode)

	body:
	(input.oclAsType(Pin)-&gt;asSet()-&gt;union(output-&gt;asSet()))

	context Action::containingBehavior() : uml::CommonBehavior::Behavior

	body:
	(if inStructuredNode&lt;&gt;null then inStructuredNode.containingBehavior() 
else if activity&lt;&gt;null then activity
else interaction 
endif
endif
)

	context uml::Actions::Action::isLocallyReentrant : Boolean

	init:
	false

	context uml::Actions::ExpansionRegion::mode : uml::Actions::ExpansionKind

	init:
	UML::Actions::ExpansionKind::iterative

endpackage</code></pre></td></tr></table>
</div> <!-- class=content -->
</div>
</main> <!-- /#main-content-container-row -->
<p id="back-to-top">
  <a class="visible-xs" href="#top">Back to the top</a>
</p>
<footer role="contentinfo" id="solstice-footer">
  <div class="container">
    <div class="row">
      <section class="col-sm-offset-1 col-xs-11 col-sm-7 col-md-6 col-md-offset-0 hidden-print" id="footer-eclipse-foundation">
            <h2 class="section-title">Eclipse Foundation</h2>
    <ul class="nav">
    <li><a href="https://www.eclipse.org/org/">About us</a></li>
    <li><a href="https://www.eclipse.org/org/foundation/contact.php">Contact Us</a></li>
    <li><a href="https://www.eclipse.org/donate">Donate</a></li>
      <li><a href="https://www.eclipse.org/org/documents/">Governance</a></li>
      <li><a href="https://www.eclipse.org/artwork/">Logo and Artwork</a></li>
      <li><a href="https://www.eclipse.org/org/foundation/directors.php">Board of Directors</a></li>
    </ul>      </section>
      <section class="col-sm-offset-1 col-xs-11 col-sm-7 col-md-6 col-md-offset-0 hidden-print" id="footer-legal">
            <h2 class="section-title">Legal</h2>
    <ul class="nav">
      <li><a href="https://www.eclipse.org/legal/privacy.php">Privacy Policy</a></li>
      <li><a href="https://www.eclipse.org/legal/termsofuse.php">Terms of Use</a></li>
      <li><a href="https://www.eclipse.org/legal/copyright.php">Copyright Agent</a></li>
      <li><a href="https://www.eclipse.org/org/documents/epl-v10.php">Eclipse Public License </a></li>
      <li><a href="https://www.eclipse.org/legal/">Legal Resources </a></li>
    </ul>      </section>
      <section class="col-sm-offset-1 col-xs-11 col-sm-7 col-md-6 col-md-offset-0 hidden-print" id="footer-useful-links">
            <h2 class="section-title">Useful Links</h2>
    <ul class="nav">
      <li><a href="https://bugs.eclipse.org/bugs/">Report a Bug</a></li>
      <li><a href="//help.eclipse.org/">Documentation</a></li>
      <li><a href="https://www.eclipse.org/contribute/">How to Contribute</a></li>
      <li><a href="https://www.eclipse.org/mail/">Mailing Lists</a></li>
      <li><a href="https://www.eclipse.org/forums/">Forums</a></li>
      <li><a href="//marketplace.eclipse.org">Marketplace</a></li>
    </ul>      </section>
      <section class="col-sm-offset-1 col-xs-11 col-sm-7 col-md-6 col-md-offset-0 hidden-print" id="footer-other">
            <h2 class="section-title">Other</h2>
    <ul class="nav">
      <li><a href="https://www.eclipse.org/ide/">IDE and Tools</a></li>
      <li><a href="https://www.eclipse.org/projects">Community of Projects</a></li>
      <li><a href="https://www.eclipse.org/org/workinggroups/">Working Groups</a></li>
    </ul>

    <ul class="list-inline social-media">
      <li><a href="https://twitter.com/EclipseFdn"><i class="fa fa-twitter-square"></i></a></li>
      <li><a href="https://plus.google.com/+Eclipse"><i class="fa fa-google-plus-square"></i></a></li>
      <li><a href="https://www.facebook.com/eclipse.org"><i class="fa fa-facebook-square"></i> </a></li>
      <li><a href="https://www.youtube.com/user/EclipseFdn"><i class="fa fa-youtube-square"></i></a></li>
    </ul>      </section>
            <div id="copyright" class="col-sm-offset-1 col-sm-14 col-md-24 col-md-offset-0">
        <span class="hidden-print"><div class="wrapper-logo-eclipse-white"><a href="https://www.eclipse.org"><img class="logo-eclipse-white img-responsive" alt="logo" src="/eclipse.org-common/themes/solstice/public/images/logo/eclipse-logo-bw-332x78.png"/></a></div></span>
        <p id="copyright-text">Copyright &copy; 2016 The Eclipse Foundation. All Rights Reserved.</p>
      </div>      <a href="#" class="scrollup">Back to the top</a>
    </div>
  </div>
</footer>
<!-- Placed at the end of the document so the pages load faster -->
<script src="/eclipse.org-common/themes/solstice/public/javascript/main.min.js"></script>
</div>
</div> <!-- id=cgit -->
</body>
</html>
