import 'KiamaCS.ecore'
import 'KiamaAS.ecore'


package kiamacs

context TopCS
def : ast() : kiamaas::Top =
	kiamaas::Top {
		node = node.ast()
	}
	
context NodeCS
def : ast() : kiamaas::Node =
	invalid -- to be overriden
	
context PlusCS
def : ast() : kiamaas::Plus =
	kiamaas::Plus {	
		left = left.ast(),
		right = right.ast(),
		deep = let container = ast().oclContainer() in 
				if container.oclIsKindOf(kiamaas::Node)  then container.oclAsType(kiamaas::Node).deep + 1 else 0 endif,
		height = ast().left.height->including(ast().right.height)->max() + 1
		--height = left.ast().height->including(right.ast().height)->max() + 1    
	}

context NumCS
def : ast() : kiamaas::Num = 
	kiamaas::Num {
		value = value,
		deep = let container = ast().oclContainer() in 
				if container.oclIsKindOf(kiamaas::Node)  then container.oclAsType(kiamaas::Node).deep + 1 else 0 endif,
		height = 0
	}
	
endpackage


-- Needed to initialize maps for AS metamodel
package kiamacs
	
endpackage