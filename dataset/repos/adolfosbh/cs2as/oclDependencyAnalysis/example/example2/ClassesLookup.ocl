import 'Environment.ecore'
import 'Classes.ecore'
import 'ClassesCS.ecore'

package ocl

context OclElement
def: parentEnv() : env::Environment =
	let parent = oclContainer() in if parent = null then env::Environment { } else parent._env(self) endif

def : _env(child : OclElement) : env::Environment =
	_env_Class(child).mergeEnv(
	_env_Package(child))

def : _env_Class(child : OclElement) : env::Environment =
	parentEnv()

def : _env_Package(child : OclElement) : env::Environment =
	parentEnv()
	
def : lookupPackage(path : classescs::PathElementCS) : classes::Package =
	self._env(null).namedElements->selectByKind(classes::Package)->select(name = path.name)
		
def : lookupPackage(pathSeq : OrderedSet(classescs::PathElementCS)) : classes::Package =
	if pathSeq->size() = 1 
	then lookupPackage(pathSeq->first())
	else lookupPackage(pathSeq->subOrderedSet(1,pathSeq->size()-1)).lookupPackage(pathSeq->last())
	endif
	
def : lookupClass(path : classescs::PathElementCS) : classes::Class=
	self._env(null).namedElements->selectByKind(classes::Class)->select(name = path.name)
	
def : lookupClass(classPathName : classescs::PathNameCS) : classes::Class = 
	let pathSeq = classPathName.path
	in
		if pathSeq->size() = 1
		then lookupClass(pathSeq->first())
		else lookupPackage(pathSeq->subOrderedSet(1,pathSeq->size()-1)).lookupClass(pathSeq->last())
		endif
	
endpackage

package classes

context Package
def : _env(child : ocl::OclElement) : env::Environment =
	_env_Class(child).mergeEnv(
	_env_Package(child))

def : _env_Class(child : ocl::OclElement) : env::Environment =
	parentEnv().nestedEnv().
		addElements(self.ownedClasses)

def : _env_Package(child : ocl::OclElement) : env::Environment =
	parentEnv().nestedEnv().
		addElements(self.ownedPackages)
		
context Root
def : _env(child : ocl::OclElement) : env::Environment =
	_env_Package(child)

def : _env_Package(child : ocl::OclElement) : env::Environment =
	parentEnv().nestedEnv().
		addElements(self.ownedPackages)

endpackage

